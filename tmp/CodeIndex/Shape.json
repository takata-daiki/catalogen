{
  "matchterm": "Shape",
  "previouspage": null,
  "searchterm": "Shape",
  "query": "Shape",
  "language_filters": [
    {
      "count": 30901,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 30901,
  "results": [
    {
      "repo": "https://bitbucket.org/tari/prizm-gcc.git",
      "language": "Java",
      "linescount": 206,
      "location": "/libjava/classpath/java/awt",
      "name": "prizm-gcc",
      "url": "https://searchcode.com/codesearch/view/37948108/",
      "md5hash": "f56fcf68e2a0707369bc50e0bfc764b3",
      "lines": {
        "64": " */",
        "1": "/* Shape.java -- the classic Object-Oriented shape interface",
        "2": "   Copyright (C) 1999, 2002, 2005, 2006,  Free Software Foundation, Inc.",
        "67": "  /**",
        "68": "   * Returns a <code>Rectange</code> that bounds the shape. There is no",
        "69": "   * guarantee that this is the minimum bounding box, particularly if",
        "70": "   * the shape overflows the finite integer range of a bound. Generally,",
        "65": "public interface Shape",
        "72": "   *",
        "73": "   * @return the shape's bounding box",
        "46": "/**",
        "47": " * This interface represents an abstract shape. The shape is described by",
        "48": " * a {@link PathIterator}, and has callbacks for determining bounding box,",
        "49": " * where points and rectangles lie in relation to the shape, and tracing",
        "53": " * adjacent points in the increasing x or y direction are completely inside.",
        "54": " * Unclosed shapes are considered as implicitly closed when performing"
      },
      "id": 37948108,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/bluezoo/gcc.git",
      "language": "Java",
      "linescount": 206,
      "location": "/libjava/classpath/java/awt",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/46813745/",
      "md5hash": "f56fcf68e2a0707369bc50e0bfc764b3",
      "lines": {
        "64": " */",
        "1": "/* Shape.java -- the classic Object-Oriented shape interface",
        "2": "   Copyright (C) 1999, 2002, 2005, 2006,  Free Software Foundation, Inc.",
        "67": "  /**",
        "68": "   * Returns a <code>Rectange</code> that bounds the shape. There is no",
        "69": "   * guarantee that this is the minimum bounding box, particularly if",
        "70": "   * the shape overflows the finite integer range of a bound. Generally,",
        "65": "public interface Shape",
        "72": "   *",
        "73": "   * @return the shape's bounding box",
        "46": "/**",
        "47": " * This interface represents an abstract shape. The shape is described by",
        "48": " * a {@link PathIterator}, and has callbacks for determining bounding box,",
        "49": " * where points and rectangles lie in relation to the shape, and tracing",
        "53": " * adjacent points in the increasing x or y direction are completely inside.",
        "54": " * Unclosed shapes are considered as implicitly closed when performing"
      },
      "id": 46813745,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/harsha5500/tetris-java.git",
      "language": "Java",
      "linescount": 95,
      "location": "/TetrisGame/src",
      "name": "tetris-java",
      "url": "https://searchcode.com/codesearch/view/49646999/",
      "md5hash": "a7ca104712d40470a4309768fd9fce63",
      "lines": {
        "1": "/**",
        "2": " * Shape abstract class represents Shape type",
        "10": " */",
        "11": "public abstract class Shape implements Serializable {",
        "12": "\t/**",
        "13": "\t * shape bit pattern represents the shape",
        "14": "\t */",
        "15": "\tprivate Integer[][] shapeBitPattern;",
        "17": "\t/**",
        "18": "\t * @return the shapeBitPattern",
        "20": "\t */",
        "21": "\tpublic Integer[][] getShapeBitPattern() {",
        "22": "\t\t// begin-user-code",
        "23": "\t\treturn shapeBitPattern;",
        "27": "\t/**",
        "28": "\t * @param theShapeBitPattern"
      },
      "id": 49646999,
      "filename": "Shape.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 338,
      "location": "/engine_java/000_Engine_G2D/new_g2d/com/g2d/geom",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11371512/",
      "md5hash": "79ad56db1174b268d044757f53c8e3a9",
      "lines": {
        "1": "/*",
        "2": " * @(#)Shape.java\t1.24 06/02/24",
        "11": "/**",
        "12": " * The <code>Shape</code> interface provides definitions for objects ",
        "13": " * that represent some form of geometric shape.  The <code>Shape</code>",
        "14": " * is described by a {@link PathIterator} object, which can express the ",
        "15": " * outline of the <code>Shape</code> as well as a rule for determining ",
        "16": " * how the outline divides the 2D plane into interior and exterior ",
        "17": " * points.  Each <code>Shape</code> object provides callbacks to get the ",
        "19": " * rectangles lie partly or entirely within the interior",
        "20": " * of the <code>Shape</code>, and retrieve a <code>PathIterator</code>",
        "21": " * object that describes the trajectory path of the <code>Shape</code>",
        "22": " * outline.",
        "25": " * A point is considered to lie inside a ",
        "26": " * <code>Shape</code> if and only if:"
      },
      "id": 11371512,
      "filename": "Shape.java"
    },
    {
      "repo": "git://github.com/StuartMacKay/transform-swf.git",
      "language": "Java",
      "linescount": 250,
      "location": "/src/main/java/com/flagstone/transform/shape",
      "name": "transform-swf",
      "url": "https://searchcode.com/codesearch/view/16059468/",
      "md5hash": "259e2270bb3e02e2c6581510db0199d7",
      "lines": {
        "32": "package com.flagstone.transform.shape;",
        "1": "/*",
        "2": " * Shape.java",
        "68": "    /** Format string used in toString() method. */",
        "69": "    private static final String FORMAT = \"Shape: { records=%s}\";",
        "71": "    /**",
        "72": "     * Decode a ShapeData object into the set of ShapeRecord objects that",
        "73": "     * describe how a shape is drawn.",
        "47": "/**",
        "48": " * Shape is a container class for the shape objects (Line, Curve, ShapeStyle",
        "49": " * and ShapeStyle2 objects) that describe how a particular shape is drawn.",
        "50": " *",
        "51": " * <p>",
        "52": " * Shapes are used in shape and font definitions. The Shape class is used to",
        "56": " */",
        "57": "public final class Shape implements SWFEncodeable, Copyable<Shape> {",
        "31": ""
      },
      "id": 16059468,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/lpimports/gcc.git",
      "language": "Java",
      "linescount": 206,
      "location": "/libjava/classpath/java/awt",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/127596791/",
      "md5hash": "f56fcf68e2a0707369bc50e0bfc764b3",
      "lines": {
        "64": " */",
        "1": "/* Shape.java -- the classic Object-Oriented shape interface",
        "2": "   Copyright (C) 1999, 2002, 2005, 2006,  Free Software Foundation, Inc.",
        "67": "  /**",
        "68": "   * Returns a <code>Rectange</code> that bounds the shape. There is no",
        "69": "   * guarantee that this is the minimum bounding box, particularly if",
        "70": "   * the shape overflows the finite integer range of a bound. Generally,",
        "65": "public interface Shape",
        "72": "   *",
        "73": "   * @return the shape's bounding box",
        "46": "/**",
        "47": " * This interface represents an abstract shape. The shape is described by",
        "48": " * a {@link PathIterator}, and has callbacks for determining bounding box,",
        "49": " * where points and rectangles lie in relation to the shape, and tracing",
        "53": " * adjacent points in the increasing x or y direction are completely inside.",
        "54": " * Unclosed shapes are considered as implicitly closed when performing"
      },
      "id": 127596791,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/vaporoid/gcc.git",
      "language": "Java",
      "linescount": 206,
      "location": "/libjava/classpath/java/awt",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/130225503/",
      "md5hash": "f56fcf68e2a0707369bc50e0bfc764b3",
      "lines": {
        "64": " */",
        "1": "/* Shape.java -- the classic Object-Oriented shape interface",
        "2": "   Copyright (C) 1999, 2002, 2005, 2006,  Free Software Foundation, Inc.",
        "67": "  /**",
        "68": "   * Returns a <code>Rectange</code> that bounds the shape. There is no",
        "69": "   * guarantee that this is the minimum bounding box, particularly if",
        "70": "   * the shape overflows the finite integer range of a bound. Generally,",
        "65": "public interface Shape",
        "72": "   *",
        "73": "   * @return the shape's bounding box",
        "46": "/**",
        "47": " * This interface represents an abstract shape. The shape is described by",
        "48": " * a {@link PathIterator}, and has callbacks for determining bounding box,",
        "49": " * where points and rectangles lie in relation to the shape, and tracing",
        "53": " * adjacent points in the increasing x or y direction are completely inside.",
        "54": " * Unclosed shapes are considered as implicitly closed when performing"
      },
      "id": 130225503,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/huynv_55/lab09",
      "language": "Java",
      "linescount": 59,
      "location": "",
      "name": "lab09",
      "url": "https://searchcode.com/codesearch/view/134019974/",
      "md5hash": "e8bdd1857e9f923de58c75d6b828efc2",
      "lines": {
        "32": "    \ttry{",
        "1": "/**",
        "2": " * @(#)Shape.java",
        "33": "    \t\tos.write(\"Shape\\n\");",
        "9": "",
        "10": "public class Shape {",
        "15": "\tprotected int color; // mau",
        "16": "    public Shape() {",
        "17": "    }",
        "18": "    public Shape(int a,int p,int c){",
        "24": "    public void draw(){ // ve hinh",
        "25": "    \tSystem.out.println(\"draw a Shape\");"
      },
      "id": 134019974,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/huynv_55/lab05",
      "language": "Java",
      "linescount": 45,
      "location": "",
      "name": "lab05",
      "url": "https://searchcode.com/codesearch/view/133331245/",
      "md5hash": "436645b40b6ef31d8e83ada069d87d3e",
      "lines": {
        "16": "    public Shape() {",
        "1": "/**",
        "2": " * @(#)Shape.java",
        "25": "    \tSystem.out.println(\"draw a Shape\");",
        "17": "    }",
        "24": "    public void draw(){ // ve hinh",
        "9": "",
        "10": "public class Shape {",
        "18": "    public Shape(int a,int p,int c){",
        "15": "\tprotected int color; // mau"
      },
      "id": 133331245,
      "filename": "Shape.java"
    },
    {
      "repo": "https://github.com/dxiao/PPBunnies.git",
      "language": "Java",
      "linescount": 761,
      "location": "/slick/trunk/Slick/src/org/newdawn/slick/geom",
      "name": "PPBunnies",
      "url": "https://searchcode.com/codesearch/view/74531721/",
      "md5hash": "d23d95f95f9a8255b18be7cc3a1c2584",
      "lines": {
        "5": "/**",
        "6": " * The description of any 2D shape that can be transformed. The points provided approximate the intent",
        "7": " * of the shape. ",
        "8": " * ",
        "10": " */",
        "11": "public abstract class Shape implements Serializable {",
        "15": "    protected float center[];",
        "16": "    /** The left most point of this shape. */",
        "17": "    protected float x;",
        "18": "    /** The top most point of this shape. */",
        "19": "    protected float y;",
        "20": "    /** The right most point of this shape */",
        "21": "    protected float maxX;",
        "22": "    /** The bottom most point of this shape */",
        "23": "    protected float maxY;"
      },
      "id": 74531721,
      "filename": "Shape.java"
    },
    {
      "repo": "https://github.com/ekem/Terasology.git",
      "language": "Java",
      "linescount": 174,
      "location": "/mods/grammarSystem/src/main/java/org/terasology/grammarSystem/logic/grammar/shapes",
      "name": "Terasology",
      "url": "https://searchcode.com/codesearch/view/71912324/",
      "md5hash": "eb1ec37880448e247a015b9e3b7f9a8c",
      "lines": {
        "1": "package org.terasology.grammarSystem.logic.grammar.shapes;",
        "2": "",
        "6": "/**",
        "7": " * @author Tobias 'skaldarnar' Nett <p/> A shape is the basis for structure generation. </p> Shapes have a dimension and a relative",
        "8": " *         position. The shape's rotation is stored in its coordinate system. Moreover, every shaps has a probability (default 1) and a flag",
        "9": " *         that indicates if the shape is active or not.",
        "10": " */",
        "11": "public abstract class Shape {",
        "13": "    /**",
        "14": "     * The relative position of this shape.",
        "16": "    //protected Vector3i position = Vector3i.zero();",
        "17": "    /** The shape's dimension along its X,Y and Z axis. */",
        "19": "",
        "20": "    /** The probability that this shape appears in an derivation. */",
        "21": "    protected float probability = 1f;"
      },
      "id": 71912324,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/hawky4s/oryx.git",
      "language": "Java",
      "linescount": 292,
      "location": "/editor/server/src/org/oryxeditor/server/diagram",
      "name": "oryx",
      "url": "https://searchcode.com/codesearch/view/42465935/",
      "md5hash": "741e24a3d4d9f59b930563dbec4d87bf",
      "lines": {
        "8": " * @author Philipp",
        "9": " * Abstract Shape class represents an element of the canvas",
        "11": " */",
        "12": "public class Shape implements Stencil, Bounded{",
        "15": "\tprivate StencilType stencil;",
        "16": "\tprivate ArrayList<Shape> childShapes;",
        "17": "\tprivate ArrayList<Shape> outgoings;",
        "18": "\tprivate ArrayList<Point> dockers;",
        "20": "\tprivate Bounds bounds;",
        "21": "\tprivate Shape target;",
        "22": "\tprivate Shape parent;",
        "23": "\tprivate ArrayList<Shape> incoming;",
        "24": "",
        "27": "\t */",
        "28": "\tpublic Shape getParent() {"
      },
      "id": 42465935,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/openicar/process-designer.git",
      "language": "Java",
      "linescount": 400,
      "location": "/src/main/java/org/jbpm/designer/server/diagram",
      "name": "process-designer",
      "url": "https://searchcode.com/codesearch/view/47063496/",
      "md5hash": "79106b55cfe370eb060227fc3908737f",
      "lines": {
        "6": "/**",
        "7": " * @author Philipp Abstract Shape class represents an element of the canvas",
        "9": " */",
        "10": "public class Shape implements Stencil, Bounded {",
        "13": "    private StencilType stencil;",
        "14": "    private ArrayList<Shape> childShapes;",
        "15": "    private ArrayList<Shape> outgoings;",
        "16": "    private ArrayList<Point> dockers;",
        "18": "    private Bounds bounds;",
        "19": "    private Shape target;",
        "20": "    private Shape parent;",
        "21": "    private ArrayList<Shape> incoming;",
        "22": "",
        "25": "     */",
        "26": "    public Shape getParent() {"
      },
      "id": 47063496,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/bridgethillyer/physics-toy.git",
      "language": "Java",
      "linescount": 418,
      "location": "/src/org/jbox2d/collision/shapes",
      "name": "physics-toy",
      "url": "https://searchcode.com/codesearch/view/48498694/",
      "md5hash": "fe28955b2ba7a2f47cf448a91d763667",
      "lines": {
        "133": "\t/**",
        "134": "\t * Get the type of this shape. You can use this to down cast to the concrete shape.",
        "135": "\t * @return the shape type.",
        "136": "\t */",
        "137": "\tpublic ShapeType getType() {",
        "43": "",
        "44": "import com.kristianlm.robotanks.box2dbridge.IShape;",
        "141": "\t/**",
        "46": "",
        "47": "//Updated through rev. 56->139 of b2Shape.cpp/.h",
        "49": "/**",
        "50": " * A shape is used for collision detection. Shapes are created in World.",
        "51": " * You can use shape for collision detection before they are attached to the world.",
        "142": "\t * Is this shape a sensor (non-solid)?",
        "23": "",
        "24": "package org.jbox2d.collision.shapes;"
      },
      "id": 48498694,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/andreynovikov/androzic-library.git",
      "language": "Java",
      "linescount": 355,
      "location": "/src/com/jhlabs",
      "name": "androzic-library",
      "url": "https://searchcode.com/codesearch/view/49992331/",
      "md5hash": "e94ba30ad6f1392cf27c6715261cbc86",
      "lines": {
        "32": " * is described by a {@link PathIterator} object, which can express the",
        "33": " * outline of the <code>Shape</code> as well as a rule for determining",
        "34": " * how the outline divides the 2D plane into interior and exterior",
        "35": " * points.  Each <code>Shape</code> object provides callbacks to get the",
        "37": " * rectangles lie partly or entirely within the interior",
        "38": " * of the <code>Shape</code>, and retrieve a <code>PathIterator</code>",
        "39": " * object that describes the trajectory path of the <code>Shape</code>",
        "40": " * outline.",
        "43": " * A point is considered to lie inside a",
        "44": " * <code>Shape</code> if and only if:",
        "46": " * <li> it lies completely",
        "47": " * inside the<code>Shape</code> boundary <i>or</i>",
        "48": " * <li>",
        "29": "/**",
        "30": " * The <code>Shape</code> interface provides definitions for objects",
        "31": " * that represent some form of geometric shape.  The <code>Shape</code>"
      },
      "id": 49992331,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/webstorms/wsgameengine.git",
      "language": "Java",
      "linescount": 432,
      "location": "/WSGameEngine/src/com/webstorms/physics",
      "name": "wsgameengine",
      "url": "https://searchcode.com/codesearch/view/50482351/",
      "md5hash": "860b3b9d1bb055219bc2a17a8447e336",
      "lines": {
        "32": "\tpublic Shape(int x, int y, Rect viewingRect) {",
        "7": "",
        "8": "public final class Shape {",
        "138": "\t\t",
        "139": "\t\t// Stick those values into the method that will magically move the Shape",
        "140": "\t\tthis.moveShape(changeX, changeY);",
        "141": "\t\t",
        "48": "\t * <br>",
        "49": "\t * Invoke this method on the object to add a rectangle to its shape.",
        "23": "\t/**",
        "24": "\t * Comprise a shape out of rectangles for your game object.",
        "153": "\t * <br>",
        "154": "\t * Retrieve the x (left) location of the shape.",
        "27": "\t",
        "28": "\tpublic Shape() {",
        "31": "\t"
      },
      "id": 50482351,
      "filename": "Shape.java"
    },
    {
      "repo": "https://github.com/msteptoe/FURI_Code.git",
      "language": "Java",
      "linescount": 726,
      "location": "/IJ_Mobile/src/ome/xml/model",
      "name": "FURI_Code",
      "url": "https://searchcode.com/codesearch/view/71584227/",
      "md5hash": "65ec5f9d107d6a745a072c052dbbd5a2",
      "lines": {
        "1": "/*",
        "2": " * ome.xml.model.Shape",
        "163": "\t// -- Custom content from Shape specific template --",
        "269": "\t\t\tthrow new RuntimeException(String.format(",
        "168": "\t/** ",
        "169": "\t * Updates Shape recursively from an XML DOM tree. <b>NOTE:</b> No",
        "396": "",
        "162": "",
        "142": "\t/** Default constructor. */",
        "143": "\tpublic Shape()",
        "270": "\t\t\t\t\t\"Shape missing required ID property.\"));",
        "148": "\t/** ",
        "149": "\t * Constructs Shape recursively from an XML DOM tree.",
        "397": "\t// -- Shape API methods --",
        "156": "\t */",
        "157": "\tpublic Shape(Element element, OMEModel model)"
      },
      "id": 71584227,
      "filename": "Shape.java"
    },
    {
      "repo": "https://github.com/zenghua1991/WiEngine-1.git",
      "language": "Java",
      "linescount": 144,
      "location": "/src/com/wiyun/engine/box2d/collision",
      "name": "WiEngine-1",
      "url": "https://searchcode.com/codesearch/view/73696955/",
      "md5hash": "443f37126e260a1777f2ed5e576b576b",
      "lines": {
        "129": "\t/**",
        "130": "\t * Compute the mass properties of this shape using its dimensions and density.",
        "35": "",
        "36": "public abstract class Shape extends BaseObject {",
        "42": "\t",
        "43": "\tprotected Shape() {",
        "45": "",
        "46": "\tprotected Shape(int pointer) {",
        "50": "\t/**",
        "51": "\t * \u751f\u6210\u5f53\u524dshape\u7684\u62f7\u8d1d",
        "53": "\t * @param world {@link World}",
        "54": "\t * @return \u751f\u6210\u7684shape\u7684\u6307\u9488, \u53ef\u4ee5\u7528shape\u7684\u5b50\u7c7b\u5305\u88c5\u6210java\u7aef\u5bf9\u8c61",
        "58": "\t/**",
        "59": "\t * Get the type of this shape. You can use this to down cast to the concrete shape.",
        "60": "\t * @return the shape type."
      },
      "id": 73696955,
      "filename": "Shape.java"
    },
    {
      "repo": "https://github.com/allink28/Shape-Maker.git",
      "language": "Java",
      "linescount": 106,
      "location": "/ShapeMaker/src",
      "name": "Shape-Maker",
      "url": "https://searchcode.com/codesearch/view/75096185/",
      "md5hash": "51c109486eda3323fafd3f3d9393fa3f",
      "lines": {
        "35": "    /**",
        "36": "     * Create a new Shape object.",
        "38": "     * @param p2 The point being dragged.",
        "7": "/**",
        "8": " *  This is an abstract class that represents shapes.",
        "39": "     * @param col The color of the shape.",
        "13": "",
        "14": "public abstract class Shape",
        "17": "    /**",
        "18": "     * The selected color for the shape.",
        "21": "    /**",
        "22": "     * Starting point of the shape.",
        "40": "     */",
        "25": "    /**",
        "26": "     * Ending point of the shape.",
        "29": "    /**",
        "30": "     * Decides whether the shape is filled or not."
      },
      "id": 75096185,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/gvalentin3/gdroid.git",
      "language": "Java",
      "linescount": 115,
      "location": "/Cocos2DSimpleGame/src/com/badlogic/gdx/physics/box2d",
      "name": "gdroid",
      "url": "https://searchcode.com/codesearch/view/36312344/",
      "md5hash": "9b4d25942914627bc938639cb57daa2b",
      "lines": {
        "34": "",
        "35": "\t/** the address of the shape **/",
        "37": "",
        "38": "\t/** Get the type of this shape. You can use this to down cast to the concrete shape.",
        "39": "\t * @return the shape type. */",
        "40": "\tpublic abstract Type getType ();",
        "18": "",
        "19": "/** A shape is used for collision detection. You can create a shape however you like. Shapes used for simulation in b2World are",
        "20": " * created automatically when a b2Fixture is created. Shapes may encapsulate a one or more child shapes.",
        "21": " * ",
        "22": " * NOTE: YOU NEED TO DISPOSE SHAPES YOU CREATED YOURSELF AFTER YOU NO LONGER USE THEM! E.g. after calling body.createFixture();",
        "23": " * @author mzechner */",
        "24": "public abstract class Shape {",
        "28": "\t",
        "29": "\t/** Enum describing the type of a shape"
      },
      "id": 36312344,
      "filename": "Shape.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 19465,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 7261,
      "source": "Github",
      "id": 2
    },
    {
      "count": 3774,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 245,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 69,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 58,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 25,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 2,
      "source": "Gitorious",
      "id": 10
    },
    {
      "count": 2,
      "source": "Unknown",
      "id": 0
    }
  ]
}