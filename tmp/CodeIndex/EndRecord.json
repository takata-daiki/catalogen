{
  "matchterm": "EndRecord",
  "previouspage": null,
  "searchterm": "EndRecord",
  "query": "EndRecord",
  "language_filters": [
    {
      "count": 468,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 468,
  "results": [
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 114,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642504/",
      "md5hash": "0c5c67bf43ec92ba2b452d6293e382c5",
      "lines": {
        "64": "    /**",
        "65": "     * Constructs a EndRecord record and sets its fields appropriately.",
        "68": "",
        "69": "    public EndRecord(RecordInputStream in)",
        "54": "",
        "55": "public class EndRecord",
        "59": "",
        "60": "    public EndRecord()"
      },
      "id": 15642504,
      "filename": "EndRecord.java"
    },
    {
      "repo": "git://github.com/apache/avro.git",
      "language": "Java",
      "linescount": 729,
      "location": "/lang/java/avro/src/test/java/org/apache/avro",
      "name": "avro",
      "url": "https://searchcode.com/codesearch/view/116111668/",
      "md5hash": "24472c49d7f9181a0e07e5d9f0af7cb4",
      "lines": {
        "474": "        .endRecord();",
        "419": "      .name(\"f5\").type(\"MyFixed\", \"org.foo\").noDefault()",
        "420": "      .endRecord();",
        "137": "        .name(\"f0\").type().stringType().noDefault()",
        "138": "        .endRecord();",
        "460": "        .name(\"f5\").type(\"MyFixed\", \"org.foo\").noDefault()",
        "461": "        .endRecord();",
        "51": "        .name(\"f2\").type().nullable().booleanType().booleanDefault(true)",
        "404": "        .nullableBytes(\"nbytes\", new byte[] {1,2,3})",
        "405": "        .endRecord();",
        "473": "        .name(\"f1\").type(\"MyFixed\", \"\").noDefault()",
        "52": "        .endRecord();",
        "442": "        .name(\"f7\").type(\"MyFixed\").noDefault()",
        "443": "        .endRecord();",
        "348": "      .name(\"aliased\").aliases(\"anAlias\").type().stringType().noDefault()",
        "349": "      .endRecord();"
      },
      "id": 116111668,
      "filename": "TestSchemaBuilder.java"
    },
    {
      "repo": "https://github.com/ansi88/wh-app-android.git",
      "language": "Java",
      "linescount": 110,
      "location": "/src/gov/whitehouse/core",
      "name": "wh-app-android",
      "url": "https://searchcode.com/codesearch/view/74930422/",
      "md5hash": "cb795422e63daf80d2d8bfba71fe2c65",
      "lines": {
        "40": "",
        "41": "    @SerializedName(\"endrecord\")",
        "42": "    private int endRecord;",
        "43": "",
        "80": "    /**",
        "81": "     * @return endRecord",
        "82": "     */",
        "83": "    public int getEndRecord() {",
        "84": "        return endRecord;",
        "85": "    }",
        "89": "     */",
        "90": "    public SearchResponse setEndRecord(final int endRecord) {",
        "91": "        this.endRecord = endRecord;",
        "92": "        return this;"
      },
      "id": 74930422,
      "filename": "SearchResponse.java"
    },
    {
      "repo": "git://github.com/apache/avro.git",
      "language": "Java",
      "linescount": 830,
      "location": "/lang/java/avro/src/test/java/org/apache/avro/reflect",
      "name": "avro",
      "url": "https://searchcode.com/codesearch/view/116111680/",
      "md5hash": "adc26f9cca16e1caee1376b7d59d1fd0",
      "lines": {
        "384": "        .fields().requiredString(\"uuid\").endRecord();",
        "576": "        .record(RecordWithStringUUID.class.getName())",
        "420": "        .record(RecordWithStringUUID.class.getName())",
        "421": "        .fields().optionalString(\"uuid\").endRecord();",
        "551": "    Schema uuidSchema = SchemaBuilder.record(\"RecordWithUUID\")",
        "552": "        .fields().requiredString(\"uuid\").endRecord();",
        "524": "    Schema uuidSchema = SchemaBuilder.record(RecordWithUUID.class.getName())",
        "525": "        .fields().requiredString(\"uuid\").endRecord();",
        "430": "    Schema nullableUuidSchema = SchemaBuilder.record(RecordWithUUID.class.getName())",
        "431": "        .fields().optionalString(\"uuid\").endRecord();",
        "398": "    Schema nullableUuidSchema = SchemaBuilder.record(RecordWithUUID.class.getName())",
        "577": "        .fields().requiredString(\"uuid\").endRecord();",
        "399": "        .fields().optionalString(\"uuid\").endRecord();",
        "541": "        .record(RecordWithStringUUID.class.getName())",
        "542": "        .fields().requiredString(\"uuid\").endRecord();",
        "383": "        .record(RecordWithStringUUID.class.getName())"
      },
      "id": 116111680,
      "filename": "TestReflectLogicalTypes.java"
    },
    {
      "repo": "https://github.com/rdwebster/Open-Quark.git",
      "language": "Java",
      "linescount": 3332,
      "location": "/src/CAL_Platform/src/org/openquark/cal/compiler",
      "name": "Open-Quark",
      "url": "https://searchcode.com/codesearch/view/107274985/",
      "md5hash": "4272dcb9d0b5b21e9c14387c17b2ca2d",
      "lines": {
        "640": "            s.endRecord ();",
        "1825": "            ",
        "1826": "            s.endRecord ();",
        "517": "            }",
        "518": "            s.endRecord ();",
        "1959": "            s.endRecord ();",
        "168": "            s.writeIntCompressed(column);",
        "169": "            s.endRecord ();",
        "940": "            }",
        "941": "            s.endRecord ();",
        "1311": "                s.endRecord ();",
        "1958": "            errorInfo.write (s);",
        "1050": "            defn.write (s);",
        "1051": "            s.endRecord ();",
        "1310": "                ",
        "639": "            expr2.write (s);"
      },
      "id": 107274985,
      "filename": "Expression.java"
    },
    {
      "repo": "https://github.com/rdwebster/Open-Quark.git",
      "language": "Java",
      "linescount": 2886,
      "location": "/src/CAL_Platform/src/org/openquark/cal/compiler",
      "name": "Open-Quark",
      "url": "https://searchcode.com/codesearch/view/107274951/",
      "md5hash": "cfcf6da9a06f2cb40df6d82522d6d2eb",
      "lines": {
        "1697": "            getContent().write(s);",
        "1410": "            getReference().write(s);",
        "1411": "            s.endRecord();",
        "1157": "            reference.write(s);",
        "1158": "            s.endRecord();",
        "1575": "            getContent().write(s);",
        "1576": "            s.endRecord();",
        "1698": "            s.endRecord();",
        "2758": "        s.endRecord();",
        "1298": "            getReference().write(s);",
        "1299": "            s.endRecord();",
        "1077": "            s.writeUTF(url);",
        "1078": "            s.endRecord();",
        "985": "            s.writeUTF(text);",
        "986": "            s.endRecord();",
        "2757": "        "
      },
      "id": 107274951,
      "filename": "CALDocComment.java"
    },
    {
      "repo": "https://github.com/rdwebster/Open-Quark.git",
      "language": "Java",
      "linescount": 2442,
      "location": "/src/CAL_Platform/src/org/openquark/cal/compiler",
      "name": "Open-Quark",
      "url": "https://searchcode.com/codesearch/view/107274857/",
      "md5hash": "fdfa87de4e6f0536e733a493448f9eee",
      "lines": {
        "290": "            s.writeByte(ordinal);",
        "291": "            s.endRecord();",
        "1609": "           ",
        "1610": "            s.endRecord();",
        "1879": "            s.endRecord();",
        "1324": "           ",
        "1325": "            s.endRecord();",
        "2219": "            s.endRecord();",
        "1878": "           ",
        "1463": "           ",
        "1464": "            s.endRecord();",
        "1177": "           ",
        "1178": "            s.endRecord();",
        "1755": "           ",
        "1756": "            s.endRecord();",
        "2218": "           "
      },
      "id": 107274857,
      "filename": "ForeignFunctionInfo.java"
    },
    {
      "repo": "git://github.com/apache/avro.git",
      "language": "Java",
      "linescount": 191,
      "location": "/lang/java/avro/src/test/java/org/apache/avro",
      "name": "avro",
      "url": "https://searchcode.com/codesearch/view/116111669/",
      "md5hash": "072b17877376c848bab779073e3eb20e",
      "lines": {
        "33": "      .name(\"b\").type().longType().noDefault()",
        "34": "      .endRecord();",
        "39": "      .name(\"c\").type().intType().intDefault(0)",
        "40": "      .endRecord();",
        "140": "      .requiredDouble(\"radius\")",
        "138": "          .requiredDouble(\"y\")",
        "139": "          .endRecord().noDefault()",
        "44": "      .name(\"c\").type().intType().intDefault(0)",
        "45": "      .endRecord();",
        "141": "      .endRecord();",
        "49": "      .name(\"c\").type().intType().noDefault()",
        "50": "      .endRecord();",
        "148": "      .requiredDouble(\"y\")",
        "149": "      .endRecord().noDefault()",
        "150": "      .requiredDouble(\"radius\")",
        "151": "      .endRecord();"
      },
      "id": 116111669,
      "filename": "TestSchemaValidation.java"
    },
    {
      "repo": "https://github.com/renemeye/BeTTy.git",
      "language": "Java",
      "linescount": 194,
      "location": "/BeTTy-Core/src/es/us/isa/benchmarking/writers",
      "name": "BeTTy",
      "url": "https://searchcode.com/codesearch/view/71199072/",
      "md5hash": "598c16e20a1e6952cdf2756cdbd2675b",
      "lines": {
        "168": "\t\t\twritercsv.write(String.valueOf(caracteristica.getSeed()));",
        "190": "\t\twritercsv.endRecord();",
        "102": "",
        "103": "\t\t\twritercsv.endRecord();",
        "152": "\t\twritercsv.write(\"seed\");",
        "153": "\t\twritercsv.endRecord();",
        "189": "",
        "169": "\t\t\twritercsv.endRecord();"
      },
      "id": 71199072,
      "filename": "CSVExperimentWriter.java"
    },
    {
      "repo": "https://github.com/darkphnx/fetegeo-osm-import.git",
      "language": "Java",
      "linescount": 346,
      "location": "/org/fetegeo/data/fetegeoimport",
      "name": "fetegeo-osm-import",
      "url": "https://searchcode.com/codesearch/view/110014669/",
      "md5hash": "e12c997336932b7ebc59093dc50e5d85",
      "lines": {
        "194": "\t\tplaceWriter.writeField(population); // Population",
        "195": "\t\tplaceWriter.endRecord();",
        "228": "\t\t\tplaceNameWordsWriter.endRecord();",
        "233": "\t\t\t\tplaceNameWordsWriter.writeField(String.valueOf(hash_name(part)));",
        "234": "\t\t\t\tplaceNameWordsWriter.endRecord();",
        "227": "\t\t\tplaceNameWordsWriter.writeField(String.valueOf(hash_name(firstWord)));",
        "213": "\t\t\tplaceNameWriter.writeField(canonicalName.equalsIgnoreCase(placeName)); // Official name (t/f)",
        "214": "\t\t\tplaceNameWriter.endRecord();",
        "311": "\t\t\tcountryNameWriter.writeField(hash_name(placeName));",
        "312": "\t\t\tcountryNameWriter.endRecord();",
        "286": "\t\t",
        "287": "\t\tcountryWriter.endRecord();"
      },
      "id": 110014669,
      "filename": "FetegeoImportWriter.java"
    },
    {
      "repo": "http://crux-framework.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 683,
      "location": "/crux-dev/src/main/java/org/cruxframework/crux/core/client/datasource",
      "name": "crux-framework",
      "url": "https://searchcode.com/codesearch/view/63747964/",
      "md5hash": "c62092468a6908c1a32dd6f58ca58d51",
      "lines": {
        "384": "\t\tif (pageEndRecord >= this.data.size())",
        "163": "\t\t{",
        "164": "\t\t\tint count = Math.min(endRecord - startRecord + 1, records.length);",
        "133": "\t\tint startRecord = getPageStartRecord();",
        "134": "\t\tint endRecord = (currentPage * pageSize) - 1;",
        "135": "\t\tint updateRecordsCount = updateRecords(startRecord, endRecord, records);",
        "136": "\t\tif (updateRecordsCount > 0)",
        "391": "\t\t",
        "387": "\t\t\t{",
        "392": "\t\treturn pageEndRecord + editableOperations.getNewRecordsCount() - editableOperations.getRemovedRecordsCount();",
        "383": "\t\t",
        "388": "\t\t\t\tpageEndRecord = this.data.size()-2;",
        "154": "\t * @param startRecord",
        "155": "\t * @param endRecord",
        "158": "\t */",
        "159": "\tprotected int updateRecords(int startRecord, int endRecord, DataSourceRecord<T>[] records)"
      },
      "id": 63747964,
      "filename": "RemoteStreamingDataSource.java"
    },
    {
      "repo": "http://crux-framework.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 511,
      "location": "/crux-dev/src/main/java/org/cruxframework/crux/core/client/dataprovider",
      "name": "crux-framework",
      "url": "https://searchcode.com/codesearch/view/63820153/",
      "md5hash": "c671599e42bbb247a7384db74e116771",
      "lines": {
        "194": "\t{",
        "195": "\t\tint pageEndRecord = getPageEndRecord();",
        "196": "\t\treturn pageEndRecord - getPageStartRecord() + 1;",
        "390": "\t\tint startPageRecord = getPageStartRecord();",
        "391": "\t\tint endPageRescord = getPageEndRecord();",
        "439": "\t\t{",
        "398": "\t",
        "399": "\tprotected int getPageEndRecord()",
        "400": "\t{",
        "401": "\t\tint pageEndRecord = (currentPage * pageSize) - 1;",
        "403": "\t\t",
        "404": "\t\tif (pageEndRecord >= this.data.size())",
        "440": "\t\t\tfetch(getPageStartRecord(), getPageEndRecord());",
        "407": "\t\t\t{",
        "408": "\t\t\t\tpageEndRecord = this.data.size()-2;",
        "411": "\t\t",
        "412": "\t\treturn pageEndRecord + editableOperations.getNewRecordsCount() - editableOperations.getRemovedRecordsCount();"
      },
      "id": 63820153,
      "filename": "AsyncStreamingDataProvider.java"
    },
    {
      "repo": "https://bitbucket.org/shenli/tapa.git",
      "language": "Java",
      "linescount": 807,
      "location": "/src/core/org/apache/hadoop/record/compiler",
      "name": "tapa",
      "url": "https://searchcode.com/codesearch/view/49662308/",
      "md5hash": "92b563279eaaa29e3988c92c077f476a",
      "lines": {
        "288": "      cb.append(Consts.RECORD_INPUT + \".endRecord(\" + Consts.TAG+\");\\n\");",
        "679": "      }",
        "680": "      cb.append(Consts.RECORD_INPUT + \".endRecord(*this,\" + Consts.TAG + \");\\n\");",
        "334": "      cb.append(\"}\\n\");",
        "335": "      cb.append(Consts.RECORD_INPUT + \".endRecord(\" + Consts.TAG+\");\\n\");",
        "272": "      }",
        "273": "      cb.append(Consts.RECORD_OUTPUT + \".endRecord(this,\" + Consts.TAG+\");\\n\");",
        "658": "      }",
        "659": "      cb.append(Consts.RECORD_OUTPUT + \".endRecord(*this,\" + Consts.TAG + \");\\n\");",
        "728": "      cb.append(\"}\\n\");",
        "729": "      cb.append(Consts.RECORD_INPUT + \".endRecord(*this, \" + Consts.TAG+\");\\n\");",
        "287": "      }"
      },
      "id": 49662308,
      "filename": "JRecord.java"
    },
    {
      "repo": "http://crux-framework.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 348,
      "location": "/crux-dev/src/main/java/org/cruxframework/crux/core/client/dataprovider",
      "name": "crux-framework",
      "url": "https://searchcode.com/codesearch/view/63820142/",
      "md5hash": "de41c40c9797464f5d157cf027022485",
      "lines": {
        "290": "\t@Override",
        "291": "\tprotected int getPageEndRecord()",
        "292": "\t{",
        "293": "\t\tint endPageRecord = super.getPageEndRecord();",
        "311": "\t * @param startRecord",
        "317": "\t{",
        "278": "\t{",
        "279": "\t\tint pageEndRecord = (currentPage * pageSize) - 1;",
        "312": "\t * @param endRecord",
        "281": "\t\t{",
        "282": "\t\t\tfetch(getPageStartRecord(), pageEndRecord);",
        "315": "\t */",
        "316": "\tprotected int updateRecords(int startRecord, int endRecord, DataProviderRecord<T>[] records)",
        "285": "\t\t{",
        "286": "\t\t\tpagedCallback.onPageFetched(getPageStartRecord(), pageEndRecord);"
      },
      "id": 63820142,
      "filename": "AsyncPagedDataProvider.java"
    },
    {
      "repo": "git://github.com/apache/avro.git",
      "language": "Java",
      "linescount": 144,
      "location": "/lang/java/avro/src/test/java/org/apache/avro/io/parsing",
      "name": "avro",
      "url": "https://searchcode.com/codesearch/view/116111674/",
      "md5hash": "7098c31e5c0e7d37a0fa473301573705",
      "lines": {
        "48": "      .requiredDouble(\"z\")",
        "49": "      .endRecord();",
        "66": "      .name(\"z\").type().doubleType().doubleDefault(0.0)",
        "67": "      .endRecord();",
        "54": "      .requiredDouble(\"y\")",
        "55": "      .endRecord();",
        "42": "      .requiredDouble(\"y\")",
        "43": "      .endRecord();",
        "60": "      .name(\"z\").type().doubleType().doubleDefault(0.0)",
        "61": "      .endRecord();"
      },
      "id": 116111674,
      "filename": "TestResolvingGrammarGenerator2.java"
    },
    {
      "repo": "http://crux-framework.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 394,
      "location": "/crux-dev/src/main/java/org/cruxframework/crux/core/client/datasource",
      "name": "crux-framework",
      "url": "https://searchcode.com/codesearch/view/63747970/",
      "md5hash": "efab51d2922cc9d2c4ec2750cf2e0153",
      "lines": {
        "256": "\t\tint endRecord = getPageEndRecord();",
        "257": "\t\tint updateRecordsCount = updateRecords(startRecord, endRecord, records);",
        "258": "\t\tif (this.fetchCallback != null)",
        "325": "\t\t{",
        "326": "\t\t\tfetchCallback.execute(getPageStartRecord(), pageEndRecord);",
        "321": "\t\t{",
        "330": "\t@Override",
        "331": "\tprotected int getPageEndRecord()",
        "332": "\t{",
        "322": "\t\t\tfetch(getPageStartRecord(), pageEndRecord);",
        "333": "\t\tint endPageRecord = super.getPageEndRecord();",
        "352": "\t * @param endRecord",
        "351": "\t * @param startRecord",
        "255": "\t\tint startRecord = getPageStartRecord();",
        "318": "\t{",
        "319": "\t\tint pageEndRecord = (currentPage * pageSize) - 1;"
      },
      "id": 63747970,
      "filename": "RemotePagedDataSource.java"
    },
    {
      "repo": "http://crux-framework.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 283,
      "location": "/crux-dev/src/main/java/org/cruxframework/crux/core/rebind/screen/widget/creator",
      "name": "crux-framework",
      "url": "https://searchcode.com/codesearch/view/63820118/",
      "md5hash": "fa33f2eacbcb0ba0b69dd7aac5668641",
      "lines": {
        "225": "\t\t\tString eventClassName = AsyncDataProviderEvent.class.getCanonicalName();",
        "226": "\t\t\tout.println(eventClassName+\"<\"+dataObject+\"> event = createAsynchronousDataProviderEvent(startRecord, endRecord);\");",
        "259": "//\t\t\tout.println(context.getWidget()+\".setDataProvider(new \"+dataProviderClassName+\"<\"+dataObject+\">(){\");",
        "196": "\t\t\tout.println(context.getWidget()+\".setDataProvider(new \"+dataProviderClassName+\"<\"+dataObject+\">(){\");",
        "197": "\t\t\tout.println(\"public void fetch(int startRecord, int endRecord){\");",
        "262": "//\t\t\tString eventClassName = AsyncDataProviderEvent.class.getCanonicalName()+\"<\"+dataObject+\">\";",
        "199": "\t\t\tString eventClassName = AsyncDataProviderEvent.class.getCanonicalName();",
        "200": "\t\t\tout.println(eventClassName+\"<\"+dataObject+\"> event = createAsynchronousDataProviderEvent(startRecord, endRecord);\");",
        "263": "//\t\t\tout.println(eventClassName+\" event = createAsynchronousDataProviderEvent(startRecord, endRecord);\");",
        "260": "//\t\t\tout.println(\"public void fetch(int startRecord, int endRecord){\");",
        "222": "\t\t\tout.println(context.getWidget()+\".setDataProvider(new \"+dataProviderClassName+\"<\"+dataObject+\">(){\");",
        "223": "\t\t\tout.println(\"public void fetch(int startRecord, int endRecord){\");"
      },
      "id": 63820118,
      "filename": "HasDataProviderFactory.java"
    },
    {
      "repo": "https://bitbucket.org/novelli/gap",
      "language": "Java",
      "linescount": 2221,
      "location": "/trunk/external/javacsv/src",
      "name": "gap",
      "url": "https://searchcode.com/codesearch/view/126126972/",
      "md5hash": "720016be0c511c7a0c283f3ef98bbbd3",
      "lines": {
        "1409": "\t\twriter.write(\"1\");",
        "1410": "\t\twriter.endRecord();",
        "1412": "\t\twriter.write(\"2\");",
        "1413": "\t\twriter.endRecord();",
        "1703": "\t\twriter.write(\"1\");",
        "1704": "\t\twriter.endRecord();",
        "1163": "\t\twriter.write(\"blah \\\"some stuff in quotes\\\"\");",
        "1164": "\t\twriter.endRecord();",
        "1390": "\t\twriter.write(\"blah \\\"some stuff in quotes\\\"\");",
        "1391": "\t\twriter.endRecord();",
        "1310": "\t\twriter.write(\" data \");",
        "1333": "\t\twriter.write(\"a;b\");",
        "1334": "\t\twriter.endRecord();",
        "1215": "\t\twriter.endRecord();",
        "1214": "\t\twriter.write(\"blah \\\"some stuff in quotes\\\"\");",
        "1311": "\t\twriter.endRecord();"
      },
      "id": 126126972,
      "filename": "AllTests.java"
    },
    {
      "repo": "https://bitbucket.org/novelli/gap",
      "language": "Java",
      "linescount": 2221,
      "location": "/branches/qagesa/external/javacsv/src",
      "name": "gap",
      "url": "https://searchcode.com/codesearch/view/126127674/",
      "md5hash": "720016be0c511c7a0c283f3ef98bbbd3",
      "lines": {
        "1409": "\t\twriter.write(\"1\");",
        "1410": "\t\twriter.endRecord();",
        "1412": "\t\twriter.write(\"2\");",
        "1413": "\t\twriter.endRecord();",
        "1703": "\t\twriter.write(\"1\");",
        "1704": "\t\twriter.endRecord();",
        "1163": "\t\twriter.write(\"blah \\\"some stuff in quotes\\\"\");",
        "1164": "\t\twriter.endRecord();",
        "1390": "\t\twriter.write(\"blah \\\"some stuff in quotes\\\"\");",
        "1391": "\t\twriter.endRecord();",
        "1310": "\t\twriter.write(\" data \");",
        "1333": "\t\twriter.write(\"a;b\");",
        "1334": "\t\twriter.endRecord();",
        "1215": "\t\twriter.endRecord();",
        "1214": "\t\twriter.write(\"blah \\\"some stuff in quotes\\\"\");",
        "1311": "\t\twriter.endRecord();"
      },
      "id": 126127674,
      "filename": "AllTests.java"
    },
    {
      "repo": "https://bitbucket.org/novelli/gap",
      "language": "Java",
      "linescount": 2221,
      "location": "/branches/ot3/external/javacsv/src",
      "name": "gap",
      "url": "https://searchcode.com/codesearch/view/126128393/",
      "md5hash": "720016be0c511c7a0c283f3ef98bbbd3",
      "lines": {
        "1409": "\t\twriter.write(\"1\");",
        "1410": "\t\twriter.endRecord();",
        "1412": "\t\twriter.write(\"2\");",
        "1413": "\t\twriter.endRecord();",
        "1703": "\t\twriter.write(\"1\");",
        "1704": "\t\twriter.endRecord();",
        "1163": "\t\twriter.write(\"blah \\\"some stuff in quotes\\\"\");",
        "1164": "\t\twriter.endRecord();",
        "1390": "\t\twriter.write(\"blah \\\"some stuff in quotes\\\"\");",
        "1391": "\t\twriter.endRecord();",
        "1310": "\t\twriter.write(\" data \");",
        "1333": "\t\twriter.write(\"a;b\");",
        "1334": "\t\twriter.endRecord();",
        "1215": "\t\twriter.endRecord();",
        "1214": "\t\twriter.write(\"blah \\\"some stuff in quotes\\\"\");",
        "1311": "\t\twriter.endRecord();"
      },
      "id": 126128393,
      "filename": "AllTests.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 195,
      "source": "Github",
      "id": 2
    },
    {
      "count": 183,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 87,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 3,
      "source": "Unknown",
      "id": 0
    }
  ]
}