{
  "matchterm": "BreakType",
  "previouspage": null,
  "searchterm": "BreakType",
  "query": "BreakType",
  "language_filters": [
    {
      "count": 31,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 31,
  "results": [
    {
      "repo": "https://github.com/joragupra/ooffice-test.git",
      "language": "Java",
      "linescount": 937,
      "location": "/src/main/java/com/ooffice",
      "name": "ooffice-test",
      "url": "https://searchcode.com/codesearch/view/79532600/",
      "md5hash": "f69de3617a0ac8cd42412154861a83d4",
      "lines": {
        "769": "\t\t\t\t\tXPropertySet propertySet = (XPropertySet)UnoRuntime.queryInterface(XPropertySet.class, xTextViewCursor_targetDoc.getText().getEnd());",
        "770": "\t\t\t\t\tpropertySet.setPropertyValue(\"BreakType\", BreakType.PAGE_AFTER); ",
        "40": "import com.sun.star.lang.XMultiServiceFactory;",
        "41": "import com.sun.star.style.BreakType;",
        "890": "\t\t\t\t\tXPropertySet propertySet = (XPropertySet)UnoRuntime.queryInterface(XPropertySet.class, xTextViewCursor_targetDoc.getText().getEnd());",
        "891": "\t\t\t\t\tpropertySet.setPropertyValue(\"BreakType\", BreakType.PAGE_AFTER); "
      },
      "id": 79532600,
      "filename": "TableGenerator.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh-new",
      "language": "Java",
      "linescount": 288,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/text",
      "name": "elexis-base-marlovitsh-new",
      "url": "https://searchcode.com/codesearch/view/61098370/",
      "md5hash": "8ee560a3596875840468d1b7500ee4ae",
      "lines": {
        "171": "  public short getBreakType() throws TextException {",
        "172": "    try {",
        "170": "   */",
        "139": "   * ",
        "140": "   * @param breakType break type",
        "145": "   */",
        "146": "  public void setBreakType(short breakType) throws TextException {",
        "147": "    try {",
        "148": "      if(breakType == IParagraphProperties.BREAK_TYPE_PAGE_AFTER)   ",
        "149": "        getXPropertySet().setPropertyValue(\"BreakType\", BreakType.PAGE_AFTER);",
        "150": "      else if(breakType == IParagraphProperties.BREAK_TYPE_PAGE_BEFORE)",
        "151": "        getXPropertySet().setPropertyValue(\"BreakType\", BreakType.PAGE_BEFORE);",
        "152": "      else if(breakType == IParagraphProperties.BREAK_TYPE_PAGE_BOTH)",
        "153": "        getXPropertySet().setPropertyValue(\"BreakType\", BreakType.PAGE_BOTH);",
        "154": "    }"
      },
      "id": 61098370,
      "filename": "ParagraphProperties.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 986,
      "location": "/qadevOOo/runner/util",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45022911/",
      "md5hash": "e315cf485b2d24a1af653b476496dffb",
      "lines": {
        "688": "        com.sun.star.style.BreakType BT1 = com.sun.star.style.BreakType.COLUMN_AFTER;",
        "689": "        com.sun.star.style.BreakType BT2 = com.sun.star.style.BreakType.COLUMN_BEFORE;",
        "690": "        com.sun.star.style.BreakType BT3 = com.sun.star.style.BreakType.COLUMN_BOTH;",
        "691": "        com.sun.star.style.BreakType BT4 = com.sun.star.style.BreakType.PAGE_AFTER;",
        "692": "        com.sun.star.style.BreakType BT5 = com.sun.star.style.BreakType.PAGE_BEFORE;",
        "693": "        com.sun.star.style.BreakType BT6 = com.sun.star.style.BreakType.PAGE_BOTH;",
        "694": "        com.sun.star.style.BreakType BT7 = com.sun.star.style.BreakType.NONE;",
        "695": "        if (oldValue.equals(BT1)) newValue = BT2;",
        "686": "",
        "687": "   if (oldValue instanceof com.sun.star.style.BreakType){"
      },
      "id": 45022911,
      "filename": "ValueChanger.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh-new",
      "language": "Java",
      "linescount": 231,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/text",
      "name": "elexis-base-marlovitsh-new",
      "url": "https://searchcode.com/codesearch/view/61098369/",
      "md5hash": "5625319a31c573fbcab56c896b9a1925",
      "lines": {
        "99": "   */",
        "100": "  public void setBreakType(short breakType) throws TextException {",
        "101": "  \tif (breakType == IParagraphProperties.BREAK_TYPE_PAGE_AFTER || ",
        "102": "  \t\t\tbreakType == IParagraphProperties.BREAK_TYPE_PAGE_BEFORE ||",
        "103": "\t\t\t\tbreakType == IParagraphProperties.BREAK_TYPE_PAGE_BOTH) {",
        "104": "  \t\tthis.breakType = breakType;",
        "105": "  \t}",
        "106": "  \telse {",
        "107": "  \t\tthrow new TextException(\"The breakType is not valid\");",
        "93": "   * ",
        "94": "   * @param breakType break type",
        "218": "    this.properties = properties;",
        "219": "  \tthis.breakType = properties.getBreakType();",
        "61": "",
        "62": "\tprivate short breakType = -1;"
      },
      "id": 61098369,
      "filename": "ParagraphPropertyStore.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 244,
      "location": "/wizards/com/sun/star/wizards/text",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45006047/",
      "md5hash": "7a4dcd2c086f7f98f3d09ff4747ff8fe",
      "lines": {
        "25": "import com.sun.star.lang.XMultiServiceFactory;",
        "211": "",
        "212": "    public static BreakType resetBreakTypeofTextTable(Object oTextTable)",
        "213": "    {",
        "214": "        BreakType CorrBreakValue = null;",
        "215": "        BreakType BreakValue = (BreakType) com.sun.star.wizards.common.Helper.getUnoStructValue(oTextTable, \"BreakType\");",
        "216": "        //  if (BreakValue.equals(BreakType.NONE) == false){",
        "217": "        //      CorrBreakValue = BreakValue;",
        "26": "import com.sun.star.style.BreakType;",
        "219": "        //  }",
        "220": "        return BreakType.NONE;",
        "218": "        Helper.setUnoPropertyValue(oTextTable, \"BreakType\", BreakType.NONE);"
      },
      "id": 45006047,
      "filename": "TextTableHandler.java"
    },
    {
      "repo": "https://github.com/lexxy23/scf.git",
      "language": "Java",
      "linescount": 309,
      "location": "/main/core/src/main/java/com/googlecode/socofo/core/impl",
      "name": "scf",
      "url": "https://searchcode.com/codesearch/view/97222002/",
      "md5hash": "e0b0ad2a64cf131516ea2198210623fd",
      "lines": {
        "82": "            }",
        "83": "            if ((line.length() <= 0) || breakType.equals(BreakFormat.NoBreak)) {",
        "108": "                    String beforeToken = \"\";",
        "109": "                    switch (breakType) {",
        "60": "    public List<String> breakContent(final int lineWidth, final String content, final int firstIndent,",
        "61": "        final BreakFormat breakType) {",
        "62": "        LOG.debug(\"entering\", new Object[] { lineWidth, content, firstIndent, breakType });",
        "63": "        final List<String> rc = new ArrayList<String>();"
      },
      "id": 97222002,
      "filename": "LineHandlerImpl.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh",
      "language": "Java",
      "linescount": 288,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/text",
      "name": "elexis-base-marlovitsh",
      "url": "https://searchcode.com/codesearch/view/133379406/",
      "md5hash": "8ee560a3596875840468d1b7500ee4ae",
      "lines": {
        "171": "  public short getBreakType() throws TextException {",
        "172": "    try {",
        "170": "   */",
        "139": "   * ",
        "140": "   * @param breakType break type",
        "145": "   */",
        "146": "  public void setBreakType(short breakType) throws TextException {",
        "147": "    try {",
        "148": "      if(breakType == IParagraphProperties.BREAK_TYPE_PAGE_AFTER)   ",
        "149": "        getXPropertySet().setPropertyValue(\"BreakType\", BreakType.PAGE_AFTER);",
        "150": "      else if(breakType == IParagraphProperties.BREAK_TYPE_PAGE_BEFORE)",
        "151": "        getXPropertySet().setPropertyValue(\"BreakType\", BreakType.PAGE_BEFORE);",
        "152": "      else if(breakType == IParagraphProperties.BREAK_TYPE_PAGE_BOTH)",
        "153": "        getXPropertySet().setPropertyValue(\"BreakType\", BreakType.PAGE_BOTH);",
        "154": "    }"
      },
      "id": 133379406,
      "filename": "ParagraphProperties.java"
    },
    {
      "repo": "https://bitbucket.org/mst/ooo340",
      "language": "Java",
      "linescount": 254,
      "location": "/wizards/com/sun/star/wizards/text",
      "name": "ooo340",
      "url": "https://searchcode.com/codesearch/view/122092578/",
      "md5hash": "2749c9891f153a0ee38620cf1389cd8a",
      "lines": {
        "224": "        BreakType CorrBreakValue = null;",
        "225": "        BreakType BreakValue = (BreakType) com.sun.star.wizards.common.Helper.getUnoStructValue(oTextTable, \"BreakType\");",
        "34": "import com.sun.star.lang.XMultiServiceFactory;",
        "35": "import com.sun.star.style.BreakType;",
        "228": "        Helper.setUnoPropertyValue(oTextTable, \"BreakType\", BreakType.NONE);",
        "229": "        //  }",
        "230": "        return BreakType.NONE;",
        "226": "        //  if (BreakValue.equals(BreakType.NONE) == false){",
        "227": "        //      CorrBreakValue = BreakValue;",
        "221": "",
        "222": "    public static BreakType resetBreakTypeofTextTable(Object oTextTable)",
        "223": "    {"
      },
      "id": 122092578,
      "filename": "TextTableHandler.java"
    },
    {
      "repo": "https://astyle.svn.sourceforge.net/svnroot/astyle",
      "language": "Java",
      "linescount": 573,
      "location": "/trunk/AStyleDev/test-j",
      "name": "astyle",
      "url": "https://searchcode.com/codesearch/view/10034935/",
      "md5hash": "8c1dd2e187a8b440e2ea3a402f916c64",
      "lines": {
        "555": "        int breakDepth;",
        "568": "            System.out.println(\"LB: str=\"+breakStr+\" wh=\"+breakWhere+\" dep=\"+breakDepth+\" tp=\"+breakType);",
        "567": "        {",
        "556": "        int breakType;",
        "363": "                                    || (prevCh=='.'))",
        "364": "                                breakType = AFTER;",
        "365": "                            else",
        "366": "                                breakType = BEFORE;",
        "367": "                        else",
        "368": "                            breakType = AFTER;",
        "376": "                    registerLineBreak(lineBreakStack,",
        "562": "            breakDepth = dp;",
        "563": "            breakType = tp;",
        "407": "            {",
        "408": "                int cutWhere = curBreak.breakWhere - bufferStart - (curBreak.breakType == BEFORE ? curBreak.breakStr.length() : 0);",
        "377": "                                      new LineBreak(key, outBuffer.length()+bufferStart, breakDepth, breakType));"
      },
      "id": 10034935,
      "filename": "JSLineBreaker.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh",
      "language": "Java",
      "linescount": 231,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/text",
      "name": "elexis-base-marlovitsh",
      "url": "https://searchcode.com/codesearch/view/133379376/",
      "md5hash": "5625319a31c573fbcab56c896b9a1925",
      "lines": {
        "99": "   */",
        "100": "  public void setBreakType(short breakType) throws TextException {",
        "101": "  \tif (breakType == IParagraphProperties.BREAK_TYPE_PAGE_AFTER || ",
        "102": "  \t\t\tbreakType == IParagraphProperties.BREAK_TYPE_PAGE_BEFORE ||",
        "103": "\t\t\t\tbreakType == IParagraphProperties.BREAK_TYPE_PAGE_BOTH) {",
        "104": "  \t\tthis.breakType = breakType;",
        "105": "  \t}",
        "106": "  \telse {",
        "107": "  \t\tthrow new TextException(\"The breakType is not valid\");",
        "93": "   * ",
        "94": "   * @param breakType break type",
        "218": "    this.properties = properties;",
        "219": "  \tthis.breakType = properties.getBreakType();",
        "61": "",
        "62": "\tprivate short breakType = -1;"
      },
      "id": 133379376,
      "filename": "ParagraphPropertyStore.java"
    },
    {
      "repo": "https://bitbucket.org/sudhirk76/ogb",
      "language": "Java",
      "linescount": 1185,
      "location": "/applications/product/src/org/ofbiz/shipment/shipment",
      "name": "ogb",
      "url": "https://searchcode.com/codesearch/view/61595825/",
      "md5hash": "6941e699a94121b0d6fe1a5048b86b08",
      "lines": {
        "195": "                    result.put(ModelService.RESPONSE_MESSAGE, ModelService.RESPOND_ERROR);",
        "196": "                    result.put(ModelService.ERROR_MESSAGE, \"Max \" + breakTypeString +",
        "197": "                            \" must not be less than Min \" + breakTypeString + \".\");",
        "198": "                    return false;",
        "169": "    private static boolean applyQuantityBreak(Map<String, ? extends Object> context, Map<String, Object> result, List<GenericValue> storeAll, Delegator delegator,",
        "170": "                                              GenericValue estimate, String prefix, String breakType, String breakTypeString) {",
        "203": "                result.put(ModelService.ERROR_MESSAGE, breakTypeString+\" Span Requires BOTH Fields.\");",
        "179": "                        weightBreak.set(\"quantityBreakId\", newSeqId);",
        "180": "                        weightBreak.set(\"quantityBreakTypeId\", \"SHIP_\" + breakType.toUpperCase());",
        "182": "                        weightBreak.set(\"thruQuantity\", max);",
        "183": "                        estimate.set(breakType + \"BreakId\", newSeqId);",
        "184": "                        estimate.set(breakType + \"UnitPrice\", context.get(prefix + \"price\"));",
        "185": "                        if (context.containsKey(prefix + \"uom\")) {",
        "186": "                            estimate.set(breakType + \"UomId\", context.get(prefix + \"uom\"));",
        "202": "                result.put(ModelService.RESPONSE_MESSAGE, ModelService.RESPOND_ERROR);"
      },
      "id": 61595825,
      "filename": "ShipmentServices.java"
    },
    {
      "repo": "https://bitbucket.org/kphaneendrudu/myrep",
      "language": "Java",
      "linescount": 1185,
      "location": "/apache-ofbiz-10.04.02/applications/product/src/org/ofbiz/shipment/shipment",
      "name": "myrep",
      "url": "https://searchcode.com/codesearch/view/62164900/",
      "md5hash": "6941e699a94121b0d6fe1a5048b86b08",
      "lines": {
        "195": "                    result.put(ModelService.RESPONSE_MESSAGE, ModelService.RESPOND_ERROR);",
        "196": "                    result.put(ModelService.ERROR_MESSAGE, \"Max \" + breakTypeString +",
        "197": "                            \" must not be less than Min \" + breakTypeString + \".\");",
        "198": "                    return false;",
        "169": "    private static boolean applyQuantityBreak(Map<String, ? extends Object> context, Map<String, Object> result, List<GenericValue> storeAll, Delegator delegator,",
        "170": "                                              GenericValue estimate, String prefix, String breakType, String breakTypeString) {",
        "203": "                result.put(ModelService.ERROR_MESSAGE, breakTypeString+\" Span Requires BOTH Fields.\");",
        "179": "                        weightBreak.set(\"quantityBreakId\", newSeqId);",
        "180": "                        weightBreak.set(\"quantityBreakTypeId\", \"SHIP_\" + breakType.toUpperCase());",
        "182": "                        weightBreak.set(\"thruQuantity\", max);",
        "183": "                        estimate.set(breakType + \"BreakId\", newSeqId);",
        "184": "                        estimate.set(breakType + \"UnitPrice\", context.get(prefix + \"price\"));",
        "185": "                        if (context.containsKey(prefix + \"uom\")) {",
        "186": "                            estimate.set(breakType + \"UomId\", context.get(prefix + \"uom\"));",
        "202": "                result.put(ModelService.RESPONSE_MESSAGE, ModelService.RESPOND_ERROR);"
      },
      "id": 62164900,
      "filename": "ShipmentServices.java"
    },
    {
      "repo": "https://bitbucket.org/sudhirk76/ogb12",
      "language": "Java",
      "linescount": 1274,
      "location": "/applications/product/src/org/ofbiz/shipment/shipment",
      "name": "ogb12",
      "url": "https://searchcode.com/codesearch/view/63364968/",
      "md5hash": "d9e1f078b089f27f953906f95ac40db1",
      "lines": {
        "195": "                        weightBreak.set(\"quantityBreakId\", newSeqId);",
        "196": "                        weightBreak.set(\"quantityBreakTypeId\", \"SHIP_\" + breakType.toUpperCase());",
        "198": "                        weightBreak.set(\"thruQuantity\", max);",
        "199": "                        estimate.set(breakType + \"BreakId\", newSeqId);",
        "200": "                        estimate.set(breakType + \"UnitPrice\", context.get(prefix + \"price\"));",
        "201": "                        if (context.containsKey(prefix + \"uom\")) {",
        "202": "                            estimate.set(breakType + \"UomId\", context.get(prefix + \"uom\"));",
        "211": "                    result.put(ModelService.RESPONSE_MESSAGE, ModelService.RESPOND_ERROR);",
        "212": "                    result.put(ModelService.ERROR_MESSAGE, \"Max \" + breakTypeString +",
        "213": "                            \" must not be less than Min \" + breakTypeString + \".\");",
        "214": "                    return false;",
        "185": "    private static boolean applyQuantityBreak(Map<String, ? extends Object> context, Map<String, Object> result, List<GenericValue> storeAll, Delegator delegator,",
        "186": "                                              GenericValue estimate, String prefix, String breakType, String breakTypeString) {",
        "219": "                result.put(ModelService.ERROR_MESSAGE, breakTypeString+\" Span Requires BOTH Fields.\");",
        "218": "                result.put(ModelService.RESPONSE_MESSAGE, ModelService.RESPOND_ERROR);"
      },
      "id": 63364968,
      "filename": "ShipmentServices.java"
    },
    {
      "repo": "https://bitbucket.org/kubohiroya/fop-formgenerator",
      "language": "Java",
      "linescount": 531,
      "location": "/src/java/org/apache/fop/render/rtf/rtflib/rtfdoc",
      "name": "fop-formgenerator",
      "url": "https://searchcode.com/codesearch/view/128944989/",
      "md5hash": "c52f9342f81c554d9eef74b10a319347",
      "lines": {
        "283": "                && (lit.previous() instanceof RtfCloseGroupMark)) {",
        "197": "     * attributes, adds <code>CloseGroupMark</code> as a child.",
        "198": "     * @param breakType the break type",
        "167": "     */",
        "200": "     */",
        "169": "        RtfCloseGroupMark r = new RtfCloseGroupMark(this, writer, breakType);",
        "170": "    }",
        "203": "      rtfSpaceManager.stopUpdatingSpaceBefore();",
        "204": "      addCloseGroupMark(breakType);",
        "168": "    private void addCloseGroupMark(int breakType) throws IOException {",
        "201": "    public void popBlockAttributes(int breakType) throws IOException {",
        "89": "    private class RtfCloseGroupMark extends RtfElement {",
        "90": "        private int breakType = BREAK_NONE;",
        "91": "",
        "284": "            tmp.push(Integer.valueOf(((RtfCloseGroupMark)lit.next()).getBreakType()));"
      },
      "id": 128944989,
      "filename": "RtfTextrun.java"
    },
    {
      "repo": "https://bitbucket.org/kubohiroya/patch-for-sqs-translator",
      "language": "Java",
      "linescount": 531,
      "location": "/src/java/org/apache/fop/render/rtf/rtflib/rtfdoc",
      "name": "patch-for-sqs-translator",
      "url": "https://searchcode.com/codesearch/view/128948094/",
      "md5hash": "c52f9342f81c554d9eef74b10a319347",
      "lines": {
        "283": "                && (lit.previous() instanceof RtfCloseGroupMark)) {",
        "197": "     * attributes, adds <code>CloseGroupMark</code> as a child.",
        "198": "     * @param breakType the break type",
        "167": "     */",
        "200": "     */",
        "169": "        RtfCloseGroupMark r = new RtfCloseGroupMark(this, writer, breakType);",
        "170": "    }",
        "203": "      rtfSpaceManager.stopUpdatingSpaceBefore();",
        "204": "      addCloseGroupMark(breakType);",
        "168": "    private void addCloseGroupMark(int breakType) throws IOException {",
        "201": "    public void popBlockAttributes(int breakType) throws IOException {",
        "89": "    private class RtfCloseGroupMark extends RtfElement {",
        "90": "        private int breakType = BREAK_NONE;",
        "91": "",
        "284": "            tmp.push(Integer.valueOf(((RtfCloseGroupMark)lit.next()).getBreakType()));"
      },
      "id": 128948094,
      "filename": "RtfTextrun.java"
    },
    {
      "repo": "https://bitbucket.org/banbury/wollmux",
      "language": "Java",
      "linescount": 508,
      "location": "/src/de/muenchen/allg/itd51/wollmux/former/section",
      "name": "wollmux",
      "url": "https://searchcode.com/codesearch/view/128523753/",
      "md5hash": "34ad56c0dde3b0fe2965052ab6979f3d",
      "lines": {
        "272": "   * Liefert true gdw der erste Absatz in range einen BreakType.PAGE_BEFORE hat.",
        "287": "    }",
        "211": "   * ",
        "212": "   * ACHTUNG! Derzeit wird nur BreakType.PAGE_BEFORE unterst\u00fctzt. Andere Breaks",
        "283": "        UNO.XEnumerationAccess(range).createEnumeration().nextElement();",
        "284": "      Object breakType = UNO.getProperty(paragraph, \"BreakType\");",
        "285": "      if (breakType != null",
        "286": "        && breakType.equals(com.sun.star.style.BreakType.PAGE_BEFORE)) return true;",
        "271": "  /**"
      },
      "id": 128523753,
      "filename": "AllSectionLineViewsPanel.java"
    },
    {
      "repo": "https://bitbucket.org/nikkolin/ofbiz",
      "language": "Java",
      "linescount": 1185,
      "location": "/applications/product/src/org/ofbiz/shipment/shipment",
      "name": "ofbiz",
      "url": "https://searchcode.com/codesearch/view/132384355/",
      "md5hash": "6941e699a94121b0d6fe1a5048b86b08",
      "lines": {
        "195": "                    result.put(ModelService.RESPONSE_MESSAGE, ModelService.RESPOND_ERROR);",
        "196": "                    result.put(ModelService.ERROR_MESSAGE, \"Max \" + breakTypeString +",
        "197": "                            \" must not be less than Min \" + breakTypeString + \".\");",
        "198": "                    return false;",
        "169": "    private static boolean applyQuantityBreak(Map<String, ? extends Object> context, Map<String, Object> result, List<GenericValue> storeAll, Delegator delegator,",
        "170": "                                              GenericValue estimate, String prefix, String breakType, String breakTypeString) {",
        "203": "                result.put(ModelService.ERROR_MESSAGE, breakTypeString+\" Span Requires BOTH Fields.\");",
        "179": "                        weightBreak.set(\"quantityBreakId\", newSeqId);",
        "180": "                        weightBreak.set(\"quantityBreakTypeId\", \"SHIP_\" + breakType.toUpperCase());",
        "182": "                        weightBreak.set(\"thruQuantity\", max);",
        "183": "                        estimate.set(breakType + \"BreakId\", newSeqId);",
        "184": "                        estimate.set(breakType + \"UnitPrice\", context.get(prefix + \"price\"));",
        "185": "                        if (context.containsKey(prefix + \"uom\")) {",
        "186": "                            estimate.set(breakType + \"UomId\", context.get(prefix + \"uom\"));",
        "202": "                result.put(ModelService.RESPONSE_MESSAGE, ModelService.RESPOND_ERROR);"
      },
      "id": 132384355,
      "filename": "ShipmentServices.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 227,
      "location": "/odk/examples/java/Text",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45029600/",
      "md5hash": "8be0c173d5def96dab019245df658cc3",
      "lines": {
        "112": "                com.sun.star.style.BreakType.PAGE_AFTER );",
        "113": "            System.out.println( \"set the paragraph attribute Breaktype to PageAfter\" );",
        "114": "",
        "110": "",
        "111": "            xPropertySet.setPropertyValue(\"BreakType\","
      },
      "id": 45029600,
      "filename": "StyleCreation.java"
    },
    {
      "repo": "https://github.com/lexxy23/scf.git",
      "language": "Java",
      "linescount": 108,
      "location": "/main/core/src/main/java/com/googlecode/socofo/core/api",
      "name": "scf",
      "url": "https://searchcode.com/codesearch/view/97221896/",
      "md5hash": "0db804dd9d6081bee50f4e4e3f7e1713",
      "lines": {
        "48": "     * @param breakType",
        "51": "     */",
        "52": "    List<String> breakContent(int lineWidth, String content, int firstIndent, BreakFormat breakType);",
        "47": "     *            if needed: the number of chars to indent on the first line"
      },
      "id": 97221896,
      "filename": "LineHandler.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh-new",
      "language": "Java",
      "linescount": 759,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/text",
      "name": "elexis-base-marlovitsh-new",
      "url": "https://searchcode.com/codesearch/view/61098365/",
      "md5hash": "2e3ae4cf5026a7566d20467d03df9599",
      "lines": {
        "57": "",
        "58": "import com.sun.star.style.BreakType;",
        "283": "      propertySet.setPropertyValue(\"BreakType\", BreakType.PAGE_AFTER);",
        "282": "      XPropertySet propertySet = (XPropertySet)UnoRuntime.queryInterface(XPropertySet.class, xTextCursor);"
      },
      "id": 61098365,
      "filename": "TextCursor.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 24,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 6,
      "source": "Github",
      "id": 2
    },
    {
      "count": 1,
      "source": "Sourceforge",
      "id": 4
    }
  ]
}