{
  "matchterm": "BoundedInputStream",
  "previouspage": null,
  "searchterm": "BoundedInputStream",
  "query": "BoundedInputStream",
  "language_filters": [
    {
      "count": 66,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 66,
  "results": [
    {
      "repo": "https://gitlab.com/fdroid/fdroidclient.git",
      "language": "Java",
      "linescount": 232,
      "location": "/F-Droid/src/org/apache/commons/io/input",
      "name": "fdroidclient",
      "url": "https://searchcode.com/codesearch/view/115491460/",
      "md5hash": "46c04ebd8b0e7f30790aea4eccbd8ae9",
      "lines": {
        "33": " *",
        "34": " * @version $Id: BoundedInputStream.java 1307462 2012-03-30 15:13:11Z ggregory $",
        "36": " */",
        "37": "public class BoundedInputStream extends InputStream {",
        "73": "     */",
        "74": "    public BoundedInputStream(InputStream in) {",
        "54": "    /**",
        "55": "     * Creates a new <code>BoundedInputStream</code> that wraps the given input",
        "68": "    /**",
        "60": "     */",
        "61": "    public BoundedInputStream(InputStream in, long size) {",
        "69": "     * Creates a new <code>BoundedInputStream</code> that wraps the given input"
      },
      "id": 115491460,
      "filename": "BoundedInputStream.java"
    },
    {
      "repo": "https://github.com/schans/jackrabbit.git",
      "language": "Java",
      "linescount": 184,
      "location": "/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/io",
      "name": "jackrabbit",
      "url": "https://searchcode.com/codesearch/view/114221232/",
      "md5hash": "bad217a2362ad987a9903f399c3fa141",
      "lines": {
        "65": "",
        "34": " */",
        "35": "public class BoundedInputStream extends InputStream {",
        "52": "    /**",
        "53": "     * Creates a new <code>BoundedInputStream</code> that wraps the given input",
        "58": "     */",
        "59": "    public BoundedInputStream(InputStream in, long size) {",
        "66": "    public BoundedInputStream(InputStream in) {"
      },
      "id": 114221232,
      "filename": "BoundedInputStream.java"
    },
    {
      "repo": "https://bitbucket.org/mku/nu-util",
      "language": "Java",
      "linescount": 130,
      "location": "/src/nu/validator/io",
      "name": "nu-util",
      "url": "https://searchcode.com/codesearch/view/134778710/",
      "md5hash": "d712f3b4292b0a692221f8b025b7e568",
      "lines": {
        "48": "    public BoundedInputStream(InputStream delegate, long limit, String systemId) {",
        "33": " */",
        "34": "public final class BoundedInputStream extends InputStream {",
        "47": "     */"
      },
      "id": 134778710,
      "filename": "BoundedInputStream.java"
    },
    {
      "repo": "https://github.com/imace/bson4jackson.git",
      "language": "Java",
      "linescount": 105,
      "location": "/src/main/java/de/undercouch/bson4jackson/io",
      "name": "bson4jackson",
      "url": "https://searchcode.com/codesearch/view/96825685/",
      "md5hash": "8b2621c451ef5f58a58367fb0a55613d",
      "lines": {
        "25": " */",
        "26": "public class BoundedInputStream extends FilterInputStream {",
        "36": "\t */",
        "37": "\tpublic BoundedInputStream(InputStream in, int size) {"
      },
      "id": 96825685,
      "filename": "BoundedInputStream.java"
    },
    {
      "repo": "https://code.google.com/p/anymemo/",
      "language": "Java",
      "linescount": 231,
      "location": "/src/org/apache/mycommons/io/input",
      "name": "anymemo",
      "url": "https://searchcode.com/codesearch/view/12444225/",
      "md5hash": "d93efb3b9e434d499523acbdffc11e6f",
      "lines": {
        "67": "    /**",
        "35": " */",
        "36": "public class BoundedInputStream extends InputStream {",
        "53": "    /**",
        "54": "     * Creates a new <code>BoundedInputStream</code> that wraps the given input",
        "73": "    public BoundedInputStream(InputStream in) {",
        "72": "     */",
        "68": "     * Creates a new <code>BoundedInputStream</code> that wraps the given input",
        "59": "     */",
        "60": "    public BoundedInputStream(InputStream in, long size) {"
      },
      "id": 12444225,
      "filename": "BoundedInputStream.java"
    },
    {
      "repo": "git://github.com/Contra/CJBE.git",
      "language": "Java",
      "linescount": 231,
      "location": "/src/org/apache/commons/io/input",
      "name": "CJBE",
      "url": "https://searchcode.com/codesearch/view/16499248/",
      "md5hash": "18326077231e2e65748f584f89e80c95",
      "lines": {
        "67": "    /**",
        "35": " */",
        "36": "public class BoundedInputStream extends InputStream {",
        "53": "    /**",
        "54": "     * Creates a new <code>BoundedInputStream</code> that wraps the given input",
        "73": "    public BoundedInputStream(InputStream in) {",
        "72": "     */",
        "68": "     * Creates a new <code>BoundedInputStream</code> that wraps the given input",
        "59": "     */",
        "60": "    public BoundedInputStream(InputStream in, long size) {"
      },
      "id": 16499248,
      "filename": "BoundedInputStream.java"
    },
    {
      "repo": "http://pagavcs.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 179,
      "location": "/mugcommander/java/source/com/mucommander/io",
      "name": "pagavcs",
      "url": "https://searchcode.com/codesearch/view/11717856/",
      "md5hash": "ee70d910b86bdbeb9e3d550be813d1d9",
      "lines": {
        "39": " */",
        "40": "public class BoundedInputStream extends FilterInputStream implements Bounded {",
        "25": "/**",
        "26": " * <code>BoundedInputStream</code> is an InputStream that has a set limit to the number of bytes that can be read or",
        "59": "     */",
        "60": "    public BoundedInputStream(InputStream in, long allowedBytes, boolean throwStreamOutOfBoundException) {",
        "46": "    /**",
        "47": "     * Creates a new <code>BoundedInputStream</code> over the specified stream, allowing a maximum of"
      },
      "id": 11717856,
      "filename": "BoundedInputStream.java"
    },
    {
      "repo": "https://github.com/wpc009/adbcj.git",
      "language": "Java",
      "linescount": 53,
      "location": "/mysql/src/main/java/org/adbcj/mysql/codec",
      "name": "adbcj",
      "url": "https://searchcode.com/codesearch/view/69115246/",
      "md5hash": "6cccf917e42be9b8cba6c9170e6367a1",
      "lines": {
        "10": "",
        "11": "    public BoundedInputStream(InputStream in, int length) {",
        "5": "",
        "6": "public class BoundedInputStream extends InputStream {"
      },
      "id": 69115246,
      "filename": "BoundedInputStream.java"
    },
    {
      "repo": "https://github.com/lowtalker/commons-io.git",
      "language": "Java",
      "linescount": 101,
      "location": "/src/test/java/org/apache/commons/io/input",
      "name": "commons-io",
      "url": "https://searchcode.com/codesearch/view/74617241/",
      "md5hash": "f2c0c2d68e5638ed644653d9661cdeca",
      "lines": {
        "32": "    public BoundedInputStreamTest(String name) {",
        "58": "        // limit < length",
        "36": "    /**",
        "37": "     * Test {@link BoundedInputStream#read()}.",
        "39": "    public void testReadSingle() throws Exception {",
        "40": "        BoundedInputStream bounded = null;",
        "44": "        // limit = length",
        "45": "        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), helloWorld.length);",
        "51": "        // limit > length",
        "52": "        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), helloWorld.length + 1);",
        "25": "/**",
        "26": " * Tests for {@link BoundedInputStream}.",
        "59": "        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), hello.length);",
        "29": " */",
        "30": "public class BoundedInputStreamTest extends TestCase {",
        "31": ""
      },
      "id": 74617241,
      "filename": "BoundedInputStreamTest.java"
    },
    {
      "repo": "https://github.com/sumedhasanjeewa/jaggery.git",
      "language": "Java",
      "linescount": 225,
      "location": "/components/jaggery-core/org.jaggeryjs.jaggery.core/src/main/java/org/jaggeryjs/jaggery/core/plugins",
      "name": "jaggery",
      "url": "https://searchcode.com/codesearch/view/75608662/",
      "md5hash": "593c55ab93430de5c540129a554c36e0",
      "lines": {
        "4": "import org.apache.commons.io.IOUtils;",
        "5": "import org.apache.commons.io.input.BoundedInputStream;",
        "86": "            BoundedInputStream boundedInputStream = new BoundedInputStream(stream, count);",
        "87": "            return IOUtils.toString(boundedInputStream, \"UTF-8\");",
        "88": "        } catch (IOException e) {",
        "85": "        try {"
      },
      "id": 75608662,
      "filename": "UploadedFile.java"
    },
    {
      "repo": "https://github.com/imace/bson4jackson.git",
      "language": "Java",
      "linescount": 160,
      "location": "/src/test/java/de/undercouch/bson4jackson/io",
      "name": "bson4jackson",
      "url": "https://searchcode.com/codesearch/view/96825591/",
      "md5hash": "c1ca24e3a625a60ca733462b285a51d1",
      "lines": {
        "33": "\t\tByteArrayInputStream bais = new ByteArrayInputStream(bytes);",
        "34": "\t\tBoundedInputStream is = new BoundedInputStream(bais, 3);",
        "67": "\t\tBoundedInputStream is = new BoundedInputStream(bais, 3);",
        "113": "\t\tByteArrayInputStream bais = new ByteArrayInputStream(bytes);",
        "98": "\t\tByteArrayInputStream bais = new ByteArrayInputStream(bytes);",
        "49": "\t\tByteArrayInputStream bais = new ByteArrayInputStream(bytes);",
        "139": "\t\t};",
        "140": "\t\tBoundedInputStream is = new BoundedInputStream(bais, 4);",
        "66": "\t\tByteArrayInputStream bais = new ByteArrayInputStream(bytes);",
        "50": "\t\tBoundedInputStream is = new BoundedInputStream(bais, 5);",
        "81": "\t\tByteArrayInputStream bais = new ByteArrayInputStream(bytes);",
        "82": "\t\tBoundedInputStream is = new BoundedInputStream(bais, 3);",
        "99": "\t\tBoundedInputStream is = new BoundedInputStream(bais, 5);",
        "23": "/**",
        "24": " * Tests for {@link BoundedInputStream}",
        "114": "\t\tBoundedInputStream is = new BoundedInputStream(bais, 5);"
      },
      "id": 96825591,
      "filename": "BoundedInputStreamTest.java"
    },
    {
      "repo": "https://github.com/buglabs/dragonfly.git",
      "language": "Java",
      "linescount": 101,
      "location": "/org.apache.commons.io/src/test/java/org/apache/commons/io/input",
      "name": "dragonfly",
      "url": "https://searchcode.com/codesearch/view/65675158/",
      "md5hash": "c5eba1d6bdaeb0ce9ae304e21ccbbd5a",
      "lines": {
        "32": "    public BoundedInputStreamTest(String name) {",
        "36": "    /**",
        "37": "     * Test {@link BoundedInputStream#read()}.",
        "39": "    public void testReadSingle() throws Exception {",
        "40": "        BoundedInputStream bounded = null;",
        "44": "        // limit = length",
        "45": "        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), helloWorld.length);",
        "51": "        // limit > length",
        "52": "        bounded = new BoundedInputStream(new ByteArrayInputStream(helloWorld), helloWorld.length + 1);",
        "25": "/**",
        "26": " * Tests for {@link BoundedInputStream}.",
        "27": " *",
        "28": " * @version $Id: BoundedInputStreamTest.java 1003659 2010-10-01 21:41:38Z niallp $",
        "29": " */",
        "30": "public class BoundedInputStreamTest extends TestCase {",
        "31": ""
      },
      "id": 65675158,
      "filename": "BoundedInputStreamTest.java"
    },
    {
      "repo": "https://github.com/mheath/adbcj.git",
      "language": "Java",
      "linescount": 381,
      "location": "/mysql/codec/src/main/java/org/adbcj/mysql/codec",
      "name": "adbcj",
      "url": "https://searchcode.com/codesearch/view/138013864/",
      "md5hash": "05e8b404043a552ecd340180bda6eed0",
      "lines": {
        "272": "\tprotected OkResponse decodeOkResponse(BoundedInputStream in, int length, int packetNumber) throws IOException {",
        "323": "\t// TODO: This stream implementation doesn't even work b ecause it doesn't delegate all InputStream methods",
        "324": "\tprivate static class BoundedInputStream extends InputStream {",
        "133": "\t\tfinal int packetNumber = IoUtils.safeRead(input);",
        "134": "\t\tBoundedInputStream in = new BoundedInputStream(input, length);",
        "328": "",
        "329": "\t\tpublic BoundedInputStream(InputStream in, int length) {",
        "271": ""
      },
      "id": 138013864,
      "filename": "MySqlClientDecoder.java"
    },
    {
      "repo": "https://github.com/felix98205/mdrill.git",
      "language": "Java",
      "linescount": 1002,
      "location": "/trunk/adhoc-public/src/main/java/com/alimama/mdrill/utils/zip",
      "name": "mdrill",
      "url": "https://searchcode.com/codesearch/view/96853490/",
      "md5hash": "40c79eae71578341975316ce57f9b7e6",
      "lines": {
        "864": "     */",
        "865": "    private class BoundedInputStream extends InputStream {",
        "325": "        long start = offsetEntry.dataOffset;",
        "326": "        BoundedInputStream bis =",
        "327": "            new BoundedInputStream(start, ze.getCompressedSize());",
        "328": "        switch (ze.getMethod()) {",
        "870": "        BoundedInputStream(long start, long remaining) {",
        "869": ""
      },
      "id": 96853490,
      "filename": "ZipFile.java"
    },
    {
      "repo": "https://github.com/felix98205/mdrill.git",
      "language": "Java",
      "linescount": 1049,
      "location": "/trunk/adhoc-public/src/main/java/com/alimama/mdrill/utils/zip",
      "name": "mdrill",
      "url": "https://searchcode.com/codesearch/view/96853575/",
      "md5hash": "5f67d4fa03cdbbb71f5076eaee48b2bb",
      "lines": {
        "912": "    private class BoundedInputStream extends InputStream {",
        "371": "        long start = offsetEntry.dataOffset;",
        "372": "        BoundedInputStream bis =",
        "373": "            new BoundedInputStream(start, ze.getCompressedSize());",
        "374": "        switch (ze.getMethod()) {",
        "917": "        BoundedInputStream(long start, long remaining) {",
        "916": "",
        "911": "     */"
      },
      "id": 96853575,
      "filename": "ZipFilelocal.java"
    },
    {
      "repo": "http://pagavcs.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 172,
      "location": "/mugcommander/java/srctst/com/mucommander/io",
      "name": "pagavcs",
      "url": "https://searchcode.com/codesearch/view/11717471/",
      "md5hash": "817f4d553394d4a8ea0719759d95d3b9",
      "lines": {
        "32": "public class BoundedInputStreamTest extends TestCase {",
        "139": "    /**",
        "134": "        // Attempt to read a chunk larger than the remaining bytes and assert that it does not return -1",
        "135": "        bin = new BoundedInputStream(new ByteArrayInputStream(TEST_BYTES), 4, false);",
        "40": "     *",
        "41": "     * @param bin the BoundedInputStream to prepare",
        "43": "     */",
        "44": "    private void prepareBoundedStream(BoundedInputStream bin) throws IOException {",
        "144": "    public void testUnboundedStream() throws IOException {",
        "145": "        BoundedInputStream bin = new BoundedInputStream(new ByteArrayInputStream(TEST_BYTES), -1, false);",
        "140": "     * Tests a <code>BoundedInputStream</code> operating in unbounded mode.",
        "26": "/**",
        "27": " * A test case for {@link com.mucommander.io.BoundedInputStream}.",
        "28": " *",
        "29": " * @see com.mucommander.io.BoundedInputStream ",
        "31": " */"
      },
      "id": 11717471,
      "filename": "BoundedInputStreamTest.java"
    },
    {
      "repo": "https://github.com/wpc009/adbcj.git",
      "language": "Java",
      "linescount": 168,
      "location": "/mysql/src/main/java/org/adbcj/mysql/codec/decoding",
      "name": "adbcj",
      "url": "https://searchcode.com/codesearch/view/69115400/",
      "md5hash": "c421c311183e003e5e568d83704eb72c",
      "lines": {
        "64": "        public ResultAndState parse(int length, int packetNumber,",
        "65": "                                    BoundedInputStream in, Channel channel) throws IOException {",
        "34": "",
        "3": "import io.netty.channel.Channel;",
        "4": "import org.adbcj.mysql.codec.BoundedInputStream;",
        "129": "        public ResultAndState parse(int length, int packetNumber, BoundedInputStream in, Channel channel) throws IOException {",
        "96": "        public ResultAndState parse(int length, int packetNumber, BoundedInputStream in, Channel channel) throws IOException {",
        "128": "        @Override",
        "35": "    protected void readAllAndIgnore(BoundedInputStream in) throws IOException {",
        "153": "        @Override",
        "154": "        public ResultAndState parse(int length, int packetNumber, BoundedInputStream in, Channel channel) throws IOException {",
        "95": "        @Override"
      },
      "id": 69115400,
      "filename": "FinishPrepareStatement.java"
    },
    {
      "repo": "https://github.com/wpc009/adbcj.git",
      "language": "Java",
      "linescount": 204,
      "location": "/mysql/src/main/java/org/adbcj/mysql/codec/decoding",
      "name": "adbcj",
      "url": "https://searchcode.com/codesearch/view/69115351/",
      "md5hash": "4f4d86b2247671318296f719ddea6c1e",
      "lines": {
        "144": "            public <T> Value[] decode(BoundedInputStream in, int fieldCount, Row<T> row) throws IOException {",
        "68": "            @Override",
        "69": "            public <T> Value[] decode(BoundedInputStream in, int fieldCount, Row<T> row) throws IOException {",
        "6": "import org.adbcj.Value;",
        "7": "import org.adbcj.mysql.codec.BoundedInputStream;",
        "200": "        public abstract <T> Value[] decode(BoundedInputStream in, int fieldCount, Row<T> row) throws IOException;",
        "199": "",
        "143": "            @Override",
        "46": "    public ResultAndState parse(int length, int packetNumber,",
        "47": "                                BoundedInputStream in, Channel channel) throws IOException {"
      },
      "id": 69115351,
      "filename": "Row.java"
    },
    {
      "repo": "https://github.com/gogoego-gerrit/iucn-sis.git",
      "language": "Java",
      "linescount": 635,
      "location": "/org.apache.commons.compress/src/org/apache/commons/compress/archivers/zip",
      "name": "iucn-sis",
      "url": "https://searchcode.com/codesearch/view/110356665/",
      "md5hash": "cb391ca2cd71287588cc6f2f3a5ece2e",
      "lines": {
        "563": "     */",
        "260": "        long start = offsetEntry.dataOffset;",
        "261": "        BoundedInputStream bis =",
        "262": "            new BoundedInputStream(start, ze.getCompressedSize());",
        "263": "        switch (ze.getMethod()) {",
        "568": "",
        "564": "    private class BoundedInputStream extends InputStream {",
        "569": "        BoundedInputStream(long start, long remaining) {"
      },
      "id": 110356665,
      "filename": "ZipFile.java"
    },
    {
      "repo": "https://bitbucket.org/keithb/tdd",
      "language": "Java",
      "linescount": 569,
      "location": "/targets/ant/1.7.0/org/apache/tools/zip",
      "name": "tdd",
      "url": "https://searchcode.com/codesearch/view/120311166/",
      "md5hash": "37a71159a44220b7f7b2266c6c066c83",
      "lines": {
        "510": "",
        "505": "     */",
        "506": "    private class BoundedInputStream extends InputStream {",
        "219": "        long start = offsetEntry.dataOffset;",
        "220": "        BoundedInputStream bis =",
        "221": "            new BoundedInputStream(start, ze.getCompressedSize());",
        "222": "        switch (ze.getMethod()) {",
        "511": "        BoundedInputStream(long start, long remaining) {"
      },
      "id": 120311166,
      "filename": "ZipFile.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 38,
      "source": "Github",
      "id": 2
    },
    {
      "count": 13,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 13,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 2,
      "source": "GitLab",
      "id": 13
    }
  ]
}