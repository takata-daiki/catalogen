{
  "matchterm": "IndexRecord",
  "previouspage": null,
  "searchterm": "IndexRecord",
  "query": "IndexRecord",
  "language_filters": [
    {
      "count": 129,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 129,
  "results": [
    {
      "repo": "https://bitbucket.org/dyp/geotools.git",
      "language": "Java",
      "linescount": 61,
      "location": "/modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/indexed/attribute",
      "name": "geotools",
      "url": "https://searchcode.com/codesearch/view/47133902/",
      "md5hash": "cf1dd316cecfc8caba1db9d758a8c3c9",
      "lines": {
        "32": "",
        "33": "    public IndexRecord(Comparable attribute, long featureID) {",
        "49": "        }",
        "48": "            return attribute.compareTo(((IndexRecord) o).getAttribute());",
        "27": " */",
        "28": "public class IndexRecord implements Comparable {",
        "46": "    public int compareTo(Object o) {",
        "47": "        if (o instanceof IndexRecord) {"
      },
      "id": 47133902,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "https://bitbucket.org/sgratzl/sqlitereader.git",
      "language": "Java",
      "linescount": 57,
      "location": "/src/main/java/at/jku/sii/sqlitereader/model/master",
      "name": "sqlitereader",
      "url": "https://searchcode.com/codesearch/view/39185502/",
      "md5hash": "ec4749306b1b7c9e7c390266cecfae43",
      "lines": {
        "46": "\t\treturn String.format(\"IndexRecord [index=%s, %s]\", this.index, this.toStringAttr());",
        "10": "",
        "11": "public class IndexRecord extends MasterTableRecord {",
        "13": "",
        "14": "\tpublic IndexRecord(Record c) {",
        "45": "\tpublic String toString() {"
      },
      "id": 39185502,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "https://github.com/kambatla/hadoop.git",
      "language": "Java",
      "linescount": 38,
      "location": "/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred",
      "name": "hadoop",
      "url": "https://searchcode.com/codesearch/view/100323165/",
      "md5hash": "719d848a90a0236875adc5443365aca5",
      "lines": {
        "32": "  public IndexRecord(long startOffset, long rawLength, long partLength) {",
        "24": "@InterfaceStability.Unstable",
        "25": "public class IndexRecord {",
        "29": "",
        "30": "  public IndexRecord() { }",
        "31": ""
      },
      "id": 100323165,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 217,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642418/",
      "md5hash": "2b661f17b2ecd9447e362a3560874f95",
      "lines": {
        "206": "    public Object clone() {",
        "193": "    ",
        "194": "    /** Returns the size of an INdexRecord when it needs to index the specified number of blocks",
        "68": "",
        "69": "    public IndexRecord()",
        "57": "",
        "58": "public class IndexRecord",
        "77": "",
        "78": "    public IndexRecord(RecordInputStream in)",
        "207": "      IndexRecord rec = new IndexRecord();"
      },
      "id": 15642418,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 105,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260335/",
      "md5hash": "896c46d7ed74543ea3a47db1a32fae4d",
      "lines": {
        "60": "  public IndexRecord(int pos, int r, int bl)",
        "59": "   */",
        "28": " */",
        "29": "class IndexRecord extends WritableRecordData"
      },
      "id": 43260335,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 105,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200863/",
      "md5hash": "896c46d7ed74543ea3a47db1a32fae4d",
      "lines": {
        "60": "  public IndexRecord(int pos, int r, int bl)",
        "59": "   */",
        "28": " */",
        "29": "class IndexRecord extends WritableRecordData"
      },
      "id": 49200863,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 105,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/write/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374562/",
      "md5hash": "594bda2c5ac7436cc9c1d70e78d5135a",
      "lines": {
        "60": "  public IndexRecord(int pos, int r, int bl)",
        "59": "   */",
        "28": " */",
        "29": "class IndexRecord extends WritableRecordData"
      },
      "id": 11374562,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "http://hs4j.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 38,
      "location": "/src/main/java/com/google/code/hs4j/impl",
      "name": "hs4j",
      "url": "https://searchcode.com/codesearch/view/11889606/",
      "md5hash": "6f235da2a5d3f326631a6d24f9e450be",
      "lines": {
        "27": "\tpublic IndexRecord(int id, String db, String tableName, String indexName,",
        "26": "",
        "19": " */",
        "20": "public class IndexRecord {"
      },
      "id": 11889606,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "git://github.com/samtingleff/valkyrie.git",
      "language": "Java",
      "linescount": 38,
      "location": "/src/com/othersonline/kv/backends/handlersocket/impl",
      "name": "valkyrie",
      "url": "https://searchcode.com/codesearch/view/15041997/",
      "md5hash": "27a91ba91ac721752518870272974e64",
      "lines": {
        "27": "\tpublic IndexRecord(int id, String db, String tableName, String indexName,",
        "26": "",
        "19": " */",
        "20": "public class IndexRecord {"
      },
      "id": 15041997,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "git://github.com/killme2008/hs4j.git",
      "language": "Java",
      "linescount": 40,
      "location": "/src/main/java/com/google/code/hs4j/impl",
      "name": "hs4j",
      "url": "https://searchcode.com/codesearch/view/15565101/",
      "md5hash": "406309908c153cb9cb78beec5dc02e9e",
      "lines": {
        "27": "",
        "28": "\tpublic IndexRecord(int id, String db, String tableName, String indexName,",
        "19": " */",
        "20": "public class IndexRecord {"
      },
      "id": 15565101,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "https://bitbucket.org/btingle/bct-ead-xtf",
      "language": "Java",
      "linescount": 69,
      "location": "/WEB-INF/src/org/cdlib/xtf/textIndexer",
      "name": "bct-ead-xtf",
      "url": "https://searchcode.com/codesearch/view/63473096/",
      "md5hash": "083009440932763252a6d6be8db03b9e",
      "lines": {
        "48": "public abstract class IndexRecord ",
        "47": " */"
      },
      "id": 63473096,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "https://bitbucket.org/btingle/xtf-doc-search",
      "language": "Java",
      "linescount": 69,
      "location": "/WEB-INF/src/org/cdlib/xtf/textIndexer",
      "name": "xtf-doc-search",
      "url": "https://searchcode.com/codesearch/view/132069905/",
      "md5hash": "083009440932763252a6d6be8db03b9e",
      "lines": {
        "48": "public abstract class IndexRecord ",
        "47": " */"
      },
      "id": 132069905,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "https://bitbucket.org/barbarahui/xtf_aetb",
      "language": "Java",
      "linescount": 69,
      "location": "/WEB-INF/src/org/cdlib/xtf/textIndexer",
      "name": "xtf_aetb",
      "url": "https://searchcode.com/codesearch/view/132867578/",
      "md5hash": "083009440932763252a6d6be8db03b9e",
      "lines": {
        "48": "public abstract class IndexRecord ",
        "47": " */"
      },
      "id": 132867578,
      "filename": "IndexRecord.java"
    },
    {
      "repo": "https://bitbucket.org/shenli/tapa.git",
      "language": "Java",
      "linescount": 1572,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "tapa",
      "url": "https://searchcode.com/codesearch/view/49661699/",
      "md5hash": "63f8d6ca4cc31b8e341db63da110ec9e",
      "lines": {
        "1505": "          for(int i = 0; i < numSpills; i++) {",
        "1506": "            IndexRecord indexRecord = indexCacheList.get(i).getIndex(parts);",
        "1515": "                  \"Spill =\" + i + \"(\" + indexRecord.startOffset + \",\" +",
        "1508": "            Segment<K,V> s =",
        "1478": "        //create dummy files",
        "1318": "        // we don't run the combiner for a single record",
        "1319": "        IndexRecord rec = new IndexRecord();",
        "1510": "                               indexRecord.partLength, codec, true);",
        "1514": "              LOG.debug(\"MapId=\" + mapId + \" Reducer=\" + parts +",
        "1479": "        IndexRecord rec = new IndexRecord();",
        "1516": "                  indexRecord.rawLength + \", \" + indexRecord.partLength + \")\");",
        "1229": "        int spindex = kvstart;",
        "1230": "        IndexRecord rec = new IndexRecord();",
        "1517": "            }",
        "1511": "            segmentList.add(i, s);",
        "1509": "              new Segment<K,V>(job, rfs, filename[i], indexRecord.startOffset,"
      },
      "id": 49661699,
      "filename": "MapTask.java"
    },
    {
      "repo": "https://bitbucket.org/nexj/webtools.jsdt.core.git",
      "language": "Java",
      "linescount": 1965,
      "location": "/bundles/org.eclipse.wst.jsdt.core/src/org/eclipse/wst/jsdt/internal/core/search",
      "name": "webtools.jsdt.core",
      "url": "https://searchcode.com/codesearch/view/45557724/",
      "md5hash": "469d79ad0ba1a75ee817ff275e7e284c",
      "lines": {
        "1154": "\t\tIndexQueryRequestor queryRequestor = new IndexQueryRequestor() {",
        "1155": "\t\t\tpublic boolean acceptIndexMatch(String documentPath, SearchPattern indexRecord, SearchParticipant participant, AccessRuleSet access) {",
        "1156": "\t\t\t\tif(!workingCopiesPaths.contains(documentPath)) {",
        "1157": "\t\t\t\t\tif (indexRecord instanceof MethodPattern) {",
        "1158": "\t\t\t\t\t\tMethodPattern record = (MethodPattern) indexRecord;",
        "1159": "\t\t\t\t\t\trequestor.acceptFunction(record.selector,",
        "1163": "\t\t\t\t\t}",
        "1164": "\t\t\t\t\telse if (indexRecord instanceof FieldPattern) {",
        "1165": "\t\t\t\t\t\tFieldPattern record = (FieldPattern) indexRecord;",
        "1166": "\t\t\t\t\t\trequestor.acceptField(record.name,",
        "1170": "\t\t\t\t\t}",
        "1171": "\t\t\t\t\telse if (indexRecord instanceof TypeDeclarationPattern) {",
        "1044": "\t\t\t\t// Filter unexpected types",
        "1045": "\t\t\t\tTypeDeclarationPattern record = (TypeDeclarationPattern) indexRecord;",
        "1172": "\t\t\t\t\t\tTypeDeclarationPattern record = (TypeDeclarationPattern) indexRecord;",
        "1173": "\t\t\t\t\t\trequestor.acceptType(record.qualification, "
      },
      "id": 45557724,
      "filename": "BasicSearchEngine.java"
    },
    {
      "repo": "https://github.com/YaoLin1/hadoop.git",
      "language": "Java",
      "linescount": 1524,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "hadoop",
      "url": "https://searchcode.com/codesearch/view/71662566/",
      "md5hash": "f9353823c8cf1283304ac46d61c6c569",
      "lines": {
        "1445": "        ",
        "1446": "        IndexRecord rec = new IndexRecord();",
        "1452": "          for(int i = 0; i < numSpills; i++) {",
        "1453": "            IndexRecord indexRecord = indexCacheList.get(i).getIndex(parts);",
        "1262": "        // we don't run the combiner for a single record",
        "1455": "            Segment<K,V> s =",
        "1456": "              new Segment<K,V>(job, rfs, filename[i], indexRecord.startOffset,",
        "1457": "                               indexRecord.partLength, codec, true);",
        "1458": "            segmentList.add(i, s);",
        "1423": "        IndexRecord rec = new IndexRecord();",
        "1422": "        //create dummy files",
        "1462": "                  \"Spill =\" + i + \"(\" + indexRecord.startOffset + \",\" +",
        "1463": "                  indexRecord.rawLength + \", \" + indexRecord.partLength + \")\");",
        "1464": "            }",
        "1263": "        IndexRecord rec = new IndexRecord();",
        "1461": "              LOG.debug(\"MapId=\" + mapId + \" Reducer=\" + parts +"
      },
      "id": 71662566,
      "filename": "MapTask.java"
    },
    {
      "repo": "https://github.com/edgar87/hadoop-common.git",
      "language": "Java",
      "linescount": 1915,
      "location": "/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred",
      "name": "hadoop-common",
      "url": "https://searchcode.com/codesearch/view/74065924/",
      "md5hash": "9c8602e15743ed1d01ecdf5435135f83",
      "lines": {
        "1824": "            Segment<K,V> s =",
        "1825": "              new Segment<K,V>(job, rfs, filename[i], indexRecord.startOffset,",
        "1538": "        int spindex = mstart;",
        "1539": "        final IndexRecord rec = new IndexRecord();",
        "1830": "              LOG.debug(\"MapId=\" + mapId + \" Reducer=\" + parts +",
        "1831": "                  \"Spill =\" + i + \"(\" + indexRecord.startOffset + \",\" +",
        "1832": "                  indexRecord.rawLength + \", \" + indexRecord.partLength + \")\");",
        "1833": "            }",
        "1826": "                               indexRecord.partLength, codec, true);",
        "1827": "            segmentList.add(i, s);",
        "1814": "        ",
        "1815": "        IndexRecord rec = new IndexRecord();",
        "1626": "        // we don't run the combiner for a single record",
        "1627": "        IndexRecord rec = new IndexRecord();",
        "1821": "          for(int i = 0; i < numSpills; i++) {",
        "1822": "            IndexRecord indexRecord = indexCacheList.get(i).getIndex(parts);"
      },
      "id": 74065924,
      "filename": "MapTask.java"
    },
    {
      "repo": "https://github.com/jboulon/hadoop-20.git",
      "language": "Java",
      "linescount": 1718,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "hadoop-20",
      "url": "https://searchcode.com/codesearch/view/74236012/",
      "md5hash": "3f734abe9889fa82e1038544cd64dab0",
      "lines": {
        "1657": "            segmentList.add(i, s);",
        "1353": "        int spindex = kvstart;",
        "1354": "        IndexRecord rec = new IndexRecord();",
        "1644": "      {",
        "1645": "        IndexRecord rec = new IndexRecord();",
        "1455": "        // we don't run the combiner for a single record",
        "1456": "        IndexRecord rec = new IndexRecord();",
        "1656": "                               indexRecord.partLength, codec, true);",
        "1651": "          for(int i = 0; i < numSpills; i++) {",
        "1652": "            IndexRecord indexRecord = indexCacheList.get(i).getIndex(parts);",
        "1654": "            Segment<K,V> s =",
        "1655": "              new Segment<K,V>(job, rfs, filename[i], indexRecord.startOffset,",
        "1624": "        //create dummy files",
        "1625": "        IndexRecord rec = new IndexRecord();",
        "1660": "              LOG.debug(\"MapId=\" + mapId + \" Reducer=\" + parts +",
        "1661": "                  \"Spill =\" + i + \"(\" + indexRecord.startOffset + \",\" +",
        "1662": "                  indexRecord.rawLength + \", \" + indexRecord.partLength + \")\");"
      },
      "id": 74236012,
      "filename": "MapTask.java"
    },
    {
      "repo": "https://github.com/lihuibng/hadoop-20.git",
      "language": "Java",
      "linescount": 1709,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "hadoop-20",
      "url": "https://searchcode.com/codesearch/view/75372129/",
      "md5hash": "ac41e12415eba03a1eca72b630e03eb0",
      "lines": {
        "1344": "        int spindex = kvstart;",
        "1345": "        IndexRecord rec = new IndexRecord();",
        "1635": "      {",
        "1636": "        IndexRecord rec = new IndexRecord();",
        "1446": "        // we don't run the combiner for a single record",
        "1447": "        IndexRecord rec = new IndexRecord();",
        "1642": "          for(int i = 0; i < numSpills; i++) {",
        "1643": "            IndexRecord indexRecord = indexCacheList.get(i).getIndex(parts);",
        "1645": "            Segment<K,V> s =",
        "1646": "              new Segment<K,V>(job, rfs, filename[i], indexRecord.startOffset,",
        "1615": "        //create dummy files",
        "1616": "        IndexRecord rec = new IndexRecord();",
        "1651": "              LOG.debug(\"MapId=\" + mapId + \" Reducer=\" + parts +",
        "1652": "                  \"Spill =\" + i + \"(\" + indexRecord.startOffset + \",\" +",
        "1653": "                  indexRecord.rawLength + \", \" + indexRecord.partLength + \")\");",
        "1648": "            segmentList.add(i, s);",
        "1647": "                               indexRecord.partLength, codec, true);"
      },
      "id": 75372129,
      "filename": "MapTask.java"
    },
    {
      "repo": "https://bitbucket.org/dyp/geotools.git",
      "language": "Java",
      "linescount": 256,
      "location": "/modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/indexed/attribute",
      "name": "geotools",
      "url": "https://searchcode.com/codesearch/view/47133905/",
      "md5hash": "b8b71caf8f6a85d14c9735012c38712b",
      "lines": {
        "132": "     */",
        "133": "    public IndexRecord findRecord(Object reqAttribute) throws IOException {",
        "169": "     */",
        "74": "    public IndexRecord next() throws IOException {",
        "239": "        while (rec.compareTo(current) == 0 && position > 0) {",
        "237": "        IndexRecord current = rec;",
        "174": "            buffer.limit(record_size);",
        "175": "            IndexRecord currentRecord = next();",
        "238": "        IndexRecord prev = rec;",
        "110": "    public Collection findFids(Object reqAttribute) throws IOException {",
        "182": "        IndexRecord currentRecord = next();",
        "73": "",
        "111": "        IndexRecord rec = findRecord(reqAttribute);",
        "170": "    private IndexRecord search(Object desired, int minRec, int maxRec,",
        "181": "        buffer.limit(record_size);"
      },
      "id": 47133905,
      "filename": "AttributeIndexReader.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 72,
      "source": "Github",
      "id": 2
    },
    {
      "count": 48,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 9,
      "source": "Google Code",
      "id": 1
    }
  ]
}