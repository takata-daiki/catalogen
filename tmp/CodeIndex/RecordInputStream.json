{
  "matchterm": "RecordInputStream",
  "previouspage": null,
  "searchterm": "RecordInputStream",
  "query": "RecordInputStream",
  "language_filters": [
    {
      "count": 282,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 282,
  "results": [
    {
      "repo": "https://bitbucket.org/captainpatate/opal-mq",
      "language": "Java",
      "linescount": 100,
      "location": "/jessie-tls-psk/src/main/java/org/metastatic/jessie/provider",
      "name": "opal-mq",
      "url": "https://searchcode.com/codesearch/view/102222342/",
      "md5hash": "9f323e95935d47d5ccf3e2abd04c82bf",
      "lines": {
        "64": "    RecordInputStream(RecordInput in, ContentType type) {",
        "1": "/* RecordInputStream.java -- record layer input stream interface.",
        "2": "   Copyright (C) 2003,2004  Casey Marshall <rsdio@metastatic.org>",
        "97": "        return RecordInputStream.class.getName() + \" [ type=\" + type + \" ]\";",
        "96": "    public String toString() {",
        "45": "",
        "46": "class RecordInputStream extends InputStream {",
        "63": ""
      },
      "id": 102222342,
      "filename": "RecordInputStream.java"
    },
    {
      "repo": "https://bitbucket.org/casval/opal",
      "language": "Java",
      "linescount": 100,
      "location": "/jessie-tls-psk/src/main/java/org/metastatic/jessie/provider",
      "name": "opal",
      "url": "https://searchcode.com/codesearch/view/63108725/",
      "md5hash": "9f323e95935d47d5ccf3e2abd04c82bf",
      "lines": {
        "64": "    RecordInputStream(RecordInput in, ContentType type) {",
        "1": "/* RecordInputStream.java -- record layer input stream interface.",
        "2": "   Copyright (C) 2003,2004  Casey Marshall <rsdio@metastatic.org>",
        "97": "        return RecordInputStream.class.getName() + \" [ type=\" + type + \" ]\";",
        "96": "    public String toString() {",
        "45": "",
        "46": "class RecordInputStream extends InputStream {",
        "63": ""
      },
      "id": 63108725,
      "filename": "RecordInputStream.java"
    },
    {
      "repo": "http://android-gcc-objc2-0.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 107,
      "location": "/gcc-4.2.1/libjava/classpath/gnu/javax/net/ssl/provider",
      "name": "android-gcc-objc2-0",
      "url": "https://searchcode.com/codesearch/view/12730141/",
      "md5hash": "75739ecd5b4b09403c86cc90cb2a0674",
      "lines": {
        "1": "/* RecordInputStream.java -- record layer input stream interface.",
        "2": "   Copyright (C) 2006  Free Software Foundation, Inc.",
        "103": "  {",
        "104": "    return RecordInputStream.class.getName () + \" [ type=\" + type + \" ]\";",
        "43": "",
        "44": "class RecordInputStream extends InputStream",
        "62": "",
        "63": "  RecordInputStream (RecordInput in, ContentType type)"
      },
      "id": 12730141,
      "filename": "RecordInputStream.java"
    },
    {
      "repo": "https://github.com/mmartins/Hammr.git",
      "language": "Java",
      "linescount": 38,
      "location": "/Common/src/communication/streams",
      "name": "Hammr",
      "url": "https://searchcode.com/codesearch/view/66398648/",
      "md5hash": "20402cbc88a6ac5a3b6541f02cd6ebd6",
      "lines": {
        "20": "",
        "21": "public class RecordInputStream extends ObjectInputStream {",
        "22": "\tpublic RecordInputStream(InputStream inputStream) throws IOException {",
        "23": "\t\tsuper(inputStream);"
      },
      "id": 66398648,
      "filename": "RecordInputStream.java"
    },
    {
      "repo": "git://github.com/levans/Open-Quark.git",
      "language": "Java",
      "linescount": 958,
      "location": "/src/CAL_Platform/src/org/openquark/cal/internal/serialization",
      "name": "Open-Quark",
      "url": "https://searchcode.com/codesearch/view/17650865/",
      "md5hash": "fe62f03b093973ec930ed8e64e272e76",
      "lines": {
        "256": "     * @see RecordInputStream#in",
        "33": "/*",
        "34": " * RecordInputStream.java",
        "291": "     * @see RecordInputStream#in",
        "406": "     * @see RecordInputStream#in",
        "290": "     *                if an I/O error occurs.",
        "430": "     * @see RecordInputStream#in",
        "429": "     *                if an I/O error occurs.",
        "405": "     *                if an I/O error occurs.",
        "54": "/**",
        "55": " * RecordInputStream",
        "312": "     *                if an I/O error occurs.",
        "313": "     * @see RecordInputStream#in",
        "59": " */",
        "60": "public class RecordInputStream {",
        "255": "     *                if an I/O error occurs."
      },
      "id": 17650865,
      "filename": "RecordInputStream.java"
    },
    {
      "repo": "https://github.com/baconz/dfs-datastores.git",
      "language": "Java",
      "linescount": 10,
      "location": "/dfs-datastores/src/main/java/com/backtype/hadoop/formats",
      "name": "dfs-datastores",
      "url": "https://searchcode.com/codesearch/view/69541193/",
      "md5hash": "ba933e78fa72e5d1af3ba5efcbab3f6c",
      "lines": {
        "4": "",
        "5": "public interface RecordInputStream {"
      },
      "id": 69541193,
      "filename": "RecordInputStream.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 351,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642503/",
      "md5hash": "24c96617d6438d28b04b770143780251",
      "lines": {
        "56": "",
        "57": "public class RecordInputStream extends InputStream",
        "72": "",
        "73": "  public RecordInputStream(InputStream in) throws RecordFormatException  {"
      },
      "id": 15642503,
      "filename": "RecordInputStream.java"
    },
    {
      "repo": "https://bitbucket.org/captainpatate/opal-mq",
      "language": "Java",
      "linescount": 3026,
      "location": "/jessie-tls-psk/src/main/java/org/metastatic/jessie/provider",
      "name": "opal-mq",
      "url": "https://searchcode.com/codesearch/view/102222567/",
      "md5hash": "cb758b967704d53be6157d412d161e94",
      "lines": {
        "898": "        recordInput = new RecordInput(socketIn, session);",
        "899": "        applicationIn = new SSLSocketInputStream(new RecordInputStream(",
        "868": "    private void readChangeCipherSpec() throws IOException {",
        "869": "        RecordInputStream in = new RecordInputStream(recordInput,",
        "902": "                socketOut, ContentType.APPLICATION_DATA, session.params), this);",
        "903": "        handshakeIn = new SSLSocketInputStream(new RecordInputStream("
      },
      "id": 102222567,
      "filename": "SSLSocket.java"
    },
    {
      "repo": "https://github.com/mmartins/Hammr.git",
      "language": "Java",
      "linescount": 40,
      "location": "/Common/src/communication/readers",
      "name": "Hammr",
      "url": "https://searchcode.com/codesearch/view/66398706/",
      "md5hash": "c2b94ff17bbde2c30cdcd05cadb5e912",
      "lines": {
        "32": "\tpublic synchronized Record read() throws EOFException, IOException {",
        "33": "\t\treturn recordInputStream.readRecord();",
        "36": "\tpublic void close() throws IOException {",
        "37": "\t\trecordInputStream.close();",
        "22": "import communication.interfaces.RecordReader;",
        "23": "import communication.streams.RecordInputStream;",
        "25": "public class FileRecordReader implements RecordReader {",
        "26": "\tprivate RecordInputStream recordInputStream;",
        "28": "\tpublic FileRecordReader(Filename filename) throws FileNotFoundException, IOException {",
        "29": "\t\trecordInputStream = new RecordInputStream(FileHelper.openR(filename));"
      },
      "id": 66398706,
      "filename": "FileRecordReader.java"
    },
    {
      "repo": "https://bitbucket.org/danchr/llvm-gcc",
      "language": "Java",
      "linescount": 3516,
      "location": "/libjava/classpath/gnu/javax/net/ssl/provider",
      "name": "llvm-gcc",
      "url": "https://searchcode.com/codesearch/view/52751446/",
      "md5hash": "8781d9de488bf9981f1d9f67bd5cb603",
      "lines": {
        "1138": "  {",
        "1139": "    RecordInputStream in =",
        "1140": "      new RecordInputStream (recordInput, ContentType.CHANGE_CIPHER_SPEC);",
        "1141": "    if (in.read() != 1)",
        "1175": "    applicationIn = new SSLSocketInputStream(",
        "1176": "      new RecordInputStream (recordInput, ContentType.APPLICATION_DATA), this);",
        "1179": "    handshakeIn = new SSLSocketInputStream(",
        "1180": "      new RecordInputStream (recordInput, ContentType.HANDSHAKE), this, false);"
      },
      "id": 52751446,
      "filename": "SSLSocket.java"
    },
    {
      "repo": "https://bitbucket.org/casval/opal",
      "language": "Java",
      "linescount": 3026,
      "location": "/jessie-tls-psk/src/main/java/org/metastatic/jessie/provider",
      "name": "opal",
      "url": "https://searchcode.com/codesearch/view/63108716/",
      "md5hash": "cb758b967704d53be6157d412d161e94",
      "lines": {
        "898": "        recordInput = new RecordInput(socketIn, session);",
        "899": "        applicationIn = new SSLSocketInputStream(new RecordInputStream(",
        "868": "    private void readChangeCipherSpec() throws IOException {",
        "869": "        RecordInputStream in = new RecordInputStream(recordInput,",
        "902": "                socketOut, ContentType.APPLICATION_DATA, session.params), this);",
        "903": "        handshakeIn = new SSLSocketInputStream(new RecordInputStream("
      },
      "id": 63108716,
      "filename": "SSLSocket.java"
    },
    {
      "repo": "https://github.com/rdwebster/Open-Quark.git",
      "language": "Java",
      "linescount": 2886,
      "location": "/src/CAL_Platform/src/org/openquark/cal/compiler",
      "name": "Open-Quark",
      "url": "https://searchcode.com/codesearch/view/107274951/",
      "md5hash": "cfcf6da9a06f2cb40df6d82522d6d2eb",
      "lines": {
        "369": "         * @return a Paragraph instance deserialized from the stream.",
        "300": "         * The array of possible record tags used in calls to {@link RecordInputStream#findRecord(short[])} by",
        "299": "        /**",
        "44": "import org.openquark.cal.internal.serialization.ModuleSerializationTags;",
        "45": "import org.openquark.cal.internal.serialization.RecordInputStream;",
        "46": "import org.openquark.cal.internal.serialization.RecordOutputStream;",
        "47": "import org.openquark.cal.internal.serialization.RecordInputStream.RecordHeaderInfo;",
        "368": "         * @param s the RecordInputStream to be read from.",
        "273": "        /**",
        "274": "         * Load an instance of ScopedEntityReference from the RecordInputStream.",
        "275": "         * @param s the RecordInputStream to be read from.",
        "276": "         * @return a ScopedEntityReference instance deserialized from the stream.",
        "277": "         */",
        "278": "        static ScopedEntityReference load(final RecordInputStream s) throws IOException {",
        "367": "         * Load an instance of Paragraph from the RecordInputStream."
      },
      "id": 107274951,
      "filename": "CALDocComment.java"
    },
    {
      "repo": "https://github.com/rdwebster/Open-Quark.git",
      "language": "Java",
      "linescount": 3332,
      "location": "/src/CAL_Platform/src/org/openquark/cal/compiler",
      "name": "Open-Quark",
      "url": "https://searchcode.com/codesearch/view/107274985/",
      "md5hash": "4272dcb9d0b5b21e9c14387c17b2ca2d",
      "lines": {
        "544": "            ErrorInfo ei = null;",
        "545": "            if (RecordInputStream.booleanFromBitArray(flagByte, 2)) {",
        "290": "        /**",
        "291": "         * Load an instance of Literal from a RecordInputStream",
        "644": "         * Load an instance of Appl from a RecordInputStream",
        "521": "        /**",
        "522": "         * Load an instance of Var from a RecordInputStream",
        "651": "         */",
        "652": "        public static Appl load (RecordInputStream s, int schema, ModuleTypeInfo mti, CompilerMessageLogger msgLogger) throws IOException {",
        "529": "         */",
        "530": "        public static Var load (RecordInputStream s, int schema, ModuleTypeInfo mti, CompilerMessageLogger msgLogger) throws IOException {",
        "643": "        /**",
        "534": "            QualifiedName qn = null;",
        "535": "            if (RecordInputStream.booleanFromBitArray(flagByte, 0)) {",
        "539": "            QualifiedName entityName = null;",
        "540": "            if (RecordInputStream.booleanFromBitArray(flagByte, 1)) {"
      },
      "id": 107274985,
      "filename": "Expression.java"
    },
    {
      "repo": "https://github.com/baconz/dfs-datastores.git",
      "language": "Java",
      "linescount": 655,
      "location": "/dfs-datastores/src/main/java/com/backtype/hadoop/pail",
      "name": "dfs-datastores",
      "url": "https://searchcode.com/codesearch/view/69541267/",
      "md5hash": "90dbaac5c736541d5d51fcd7a8693612",
      "lines": {
        "609": "        private List<String> filesleft;",
        "610": "        private TypedRecordInputStream curr = null;",
        "3": "import com.backtype.hadoop.*;",
        "4": "import com.backtype.hadoop.formats.RecordInputStream;",
        "500": "    protected RecordInputStream createInputStream(Path path) throws IOException {",
        "499": "    @Override",
        "81": "",
        "82": "    public class TypedRecordInputStream implements RecordInputStream {",
        "83": "        private RecordInputStream is;",
        "84": "",
        "85": "        public TypedRecordInputStream(String userFileName) throws IOException {",
        "247": "        checkValidStructure(userfilename);",
        "248": "        return new TypedRecordInputStream(userfilename);",
        "244": "    @Override",
        "245": "    public TypedRecordInputStream openRead(String userfilename) throws IOException {"
      },
      "id": 69541267,
      "filename": "Pail.java"
    },
    {
      "repo": "https://github.com/baconz/dfs-datastores.git",
      "language": "Java",
      "linescount": 272,
      "location": "/dfs-datastores/src/main/java/com/backtype/hadoop/pail",
      "name": "dfs-datastores",
      "url": "https://searchcode.com/codesearch/view/69541405/",
      "md5hash": "dc099bfa5dff1514f4d65ff0c25338b6",
      "lines": {
        "81": "",
        "2": "",
        "3": "import com.backtype.hadoop.formats.RecordInputStream;",
        "118": "",
        "119": "    protected abstract RecordInputStream createInputStream(Path path) throws IOException;",
        "82": "    public RecordInputStream openRead(String userfilename) throws IOException {",
        "110": "            RecordInputStream is = createInputStream(metaPath);",
        "109": "        if(exists(metaPath)) {"
      },
      "id": 69541405,
      "filename": "AbstractPail.java"
    },
    {
      "repo": "https://github.com/rdwebster/Open-Quark.git",
      "language": "Java",
      "linescount": 2442,
      "location": "/src/CAL_Platform/src/org/openquark/cal/compiler",
      "name": "Open-Quark",
      "url": "https://searchcode.com/codesearch/view/107274857/",
      "md5hash": "fdfa87de4e6f0536e733a493448f9eee",
      "lines": {
        "769": "        /**",
        "770": "         * Load an instance of ForeignFunctionInfo from the RecordInputStream.",
        "1027": "        private static final ForeignFunctionInfo load (final RecordInputStream s, final int schema, final ModuleName moduleName, final ClassLoader foreignClassLoader, final CompilerMessageLogger msgLogger) throws IOException {            ",
        "294": "        /**",
        "295": "         * Load an instance of JavaKind from the RecordInputStream.",
        "778": "         */",
        "779": "        private static final ForeignFunctionInfo loadInvocation (final RecordInputStream s, final int schema, final ModuleName moduleName, final ClassLoader foreignClassLoader, final CompilerMessageLogger msgLogger) throws IOException {            ",
        "1026": "         */",
        "301": "         */",
        "302": "        static final JavaKind load (final RecordInputStream s, final ModuleName moduleName, final CompilerMessageLogger msgLogger) throws IOException {",
        "47": "import org.openquark.cal.internal.serialization.RecordInputStream;",
        "48": "import org.openquark.cal.internal.serialization.RecordOutputStream;",
        "46": "import org.openquark.cal.internal.serialization.ModuleSerializationTags;",
        "1181": "        /**",
        "1182": "         * Load an instance of ForeignFunctionInfo.InstanceOf from the RecordInputStream."
      },
      "id": 107274857,
      "filename": "ForeignFunctionInfo.java"
    },
    {
      "repo": "https://github.com/rdwebster/Open-Quark.git",
      "language": "Java",
      "linescount": 2544,
      "location": "/src/CAL_Platform/src/org/openquark/cal/compiler",
      "name": "Open-Quark",
      "url": "https://searchcode.com/codesearch/view/107274908/",
      "md5hash": "60d25c5fefefcedaf015eee212b952a1",
      "lines": {
        "2435": "     */",
        "2436": "    static final TypeExpr load (RecordInputStream s, ModuleTypeInfo mti, CompilerMessageLogger msgLogger) throws IOException {",
        "2471": "     */",
        "2472": "    static final TypeExpr load (RecordInputStream s, ModuleTypeInfo mti, Map<Short, TypeExpr> visitedTypeExpr, Map<Short, RecordVar> visitedRecordVar, CompilerMessageLogger msgLogger) throws IOException {",
        "2442": "    /**",
        "2443": "     * Load an array of TypeExpr from the RecordInputStream. This will ensure that the same variables will",
        "110": "    /**",
        "111": "     * The array of possible record tags used in calls to {@link RecordInputStream#findRecord(short[])} by",
        "112": "     * the {@link #load(RecordInputStream, ModuleTypeInfo, Map, Map, CompilerMessageLogger)} method.",
        "113": "     */",
        "2451": "     */",
        "2452": "    static final TypeExpr[] load (RecordInputStream s, ModuleTypeInfo mti, int nTypes, CompilerMessageLogger msgLogger) throws IOException {",
        "54": "import org.openquark.cal.internal.serialization.ModuleSerializationTags;",
        "55": "import org.openquark.cal.internal.serialization.RecordInputStream;",
        "56": "import org.openquark.cal.internal.serialization.RecordOutputStream;"
      },
      "id": 107274908,
      "filename": "TypeExpr.java"
    },
    {
      "repo": "https://github.com/baconz/dfs-datastores.git",
      "language": "Java",
      "linescount": 335,
      "location": "/dfs-datastores/src/test/java/com/backtype/hadoop/pail",
      "name": "dfs-datastores",
      "url": "https://searchcode.com/codesearch/view/69540937/",
      "md5hash": "6dfa7217cc9b0c0f0db462e439037c61",
      "lines": {
        "241": "        List<byte[]> ret = new ArrayList<byte[]>();",
        "2": "",
        "3": "import com.backtype.hadoop.formats.RecordInputStream;",
        "69": "    private void checkContains(Pail pail, String file, byte[]... expected) throws Exception {",
        "70": "        RecordInputStream is = pail.openRead(file);",
        "242": "        RecordInputStream is = p.openRead(userfile);"
      },
      "id": 69540937,
      "filename": "PailTest.java"
    },
    {
      "repo": "https://github.com/minstrelsy/POI-Android.git",
      "language": "Java",
      "linescount": 63,
      "location": "/ppt/poi/org/apache/poi/hssf/record/common",
      "name": "POI-Android",
      "url": "https://searchcode.com/codesearch/view/97401200/",
      "md5hash": "fab00ca1ea00935e17af7f677fe9ac34",
      "lines": {
        "43": "",
        "44": "\tpublic FeatSmartTag(RecordInputStream in) {",
        "22": "//import org.apache.poi.hssf.record.Feat12Record;",
        "23": "import org.apache.poi.hssf.record.RecordInputStream;"
      },
      "id": 97401200,
      "filename": "FeatSmartTag.java"
    },
    {
      "repo": "https://github.com/rdwebster/Open-Quark.git",
      "language": "Java",
      "linescount": 1946,
      "location": "/src/CAL_Platform/src/org/openquark/cal/compiler",
      "name": "Open-Quark",
      "url": "https://searchcode.com/codesearch/view/107274817/",
      "md5hash": "59444c0d198d1b772a210cb86ac11b3b",
      "lines": {
        "1792": "     */",
        "1793": "    public void readContent (RecordInputStream s, Map<ModuleName, Module> otherModules, CompilerMessageLogger msgLogger) throws IOException {",
        "50": "import org.openquark.cal.internal.serialization.ModuleSerializationTags;",
        "51": "import org.openquark.cal.internal.serialization.RecordInputStream;",
        "52": "import org.openquark.cal.internal.serialization.RecordOutputStream;",
        "53": "import org.openquark.cal.internal.serialization.RecordInputStream.RecordHeaderInfo;",
        "1862": "            int nTypeConstructors = s.readInt();",
        "1863": "            RecordInputStream.Bookmark bookmark = s.bookmark();",
        "1787": "     * The read position of the stream is before the record header.",
        "1788": "     * @param s - the RecordInputStream containing the content."
      },
      "id": 107274817,
      "filename": "ModuleTypeInfo.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 274,
      "source": "Github",
      "id": 2
    },
    {
      "count": 6,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 2,
      "source": "Google Code",
      "id": 1
    }
  ]
}