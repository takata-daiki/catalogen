{
  "matchterm": "Intercept",
  "previouspage": null,
  "searchterm": "Intercept",
  "query": "Intercept",
  "language_filters": [
    {
      "count": 6746,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 6745,
  "results": [
    {
      "repo": "https://bitbucket.org/jfinkels/jeffraytracer",
      "language": "Java",
      "linescount": 135,
      "location": "/src/main/java/jeffraytracer/surfaces",
      "name": "jeffraytracer",
      "url": "https://searchcode.com/codesearch/view/119061703/",
      "md5hash": "ecf2cedefe54d708e2ec2e7abe205ac9",
      "lines": {
        "32": "public class Intercept {",
        "1": "/**",
        "2": " * Intercept.java - the intercept of a ray with a surface object at a time",
        "35": "  /** The time at which the ray intercepts the surface object. */",
        "36": "  private final double time;",
        "37": "  /** The ray which intercepts the surface object at a time. */",
        "33": "  /** The surface object which is intercepted by a ray. */",
        "40": "  /**",
        "41": "   * Gets the point on the surface object at which this intercept occurs.",
        "34": "  private final ConcreteSurfaceObject surfaceObject;",
        "46": "   * @return The point on the surface object at which this intercept occurs.",
        "45": "   * ",
        "26": "/**",
        "27": " * The intercept of a ray with a surface object at a specific time.",
        "31": " */"
      },
      "id": 119061703,
      "filename": "Intercept.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/fuji.git",
      "language": "Java",
      "linescount": 106,
      "location": "/core/framework/src/main/java/com/sun/jbi/interceptors",
      "name": "fuji",
      "url": "https://searchcode.com/codesearch/view/43440572/",
      "md5hash": "278964d38e56dade403f79c083e6c3c0",
      "lines": {
        "32": "package com.sun.jbi.interceptors;",
        "65": "    /**",
        "66": "     * Speciying the message property allows you to intercept specific messages",
        "35": "/**",
        "36": " * Annotation for message and message exchange interception.",
        "44": "@Retention(RetentionPolicy.RUNTIME)",
        "45": "public @interface Intercept      ",
        "47": "    /**",
        "48": "     * Speciying the name property allows for a user defined interceptor name",
        "53": "    /**",
        "54": "     * Speciying the consumer property allows you to intercept exchanges",
        "23": "/*",
        "24": " * @(#)Intercept.java - Last published on 3/13/2008",
        "59": "    /**",
        "60": "     * Speciying the provider property allows you to intercept exchanges",
        "31": ""
      },
      "id": 43440572,
      "filename": "Intercept.java"
    },
    {
      "repo": "https://github.com/tfennelly/weld-core.git",
      "language": "Java",
      "linescount": 38,
      "location": "/tests/src/test/java/org/jboss/weld/tests/interceptors/invalidContract",
      "name": "weld-core",
      "url": "https://searchcode.com/codesearch/view/112434433/",
      "md5hash": "f4fe2b668b133dd113ab5341f518a2f9",
      "lines": {
        "16": " */",
        "17": "package org.jboss.weld.tests.interceptors.invalidContract;",
        "34": "@Retention(RetentionPolicy.RUNTIME)",
        "35": "public @interface Intercept {",
        "32": "@InterceptorBinding",
        "23": "",
        "24": "import javax.interceptor.InterceptorBinding;",
        "26": "/**",
        "27": " * Intercept",
        "31": " */"
      },
      "id": 112434433,
      "filename": "Intercept.java"
    },
    {
      "repo": "git://github.com/weld/core.git",
      "language": "Java",
      "linescount": 37,
      "location": "/tests-arquillian/src/test/java/org/jboss/weld/tests/interceptors/invalidContract",
      "name": "core",
      "url": "https://searchcode.com/codesearch/view/4047309/",
      "md5hash": "407252a359536b9165903720879a0649",
      "lines": {
        "16": " */",
        "17": "package org.jboss.weld.tests.interceptors.invalidContract;",
        "18": "",
        "19": "import javax.interceptor.InterceptorBinding;",
        "33": "@Retention(RetentionPolicy.RUNTIME)",
        "25": "/**",
        "26": " * Intercept",
        "34": "public @interface Intercept {",
        "30": " */",
        "31": "@InterceptorBinding"
      },
      "id": 4047309,
      "filename": "Intercept.java"
    },
    {
      "repo": "http://spices.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 33,
      "location": "/org.spice.web/src/main/java/org/spice/web/components/interceptors",
      "name": "spices",
      "url": "https://searchcode.com/codesearch/view/11399277/",
      "md5hash": "ffc9e73d2367abe2f7b7b814a9f98036",
      "lines": {
        "16": "",
        "17": "package org.spice.web.components.interceptors;",
        "21": "/**",
        "22": " * Intercept annotation used for the intercepting the request which will be annotated with the @Before or @After annotation. This annotation is used to annotate the class and tells the compiler that this class is ready for interception.",
        "30": "@Documented",
        "31": "public @interface Intercept {"
      },
      "id": 11399277,
      "filename": "Intercept.java"
    },
    {
      "repo": "https://github.com/cygni/riot.git",
      "language": "Java",
      "linescount": 58,
      "location": "/common/src/org/riotfamily/common/web/mvc/interceptor",
      "name": "riot",
      "url": "https://searchcode.com/codesearch/view/108068062/",
      "md5hash": "532b73d179c9ddc1409625ac109f091f",
      "lines": {
        "32": "\t * Whether requests forwarded by a RequestDispatcher should be intercepted.",
        "33": "\t * If set to <code>false</code>, the interceptor is skipped in case of a",
        "34": "\t * forwarded request. Note that even if set to <code>true</code> (default),",
        "35": "\t * the interceptor can still be skipped depending on the {@link #once()}",
        "40": "\t/**",
        "41": "\t * Whether requests included by a RequestDispatcher should be intercepted.",
        "42": "\t * If set to <code>false</code>, the interceptor is skipped in case of an",
        "43": "\t * include request. Note that even if set to <code>true</code> (default),",
        "12": " */",
        "13": "package org.riotfamily.common.web.mvc.interceptor;",
        "44": "\t * the interceptor can still be skipped depending on the {@link #once()}",
        "49": "\t/**",
        "50": "\t * Whether the interceptor should be invoked only once per request. ",
        "51": "\t * The default is <code>true</code>, hence requests dispatched by a",
        "31": "\t/**"
      },
      "id": 108068062,
      "filename": "Intercept.java"
    },
    {
      "repo": "https://github.com/poidasmith/xlloop.git",
      "language": "Java",
      "linescount": 13,
      "location": "/org.boris.expr/java/src/org/boris/expr/function/excel",
      "name": "xlloop",
      "url": "https://searchcode.com/codesearch/view/105399504/",
      "md5hash": "0647e4cd7ccd2006a936485f045be419",
      "lines": {
        "6": "",
        "7": "public class INTERCEPT extends AbstractFunction"
      },
      "id": 105399504,
      "filename": "INTERCEPT.java"
    },
    {
      "repo": "https://bitbucket.org/blake_hashfund_com/google-gson.git",
      "language": "Java",
      "linescount": 65,
      "location": "/extras/src/main/java/com/google/gson/interceptors",
      "name": "google-gson",
      "url": "https://searchcode.com/codesearch/view/51634624/",
      "md5hash": "92ef7ebce68e64ba41b7af3e019ca1d7",
      "lines": {
        "16": "",
        "17": "package com.google.gson.interceptors;",
        "32": " * &#64Intercept(postDeserialize=UserValidator.class)",
        "56": "public @interface Intercept {",
        "25": "/**",
        "26": " * Use this annotation to indicate various interceptors for class instances after",
        "55": "@Target(ElementType.TYPE)",
        "31": " * <p><pre>"
      },
      "id": 51634624,
      "filename": "Intercept.java"
    },
    {
      "repo": "https://bitbucket.org/jfinkels/jeffraytracer",
      "language": "Java",
      "linescount": 497,
      "location": "/src/main/java/jeffraytracer/rendering/tracers",
      "name": "jeffraytracer",
      "url": "https://searchcode.com/codesearch/view/119061662/",
      "md5hash": "d4e6059e0fe35d5e965e1db4c298a3c4",
      "lines": {
        "128": "    final Material material = intercept.surfaceObject().material();",
        "133": "   * Returns the color due to diffuse reflection from the specified light at",
        "134": "   * the specified intercept.",
        "135": "   * ",
        "136": "   * @param intercept",
        "137": "   *          The intercept to color.",
        "138": "   * @param light",
        "140": "   * @return The color due to diffuse reflection from the specified light at",
        "141": "   *         the specified intercept.",
        "142": "   */",
        "143": "  private Vector3D diffuseColor(final Intercept intercept, final Light light) {",
        "144": "    // get the vector from the point of intersection to the light source (L)",
        "145": "    final Vector3D point = intercept.pointOfIntersection();",
        "149": "    // get the normal to the surface (N)",
        "150": "    final Vector3D normal = intercept.normal();",
        "127": "    }"
      },
      "id": 119061662,
      "filename": "BaseTracer.java"
    },
    {
      "repo": "https://bitbucket.org/glinsky/qiworkbench",
      "language": "Java",
      "linescount": 11492,
      "location": "/DeliveryLite/dev/src/com/bhpb/xsdparams/delivery",
      "name": "qiworkbench",
      "url": "https://searchcode.com/codesearch/view/123689931/",
      "md5hash": "f07ff95ea71b8a95b9bf7f6370d90ada",
      "lines": {
        "576": " *                                                 &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "8960": "     *                                       &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "8959": "     *                                     &lt;sequence>",
        "9393": "         *                             &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "9392": "         *                           &lt;sequence>",
        "9408": "         *                             &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "9407": "         *                           &lt;sequence>",
        "8974": "     *                                     &lt;sequence>",
        "8975": "     *                                       &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "560": " *                                               &lt;sequence>",
        "561": " *                                                 &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "9015": "     *                                     &lt;sequence>",
        "9016": "     *                                       &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "8987": "     *                                     &lt;sequence>",
        "8988": "     *                                       &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "575": " *                                               &lt;sequence>"
      },
      "id": 123689931,
      "filename": "Inversion.java"
    },
    {
      "repo": "https://github.com/soulsheng/struts2.git",
      "language": "Java",
      "linescount": 216,
      "location": "/xwork-core/src/test/java/com/opensymphony/xwork2/interceptor",
      "name": "struts2",
      "url": "https://searchcode.com/codesearch/view/73130098/",
      "md5hash": "201ed16418ab6543e29596731a338eca",
      "lines": {
        "33": " */",
        "34": "public class DefaultWorkflowInterceptorTest extends XWorkTestCase {",
        "35": "",
        "36": "    DefaultWorkflowInterceptor interceptor;",
        "44": "    public void testInvokesActionInvocationIfNoErrors() throws Exception {",
        "45": "        ValidationInterceptor validationInterceptor = create();",
        "46": "        validationInterceptor.intercept(invocation);",
        "15": " */",
        "16": "package com.opensymphony.xwork2.interceptor;",
        "18": "import com.opensymphony.xwork2.*;",
        "19": "import com.opensymphony.xwork2.config.entities.InterceptorConfig;",
        "20": "import com.opensymphony.xwork2.config.entities.ActionConfig;",
        "21": "import com.opensymphony.xwork2.validator.ValidationInterceptor;",
        "29": "/**",
        "30": " * Unit test for {@link DefaultWorkflowInterceptor}."
      },
      "id": 73130098,
      "filename": "DefaultWorkflowInterceptorTest.java"
    },
    {
      "repo": "https://bitbucket.org/jfinkels/jeffraytracer",
      "language": "Java",
      "linescount": 280,
      "location": "/src/main/java/jeffraytracer/surfaces",
      "name": "jeffraytracer",
      "url": "https://searchcode.com/codesearch/view/119061674/",
      "md5hash": "7afbf99910f19267c276e0ccdfc583f5",
      "lines": {
        "193": "",
        "194": "    intercept = this.back.interceptWith(ray);",
        "195": "    pointOfIntersection = intercept.pointOfIntersection();",
        "196": "    if (isBetween(pointOfIntersection, this.left, this.right, this.top,",
        "197": "        this.bottom)) {",
        "198": "      possibleIntercepts.add(intercept);",
        "181": "   * @return {@inheritDoc}",
        "182": "   * @see jeffraytracer.surfaces.SurfaceObject#interceptWith(jeffraytracer.Ray)",
        "184": "  @Override",
        "185": "  public Intercept interceptWith(final Ray ray) {",
        "186": "    final List<Intercept> possibleIntercepts = new ArrayList<Intercept>();",
        "187": "    Intercept intercept = this.front.interceptWith(ray);",
        "188": "    Vector3D pointOfIntersection = intercept.pointOfIntersection();",
        "189": "    if (isBetween(pointOfIntersection, this.left, this.right, this.top,",
        "190": "        this.bottom)) {",
        "191": "      possibleIntercepts.add(intercept);"
      },
      "id": 119061674,
      "filename": "Box.java"
    },
    {
      "repo": "https://bitbucket.org/jfinkels/jeffraytracer",
      "language": "Java",
      "linescount": 248,
      "location": "/src/main/java/jeffraytracer/surfaces",
      "name": "jeffraytracer",
      "url": "https://searchcode.com/codesearch/view/119061686/",
      "md5hash": "456c343201d75cff191ae36977854572",
      "lines": {
        "128": "      final Vector3D pointOfIntersection = intercept.pointOfIntersection();",
        "129": "      if (this.top.inside(pointOfIntersection)",
        "130": "          && this.bottom.inside(pointOfIntersection)) {",
        "131": "        possibleIntercepts.add(intercept);",
        "134": "",
        "135": "    // get the intercept with the top and bottom planes",
        "136": "    intercept = this.top.interceptWith(ray);",
        "137": "    if (intercept != null && super.inside(intercept.pointOfIntersection())) {",
        "138": "      possibleIntercepts.add(intercept);",
        "139": "    }",
        "140": "    intercept = this.bottom.interceptWith(ray);",
        "141": "    if (intercept != null && super.inside(intercept.pointOfIntersection())) {",
        "142": "      possibleIntercepts.add(intercept);",
        "143": "    }",
        "127": "    if (intercept != null) {"
      },
      "id": 119061686,
      "filename": "Cylinder.java"
    },
    {
      "repo": "https://bitbucket.org/jfinkels/jeffraytracer",
      "language": "Java",
      "linescount": 151,
      "location": "/src/test/java/jeffraytracer/surfaces",
      "name": "jeffraytracer",
      "url": "https://searchcode.com/codesearch/view/119061538/",
      "md5hash": "8dbef651ffa32bbf445c8f8b92072a10",
      "lines": {
        "64": "    s.compile();",
        "65": "    intercept = s.interceptWith(r);",
        "66": "    assertEquals(15, intercept.time(), 0);",
        "67": "    assertSame(intercept.surfaceObject(), s);",
        "40": "   * Test method for",
        "41": "   * {@link jeffraytracer.surfaces.Sphere#interceptWith(jeffraytracer.Ray)} .",
        "43": "  @Test",
        "44": "  public void testInterceptWith() {",
        "53": "    s.compile();",
        "54": "    Intercept intercept = s.interceptWith(r);",
        "55": "    assertEquals(5, intercept.time(), 0);",
        "56": "    assertSame(intercept.surfaceObject(), s);",
        "57": "    assertSame(r, intercept.ray());",
        "58": "    assertTrue(intercept.normal().equalTo(new Vector3D(0, 0, -1)));",
        "59": ""
      },
      "id": 119061538,
      "filename": "SphereTest.java"
    },
    {
      "repo": "https://bitbucket.org/CKachur/fastr_ck",
      "language": "Java",
      "linescount": 13250,
      "location": "/com.oracle.truffle.r.test/src/com/oracle/truffle/r/test/failing",
      "name": "FastR_CK",
      "url": "https://searchcode.com/codesearch/view/91900842/",
      "md5hash": "679e015582ddd3c4ab39d1ca4c88762d",
      "lines": {
        "2209": "    public void TestrGenBuiltinLa_testLa2_82030ef6446bf50aaa3b9b6f8b894e03() {",
        "2210": "        assertEval(\"argv <- list(structure(c(-4.47213595499958, 0, -6.70820393249937, 2.23606797749979), .Dim = c(2L, 2L), .Dimnames = list(NULL, c('Intercept', 'X'))), structure(c(1, 0, 0, 1), .Dim = c(2L, 2L)), 2.22044604925031e-16); .Internal(La_solve(argv[[1]], argv[[2]], argv[[3]]))\");",
        "2245": "    public void TestrGenBuiltinLa_testLa8_6b7d703bb8b3674554638959f10ddc63() {",
        "2246": "        assertEval(\"argv <- list('N', structure(c(-4, 0, 0, 0, 0, 0, 0, -406.725, 41.7955066364795, 0, 0, 0, 0, 0, -1550.79375, 381.717151319926, 49.8228991342168, 0, 0, 0, 0, -1277.325, 224.617432123818, -31.1858918860748, -282.060212912726, 0, 0, 0, -1042.675, 125.261805546114, -29.9849484767744, 164.425554254677, -170.353263600129, 0, 0, -469.696, 26.3795103523805, 4.19691803785862, -3.18974110831568, 0.0462484557378925, 1.46320172717486, 0, -7818, 18.2758880432689, 1.77525956575195, -1.45298766739792, -0.449176219307484, -0.281900648530911, -0.669305080560524), .Dim = c(7L, 7L), .Dimnames = list(c('1947', '1948', '1949', '1950', '1951', '1952', '1953'), c('(Intercept)', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'))), c(8164.12940108939, 457.24498274114, 324.584423503013, 134.312174464868, 4.95553195929945, 1.41954832076337, 0.000342370904183799), structure(0, .Dim = c(1L, 1L)), structure(0, .Dim = c(1L, 1L))); .Internal(La_svd(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))\");",
        "2497": "    public void TestrGenBuiltinabbreviate_testabbreviate4_a56b774e334eb18474503a585fce66c3() {",
        "2984": "        assertEval(\"argv <- list(structure(list(`1` = structure(list(lower = 13.2743449189798, est. = 24.8054653131966, upper = 46.3534067526313), .Names = c('lower', 'est.', 'upper'), row.names = 'reStruct.Rail.sd((Intercept))', class = 'data.frame')), .Names = '1'), c(1L, 1L), list('1', NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))\");",
        "4777": "    public void TestrGenBuiltincopyDFattr_testcopyDFattr10_01391651584ab36a196be5f448299419() {",
        "4778": "        assertEval(\"argv <- list(structure(list(Df = c(1, 1, 1, 1, 16), `Sum Sq` = c(309.6845, 0.420500000000001, 4.90050000000001, 3.9605, 64.924), `Mean Sq` = c(309.6845, 0.420500000000001, 4.90050000000001, 3.9605, 4.05775), `F value` = c(76.3192656028586, 0.103628858357464, 1.20768899020393, 0.976033516111146, NA), `Pr(>F)` = c(1.73825946976405e-07, 0.751685166772039, 0.288052080502172, 0.337885793589305, NA)), .Names = c('Df', 'Sum Sq', 'Mean Sq', 'F value', 'Pr(>F)'), class = c('anova', 'data.frame'), row.names = c('(Intercept)  ', 'rate         ', 'additive     ', 'rate:additive', 'Residuals    ')), structure(list(Df = NULL, `Sum Sq` = NULL, `Mean Sq` = NULL, `F value` = NULL, `Pr(>F)` = NULL), .Names = c('Df', 'Sum Sq', 'Mean Sq', 'F value', 'Pr(>F)'), class = c('anova', 'data.frame'), row.names = c('(Intercept)  ', 'rate         ', 'additive     ', 'rate:additive', 'Residuals    '))); .Internal(copyDFattr(argv[[1]], argv[[2]]))\");",
        "2983": "    public void TestrGenBuiltinarray_testarray5_3e426c5821c83699fa2f43bfa0339c27() {",
        "2498": "        assertEval(\"argv <- list(c('(Intercept)', 'sin(2 * pi * Time)', 'cos(2 * pi * Time)'), 6, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))\");",
        "2959": "    public void TestrGenBuiltinarray_testarray19_7ed10b153596c00ee4ab46e0d5cc5c8f() {",
        "2960": "        assertEval(\"argv <- list(structure(c(31.9166666666667, -5.77777777777778, -10.4101831674686, -2.63888888888889, NA), .Names = c('(Intercept)', 'woolB', 'tens.L', 'tensionM', 'tensionH')), c(5L, 1L), list(c('(Intercept)', 'woolB', 'tens.L', 'tensionM', 'tensionH'), NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))\");",
        "2203": "    public void TestrGenBuiltinLa_testLa1_a2aefe263aade4050c793d072b09f428() {",
        "2204": "        assertEval(\"argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0), .Dim = c(18L, 7L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18'), c('(Intercept)', 'Rail2', 'Rail5', 'Rail1', 'Rail6', 'Rail3', 'Rail4')))); .Internal(La_qr(argv[[1]]))\");",
        "5533": "    public void TestrGenBuiltindiag_testdiag9_9a54cc1fac7d63b62cf56fea77305c8f() {",
        "5534": "        assertEval(\"argv <- list(structure(c(-875.251472917967, 12.8319913648351, -28.2155558559225, -27.6015982680416, -70.4377976184188, -98.9293825275015, 32.8291346503008, -20.6544753576079, 26.3486263439148, -42.5376299218819, -131.164911564755, -12.7775395276621, 3.34207338870892, -6.39516049903921, 5.97199502480298, 9.16451921253422, 4.70193189358059), .Names = c('(Intercept)', 'BII', 'BIII', 'BIV', 'BV', 'BVI', 'VMarvellous', 'VVictory', 'N0.2cwt', 'N0.4cwt', 'N0.6cwt', 'VMarvellous:N0.2cwt', 'VVictory:N0.2cwt', 'VMarvellous:N0.4cwt', 'VVictory:N0.4cwt', 'VMarvellous:N0.6cwt', 'VVictory:N0.6cwt')), 71L, 17L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))\");"
      },
      "id": 91900842,
      "filename": "FailingTests.java"
    },
    {
      "repo": "git://github.com/CyanogenMod/android_frameworks_base.git",
      "language": "Java",
      "linescount": 3079,
      "location": "/packages/SystemUI/src/com/android/systemui/statusbar/phone",
      "name": "android_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/116026991/",
      "md5hash": "9f28576d729aa377fc53fe7b41b73c1d",
      "lines": {
        "257": "",
        "258": "    private int mOneFingerQuickSettingsIntercept;",
        "516": "",
        "517": "                boolean intercept = false;",
        "518": "                if (mLiveLockscreenController.getLiveLockScreenHasFocus()) {",
        "519": "                    intercept = mAfforanceHelper.onTouchEvent(e);",
        "488": "         */",
        "489": "        mKeyguardBottomArea.setOnInterceptTouchListener(new KeyguardBottomAreaView.OnInterceptTouchEventListener() {",
        "490": "            @Override",
        "525": "                    }",
        "526": "                    if (!intercept) {",
        "154": "    /**",
        "155": "     * Whether we are currently handling a motion gesture in #onInterceptTouchEvent, but haven't",
        "156": "     * intercepted yet.",
        "157": "     */",
        "158": "    private boolean mIntercepting;"
      },
      "id": 116026991,
      "filename": "NotificationPanelView.java"
    },
    {
      "repo": "https://github.com/soulsheng/struts2.git",
      "language": "Java",
      "linescount": 170,
      "location": "/xwork-core/src/test/java/com/opensymphony/xwork2/interceptor",
      "name": "struts2",
      "url": "https://searchcode.com/codesearch/view/73129970/",
      "md5hash": "7b4c75a885d417808fab3bc18118f7c8",
      "lines": {
        "35": "",
        "36": "    public void testTimerInterceptor() throws Exception {",
        "37": "        TimerInterceptor real = new TimerInterceptor();",
        "38": "        real.init();",
        "39": "        real.intercept(mai);",
        "43": "    public void testInvalidLogLevel() throws Exception {",
        "44": "        TimerInterceptor real = new TimerInterceptor();",
        "15": " */",
        "16": "package com.opensymphony.xwork2.interceptor;",
        "24": "/**",
        "25": " * Unit test for {@link TimerInterceptor}.",
        "28": " */",
        "29": "public class TimerInterceptorTest extends XWorkTestCase {",
        "30": "",
        "31": "    private MyTimerInterceptor interceptor;"
      },
      "id": 73129970,
      "filename": "TimerInterceptorTest.java"
    },
    {
      "repo": "https://github.com/soulsheng/struts2.git",
      "language": "Java",
      "linescount": 208,
      "location": "/xwork-core/src/test/java/com/opensymphony/xwork2/interceptor",
      "name": "struts2",
      "url": "https://searchcode.com/codesearch/view/73130047/",
      "md5hash": "2180effbef70a443ad01d533a95987de",
      "lines": {
        "48": "        ac.setSession(null);",
        "34": " */",
        "35": "public class I18nInterceptorTest extends TestCase {",
        "36": "",
        "37": "    private I18nInterceptor interceptor;",
        "43": "    public void testEmptyParamAndSession() throws Exception {",
        "44": "        interceptor.intercept(mai);",
        "15": " */",
        "16": "package com.opensymphony.xwork2.interceptor;",
        "49": "        interceptor.intercept(mai);",
        "52": "    public void testDefaultLocale() throws Exception {",
        "53": "        params.put(I18nInterceptor.DEFAULT_PARAMETER, \"_\"); // bad locale that would get us default locale instead",
        "54": "        interceptor.intercept(mai);",
        "30": "/**",
        "31": " * Unit test for I18nInterceptor."
      },
      "id": 73130047,
      "filename": "I18nInterceptorTest.java"
    },
    {
      "repo": "https://github.com/soulsheng/struts2.git",
      "language": "Java",
      "linescount": 504,
      "location": "/plugins/json/src/test/java/org/apache/struts2/json",
      "name": "struts2",
      "url": "https://searchcode.com/codesearch/view/73139537/",
      "md5hash": "f3c5f8c3d866976d3d25bfcd3ccddf23",
      "lines": {
        "75": "",
        "36": "",
        "37": "public class JSONInterceptorTest extends StrutsTestCase {",
        "134": "        JSONInterceptor interceptor = new JSONInterceptor();",
        "135": "        interceptor.setEnableSMD(true);",
        "136": "        SMDActionTest2 action = new SMDActionTest2();",
        "140": "        interceptor.intercept(this.invocation);",
        "42": "    private void setRequestContent(String fileName) throws Exception {",
        "43": "        String content = TestUtils.readContent(JSONInterceptorTest.class.getResource(fileName));",
        "76": "        JSONInterceptor interceptor = new JSONInterceptor();",
        "77": "        interceptor.setEnableSMD(true);",
        "139": "",
        "151": "",
        "152": "        JSONInterceptor interceptor = new JSONInterceptor();",
        "153": "        interceptor.setEnableSMD(true);",
        "154": "        SMDActionTest1 action = new SMDActionTest1();",
        "133": ""
      },
      "id": 73139537,
      "filename": "JSONInterceptorTest.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 651,
      "location": "/platform/util/src/com/intellij/util/containers",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/116173535/",
      "md5hash": "801bd585385cfaf4ec49dd9dafe28318",
      "lines": {
        "288": "  public final JBIterable<E> filter(@NotNull final Condition<? super E> condition) {",
        "289": "    return intercept(new Function<Iterator<E>, Iterator<E>>() {",
        "517": "  public final JBIterable<JBIterable<E>> partition(final SeparatorOption option, final Condition<? super E> separatorCondition) {",
        "518": "    return intercept(new Function<Iterator<E>, Iterator<JBIterable<E>>>() {",
        "327": "  public final JBIterable<E> skip(final int count) {",
        "328": "    return intercept(new Function<Iterator<E>, Iterator<E>>() {",
        "396": "  @NotNull",
        "397": "  public final <T, X extends Iterator<E>> JBIterable<T> intercept(@NotNull final Function<X, ? extends Iterator<T>> function) {",
        "337": "  public final JBIterable<E> skipWhile(@NotNull final Condition<? super E> condition) {",
        "338": "    return intercept(new Function<Iterator<E>, Iterator<E>>() {",
        "307": "  public final JBIterable<E> take(final int count) {",
        "180": "  public static <E> JBIterable<E> once(@NotNull Iterator<E> iterator) {",
        "181": "    return of(Ref.create(iterator)).intercept(new Function<Iterator<Ref<Iterator<E>>>, Iterator<E>>() {",
        "308": "    return intercept(new Function<Iterator<E>, Iterator<E>>() {",
        "317": "  public final JBIterable<E> takeWhile(@NotNull final Condition<? super E> condition) {",
        "318": "    return intercept(new Function<Iterator<E>, Iterator<E>>() {"
      },
      "id": 116173535,
      "filename": "JBIterable.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 3557,
      "source": "Github",
      "id": 2
    },
    {
      "count": 2276,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 852,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 41,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 8,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 6,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 6,
      "source": "Sourceforge",
      "id": 4
    }
  ]
}