{
  "matchterm": "org.apache.poi.hslf.extractor.PowerPointExtractor",
  "previouspage": null,
  "searchterm": "org.apache.poi.hslf.extractor.PowerPointExtractor",
  "query": "org.apache.poi.hslf.extractor.PowerPointExtractor",
  "language_filters": [
    {
      "count": 8,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 8,
  "results": [
    {
      "repo": "https://github.com/solsson/tika.git",
      "language": "Java",
      "linescount": 252,
      "location": "/tika-parsers/src/main/java/org/apache/tika/parser/microsoft",
      "name": "tika",
      "url": "https://searchcode.com/codesearch/view/111785560/",
      "md5hash": "3a2a0badbeb8b43e9095f9f8eb316b46",
      "lines": {
        "32": "import org.apache.poi.poifs.crypt.EncryptionInfo;",
        "33": "import org.apache.poi.poifs.filesystem.DirectoryEntry;",
        "34": "import org.apache.poi.poifs.filesystem.Entry;",
        "35": "import org.apache.poi.poifs.filesystem.POIFSFileSystem;",
        "36": "import org.apache.tika.exception.TikaException;",
        "37": "import org.apache.tika.io.TikaInputStream;",
        "38": "import org.apache.tika.metadata.Metadata;",
        "39": "import org.apache.tika.mime.MediaType;",
        "8": " *",
        "9": " *     http://www.apache.org/licenses/LICENSE-2.0",
        "27": "",
        "28": "import org.apache.poi.hdgf.extractor.VisioTextExtractor;",
        "29": "import org.apache.poi.hpbf.extractor.PublisherTextExtractor;",
        "30": "import org.apache.poi.hslf.extractor.PowerPointExtractor;",
        "31": "import org.apache.poi.poifs.crypt.Decryptor;"
      },
      "id": 111785560,
      "filename": "OfficeParser.java"
    },
    {
      "repo": "https://github.com/manoja328/DocumentClustering.git",
      "language": "Java",
      "linescount": 52,
      "location": "/DocumentClustering/src/indexerHouse",
      "name": "DocumentClustering",
      "url": "https://searchcode.com/codesearch/view/76013528/",
      "md5hash": "c9a5e1543a427274e0badeba4550d47f",
      "lines": {
        "32": "                  {",
        "33": "                      ExcelExtractor ex = new ExcelExtractor(fs);",
        "37": "                  {",
        "6": "",
        "7": "import org.apache.poi.poifs.filesystem.*;",
        "8": "import org.apache.poi.hwpf.*;",
        "9": "import org.apache.poi.hwpf.extractor.*;",
        "10": "import java.io.*;",
        "11": "import org.apache.poi.hslf.extractor.PowerPointExtractor;",
        "12": "import org.apache.poi.hssf.extractor.ExcelExtractor;",
        "13": " ",
        "24": "        ",
        "25": "\t\tPOIFSFileSystem fs = null;",
        "26": "\t\ttry{\t\t",
        "38": "                      PowerPointExtractor extractor  = new PowerPointExtractor(fs);  ",
        "39": "                      return extractor.getText();"
      },
      "id": 76013528,
      "filename": "DocumentFileParsing.java"
    },
    {
      "repo": "https://github.com/GayanM/carbon-registry.git",
      "language": "Java",
      "linescount": 36,
      "location": "/components/registry/org.wso2.carbon.registry.indexing/src/main/java/org/wso2/carbon/registry/indexing/indexer",
      "name": "carbon-registry",
      "url": "https://searchcode.com/codesearch/view/95551281/",
      "md5hash": "c677a1755ab2065291c064ac6ee9c092",
      "lines": {
        "1": "package org.wso2.carbon.registry.indexing.indexer;",
        "2": "",
        "5": "",
        "6": "import org.apache.commons.logging.Log;",
        "7": "import org.apache.commons.logging.LogFactory;",
        "8": "import org.apache.poi.hslf.extractor.PowerPointExtractor;",
        "9": "import org.apache.poi.poifs.filesystem.POIFSFileSystem;",
        "10": "import org.apache.solr.common.SolrException;",
        "11": "import org.apache.solr.common.SolrException.ErrorCode;",
        "12": "import org.wso2.carbon.registry.indexing.AsyncIndexer.File2Index;",
        "13": "import org.wso2.carbon.registry.indexing.solr.IndexDocument;",
        "14": "",
        "22": "\t\t\tPOIFSFileSystem fs = new POIFSFileSystem(new ByteArrayInputStream(fileData.data));",
        "23": "\t\t\tPowerPointExtractor extractor = new PowerPointExtractor(fs);",
        "24": "\t\t\tString ppText = extractor.getText();"
      },
      "id": 95551281,
      "filename": "MSPowerpointIndexer.java"
    },
    {
      "repo": "http://dspace-semantic-search.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 125,
      "location": "/dspace-api/src/main/java/org/dspace/app/mediafilter",
      "name": "dspace-semantic-search",
      "url": "https://searchcode.com/codesearch/view/11613227/",
      "md5hash": "9aac673862fc080067713fcba82fe234",
      "lines": {
        "77": "                    .createExtractor(source);",
        "5": " *",
        "6": " * http://www.dspace.org/license/",
        "7": " */",
        "76": "            POITextExtractor pptExtractor = ExtractorFactory",
        "75": "            new ExtractorFactory();",
        "12": "",
        "13": "import org.apache.poi.extractor.ExtractorFactory;",
        "14": "import org.apache.poi.xslf.extractor.XSLFPowerPointExtractor;",
        "15": "import org.apache.poi.hslf.extractor.PowerPointExtractor;",
        "16": "import org.apache.poi.POITextExtractor;",
        "17": "",
        "18": "import org.apache.log4j.Logger;",
        "83": "            if (pptExtractor instanceof XSLFPowerPointExtractor)",
        "84": "            {",
        "82": "            // If this is a PowerPoint XML file, extract accordingly"
      },
      "id": 11613227,
      "filename": "PowerPointFilter.java"
    },
    {
      "repo": "https://github.com/SilverTeamWork/Silverpeas-Core.git",
      "language": "Java",
      "linescount": 62,
      "location": "/lib-core/src/main/java/org/silverpeas/search/indexEngine/parser/pptParser",
      "name": "Silverpeas-Core",
      "url": "https://searchcode.com/codesearch/view/93256535/",
      "md5hash": "89f7232a8d1b782e8602f844cc15c060",
      "lines": {
        "51": "      PowerPointExtractor extractor = new PowerPointExtractor(file);",
        "35": "/**",
        "36": " * a pptParser uses POI to extract the text wich will be indexed",
        "11": " * text describing the FLOSS exception, and it is also available here:",
        "12": " * \"http://www.silverpeas.org/docs/core/legal/floss_exception.html\"",
        "50": "      file = new FileInputStream(path);",
        "18": " * You should have received a copy of the GNU Affero General Public License along with this program.",
        "19": " * If not, see <http://www.gnu.org/licenses/>.",
        "20": " */",
        "21": "package org.silverpeas.search.indexEngine.parser.pptParser;",
        "52": "      String text = extractor.getText(true, true);",
        "27": "",
        "28": "import org.apache.commons.io.IOUtils;",
        "29": "import org.apache.poi.hslf.extractor.PowerPointExtractor;",
        "30": "",
        "31": "import org.silverpeas.search.indexEngine.parser.Parser;"
      },
      "id": 93256535,
      "filename": "PptParserPOI.java"
    },
    {
      "repo": "http://docdoku.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 231,
      "location": "/DocDoku-ear/DocDoku-ejb/src/main/java/com/docdoku/server",
      "name": "docdoku",
      "url": "https://searchcode.com/codesearch/view/8591933/",
      "md5hash": "f55fa907a1cca9f68137597a49c91ee7",
      "lines": {
        "44": "import javax.xml.parsers.SAXParserFactory;",
        "45": "import org.apache.lucene.analysis.standard.StandardAnalyzer;",
        "46": "import org.apache.lucene.document.Document;",
        "47": "import org.apache.lucene.document.Field;",
        "48": "import org.apache.lucene.index.CorruptIndexException;",
        "49": "import org.apache.lucene.index.IndexReader;",
        "50": "import org.apache.lucene.index.IndexWriter;",
        "51": "import org.apache.lucene.index.Term;",
        "52": "import org.apache.lucene.store.Directory;",
        "53": "import org.apache.lucene.store.FSDirectory;",
        "54": "import org.apache.lucene.store.LockObtainFailedException;",
        "55": "import org.apache.lucene.util.Version;",
        "56": "import org.apache.poi.hslf.extractor.PowerPointExtractor;",
        "57": "import org.apache.poi.hwpf.extractor.WordExtractor;",
        "58": "import org.xml.sax.SAXException;"
      },
      "id": 8591933,
      "filename": "IndexerBean.java"
    },
    {
      "repo": "http://ontopia.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 45,
      "location": "/ontopia-classify/src/main/java/net/ontopia/topicmaps/classify",
      "name": "ontopia",
      "url": "https://searchcode.com/codesearch/view/12809878/",
      "md5hash": "1ed4f4764c95d669428b3b7875a8eb5d",
      "lines": {
        "32": "    try {",
        "33": "      PowerPointExtractor extractor = new PowerPointExtractor(new BufferedInputStream(new ByteArrayInputStream(cc.getContent())));",
        "34": "      String s = extractor.getText();",
        "35": "      char[] c = s.toCharArray();",
        "9": "",
        "10": "import org.apache.poi.hslf.extractor.PowerPointExtractor;",
        "14": " */",
        "15": "public class PowerPointFormatModule implements FormatModuleIF {"
      },
      "id": 12809878,
      "filename": "PowerPointFormatModule.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 73,
      "location": "/components/forks/poi/src/loci/poi",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642237/",
      "md5hash": "cf555a329d73935774f71285df4ed636",
      "lines": {
        "32": "       http://www.apache.org/licenses/LICENSE-2.0",
        "2": " * #%L",
        "3": " * Fork of Apache Jakarta POI.",
        "9": " * %%",
        "10": " * Licensed under the Apache License, Version 2.0 (the \"License\");",
        "13": " * ",
        "46": " *  a given format's text extractor under",
        "47": " *  loci.poi.[format].extractor .",
        "48": " * @see loci.poi.hssf.extractor.ExcelExtractor",
        "49": " * @see loci.poi.hslf.extractor.PowerPointExtractor",
        "50": " * @see loci.poi.hdgf.extractor.VisioTextExtractor",
        "51": " * @see loci.poi.hwpf.extractor.WordExtractor",
        "52": " */",
        "14": " *      http://www.apache.org/licenses/LICENSE-2.0",
        "31": ""
      },
      "id": 15642237,
      "filename": "POITextExtractor.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 5,
      "source": "Github",
      "id": 2
    },
    {
      "count": 3,
      "source": "Google Code",
      "id": 1
    }
  ]
}