{
  "matchterm": "Delta",
  "previouspage": null,
  "searchterm": "Delta",
  "query": "Delta",
  "language_filters": [
    {
      "count": 33815,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 33815,
  "results": [
    {
      "repo": "https://bitbucket.org/bazaarvoice/opengrok-patches",
      "language": "Java",
      "linescount": 256,
      "location": "/jrcs/src/main/java/org/apache/commons/jrcs/diff",
      "name": "opengrok-patches",
      "url": "https://searchcode.com/codesearch/view/76446054/",
      "md5hash": "09f31beebfc81bef81de8a234efbbf3c",
      "lines": {
        "96": "            DeltaClass[0][0] = org.apache.commons.jrcs.diff.ChangeDelta.class;",
        "97": "            DeltaClass[0][1] = org.apache.commons.jrcs.diff.AddDelta.class;",
        "130": "    /**",
        "131": "     * Creates an uninitialized delta.",
        "132": "     */",
        "133": "    protected Delta()",
        "80": "",
        "81": "public abstract class Delta",
        "88": "",
        "89": "    static Class[][] DeltaClass;",
        "63": " * Holds a \"delta\" difference between to revisions of a text.",
        "92": "    {",
        "93": "        DeltaClass = new Class[2][2];",
        "62": "/**",
        "95": "        {"
      },
      "id": 76446054,
      "filename": "Delta.java"
    },
    {
      "repo": "https://github.com/ActonZhuang/xwiki-commons.git",
      "language": "Java",
      "linescount": 94,
      "location": "/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/main/java/org/xwiki/diff",
      "name": "xwiki-commons",
      "url": "https://searchcode.com/codesearch/view/75940507/",
      "md5hash": "eb18cc6ae7bff8e0a61477ea255c1de2",
      "lines": {
        "64": "     * Apply the delta on the provided list.",
        "66": "     * @param target the list to modify",
        "67": "     * @throws PatchException if the delta cannot be applied",
        "71": "    /**",
        "72": "     * Apply the an inverted version of the delta on the provided list.",
        "74": "     * @param target the list to modify",
        "75": "     * @throws PatchException if the delta cannot be applied",
        "24": "/**",
        "55": "    /**",
        "56": "     * Try to apply the delta on the provided list.",
        "25": " * A delta between two version of a list.",
        "58": "     * @param target the list to modify",
        "59": "     * @throws PatchException if the delta cannot be applied",
        "29": " */",
        "30": "public interface Delta<E>",
        "63": "    /**"
      },
      "id": 75940507,
      "filename": "Delta.java"
    },
    {
      "repo": "https://github.com/mocleiri/wicket.git",
      "language": "Java",
      "linescount": 274,
      "location": "/wicket-util/src/main/java/org/apache/wicket/util/diff",
      "name": "wicket",
      "url": "https://searchcode.com/codesearch/view/112853607/",
      "md5hash": "c30300b7f4b7d3bc7aa563fdb978ae02",
      "lines": {
        "128": "\t/**",
        "129": "\t * Creates an uninitialized delta.",
        "95": "\t\t\tDeltaClass[1][1] = ChangeDelta.class;",
        "94": "\t\t\tDeltaClass[1][0] = DeleteDelta.class;",
        "77": "",
        "78": "public abstract class Delta extends ToString",
        "84": "",
        "85": "\tstatic Class<?>[][] DeltaClass;",
        "88": "\t{",
        "89": "\t\tDeltaClass = new Class[2][2];",
        "91": "\t\t{",
        "92": "\t\t\tDeltaClass[0][0] = ChangeDelta.class;",
        "93": "\t\t\tDeltaClass[0][1] = AddDelta.class;",
        "62": "/**",
        "63": " * Holds a \"delta\" difference between to revisions of a text."
      },
      "id": 112853607,
      "filename": "Delta.java"
    },
    {
      "repo": "https://github.com/pulasthi/xwiki-platform.git",
      "language": "Java",
      "linescount": 258,
      "location": "/xwiki-platform-core/xwiki-platform-wysiwyg/xwiki-platform-wysiwyg-client/src/main/java/org/xwiki/gwt/wysiwyg/client/diff",
      "name": "xwiki-platform",
      "url": "https://searchcode.com/codesearch/view/113986103/",
      "md5hash": "03cd9796a45944b7353edd5b381d1815",
      "lines": {
        "133": "     * Initializaes the delta with the given chunks from the original and",
        "97": "     */",
        "98": "    public static Delta newDelta(Chunk orig, Chunk rev)",
        "99": "    {",
        "100": "        Delta result;",
        "101": "        if ((orig.size()>0)&&(rev.size()>0))",
        "132": "    /**",
        "142": "    /**",
        "143": "     * Verifies that this delta can be used to patch the given text.",
        "80": "",
        "81": "public abstract class Delta extends ToString",
        "89": "    /**",
        "90": "     * Returns a Delta that corresponds to the given chunks in the original and",
        "62": "/**",
        "63": " * Holds a \"delta\" difference between to revisions of a text."
      },
      "id": 113986103,
      "filename": "Delta.java"
    },
    {
      "repo": "https://github.com/wordrak/kryo.git",
      "language": "Java",
      "linescount": 293,
      "location": "/src/main/java/com/esotericsoftware/kryo/compress",
      "name": "kryo",
      "url": "https://searchcode.com/codesearch/view/113204538/",
      "md5hash": "6938a9b18d9d67791f6e513e10fcfa67",
      "lines": {
        "64": "\t * @param chunkSize A larger chunk size is faster and uses less memory, but creates larger deltas. The chunk size does not",
        "33": "/**",
        "34": " * Determines the delta to convert one ByteBuffer to another. The delta is a list of copy and append commands.",
        "35": " * ",
        "36": " * Most of this code was originally from the \"javaxdelta\" project. It was heavily customized for efficiency when used with Kryo.",
        "37": " */",
        "38": "public class Delta {",
        "227": "\t * @param oldData Can be null if the delta does not contain copy commands.",
        "226": "\t/**",
        "66": "\t */",
        "228": "\t */",
        "67": "\tpublic Delta (int bufferSize, int chunkSize) {",
        "55": "\t/**",
        "56": "\t * Creates a Delta with a buffer size of 2048 and chunk size of 8.",
        "57": "\t */",
        "58": "\tpublic Delta () {",
        "63": "\t * @param bufferSize The maximum size a serialized object may be before or after compression."
      },
      "id": 113204538,
      "filename": "Delta.java"
    },
    {
      "repo": "https://github.com/vasia/flink.git",
      "language": "Java",
      "linescount": 92,
      "location": "/flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/windowing/helper",
      "name": "flink",
      "url": "https://searchcode.com/codesearch/view/93179125/",
      "md5hash": "2c4be2c683422255666004b7c35a34bc",
      "lines": {
        "32": " */",
        "33": "public class Delta<DATA> implements WindowingHelper<DATA> {",
        "34": "",
        "35": "\tprivate DeltaFunction<DATA> deltaFunction;",
        "39": "\t/**",
        "40": "\t * Creates a delta helper representing a delta count or eviction policy",
        "41": "\t * ",
        "19": "",
        "20": "import org.apache.flink.streaming.api.windowing.deltafunction.DeltaFunction;",
        "21": "import org.apache.flink.streaming.api.windowing.policy.DeltaPolicy;",
        "22": "import org.apache.flink.streaming.api.windowing.policy.EvictionPolicy;",
        "26": " * This helper represents a trigger or eviction policy based on a",
        "27": " * {@link DeltaFunction}.",
        "29": " * @param <DATA>",
        "30": " *            the data type handled by the delta function represented by this"
      },
      "id": 93179125,
      "filename": "Delta.java"
    },
    {
      "repo": "git://github.com/threerings/clyde.git",
      "language": "Java",
      "linescount": 141,
      "location": "/src/main/java/com/threerings/delta",
      "name": "clyde",
      "url": "https://searchcode.com/codesearch/view/15744341/",
      "md5hash": "f9244dfacbf192f1b84f7429b7116eb7",
      "lines": {
        "43": " */",
        "44": "public abstract class Delta",
        "61": "     */",
        "47": "    /**",
        "48": "     * Determines whether it is possible to create a {@link Delta} converting the original",
        "50": "     */",
        "51": "    public static boolean checkDeltable (Object original, Object revised)",
        "54": "        Class<?> rclazz = (revised == null) ? null : revised.getClass();",
        "55": "        return oclazz == rclazz && (original instanceof Deltable || oclazz.isArray());",
        "25": "",
        "26": "package com.threerings.delta;",
        "59": "     * Creates and returns a new {@link Delta} that will convert the original object to the",
        "58": "    /**",
        "62": "    public static Delta createDelta (Object original, Object revised)",
        "63": "    {"
      },
      "id": 15744341,
      "filename": "Delta.java"
    },
    {
      "repo": "git://github.com/yanchick/MatLAB.git",
      "language": "Java",
      "linescount": 169,
      "location": "/tp3/Material/sample/src/com/heatonresearch/book/introneuralnet/ch4/delta",
      "name": "MatLAB",
      "url": "https://searchcode.com/codesearch/view/15794984/",
      "md5hash": "27513ad1e3858fab73aa5796fe9b465b",
      "lines": {
        "32": "\t\tfinal Delta delta = new Delta();",
        "33": "\t\tdelta.run();",
        "34": "",
        "105": "\t\tdouble actual;",
        "106": "\t\tdouble delta;",
        "12": " */",
        "13": "package com.heatonresearch.book.introneuralnet.ch4.delta;",
        "17": " * ",
        "18": " * Delta: Learn, using the delta rule.",
        "22": " */",
        "23": "public class Delta {",
        "153": "\t/**",
        "25": "\t/**",
        "26": "\t * Main method just instanciates a delta object and calls run.",
        "154": "\t * The learningFunction implements the delta rule. This method will return",
        "31": "\tpublic static void main(final String args[]) {"
      },
      "id": 15794984,
      "filename": "Delta.java"
    },
    {
      "repo": "https://bitbucket.org/josephg/wave-http-federation",
      "language": "Java",
      "linescount": 246,
      "location": "/src/org/waveprotocol/wave/concurrencycontrol/common",
      "name": "wave-http-federation",
      "url": "https://searchcode.com/codesearch/view/58135679/",
      "md5hash": "37c4206dadd3e2ed055563434ffd5bff",
      "lines": {
        "32": " *",
        "33": " * This class is very similar to WaveDeltaMessage. One of the reasons for",
        "155": "   * Sets the hash of the delta from the server. This the signature after",
        "40": " */",
        "41": "public class Delta implements Iterable<WaveletOperation> {",
        "156": "   * all the operations in this delta have been applied.",
        "157": "   */",
        "146": "  /**",
        "147": "   * Gets the signature of the delta from the server. This the signature after",
        "148": "   * all the operations in this delta have been applied.",
        "149": "   */",
        "154": "  /**",
        "59": "   *",
        "60": "   * The version is the version after all the operations in the delta has been",
        "61": "   * applied. This version number can be different to the version number in the"
      },
      "id": 58135679,
      "filename": "Delta.java"
    },
    {
      "repo": "http://java-diff-utils.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 144,
      "location": "/src/difflib",
      "name": "java-diff-utils",
      "url": "https://searchcode.com/codesearch/view/12304301/",
      "md5hash": "d38e05e41755480b5db97b459d5a142e",
      "lines": {
        "128": "            return false;",
        "33": "    /**",
        "34": "     * Construct the delta for original and revised chunks",
        "68": "    /**",
        "69": "     * Returns the type of delta",
        "38": "     */",
        "39": "    public Delta(Chunk original, Chunk revised) {",
        "129": "        Delta other = (Delta) obj;",
        "44": "    /**",
        "45": "     * Verifies that this delta can be used to patch the given text.",
        "20": "/**",
        "21": " * Describes the delta between original and revised texts.",
        "24": " */",
        "25": "public abstract class Delta {",
        "60": "    /**",
        "61": "     * Cancel this delta for a given revised text. The action is opposite to"
      },
      "id": 12304301,
      "filename": "Delta.java"
    },
    {
      "repo": "https://bitbucket.org/pombredanne/opengrok-tag",
      "language": "Java",
      "linescount": 256,
      "location": "/jrcs/src/main/java/org/apache/commons/jrcs/diff",
      "name": "opengrok-tag",
      "url": "https://searchcode.com/codesearch/view/61082534/",
      "md5hash": "09f31beebfc81bef81de8a234efbbf3c",
      "lines": {
        "96": "            DeltaClass[0][0] = org.apache.commons.jrcs.diff.ChangeDelta.class;",
        "97": "            DeltaClass[0][1] = org.apache.commons.jrcs.diff.AddDelta.class;",
        "130": "    /**",
        "131": "     * Creates an uninitialized delta.",
        "132": "     */",
        "133": "    protected Delta()",
        "80": "",
        "81": "public abstract class Delta",
        "88": "",
        "89": "    static Class[][] DeltaClass;",
        "63": " * Holds a \"delta\" difference between to revisions of a text.",
        "92": "    {",
        "93": "        DeltaClass = new Class[2][2];",
        "62": "/**",
        "95": "        {"
      },
      "id": 61082534,
      "filename": "Delta.java"
    },
    {
      "repo": "https://bitbucket.org/feuervogel/flexi",
      "language": "Java",
      "linescount": 312,
      "location": "/src/de/uni_leipzig/asv/inflection/core",
      "name": "flexi",
      "url": "https://searchcode.com/codesearch/view/53697562/",
      "md5hash": "865ba2ffeed8edffb27f9adcd1a92974",
      "lines": {
        "5": "/**",
        "6": " * Represents an abstract delta. A delta can be regarded as a difference between",
        "47": "\t * @see de.uni_leipzig.asv.inflection.core.DeltaInterface#setStartLabel(String)",
        "8": " * differences (the \"a\" is replaced with the \"?\", the \"er\" is appended) and so",
        "9": " * two deltas.",
        "11": " * @author Julian Moritz, email [at] julianmoritz [dot] de",
        "12": " * @see de.uni_leipzig.asv.inflection.core.DeltaInterface",
        "38": "\t * @see de.uni_leipzig.asv.inflection.core.DeltaInterface#getChars()",
        "15": " */",
        "16": "public class Delta implements DeltaInterface, Comparable {",
        "46": "\t * (non-Javadoc)",
        "27": "\t/**",
        "28": "\t * Creates an empty delta.",
        "29": "\t */",
        "30": "\tpublic Delta() {",
        "37": "\t * (non-Javadoc)"
      },
      "id": 53697562,
      "filename": "Delta.java"
    },
    {
      "repo": "https://github.com/xwiki-contrib/retired.git",
      "language": "Java",
      "linescount": 220,
      "location": "/xwiki-platform-wysiwyg-plugin-sync/xwiki-platform-wysiwyg-plugin-sync-client/src/main/java/org/xwiki/gwt/wysiwyg/client/diff",
      "name": "retired",
      "url": "https://searchcode.com/codesearch/view/67069957/",
      "md5hash": "beca5d339c90246fcea3f734c7ba9f4c",
      "lines": {
        "64": "            result = new ChangeDelta();",
        "65": "        else if ((orig.size()==0)&&(rev.size()==0))",
        "66": "            result = new ChangeDelta();",
        "67": "        else if ((orig.size()>0)&&(rev.size()==0))",
        "42": "",
        "43": "public abstract class Delta extends ToString",
        "51": "    /**",
        "52": "     * Returns a Delta that corresponds to the given chunks in the original and",
        "24": "/**",
        "25": " * Holds a \"delta\" difference between to revisions of a text.",
        "59": "     */",
        "60": "    public static Delta newDelta(Chunk orig, Chunk rev)",
        "61": "    {",
        "62": "        Delta result;",
        "63": "        if ((orig.size()>0)&&(rev.size()>0))"
      },
      "id": 67069957,
      "filename": "Delta.java"
    },
    {
      "repo": "http://choosel.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 112,
      "location": "/org.thechiselgroup.choosel.core/src/org/thechiselgroup/choosel/core/client/util/collections",
      "name": "choosel",
      "url": "https://searchcode.com/codesearch/view/8345088/",
      "md5hash": "49826c800645ce948c58e8b78c318d87",
      "lines": {
        "33": "",
        "34": "        return new Delta<T>(addedElements,",
        "38": "",
        "39": "    public static <T> Delta<T> createAddedRemovedDelta(",
        "42": "",
        "43": "        return new Delta<T>(addedElements,",
        "51": "",
        "46": "",
        "47": "    public static <T> Delta<T> createDelta(",
        "19": " * <p>",
        "20": " * Delta of Change: new, changed, and removed elements.",
        "52": "        return new Delta<T>(addedElements, updatedElements, removedElements);",
        "28": " */",
        "29": "public class Delta<T> {",
        "30": "",
        "31": "    public static <T> Delta<T> createAddedDelta("
      },
      "id": 8345088,
      "filename": "Delta.java"
    },
    {
      "repo": "https://github.com/jkellerer/infinispan.git",
      "language": "Java",
      "linescount": 45,
      "location": "/core/src/main/java/org/infinispan/atomic",
      "name": "infinispan",
      "url": "https://searchcode.com/codesearch/view/113384514/",
      "md5hash": "f1db509b0f41e463ab011572aacf1a17",
      "lines": {
        "32": "public interface Delta {",
        "33": "   /**",
        "34": "    * Merge the current Delta instance with a given {@link DeltaAware} instance, and return a coherent and complete",
        "35": "    * {@link DeltaAware} instance.  Implementations should be able to deal with null values passed in, or values of a",
        "36": "    * different type from the expected DeltaAware instance.  Usually the approach would be to ignore what is passed in,",
        "37": "    * create a new instance of the DeltaAware implementation that the current Delta implementation is written for, apply",
        "38": "    * changes and pass it back.",
        "40": "    * @param d instance to merge with, or null if no merging is needed",
        "41": "    * @return a fully coherent and usable instance of DeltaAware which may or may not be the same instance passed in",
        "42": "    */",
        "43": "   DeltaAware merge(DeltaAware d);",
        "24": "/**",
        "25": " * Represents changes made to a {@link DeltaAware} implementation.  Implementations should be efficiently",
        "27": " *",
        "28": " * @see DeltaAware",
        "31": " */"
      },
      "id": 113384514,
      "filename": "Delta.java"
    },
    {
      "repo": "http://zend-sdk.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 205,
      "location": "/org.zend.sdk.cli/update/org/zend/sdkcli/update/parser",
      "name": "zend-sdk",
      "url": "https://searchcode.com/codesearch/view/12691197/",
      "md5hash": "440dc40ab2985dd1bfc8e05e78cbcde3",
      "lines": {
        "72": "\t/**",
        "73": "\t * @return location of update package defined in delta.xml",
        "42": " */",
        "43": "public class Delta {",
        "79": "\t/**",
        "80": "\t * Executes update process based on delta defined in delta.xml file.",
        "49": "",
        "50": "\tprivate List<AbstractDeltaEntry> entries;",
        "55": "",
        "56": "\tpublic Delta(Document doc, String zipLocation, int size) {",
        "89": "\t\textractZip(getZipFile(getZipLocation()));",
        "58": "\t\tthis.size = size;",
        "59": "\t\tthis.entries = new ArrayList<AbstractDeltaEntry>();",
        "90": "\t\tfor (AbstractDeltaEntry entry : entries) {"
      },
      "id": 12691197,
      "filename": "Delta.java"
    },
    {
      "repo": "https://github.com/andrefrd/ATT_APIPlatform_SampleApps.git",
      "language": "Java",
      "linescount": 65,
      "location": "/RESTFul/IMMN/Java/app1/src/main/java/com/att/api/immn/service",
      "name": "ATT_APIPlatform_SampleApps",
      "url": "https://searchcode.com/codesearch/view/99994559/",
      "md5hash": "975097f3af40581ce70e5e67dd9e1d58",
      "lines": {
        "32": "",
        "33": "    public DeltaChange[] getUpdates() {",
        "5": "",
        "6": "public final class Delta {",
        "7": "    private final String type;",
        "8": "    private final DeltaChange[] adds;",
        "9": "    private final DeltaChange[] deletes;",
        "10": "    private final DeltaChange[] updates;",
        "11": "",
        "12": "    public Delta(String type, DeltaChange[] adds, DeltaChange[] deletes,",
        "13": "            DeltaChange[] updates) {",
        "14": "            ",
        "24": "",
        "25": "    public DeltaChange[] getAdds() {",
        "28": "",
        "29": "    public DeltaChange[] getDeletes() {"
      },
      "id": 99994559,
      "filename": "Delta.java"
    },
    {
      "repo": "git://github.com/weld/core.git",
      "language": "Java",
      "linescount": 45,
      "location": "/tests-arquillian/src/test/java/org/jboss/weld/tests/producer/interception",
      "name": "core",
      "url": "https://searchcode.com/codesearch/view/116120321/",
      "md5hash": "15e48f335c2660a0130cf11ef95164ca",
      "lines": {
        "33": "@Retention(RUNTIME)",
        "34": "public @interface Delta {",
        "36": "    @SuppressWarnings(\"all\")",
        "37": "    public static class Literal extends AnnotationLiteral<Delta> implements Delta {"
      },
      "id": 116120321,
      "filename": "Delta.java"
    },
    {
      "repo": "git://github.com/unclebob/fitnesse.git",
      "language": "Java",
      "linescount": 42,
      "location": "/src/fit/decorator/util",
      "name": "fitnesse",
      "url": "https://searchcode.com/codesearch/view/1119026/",
      "md5hash": "7d09afe3ea6ddfbd2284ae8bdee73a89",
      "lines": {
        "4": "",
        "5": "public class Delta {",
        "8": "",
        "9": "  public Delta(String dataType, String value) throws InvalidInputException {",
        "28": "    }",
        "29": "    return this.dataType.equals(((Delta) other).dataType) && this.value.equals(((Delta) other).value);"
      },
      "id": 1119026,
      "filename": "Delta.java"
    },
    {
      "repo": "https://github.com/githubapitest/github-java-sdk.git",
      "language": "Java",
      "linescount": 51,
      "location": "/schema/src/main/java/com/github/api/v2/schema",
      "name": "github-java-sdk",
      "url": "https://searchcode.com/codesearch/view/109895477/",
      "md5hash": "f357c62e6a3e3033b652c57181e1ad71",
      "lines": {
        "48": "\t\treturn \"Delta [diff=\" + diff + \", filename=\" + filename + \"]\";",
        "9": " */",
        "10": "public class Delta extends SchemaEntity {",
        "47": "\tpublic String toString() {"
      },
      "id": 109895477,
      "filename": "Delta.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 21550,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 9386,
      "source": "Github",
      "id": 2
    },
    {
      "count": 2472,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 177,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 127,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 40,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 33,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 22,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 8,
      "source": "Gitorious",
      "id": 10
    }
  ]
}