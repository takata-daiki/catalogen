{
  "matchterm": "Blob",
  "previouspage": null,
  "searchterm": "Blob",
  "query": "Blob",
  "language_filters": [
    {
      "count": 12014,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 12014,
  "results": [
    {
      "repo": "https://git.gitorious.org/yacy/rc1.git",
      "language": "Java",
      "linescount": 209,
      "location": "/source/net/yacy/kelondro/blob",
      "name": "yacy",
      "url": "https://searchcode.com/codesearch/view/62351822/",
      "md5hash": "dc6e9e3d2846f0743445e342243e4bb5",
      "lines": {
        "1": "// BLOB.java",
        "2": "// (C) 2008 by Michael Peter Christen; mc@yacy.net, Frankfurt a. M., Germany",
        "131": "     * @param key",
        "132": "     * @return the size of the BLOB or -1 if the BLOB does not exist",
        "155": "     * @param rewriter",
        "129": "    /**",
        "137": "    /**",
        "138": "     * write a whole byte array as BLOB to the table",
        "130": "     * retrieve the size of the BLOB",
        "146": "    /**",
        "147": "     * replace an existing entry in the BLOB with a new entry",
        "148": "     * this method is similar to put, but it is necessary that a blob entry existed before",
        "149": "     * and contains an entry of same size or bigger than the new entry.",
        "26": "",
        "27": "package net.yacy.kelondro.blob;",
        "156": "     * @return the number of bytes that the rewriter reduced the BLOB"
      },
      "id": 62351822,
      "filename": "BLOB.java"
    },
    {
      "repo": "https://github.com/emitrom/titanium4j.git",
      "language": "Java",
      "linescount": 150,
      "location": "/src/com/emitrom/ti4j/mobile/client/blob",
      "name": "titanium4j",
      "url": "https://searchcode.com/codesearch/view/73104357/",
      "md5hash": "0c4b16908efdc095faad67fc38ef1137",
      "lines": {
        "1": "/************************************************************************",
        "2": "  Blob.java is part of Ti4j 3.1.0  Copyright 2013 Emitrom LLC",
        "33": "",
        "34": "    public Blob(JavaScriptObject obj) {",
        "15": "**************************************************************************/",
        "16": "package com.emitrom.ti4j.mobile.client.blob;",
        "83": "    /**",
        "84": "     * Converts this blob to a string",
        "85": "     * ",
        "23": "/**",
        "24": " * The blob is an abstract data type that represents binary information, often",
        "27": " */",
        "28": "public class Blob extends EventDispatcher {",
        "29": "",
        "30": "    public Blob() {"
      },
      "id": 73104357,
      "filename": "Blob.java"
    },
    {
      "repo": "https://bitbucket.org/XicoMBD/processingsketchbook",
      "language": "Java",
      "linescount": 115,
      "location": "/libraries/OpenCV/source/java/hypermedia/video",
      "name": "processingsketchbook",
      "url": "https://searchcode.com/codesearch/view/59420307/",
      "md5hash": "647753dc17e9d2e3204cbec82a5f2f10",
      "lines": {
        "32": " * @see OpenCV#blobs( int, int, int, boolean, int )",
        "1": "/**",
        "2": " * (./) Blob.java, 04/05/08",
        "35": "public class Blob {",
        "37": "\t",
        "38": "\t/** The area of the blob in pixels */",
        "33": " * @usage Application",
        "41": "\tpublic float length\t\t\t= 0f;",
        "42": "\t/** The centroid or barycenter of the blob */",
        "43": "\tpublic Point centroid\t\t= new Point();",
        "34": " */",
        "26": "/**",
        "27": " * A storage object containing a blob detected by OpenCV.",
        "28": " * Returned by <code>blobs()</code> method.  ",
        "29": " *",
        "30": " * @example blobs",
        "31": " * @see OpenCV#blobs( int, int, int, boolean )"
      },
      "id": 59420307,
      "filename": "Blob.java"
    },
    {
      "repo": "https://bitbucket.org/lpimports/gcc.git",
      "language": "Java",
      "linescount": 158,
      "location": "/libjava/classpath/java/sql",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/127597741/",
      "md5hash": "cfafb6d4f0b6b7c70ac9639181f90909",
      "lines": {
        "64": "   * @param start The index into this <code>Blob</code> to start returning",
        "1": "/* Blob.java -- Access a SQL Binary Large OBject.",
        "2": "   Copyright (C) 1999, 2000, 2002, 2006 Free Software Foundation, Inc.",
        "67": "   * @return The requested bytes from this <code>Blob</code>.",
        "43": "/**",
        "44": " * This interface specified methods for accessing a SQL BLOB (Binary Large",
        "66": "   * @param count The requested number of bytes to return.",
        "49": " */",
        "50": "public interface Blob",
        "52": "  /**",
        "53": "   * This method returns the number of bytes in this <code>Blob</code>.",
        "54": "   *",
        "55": "   * @return The number of bytes in this <code>Blob</code>.",
        "60": "  /**",
        "61": "   * This method returns up to the requested bytes of this <code>Blob</code>",
        "63": "   *"
      },
      "id": 127597741,
      "filename": "Blob.java"
    },
    {
      "repo": "https://bitbucket.org/vaporoid/gcc.git",
      "language": "Java",
      "linescount": 158,
      "location": "/libjava/classpath/java/sql",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/130225027/",
      "md5hash": "cfafb6d4f0b6b7c70ac9639181f90909",
      "lines": {
        "64": "   * @param start The index into this <code>Blob</code> to start returning",
        "1": "/* Blob.java -- Access a SQL Binary Large OBject.",
        "2": "   Copyright (C) 1999, 2000, 2002, 2006 Free Software Foundation, Inc.",
        "67": "   * @return The requested bytes from this <code>Blob</code>.",
        "43": "/**",
        "44": " * This interface specified methods for accessing a SQL BLOB (Binary Large",
        "66": "   * @param count The requested number of bytes to return.",
        "49": " */",
        "50": "public interface Blob",
        "52": "  /**",
        "53": "   * This method returns the number of bytes in this <code>Blob</code>.",
        "54": "   *",
        "55": "   * @return The number of bytes in this <code>Blob</code>.",
        "60": "  /**",
        "61": "   * This method returns up to the requested bytes of this <code>Blob</code>",
        "63": "   *"
      },
      "id": 130225027,
      "filename": "Blob.java"
    },
    {
      "repo": "https://bitbucket.org/tari/prizm-gcc.git",
      "language": "Java",
      "linescount": 158,
      "location": "/libjava/classpath/java/sql",
      "name": "prizm-gcc",
      "url": "https://searchcode.com/codesearch/view/37947432/",
      "md5hash": "cfafb6d4f0b6b7c70ac9639181f90909",
      "lines": {
        "64": "   * @param start The index into this <code>Blob</code> to start returning",
        "1": "/* Blob.java -- Access a SQL Binary Large OBject.",
        "2": "   Copyright (C) 1999, 2000, 2002, 2006 Free Software Foundation, Inc.",
        "67": "   * @return The requested bytes from this <code>Blob</code>.",
        "43": "/**",
        "44": " * This interface specified methods for accessing a SQL BLOB (Binary Large",
        "66": "   * @param count The requested number of bytes to return.",
        "49": " */",
        "50": "public interface Blob",
        "52": "  /**",
        "53": "   * This method returns the number of bytes in this <code>Blob</code>.",
        "54": "   *",
        "55": "   * @return The number of bytes in this <code>Blob</code>.",
        "60": "  /**",
        "61": "   * This method returns up to the requested bytes of this <code>Blob</code>",
        "63": "   *"
      },
      "id": 37947432,
      "filename": "Blob.java"
    },
    {
      "repo": "https://bitbucket.org/bluezoo/gcc.git",
      "language": "Java",
      "linescount": 158,
      "location": "/libjava/classpath/java/sql",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/46813067/",
      "md5hash": "cfafb6d4f0b6b7c70ac9639181f90909",
      "lines": {
        "64": "   * @param start The index into this <code>Blob</code> to start returning",
        "1": "/* Blob.java -- Access a SQL Binary Large OBject.",
        "2": "   Copyright (C) 1999, 2000, 2002, 2006 Free Software Foundation, Inc.",
        "67": "   * @return The requested bytes from this <code>Blob</code>.",
        "43": "/**",
        "44": " * This interface specified methods for accessing a SQL BLOB (Binary Large",
        "66": "   * @param count The requested number of bytes to return.",
        "49": " */",
        "50": "public interface Blob",
        "52": "  /**",
        "53": "   * This method returns the number of bytes in this <code>Blob</code>.",
        "54": "   *",
        "55": "   * @return The number of bytes in this <code>Blob</code>.",
        "60": "  /**",
        "61": "   * This method returns up to the requested bytes of this <code>Blob</code>",
        "63": "   *"
      },
      "id": 46813067,
      "filename": "Blob.java"
    },
    {
      "repo": "https://github.com/RyanDMitchell/RoboCup_Group3.git",
      "language": "Java",
      "linescount": 180,
      "location": "/src/imaging",
      "name": "RoboCup_Group3",
      "url": "https://searchcode.com/codesearch/view/73675130/",
      "md5hash": "e6b627c1b8f9f1df277808203243fdb7",
      "lines": {
        "1": "// Blob Finder Demo",
        "2": "// A.Greensted",
        "8": "",
        "9": "public class BlobFinder",
        "172": "\t\t\t\t\tBlob blob = new Blob(xMinTable[i], xMaxTable[i], yMinTable[i], yMaxTable[i], massTable[i]);",
        "45": "",
        "46": "\tpublic BlobFinder()",
        "173": "\t\t\t\t\tblobList.add(blob);",
        "145": "\t\t// Iterate through labels pushing min/max x,y values towards minimum label",
        "146": "\t\tif (blobList == null) blobList = new ArrayList<Blob>();",
        "174": "\t\t\t\t}",
        "22": "",
        "23": "\tstatic class Blob",
        "30": "",
        "31": "\t\tpublic Blob(int xMin, int xMax, int yMin, int yMax, int mass)"
      },
      "id": 73675130,
      "filename": "BlobFinder.java"
    },
    {
      "repo": "https://bitbucket.org/kulttuuri/vaadin-irkkia",
      "language": "Java",
      "linescount": 390,
      "location": "/ext_libs/jdbc_mysql_connector/src/com/mysql/jdbc",
      "name": "vaadin-irkkia",
      "url": "https://searchcode.com/codesearch/view/64433026/",
      "md5hash": "3bbe32325dfa49a76371b55229c2aa1f",
      "lines": {
        "35": " * The representation (mapping) in the JavaTM programming language of an SQL",
        "36": " * BLOB value. An SQL BLOB is a built-in type that stores a Binary Large Object",
        "37": " * as a column value in a row of a database table. The driver implements Blob",
        "38": " * using an SQL locator(BLOB), which means that a Blob object contains a logical",
        "39": " * pointer to the SQL BLOB data rather than the data itself. A Blob object is",
        "40": " * valid for the duration of the transaction in which is was created. Methods in",
        "41": " * the interfaces ResultSet, CallableStatement, and PreparedStatement, such as",
        "42": " * getBlob and setBlob allow a programmer to access an SQL BLOB value. The Blob",
        "43": " * interface provides methods for getting the length of an SQL BLOB (Binary",
        "44": " * Large Object) value, for materializing a BLOB value on the client, and for",
        "45": " * determining the position of a pattern of bytes within a BLOB value. This",
        "46": " * class is new in the JDBC 2.0 API.",
        "50": " */",
        "51": "public class Blob implements java.sql.Blob, OutputStreamWatcher {",
        "53": "\t//",
        "54": "\t// This is a real brain-dead implementation of BLOB. Once I add"
      },
      "id": 64433026,
      "filename": "Blob.java"
    },
    {
      "repo": "https://github.com/bobbywarner/dasein-cloud-core.git",
      "language": "Java",
      "linescount": 143,
      "location": "/src/main/java/org/dasein/cloud/storage",
      "name": "dasein-cloud-core",
      "url": "https://searchcode.com/codesearch/view/69423158/",
      "md5hash": "bc76568373dd151f0f90b1f3b0a873a5",
      "lines": {
        "32": " */",
        "33": "public class Blob implements Comparable<Blob> {",
        "34": "    static public @Nonnull Blob getInstance(@Nonnull String providerRegionId, @Nonnull String location, @Nonnull String bucketName, @Nonnegative long creationTimestamp) {",
        "35": "        Blob blob = new Blob();",
        "36": "",
        "37": "        blob.creationTimestamp = creationTimestamp;",
        "38": "        blob.providerRegionId = providerRegionId;",
        "39": "        blob.bucketName = bucketName;",
        "40": "        blob.objectName = null;",
        "41": "        blob.location = location;",
        "42": "        blob.size = null;",
        "43": "        return blob;",
        "44": "    }",
        "45": "",
        "46": "    static public @Nonnull Blob getInstance(@Nonnull String providerRegionId, @Nonnull String location, @Nullable String bucketName, @Nonnull String objectName, @Nonnegative long creationTimestamp, @Nonnull Storage<?> size) {",
        "47": "        Blob blob = new Blob();"
      },
      "id": 69423158,
      "filename": "Blob.java"
    },
    {
      "repo": "https://github.com/thomhastings/T-PEN.git",
      "language": "Java",
      "linescount": 1283,
      "location": "/trunk/src/java/detectimages",
      "name": "T-PEN",
      "url": "https://searchcode.com/codesearch/view/73102871/",
      "md5hash": "ae90945c3b708810287a635f4df122da",
      "lines": {
        "128": "//coordinates of a pixel in the blob. Any pixel will do.",
        "160": " worth of data, so quite inefficient. Returns null if it couldnt service the request.*/",
        "134": "protected int height;",
        "135": "public matrixBlob matrixVersion;",
        "136": "public altBlob altVersion;",
        "137": "protected int size;",
        "138": "public blob blob2;",
        "161": "    public static blob getBlob(String imageName, int blobIdentifier)",
        "143": "public pixel[] arrayVersion;",
        "144": "public blob()",
        "150": "}",
        "151": "public blob(int x,int y)",
        "159": "/**Service a request for a single blob from a page, intended for drawing the blob. Currently loads the entire page",
        "158": "}",
        "127": "    }"
      },
      "id": 73102871,
      "filename": "blob.java"
    },
    {
      "repo": "http://crux-framework.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 134,
      "location": "/crux-dev/src/main/java/org/cruxframework/crux/core/client/file",
      "name": "crux-framework",
      "url": "https://searchcode.com/codesearch/view/63747920/",
      "md5hash": "663ca6f60600c6a6fd7c50f54e897fdd",
      "lines": {
        "68": "",
        "69": "\tpublic static Blob createIfSupported(JsArrayMixed body, String type)",
        "62": "\t\tif ($wnd.Blob)",
        "44": "\t",
        "45": "\tpublic final native Blob slice()/*-{",
        "61": "\tpublic static native boolean isSupported()/*-{",
        "48": "",
        "49": "\tpublic final native Blob slice(int start)/*-{",
        "52": "",
        "53": "\tpublic final native Blob slice(int start, int end)/*-{",
        "56": "",
        "57": "\tpublic final native Blob slice(int start, int end, String contentType)/*-{",
        "28": "@PartialSupport",
        "29": "public class Blob extends JavaScriptObject",
        "30": "{",
        "31": "\tprotected Blob(){}"
      },
      "id": 63747920,
      "filename": "Blob.java"
    },
    {
      "repo": "http://mapsforge.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 351,
      "location": "/mapsforge-poi-reader/src/main/java/org/sqlite/android",
      "name": "mapsforge",
      "url": "https://searchcode.com/codesearch/view/9499325/",
      "md5hash": "f2769ab92bbd1298793c4fe72ded02a3",
      "lines": {
        "6": " * Internal class implementing java.io.InputStream on SQLite 3.4.0 incremental",
        "7": " * blob I/O interface.",
        "40": "\t\tint ret = blob.size - pos;",
        "9": "",
        "10": "class BlobR extends InputStream {",
        "39": "\tpublic int available() throws IOException {",
        "12": "\t/**",
        "13": "\t * Blob instance",
        "15": "",
        "16": "\tprivate Blob blob;",
        "24": "\t/**",
        "25": "\t * Contruct InputStream from blob instance.",
        "27": "",
        "28": "\tBlobR(Blob blob) {",
        "29": "\t\tthis.blob = blob;",
        "30": "\t\tthis.pos = 0;"
      },
      "id": 9499325,
      "filename": "Blob.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 386,
      "location": "/engine_java/000_Engine_Core/lib/mysql-connector-java-5.1.7/src/com/mysql/jdbc",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11373396/",
      "md5hash": "7fdf355ea7b12498d33ef9ec1847b1f1",
      "lines": {
        "34": " * The representation (mapping) in the JavaTM programming language of an SQL",
        "35": " * BLOB value. An SQL BLOB is a built-in type that stores a Binary Large Object",
        "36": " * as a column value in a row of a database table. The driver implements Blob",
        "37": " * using an SQL locator(BLOB), which means that a Blob object contains a logical",
        "38": " * pointer to the SQL BLOB data rather than the data itself. A Blob object is",
        "39": " * valid for the duration of the transaction in which is was created. Methods in",
        "40": " * the interfaces ResultSet, CallableStatement, and PreparedStatement, such as",
        "41": " * getBlob and setBlob allow a programmer to access an SQL BLOB value. The Blob",
        "42": " * interface provides methods for getting the length of an SQL BLOB (Binary",
        "43": " * Large Object) value, for materializing a BLOB value on the client, and for",
        "44": " * determining the position of a pattern of bytes within a BLOB value. This",
        "45": " * class is new in the JDBC 2.0 API.",
        "49": " */",
        "50": "public class Blob implements java.sql.Blob, OutputStreamWatcher {",
        "52": "\t//",
        "53": "\t// This is a real brain-dead implementation of BLOB. Once I add"
      },
      "id": 11373396,
      "filename": "Blob.java"
    },
    {
      "repo": "https://code.google.com/p/beat-the-bard/",
      "language": "Java",
      "linescount": 390,
      "location": "/lib/mysql-connector-java-5.1.18/src/com/mysql/jdbc",
      "name": "beat-the-bard",
      "url": "https://searchcode.com/codesearch/view/11446133/",
      "md5hash": "3bbe32325dfa49a76371b55229c2aa1f",
      "lines": {
        "35": " * The representation (mapping) in the JavaTM programming language of an SQL",
        "36": " * BLOB value. An SQL BLOB is a built-in type that stores a Binary Large Object",
        "37": " * as a column value in a row of a database table. The driver implements Blob",
        "38": " * using an SQL locator(BLOB), which means that a Blob object contains a logical",
        "39": " * pointer to the SQL BLOB data rather than the data itself. A Blob object is",
        "40": " * valid for the duration of the transaction in which is was created. Methods in",
        "41": " * the interfaces ResultSet, CallableStatement, and PreparedStatement, such as",
        "42": " * getBlob and setBlob allow a programmer to access an SQL BLOB value. The Blob",
        "43": " * interface provides methods for getting the length of an SQL BLOB (Binary",
        "44": " * Large Object) value, for materializing a BLOB value on the client, and for",
        "45": " * determining the position of a pattern of bytes within a BLOB value. This",
        "46": " * class is new in the JDBC 2.0 API.",
        "50": " */",
        "51": "public class Blob implements java.sql.Blob, OutputStreamWatcher {",
        "53": "\t//",
        "54": "\t// This is a real brain-dead implementation of BLOB. Once I add"
      },
      "id": 11446133,
      "filename": "Blob.java"
    },
    {
      "repo": "https://code.google.com/p/spatialite-android/",
      "language": "Java",
      "linescount": 326,
      "location": "/spatialite-android-library/src/jsqlite",
      "name": "spatialite-android",
      "url": "https://searchcode.com/codesearch/view/12393904/",
      "md5hash": "62b1dfbb4497307aa9058fee7428231a",
      "lines": {
        "32": "\tthis.pos = 0;",
        "8": " * Internal class implementing java.io.InputStream on",
        "9": " * SQLite 3.4.0 incremental blob I/O interface.",
        "11": "",
        "12": "class BlobR extends InputStream {",
        "14": "    /**",
        "15": "     * Blob instance",
        "17": "",
        "18": "    private Blob blob;",
        "41": "\tint ret = blob.size - pos;",
        "40": "    public int available() throws IOException {",
        "26": "    /**",
        "27": "     * Contruct InputStream from blob instance.",
        "29": "",
        "30": "    BlobR(Blob blob) {",
        "31": "\tthis.blob = blob;"
      },
      "id": 12393904,
      "filename": "Blob.java"
    },
    {
      "repo": "http://tesis-matlab-estanques.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 238,
      "location": "/BIBLIOTECAS/ConectoresBD/mysql-connector-java-3.0.17-ga/com/mysql/jdbc",
      "name": "tesis-matlab-estanques",
      "url": "https://searchcode.com/codesearch/view/13213013/",
      "md5hash": "d3bf18b7d41276d2b02582a84cf2b0ab",
      "lines": {
        "33": " * The representation (mapping) in the JavaTM programming language  of an SQL",
        "34": " * BLOB value. An SQL BLOB is a built-in type that stores  a Binary Large",
        "35": " * Object as a column value in a row of a database  table. The driver",
        "36": " * implements Blob using an SQL locator(BLOB),  which means that a Blob object",
        "37": " * contains a logical pointer to the  SQL BLOB data rather than the data",
        "38": " * itself. A Blob object is valid  for the duration of the transaction in",
        "39": " * which is was created.   Methods in the interfaces ResultSet,",
        "40": " * CallableStatement, and  PreparedStatement, such as getBlob and setBlob",
        "41": " * allow a programmer  to access an SQL BLOB value. The Blob interface",
        "42": " * provides methods  for getting the length of an SQL BLOB (Binary Large",
        "43": " * Object) value,  for materializing a BLOB value on the client, and for",
        "44": " * determining  the position of a pattern of bytes within a BLOB value.   This",
        "45": " * class is new in the JDBC 2.0 API.",
        "48": " *",
        "49": " * @version $Id: Blob.java,v 1.9.2.10 2004/08/09 22:15:12 mmatthew Exp $",
        "50": " */"
      },
      "id": 13213013,
      "filename": "Blob.java"
    },
    {
      "repo": "http://cubbers-eqemu-utils.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 392,
      "location": "/EQEmuJSM/mysql-connector-java-5.1.13/src/com/mysql/jdbc",
      "name": "cubbers-eqemu-utils",
      "url": "https://searchcode.com/codesearch/view/13474367/",
      "md5hash": "e5be547ec0ac0f9275ce67ae299f9053",
      "lines": {
        "37": " * The representation (mapping) in the JavaTM programming language of an SQL",
        "38": " * BLOB value. An SQL BLOB is a built-in type that stores a Binary Large Object",
        "39": " * as a column value in a row of a database table. The driver implements Blob",
        "40": " * using an SQL locator(BLOB), which means that a Blob object contains a logical",
        "41": " * pointer to the SQL BLOB data rather than the data itself. A Blob object is",
        "42": " * valid for the duration of the transaction in which is was created. Methods in",
        "43": " * the interfaces ResultSet, CallableStatement, and PreparedStatement, such as",
        "44": " * getBlob and setBlob allow a programmer to access an SQL BLOB value. The Blob",
        "45": " * interface provides methods for getting the length of an SQL BLOB (Binary",
        "46": " * Large Object) value, for materializing a BLOB value on the client, and for",
        "47": " * determining the position of a pattern of bytes within a BLOB value. This",
        "48": " * class is new in the JDBC 2.0 API.",
        "52": " */",
        "53": "public class Blob implements java.sql.Blob, OutputStreamWatcher {",
        "55": "\t//",
        "56": "\t// This is a real brain-dead implementation of BLOB. Once I add"
      },
      "id": 13474367,
      "filename": "Blob.java"
    },
    {
      "repo": "https://bitbucket.org/buzaan/slick",
      "language": "Java",
      "linescount": 87,
      "location": "/trunk/commet/test/org/newdawn/noodles/space",
      "name": "slick",
      "url": "https://searchcode.com/codesearch/view/61305966/",
      "md5hash": "3b163f9946e5b9e9f875d0ab3cd39861",
      "lines": {
        "32": "\t * ",
        "10": " */",
        "11": "public class Blob {",
        "12": "\t/** The x position of this game blob */",
        "13": "\t@NetworkField",
        "14": "\tprivate int x;",
        "15": "\t/** The y position of this game blob */",
        "19": "\tprivate int timer;",
        "20": "\t/** The ID of the owner of this blob - will be set as part of space listener */",
        "23": "\t/**",
        "24": "\t * Create a new empty blob. Note that the network space requires an empty",
        "26": "\t */",
        "27": "\tprivate Blob() {",
        "30": "\t/**",
        "31": "\t * Create a new configured blob"
      },
      "id": 61305966,
      "filename": "Blob.java"
    },
    {
      "repo": "https://bitbucket.org/bondike/slick",
      "language": "Java",
      "linescount": 87,
      "location": "/trunk/commet/test/org/newdawn/noodles/space",
      "name": "slick",
      "url": "https://searchcode.com/codesearch/view/61384116/",
      "md5hash": "3b163f9946e5b9e9f875d0ab3cd39861",
      "lines": {
        "32": "\t * ",
        "10": " */",
        "11": "public class Blob {",
        "12": "\t/** The x position of this game blob */",
        "13": "\t@NetworkField",
        "14": "\tprivate int x;",
        "15": "\t/** The y position of this game blob */",
        "19": "\tprivate int timer;",
        "20": "\t/** The ID of the owner of this blob - will be set as part of space listener */",
        "23": "\t/**",
        "24": "\t * Create a new empty blob. Note that the network space requires an empty",
        "26": "\t */",
        "27": "\tprivate Blob() {",
        "30": "\t/**",
        "31": "\t * Create a new configured blob"
      },
      "id": 61384116,
      "filename": "Blob.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 6048,
      "source": "Github",
      "id": 2
    },
    {
      "count": 4506,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 1091,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 199,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 62,
      "source": "Gitorious",
      "id": 10
    },
    {
      "count": 57,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 26,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 19,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 6,
      "source": "Google Android",
      "id": 12
    }
  ]
}