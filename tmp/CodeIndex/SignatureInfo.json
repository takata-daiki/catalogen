{
  "matchterm": "SignatureInfo",
  "previouspage": null,
  "searchterm": "SignatureInfo",
  "query": "SignatureInfo",
  "language_filters": [
    {
      "count": 61,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 61,
  "results": [
    {
      "repo": "git://github.com/codeborne/mobileid.git",
      "language": "Java",
      "linescount": 488,
      "location": "/src/com/codeborne/security/digidoc",
      "name": "mobileid",
      "url": "https://searchcode.com/codesearch/view/15578870/",
      "md5hash": "abf47369c3402e43d75898410ccbb276",
      "lines": {
        "128": "    /**",
        "1": "/**",
        "2": " * SignatureInfo.java",
        "166": "    /**",
        "33": "",
        "129": "     * Sets the signingTime value for this SignatureInfo.",
        "9": "",
        "10": "public class SignatureInfo  implements java.io.Serializable {",
        "139": "     * Gets the signerRole value for this SignatureInfo.",
        "34": "    public SignatureInfo(",
        "167": "     * Gets the signatureProductionPlace value for this SignatureInfo.",
        "148": "    /**",
        "149": "     * Sets the signerRole value for this SignatureInfo.",
        "138": "    /**",
        "30": "",
        "31": "    public SignatureInfo() {"
      },
      "id": 15578870,
      "filename": "SignatureInfo.java"
    },
    {
      "repo": "https://bitbucket.org/adroitlogic/ultraesb/",
      "language": "Java",
      "linescount": 109,
      "location": "/modules/api/src/main/java/org/adroitlogic/as2/api",
      "name": "ultraesb",
      "url": "https://searchcode.com/codesearch/view/116594266/",
      "md5hash": "807aba08179b30bae008dff857aaa620",
      "lines": {
        "67": "",
        "68": "    private SignatureInfo(boolean signMessage, DigestAlgorithm digestAlgorithm, EncryptionAlgorithm encryptionAlgorithm) {",
        "101": "    public String toString() {",
        "38": "@SuppressWarnings(\"UnusedDeclaration\")",
        "39": "public class SignatureInfo {",
        "40": "",
        "41": "    public static final SignatureInfo DISABLED = new SignatureInfo(false, null, null);",
        "102": "        return \"SignatureInfo{\" +",
        "53": "     */",
        "54": "    public SignatureInfo() {",
        "57": "",
        "58": "    public SignatureInfo(DigestAlgorithm digestAlgorithm, EncryptionAlgorithm encryptionAlgorithm) {",
        "61": "",
        "62": "    public SignatureInfo(String digestAlgorithm, String encryptionAlgorithm) {"
      },
      "id": 116594266,
      "filename": "SignatureInfo.java"
    },
    {
      "repo": "https://HealthVaultJavaLib.svn.codeplex.com/svn",
      "language": "Java",
      "linescount": 125,
      "location": "/tags/R1.2.1/hv-jaxb/src/main/java/com/microsoft/hsg/thing/oxm/jaxb/thing",
      "name": "HealthVaultJavaLib",
      "url": "https://searchcode.com/codesearch/view/11027951/",
      "md5hash": "a0fb6f98fe67d45bbe43fc930a9782f7",
      "lines": {
        "48": "@XmlAccessorType(XmlAccessType.FIELD)",
        "33": " * <pre>",
        "34": " * &lt;complexType name=\"SignatureInfo\">",
        "52": "})",
        "53": "public class SignatureInfo {",
        "49": "@XmlType(name = \"SignatureInfo\", propOrder = {",
        "28": " * ",
        "29": " * <p>Java class for SignatureInfo complex type."
      },
      "id": 11027951,
      "filename": "SignatureInfo.java"
    },
    {
      "repo": "https://bitbucket.org/luchsh/openjdk8-hotspot",
      "language": "Java",
      "linescount": 64,
      "location": "/agent/src/share/classes/sun/jvm/hotspot/runtime",
      "name": "openjdk8-hotspot",
      "url": "https://searchcode.com/codesearch/view/125203565/",
      "md5hash": "06a6decafac1344e627a4492e891dfdc",
      "lines": {
        "28": "",
        "29": "public abstract class SignatureInfo extends SignatureIterator {",
        "54": "",
        "55": "  public SignatureInfo(Symbol signature) {"
      },
      "id": 125203565,
      "filename": "SignatureInfo.java"
    },
    {
      "repo": "https://bitbucket.org/hamishm/haiku-jdk-hotspot",
      "language": "Java",
      "linescount": 64,
      "location": "/agent/src/share/classes/sun/jvm/hotspot/runtime",
      "name": "haiku-jdk-hotspot",
      "url": "https://searchcode.com/codesearch/view/127217270/",
      "md5hash": "06a6decafac1344e627a4492e891dfdc",
      "lines": {
        "28": "",
        "29": "public abstract class SignatureInfo extends SignatureIterator {",
        "54": "",
        "55": "  public SignatureInfo(Symbol signature) {"
      },
      "id": 127217270,
      "filename": "SignatureInfo.java"
    },
    {
      "repo": "https://bitbucket.org/jaroslav/hotspot",
      "language": "Java",
      "linescount": 64,
      "location": "/agent/src/share/classes/sun/jvm/hotspot/runtime",
      "name": "hotspot",
      "url": "https://searchcode.com/codesearch/view/133433130/",
      "md5hash": "06a6decafac1344e627a4492e891dfdc",
      "lines": {
        "28": "",
        "29": "public abstract class SignatureInfo extends SignatureIterator {",
        "54": "",
        "55": "  public SignatureInfo(Symbol signature) {"
      },
      "id": 133433130,
      "filename": "SignatureInfo.java"
    },
    {
      "repo": "https://bitbucket.org/xiaoqiangnk/hotspot-mips",
      "language": "Java",
      "linescount": 64,
      "location": "/agent/src/share/classes/sun/jvm/hotspot/runtime",
      "name": "hotspot-mips",
      "url": "https://searchcode.com/codesearch/view/118290241/",
      "md5hash": "d484d4b3c6e5c526f440861d7def077d",
      "lines": {
        "28": "",
        "29": "public abstract class SignatureInfo extends SignatureIterator {",
        "54": "",
        "55": "  public SignatureInfo(Symbol signature) {"
      },
      "id": 118290241,
      "filename": "SignatureInfo.java"
    },
    {
      "repo": "https://bitbucket.org/josephg/wave-http-federation",
      "language": "Java",
      "linescount": 778,
      "location": "/test/org/waveprotocol/wave/concurrencycontrol/channel",
      "name": "wave-http-federation",
      "url": "https://searchcode.com/codesearch/view/58134111/",
      "md5hash": "1ddd43537621aaa1abadcd3b86f99e74",
      "lines": {
        "320": "    operationChannel.setListener(listener);",
        "321": "    operationChannel.onConnection(signatureInfo, signatureInfo);",
        "155": "    cc = new ConcurrencyControl(ccLogger, signatureInfo);",
        "314": "  public void testSendToInaccessibleChanneFails() throws ChannelException {",
        "152": "  private void connectChannel(long version, byte[] signature) throws ChannelException {",
        "153": "    final HashedVersion signatureInfo = HashedVersion.of(version, signature);",
        "154": "    deltaChannel = new MockWaveletDeltaChannel();",
        "315": "    final HashedVersion signatureInfo = HashedVersion.unsigned(0);",
        "316": "    deltaChannel = new MockWaveletDeltaChannel();",
        "317": "    cc = new ConcurrencyControl(ccLogger, signatureInfo);",
        "158": "    operationChannel.setListener(listener);",
        "159": "    operationChannel.onConnection(signatureInfo, signatureInfo);"
      },
      "id": 58134111,
      "filename": "OperationChannelImplTest.java"
    },
    {
      "repo": "https://bitbucket.org/killerswan/wave-protocol-kshh",
      "language": "Java",
      "linescount": 211,
      "location": "/src/org/waveprotocol/wave/crypto",
      "name": "wave-protocol-kshh",
      "url": "https://searchcode.com/codesearch/view/54023066/",
      "md5hash": "d504d2ca48c7a0885b45625bf64317e8",
      "lines": {
        "110": "      if (!verifier.verify(signatureInfo.getSignatureBytes().toByteArray())) {",
        "69": "   */",
        "70": "  public void verify(byte[] signedPayload, ProtocolSignature signatureInfo,",
        "73": "    SignerInfo signer = pathStore.get(",
        "74": "        signatureInfo.getSignerId().toByteArray());",
        "77": "      throw new UnknownSignerException(\"could not find information about signer \"",
        "78": "          + Base64.encodeBase64(signatureInfo.getSignerId().toByteArray()));",
        "109": "    try {",
        "85": "      verifier = Signature.getInstance(AlgorithmUtil.getJceName(",
        "86": "          signatureInfo.getSignatureAlgorithm()));",
        "88": "      throw new SignatureException(\"can't verify signatures of type \" +",
        "89": "          signatureInfo.getSignatureAlgorithm().toString(), e);",
        "59": "   * @param signedPayload the payload on which we're verifiying the signature.",
        "60": "   * @param signatureInfo the signature provided with the payload."
      },
      "id": 54023066,
      "filename": "WaveSignatureVerifier.java"
    },
    {
      "repo": "https://bitbucket.org/involvements/google-wave",
      "language": "Java",
      "linescount": 211,
      "location": "/src/org/waveprotocol/wave/crypto",
      "name": "google-wave",
      "url": "https://searchcode.com/codesearch/view/61567653/",
      "md5hash": "691da2daf8d798298ac16fb93ce733e4",
      "lines": {
        "110": "      if (!verifier.verify(signatureInfo.getSignatureBytes().toByteArray())) {",
        "69": "   */",
        "70": "  public void verify(byte[] signedPayload, ProtocolSignature signatureInfo,",
        "73": "    SignerInfo signer = pathStore.getSignerInfo(",
        "74": "        signatureInfo.getSignerId().toByteArray());",
        "77": "      throw new UnknownSignerException(\"could not find information about signer \"",
        "78": "          + Base64.encodeBase64(signatureInfo.getSignerId().toByteArray()));",
        "109": "    try {",
        "85": "      verifier = Signature.getInstance(AlgorithmUtil.getJceName(",
        "86": "          signatureInfo.getSignatureAlgorithm()));",
        "88": "      throw new SignatureException(\"can't verify signatures of type \" +",
        "89": "          signatureInfo.getSignatureAlgorithm().toString(), e);",
        "59": "   * @param signedPayload the payload on which we're verifiying the signature.",
        "60": "   * @param signatureInfo the signature provided with the payload."
      },
      "id": 61567653,
      "filename": "WaveSignatureVerifier.java"
    },
    {
      "repo": "https://github.com/jfgalhao/wave.git",
      "language": "Java",
      "linescount": 214,
      "location": "/crypto/src/main/java/org/waveprotocol/wave/crypto",
      "name": "wave",
      "url": "https://searchcode.com/codesearch/view/69824460/",
      "md5hash": "3dbb77cbe016bfef6208cca22ee9750a",
      "lines": {
        "112": "    try {",
        "113": "      if (!verifier.verify(signatureInfo.getSignatureBytes().toByteArray())) {",
        "72": "   */",
        "73": "  public void verify(byte[] signedPayload, ProtocolSignature signatureInfo,",
        "76": "    SignerInfo signer = pathStore.getSignerInfo(",
        "77": "        signatureInfo.getSignerId().toByteArray());",
        "80": "      throw new UnknownSignerException(\"could not find information about signer \"",
        "81": "          + Base64.encodeBase64(signatureInfo.getSignerId().toByteArray()));",
        "88": "      verifier = Signature.getInstance(AlgorithmUtil.getJceName(",
        "89": "          signatureInfo.getSignatureAlgorithm()));",
        "91": "      throw new SignatureException(\"can't verify signatures of type \" +",
        "92": "          signatureInfo.getSignatureAlgorithm().toString(), e);",
        "62": "   * @param signedPayload the payload on which we're verifiying the signature.",
        "63": "   * @param signatureInfo the signature provided with the payload."
      },
      "id": 69824460,
      "filename": "WaveSignatureVerifier.java"
    },
    {
      "repo": "https://github.com/android/platform_frameworks_base.git",
      "language": "Java",
      "linescount": 1282,
      "location": "/core/java/android/util/apk",
      "name": "platform_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/140977884/",
      "md5hash": "71f08213a082e4ec9dc15e760c732706",
      "lines": {
        "128": "    private static class SignatureInfo {",
        "213": "        try {",
        "164": "     */",
        "197": "     * @param signatureInfo APK Signature Scheme v2 Block and information relevant for verifying it",
        "201": "            FileDescriptor apkFileDescriptor,",
        "202": "            SignatureInfo signatureInfo) throws SecurityException {",
        "143": "",
        "144": "        private SignatureInfo(",
        "241": "                apkFileDescriptor,",
        "242": "                signatureInfo.apkSigningBlockOffset,",
        "243": "                signatureInfo.centralDirOffset,",
        "196": "     *",
        "214": "            signers = getLengthPrefixedSlice(signatureInfo.signatureBlock);",
        "184": "",
        "185": "        return new SignatureInfo(",
        "127": "     */",
        "165": "    private static SignatureInfo findSignature(RandomAccessFile apk)"
      },
      "id": 140977884,
      "filename": "ApkSignatureSchemeV2Verifier.java"
    },
    {
      "repo": "https://bitbucket.org/hamishm/haiku-jdk-jdk",
      "language": "Java",
      "linescount": 1294,
      "location": "/src/share/classes/java/security",
      "name": "haiku-jdk-jdk",
      "url": "https://searchcode.com/codesearch/view/127223516/",
      "md5hash": "172e9eafd2f310ab8e6265b5e98bede4",
      "lines": {
        "258": "",
        "259": "    private final static Map<String,Boolean> signatureInfo;",
        "261": "    static {",
        "262": "        signatureInfo = new ConcurrentHashMap<String,Boolean>();",
        "264": "        // pre-initialize with values for our SignatureSpi implementations",
        "265": "        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);",
        "266": "        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);",
        "267": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);",
        "268": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);",
        "269": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);",
        "270": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);",
        "271": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);",
        "272": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);",
        "273": "        signatureInfo.put(\"com.sun.net.ssl.internal.ssl.RSASignature\", TRUE);",
        "274": "        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", TRUE);"
      },
      "id": 127223516,
      "filename": "Signature.java"
    },
    {
      "repo": "https://bitbucket.org/chegar/jigsaw_jigsaw_jdk",
      "language": "Java",
      "linescount": 1296,
      "location": "/src/share/classes/java/security",
      "name": "jigsaw_jigsaw_jdk",
      "url": "https://searchcode.com/codesearch/view/129543247/",
      "md5hash": "e64cd981b7d7ea8f504bde27b94a39f0",
      "lines": {
        "258": "",
        "259": "    private final static Map<String,Boolean> signatureInfo;",
        "261": "    static {",
        "262": "        signatureInfo = new ConcurrentHashMap<String,Boolean>();",
        "264": "        // pre-initialize with values for our SignatureSpi implementations",
        "265": "        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);",
        "266": "        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);",
        "267": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);",
        "268": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);",
        "269": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);",
        "270": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);",
        "271": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);",
        "272": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);",
        "273": "        signatureInfo.put(\"com.sun.net.ssl.internal.ssl.RSASignature\", TRUE);",
        "274": "        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", TRUE);"
      },
      "id": 129543247,
      "filename": "Signature.java"
    },
    {
      "repo": "https://bitbucket.org/chegar/jigsaw_modulefileparser",
      "language": "Java",
      "linescount": 1296,
      "location": "/src/share/classes/java/security",
      "name": "jigsaw_modulefileparser",
      "url": "https://searchcode.com/codesearch/view/129562984/",
      "md5hash": "e64cd981b7d7ea8f504bde27b94a39f0",
      "lines": {
        "258": "",
        "259": "    private final static Map<String,Boolean> signatureInfo;",
        "261": "    static {",
        "262": "        signatureInfo = new ConcurrentHashMap<String,Boolean>();",
        "264": "        // pre-initialize with values for our SignatureSpi implementations",
        "265": "        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);",
        "266": "        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);",
        "267": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);",
        "268": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);",
        "269": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);",
        "270": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);",
        "271": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);",
        "272": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);",
        "273": "        signatureInfo.put(\"com.sun.net.ssl.internal.ssl.RSASignature\", TRUE);",
        "274": "        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", TRUE);"
      },
      "id": 129562984,
      "filename": "Signature.java"
    },
    {
      "repo": "https://bitbucket.org/sreilly/openjdk7u-jdk",
      "language": "Java",
      "linescount": 1294,
      "location": "/src/share/classes/java/security",
      "name": "openjdk7u-jdk",
      "url": "https://searchcode.com/codesearch/view/130311162/",
      "md5hash": "172e9eafd2f310ab8e6265b5e98bede4",
      "lines": {
        "258": "",
        "259": "    private final static Map<String,Boolean> signatureInfo;",
        "261": "    static {",
        "262": "        signatureInfo = new ConcurrentHashMap<String,Boolean>();",
        "264": "        // pre-initialize with values for our SignatureSpi implementations",
        "265": "        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);",
        "266": "        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);",
        "267": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);",
        "268": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);",
        "269": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);",
        "270": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);",
        "271": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);",
        "272": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);",
        "273": "        signatureInfo.put(\"com.sun.net.ssl.internal.ssl.RSASignature\", TRUE);",
        "274": "        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", TRUE);"
      },
      "id": 130311162,
      "filename": "Signature.java"
    },
    {
      "repo": "https://bitbucket.org/infinitekind/openjdk7u-jdk",
      "language": "Java",
      "linescount": 1294,
      "location": "/src/share/classes/java/security",
      "name": "openjdk7u-jdk",
      "url": "https://searchcode.com/codesearch/view/132207719/",
      "md5hash": "871444ef207482050795742249ea836d",
      "lines": {
        "258": "",
        "259": "    private final static Map<String,Boolean> signatureInfo;",
        "261": "    static {",
        "262": "        signatureInfo = new ConcurrentHashMap<String,Boolean>();",
        "264": "        // pre-initialize with values for our SignatureSpi implementations",
        "265": "        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);",
        "266": "        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);",
        "267": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);",
        "268": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);",
        "269": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);",
        "270": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);",
        "271": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);",
        "272": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);",
        "273": "        signatureInfo.put(\"com.sun.net.ssl.internal.ssl.RSASignature\", TRUE);",
        "274": "        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", TRUE);"
      },
      "id": 132207719,
      "filename": "Signature.java"
    },
    {
      "repo": "https://bitbucket.org/psandoz/lambda-jdk-pipeline-patches",
      "language": "Java",
      "linescount": 1296,
      "location": "/src/share/classes/java/security",
      "name": "lambda-jdk-pipeline-patches",
      "url": "https://searchcode.com/codesearch/view/132813827/",
      "md5hash": "89b8f340d75ea434111044a2b1bfcf0f",
      "lines": {
        "258": "",
        "259": "    private final static Map<String,Boolean> signatureInfo;",
        "261": "    static {",
        "262": "        signatureInfo = new ConcurrentHashMap<String,Boolean>();",
        "264": "        // pre-initialize with values for our SignatureSpi implementations",
        "265": "        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);",
        "266": "        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);",
        "267": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);",
        "268": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);",
        "269": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);",
        "270": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);",
        "271": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);",
        "272": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);",
        "273": "        signatureInfo.put(\"com.sun.net.ssl.internal.ssl.RSASignature\", TRUE);",
        "274": "        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", TRUE);"
      },
      "id": 132813827,
      "filename": "Signature.java"
    },
    {
      "repo": "https://bitbucket.org/psandoz/lambda-jdk",
      "language": "Java",
      "linescount": 1296,
      "location": "/src/share/classes/java/security",
      "name": "lambda-jdk",
      "url": "https://searchcode.com/codesearch/view/132833173/",
      "md5hash": "89b8f340d75ea434111044a2b1bfcf0f",
      "lines": {
        "258": "",
        "259": "    private final static Map<String,Boolean> signatureInfo;",
        "261": "    static {",
        "262": "        signatureInfo = new ConcurrentHashMap<String,Boolean>();",
        "264": "        // pre-initialize with values for our SignatureSpi implementations",
        "265": "        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);",
        "266": "        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);",
        "267": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);",
        "268": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);",
        "269": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);",
        "270": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);",
        "271": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);",
        "272": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);",
        "273": "        signatureInfo.put(\"com.sun.net.ssl.internal.ssl.RSASignature\", TRUE);",
        "274": "        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", TRUE);"
      },
      "id": 132833173,
      "filename": "Signature.java"
    },
    {
      "repo": "https://bitbucket.org/screenconnect/openjdk8-jdk",
      "language": "Java",
      "linescount": 1342,
      "location": "/src/share/classes/java/security",
      "name": "openjdk8-jdk",
      "url": "https://searchcode.com/codesearch/view/136820185/",
      "md5hash": "90f39218c82d7d2606711bb79b568686",
      "lines": {
        "288": "        String className = s.getClassName();",
        "289": "        Boolean result = signatureInfo.get(className);",
        "264": "",
        "265": "    private final static Map<String,Boolean> signatureInfo;",
        "267": "    static {",
        "268": "        signatureInfo = new ConcurrentHashMap<String,Boolean>();",
        "271": "        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);",
        "272": "        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);",
        "273": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);",
        "274": "        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);",
        "275": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);",
        "276": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);",
        "277": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);",
        "278": "        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);",
        "279": "        signatureInfo.put(\"com.sun.net.ssl.internal.ssl.RSASignature\", TRUE);"
      },
      "id": 136820185,
      "filename": "Signature.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 39,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 13,
      "source": "Github",
      "id": 2
    },
    {
      "count": 5,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 4,
      "source": "Google Code",
      "id": 1
    }
  ]
}