{
  "matchterm": "LineCap",
  "previouspage": null,
  "searchterm": "LineCap",
  "query": "LineCap",
  "language_filters": [
    {
      "count": 392,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 392,
  "results": [
    {
      "repo": "https://github.com/msteptoe/FURI_Code.git",
      "language": "Java",
      "linescount": 83,
      "location": "/IJ_Mobile/src/ome/xml/model/enums",
      "name": "FURI_Code",
      "url": "https://searchcode.com/codesearch/view/71585693/",
      "md5hash": "f9ca72280e33b2dc0fadfe629413fd4f",
      "lines": {
        "1": "/*",
        "2": " * ome.xml.model.enums.LineCap",
        "50": "  public static LineCap fromString(String value)",
        "66": "                             value, LineCap.class);",
        "65": "    String s = String.format(\"%s not a supported value of %s\",",
        "49": "",
        "40": "",
        "41": "public enum LineCap implements Enumeration",
        "44": "  ",
        "45": "  private LineCap(String value)"
      },
      "id": 71585693,
      "filename": "LineCap.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 91,
      "location": "/components/ome-xml/src/ome/xml/model/enums",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15643345/",
      "md5hash": "eef8c72a7947a6098c9d63958f33fbc6",
      "lines": {
        "48": "",
        "49": "public enum LineCap implements Enumeration",
        "52": "  ",
        "53": "  private LineCap(String value)",
        "73": "    String s = String.format(\"%s not a supported value of %s\",",
        "57": "",
        "58": "  public static LineCap fromString(String value)",
        "74": "                             value, LineCap.class);"
      },
      "id": 15643345,
      "filename": "LineCap.java"
    },
    {
      "repo": "http://smartgwt.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 47,
      "location": "/main/src/com/smartgwt/client/types",
      "name": "smartgwt",
      "url": "https://searchcode.com/codesearch/view/2797688/",
      "md5hash": "9d21dadbe30339c66f0dcc984e42df66",
      "lines": {
        "38": "",
        "21": " */",
        "22": "public enum LineCap implements ValueEnum {",
        "39": "    LineCap(String value) {"
      },
      "id": 2797688,
      "filename": "LineCap.java"
    },
    {
      "repo": "http://rugl.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 39,
      "location": "/droid/DroidRUGL/src/com/ryanm/droid/rugl/geom/line",
      "name": "rugl",
      "url": "https://searchcode.com/codesearch/view/12309243/",
      "md5hash": "1d0cd4f09ee1439d61a8ac9dce4f11f7",
      "lines": {
        "17": "\t * Compute the vertices and triangle indiecs needed for this",
        "18": "\t * {@link LineCap} decoration",
        "13": " */",
        "14": "public interface LineCap"
      },
      "id": 12309243,
      "filename": "LineCap.java"
    },
    {
      "repo": "http://rugl.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 38,
      "location": "/fun/RUGL/src/com/rugl/geom/line",
      "name": "rugl",
      "url": "https://searchcode.com/codesearch/view/12309368/",
      "md5hash": "7da9e0f7da8794abb6904116256ceb07",
      "lines": {
        "16": "\t * Compute the vertices and triangle indiecs needed for this",
        "17": "\t * {@link LineCap} decoration",
        "12": " */",
        "13": "public interface LineCap"
      },
      "id": 12309368,
      "filename": "LineCap.java"
    },
    {
      "repo": "https://github.com/msteptoe/FURI_Code.git",
      "language": "Java",
      "linescount": 17023,
      "location": "/IJ_Mobile/src/loci/formats/meta",
      "name": "FURI_Code",
      "url": "https://searchcode.com/codesearch/view/71579923/",
      "md5hash": "a382e23d994e0c2bf64674acb4b4590d",
      "lines": {
        "7104": "\t{",
        "2756": "\t// Ignoring Line of parent abstract type",
        "2757": "\t// LineCap accessor from parent Shape",
        "2758": "\tpublic LineCap getEllipseLineCap(int ROIIndex, int shapeIndex)",
        "2759": "\t{",
        "7111": "\t\t\t\tLineCap result = retrieve.getPointLineCap(ROIIndex, shapeIndex);",
        "2765": "\t\t\t\tMetadataRetrieve retrieve = (MetadataRetrieve) o;",
        "2766": "\t\t\t\tLineCap result = retrieve.getEllipseLineCap(ROIIndex, shapeIndex);",
        "5045": "\t// Ignoring Line of parent abstract type",
        "5046": "\t// LineCap accessor from parent Shape",
        "5047": "\tpublic LineCap getLineLineCap(int ROIIndex, int shapeIndex)",
        "5048": "\t{",
        "7110": "\t\t\t\tMetadataRetrieve retrieve = (MetadataRetrieve) o;",
        "7101": "\t// Ignoring Line of parent abstract type",
        "7102": "\t// LineCap accessor from parent Shape",
        "7103": "\tpublic LineCap getPointLineCap(int ROIIndex, int shapeIndex)"
      },
      "id": 71579923,
      "filename": "AggregateMetadata.java"
    },
    {
      "repo": "https://github.com/msteptoe/FURI_Code.git",
      "language": "Java",
      "linescount": 3734,
      "location": "/IJ_Mobile/src/loci/formats/meta",
      "name": "FURI_Code",
      "url": "https://searchcode.com/codesearch/view/71579879/",
      "md5hash": "bffffed72fd6cc76a9d072e890990313",
      "lines": {
        "1984": "\t// LineCap accessor from parent Shape",
        "1985": "\tpublic void setMaskLineCap(LineCap lineCap, int ROIIndex, int shapeIndex)",
        "1986": "\t{",
        "1987": "\t\tstore.setMaskLineCap(lineCap, ROIIndex, shapeIndex);",
        "1739": "\t// Ignoring Line of parent abstract type",
        "1740": "\t// LineCap accessor from parent Shape",
        "1741": "\tpublic void setLineLineCap(LineCap lineCap, int ROIIndex, int shapeIndex)",
        "1742": "\t{",
        "1743": "\t\tstore.setLineLineCap(lineCap, ROIIndex, shapeIndex);",
        "2584": "\t// Ignoring Line of parent abstract type",
        "2585": "\t// LineCap accessor from parent Shape",
        "2586": "\tpublic void setPointLineCap(LineCap lineCap, int ROIIndex, int shapeIndex)",
        "2587": "\t{",
        "2588": "\t\tstore.setPointLineCap(lineCap, ROIIndex, shapeIndex);",
        "1983": "\t// Ignoring Line of parent abstract type"
      },
      "id": 71579879,
      "filename": "FilterMetadata.java"
    },
    {
      "repo": "https://github.com/msteptoe/FURI_Code.git",
      "language": "Java",
      "linescount": 726,
      "location": "/IJ_Mobile/src/ome/xml/model",
      "name": "FURI_Code",
      "url": "https://searchcode.com/codesearch/view/71584227/",
      "md5hash": "65ec5f9d107d6a745a072c052dbbd5a2",
      "lines": {
        "672": "\t\t}",
        "213": "\t\t{",
        "86": "\tprivate LineCap lineCap;",
        "671": "\t\t\tShape_element.setAttribute(\"LineCap\", lineCap.toString());",
        "468": "\t{",
        "85": "\t// Property",
        "214": "\t\t\t// Attribute property which is an enumeration LineCap",
        "215": "\t\t\tsetLineCap(LineCap.fromString(",
        "216": "\t\t\t\t\telement.getAttribute(\"LineCap\")));",
        "217": "\t\t}",
        "667": "\t\t}",
        "668": "\t\tif (lineCap != null)",
        "669": "\t\t{",
        "670": "\t\t\t// Attribute property LineCap",
        "469": "\t\treturn lineCap;"
      },
      "id": 71584227,
      "filename": "Shape.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 2104,
      "location": "/components/scifio/src/loci/formats/meta",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15643961/",
      "md5hash": "a5d2a0c852de4fa4d975012c28f0188a",
      "lines": {
        "448": "\tvoid setEllipseLineCap(LineCap lineCap, int ROIIndex, int shapeIndex);",
        "449": "",
        "1159": "\t// Ignoring Line of parent abstract type",
        "1160": "\t// LineCap accessor from parent Shape",
        "1161": "\tvoid setMaskLineCap(LineCap lineCap, int ROIIndex, int shapeIndex);",
        "1162": "",
        "1601": "",
        "1598": "\t// Ignoring Line of parent abstract type",
        "1462": "\t// Ignoring Line of parent abstract type",
        "1463": "\t// LineCap accessor from parent Shape",
        "1464": "\tvoid setPointLineCap(LineCap lineCap, int ROIIndex, int shapeIndex);",
        "1599": "\t// LineCap accessor from parent Shape",
        "1600": "\tvoid setPolylineLineCap(LineCap lineCap, int ROIIndex, int shapeIndex);",
        "447": "\t// LineCap accessor from parent Shape",
        "1021": "\t// LineCap accessor from parent Shape",
        "1022": "\tvoid setLineLineCap(LineCap lineCap, int ROIIndex, int shapeIndex);",
        "1023": ""
      },
      "id": 15643961,
      "filename": "MetadataStore.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 3815,
      "location": "/components/scifio/src/loci/formats/meta",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15643963/",
      "md5hash": "c700b4c55b07c5fc5271802c118b1c7f",
      "lines": {
        "2304": "            dest.setLabelLineCap(lineCap, i, q);",
        "2305": "          }",
        "2562": "            dest.setMaskLineCap(lineCap, i, q);",
        "2563": "          }",
        "2692": "          }",
        "2561": "            LineCap lineCap = src.getMaskLineCap(i, q);",
        "2690": "            LineCap lineCap = src.getPointLineCap(i, q);",
        "2808": "            dest.setPolygonLineCap(lineCap, i, q);",
        "2691": "            dest.setPointLineCap(lineCap, i, q);",
        "2560": "          try {",
        "2807": "            LineCap lineCap = src.getPolygonLineCap(i, q);",
        "2689": "          try {",
        "2809": "          }",
        "2303": "            LineCap lineCap = src.getLabelLineCap(i, q);",
        "2173": "          try {",
        "2174": "            LineCap lineCap = src.getEllipseLineCap(i, q);",
        "2175": "            dest.setEllipseLineCap(lineCap, i, q);"
      },
      "id": 15643963,
      "filename": "MetadataConverter.java"
    },
    {
      "repo": "https://bitbucket.org/dyp/geotools.git",
      "language": "Java",
      "linescount": 592,
      "location": "/modules/library/main/src/main/java/org/geotools/styling",
      "name": "geotools",
      "url": "https://searchcode.com/codesearch/view/47139076/",
      "md5hash": "18ccbd52c6e612951ca7329c4988f306",
      "lines": {
        "384": "        out.append(\"\\tLineCap \" + this.lineCap + \"\\n\");",
        "266": "     */",
        "267": "    public Expression getLineCap() {",
        "268": "        if( lineCap == null ){",
        "269": "            // ConstantExpression.constant(\"miter\")",
        "270": "            return Stroke.DEFAULT.getLineCap();",
        "271": "        }",
        "272": "        return lineCap;",
        "536": "        if( !Utilities.equals( getLineCap(), other.getLineCap() )){",
        "277": "     *",
        "278": "     * @param lineCap The cap style. This can be one of \"butt\", \"round\" and",
        "535": "",
        "280": "     */",
        "281": "    public void setLineCap(Expression lineCap) {",
        "282": "        if (lineCap == null) {",
        "383": "        out.append(\"\\tOpacity \" + this.opacity + \"\\n\");"
      },
      "id": 47139076,
      "filename": "StrokeImpl.java"
    },
    {
      "repo": "https://github.com/jdeolive/geotools-old.git",
      "language": "Java",
      "linescount": 216,
      "location": "/modules/extension/brewer/src/main/java/org/geotools/styling/builder",
      "name": "geotools-old",
      "url": "https://searchcode.com/codesearch/view/109979684/",
      "md5hash": "bd8510a3273c6e36f478e85c3cc7572e",
      "lines": {
        "209": "        Stroke stroke = sf.createStroke(color.build(), width.build(), opacity.build(), lineJoin",
        "151": "    }",
        "76": "        opacity.reset(stroke.getOpacity());",
        "77": "        lineCap.reset(stroke.getLineCap());",
        "142": "",
        "143": "    public StrokeBuilder<P> lineCap(Expression lineCap) {",
        "144": "        this.lineCap.reset(lineCap);",
        "145": "        unset = false;",
        "210": "                .build(), lineCap.build(), dashArray, dashOffset.build(), graphicFill.build(),",
        "148": "",
        "149": "    public ChildExpressionBuilder<StrokeBuilder<P>> lineCap() {",
        "150": "        return lineCap;",
        "23": "",
        "24": "    ChildExpressionBuilder<StrokeBuilder<P>> lineCap = new ChildExpressionBuilder<StrokeBuilder<P>>(this);",
        "57": "        opacity.reset(Stroke.DEFAULT.getOpacity());",
        "58": "        lineCap.reset(Stroke.DEFAULT.getLineCap());"
      },
      "id": 109979684,
      "filename": "StrokeBuilder.java"
    },
    {
      "repo": "https://bitbucket.org/vikingshooter/code-examples.git",
      "language": "Java",
      "linescount": 1874,
      "location": "/processingTest/src/processing/core",
      "name": "code-examples",
      "url": "https://searchcode.com/codesearch/view/40049077/",
      "md5hash": "cc69864eecab476a555c9a8163889fac",
      "lines": {
        "1024": "      String linecap = properties.getString(\"stroke-linecap\");",
        "1025": "      setStrokeCap(linecap);",
        "1026": "    }",
        "1123": "",
        "1124": "    } else if (linecap.equals(\"round\")) {",
        "1121": "    } else if (linecap.equals(\"butt\")) {",
        "1062": "",
        "1063": "        } else if(tokens[0].equals(\"stroke-linecap\")) {",
        "1120": "",
        "1127": "    } else if (linecap.equals(\"square\")) {",
        "1126": "",
        "1022": "",
        "1023": "    if (properties.hasAttribute(\"stroke-linecap\")) {",
        "1117": "  void setStrokeCap(String linecap) {",
        "1118": "    if (linecap.equals(\"inherit\")) {",
        "1119": "      // do nothing, will inherit automatically"
      },
      "id": 40049077,
      "filename": "PShapeSVG.java"
    },
    {
      "repo": "https://bitbucket.org/dyp/geotools.git",
      "language": "Java",
      "linescount": 216,
      "location": "/modules/extension/brewer/src/main/java/org/geotools/styling/builder",
      "name": "geotools",
      "url": "https://searchcode.com/codesearch/view/47142508/",
      "md5hash": "36d191d6a48393f47096959f0858c48d",
      "lines": {
        "201": "        }",
        "202": "        Stroke stroke = sf.createStroke(color, width, opacity, lineJoin, lineCap, dashArray,",
        "140": "",
        "141": "    public StrokeBuilder lineCap(Expression lineCap) {",
        "142": "        unset = false;",
        "143": "        this.lineCap = lineCap;",
        "80": "        lineCap = stroke.getLineCap();",
        "146": "",
        "147": "    public StrokeBuilder lineCap(String cqlExpression) {",
        "148": "        return lineCap(cqlExpression(cqlExpression));",
        "149": "    }",
        "150": "",
        "151": "    public StrokeBuilder lineCapName(String cap) {",
        "152": "        return lineCap(literal(cap));",
        "79": "        opacity = stroke.getOpacity();"
      },
      "id": 47142508,
      "filename": "StrokeBuilder.java"
    },
    {
      "repo": "http://smartgwt.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 204,
      "location": "/samples/showcase/src/com/smartgwt/sample/showcase/client/drawing",
      "name": "smartgwt",
      "url": "https://searchcode.com/codesearch/view/2797253/",
      "md5hash": "f19d2b90c35464b021f392408efccfd2",
      "lines": {
        "193": "        drawLinePath.setLineWidth(lineWidth);",
        "194": "        drawLinePath.setLineCap(lineCap);",
        "100": "        LinkedHashMap<String, String> arrowheadStyleValues = new LinkedHashMap<String, String>();",
        "5": "import com.smartgwt.client.types.Cursor;",
        "102": "        arrowheadStyleValues.put(LineCap.SQUARE.getValue(),\"Square\");",
        "103": "        arrowheadStyleValues.put(LineCap.BUTT.getValue(),\"Butt\");",
        "104": "        ",
        "150": "        ",
        "151": "        LineCap lineCap = null;",
        "152": "        ",
        "6": "import com.smartgwt.client.types.LineCap;",
        "159": "        }",
        "157": "        } else if(LineCap.SQUARE.getValue().equals(arrowheadStyle)){",
        "158": "            lineCap = LineCap.SQUARE;",
        "101": "        arrowheadStyleValues.put(LineCap.ROUND.getValue(),\"Round\");"
      },
      "id": 2797253,
      "filename": "LinesAndArrowheadsSample.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 2303,
      "location": "/components/scifio/src/loci/formats/meta",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15643959/",
      "md5hash": "3a9579aa11bdbbe065facd7acc7a6b3a",
      "lines": {
        "1665": "\t// Ignoring Line of parent abstract type",
        "1666": "\t// LineCap accessor from parent Shape",
        "1667": "\tLineCap getPointLineCap(int ROIIndex, int shapeIndex);",
        "1668": "",
        "1804": "",
        "1803": "\tLineCap getPolylineLineCap(int ROIIndex, int shapeIndex);",
        "649": "\t// Ignoring Line of parent abstract type",
        "650": "\t// LineCap accessor from parent Shape",
        "651": "\tLineCap getEllipseLineCap(int ROIIndex, int shapeIndex);",
        "652": "",
        "1037": "",
        "1036": "\tLineCap getLabelLineCap(int ROIIndex, int shapeIndex);",
        "1035": "\t// LineCap accessor from parent Shape",
        "1963": "\t// Ignoring Line of parent abstract type",
        "1964": "\t// LineCap accessor from parent Shape",
        "1802": "\t// LineCap accessor from parent Shape"
      },
      "id": 15643959,
      "filename": "MetadataRetrieve.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 734,
      "location": "/components/ome-xml/src/ome/xml/model",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15643288/",
      "md5hash": "3e71c2222a99e523f00f28ae65478d52",
      "lines": {
        "224": "\t\t\t\t\telement.getAttribute(\"LineCap\")));",
        "225": "\t\t}",
        "675": "\t\t}",
        "676": "\t\tif (lineCap != null)",
        "677": "\t\t{",
        "678": "\t\t\t// Attribute property LineCap",
        "679": "\t\t\tShape_element.setAttribute(\"LineCap\", lineCap.toString());",
        "680": "\t\t}",
        "221": "\t\t{",
        "474": "\t// Property",
        "475": "\tpublic LineCap getLineCap()",
        "476": "\t{",
        "477": "\t\treturn lineCap;",
        "222": "\t\t\t// Attribute property which is an enumeration LineCap",
        "223": "\t\t\tsetLineCap(LineCap.fromString("
      },
      "id": 15643288,
      "filename": "Shape.java"
    },
    {
      "repo": "https://bitbucket.org/dyp/geotools.git",
      "language": "Java",
      "linescount": 216,
      "location": "/modules/extension/xsd/xsd-sld/src/main/java/org/geotools/sld/bindings",
      "name": "geotools",
      "url": "https://searchcode.com/codesearch/view/47140703/",
      "md5hash": "a38b25380ae39a60eacafe982542ba92",
      "lines": {
        "161": "        //&quot;stroke-linejoin&quot; ",
        "162": "        //&quot;stroke-linecap&quot;,",
        "131": "        //&quot;stroke-linejoin&quot; ",
        "132": "        //&quot;stroke-linecap&quot;,",
        "165": "        Expression lineJoin = null;",
        "166": "        Expression lineCap = null;",
        "141": "        //&quot;stroke-linejoin&quot; ",
        "142": "        //&quot;stroke-linecap&quot;,",
        "48": " *              &quot;stroke-opacity&quot;, &quot;stroke-width&quot;,",
        "49": " *              &quot;stroke-linejoin&quot;, &quot;stroke-linecap&quot;,",
        "211": "",
        "212": "        return styleFactory.createStroke(color, width, opacity, lineJoin, lineCap, dash,",
        "184": "                lineJoin = exp;",
        "185": "            } else if (\"stroke-linecap\".equals(css.getName())) {",
        "186": "                lineCap = exp;"
      },
      "id": 47140703,
      "filename": "SLDStrokeBinding.java"
    },
    {
      "repo": "http://smartgwt.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1160,
      "location": "/main/src/com/smartgwt/client/widgets/drawing",
      "name": "smartgwt",
      "url": "https://searchcode.com/codesearch/view/10188390/",
      "md5hash": "41c3f8e251c07921ced0e45eac57c09c",
      "lines": {
        "288": "     * <br><br>If this method is called after the component has been drawn/initialized:",
        "289": "     * Update lineCap for this drawItem.",
        "290": "     *",
        "291": "     * @param lineCap new lineCap to use. Default value is \"round\"",
        "292": "     */",
        "293": "    public void setLineCap(LineCap lineCap) {",
        "294": "        setAttribute(\"lineCap\", lineCap == null ? null : lineCap.getValue(), true);",
        "295": "    }",
        "297": "    /**",
        "298": "     * Style of drawing the endpoints of a line. <P> Note that for dashed and dotted lines, the lineCap style affects each dash",
        "301": "     *",
        "302": "     * @return LineCap",
        "303": "     */",
        "304": "    public LineCap getLineCap()  {",
        "305": "        return EnumUtil.getEnum(LineCap.values(), getAttribute(\"lineCap\"));"
      },
      "id": 10188390,
      "filename": "DrawItem.java"
    },
    {
      "repo": "https://github.com/skovatch/org.eclipse.swt.git",
      "language": "Java",
      "linescount": 3926,
      "location": "/Eclipse SWT/cocoa/org/eclipse/swt/graphics",
      "name": "org.eclipse.swt",
      "url": "https://searchcode.com/codesearch/view/109823086/",
      "md5hash": "d1aa46e8c68d8e7e81665978109778c2",
      "lines": {
        "2627": "\t}",
        "2628": "\treturn new LineAttributes(data.lineWidth, data.lineCap, data.lineJoin, data.lineStyle, dashes, data.lineDashesOffset, data.lineMiterLimit);",
        "2902": "\t\t\tcase SWT.CAP_FLAT: capStyle = OS.kCGLineCapButt; break;",
        "3528": "\tdata.lineStyle = lineStyle;",
        "3529": "\tdata.lineCap = cap;",
        "2899": "\t\tint capStyle = 0;",
        "2900": "\t\tswitch (data.lineCap) {",
        "2645": "\tif (handle == null) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);",
        "2646": "\treturn data.lineCap;",
        "2903": "\t\t\tcase SWT.CAP_SQUARE: capStyle = OS.kCGLineCapSquare; break;",
        "2904": "\t\t}",
        "2905": "\t\tOS.CGContextSetLineCap(cgContext, capStyle);",
        "3482": "\tint cap = attributes.cap;",
        "3483": "\tif (cap != data.lineCap) {",
        "2901": "\t\t\tcase SWT.CAP_ROUND: capStyle = OS.kCGLineCapRound; break;"
      },
      "id": 109823086,
      "filename": "GC.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 214,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 129,
      "source": "Github",
      "id": 2
    },
    {
      "count": 48,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 1,
      "source": "Sourceforge",
      "id": 4
    }
  ]
}