{
  "matchterm": "Areas",
  "previouspage": null,
  "searchterm": "Areas",
  "query": "Areas",
  "language_filters": [
    {
      "count": 5205,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 5205,
  "results": [
    {
      "repo": "http://zkspreadsheet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 34,
      "location": "/zss/src/org/zkoss/zss/model",
      "name": "zkspreadsheet",
      "url": "https://searchcode.com/codesearch/view/3970675/",
      "md5hash": "7da951956360cd7c29f7dc83482098c8",
      "lines": {
        "1": "/* Areas.java",
        "2": "",
        "20": " */",
        "21": "public interface Areas extends Iterable<Range> {"
      },
      "id": 3970675,
      "filename": "Areas.java"
    },
    {
      "repo": "https://github.com/jcrabtree/JPOWER.git",
      "language": "Java",
      "linescount": 119,
      "location": "/src/main/java/edu/cornell/pserc/jpower/jpc",
      "name": "JPOWER",
      "url": "https://searchcode.com/codesearch/view/75158904/",
      "md5hash": "d82adb4fb9e4b6fdaac2bab68aedbf3d",
      "lines": {
        "64": "\t\tAreas other = new Areas();",
        "65": "",
        "76": "\t */",
        "43": "\t *",
        "44": "\t * @return the number of areas.",
        "77": "\tpublic void update(Areas other, int[] indexes) {",
        "51": "\t *",
        "52": "\t * @return a full copy of the areas data.",
        "53": "\t */",
        "54": "\tpublic Areas copy() {",
        "62": "\t */",
        "63": "\tpublic Areas copy(int[] indexes) {",
        "60": "\t * @param indexes",
        "61": "\t * @return a copy of the areas data.",
        "30": " */",
        "31": "public class Areas {"
      },
      "id": 75158904,
      "filename": "Areas.java"
    },
    {
      "repo": "https://bitbucket.org/coocoon/antidote",
      "language": "Java",
      "linescount": 230,
      "location": "/bin/jdk/ibm/java6-sr9fp1-2011-02-08/demo/plugin/jfc/Java2D/src/java2d/demos/Clipping",
      "name": "antidote",
      "url": "https://searchcode.com/codesearch/view/120149105/",
      "md5hash": "f566a5948ceec0a053169f6259e39475",
      "lines": {
        "161": "    public static void main(String argv[]) {",
        "66": "/**",
        "67": " * The Areas class demonstrates the CAG (Constructive Area Geometry) ",
        "228": "    } // End DemoControls",
        "69": " */",
        "70": "public class Areas extends ControlsSurface {",
        "168": "",
        "169": "        Areas demo;",
        "74": "",
        "75": "    public Areas() {",
        "12": "/*",
        "162": "        createDemoFrame(new Areas());",
        "13": " * @(#)Areas.java\t1.38 10/03/23",
        "173": "        public DemoControls(Areas demo) {",
        "172": "",
        "229": "} // End Areas"
      },
      "id": 120149105,
      "filename": "Areas.java"
    },
    {
      "repo": "https://github.com/lucamarrocco/riskman.git",
      "language": "Java",
      "linescount": 44,
      "location": "/src/main/java/riskman/location",
      "name": "riskman",
      "url": "https://searchcode.com/codesearch/view/107016624/",
      "md5hash": "8b46a8f123feb33eb91099ff00c8adde",
      "lines": {
        "32": "\t\treturn areas.contains(Area.from(anAreaName));",
        "37": "\t\tStringBuffer result = new StringBuffer();",
        "6": "",
        "7": "public class Areas implements Iterable<Area> {",
        "8": "",
        "9": "\tprivate Set<Area> areas = new HashSet<Area>();",
        "10": "",
        "11": "\tpublic static Areas all(){",
        "38": "\t\tfor (Area area : areas) {",
        "19": "\tpublic void add(Area area) {",
        "20": "\t\tareas.add(area);",
        "23": "\tpublic int size() {",
        "24": "\t\treturn areas.size();",
        "27": "\tpublic Iterator<Area> iterator() {",
        "28": "\t\treturn areas.iterator();",
        "31": "\tpublic boolean contains(String anAreaName) {"
      },
      "id": 107016624,
      "filename": "Areas.java"
    },
    {
      "repo": "https://github.com/carrot-garden/carrot-vision.git",
      "language": "Java",
      "linescount": 219,
      "location": "/carrot-stirpes/src/test/java/java2d/demos/Clipping",
      "name": "carrot-vision",
      "url": "https://searchcode.com/codesearch/view/114337594/",
      "md5hash": "baf9a518f04d01318bc6e73c5cad8ff8",
      "lines": {
        "64": "    public Areas() {",
        "161": "",
        "162": "        public DemoControls(Areas demo) {",
        "151": "        createDemoFrame(new Areas());",
        "218": "} // End Areas",
        "150": "    public static void main(String argv[]) {",
        "55": "/**",
        "56": " * The Areas class demonstrates the CAG (Constructive Area Geometry) ",
        "217": "    } // End DemoControls",
        "58": " */",
        "59": "public class Areas extends ControlsSurface {",
        "157": "",
        "158": "        Areas demo;",
        "63": ""
      },
      "id": 114337594,
      "filename": "Areas.java"
    },
    {
      "repo": "http://digital-delegation.googlecode.com/svn/proj/dd/trunk/",
      "language": "Java",
      "linescount": 196,
      "location": "/dd-desktop/src/main/java/ao/dd/desktop/model/area",
      "name": "digital-delegation",
      "url": "https://searchcode.com/codesearch/view/12733640/",
      "md5hash": "691168e0c71f89d45936ed0fc706fae8",
      "lines": {
        "192": "        return Areas.newInstance(",
        "162": "        {",
        "163": "            return Areas.empty();",
        "70": "    //-------------------------------------------------------------------------",
        "71": "//    public static Area fromAreas(Area... components)",
        "72": "//    {",
        "73": "//        return fromAreas(Arrays.asList( components ));",
        "75": "",
        "76": "//    public static Area fromAreas(Iterable<Area> components)",
        "77": "//    {",
        "17": " */",
        "18": "public class Areas",
        "23": "    //-------------------------------------------------------------------------",
        "24": "    private Areas() {}",
        "191": ""
      },
      "id": 12733640,
      "filename": "Areas.java"
    },
    {
      "repo": "https://github.com/shineit/dog.git",
      "language": "Java",
      "linescount": 28,
      "location": "/drivers/zwave/it.polito.elite.dog.drivers.zwave.network/src/it/polito/elite/dog/drivers/zwave/model/zway/json",
      "name": "dog",
      "url": "https://searchcode.com/codesearch/view/100815936/",
      "md5hash": "992cfe1f19478280fb484cb06ab524b5",
      "lines": {
        "24": "{",
        "25": "\t@JsonProperty(\"data\") AreasData areasData;",
        "22": "",
        "23": "public class Areas "
      },
      "id": 100815936,
      "filename": "Areas.java"
    },
    {
      "repo": "https://github.com/poidasmith/xlloop.git",
      "language": "Java",
      "linescount": 20,
      "location": "/org.boris.expr/java/src/org/boris/expr/function/excel",
      "name": "xlloop",
      "url": "https://searchcode.com/codesearch/view/105399149/",
      "md5hash": "4c64c44d63d9598f3f11fe5e97b98697",
      "lines": {
        "8": "",
        "9": "public class AREAS extends AbstractFunction"
      },
      "id": 105399149,
      "filename": "AREAS.java"
    },
    {
      "repo": "https://bitbucket.org/coocoon/antidote",
      "language": "Java",
      "linescount": 512,
      "location": "/bin/jdk/ibm/java6-sr9fp1-2011-02-08/demo/plugin/applets/ImageMap",
      "name": "antidote",
      "url": "https://searchcode.com/codesearch/view/120149249/",
      "md5hash": "935b5338c68833c46569e1c4eeaaa8b1",
      "lines": {
        "69": " * An extensible ImageMap applet class.",
        "70": " * The active areas on the image are controlled by ImageArea classes",
        "284": "\t    boolean animating = false;",
        "304": "\tnotify();",
        "305": "\tfor (int i = 0; i < areas.length; i++) {",
        "306": "\t    areas[i].exit();",
        "307": "\t}",
        "278": "\ttracker.checkAll(true);",
        "279": "\tfor (int i = areas.length; --i >= 0; ) {",
        "280": "\t    areas[i].getMedia();",
        "281": "\t}",
        "187": "     *",
        "188": "     * Initialize the ImageAreas.",
        "285": "\t    for (int i = areas.length; --i >= 0; ) {",
        "286": "\t\tanimating = areas[i].animate() || animating;",
        "287": "\t    }"
      },
      "id": 120149249,
      "filename": "ImageMap.java"
    },
    {
      "repo": "https://gitlab.com/N3X15/xWarp.git",
      "language": "Java",
      "linescount": 77,
      "location": "/src/main/java/de/xzise/xwarp/wrappers/permission",
      "name": "xWarp",
      "url": "https://searchcode.com/codesearch/view/114842858/",
      "md5hash": "ee89c3435722598ff62fe1f5253094d8",
      "lines": {
        "32": "    ADMIN_RENAME(\"admin.rename\", false, \"Rename all warp protection areas\"),",
        "33": "    ADMIN_EDITORS_ADD(\"admin.editors.add\", false, \"Add editors to all warp protection areas\"),",
        "34": "    ADMIN_EDITORS_REMOVE(\"admin.editors.remove\", false, \"Remove editors from all warp protection areas\"),",
        "35": "    ADMIN_CHANGE_OWNER(\"admin.give.owner\", false, \"Change owner of all warp protection areas\"),",
        "9": "    // Create wpas",
        "10": "    CREATE(\"create.private\", true, \"Create warp protection areas\"),",
        "12": "    // Edit own warps",
        "13": "    EDIT_DELETE(\"edit.delete\", true, \"Delete own warp protection areas\"),",
        "14": "    EDIT_INVITE(\"edit.invite.add\", true, \"Invite to own warp protection areas\"),",
        "15": "    EDIT_UNINVITE(\"edit.invite.delete\", true, \"Uninvite from own warp protection areas\"),",
        "16": "    EDIT_RENAME(\"edit.rename\", true, \"Rename own warp protection areas\"),",
        "17": "    EDIT_EDITORS_ADD(\"edit.editors.add\", true, \"Add an editor to own warp protection areas\"),",
        "18": "    EDIT_EDITORS_REMOVE(\"edit.editors.remove\", true, \"Removes an editor from own warp protection areas\"),",
        "19": "    EDIT_CHANGE_OWNER(\"edit.owner\", true, \"Change owner of own warp protection areas\"),",
        "31": "    ADMIN_UNINVITE(\"admin.uninvite\", false, \"Uninvite to all warp protection areas\"),"
      },
      "id": 114842858,
      "filename": "WPAPermissions.java"
    },
    {
      "repo": "https://github.com/jcrabtree/JPOWER.git",
      "language": "Java",
      "linescount": 598,
      "location": "/src/main/java/edu/cornell/pserc/jpower",
      "name": "JPOWER",
      "url": "https://searchcode.com/codesearch/view/75158672/",
      "md5hash": "0ca0969d9534a8b15128ab92f264af7f",
      "lines": {
        "160": "\t\t\tif (jpc.areas != null)",
        "161": "\t\t\t\tif (jpc.areas.size() == 0) {",
        "162": "\t\t\t\t\tjpc.areas = null;\t\t\t\t\t\t// if areas field is empty delete it (so it gets ignored)",
        "67": " * Examples:",
        "68": " *     [i2e, bus, gen, branch, areas] = ext2int(bus, gen, branch, areas);",
        "37": "",
        "38": "import edu.cornell.pserc.jpower.jpc.Areas;",
        "74": " * buses, off-line generators and branches are removed along with any",
        "75": " * generators, branches or areas connected to isolated buses. Then the",
        "164": "\t\t\t\t\to.external.areas = jpc.areas.copy();\t// otherwise save it",
        "163": "\t\t\t\t} else {",
        "56": " *",
        "57": " * 1.  [I2E, BUS, GEN, BRANCH, AREAS] = EXT2INT(BUS, GEN, BRANCH, AREAS)",
        "159": "\t\t\to.external.gen    = jpc.gen.copy();",
        "62": " * numbers which start at 1. Changes are made to BUS, GEN, BRANCH and",
        "63": " * optionally AREAS matrices, which are returned along with a vector of"
      },
      "id": 75158672,
      "filename": "Djp_ext2int.java"
    },
    {
      "repo": "https://github.com/bootswithdefer/CuboidPlugin.git",
      "language": "Java",
      "linescount": 1780,
      "location": "/src",
      "name": "CuboidPlugin",
      "url": "https://searchcode.com/codesearch/view/112421847/",
      "md5hash": "8a7d745ad066ea6b8dd95a652c7eefe8",
      "lines": {
        "161": "                writer.write(\"allowInventories=true\\r\\n\");",
        "162": "                writer.write(\"#Height and depth added to cuboid areas\\r\\n\");",
        "186": "\t\t\tCuboidAreas.newestHavePriority = properties.getBoolean(\"newestHavePriority\", true);",
        "185": "\t\t\tprotectionWarn = properties.getBoolean(\"protectionWarning\", false);",
        "300": "\tprivate void printCuboidHelp(Player player){",
        "301": "\t\tplayer.sendMessage(\"/cmod list - prints a list of cuboid areas\");",
        "148": "                writer.write(\"allowSanctuaries=true\\r\\n\");",
        "149": "                writer.write(\"# How much are the player healed by tick in the healing areas ?\\r\\n\");",
        "183": "\t\t\t// Protection properties",
        "184": "\t\t\tCuboidAreas.addedHeight = properties.getInt(\"minProtectedHeight\", 0);",
        "153": "                writer.write(\"healDelay=1\\r\\n\");",
        "154": "                writer.write(\"#Do you want to allow areas to be restricted, have welcome & farwell messages and separated \" +",
        "156": "                writer.write(\"onMoveFeatures=true\\r\\n\");",
        "157": "                writer.write(\"#Do you want players of a zone to be able to backup/restore areas they own ? (beware :\" +",
        "62": "\t\tcheckFolder();",
        "63": "\t\tCuboidAreas.loadCuboidAreas();"
      },
      "id": 112421847,
      "filename": "CuboidPlugin.java"
    },
    {
      "repo": "https://github.com/rjohanss/gmp.graphiti.git",
      "language": "Java",
      "linescount": 532,
      "location": "/plugins/org.eclipse.graphiti/src/org/eclipse/graphiti/util",
      "name": "gmp.graphiti",
      "url": "https://searchcode.com/codesearch/view/72300434/",
      "md5hash": "db388e4f280061c598e668d9a7683a0f",
      "lines": {
        "32": " * Predefined gradient color-areas to be used in GFFigureUtil with method",
        "64": "public class PredefinedColoredAreas implements IPredefinedRenderingStyle {",
        "63": " */",
        "47": " * A Gradient definition for a shape can be set as a rendering style with",
        "48": " * {@link IGaService#setRenderingStyle(AbstractStyle, AdaptedGradientColoredAreas)}",
        "49": " * . The {@link AdaptedGradientColoredAreas} gradient definitions are retrieved",
        "50": " * by getter methods defined here, like {@link #getBlueWhiteGlossAdaptions()}.",
        "52": " * Clients may create their own gradient definition by overriding",
        "21": "import org.eclipse.graphiti.mm.algorithms.styles.AbstractStyle;",
        "22": "import org.eclipse.graphiti.mm.algorithms.styles.AdaptedGradientColoredAreas;",
        "23": "import org.eclipse.graphiti.mm.algorithms.styles.GradientColoredArea;",
        "24": "import org.eclipse.graphiti.mm.algorithms.styles.GradientColoredAreas;",
        "59": " * ",
        "60": " * @see IGaService#setRenderingStyle(AbstractStyle, AdaptedGradientColoredAreas)",
        "53": " * {@link PredefinedColoredAreas} for gradient definitions and",
        "31": "/**"
      },
      "id": 72300434,
      "filename": "PredefinedColoredAreas.java"
    },
    {
      "repo": "https://github.com/jcrabtree/JPOWER.git",
      "language": "Java",
      "linescount": 170,
      "location": "/src/test/java/edu/cornell/pserc/jpower/test",
      "name": "JPOWER",
      "url": "https://searchcode.com/codesearch/view/75158437/",
      "md5hash": "8a254209d62acb29f9043600cc615912",
      "lines": {
        "149": "//\t\tt_is(jpc.areas, jpci.areas, 12, t + \"areas\");",
        "70": "\t\tDjp_t_is.t_is(jpc.gencost, jpce.gencost, 12, t + \"gencost\");",
        "71": "\t\tDjp_t_is.t_is(jpc.areas, jpce.areas, 12, t + \"areas\");",
        "94": "//\t\tt = \"jpc = ext2int(jpc) - no areas/A : \";",
        "158": "//\t\tt_is(jpc.areas, jpce.areas, 12, t + \"areas\");",
        "93": "",
        "157": "//\t\tt_is(jpc.gencost, jpce.gencost, 12, t + \"gencost\");",
        "81": "\t\tjpce.gencost = null;",
        "82": "\t\tjpce.areas = null;",
        "52": "\t\tDjp_t_is.t_is(jpc.gencost, jpci.gencost, 12, t + \"gencost\");",
        "53": "\t\tDjp_t_is.t_is(jpc.areas, jpci.areas, 12, t + \"areas\");",
        "86": "\t\tjpci.areas = null;",
        "148": "//\t\tt_is(jpc.gencost, jpci.gencost, 12, t + \"gencost\");",
        "61": "\t\tDjp_t_is.t_is(jpc.gencost, jpci.gencost, 12, t + \"gencost\");",
        "62": "\t\tDjp_t_is.t_is(jpc.areas, jpci.areas, 12, t + \"areas\");",
        "85": "\t\tjpci.gencost = null;"
      },
      "id": 75158437,
      "filename": "Djp_t_ext2int2ext.java"
    },
    {
      "repo": "https://github.com/jcrabtree/JPOWER.git",
      "language": "Java",
      "linescount": 456,
      "location": "/src/main/java/edu/cornell/pserc/jpower",
      "name": "JPOWER",
      "url": "https://searchcode.com/codesearch/view/75158700/",
      "md5hash": "a0a92d4903425f73f42bcc11ddf5c413",
      "lines": {
        "448": "\t\tbranch.t_bus.assign( i2e.viewSelection(branch.t_bus.toArray()) );",
        "449": "\t\tif (areas != null)",
        "450": "\t\t\tareas.price_ref_bus.assign( i2e.viewSelection(areas.price_ref_bus.toArray()) );",
        "451": "",
        "452": "\t\treturn new Object[] {bus, gen, branch, areas};",
        "78": "\t\t\t}",
        "79": "\t\t\tif (jpc.areas != null) {",
        "80": "\t\t\t\to.internal.areas = jpc.areas.copy();",
        "81": "\t\t\t\tjpc.areas = o.external.areas.copy();",
        "438": "\t * @param branch",
        "439": "\t * @param areas",
        "442": "\tpublic static Object[] int2ext(IntMatrix1D i2e, Bus bus,",
        "443": "\t\t\tGen gen, Branch branch, Areas areas) {",
        "29": "",
        "30": "import edu.cornell.pserc.jpower.jpc.Areas;"
      },
      "id": 75158700,
      "filename": "Djp_int2ext.java"
    },
    {
      "repo": "https://github.com/Nightmare99/android_frameworks_base.git",
      "language": "Java",
      "linescount": 3820,
      "location": "/core/java/android/hardware",
      "name": "android_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/99072259/",
      "md5hash": "0fae8205bcb3f7f71b5725740a02c65d",
      "lines": {
        "1569": "    /**",
        "1570": "     * <p>The Area class is used for choosing specific metering and focus areas for",
        "1573": "     *",
        "1574": "     * <p>To find out how many simultaneous areas a given camera supports, use",
        "1575": "     * {@link Parameters#getMaxNumMeteringAreas()} and",
        "1576": "     * {@link Parameters#getMaxNumFocusAreas()}. If metering or focusing area",
        "1577": "     * selection is unsupported, these methods will return 0.</p>",
        "1590": "     * metering result.  Metering areas can overlap and the driver",
        "1583": "     * 1000) is always the bottom-right corner of the current field of",
        "1584": "     * view. Setting Areas with bounds outside that range is not allowed. Areas",
        "1301": "     * <p>When the face detection is running, {@link Parameters#setWhiteBalance(String)},",
        "1302": "     * {@link Parameters#setFocusAreas(List)}, and {@link Parameters#setMeteringAreas(List)}",
        "1307": "     * will stop sending face callbacks. The last face callback indicates the",
        "1308": "     * areas used to do autofocus. After focus completes, face detection will",
        "1589": "     * the same weight as a smaller area will have more effect in the"
      },
      "id": 99072259,
      "filename": "Camera.java"
    },
    {
      "repo": "https://github.com/skovatch/org.eclipse.swt.git",
      "language": "Java",
      "linescount": 3950,
      "location": "/Eclipse SWT/common/org/eclipse/swt",
      "name": "org.eclipse.swt",
      "url": "https://searchcode.com/codesearch/view/109823668/",
      "md5hash": "afe11cff50e003826469b877c76e555a",
      "lines": {
        "2752": "\t * System color used to paint border areas (value is 23).",
        "2721": "\t/**",
        "2722": "\t * System color used to paint dark shadow areas (value is 17).",
        "2756": "\t/**",
        "2757": "\t * System color used to paint list foreground areas (value is 24).",
        "2726": "\t/**",
        "2727": "\t * System color used to paint normal shadow areas (value is 18).",
        "2731": "\t/**",
        "2732": "\t * System color used to paint light shadow areas (value is 19).",
        "2736": "\t/**",
        "2737": "\t * System color used to paint highlight shadow areas (value is 20).",
        "2741": "\t/**",
        "2742": "\t * System color used to paint foreground areas (value is 21).",
        "2746": "\t/**",
        "2747": "\t * System color used to paint background areas (value is 22).",
        "2751": "\t/**"
      },
      "id": 109823668,
      "filename": "SWT.java"
    },
    {
      "repo": "https://bitbucket.org/goatchurch/tunnelx",
      "language": "Java",
      "linescount": 1061,
      "location": "/trunk/src",
      "name": "tunnelx",
      "url": "https://searchcode.com/codesearch/view/117542948/",
      "md5hash": "dc41fae24f7ed7f157b594b5d4495ca2",
      "lines": {
        "160": "\t\tvsareas = new TreeSet<OneSArea>();",
        "161": "\t\tsallsubsets = new HashSet<String>();",
        "131": "\t\t}",
        "132": "\t\tif (((scchangetyp == SketchGraphics.SC_UPDATE_AREAS) || (scchangetyp == SketchGraphics.SC_UPDATE_ALL) || (scchangetyp == SketchGraphics.SC_UPDATE_ALL_BUT_SYMBOLS))&& (bforce || !bSAreasUpdated))",
        "133": "\t\t{",
        "134": "\t\t\tMakeAutoAreas();  // once it is on always this will be unnecessary.",
        "135": "\t\t\tassert OnePathNode.CheckAllPathCounts(vnodes, vpaths);",
        "136": "\t\t\t// used to be part of the Update symbols areas, but brought here",
        "267": "\t\t// use new symbol layout engine",
        "268": "\t\tsksya.MakeSSA(vpaths, vsareas);",
        "141": "\t\t\t\tosa.SetSubsetAttrsA(true, sksascurrent);",
        "142": "\t\t\tbSAreasUpdated = true;",
        "272": "\t/////////////////////////////////////////////",
        "273": "\tvoid AddArea(OnePath lop, boolean lbFore, List<OneSArea> vsareastakeout)",
        "159": "\t\tsketchLocOffset = new Vec3(0.0F, 0.0F, 0.0F); // sets it to zero by default"
      },
      "id": 117542948,
      "filename": "OneSketch.java"
    },
    {
      "repo": "https://github.com/plannerstack/OpenTripPlanner.git",
      "language": "Java",
      "linescount": 2828,
      "location": "/src/main/java/org/opentripplanner/graph_builder/impl/osm",
      "name": "OpenTripPlanner",
      "url": "https://searchcode.com/codesearch/view/100722290/",
      "md5hash": "65687f92d3fd643ff0a8618b41c98f81",
      "lines": {
        "640": "            /*",
        "641": "             * The list of underlying areas, used when generating edges out of the visibility graph",
        "290": "",
        "291": "        private List<Area> _walkableAreas = new ArrayList<Area>();",
        "292": "        ",
        "645": "            /**",
        "646": "             * The joined outermost rings of the areas (with inner rings for holes as necessary).",
        "649": "",
        "650": "            public AreaGroup(Collection<Area> areas) {",
        "651": "                this.areas = areas;",
        "652": "",
        "642": "             */",
        "658": "                HashMap<Coordinate, OSMNode> nodeMap = new HashMap<Coordinate, OSMNode>();",
        "643": "            Collection<Area> areas;",
        "659": "                for (Area area : areas) {"
      },
      "id": 100722290,
      "filename": "OpenStreetMapGraphBuilderImpl.java"
    },
    {
      "repo": "https://github.com/burto/mkgmap.git",
      "language": "Java",
      "linescount": 2011,
      "location": "/src/uk/me/parabola/mkgmap/reader/osm",
      "name": "mkgmap",
      "url": "https://searchcode.com/codesearch/view/104190897/",
      "md5hash": "3641e22d96e9bfce7e0169845a3f3378",
      "lines": {
        "961": "\t\t\t// these polygons are just used to cut out holes",
        "962": "\t\t\tinnerAreas.addAll(createAreas(innerPolygon, false));",
        "899": "\t\tArrayList<Area> innerStart = new ArrayList<Area>(",
        "900": "\t\t\t\tareaData.innerAreas);",
        "948": "",
        "949": "\t\t// this list contains all non overlapping and singular areas",
        "950": "\t\t// of the outerPolygon",
        "951": "\t\tQueue<AreaCutData> areasToCut = new LinkedList<AreaCutData>();",
        "952": "\t\tCollection<Area> finishedAreas = new ArrayList<Area>(innerPolygons.size());",
        "953": "\t\t",
        "954": "\t\t// create a list of Area objects from the outerPolygon (clipped to the bounding box)",
        "955": "\t\tList<Area> outerAreas = createAreas(outerPolygon, true);",
        "956": "\t\t",
        "957": "\t\t// create the inner areas",
        "958": "\t\tList<Area> innerAreas = new ArrayList<Area>(innerPolygons.size()+2);",
        "959": "\t\tfor (Way innerPolygon : innerPolygons) {"
      },
      "id": 104190897,
      "filename": "MultiPolygonRelation.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 2797,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 1608,
      "source": "Github",
      "id": 2
    },
    {
      "count": 558,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 179,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 33,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 23,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 6,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 1,
      "source": "Unknown",
      "id": 0
    }
  ]
}