{
  "matchterm": "CellRecord",
  "previouspage": null,
  "searchterm": "CellRecord",
  "query": "CellRecord",
  "language_filters": [
    {
      "count": 7,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 7,
  "results": [
    {
      "repo": "http://smartgwt.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 123,
      "location": "/main/src/com/smartgwt/client/widgets/cube",
      "name": "smartgwt",
      "url": "https://searchcode.com/codesearch/view/2798025/",
      "md5hash": "40dc5a6270f06a56aba793430f8e25af",
      "lines": {
        "66": " */",
        "67": "public class CellRecord extends ListGridRecord {",
        "68": "",
        "69": "    public static CellRecord getOrCreateRef(JavaScriptObject jsObj) {",
        "73": "            obj.setJsObj(jsObj);",
        "74": "            return (CellRecord) obj;",
        "75": "        } else {",
        "76": "            return new CellRecord(jsObj);",
        "79": "",
        "80": "    public CellRecord(){",
        "83": "",
        "84": "    public CellRecord(JavaScriptObject jsObj){",
        "61": "/**",
        "62": " * A CellRecord represents the data for one cell of the body area. <P> Each CellRecord should be an object that minimally"
      },
      "id": 2798025,
      "filename": "CellRecord.java"
    },
    {
      "repo": "http://zkspreadsheet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1319,
      "location": "/zss/src/org/zkoss/zss/model/impl",
      "name": "zkspreadsheet",
      "url": "https://searchcode.com/codesearch/view/3970708/",
      "md5hash": "e52c956c400b399e06a805984e2f85f6",
      "lines": {
        "193": "                row.removeCell( cell );",
        "194": "                CellValueRecordInterface cellRecord = new HSSFCellHelper(cell).getCellValueRecord();",
        "195": "                cellRecord.setRow( rowNum + n );",
        "773": "\t                row.removeCell( cell );",
        "774": "\t                CellValueRecordInterface cellRecord = new HSSFCellHelper(cell).getCellValueRecord();",
        "775": "\t                cellRecord.setRow( rowNum + n );",
        "776": "\t                new HSSFRowHelper(row2Replace).createCellFromRecord( cellRecord );",
        "777": "\t                _helper.getInternalSheet().addValueRecord( rowNum + n, cellRecord );",
        "778": "\t            }",
        "789": "\t                row.removeCell( cell );",
        "790": "\t                CellValueRecordInterface cellRecord = new HSSFCellHelper(cell).getCellValueRecord();",
        "791": "\t                cellRecord.setRow( rowNum + n );",
        "792": "\t                new HSSFRowHelper(row2Replace).createCellFromRecord( cellRecord );",
        "793": "\t                _helper.getInternalSheet().addValueRecord( rowNum + n, cellRecord );",
        "794": "\t            }"
      },
      "id": 3970708,
      "filename": "HSSFSheetImpl.java"
    },
    {
      "repo": "http://smartgwt.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1176,
      "location": "/main/src/com/smartgwt/client/widgets/chart",
      "name": "smartgwt",
      "url": "https://searchcode.com/codesearch/view/2798461/",
      "md5hash": "3a824d93af516a40b7281bc0ea08d575",
      "lines": {
        "99": " *  ",
        "100": " *  \"Inlined facet\" is another method to provide data to the chart. <code>data</code> is a single CellRecord or",
        "101": " *  Array of CellRecords where each record contains multiple data values.  In this case, one facet definition",
        "102": " *  is considered \"inlined\", meaning that the facetValueIds from this facet appear as properties in each",
        "135": " *  CellRecord lvRec = new CellRecord();",
        "140": " *  lvRec.setAttribute(\"winter\", \"59\");",
        "108": " *  // Creating data",
        "109": " *  CellRecord lvRec = new CellRecord();",
        "134": " *  // Creating data",
        "141": " *  CellRecord nyRec = new CellRecord();"
      },
      "id": 2798461,
      "filename": "FacetChart.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 1607,
      "location": "/components/forks/poi/src/loci/poi/hssf/usermodel",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642322/",
      "md5hash": "5084cc24e46752bd3911d5d0a983e0a6",
      "lines": {
        "1128": "                    row.removeCell( cell );",
        "1129": "                    CellValueRecordInterface cellRecord = cell.getCellValueRecord();",
        "1130": "                    cellRecord.setRow( rowNum + n );",
        "1131": "                    row2Replace.createCellFromRecord( cellRecord );",
        "1132": "                    sheet.addValueRecord( rowNum + n, cellRecord );",
        "1133": "                }"
      },
      "id": 15642322,
      "filename": "HSSFSheet.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 489,
      "location": "/components/forks/poi/src/loci/poi/hssf/record/aggregates",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642594/",
      "md5hash": "e2636fd1db0e4f81da83b828da4e76a6",
      "lines": {
        "130": "    public int getRowBlockCount() {",
        "131": "      int size = records.size()/DBCellRecord.BLOCK_SIZE;",
        "132": "      if ((records.size() % DBCellRecord.BLOCK_SIZE) != 0)",
        "133": "          size++;",
        "169": "    public int getEndRowNumberForBlock(int block) {",
        "170": "      int endIndex = ((block + 1)*DBCellRecord.BLOCK_SIZE)-1;",
        "43": "",
        "44": "import loci.poi.hssf.record.DBCellRecord;",
        "142": "    public int getRowCountForBlock(int block) {",
        "143": "      int startIndex = block * DBCellRecord.BLOCK_SIZE;",
        "144": "      int endIndex = startIndex + DBCellRecord.BLOCK_SIZE - 1;",
        "145": "      if (endIndex >= records.size())",
        "184": "    private int serializeRowBlock(final int block, final int offset, byte[] data) {",
        "185": "      final int startIndex = block*DBCellRecord.BLOCK_SIZE;",
        "186": "      final int endIndex = startIndex + DBCellRecord.BLOCK_SIZE;",
        "156": "      //having to move it to the right position.",
        "157": "      int startIndex = block * DBCellRecord.BLOCK_SIZE;"
      },
      "id": 15642594,
      "filename": "RowRecordsAggregate.java"
    },
    {
      "repo": "http://smartgwt.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 2671,
      "location": "/main/src/com/smartgwt/client/widgets/cube",
      "name": "smartgwt",
      "url": "https://searchcode.com/codesearch/view/2798027/",
      "md5hash": "416bcf5821beb7bbe2a62456c969f195",
      "lines": {
        "1417": "     *  For example, in a CubeGrid showing \"Revenue\" by region and product, a cell with a",
        "1080": "     * This causes the headers for any combination of facetValues for which there are no  cellRecords to be suppressed. (Note:",
        "1440": "     *  CellRecord like:",
        "1079": "    /**",
        "88": " * Loading</B> <P> Data can be provided to the Cube via  data as an Array of {@link",
        "89": " * com.smartgwt.client.widgets.cube.CellRecord CellRecords}, each representing the data for one cell. <P> For large",
        "1418": "     *  CellRecord like:",
        "1068": "    /**",
        "1069": "     * This causes the headers for any combination of facetValues for which there are no  cellRecords to be suppressed. (Note:",
        "1439": "     *  For example, in a CubeGrid showing \"Revenue\" by region and product, a cell with a"
      },
      "id": 2798027,
      "filename": "CubeGrid.java"
    },
    {
      "repo": "http://zkspreadsheet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 38,
      "location": "/zss/src/org/zkoss/poi/hssf/usermodel",
      "name": "zkspreadsheet",
      "url": "https://searchcode.com/codesearch/view/3970566/",
      "md5hash": "fbe7c80e0bb05e7ebc0fac3a81393831",
      "lines": {
        "32": "    \treturn _row.createCellFromRecord(cellRecord);",
        "33": "    }",
        "30": "\t}",
        "31": "    public HSSFCell createCellFromRecord(CellValueRecordInterface cellRecord) {"
      },
      "id": 3970566,
      "filename": "HSSFRowHelper.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 5,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 2,
      "source": "Github",
      "id": 2
    }
  ]
}