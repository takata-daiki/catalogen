{
  "matchterm": "HSSFRow",
  "previouspage": null,
  "searchterm": "HSSFRow",
  "query": "HSSFRow",
  "language_filters": [
    {
      "count": 339,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 339,
  "results": [
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 536,
      "location": "/components/forks/poi/src/loci/poi/hssf/usermodel",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642313/",
      "md5hash": "9bdfaebc73779ded20ea18e833663dcc",
      "lines": {
        "64": "",
        "65": "public class HSSFRow",
        "99": "    /**",
        "132": "",
        "133": "    protected HSSFRow(Workbook book, Sheet sheet, RowRecord record)",
        "40": "/*",
        "41": " * HSSFRow.java",
        "522": "    {",
        "523": "        if (!(obj instanceof HSSFRow))",
        "204": "     * create a high level HSSFCell object from an existing low level record.  Should",
        "205": "     * only be called from HSSFSheet or HSSFRow itself.",
        "526": "        }",
        "527": "        HSSFRow loc = (HSSFRow) obj;",
        "100": "     * Creates new HSSFRow from scratch. Only HSSFSheet should do this.",
        "94": "",
        "95": "    protected HSSFRow()"
      },
      "id": 15642313,
      "filename": "HSSFRow.java"
    },
    {
      "repo": "https://bitbucket.org/heissm/tacos.git",
      "language": "Java",
      "linescount": 243,
      "location": "/at.redcross.tacos.web/src/at/redcross/tacos/web/parser",
      "name": "tacos",
      "url": "https://searchcode.com/codesearch/view/40187240/",
      "md5hash": "a9b3e04a8148d56028f13eed5a937282",
      "lines": {
        "163": "            Row row = sheet.getRow(ROW_LOCATION_NAME);",
        "164": "            Cell cell = row.getCell(cellId, HSSFRow.CREATE_NULL_AS_BLANK);",
        "210": "                Row row = sheet.getRow(rowId);",
        "204": "                Row row = sheet.getRow(rowId);",
        "170": "            Row row = sheet.getRow(ROW_ASSIGNMENT_NAME);",
        "171": "            Cell cell = row.getCell(cellId, HSSFRow.CREATE_NULL_AS_BLANK);",
        "12": "import org.apache.commons.io.IOUtils;",
        "13": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "205": "                Cell cell = row.getCell(COLUMN_DAY, HSSFRow.RETURN_NULL_AND_BLANK);",
        "177": "            Row row = sheet.getRow(ROW_SERVICE_NAME);",
        "178": "            Cell cell = row.getCell(cellId, HSSFRow.CREATE_NULL_AS_BLANK);",
        "211": "                Cell cell = row.getCell(cellStartTime, HSSFRow.RETURN_NULL_AND_BLANK);",
        "217": "                Cell cell = row.getCell(cellEndTime, HSSFRow.RETURN_NULL_AND_BLANK);",
        "216": "                Row row = sheet.getRow(rowId);",
        "153": "            Row row = sheet.getRow(ROW_PERSONAL_ID);",
        "154": "            Cell cell = row.getCell(cellId, HSSFRow.RETURN_BLANK_AS_NULL);"
      },
      "id": 40187240,
      "filename": "RosterParser.java"
    },
    {
      "repo": "https://github.com/semantalytics/RightField.git",
      "language": "Java",
      "linescount": 256,
      "location": "/src/main/java/uk/ac/manchester/cs/owl/semspreadsheets/model/hssf/impl",
      "name": "RightField",
      "url": "https://searchcode.com/codesearch/view/72854680/",
      "md5hash": "8006ccadf35cd12a6eac3ddf43745fb4",
      "lines": {
        "64": "    \t\tHSSFRow row = sheet.getRow(rowIndex);",
        "166": "    public Cell addCellAt(int col, int row) {",
        "167": "        HSSFRow hssfRow = sheet.getRow(row);",
        "168": "        if (hssfRow == null) {",
        "169": "            hssfRow = sheet.createRow(row);",
        "170": "        }",
        "171": "        HSSFCell cell = hssfRow.getCell(col);",
        "172": "        if (cell == null) {",
        "173": "            cell = hssfRow.createCell(col);",
        "15": "import org.apache.poi.hssf.usermodel.HSSFDataValidation;",
        "16": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "178": "    public void clearCellAt(int col, int row) {",
        "179": "        HSSFRow theRow = sheet.getRow(row);",
        "152": "    public Cell getCellAt(int col, int row) {",
        "153": "        HSSFRow hssfRow = sheet.getRow(row);",
        "154": "        if (hssfRow == null) {",
        "63": "    \tfor (int rowIndex = firstRow ; rowIndex <= lastRow; rowIndex++) {"
      },
      "id": 72854680,
      "filename": "SheetHSSFImpl.java"
    },
    {
      "repo": "https://github.com/arnolddevos/CIMTool.git",
      "language": "Java",
      "linescount": 295,
      "location": "/CIMUtil/src/au/com/langdale/profiles",
      "name": "CIMTool",
      "url": "https://searchcode.com/codesearch/view/107750321/",
      "md5hash": "f67ea562dc4fad99b5ffc0668975d9f9",
      "lines": {
        "279": "\t",
        "258": "\t",
        "259": "\tprivate static String getString(HSSFRow row, ColNum colnum) throws ParseProblem {",
        "197": "\t\tfor( ;; ) {",
        "198": "\t\t\tHSSFRow row = sheet.getRow(rownum++);",
        "136": "\t\t@Override",
        "137": "\t\tpublic void handleRow(SpreadsheetParser context, HSSFRow row) throws ParseProblem {",
        "266": "\tprivate static String getLocalName(HSSFRow row, ColNum colnum) throws ParseProblem {",
        "11": "import org.apache.poi.hssf.usermodel.HSSFCell;",
        "12": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "270": "",
        "271": "\tpublic static void print(PrintWriter out, HSSFRow row, CellSpec spec) {",
        "265": "\t",
        "280": "\tpublic static void printCell(PrintWriter out, HSSFRow row, ColNum index) {",
        "123": "\t\t@Override",
        "124": "\t\tpublic void handleRow(SpreadsheetParser context, HSSFRow row) throws ParseProblem {"
      },
      "id": 107750321,
      "filename": "SpreadsheetParser.java"
    },
    {
      "repo": "https://bitbucket.org/openicar/juniprint",
      "language": "Java",
      "linescount": 1375,
      "location": "/src/main/java/org/comsoft/juniprint/utils",
      "name": "juniprint",
      "url": "https://searchcode.com/codesearch/view/60212069/",
      "md5hash": "c11a8c0e57714af4cf1eeffb5ef652f0",
      "lines": {
        "928": "\t\t\tHSSFRow row = (HSSFRow)rowIt.next();",
        "1153": "\t\t\tint indexRow = row %  deltaCopyRow;",
        "322": "\t\tfor(int row = aRef.getFirstCell().getRow(); row <= aRef.getLastCell().getRow(); row++){",
        "323": "\t\t\tHSSFRow r = sh.getRow(row);",
        "39": "import org.apache.poi.hssf.usermodel.HSSFRichTextString;",
        "40": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "203": "\t\twhile(rowIt.hasNext()){",
        "204": "\t\t\tHSSFRow row = (HSSFRow)rowIt.next();",
        "1154": "\t\t\tHSSFRow copyRow = buffer.getSrcSheet().getRow(copyRow1+indexRow);",
        "272": "\tpublic static Boolean hasFormulaRow (HSSFSheet sh, int indexRow){",
        "273": "\t\tHSSFRow r = sh.getRow(indexRow);",
        "306": "\t\twhile(it.hasNext()){",
        "307": "\t\t\tHSSFRow r = (HSSFRow)it.next();",
        "927": "\t\twhile(rowIt.hasNext()){",
        "798": "\t\t\trealRow = searchDirection == XlSearchDirection.xlNext ? iRow: realLastRow+(realFirstRow-iRow); ",
        "799": "\t\t\tHSSFRow row = sh.getRow(realRow);"
      },
      "id": 60212069,
      "filename": "ExcelUtils.java"
    },
    {
      "repo": "https://github.com/yyj1203/epda_j.git",
      "language": "Java",
      "linescount": 328,
      "location": "/src/com/kps/epda/util",
      "name": "epda_j",
      "url": "https://searchcode.com/codesearch/view/107347816/",
      "md5hash": "878dc886001228a322cd04b81dd59cb2",
      "lines": {
        "262": "            HSSFRow firstRow = sheet.getRow(firstRowSize);",
        "195": "        for (int rownum = firstRowNum + skip; rownum < lastRowNum + 1; rownum++ ) {",
        "196": "            HSSFRow row = sheet.getRow(rownum);",
        "133": "        List<Map<String, String>> hashMapList = new ArrayList<Map<String, String>>();",
        "134": "        for (Iterator<HSSFRow> rit = (Iterator<HSSFRow>)sheet.rowIterator(); rit.hasNext();) {",
        "135": "            HSSFRow row = rit.next();",
        "136": "            Map<String, String> rowMap = new LinkedHashMap<String, String>();",
        "266": "                // \ud589\uc744 \ud45c\uc2dc\ud558\ub294 \uc624\ube0c\uc81d\ud2b8\uc758 \ucde8\ub4dd",
        "267": "                HSSFRow row = sheet.getRow(rowIdx);",
        "16": "import org.apache.poi.hssf.usermodel.HSSFCell;",
        "17": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "82": "            HSSFSheet sheet = wb.getSheetAt(i);",
        "83": "            for (Iterator<HSSFRow> rit = (Iterator<HSSFRow>)sheet.rowIterator(); rit.hasNext();) {",
        "84": "                HSSFRow row = rit.next();",
        "261": ""
      },
      "id": 107347816,
      "filename": "ExcelProcessor.java"
    },
    {
      "repo": "https://github.com/00Green27/DBAnalyzer.git",
      "language": "Java",
      "linescount": 208,
      "location": "/src/ru/green/report",
      "name": "DBAnalyzer",
      "url": "https://searchcode.com/codesearch/view/111804187/",
      "md5hash": "5cf6ca84c99964520276fc5ec684b04d",
      "lines": {
        "100": "\tpublic void setNumericCell(int rowNumber, int cellNumber, double cellValue) {",
        "101": "\t\tHSSFRow row = createRow(rowNumber);",
        "107": "\tpublic void setFormulaCell(int rowNumber, int cellNumber, String formula) {",
        "108": "\t\tHSSFRow row = createRow(rowNumber);",
        "158": "\t\tHSSFRow row = null;",
        "143": "\tpublic void setMiscCell(int rowNumber, int cellNumber, String cellValue) {",
        "144": "\t\tHSSFRow row = createRow(rowNumber);",
        "82": "\tpublic void setCell(int rowNumber, int cellNumber, String cellValue) {",
        "83": "\t\tHSSFRow row = createRow(rowNumber);",
        "149": "\tpublic void setCaptionCell(int rowNumber, int cellNumber, String cellValue) {",
        "150": "\t\tHSSFRow row = createRow(rowNumber);",
        "159": "\t\tif (sheet.getRow(rowNumber) == null)",
        "157": "\tprivate HSSFRow createRow(int rowNumber) {",
        "126": "\tpublic void setCell(int rowNumber, int cellNumber, int cellValue) {",
        "127": "\t\tHSSFRow row = createRow(rowNumber);"
      },
      "id": 111804187,
      "filename": "Report.java"
    },
    {
      "repo": "https://github.com/semantalytics/RightField.git",
      "language": "Java",
      "linescount": 260,
      "location": "/src/main/java/uk/ac/manchester/cs/owl/semspreadsheets/model/xssf/impl",
      "name": "RightField",
      "url": "https://searchcode.com/codesearch/view/72854574/",
      "md5hash": "89d090836d344e0f32e8aeef1b00d9eb",
      "lines": {
        "160": "        if (cell == null) {",
        "161": "            cell = hssfRow.createCell(col);",
        "140": "    public Cell getCellAt(int col, int row) {",
        "141": "        XSSFRow hssfRow = sheet.getRow(row);",
        "142": "        if (hssfRow == null) {",
        "143": "            return null;",
        "144": "        }",
        "145": "        XSSFCell hssfCell = hssfRow.getCell(col);",
        "154": "    public Cell addCellAt(int col, int row) {",
        "155": "        XSSFRow hssfRow = sheet.getRow(row);",
        "156": "        if (hssfRow == null) {",
        "157": "            hssfRow = sheet.createRow(row);",
        "158": "        }",
        "159": "        XSSFCell cell = hssfRow.getCell(col);"
      },
      "id": 72854574,
      "filename": "SheetXSSFImpl.java"
    },
    {
      "repo": "https://github.com/semantalytics/RightField.git",
      "language": "Java",
      "linescount": 274,
      "location": "/src/main/java/uk/ac/manchester/cs/owl/semspreadsheets/model/hssf/impl",
      "name": "RightField",
      "url": "https://searchcode.com/codesearch/view/72854626/",
      "md5hash": "4a84f463416de04c18fd17d4ba4d20d6",
      "lines": {
        "235": "        HSSFSheet hssfSheet = workbook.getSheet(setCellValue.getSheet().getName());",
        "236": "        HSSFRow hssfRow = hssfSheet.getRow(setCellValue.getRow());",
        "237": "        if(hssfRow == null && setCellValue.getNewValue() != null) {",
        "238": "            hssfRow = hssfSheet.createRow(setCellValue.getRow());",
        "239": "        }",
        "240": "        HSSFCell hssfCell = hssfRow.getCell(setCellValue.getCol());",
        "241": "        if (hssfCell == null && setCellValue.getNewValue() != null) {",
        "242": "            hssfCell = hssfRow.createCell(setCellValue.getCol());",
        "248": "            else {",
        "249": "                hssfRow.removeCell(hssfCell);",
        "26": "import org.apache.poi.hssf.usermodel.HSSFRichTextString;",
        "27": "import org.apache.poi.hssf.usermodel.HSSFRow;"
      },
      "id": 72854626,
      "filename": "WorkbookHSSFImpl.java"
    },
    {
      "repo": "https://bitbucket.org/openicar/juniprint",
      "language": "Java",
      "linescount": 2096,
      "location": "/src/main/java/org/comsoft/juniprint",
      "name": "juniprint",
      "url": "https://searchcode.com/codesearch/view/60212057/",
      "md5hash": "e9487002cf69dbd9246766c01c968b73",
      "lines": {
        "1976": "\t\t\tHSSFRow row  = ExcelUtils.getRow(activeSheet, indexRow);",
        "1958": "\t\t\tfor(int offsetRow = 0; offsetRow < keyPageRowE[i]; offsetRow++){",
        "39": "import org.apache.poi.hssf.usermodel.HSSFRichTextString;",
        "40": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "1959": "\t\t\t\tHSSFRow row  = ExcelUtils.getRow(activeSheet, keyPageRowB[i]+offsetRow);",
        "1553": "\t\t\t   for (rowP2 = row0 + 1; rowP2 <= rowNameDataRangeE; rowP2++){",
        "1554": "\t\t\t    \tHSSFRow hSSFRow = sh.getRow(rowP2);",
        "1555": "\t\t\t    \tif (hSSFRow != null && !hSSFRow.getZeroHeight())",
        "1556": "\t\t\t    \t\tcurrSizePage += hSSFRow.getHeightInPoints()*ExcelUtils.Factotr_MM_Points*scale;",
        "1557": "\t\t\t    \tif (currSizePage >= len || sh.isRowBroken(rowP2)){",
        "278": "\t\t for(Iterator rit = sh.rowIterator(); rit.hasNext();) {",
        "279": "\t\t\t HSSFRow r = (HSSFRow)rit.next();",
        "1975": "\t\tfor(int indexRow = 0; indexRow < modelRowE; indexRow++){",
        "1306": "\t\tfor(int iRow=0; iRow <= modelRowE; iRow++){",
        "1307": "\t\t\tHSSFRow delRow = sh.getRow(iRow);"
      },
      "id": 60212057,
      "filename": "JUniPrint.java"
    },
    {
      "repo": "https://bitbucket.org/taijh999/keyanguanli",
      "language": "Java",
      "linescount": 119,
      "location": "/src/java/wsxk",
      "name": "keyanguanli",
      "url": "https://searchcode.com/codesearch/view/62222545/",
      "md5hash": "2d53818c8ecea4bfc0c6ffaa3963c7ee",
      "lines": {
        "37": "         HSSFSheet hssfsheet = hssfworkbook.getSheetAt(0);//??????",
        "38": "   HSSFRow hssfrow = hssfsheet.getRow(0);//???",
        "8": "import java.util.ArrayList;",
        "9": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "45": "                for (int j = 1; j < hssfsheet.getPhysicalNumberOfRows(); j++) {",
        "46": "                 hssfrow = hssfsheet.getRow(j);",
        "47": "                 //??????????????",
        "48": "                    if (hssfrow == null) {",
        "52": "                    /** *//**?EXCEL??? j ?????????????*/",
        "53": "                    if (hssfrow.getCell((short) 0) == null) {",
        "54": "                     name = \"\";",
        "55": "                    } else if (hssfrow.getCell((short) 0).getCellType() == 0) {",
        "56": "                     name = new Double(hssfrow.getCell((short) 0).getNumericCellValue()).toString();",
        "57": "                    }",
        "59": "                    else {",
        "60": "                     name = hssfrow.getCell((short) 0).getStringCellValue().trim();"
      },
      "id": 62222545,
      "filename": "poireadexcel1.java"
    },
    {
      "repo": "https://bitbucket.org/taijh999/keyanguanli",
      "language": "Java",
      "linescount": 133,
      "location": "/src/java/wsxk",
      "name": "keyanguanli",
      "url": "https://searchcode.com/codesearch/view/62222543/",
      "md5hash": "782cb7ea59f5560008e9ae9aecd4c50c",
      "lines": {
        "66": "                    /** *//**?EXCEL??? j ?????????????*/",
        "67": "                     xydh = hssfrow.getCell(1).getStringCellValue().trim();",
        "72": "                   ",
        "9": "import java.util.Map;",
        "10": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "75": "                        ",
        "91": "                     name = hssfrow.getCell(3).getStringCellValue().trim();",
        "92": "                     sex = hssfrow.getCell(4).getStringCellValue().trim();",
        "50": "         HSSFSheet hssfsheet = hssfworkbook.getSheetAt(0);//??????",
        "51": "   HSSFRow hssfrow = hssfsheet.getRow(0);//???",
        "74": "                        //id = hssfrow.getCell(0).getStringCellValue().trim();",
        "73": "                     id=   new Integer((int)hssfrow.getCell( 0).getNumericCellValue()).toString();",
        "90": "                    ",
        "59": "                for (int j = 20; j < hssfsheet.getPhysicalNumberOfRows(); j++) {",
        "60": "                 hssfrow = hssfsheet.getRow(j);",
        "61": "                 //??????????????",
        "62": "                    if (hssfrow == null) {"
      },
      "id": 62222543,
      "filename": "poireadexcel4teacher3.java"
    },
    {
      "repo": "https://bitbucket.org/taijh999/keyanguanli",
      "language": "Java",
      "linescount": 128,
      "location": "/src/java/wsxk",
      "name": "keyanguanli",
      "url": "https://searchcode.com/codesearch/view/62222544/",
      "md5hash": "c391cc8869d47b56bbbd5f67ab56c0a5",
      "lines": {
        "83": "",
        "68": "                   ",
        "69": "                     id=   hssfrow.getCell(0).getStringCellValue().trim();",
        "9": "import java.util.Map;",
        "10": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "50": "         HSSFSheet hssfsheet = hssfworkbook.getSheetAt(0);//??????",
        "51": "   HSSFRow hssfrow = hssfsheet.getRow(0);//???",
        "84": "                     name = hssfrow.getCell(1).getStringCellValue().trim();",
        "85": "                     xydh = hssfrow.getCell(2).getStringCellValue().trim();",
        "86": "                     xydh=(String)map.get(xydh);",
        "87": "                ",
        "88": "//                     sex = hssfrow.getCell(4).getStringCellValue().trim();",
        "89": "//                     csrq = Util.formatDate(  hssfrow.getCell(5).getDateCellValue());",
        "59": "                for (int j = 1; j < hssfsheet.getPhysicalNumberOfRows(); j++) {",
        "60": "                 hssfrow = hssfsheet.getRow(j);",
        "61": "                 //??????????????",
        "62": "                    if (hssfrow == null) {"
      },
      "id": 62222544,
      "filename": "poireadexcel11.java"
    },
    {
      "repo": "https://bitbucket.org/taijh999/keyanguanli",
      "language": "Java",
      "linescount": 127,
      "location": "/src/java/wsxk",
      "name": "keyanguanli",
      "url": "https://searchcode.com/codesearch/view/62222546/",
      "md5hash": "904539c8bd49345f5621285a5e2f633c",
      "lines": {
        "83": "",
        "68": "                   ",
        "69": "                     id=   new Integer((int)hssfrow.getCell( 0).getNumericCellValue()).toString();",
        "9": "import java.util.Map;",
        "10": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "50": "         HSSFSheet hssfsheet = hssfworkbook.getSheetAt(0);//??????",
        "51": "   HSSFRow hssfrow = hssfsheet.getRow(0);//???",
        "84": "                     xydh = hssfrow.getCell(1).getStringCellValue().trim();",
        "85": "                     xydh=(String)map.get(xydh);",
        "86": "                     name = hssfrow.getCell(3).getStringCellValue().trim();",
        "87": "                     sex = hssfrow.getCell(4).getStringCellValue().trim();",
        "59": "                for (int j = 1; j < hssfsheet.getPhysicalNumberOfRows(); j++) {",
        "60": "                 hssfrow = hssfsheet.getRow(j);",
        "61": "                 //??????????????",
        "62": "                    if (hssfrow == null) {"
      },
      "id": 62222546,
      "filename": "poireadexcel.java"
    },
    {
      "repo": "https://github.com/satishija/Hybrid-Framework.git",
      "language": "Java",
      "linescount": 438,
      "location": "/src/test/java/com/hybrid",
      "name": "Hybrid-Framework",
      "url": "https://searchcode.com/codesearch/view/71798596/",
      "md5hash": "98ccf2518e9afd156b6a3c56fb3d5070",
      "lines": {
        "425": "\t        HSSFRow row = osheet.createRow(myrow);",
        "406": "    \tfor (int myrow = 0; myrow < xTC_rows; myrow++) {",
        "8": "import org.apache.poi.hssf.usermodel.HSSFCell;",
        "9": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "363": "        for (int i = 0; i < xTD_rows; i++) {",
        "364": "\t           HSSFRow row = mySheet.getRow(i);",
        "424": "    \tfor (int myrow = 0; myrow < xTS_rows; myrow++) {",
        "341": "        for (int i = 0; i < xTS_rows; i++) {",
        "342": "\t           HSSFRow row = mySheet.getRow(i);",
        "407": "\t        HSSFRow row = osheet.createRow(myrow);",
        "318": "        for (int i = 0; i < xTC_rows; i++) {",
        "319": "\t           HSSFRow row = mySheet.getRow(i);"
      },
      "id": 71798596,
      "filename": "Hybrid_Framework.java"
    },
    {
      "repo": "https://github.com/satishija/Hybrid-Framework.git",
      "language": "Java",
      "linescount": 433,
      "location": "/src/test/java/com/hybrid",
      "name": "Hybrid-Framework",
      "url": "https://searchcode.com/codesearch/view/71798609/",
      "md5hash": "b9a0a9cf93f4f1526915cc708570f503",
      "lines": {
        "288": "    \tfor (int myrow = 0; myrow < xTCRows; myrow++) {",
        "289": "            HSSFRow row = osheet.createRow(myrow);",
        "226": "        for (int i = 0; i < xTCRows; i++) {",
        "227": "\t           HSSFRow row = mySheet.getRow(i);",
        "7": "import org.apache.poi.hssf.usermodel.HSSFCell;",
        "8": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "205": "        for (int i = 0; i < xTSRows; i++) {",
        "206": "\t           HSSFRow row = mySheet.getRow(i);",
        "306": "    \tfor (int myrow = 0; myrow < xTSRows; myrow++) {",
        "307": "            HSSFRow row = osheet.createRow(myrow);",
        "247": "        for (int i = 0; i < xTDRows; i++) {",
        "248": "\t           HSSFRow row = mySheet.getRow(i);"
      },
      "id": 71798609,
      "filename": "Hybrid_Framework_WebDriver.java"
    },
    {
      "repo": "https://github.com/wangwenan/myproject01.git",
      "language": "Java",
      "linescount": 383,
      "location": "/src/main/java/com/newland/beecode/service/impl",
      "name": "myproject01",
      "url": "https://searchcode.com/codesearch/view/114533602/",
      "md5hash": "570e3a94263985c3f578f86e63ce1583",
      "lines": {
        "194": "",
        "195": "\tpublic void genCountRow(HSSFRow row, HSSFWorkbook wb, int rowIndex) {",
        "232": "",
        "233": "\tpublic void createCell(HSSFWorkbook book, HSSFRow row, short col,",
        "172": "",
        "77": "\t\t\tHSSFSheet sheet = null;",
        "78": "\t\t\tHSSFRow row = null;",
        "173": "\tpublic void genFirstRow(HSSFWorkbook wb, HSSFRow row) {",
        "150": "",
        "151": "\tpublic void genHerderRow(HSSFWorkbook wb, HSSFSheet sheet, HSSFRow row,",
        "24": "import org.apache.poi.hssf.usermodel.HSSFFont;",
        "25": "import org.apache.poi.hssf.usermodel.HSSFRow;"
      },
      "id": 114533602,
      "filename": "XPathExcelTemplateService.java"
    },
    {
      "repo": "https://bitbucket.org/tuannguyen/mytest.git",
      "language": "Java",
      "linescount": 368,
      "location": "/myproject/src/com/bp/pensionline/sqlreport/app/poi",
      "name": "mytest",
      "url": "https://searchcode.com/codesearch/view/43507470/",
      "md5hash": "63a273d409ae831d3fa6baba9e6bcd31",
      "lines": {
        "128": "\t\t\t\t\tSystem.out.println(\"Add row: \" + rowIndex);",
        "129": "\t\t\t\t\tHSSFRow row = sheet.createRow(rowIndex++);",
        "101": "\t\t\t\tint rowIndex = 0;",
        "102": "\t\t\t\tHSSFRow headerRow = sheet.createRow(0);",
        "23": "import org.apache.poi.hssf.usermodel.HSSFRichTextString;",
        "24": "import org.apache.poi.hssf.usermodel.HSSFRow;"
      },
      "id": 43507470,
      "filename": "PLReportPOIProducer.java"
    },
    {
      "repo": "https://bitbucket.org/tuannguyen/mytest.git",
      "language": "Java",
      "linescount": 279,
      "location": "/myproject/src/com/bp/pensionline/reporting/util",
      "name": "mytest",
      "url": "https://searchcode.com/codesearch/view/43507489/",
      "md5hash": "b06613f225965ca6f6532c850ea10d2c",
      "lines": {
        "16": "import org.apache.poi.hssf.usermodel.HSSFRichTextString;",
        "17": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "122": "\t\t",
        "123": "\t\tHSSFRow horzTitle = sheet.createRow(0);",
        "140": "\t\t\tif (idx != -1) p[0] = p[0].substring(14);",
        "141": "\t\t\tHSSFRow row = sheet.createRow(i+1);"
      },
      "id": 43507489,
      "filename": "ContentPermissionReportUtil.java"
    },
    {
      "repo": "https://bitbucket.org/panemu/tiwulfx.git",
      "language": "Java",
      "linescount": 235,
      "location": "/src/main/java/com/panemu/tiwulfx/common",
      "name": "tiwulfx",
      "url": "https://searchcode.com/codesearch/view/46011490/",
      "md5hash": "ba097e104ce90c1cdb8069d9dc85850d",
      "lines": {
        "96": "\t\tHSSFRow row = sheet.createRow(rowIdx);",
        "39": "\tprivate int[] createHeader(HSSFSheet sheet, List<TableColumn<T, ?>> header, int rowIdx, int clmIdx, int[] offset) {",
        "40": "\t\tHSSFRow row = sheet.createRow(rowIdx);",
        "15": "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "14": "import org.apache.poi.hssf.usermodel.HSSFFont;",
        "95": "\t\tint rowIdx = 0;"
      },
      "id": 46011490,
      "filename": "ExportToExcel.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 150,
      "source": "Github",
      "id": 2
    },
    {
      "count": 120,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 66,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 2,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 1,
      "source": "GitLab",
      "id": 13
    }
  ]
}