{
  "matchterm": "RecordTypes",
  "previouspage": null,
  "searchterm": "RecordTypes",
  "query": "RecordTypes",
  "language_filters": [
    {
      "count": 64,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 64,
  "results": [
    {
      "repo": "https://bitbucket.org/ipoki/javame",
      "language": "Java",
      "linescount": 37,
      "location": "/src/com/hipoqih/plugin",
      "name": "javame",
      "url": "https://searchcode.com/codesearch/view/56037801/",
      "md5hash": "14c397122873e8ddc03ce69ccd77b407",
      "lines": {
        "17": " ",
        "18": "public class RecordTypes "
      },
      "id": 56037801,
      "filename": "RecordTypes.java"
    },
    {
      "repo": "http://gadjet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 56,
      "location": "/src/com/gcalsync/store",
      "name": "gadjet",
      "url": "https://searchcode.com/codesearch/view/12272984/",
      "md5hash": "36b84217bd22607d51d3b5512a2c6457",
      "lines": {
        "28": " */",
        "29": "public class RecordTypes implements RecordTypeMapper {"
      },
      "id": 12272984,
      "filename": "RecordTypes.java"
    },
    {
      "repo": "https://github.com/YaoLin1/hadoop.git",
      "language": "Java",
      "linescount": 1872,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "hadoop",
      "url": "https://searchcode.com/codesearch/view/71662054/",
      "md5hash": "9ca82e109a06ee4921fcc04fa49d465a",
      "lines": {
        "1222": "        if (null != writer){",
        "1223": "          JobHistory.log(writer, RecordTypes.Job,",
        "1196": "        if (null != writer){",
        "1197": "          JobHistory.log(writer, RecordTypes.Job,",
        "334": "",
        "335": "    l.handle(RecordTypes.valueOf(recType), parseBuffer); ",
        "945": "          //add to writer as well ",
        "946": "          JobHistory.log(writers, RecordTypes.Job, ",
        "1043": "        if (null != writer){",
        "1108": "        if (null != writer){",
        "1109": "          JobHistory.log(writer, RecordTypes.Job,          ",
        "1174": "          JobHistory.log(writer, RecordTypes.Job, new Keys[] { Keys.JOBID,",
        "1081": "          JobHistory.log(writer, RecordTypes.Job, ",
        "1080": "        if (null != writer){",
        "1044": "          JobHistory.log(writer, RecordTypes.Job, ",
        "1173": "        if (null != writer) {"
      },
      "id": 71662054,
      "filename": "JobHistory.java"
    },
    {
      "repo": "https://github.com/jboulon/hadoop-20.git",
      "language": "Java",
      "linescount": 2269,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "hadoop-20",
      "url": "https://searchcode.com/codesearch/view/74235726/",
      "md5hash": "44948fb7dfb91a0585c8b2f3b26c3f38",
      "lines": {
        "641": "  ",
        "642": "  public static void log(PrintWriter out, RecordTypes recordType, Keys key, ",
        "1443": "        if (null != writer){",
        "1444": "          JobHistory.log(writer, RecordTypes.Job, ",
        "1479": "        if (null != writer){",
        "520": "    ",
        "521": "    public void handle(RecordTypes recType, Map<Keys, String> values) ",
        "523": "      // Check if the record is of type META",
        "524": "      if (RecordTypes.Meta == recType) {",
        "656": "",
        "657": "  static void log(ArrayList<PrintWriter> writers, RecordTypes recordType, ",
        "1585": "          JobHistory.log(writer, RecordTypes.Job,",
        "1480": "          JobHistory.log(writer, RecordTypes.Job, ",
        "1584": "        if (null != writer) {",
        "537": "        if (null != writers){",
        "538": "          JobHistory.log(writers, RecordTypes.Meta, "
      },
      "id": 74235726,
      "filename": "JobHistory.java"
    },
    {
      "repo": "https://github.com/effyroth/paper.git",
      "language": "Java",
      "linescount": 2704,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "paper",
      "url": "https://searchcode.com/codesearch/view/93067886/",
      "md5hash": "1766eb363f51ee04175fea3edf2fd01a",
      "lines": {
        "801": "",
        "802": "  static void log(ArrayList<PrintWriter> writers, RecordTypes recordType, ",
        "645": "    ",
        "646": "    public void handle(RecordTypes recType, Map<Keys, String> values) ",
        "1959": "        JobHistory.log(writer, RecordTypes.Job, new Keys[] { Keys.JOBID,",
        "648": "      // Check if the record is of type META",
        "649": "      if (RecordTypes.Meta == recType) {",
        "1932": "      if (null != writer){",
        "1837": "      if (null != writer){",
        "1838": "        JobHistory.log(writer, RecordTypes.Job, ",
        "1933": "        JobHistory.log(writer, RecordTypes.Job,",
        "787": "",
        "788": "  static void log(ArrayList<PrintWriter> writers, RecordTypes recordType, ",
        "661": "      if (null != writers){",
        "662": "         JobHistory.log(writers, RecordTypes.Meta, ",
        "1958": "      if (null != writer) {"
      },
      "id": 93067886,
      "filename": "JobHistory.java"
    },
    {
      "repo": "https://github.com/jboulon/hadoop-20.git",
      "language": "Java",
      "linescount": 177,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "hadoop-20",
      "url": "https://searchcode.com/codesearch/view/74235208/",
      "md5hash": "9e3986f2d6fe27961ec2cb8109520510",
      "lines": {
        "104": "    // JobHistory.Listener implementation ",
        "105": "    public void handle(JobHistory.RecordTypes recType, Map<Keys, String> values)",
        "138": "    ",
        "139": "    public void handle(JobHistory.RecordTypes recType, Map<Keys, String> values)",
        "140": "      throws IOException {",
        "109": "      ",
        "110": "      if (recType == JobHistory.RecordTypes.Job) {",
        "111": "        job.handle(values);",
        "112": "      }if (recType.equals(JobHistory.RecordTypes.Task)) {",
        "141": "      if (recType.equals(JobHistory.RecordTypes.MapAttempt) || ",
        "114": "        getTask(taskid).handle(values);",
        "115": "      } else if (recType.equals(JobHistory.RecordTypes.MapAttempt)) {",
        "142": "          recType.equals(JobHistory.RecordTypes.ReduceAttempt)) {",
        "119": "        getMapAttempt(jobid, jobTrackerId, taskid, mapAttemptId).handle(values);",
        "120": "      } else if (recType.equals(JobHistory.RecordTypes.ReduceAttempt)) {",
        "143": "        if (failureType.equals(values.get(Keys.TASK_STATUS)) ) {"
      },
      "id": 74235208,
      "filename": "DefaultJobHistoryParser.java"
    },
    {
      "repo": "https://github.com/dynamicguy/hadoop-20.git",
      "language": "Java",
      "linescount": 1207,
      "location": "/src/test/org/apache/hadoop/mapred",
      "name": "hadoop-20",
      "url": "https://searchcode.com/codesearch/view/74259546/",
      "md5hash": "52f73c21edc6539736b52c87f36ee5f4",
      "lines": {
        "129": "      }",
        "130": "      else if (recType.equals(RecordTypes.Job)) {",
        "208": "      }",
        "209": "      else if (recType.equals(RecordTypes.MapAttempt) ||",
        "210": "                 recType.equals(RecordTypes.ReduceAttempt)) {",
        "211": "        String taskid =  values.get(Keys.TASKID);",
        "118": "    // TestListener implementation",
        "119": "    public void handle(RecordTypes recType, Map<Keys, String> values)",
        "152": "      }",
        "153": "      else if (recType.equals(RecordTypes.Task)) {",
        "124": "      // Check if the record is of type Meta",
        "125": "      if (recType == JobHistory.RecordTypes.Meta) {"
      },
      "id": 74259546,
      "filename": "TestJobHistory.java"
    },
    {
      "repo": "https://github.com/itsvikramagr/presto.git",
      "language": "Java",
      "linescount": 237,
      "location": "/presto-main/src/main/java/com/facebook/presto/operator",
      "name": "presto",
      "url": "https://searchcode.com/codesearch/view/95981195/",
      "md5hash": "61a38094145f6e5fc3d583aacc84cca4",
      "lines": {
        "97": "    private final Optional<Integer> sampleWeightChannel;",
        "98": "    private final List<Type> recordTypes;",
        "167": "        else {",
        "168": "            cursors = new BlockCursor[recordTypes.size()];",
        "105": "            RecordSink recordSink,",
        "106": "            List<Type> recordTypes,",
        "112": "        this.recordTypes = recordTypes;",
        "79": "            OperatorContext context = driverContext.addOperatorContext(operatorId, TableWriterOperator.class.getSimpleName());",
        "80": "            return new TableWriterOperator(context, recordSink, recordTypes, inputChannels, sampleWeightChannel);",
        "50": "",
        "51": "        public TableWriterOperatorFactory(int operatorId, RecordSink recordSink, List<Type> recordTypes, List<Integer> inputChannels, Optional<Integer> sampleWeightChannel)",
        "56": "",
        "57": "            checkNotNull(recordTypes, \"types is null\");",
        "58": "            this.recordTypes = ImmutableList.copyOf(Iterables.transform(recordTypes, new Function<Type, Type>()",
        "111": "        this.recordSink = checkNotNull(recordSink, \"recordSink is null\");"
      },
      "id": 95981195,
      "filename": "TableWriterOperator.java"
    },
    {
      "repo": "https://github.com/mdodsworth/hadoop-common.git",
      "language": "Java",
      "linescount": 2187,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "hadoop-common",
      "url": "https://searchcode.com/codesearch/view/110743495/",
      "md5hash": "e970421e204261ad27f87b5392b97600",
      "lines": {
        "1440": "        if (null != writer){",
        "1441": "          JobHistory.log(writer, RecordTypes.Job,          ",
        "1411": "        if (null != writer){",
        "1412": "          JobHistory.log(writer, RecordTypes.Job, ",
        "423": "    ",
        "424": "    public void handle(RecordTypes recType, Map<Keys, String> values) ",
        "426": "      // Check if the record is of type META",
        "427": "      if (RecordTypes.Meta == recType) {",
        "559": "",
        "560": "  static void log(ArrayList<PrintWriter> writers, RecordTypes recordType, ",
        "531": "",
        "532": "    l.handle(RecordTypes.valueOf(recType), parseBuffer); ",
        "1552": "          JobHistory.log(writer, RecordTypes.Job,",
        "1551": "        if (null != writer){",
        "286": "   */",
        "287": "  public static enum RecordTypes {"
      },
      "id": 110743495,
      "filename": "JobHistory.java"
    },
    {
      "repo": "https://github.com/YaoLin1/hadoop.git",
      "language": "Java",
      "linescount": 3948,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "hadoop",
      "url": "https://searchcode.com/codesearch/view/71662624/",
      "md5hash": "2032f27611982c8020b603f7fd5fedcc",
      "lines": {
        "784": "",
        "785": "      public void handle(JobHistory.RecordTypes recType, Map<Keys, ",
        "786": "                         String> values) throws IOException {",
        "787": "        if (recType == JobHistory.RecordTypes.Job) {",
        "820": "          processTaskAttempt(attemptId, attempt);",
        "821": "        } else if (recType.equals(JobHistory.RecordTypes.ReduceAttempt)) {",
        "806": "          processTask(taskId, task);",
        "807": "        } else if (recType.equals(JobHistory.RecordTypes.MapAttempt)) {",
        "792": "          checkAndInit();",
        "793": "        } else if (recType.equals(JobHistory.RecordTypes.Task)) {"
      },
      "id": 71662624,
      "filename": "JobTracker.java"
    },
    {
      "repo": "https://bitbucket.org/shenli/tapa.git",
      "language": "Java",
      "linescount": 1850,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "tapa",
      "url": "https://searchcode.com/codesearch/view/49661733/",
      "md5hash": "2e36cbb10ded16c1aa03b82dc54c4d2d",
      "lines": {
        "330": "  ",
        "331": "  static void log(PrintWriter out, RecordTypes recordType, Keys key, ",
        "1228": "        if (null != writer){",
        "1229": "          JobHistory.log(writer, RecordTypes.Job,",
        "1201": "        if (null != writer){",
        "1202": "          JobHistory.log(writer, RecordTypes.Job,",
        "948": "          //add to writer as well ",
        "949": "          JobHistory.log(writers, RecordTypes.Job, ",
        "1178": "        if (null != writer) {",
        "1049": "          JobHistory.log(writer, RecordTypes.Job, ",
        "1048": "        if (null != writer){",
        "1113": "        if (null != writer){",
        "1114": "          JobHistory.log(writer, RecordTypes.Job,          ",
        "1179": "          JobHistory.log(writer, RecordTypes.Job, new Keys[] { Keys.JOBID,",
        "317": "",
        "318": "    l.handle(RecordTypes.valueOf(recType), parseBuffer); "
      },
      "id": 49661733,
      "filename": "JobHistory.java"
    },
    {
      "repo": "https://github.com/bmorrise/pentaho-reporting.git",
      "language": "Java",
      "linescount": 156,
      "location": "/libraries/libpixie/source/org/pentaho/reporting/libraries/pixie/wmf/records",
      "name": "pentaho-reporting",
      "url": "https://searchcode.com/codesearch/view/100684951/",
      "md5hash": "76afd6bf16ac791bf9c1dd72dd9eb6d8",
      "lines": {
        "129": "  {",
        "130": "    MfCmd cmd = recordTypes.get(new Integer(command.getFunction()));",
        "135": "",
        "136": "    recordTypes.put(command.getFunction(), command);",
        "140": "  {",
        "44": "   */",
        "45": "  private HashMap<Integer,MfCmd> recordTypes;",
        "141": "    if (recordTypes == null)",
        "145": "",
        "146": "    final MfCmd cmd = recordTypes.get(new Integer(function));",
        "51": "  {",
        "52": "    if (recordTypes != null)",
        "56": "",
        "57": "    recordTypes = new HashMap<Integer, MfCmd>();"
      },
      "id": 100684951,
      "filename": "CommandFactory.java"
    },
    {
      "repo": "https://bitbucket.org/ipoki/javame",
      "language": "Java",
      "linescount": 215,
      "location": "/src/com/hipoqih/plugin",
      "name": "javame",
      "url": "https://searchcode.com/codesearch/view/56037799/",
      "md5hash": "ee1d5c40eef7fba110f0070450ae601b",
      "lines": {
        "129": "\t\t\tbreak;",
        "130": "\t\tcase RecordTypes.POSITIONSOURCE:",
        "99": "\t\t{",
        "100": "\t\tcase RecordTypes.ALERTHEIGHT:",
        "133": "\t\tcase RecordTypes.SECONDS:",
        "102": "\t\t\tbreak;",
        "103": "\t\tcase RecordTypes.ALERTLEFT:",
        "136": "\t\tcase RecordTypes.URLMAPALERT:",
        "105": "\t\t\tbreak;",
        "106": "\t\tcase RecordTypes.ALERTTOP:",
        "135": "\t\t\tbreak;",
        "78": "\t\t",
        "79": "\t\tif (State.recordStore.getNumRecords() < RecordTypes.count)",
        "139": "\t\tcase RecordTypes.USER:",
        "132": "\t\t\tbreak;",
        "138": "\t\t\tbreak;"
      },
      "id": 56037799,
      "filename": "State.java"
    },
    {
      "repo": "https://github.com/johnsonchengwu/hadoop-common.git",
      "language": "Java",
      "linescount": 1733,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "hadoop-common",
      "url": "https://searchcode.com/codesearch/view/68880662/",
      "md5hash": "891c43c8c7eef27f13106fd0541e7d68",
      "lines": {
        "322": "  ",
        "323": "  static void log(PrintWriter out, RecordTypes recordType, Keys key, ",
        "1046": "          JobHistory.log(writer, RecordTypes.Job,",
        "201": "    ",
        "202": "    public void handle(RecordTypes recType, Map<Keys, String> values) ",
        "1099": "          JobHistory.log(writer, RecordTypes.Job,",
        "204": "      // Check if the record is of type META",
        "205": "      if (RecordTypes.Meta == recType) {",
        "945": "        if (null != writer){",
        "946": "          JobHistory.log(writer, RecordTypes.Job, ",
        "1075": "        if (null != writer) {",
        "1076": "          JobHistory.log(writer, RecordTypes.Job, new Keys[] { Keys.JOBID,",
        "309": "",
        "310": "    l.handle(RecordTypes.valueOf(recType), parseBuffer); ",
        "1098": "        if (null != writer){",
        "1045": "        if (null != writer){"
      },
      "id": 68880662,
      "filename": "JobHistory.java"
    },
    {
      "repo": "https://github.com/twitter/hraven.git",
      "language": "Java",
      "linescount": 2164,
      "location": "/hraven-etl/src/main/java/org/apache/hadoop/mapred",
      "name": "hraven",
      "url": "https://searchcode.com/codesearch/view/69373197/",
      "md5hash": "ea4ce02ba0e5de1590c0bf8917e8783e",
      "lines": {
        "416": "      if (RecordTypes.Meta == recType) {",
        "1280": "        JobHistoryCopy.log(writers, RecordTypes.Job,",
        "547": "  ",
        "548": "  static void log(PrintWriter out, RecordTypes recordType, JobHistoryKeys key,",
        "1445": "      if (null != writer){",
        "1446": "        JobHistoryCopy.log(writer, RecordTypes.Job,          ",
        "1418": "      if (null != writer){",
        "1419": "        JobHistoryCopy.log(writer, RecordTypes.Job, ",
        "428": "      if (null != writers){",
        "429": "         JobHistoryCopy.log(writers, RecordTypes.Meta, ",
        "534": "",
        "535": "    l.handle(RecordTypes.valueOf(recType), parseBuffer); ",
        "1279": "        //add to writer as well ",
        "412": "    ",
        "413": "    public void handle(RecordTypes recType, Map<JobHistoryKeys, String> values)",
        "415": "      // Check if the record is of type META"
      },
      "id": 69373197,
      "filename": "JobHistoryCopy.java"
    },
    {
      "repo": "https://github.com/minstrelsy/POI-Android.git",
      "language": "Java",
      "linescount": 1082,
      "location": "/ppt/scratchpad/src/org/apache/poi/hslf/usermodel",
      "name": "POI-Android",
      "url": "https://searchcode.com/codesearch/view/97394959/",
      "md5hash": "5d80afff23c354813b0c27bde8e947ac",
      "lines": {
        "1060": "\tpublic int addHyperlink(Hyperlink link) {",
        "1061": "\t\tExObjList lst = (ExObjList) _documentRecord.findFirstOfType(RecordTypes.ExObjList.typeID);",
        "1030": "\tpublic int addControl(String name, String progId) {",
        "1031": "\t\tExObjList lst = (ExObjList) _documentRecord.findFirstOfType(RecordTypes.ExObjList.typeID);",
        "752": "\t\t\t// Grab interesting records as they come past",
        "753": "\t\t\tif (_records[i].getRecordType() == RecordTypes.PersistPtrIncrementalBlock.typeID) {",
        "755": "\t\t\t}",
        "756": "\t\t\tif (_records[i].getRecordType() == RecordTypes.UserEditAtom.typeID) {",
        "218": "\t\t\t\t// Find the Document, and interesting things in it",
        "219": "\t\t\t\tif (_mostRecentCoreRecords[i].getRecordType() == RecordTypes.Document.typeID) {",
        "989": "\tpublic int addMovie(String path, int type) {",
        "990": "\t\tExObjList lst = (ExObjList) _documentRecord.findFirstOfType(RecordTypes.ExObjList.typeID);"
      },
      "id": 97394959,
      "filename": "SlideShow.java"
    },
    {
      "repo": "https://github.com/effyroth/paper.git",
      "language": "Java",
      "linescount": 5377,
      "location": "/src/mapred/org/apache/hadoop/mapred",
      "name": "paper",
      "url": "https://searchcode.com/codesearch/view/93068050/",
      "md5hash": "09c3e4ecb8b27712c2ab361eb2c73ae4",
      "lines": {
        "1296": "                         String> values) throws IOException {",
        "1297": "        if (recType == JobHistory.RecordTypes.Job) {",
        "1330": "          processTaskAttempt(attemptId, attempt);",
        "1331": "        } else if (recType.equals(JobHistory.RecordTypes.ReduceAttempt)) {",
        "1316": "          processTask(taskId, task);",
        "1317": "        } else if (recType.equals(JobHistory.RecordTypes.MapAttempt)) {",
        "1302": "          checkAndInit();",
        "1303": "        } else if (recType.equals(JobHistory.RecordTypes.Task)) {",
        "1294": "",
        "1295": "      public void handle(JobHistory.RecordTypes recType, Map<Keys, "
      },
      "id": 93068050,
      "filename": "JobTracker.java"
    },
    {
      "repo": "https://github.com/uiterlix/orientdb.git",
      "language": "Java",
      "linescount": 112,
      "location": "/core/src/main/java/com/orientechnologies/orient/core/record",
      "name": "orientdb",
      "url": "https://searchcode.com/codesearch/view/95046713/",
      "md5hash": "067291522d932a3659186bdb3ed23177",
      "lines": {
        "97": "  public void declareRecordType(byte iByte, String iName, Class<? extends ORecordInternal<?>> iClass, final ORecordFactory iFactory) {",
        "98": "    if (recordTypes[iByte] != null)",
        "99": "      throw new OException(\"Record type byte '\" + iByte + \"' already in use : \" + recordTypes[iByte].getName());",
        "100": "    recordTypeNames[iByte] = iName;",
        "101": "    recordTypes[iByte] = iClass;",
        "73": "  public Class<? extends ORecord<?>> getRecordTypeClass(final byte iRecordType) {",
        "40": "  protected final String[]                      recordTypeNames = new String[Byte.MAX_VALUE];",
        "41": "  protected final Class<? extends ORecord<?>>[] recordTypes     = new Class[Byte.MAX_VALUE];",
        "74": "    Class<? extends ORecord<?>> cls = recordTypes[iRecordType];"
      },
      "id": 95046713,
      "filename": "ORecordFactoryManager.java"
    },
    {
      "repo": "https://github.com/minstrelsy/POI-Android.git",
      "language": "Java",
      "linescount": 514,
      "location": "/ppt/scratchpad/src/org/apache/poi/hslf/model",
      "name": "POI-Android",
      "url": "https://searchcode.com/codesearch/view/97394313/",
      "md5hash": "346ffc55e0b7a05381ade3b094d03d17",
      "lines": {
        "384": "    \t\t\tgetSheetContainer().findFirstOfType(",
        "33": "import org.apache.poi.hslf.record.RecordContainer;",
        "34": "import org.apache.poi.hslf.record.RecordTypes;",
        "487": "            } else if (ch[i].getRecordType() == RecordTypes.RoundTripContentMasterId.typeID){",
        "389": "    \t\t\tprogTags.findFirstOfType(",
        "390": "    \t\t\t\t\tRecordTypes.ProgBinaryTag.typeID",
        "385": "    \t\t\t\t\t\tRecordTypes.ProgTags.typeID",
        "486": "                hdd = (HeadersFootersContainer)ch[i];",
        "394": "    \t\t\t\tprogBinaryTag.findFirstOfType(",
        "395": "    \t\t\t\t\t\tRecordTypes.BinaryTagData.typeID"
      },
      "id": 97394313,
      "filename": "Slide.java"
    },
    {
      "repo": "https://bitbucket.org/tecnoteca/cmdbuild",
      "language": "Java",
      "linescount": 1048,
      "location": "/cmdbf/src/main/java/org/cmdbuild/cmdbf/cmdbmdr",
      "name": "cmdbuild",
      "url": "https://searchcode.com/codesearch/view/57772968/",
      "md5hash": "426d647a3919662a200c7484fb4dfa66",
      "lines": {
        "225": "\t\t\t",
        "226": "\t\t\tRecordTypes recordTypes = recordTypesMap.get(typeQName.getNamespaceURI());",
        "227": "\t\t\tif(recordTypes == null) {",
        "228": "\t\t\t\trecordTypes = new RecordTypes();",
        "229": "\t\t\t\trecordTypes.setNamespace(typeQName.getNamespaceURI());",
        "230": "\t\t\t\trecordTypes.setSchemaLocation(xmlRegistry.getByNamespaceURI(typeQName.getNamespaceURI()).getSchemaLocation());",
        "231": "\t\t\t\trecordTypesMap.put(typeQName.getNamespaceURI(), recordTypes);",
        "232": "\t\t\t}",
        "233": "\t\t\trecordTypes.getRecordType().add(recordType);",
        "203": "\t@Override",
        "204": "\tpublic RecordTypeList getRecordTypesList() {",
        "205": "\t\tMap<String, RecordTypes> recordTypesMap = new HashMap<String, RecordTypes>();",
        "206": "\t\tfor(Object type : Iterables.concat(xmlRegistry.getTypes(CMClass.class), xmlRegistry.getTypes(CMDomain.class), xmlRegistry.getTypes(DocumentTypeDefinition.class))) {",
        "114": "import org.dmtf.schemas.cmdbf._1.tns.servicemetadata.RecordTypeList;",
        "115": "import org.dmtf.schemas.cmdbf._1.tns.servicemetadata.RecordTypes;"
      },
      "id": 57772968,
      "filename": "CmdbMDR.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 37,
      "source": "Github",
      "id": 2
    },
    {
      "count": 13,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 9,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 5,
      "source": "Unknown",
      "id": 0
    }
  ]
}