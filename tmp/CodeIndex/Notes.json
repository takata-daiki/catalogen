{
  "matchterm": "Notes",
  "previouspage": null,
  "searchterm": "Notes",
  "query": "Notes",
  "language_filters": [
    {
      "count": 11724,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 11723,
  "results": [
    {
      "repo": "https://bitbucket.org/kra3/safelymanage",
      "language": "Java",
      "linescount": 143,
      "location": "/src/java/com/megawaretech/pim/server/db/entities",
      "name": "safelymanage",
      "url": "https://searchcode.com/codesearch/view/54644397/",
      "md5hash": "43aa225db787dca3b01a5423c7f8e58a",
      "lines": {
        "32": "    @NamedQuery ( name = \"Notes.findByContent\",",
        "33": "                  query = \"SELECT n FROM Notes n WHERE n.content = :content\" ),",
        "34": "    @NamedQuery ( name = \"Notes.findByEntrydate\",",
        "35": "                  query = \"SELECT n FROM Notes n WHERE n.entrydate = :entrydate\" )",
        "36": "} )",
        "37": "public class Notes implements Serializable {",
        "70": "",
        "71": "    public Notes(Integer entryid, String entryname, String content, Date entrydate) {",
        "64": "    public Notes() {",
        "66": "",
        "67": "    public Notes(Integer entryid) {",
        "21": "@Entity",
        "22": "@Table ( name = \"NOTES\",",
        "63": "",
        "30": "    @NamedQuery ( name = \"Notes.findByEntryname\",",
        "31": "                  query = \"SELECT n FROM Notes n WHERE n.entryname = :entryname\" ),"
      },
      "id": 54644397,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/ansgarkonermann/simpleodf",
      "language": "Java",
      "linescount": 208,
      "location": "/src/main/java/org/odftoolkit/simple/presentation",
      "name": "simpleodf",
      "url": "https://searchcode.com/codesearch/view/60371787/",
      "md5hash": "0e8440420b464e1b6b188fdf07984742",
      "lines": {
        "32": "import org.odftoolkit.odfdom.dom.element.presentation.PresentationNotesElement;",
        "64": "",
        "44": "/**",
        "45": " * <code>Notes</code> represents the presentation notes feature of the ODF",
        "46": " * document. <code>Notes</code> provides methods to creates notes, add content,",
        "47": " * add list, etc.",
        "49": " */",
        "50": "public class Notes extends Component implements ListContainer {",
        "51": "",
        "52": "\tPresentationNotesElement maNoteElement;",
        "55": "\t/**",
        "56": "\t * This is a tool class which supplies all of the notes creation detail.",
        "63": "\tpublic static class NotesBuilder {",
        "62": "\t */",
        "31": "import org.odftoolkit.odfdom.dom.element.draw.DrawTextBoxElement;"
      },
      "id": 60371787,
      "filename": "Notes.java"
    },
    {
      "repo": "https://github.com/jcksncllwy/CSE110Crossfit.git",
      "language": "Java",
      "linescount": 225,
      "location": "/Crossfit/src/com/cs110/stdev/crossfit/backend",
      "name": "CSE110Crossfit",
      "url": "https://searchcode.com/codesearch/view/113841960/",
      "md5hash": "09ec3bf3c6a85bf805f759da46bd5350",
      "lines": {
        "4": " * ",
        "5": " * This class is designed to create a Notes object, which holds all notes",
        "38": "\t * Method to autotag info stored in Notes",
        "12": "",
        "13": "public class Notes implements Serializable {",
        "209": "\t/**",
        "210": "\t * Method to convert all of Notes info to String for text dump",
        "211": "\t * @return - String of Notes info",
        "212": "\t */",
        "213": "\tpublic String toString() {",
        "214": "\t\tString notesInfo = \"\";",
        "215": "",
        "26": "\t */",
        "27": "\tpublic Notes() {",
        "37": "\t/**"
      },
      "id": 113841960,
      "filename": "Notes.java"
    },
    {
      "repo": "git://github.com/mkovatsc/SmartAppContiki.git",
      "language": "Java",
      "linescount": 164,
      "location": "/tools/cooja/java/se/sics/cooja/plugins",
      "name": "SmartAppContiki",
      "url": "https://searchcode.com/codesearch/view/14669640/",
      "md5hash": "b3bcea16fba25f893b8344ef7ddcae44",
      "lines": {
        "64": "",
        "65": "  private JTextArea notes = new JTextArea(\"enter simulation notes here\");",
        "67": "",
        "68": "  public Notes(Simulation simulation, GUI gui) {",
        "69": "    super(\"Notes\", gui);",
        "70": "",
        "71": "    add(BorderLayout.CENTER, new JScrollPane(notes));",
        "60": "@PluginType(PluginType.SIM_PLUGIN)",
        "74": "    if (Notes.this.getUI() instanceof BasicInternalFrameUI) {",
        "61": "public class Notes extends VisPlugin {",
        "73": "    /* Popup menu */",
        "58": "",
        "59": "@ClassDescription(\"Notes\")",
        "28": " *",
        "29": " * $Id: Notes.java,v 1.1 2010/03/11 22:11:10 fros4943 Exp $"
      },
      "id": 14669640,
      "filename": "Notes.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 757,
      "location": "/components/legacy/ome-notes/src/loci/ome/notes",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15644220/",
      "md5hash": "d629815d73e65a1a9e5e897d06cf6035",
      "lines": {
        "2": " * #%L",
        "3": " * OME Notes library for flexible organization and presentation of OME-XML",
        "155": "    super(\"OME Notes\");",
        "170": "      templateName = DEFAULT_TEMPLATE;",
        "171": "      loadTemplate(Notes.class.getResourceAsStream(DEFAULT_TEMPLATE));",
        "140": "  /** Constructs a new main window with the default template. */",
        "141": "  public Notes() {",
        "180": "  public Notes(String template, String newfile) {",
        "179": "  /** Constructs a new main window with the given template. */",
        "148": "   */",
        "149": "  public Notes(AggregateMetadata store) {",
        "153": "  /** Constructs a new main window with the given metadata and template. */",
        "154": "  public Notes(String template, AggregateMetadata store) {",
        "27": "package loci.ome.notes;",
        "156": "    try {",
        "26": "",
        "181": "    super(\"OME Notes\");"
      },
      "id": 15644220,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/msandin/pons",
      "language": "Java",
      "linescount": 76,
      "location": "/src/main/java/net/retroloop/duct/note",
      "name": "pons",
      "url": "https://searchcode.com/codesearch/view/56857573/",
      "md5hash": "e4701a8e2c477dc24f5e5698280244a8",
      "lines": {
        "11": "",
        "38": "\t\t}",
        "39": "\t\treturn new Notes(out);",
        "12": "public class Notes implements Iterable<Note> {",
        "42": "\t",
        "43": "\tpublic static Notes make(Note... notes) {",
        "44": "\t\tList<Note> out = new ArrayList<Note>();",
        "45": "\t\tfor (Note note : notes) {",
        "14": "\t",
        "15": "\tpublic static Notes make(AnnotatedElement annotated) throws NoteException {",
        "48": "\t\treturn new Notes(out);",
        "51": "\t",
        "52": "\tpublic Notes(List<Note> notes) {",
        "53": "\t\tthis.notes = notes;",
        "47": "\t\t}"
      },
      "id": 56857573,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/austinn/jarvis.git",
      "language": "Java",
      "linescount": 402,
      "location": "/Mobile Application/ProjectJarvisClientICS/src/com/nelson/jarvisclientics",
      "name": "jarvis",
      "url": "https://searchcode.com/codesearch/view/38881853/",
      "md5hash": "b1d3e77985dc0a66a901777f9d6bfe96",
      "lines": {
        "75": "\t\tnotes = new ArrayList<String>();",
        "71": "\t\t}",
        "72": "\t\tsetContentView(R.layout.notes); //all of this determines what the orientation is and what Activity/Layout",
        "76": "\t\tBundle extras = intent.getExtras();",
        "74": "\t\tIntent intent = getIntent();",
        "43": " * When the application opens It first checks to see if network is available. ",
        "44": " * If there is a connection it reads notes from the computer",
        "77": "\t\tnotes = extras.getStringArrayList(\"Notes\"); //Gets the ArrayList of all notes",
        "78": "\t\tnotesListView = (ListView)findViewById(R.id.listView1); //list view for displaying notes",
        "48": " */",
        "49": "public class Notes extends Activity implements OnInitListener {",
        "51": "\tArrayAdapter<String> arrayAdapter;",
        "52": "\tArrayList<String> notes;",
        "53": "\tListView notesListView;",
        "54": "\tSocket socket = null;"
      },
      "id": 38881853,
      "filename": "Notes.java"
    },
    {
      "repo": "http://nookdevs.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 138,
      "location": "/nookNotes/src/com/nookdevs/notes/provider",
      "name": "nookdevs",
      "url": "https://searchcode.com/codesearch/view/3711298/",
      "md5hash": "b00eac8980312559ca0a70f62ca600ab",
      "lines": {
        "32": " *",
        "1": "/*",
        "2": " * nookNotes, copyright (C) 2010 nookdevs",
        "5": " *",
        "6": " * A notes-taking application for the Barnes & Noble nook ebook reader.",
        "33": " * <p>The default order for notes a provided by a {@link com.nookdevs.notes.provider.Notes}",
        "43": "",
        "44": "    /** The content type for multiple notes. */",
        "45": "    @NotNull public static final String CONTENT_TYPE_NOTES =",
        "20": "",
        "21": "package com.nookdevs.notes.provider;",
        "38": "public abstract class Notes extends ContentProvider",
        "37": " */",
        "30": "/**",
        "31": " * <p>Base class for {@link android.content.ContentProvider}s for notes.</p>"
      },
      "id": 3711298,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/manumanu/contiki_rpl_metrics.git",
      "language": "Java",
      "linescount": 167,
      "location": "/tools/cooja/java/se/sics/cooja/plugins",
      "name": "contiki_rpl_metrics",
      "url": "https://searchcode.com/codesearch/view/36008670/",
      "md5hash": "8e9b14ef019ce1a4bcddc3a94f6c0fae",
      "lines": {
        "64": "",
        "65": "  private JTextArea notes = new JTextArea(\"Enter notes here\");",
        "67": "",
        "68": "  public Notes(Simulation simulation, GUI gui) {",
        "69": "    super(\"Notes\", gui);",
        "70": "",
        "71": "    add(BorderLayout.CENTER, new JScrollPane(notes));",
        "60": "@PluginType(PluginType.SIM_STANDARD_PLUGIN)",
        "74": "    if (Notes.this.getUI() instanceof BasicInternalFrameUI) {",
        "61": "public class Notes extends VisPlugin {",
        "73": "    /* Popup menu */",
        "58": "",
        "59": "@ClassDescription(\"Notes\")",
        "28": " *",
        "29": " * $Id: Notes.java,v 1.1 2010/03/11 22:11:10 fros4943 Exp $"
      },
      "id": 36008670,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/ravwojdyla/rav_wismote.git",
      "language": "Java",
      "linescount": 167,
      "location": "/contiki-2.6/tools/cooja/java/se/sics/cooja/plugins",
      "name": "rav_wismote",
      "url": "https://searchcode.com/codesearch/view/38635525/",
      "md5hash": "8e9b14ef019ce1a4bcddc3a94f6c0fae",
      "lines": {
        "64": "",
        "65": "  private JTextArea notes = new JTextArea(\"Enter notes here\");",
        "67": "",
        "68": "  public Notes(Simulation simulation, GUI gui) {",
        "69": "    super(\"Notes\", gui);",
        "70": "",
        "71": "    add(BorderLayout.CENTER, new JScrollPane(notes));",
        "60": "@PluginType(PluginType.SIM_STANDARD_PLUGIN)",
        "74": "    if (Notes.this.getUI() instanceof BasicInternalFrameUI) {",
        "61": "public class Notes extends VisPlugin {",
        "73": "    /* Popup menu */",
        "58": "",
        "59": "@ClassDescription(\"Notes\")",
        "28": " *",
        "29": " * $Id: Notes.java,v 1.1 2010/03/11 22:11:10 fros4943 Exp $"
      },
      "id": 38635525,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/paoolo/stomp-contiki.git",
      "language": "Java",
      "linescount": 166,
      "location": "/tools/cooja/java/se/sics/cooja/plugins",
      "name": "stomp-contiki",
      "url": "https://searchcode.com/codesearch/view/49331406/",
      "md5hash": "f1766a6503c61ebc44b388b0a5b173bf",
      "lines": {
        "64": "  private JTextArea notes = new JTextArea(\"Enter notes here\");",
        "66": "",
        "67": "  public Notes(Simulation simulation, GUI gui) {",
        "68": "    super(\"Notes\", gui);",
        "69": "",
        "70": "    add(BorderLayout.CENTER, new JScrollPane(notes));",
        "72": "    /* Popup menu */",
        "73": "    if (Notes.this.getUI() instanceof BasicInternalFrameUI) {",
        "82": "      popup.add(headerMenuItem);",
        "83": "      notes.addMouseListener(new MouseAdapter() {",
        "57": "",
        "58": "@ClassDescription(\"Notes\")",
        "59": "@PluginType(PluginType.SIM_STANDARD_PLUGIN)",
        "60": "public class Notes extends VisPlugin {",
        "63": ""
      },
      "id": 49331406,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/mcftmedia/mcftprofiler.git",
      "language": "Java",
      "linescount": 290,
      "location": "/src/main/java/net/diamondmine/mcftprofiler",
      "name": "mcftprofiler",
      "url": "https://searchcode.com/codesearch/view/43506172/",
      "md5hash": "531d0ef825d51b6b582bed51479915fc",
      "lines": {
        "256": "        FileConfiguration config = Configuration.getConfiguration();",
        "257": "        int maxnotes = config.getInt(\"profile.notes.amount-per-page\", 5);",
        "66": "                if (p.has(player, \"mcftprofiler.status.staff\")) {",
        "67": "                    fetchNotes(name, sender);",
        "36": "    public static void send(final String name, final CommandSender sender) {",
        "37": "        fetchNotes(name, sender);",
        "177": "                query = database.db.prepare(\"INSERT INTO \" + database.prefix",
        "24": " */",
        "178": "                        + \"notes (noteid, username, time, staff, note) VALUES (NULL, ?, CURRENT_TIMESTAMP, ?, ?)\");",
        "19": "/**",
        "20": " * Handler for notes.",
        "55": "                    if (p.has(player, \"mcftprofiler.status.*\") || p.has(player, \"mcftprofiler.status.staff\")) {",
        "56": "                        fetchNotes(name, sender);",
        "25": "public class Notes extends McftProfiler {",
        "60": "                } else {",
        "61": "                    fetchNotes(name, sender);"
      },
      "id": 43506172,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/Hurricaaane/mcftprofiler-ha3.git",
      "language": "Java",
      "linescount": 290,
      "location": "/src/main/java/net/diamondmine/mcftprofiler",
      "name": "mcftprofiler-ha3",
      "url": "https://searchcode.com/codesearch/view/48777603/",
      "md5hash": "531d0ef825d51b6b582bed51479915fc",
      "lines": {
        "256": "        FileConfiguration config = Configuration.getConfiguration();",
        "257": "        int maxnotes = config.getInt(\"profile.notes.amount-per-page\", 5);",
        "66": "                if (p.has(player, \"mcftprofiler.status.staff\")) {",
        "67": "                    fetchNotes(name, sender);",
        "36": "    public static void send(final String name, final CommandSender sender) {",
        "37": "        fetchNotes(name, sender);",
        "177": "                query = database.db.prepare(\"INSERT INTO \" + database.prefix",
        "24": " */",
        "178": "                        + \"notes (noteid, username, time, staff, note) VALUES (NULL, ?, CURRENT_TIMESTAMP, ?, ?)\");",
        "19": "/**",
        "20": " * Handler for notes.",
        "55": "                    if (p.has(player, \"mcftprofiler.status.*\") || p.has(player, \"mcftprofiler.status.staff\")) {",
        "56": "                        fetchNotes(name, sender);",
        "25": "public class Notes extends McftProfiler {",
        "60": "                } else {",
        "61": "                    fetchNotes(name, sender);"
      },
      "id": 48777603,
      "filename": "Notes.java"
    },
    {
      "repo": "https://github.com/toukubo/e2hweb.git",
      "language": "Java",
      "linescount": 79,
      "location": "/e2h/src/main/java/com/toukubo/e2h",
      "name": "e2hweb",
      "url": "https://searchcode.com/codesearch/view/93530025/",
      "md5hash": "96659b3b8c04b229bf645739385529ef",
      "lines": {
        "6": "",
        "7": "import com.evernote.edam.notestore.NoteFilter;",
        "8": "import com.evernote.edam.notestore.NoteList;",
        "9": "import com.evernote.edam.notestore.NoteMetadata;",
        "10": "import com.evernote.edam.notestore.NotesMetadataList;",
        "11": "import com.evernote.edam.notestore.NotesMetadataResultSpec;",
        "12": "import com.evernote.edam.type.Note;",
        "13": "import com.evernote.edam.type.NoteSortOrder;",
        "14": "",
        "15": "public class Notes {",
        "17": "\t//\t  private static final String AUTH_TOKEN = \"S=s1:U=5e207:E=14dc76cabc7:C=1466fbb7fca:P=1cd:A=en-devtoken:V=2:H=df4abf0a86fdeadfd0c1b5f675491fab\"; // sandbox",
        "18": "\tCollection<NoteMetadata> notes = null;",
        "19": "\t//\t\t  private NoteStoreClient noteStore;",
        "20": "\tprivate String newNoteGuid;",
        "21": "\tEvernoteConfig config = EvernoteConfig.createConfig();;",
        "22": "\tArrayList<com.toukubo.e2h.Note> ourNotes = new ArrayList<com.toukubo.e2h.Note>();"
      },
      "id": 93530025,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/kra3/safelymanage",
      "language": "Java",
      "linescount": 84,
      "location": "/src/java/com/megawaretech/pim/client/entities",
      "name": "safelymanage",
      "url": "https://searchcode.com/codesearch/view/54644443/",
      "md5hash": "8b713877e808671f63ebfbfb15d77f12",
      "lines": {
        "68": "        // TODO: Warning - this method won't work in the case the id fields are not set",
        "69": "        if (!(object instanceof Notes)) {",
        "71": "        }",
        "72": "        Notes other = (Notes) object;",
        "11": " */",
        "12": "public class Notes implements BeanModelTag, IsSerializable {",
        "80": "    public String toString() {",
        "81": "        return \"com.megawaretech.pim.server.client.Notes[entryid=\" + entryid + \"]\";",
        "19": "",
        "20": "    public Notes() {",
        "22": "",
        "23": "    public Notes(Integer entryid) {"
      },
      "id": 54644443,
      "filename": "Notes.java"
    },
    {
      "repo": "https://github.com/Gundalf72/sling.git",
      "language": "Java",
      "linescount": 250,
      "location": "/contrib/extensions/gwt/sample/src/main/java/org/apache/sling/extensions/gwt/sample/client",
      "name": "sling",
      "url": "https://searchcode.com/codesearch/view/101351275/",
      "md5hash": "f15ce4e53e2d5ec3dd56ea17e2350f63",
      "lines": {
        "55": "    final VerticalPanel notesPanel = new VerticalPanel();",
        "44": " * This class is the starting point for the Sling GWT Sample, a GWT client application that enables the user",
        "45": " * to store notes on the server and read them through the GWT widgets.",
        "46": " * <p/>",
        "47": " * The <code>Notes</code> class represents the entry point and top level widget of the GWT client application.",
        "48": " */",
        "49": "public class Notes implements EntryPoint {",
        "50": "",
        "51": "    private static final NotesServiceAsync service = (NotesServiceAsync) GWT.create(NotesService.class);",
        "54": "    final TextArea inputNoteText = new TextArea();",
        "23": "import org.apache.sling.extensions.gwt.sample.service.Note;",
        "24": "import org.apache.sling.extensions.gwt.sample.service.NotesService;",
        "25": "import org.apache.sling.extensions.gwt.sample.service.NotesServiceAsync;",
        "26": "",
        "187": "                getNotes();",
        "186": "            public void onSuccess(String o) {"
      },
      "id": 101351275,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/pluppens/nsesa-editor-an.git",
      "language": "Java",
      "linescount": 196,
      "location": "/src/main/java/org/nsesa/editor/gwt/an/common/client/ui/overlay/document/gen/csd02",
      "name": "nsesa-editor-an",
      "url": "https://searchcode.com/codesearch/view/40355412/",
      "md5hash": "22102a9bd26e4584b312fe6223f73c43",
      "lines": {
        "155": "     * @return <code>Notes</code> instance",
        "156": "     */",
        "157": "    public Notes sourceAttr(final AnyURISimpleType sourceAttr) {",
        "48": "        com.google.gwt.user.client.Element span = DOM.createSpan();",
        "49": "        span.setAttribute(\"data-type\", \"notes\");",
        "50": "        span.setAttribute(\"data-ns\", \"http://docs.oasis-open.org/legaldocml/ns/akn/3.0/CSD02\");",
        "51": "        span.setClassName(\"widget notes\");",
        "154": "     * @param sourceAttr the new value",
        "57": "    /**",
        "58": "     * Create a <code>Notes</code> object and set up its type",
        "59": "     */",
        "60": "    public Notes() {",
        "61": "        super(create());",
        "30": "",
        "31": "public class Notes extends OverlayWidgetImpl {"
      },
      "id": 40355412,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/pluppens/nsesa-editor-an.git",
      "language": "Java",
      "linescount": 196,
      "location": "/src/main/java/org/nsesa/editor/gwt/an/common/client/ui/overlay/document/gen/akomantoso20",
      "name": "nsesa-editor-an",
      "url": "https://searchcode.com/codesearch/view/40355771/",
      "md5hash": "989ed47d216560626c26da3283c06976",
      "lines": {
        "155": "     * @return <code>Notes</code> instance",
        "156": "     */",
        "157": "    public Notes sourceAttr(final AnyURISimpleType sourceAttr) {",
        "48": "        com.google.gwt.user.client.Element span = DOM.createSpan();",
        "49": "        span.setAttribute(\"data-type\", \"notes\");",
        "50": "        span.setAttribute(\"data-ns\", \"http://www.akomantoso.org/2.0\");",
        "51": "        span.setClassName(\"widget notes\");",
        "154": "     * @param sourceAttr the new value",
        "57": "    /**",
        "58": "     * Create a <code>Notes</code> object and set up its type",
        "59": "     */",
        "60": "    public Notes() {",
        "61": "        super(create());",
        "30": "",
        "31": "public class Notes extends OverlayWidgetImpl {"
      },
      "id": 40355771,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/ashokhari/bungeni-at4am.git",
      "language": "Java",
      "linescount": 199,
      "location": "/src/main/java/org/nsesa/editor/gwt/an/client/ui/overlay/document/gen/akomantoso20",
      "name": "bungeni-at4am",
      "url": "https://searchcode.com/codesearch/view/51611161/",
      "md5hash": "b11401da7a81d15101e34a1f607802bf",
      "lines": {
        "32": "",
        "33": "public class Notes extends OverlayWidgetImpl {",
        "155": "     * @return <code>Notes</code> instance",
        "156": "     */",
        "157": "    public Notes sourceAttr(final AnyURISimpleType sourceAttr) {",
        "48": "        com.google.gwt.user.client.Element span = DOM.createSpan();",
        "49": "        span.setAttribute(\"type\", \"notes\");",
        "50": "        span.setAttribute(\"ns\", \"http://www.akomantoso.org/2.0\");",
        "51": "        span.setClassName(\"widget notes\");",
        "154": "     * @param sourceAttr the new value",
        "57": "    /**",
        "58": "     * Create a <code>Notes</code> object and set up its type",
        "59": "     */",
        "60": "    public Notes() {",
        "61": "        super(create());"
      },
      "id": 51611161,
      "filename": "Notes.java"
    },
    {
      "repo": "https://bitbucket.org/wolfman2000/old_ppe_editor",
      "language": "Java",
      "linescount": 60,
      "location": "/src/com/gmail/jafelds/ppedits/enums",
      "name": "old_ppe_editor",
      "url": "https://searchcode.com/codesearch/view/64138185/",
      "md5hash": "24b79514e001a40b9976a42af871851a",
      "lines": {
        "35": "\t",
        "36": "\tpublic static Notes getEnum(String k)",
        "38": "\t\tfor (Notes n : values())",
        "6": " */",
        "7": "public enum Notes",
        "47": "\t",
        "48": "\tpublic static Notes getEnum(char s)",
        "49": "\t{",
        "50": "\t\tfor (Notes n : values())",
        "20": "\t",
        "21": "\tNotes(char t, String k)",
        "37": "\t{"
      },
      "id": 64138185,
      "filename": "Notes.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 5956,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 4276,
      "source": "Github",
      "id": 2
    },
    {
      "count": 1290,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 118,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 37,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 26,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 15,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 4,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 2,
      "source": "Gitorious",
      "id": 10
    }
  ]
}