{
  "matchterm": "Slope",
  "previouspage": null,
  "searchterm": "Slope",
  "query": "Slope",
  "language_filters": [
    {
      "count": 1625,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 1625,
  "results": [
    {
      "repo": "http://uniprojectsdn.googlecode.com/svn/",
      "language": "Java",
      "linescount": 367,
      "location": "/bachelor/praktikum/src/framed",
      "name": "uniprojectsdn",
      "url": "https://searchcode.com/codesearch/view/13445934/",
      "md5hash": "93b62d59330a3bee6bbb63a5da019a9f",
      "lines": {
        "289": "\t/** ",
        "290": "\t * Initialize the slope object by determine the frame and buffer sizes",
        "7": "/**",
        "168": "\t/**",
        "169": "\t * Generate the default Slope object; computes the first derivative over",
        "172": "\t */",
        "173": "\tpublic Slope(FrameSource source) {",
        "303": "\t\tStringBuffer buf = new StringBuffer();",
        "16": " */",
        "17": "public class Slope implements FrameSource {",
        "179": "\t/**",
        "180": "\t * Generate a specific Slope object for the given contexts",
        "8": " * Use a Slope object to compute derivatives of a static input frame. Currently",
        "184": "\t */",
        "185": "\tpublic Slope(FrameSource source, Context [] contexts) {",
        "304": "\t\tbuf.append(\"Slope: fs_in=\" + fs_in + \" fs_out=\" + fs_out + \" smoothing=\" + tirol + \" deltas=[\");"
      },
      "id": 13445934,
      "filename": "Slope.java"
    },
    {
      "repo": "https://github.com/ernan/trademaker.git",
      "language": "Java",
      "linescount": 29,
      "location": "/src/org/lifeform/chart/indicator",
      "name": "trademaker",
      "url": "https://searchcode.com/codesearch/view/64893979/",
      "md5hash": "4e55982de5a2be0b24b7bfdf95687b36",
      "lines": {
        "5": "/**",
        "6": " * Slope of any indicator",
        "7": " */",
        "8": "public class Slope extends Indicator {",
        "10": "",
        "11": "\tpublic Slope(final Indicator parent, final int lookBackBars) {"
      },
      "id": 64893979,
      "filename": "Slope.java"
    },
    {
      "repo": "https://github.com/poidasmith/xlloop.git",
      "language": "Java",
      "linescount": 13,
      "location": "/org.boris.expr/java/src/org/boris/expr/function/excel",
      "name": "xlloop",
      "url": "https://searchcode.com/codesearch/view/105398900/",
      "md5hash": "7fdc08d2d9ce2d3267faf11c46d8b9d7",
      "lines": {
        "6": "",
        "7": "public class SLOPE extends AbstractFunction"
      },
      "id": 105398900,
      "filename": "SLOPE.java"
    },
    {
      "repo": "https://bitbucket.org/glinsky/qiworkbench",
      "language": "Java",
      "linescount": 11492,
      "location": "/DeliveryLite/dev/src/com/bhpb/xsdparams/delivery",
      "name": "qiworkbench",
      "url": "https://searchcode.com/codesearch/view/123689931/",
      "md5hash": "f07ff95ea71b8a95b9bf7f6370d90ada",
      "lines": {
        "576": " *                                                 &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "577": " *                                                 &lt;element name=\"slope\" type=\"{}varFloat\"/>",
        "9030": "     *                                       &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "9031": "     *                                       &lt;element name=\"slope\" type=\"{}varFloat\"/>",
        "9409": "         *                             &lt;element name=\"slope\" type=\"{}varFloat\"/>",
        "9463": "         *                             &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "9408": "         *                             &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "589": " *                                                 &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "590": " *                                                 &lt;element name=\"slope\" type=\"{}varFloat\"/>",
        "8975": "     *                                       &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "8976": "     *                                       &lt;element name=\"slope\" type=\"{}varFloat\"/>",
        "9464": "         *                             &lt;element name=\"slope\" type=\"{}varFloat\"/>",
        "9421": "         *                             &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "9422": "         *                             &lt;element name=\"slope\" type=\"{}varFloat\"/>",
        "631": " *                                                 &lt;element name=\"intercept\" type=\"{}varFloat\"/>",
        "632": " *                                                 &lt;element name=\"slope\" type=\"{}varFloat\"/>"
      },
      "id": 123689931,
      "filename": "Inversion.java"
    },
    {
      "repo": "https://github.com/rjohanss/gmp.graphiti.git",
      "language": "Java",
      "linescount": 981,
      "location": "/plugins/org.eclipse.graphiti.ui/src/org/eclipse/graphiti/ui/internal/util/draw2d",
      "name": "gmp.graphiti",
      "url": "https://searchcode.com/codesearch/view/72307304/",
      "md5hash": "d700b35bccd4af8976f6f290f6037833",
      "lines": {
        "784": "\t * the slope and then inverts it. Again, to avoid divide by zero errors, the",
        "165": "\t * segment (start == Origin) or the midpoint of the segment (start ==",
        "166": "\t * Midpoint), and using slope as its new slope and len as the new length.",
        "785": "\t * constant <code>BIGSLOPE</code> is returned if the calculated slope before",
        "201": "",
        "202": "\t\tdouble slope_squared = slope * slope;",
        "203": "\t\tdx_float = (float) Math.sqrt(len_squared / (slope_squared + 1.0));",
        "782": "\t/**",
        "175": "\t *            int y value of start <code>KeyPoint</code>",
        "176": "\t * @param slope",
        "177": "\t *            <code>float</code> slope of the line",
        "178": "\t * @param len",
        "182": "\t */",
        "183": "\tpublic LineSeg(final KeyPoint start, final int fromX, final int fromY, final float slope, final long len, final int xdir) {",
        "783": "\t * Calculates the perpendicular slope of this line segment. This calculates"
      },
      "id": 72307304,
      "filename": "LineSeg.java"
    },
    {
      "repo": "https://bitbucket.org/damian168/tp-ia",
      "language": "Java",
      "linescount": 109,
      "location": "/lib/src/org/neuroph/core/transfer",
      "name": "tp-ia",
      "url": "https://searchcode.com/codesearch/view/122842897/",
      "md5hash": "b5316f23e77d326786de77afddb6baa1",
      "lines": {
        "65": "\t\ttry {",
        "66": "\t\t\tthis.slope = (Double)properties.getProperty(\"transferFunction.slope\");",
        "38": "\t/**",
        "39": "\t * The slope parametetar of the Tanh function",
        "40": "\t */\t",
        "41": "\tprivate double slope = 2d;",
        "44": "\t * Creates an instance of Tanh neuron transfer function with default",
        "45": "\t * slope=1.",
        "51": "\t * Creates an instance of Tanh neuron transfer function with specified",
        "52": "\t * value for slope parametar.",
        "53": "\t * @param slope the slope parametar for the Tanh function",
        "54": "\t */\t",
        "55": "\tpublic Tanh(double slope) {",
        "56": "\t\tthis.slope = slope;",
        "57": "\t}"
      },
      "id": 122842897,
      "filename": "Tanh.java"
    },
    {
      "repo": "https://bitbucket.org/damian168/tp-ia",
      "language": "Java",
      "linescount": 110,
      "location": "/lib/src/org/neuroph/core/transfer",
      "name": "tp-ia",
      "url": "https://searchcode.com/codesearch/view/122842901/",
      "md5hash": "b31df8b2a657e32da209a4e6c87f19d2",
      "lines": {
        "37": "\t/**",
        "38": "\t * The slope parametetar of the sigmoid function",
        "39": "\t */",
        "40": "\tprivate double slope = 1d;",
        "43": "\t * Creates an instance of Sigmoid neuron transfer function with default",
        "44": "\t * slope=1.",
        "50": "\t * Creates an instance of Sigmoid neuron transfer function with specified",
        "51": "\t * value for slope parametar.",
        "52": "\t * @param slope the slope parametar for the sigmoid function",
        "53": "\t */",
        "54": "\tpublic Sigmoid(double slope) {",
        "55": "\t\tthis.slope = slope;",
        "56": "\t}",
        "25": " * ",
        "26": " * output = 1/(1+ e^(-slope*input))"
      },
      "id": 122842901,
      "filename": "Sigmoid.java"
    },
    {
      "repo": "https://github.com/yl10030270/Pacman.git",
      "language": "Java",
      "linescount": 242,
      "location": "/pacman_v4",
      "name": "Pacman",
      "url": "https://searchcode.com/codesearch/view/72448648/",
      "md5hash": "8a406becf32530007637c184fa18e033",
      "lines": {
        "133": "            {",
        "134": "                slope = (double)getRowDistance() / getColumnDistance();",
        "135": "",
        "136": "                if(slope == 0)",
        "202": "",
        "203": "        final double slope;",
        "141": "                }",
        "142": "                else if(Math.abs(slope - 1) < 0.0000001)",
        "175": "        {",
        "176": "            final double slope;",
        "177": "            slope = (double)getRowDistance() / getColumnDistance();",
        "178": "            if(slope > 0)",
        "147": "                }",
        "148": "                else if(Math.abs(slope + 1) < 0.0000001)",
        "179": "            {"
      },
      "id": 72448648,
      "filename": "Dimension(myversion).java"
    },
    {
      "repo": "https://github.com/safaci2000-stableProjects/SchoolCode.git",
      "language": "Java",
      "linescount": 1406,
      "location": "/niu/Duffin",
      "name": "SchoolCode",
      "url": "https://searchcode.com/codesearch/view/114140927/",
      "md5hash": "2f6d22715b591eb4ecd48c1782bb62c2",
      "lines": {
        "384": "\t\t\t\tsurfaceArray[j][i] = ",
        "385": "\t\t\t    \t\tnew SurfaceBar( x, y, x1, y1, slope, ",
        "1157": "    \t      *SurfaceBar() = default constructor",
        "1158": "    \t      *SurfaceBar(double x, double y, double x1, double y1, double slope, ",
        "1162": "    \t\t*double getRoughness() = get bar roughness",
        "1163": "     \t\t*double getSlope() = returns the slope of the bar",
        "398": "",
        "399": "    //when slope is resetted from applet",
        "400": "    private void resetSlope()",
        "401": "    \t{",
        "402": "\tgv.OLDSLOPE = gv.SLOPE;",
        "406": "\t\t    {\t\t\t",
        "407": "\t\t    double newSlope = BARMINHEIGHT * gv.SLOPE * (j - 1) / gv.ROWS;",
        "408": "\t\t    surfaceArray[j][i].setSlope(newSlope);",
        "409": "\t\t    surfaceArray[j][i].setfinalHeight();"
      },
      "id": 114140927,
      "filename": "ErosionSim.java"
    },
    {
      "repo": "https://bitbucket.org/goatchurch/tunnelx",
      "language": "Java",
      "linescount": 1429,
      "location": "/trunk/src",
      "name": "tunnelx",
      "url": "https://searchcode.com/codesearch/view/117542913/",
      "md5hash": "a249042267f649bcba5cb147c97c6bfa",
      "lines": {
        "128": "        slope = (e1 - e0) / (t1 - t0); ",
        "160": "            return true; ",
        "162": "        if (Math.abs(lslope - slope) <= 0.01)",
        "161": "        double lslope = (e1 - e0) / (t1 - t0); ",
        "146": "        e1 = rightwedge.GetIntensityW(tsplit); ",
        "147": "        slope = rightwedge.slope; ",
        "148": "        assert VerifySlope(); ",
        "149": "",
        "151": "        rightwedge.e0 = e1; ",
        "152": "        assert rightwedge.VerifySlope(); ",
        "155": "    /////////////////////////////////////////////",
        "156": "    boolean VerifySlope()",
        "157": "    {",
        "158": "        double slediff = Math.abs((t1 - t0) * slope - (e1 - e0)); ",
        "127": "        e1 = le1; "
      },
      "id": 117542913,
      "filename": "TodeNode.java"
    },
    {
      "repo": "https://github.com/errord/nengo.git",
      "language": "Java",
      "linescount": 407,
      "location": "/simulator/src/java/main/ca/nengo/model/neuron/impl",
      "name": "nengo",
      "url": "https://searchcode.com/codesearch/view/71692480/",
      "md5hash": "7bb882138c51cc40bd41e3274a85b2e9",
      "lines": {
        "291": "",
        "292": "\t\tprivate PDF mySlope;",
        "299": "\t\tpublic SigmoidFactory() {",
        "300": "\t\t\tmySlope = new IndicatorPDF(1, 10);",
        "305": "\t\t/**",
        "306": "\t\t * @return Distribution of slopes of the sigmoid functions that describe current-firing rate relationships",
        "307": "\t\t * \t\tbefore scaling to maxRate (slope at inflection point = slope*maxRate)",
        "308": "\t\t */",
        "309": "\t\tpublic PDF getSlope() {",
        "310": "\t\t\treturn mySlope;",
        "311": "\t\t}",
        "313": "\t\t/**",
        "314": "\t\t * @param slope Distribution of slopes of the sigmoid functions that describe current-firing rate relationships",
        "315": "\t\t * \t\tbefore scaling to maxRate (slope at inflection point = slope*maxRate)",
        "316": "\t\t */"
      },
      "id": 71692480,
      "filename": "PoissonSpikeGenerator.java"
    },
    {
      "repo": "https://bitbucket.org/damian168/tp-ia",
      "language": "Java",
      "linescount": 93,
      "location": "/lib/src/org/neuroph/core/transfer",
      "name": "tp-ia",
      "url": "https://searchcode.com/codesearch/view/122842904/",
      "md5hash": "fd97464b14d23afaeb6721b0a2955514",
      "lines": {
        "67": "\t/**",
        "35": "\t/**",
        "36": "\t * The slope parametetar of the linear function",
        "37": "\t */\t",
        "38": "\tprivate double slope = 1d;",
        "47": "\t * Creates an instance of Linear transfer function with specified value",
        "48": "\t * for getSlope parametar.",
        "49": "\t */\t",
        "50": "\tpublic Linear(double slope) {",
        "51": "\t\tthis.slope = slope;",
        "52": "\t}",
        "68": "\t * Returns the slope parametar of this function",
        "58": "\t\ttry {",
        "59": "\t\t\tthis.slope = (Double)properties.getProperty(\"transferFunction.slope\");",
        "69": "\t * @return  slope parametar of this function "
      },
      "id": 122842904,
      "filename": "Linear.java"
    },
    {
      "repo": "https://github.com/AsherBond/jmxetric.git",
      "language": "Java",
      "linescount": 244,
      "location": "/src/main/java/info/ganglia/jmxetric",
      "name": "jmxetric",
      "url": "https://searchcode.com/codesearch/view/74620571/",
      "md5hash": "2740d5159be268f77f9b1f2f6a932a64",
      "lines": {
        "5": "import info.ganglia.gmetric4j.Publisher;",
        "70": "    public void addMBeanAttribute(String mbean, String attribute, ",
        "71": "                GMetricType type, String units, GMetricSlope slope,",
        "72": "                String publishName ) throws Exception {",
        "174": "        ",
        "175": "        public GMetricSlope getSlope() {",
        "176": "            return slope;",
        "177": "        }",
        "146": "                \tlog.finer(\"Announcing metric \" + this.toString() + \" value=\" + value );",
        "147": "                \tgm.publish(process, publishName, value, getType(), getSlope(), getUnits());",
        "52": "    public void addMBeanAttribute(String mbean, String attribute, String composite, ",
        "53": "                GMetricType type, String units, GMetricSlope slope,",
        "189": "        \tbuf.append(\" type=\").append(type);",
        "6": "import info.ganglia.gmetric4j.gmetric.GMetricSlope;",
        "60": "",
        "61": "        mbeanHolder.addAttribute(attribute, composite, type, slope, units, publishName);",
        "190": "        \tbuf.append(\" slope=\").append(slope);"
      },
      "id": 74620571,
      "filename": "MBeanSampler.java"
    },
    {
      "repo": "git://github.com/rhomobile/rhodes.git",
      "language": "Java",
      "linescount": 493,
      "location": "/extensions/rhoelementsext/ext/rhoelementsext/platform/android/rhoelements_temp/src/com/rho/rhoelements/graphics",
      "name": "rhodes",
      "url": "https://searchcode.com/codesearch/view/115666611/",
      "md5hash": "2d0c66893816bc3abfb6c55c3ee4110b",
      "lines": {
        "384": "\t\t{",
        "385": "\t\t\tif(slope == Float.POSITIVE_INFINITY || slope == Float.NEGATIVE_INFINITY )",
        "392": "\t\t\t\treturnValues[0] = (float) ((double) ((height - 1) - c) / slope);",
        "390": "\t\t\t{",
        "359": "\t\t{",
        "360": "\t\t\tdouble c = outsideY - (slope * outsideX);",
        "393": "\t\t\t}",
        "391": "\t\t\t\tdouble  c = outsideY - (slope * outsideX);",
        "334": "\t{",
        "335": "\t\tdouble slope = 0;",
        "337": "\t\t{",
        "338": "\t\t\tslope = (double) (outsideY - insideY) / (double) (outsideX - insideX);",
        "341": "\t\t{",
        "342": "\t\t\tslope = Float.POSITIVE_INFINITY; //When its vertical (in theory this wont be thrown cos float division can do Infinities)",
        "347": "\t\t{",
        "348": "\t\t\tdouble c = outsideY - (slope * outsideX);"
      },
      "id": 115666611,
      "filename": "SignatureArea.java"
    },
    {
      "repo": "https://github.com/ncweiler/VIB.git",
      "language": "Java",
      "linescount": 504,
      "location": "/pal/math",
      "name": "VIB",
      "url": "https://searchcode.com/codesearch/view/107075566/",
      "md5hash": "1a0063a073f86258c2ecd2bee543d8d8",
      "lines": {
        "385": "\t\t// f0  function value at x=0",
        "386": "\t\t// s0  slope at x=0",
        "163": "\t\t\t// determine an appropriate step length",
        "164": "\t\t\tdouble step = findStep(lf, fx, slope, numericalGradient);",
        "406": "\t\t{",
        "140": "",
        "141": "\t\t// slope at start point in initial direction",
        "142": "\t\tdouble slope = gradientProjection(sdir, gvec);",
        "143": "",
        "403": "\t\t",
        "404": "\t\t// sufficient decrease in slope",
        "277": "\t\t// f0 function value at step = 0",
        "278": "\t\t// s0 slope at step = 0",
        "407": "\t\t\tSystem.out.println(\"<<< Sufficient decrease in slope\");",
        "410": "\t\t{",
        "411": "\t\t\tSystem.out.println(\"<<< NO sufficient decrease in slope\");"
      },
      "id": 107075566,
      "filename": "ConjugateGradientSearch.java"
    },
    {
      "repo": "https://github.com/errord/nengo.git",
      "language": "Java",
      "linescount": 195,
      "location": "/simulator/src/java/main/ca/nengo/math/impl",
      "name": "nengo",
      "url": "https://searchcode.com/codesearch/view/71691482/",
      "md5hash": "9827ff867d95e7e9ba23161aa1fdd781",
      "lines": {
        "65": "\t */",
        "66": "\tpublic SigmoidFunction(float inflection, float slope, float low, float high) {",
        "36": " * A one-dimensional sigmoid function with configurable high and low ",
        "37": " * values, slope, and inflection point.",
        "71": "\t\tmyInflection = inflection;",
        "72": "\t\tmyMultiplier = slope * 4f; //usual slope is 1/4",
        "11": "\"A one-dimensional sigmoid function with configurable high and low ",
        "12": "  values, slope, and inflection point.",
        "93": "\t */",
        "53": "\t/**",
        "54": "\t * Default parameters (inflection=0; slope=1/4; low=0; high=1). ",
        "91": "\t/**",
        "92": "\t * @return Slope at inflection point ",
        "61": "\t * @param inflection Inflection point",
        "62": "\t * @param slope Slope at inflection point (usually 1/4)"
      },
      "id": 71691482,
      "filename": "SigmoidFunction.java"
    },
    {
      "repo": "https://bitbucket.org/eug48/xmind3-releases-mirror",
      "language": "Java",
      "linescount": 958,
      "location": "/org.xmind.gef/src/org/xmind/gef/draw2d/geometry",
      "name": "xmind3-releases-mirror",
      "url": "https://searchcode.com/codesearch/view/119534340/",
      "md5hash": "e587dcb496cf02635dc48b5b1ffea126",
      "lines": {
        "608": "                width = constrain(height / slope, minWidth, maxWidth);",
        "609": "        }",
        "578": "        return getScaledConstrainedSize2(size.width, size.height,",
        "579": "                slope(origin), minSize.width, minSize.height, maxSize.width,",
        "585": "            Dimension maxSize) {",
        "586": "        return getScaledConstrainedSize2(width, height, slope(origin),",
        "610": "        height = constrain(width * slope, minHeight, maxHeight);",
        "592": "            double minWidth, double minHeight, double maxWidth, double maxHeight) {",
        "593": "        return getScaledConstrainedSize2(width, height, slope(originWidth,",
        "611": "        width = constrain(height / slope, minWidth, maxWidth);",
        "597": "    public static Dimension getScaledConstrainedSize2(double width,",
        "598": "            double height, double slope, double minWidth, double minHeight,",
        "599": "            double maxWidth, double maxHeight) {",
        "600": "        double prefH = constrain(width * slope, minHeight, maxHeight);",
        "607": "            if (height >= 0)"
      },
      "id": 119534340,
      "filename": "Geometry.java"
    },
    {
      "repo": "https://bitbucket.org/l_kol/lotos1",
      "language": "Java",
      "linescount": 2780,
      "location": "/src/biz/altsoft/wayplot/way",
      "name": "lotos1",
      "url": "https://searchcode.com/codesearch/view/120492779/",
      "md5hash": "f3e6a276a94ecafb2a05c4e4220ff165",
      "lines": {
        "545": "            return false;",
        "546": "        if (Double.doubleToLongBits(this.slope) != Double.doubleToLongBits(other.slope))",
        "547": "            return false;",
        "777": "",
        "778": "    public double getSlope()",
        "779": "    {",
        "780": "        return slope;",
        "435": "            SleepersType sleepersType, int curve, double slope)",
        "782": "",
        "434": "    public WayPart(int start, int length, int startKm, int startM, int endKm, int endM, RailsType railsType,",
        "784": "    {",
        "785": "        this.slope = slope;",
        "18": "import biz.altsoft.wayplot.way.chars.SleepersMaterial;",
        "19": "import biz.altsoft.wayplot.way.chars.SlopeDirection;",
        "783": "    public void setSlope(double slope)"
      },
      "id": 120492779,
      "filename": "WayPart.java"
    },
    {
      "repo": "https://github.com/marcosemiao/android_packages_inputmethods_LatinIME.git",
      "language": "Java",
      "linescount": 204,
      "location": "/tests/src/com/android/inputmethod/keyboard/internal",
      "name": "android_packages_inputmethods_LatinIME",
      "url": "https://searchcode.com/codesearch/view/94095200/",
      "md5hash": "00dcec7add922005b93a37500e3468fd",
      "lines": {
        "67": "        assertEquals(\"p1y\", mYCoords[p1], mInterpolator.mP2Y);",
        "68": "        // XY-slope at p0=3.0 (-0.75/-0.25)",
        "69": "        assertFloatEquals(\"slope x p0\", -0.25f, mInterpolator.mSlope1X);",
        "70": "        assertFloatEquals(\"slope y p0\", -0.75f, mInterpolator.mSlope1Y);",
        "71": "        // XY-slope at p1=1/3.0 (0.50/1.50)",
        "72": "        assertFloatEquals(\"slope x p1\",  1.50f, mInterpolator.mSlope2X);",
        "105": "        assertFloatEquals(\"slope x p1\",  1.50f, mInterpolator.mSlope1X);",
        "74": "        // t=0.0 (p0)",
        "107": "        // XY-slope at p2=3.0 (1.50/0.50)",
        "108": "        assertFloatEquals(\"slope x p2\",  0.50f, mInterpolator.mSlope2X);",
        "109": "        assertFloatEquals(\"slope y p2\",  1.50f, mInterpolator.mSlope2Y);",
        "110": "        // t=0.0 (p1)",
        "141": "        assertFloatEquals(\"slope x p2\",  0.50f, mInterpolator.mSlope1X);",
        "142": "        assertFloatEquals(\"slope y p2\",  1.50f, mInterpolator.mSlope1Y);",
        "73": "        assertFloatEquals(\"slope y p1\",  0.50f, mInterpolator.mSlope2Y);",
        "143": "        // XY-slope at p3=1/3.0 (-0.25/-0.75)",
        "106": "        assertFloatEquals(\"slope y p1\",  0.50f, mInterpolator.mSlope1Y);"
      },
      "id": 94095200,
      "filename": "HermiteInterpolatorTests.java"
    },
    {
      "repo": "https://github.com/ynskog/grafica.git",
      "language": "Java",
      "linescount": 2482,
      "location": "/src/grafica",
      "name": "grafica",
      "url": "https://searchcode.com/codesearch/view/94296497/",
      "md5hash": "674a91f9af728bf451847ba769cc6857",
      "lines": {
        "1056": "     *            the line slope",
        "1057": "     * @param yCut",
        "548": "                    nCuts = 4;",
        "549": "                    cuts[0][0] = -yCut / slope;",
        "550": "                    cuts[0][1] = 0;",
        "1063": "     */",
        "1064": "    public void drawLine(float slope, float yCut, int lc, float lw) {",
        "555": "                    cuts[3][0] = dim[0];",
        "556": "                    cuts[3][1] = yCut + slope * dim[0];",
        "541": "                } else {",
        "1054": "     * ",
        "1055": "     * @param slope",
        "1052": "    /**",
        "1053": "     * Draws a line defined by the slope and the cut in the y axis",
        "542": "                    // Obtain the straight line (y = yCut + slope*x) that",
        "543": "                    // crosses the two points"
      },
      "id": 94296497,
      "filename": "GLayer.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 875,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 507,
      "source": "Github",
      "id": 2
    },
    {
      "count": 149,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 82,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 10,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 1,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 1,
      "source": "Google Android",
      "id": 12
    }
  ]
}