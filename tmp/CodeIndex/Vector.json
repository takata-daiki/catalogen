{
  "matchterm": "Vector",
  "previouspage": null,
  "searchterm": "Vector",
  "query": "Vector",
  "language_filters": [
    {
      "count": 89877,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 89876,
  "results": [
    {
      "repo": "https://github.com/dr1861/jcute.git",
      "language": "Java",
      "linescount": 1022,
      "location": "/src/instrumented/java/util",
      "name": "jcute",
      "url": "https://searchcode.com/codesearch/view/92835246/",
      "md5hash": "2fa1ef6d0ba2e16efae25a4280d8c611",
      "lines": {
        "1": "/*",
        "2": " * @(#)Vector.java\t1.89 03/01/23",
        "12": "/**",
        "13": " * The <code>Vector</code> class implements a growable array of ",
        "15": " * accessed using an integer index. However, the size of a ",
        "16": " * <code>Vector</code> can grow or shrink as needed to accommodate ",
        "17": " * adding and removing items after the <code>Vector</code> has been created.<p>",
        "18": " *",
        "19": " * Each vector tries to optimize storage management by maintaining a ",
        "20": " * <code>capacity</code> and a <code>capacityIncrement</code>. The ",
        "21": " * <code>capacity</code> is always at least as large as the vector ",
        "22": " * size; it is usually larger because as components are added to the ",
        "23": " * vector, the vector's storage increases in chunks the size of ",
        "24": " * <code>capacityIncrement</code>. An application can increase the ",
        "25": " * capacity of a vector before inserting a large number of "
      },
      "id": 92835246,
      "filename": "Vector.java"
    },
    {
      "repo": "https://bitbucket.org/thelearninglabs/uclinux-distro-tll-public.git",
      "language": "Java",
      "linescount": 938,
      "location": "/lib/classpath/java/util",
      "name": "uclinux-distro-tll-public",
      "url": "https://searchcode.com/codesearch/view/37723011/",
      "md5hash": "69421a3b716510057217c3984effe6c0",
      "lines": {
        "1": "/* Vector.java -- Class that provides growable arrays.",
        "2": "   Copyright (C) 1998, 1999, 2000, 2001, 2004, 2005, 2006,  ",
        "47": "/**",
        "48": " * The <code>Vector</code> classes implements growable arrays of Objects.",
        "49": " * You can access elements in a Vector with an index, just as you",
        "50": " * can in a built in array, but Vectors can grow and shrink to accommodate",
        "51": " * more or fewer objects.<p>",
        "52": " *",
        "53": " * Vectors try to mantain efficiency in growing by having a",
        "54": " * <code>capacityIncrement</code> that can be specified at instantiation.",
        "55": " * When a Vector can no longer hold a new Object, it grows by the amount",
        "56": " * in <code>capacityIncrement</code>. If this value is 0, the vector doubles in",
        "57": " * size.<p>",
        "58": " *",
        "59": " * Vector implements the JDK 1.2 List interface, and is therefore a fully",
        "60": " * compliant Collection object. The iterators are fail-fast - if external"
      },
      "id": 37723011,
      "filename": "Vector.java"
    },
    {
      "repo": "https://bitbucket.org/tari/prizm-gcc.git",
      "language": "Java",
      "linescount": 959,
      "location": "/libjava/classpath/java/util",
      "name": "prizm-gcc",
      "url": "https://searchcode.com/codesearch/view/37947213/",
      "md5hash": "223998178cffdcc23347a47fdbca6e08",
      "lines": {
        "1": "/* Vector.java -- Class that provides growable arrays.",
        "2": "   Copyright (C) 1998, 1999, 2000, 2001, 2004, 2005, 2006,",
        "47": "/**",
        "48": " * The <code>Vector</code> classes implements growable arrays of Objects.",
        "49": " * You can access elements in a Vector with an index, just as you",
        "50": " * can in a built in array, but Vectors can grow and shrink to accommodate",
        "51": " * more or fewer objects.<p>",
        "52": " *",
        "53": " * Vectors try to mantain efficiency in growing by having a",
        "54": " * <code>capacityIncrement</code> that can be specified at instantiation.",
        "55": " * When a Vector can no longer hold a new Object, it grows by the amount",
        "56": " * in <code>capacityIncrement</code>. If this value is 0, the vector doubles in",
        "57": " * size.<p>",
        "58": " *",
        "59": " * Vector implements the JDK 1.2 List interface, and is therefore a fully",
        "60": " * compliant Collection object. The iterators are fail-fast - if external"
      },
      "id": 37947213,
      "filename": "Vector.java"
    },
    {
      "repo": "https://bitbucket.org/bluezoo/gcc.git",
      "language": "Java",
      "linescount": 959,
      "location": "/libjava/classpath/java/util",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/46812848/",
      "md5hash": "223998178cffdcc23347a47fdbca6e08",
      "lines": {
        "1": "/* Vector.java -- Class that provides growable arrays.",
        "2": "   Copyright (C) 1998, 1999, 2000, 2001, 2004, 2005, 2006,",
        "47": "/**",
        "48": " * The <code>Vector</code> classes implements growable arrays of Objects.",
        "49": " * You can access elements in a Vector with an index, just as you",
        "50": " * can in a built in array, but Vectors can grow and shrink to accommodate",
        "51": " * more or fewer objects.<p>",
        "52": " *",
        "53": " * Vectors try to mantain efficiency in growing by having a",
        "54": " * <code>capacityIncrement</code> that can be specified at instantiation.",
        "55": " * When a Vector can no longer hold a new Object, it grows by the amount",
        "56": " * in <code>capacityIncrement</code>. If this value is 0, the vector doubles in",
        "57": " * size.<p>",
        "58": " *",
        "59": " * Vector implements the JDK 1.2 List interface, and is therefore a fully",
        "60": " * compliant Collection object. The iterators are fail-fast - if external"
      },
      "id": 46812848,
      "filename": "Vector.java"
    },
    {
      "repo": "http://beast-mcmc.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 366,
      "location": "/src/dr/math/matrixAlgebra",
      "name": "beast-mcmc",
      "url": "https://searchcode.com/codesearch/view/7747176/",
      "md5hash": "6aa11568603fdcbedd5a224b8bebb6f0",
      "lines": {
        "32": " */",
        "1": "/*",
        "2": " * Vector.java",
        "36": "\t/**",
        "37": "\t * Create a vector of given dimension.",
        "33": "public class Vector {",
        "41": "\t */",
        "42": "\tpublic Vector(double comp[]) throws NegativeArraySizeException {",
        "45": "\t\t\tthrow new NegativeArraySizeException(",
        "46": "\t\t\t\t\t\"Vector components cannot be empty\");",
        "50": "",
        "51": "\tpublic Vector(int comp[]) throws NegativeArraySizeException {",
        "54": "\t\t\tthrow new NegativeArraySizeException(",
        "55": "\t\t\t\t\t\"Vector components cannot be empty\");",
        "28": "/**",
        "29": " * Vector implementation"
      },
      "id": 7747176,
      "filename": "Vector.java"
    },
    {
      "repo": "http://metastudio.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 278,
      "location": "/metastudio/src/org/meta/math",
      "name": "metastudio",
      "url": "https://searchcode.com/codesearch/view/11621308/",
      "md5hash": "7dd7a147df6a6a708198df28e9acdfb8",
      "lines": {
        "1": "/*",
        "2": " * Vector.java",
        "9": "/**",
        "10": " * Defines an R^n space vector.",
        "14": " */",
        "15": "public class Vector implements Cloneable {        ",
        "16": "  ",
        "17": "    /** Holds value of property vector. */",
        "18": "    protected double[] vector;",
        "19": "    ",
        "20": "    /** ",
        "21": "     * Creates a new instance of Vector ",
        "22": "     *",
        "23": "     * @param size the vector.length of this vector",
        "24": "     */"
      },
      "id": 11621308,
      "filename": "Vector.java"
    },
    {
      "repo": "http://android-gcc-objc2-0.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 934,
      "location": "/gcc-4.2.1/libjava/classpath/java/util",
      "name": "android-gcc-objc2-0",
      "url": "https://searchcode.com/codesearch/view/12732128/",
      "md5hash": "2b5b1681e1684f9d586e8b967d79a31f",
      "lines": {
        "1": "/* Vector.java -- Class that provides growable arrays.",
        "2": "   Copyright (C) 1998, 1999, 2000, 2001, 2004, 2005, 2006,  ",
        "47": "/**",
        "48": " * The <code>Vector</code> classes implements growable arrays of Objects.",
        "49": " * You can access elements in a Vector with an index, just as you",
        "50": " * can in a built in array, but Vectors can grow and shrink to accommodate",
        "51": " * more or fewer objects.<p>",
        "52": " *",
        "53": " * Vectors try to mantain efficiency in growing by having a",
        "54": " * <code>capacityIncrement</code> that can be specified at instantiation.",
        "55": " * When a Vector can no longer hold a new Object, it grows by the amount",
        "56": " * in <code>capacityIncrement</code>. If this value is 0, the vector doubles in",
        "57": " * size.<p>",
        "58": " *",
        "59": " * Vector implements the JDK 1.2 List interface, and is therefore a fully",
        "60": " * compliant Collection object. The iterators are fail-fast - if external"
      },
      "id": 12732128,
      "filename": "Vector.java"
    },
    {
      "repo": "https://bitbucket.org/lpimports/gcc.git",
      "language": "Java",
      "linescount": 959,
      "location": "/libjava/classpath/java/util",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/127596488/",
      "md5hash": "223998178cffdcc23347a47fdbca6e08",
      "lines": {
        "1": "/* Vector.java -- Class that provides growable arrays.",
        "2": "   Copyright (C) 1998, 1999, 2000, 2001, 2004, 2005, 2006,",
        "47": "/**",
        "48": " * The <code>Vector</code> classes implements growable arrays of Objects.",
        "49": " * You can access elements in a Vector with an index, just as you",
        "50": " * can in a built in array, but Vectors can grow and shrink to accommodate",
        "51": " * more or fewer objects.<p>",
        "52": " *",
        "53": " * Vectors try to mantain efficiency in growing by having a",
        "54": " * <code>capacityIncrement</code> that can be specified at instantiation.",
        "55": " * When a Vector can no longer hold a new Object, it grows by the amount",
        "56": " * in <code>capacityIncrement</code>. If this value is 0, the vector doubles in",
        "57": " * size.<p>",
        "58": " *",
        "59": " * Vector implements the JDK 1.2 List interface, and is therefore a fully",
        "60": " * compliant Collection object. The iterators are fail-fast - if external"
      },
      "id": 127596488,
      "filename": "Vector.java"
    },
    {
      "repo": "https://bitbucket.org/vaporoid/gcc.git",
      "language": "Java",
      "linescount": 959,
      "location": "/libjava/classpath/java/util",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/130224857/",
      "md5hash": "223998178cffdcc23347a47fdbca6e08",
      "lines": {
        "1": "/* Vector.java -- Class that provides growable arrays.",
        "2": "   Copyright (C) 1998, 1999, 2000, 2001, 2004, 2005, 2006,",
        "47": "/**",
        "48": " * The <code>Vector</code> classes implements growable arrays of Objects.",
        "49": " * You can access elements in a Vector with an index, just as you",
        "50": " * can in a built in array, but Vectors can grow and shrink to accommodate",
        "51": " * more or fewer objects.<p>",
        "52": " *",
        "53": " * Vectors try to mantain efficiency in growing by having a",
        "54": " * <code>capacityIncrement</code> that can be specified at instantiation.",
        "55": " * When a Vector can no longer hold a new Object, it grows by the amount",
        "56": " * in <code>capacityIncrement</code>. If this value is 0, the vector doubles in",
        "57": " * size.<p>",
        "58": " *",
        "59": " * Vector implements the JDK 1.2 List interface, and is therefore a fully",
        "60": " * compliant Collection object. The iterators are fail-fast - if external"
      },
      "id": 130224857,
      "filename": "Vector.java"
    },
    {
      "repo": "https://bitbucket.org/snowtweets/mia",
      "language": "Java",
      "linescount": 314,
      "location": "/ca/uwaterloo/fes/mia/v1/iquitos",
      "name": "mia",
      "url": "https://searchcode.com/codesearch/view/53330609/",
      "md5hash": "ccd8bf11c52d8cbd1f5b81841021383c",
      "lines": {
        "160": "\t\t\t",
        "1": "// Vector Agent Class",
        "2": "package ca.uwaterloo.fes.mia.v1.iquitos;",
        "163": "\t\t\tvX = x + Integer.parseInt(dir.get(0).toString());",
        "166": "",
        "161": "\t\t\tif (vX < 0 || vX > (miaSpace.getCurrentVectorSpace().getSizeX()-1)) System.out.println(\"wtf\");",
        "201": "\t\t\t//if (vX < 0 || vX > (miaSpace.getCurrentVectorSpace().getSizeX()-1)) System.out.println(\"wtf\");",
        "202": "\t\t\t//if (vY < 0 || vY > (miaSpace.getCurrentVectorSpace().getSizeY()-1)) System.out.println(\"wtf\");",
        "167": "\t\t\tmiaSpace.moveVectorAt(x,y,vX,vY,this);",
        "162": "\t\t\tif (vY < 0 || vY > (miaSpace.getCurrentVectorSpace().getSizeY()-1)) System.out.println(\"wtf\");",
        "16": "",
        "17": "public class VectorAgent implements Drawable{",
        "203": "\t\t\tvX = x + Integer.parseInt(dir.get(0).toString());",
        "217": "\t\t",
        "57": "\t\t\treturn false;",
        "58": "\t\tVectorAgent other = (VectorAgent) obj;",
        "218": "\t\t\tmiaSpace.moveVectorAt(x,y,vX,vY,this);"
      },
      "id": 53330609,
      "filename": "VectorAgent.java"
    },
    {
      "repo": "git://github.com/metsci/glimpse.git",
      "language": "Java",
      "linescount": 6,
      "location": "/util/src/main/java/com/metsci/glimpse/util/vector",
      "name": "glimpse",
      "url": "https://searchcode.com/codesearch/view/16557839/",
      "md5hash": "52f7cb081ae230be0ac4689c50c8322b",
      "lines": {
        "1": "/**",
        "2": " * Vector classes for representing 2 and 3 dimensional vectors.",
        "3": " */",
        "4": "package com.metsci.glimpse.util.vector;"
      },
      "id": 16557839,
      "filename": "package-info.java"
    },
    {
      "repo": "https://github.com/bennorton777/Machine-Learning-Project-2.git",
      "language": "Java",
      "linescount": 290,
      "location": "/src/util/linalg",
      "name": "Machine-Learning-Project-2",
      "url": "https://searchcode.com/codesearch/view/71505091/",
      "md5hash": "7bc27f35491418142bdd83a9df3a1968",
      "lines": {
        "35": "     */",
        "36": "    public Vector get(int ia, int ib) {",
        "49": "    public void set(int i, Vector values) {",
        "8": "/**",
        "9": " * A class representing a vector with linear algebra",
        "44": "    /**",
        "13": " */",
        "14": "public abstract class Vector implements Serializable, Copyable {",
        "45": "     * Set a portion of the vector",
        "48": "     */",
        "17": "    /**",
        "18": "     * Get the size of the vector (the number of rows)",
        "41": "        return new DenseVector(result);",
        "40": "        }",
        "30": "    /**",
        "31": "     * Get some sub portion of the vector"
      },
      "id": 71505091,
      "filename": "Vector.java"
    },
    {
      "repo": "https://github.com/PAmoto/android_libcore.git",
      "language": "Java",
      "linescount": 1047,
      "location": "/luni/src/main/java/java/util",
      "name": "android_libcore",
      "url": "https://searchcode.com/codesearch/view/71754638/",
      "md5hash": "08bd44d00a7ef96b088ac94a04f87cc5",
      "lines": {
        "64": "     * Constructs a new vector using the default capacity.",
        "65": "     */",
        "66": "    public Vector() {",
        "70": "    /**",
        "38": " */",
        "39": "public class Vector<E> extends AbstractList<E> implements List<E>,",
        "71": "     * Constructs a new vector using the specified capacity.",
        "44": "    /**",
        "45": "     * The number of elements or the size of the vector.",
        "49": "    /**",
        "50": "     * The elements of the vector.",
        "54": "    /**",
        "55": "     * How many elements should be added to the vector when it is detected that",
        "25": "/**",
        "26": " * Vector is an implementation of {@link List}, backed by an array and synchronized.",
        "63": "    /**"
      },
      "id": 71754638,
      "filename": "Vector.java"
    },
    {
      "repo": "https://github.com/purpleposeidon/craftbook.git",
      "language": "Java",
      "linescount": 559,
      "location": "/oldsrc/commonrefactor/com/sk89q/craftbook/util",
      "name": "craftbook",
      "url": "https://searchcode.com/codesearch/view/78595700/",
      "md5hash": "adbf182d979c03ca648221ad1b01bd33",
      "lines": {
        "68": "    /**",
        "35": "     */",
        "36": "    public Vector(double x, double y, double z) {",
        "69": "     * Construct the Vector object.",
        "42": "    /**",
        "43": "     * Construct the Vector object.",
        "61": "     */",
        "48": "     */",
        "49": "    public Vector(int x, int y, int z) {",
        "62": "    public Vector(float x, float y, float z) {",
        "55": "    /**",
        "56": "     * Construct the Vector object.",
        "25": " */",
        "26": "public class Vector {",
        "29": "    /**",
        "30": "     * Construct the Vector object."
      },
      "id": 78595700,
      "filename": "Vector.java"
    },
    {
      "repo": "https://github.com/eeline/callandresponse.git",
      "language": "Java",
      "linescount": 202,
      "location": "/project/src/collections",
      "name": "callandresponse",
      "url": "https://searchcode.com/codesearch/view/73996045/",
      "md5hash": "b6c8c684bffef5a181e3c3beb5e9528e",
      "lines": {
        "64": "\t\t\tpublic boolean hasNext(){",
        "65": "\t\t\t\treturn this.vector.handler.incrementTil(true);",
        "68": "\t\t\tpublic Object next(){",
        "69": "\t\t\t\treturn this.vector.get();",
        "7": "",
        "8": "public class Vector implements Collection, Serializable {",
        "94": "\t\t\t\tVector.this.resizeHandler.resizeArray();",
        "93": "\t\t\tif (objectsPut >= Vector.this.internalArray.length)",
        "20": "\t",
        "21": "\tpublic Vector(){",
        "22": "\t\tthis(Vector.BASE_SIZE);",
        "23": "\t}",
        "24": "\t",
        "25": "\tpublic Vector(final int declared_size){",
        "92": "\t\tboolean incrementTil(boolean forGet){",
        "61": "\t\tTraverser traverser = new Traverser(){",
        "62": "\t\t\tVector vector = Vector.this;"
      },
      "id": 73996045,
      "filename": "Vector.java"
    },
    {
      "repo": "https://github.com/alevalv/simulacion-cardumen-peces.git",
      "language": "Java",
      "linescount": 62,
      "location": "/src/scp/logica",
      "name": "simulacion-cardumen-peces",
      "url": "https://searchcode.com/codesearch/view/73569214/",
      "md5hash": "26d3e80b4f894266f86aafb9bf80bb0c",
      "lines": {
        "2": "",
        "3": "public class Vector {",
        "7": "",
        "8": "    public Vector() {",
        "45": "",
        "12": "",
        "13": "    public Vector(double x, double y) {",
        "46": "    public static Vector add(Vector v1, Vector v2) {",
        "47": "        return new Vector((v1.getX() + v2.getX()), (v1.getY() + v2.getY()));",
        "48": "    }",
        "49": "",
        "50": "    public static Vector sub(Vector v1, Vector v2) {",
        "51": "        return new Vector((v1.getX() - v2.getX()), (v1.getY() - v2.getY()));",
        "52": "    }",
        "53": "",
        "54": "    public static Vector div(Vector v1, double A) {",
        "55": "        return new Vector(v1.getX() / A, v1.getY() / A);"
      },
      "id": 73569214,
      "filename": "Vector.java"
    },
    {
      "repo": "https://github.com/maloney626/SoftwareEngineeringProject.git",
      "language": "Java",
      "linescount": 88,
      "location": "/SoftwareEngineeringProject/src/edu/ycp/cs320/fokemon_webApp/client",
      "name": "SoftwareEngineeringProject",
      "url": "https://searchcode.com/codesearch/view/72425768/",
      "md5hash": "e6c6dbb9dadc5cf1f78ef765b2e28bdb",
      "lines": {
        "75": "",
        "37": "",
        "38": "\tpublic void add(Vector v) {",
        "41": "",
        "42": "\tpublic void sub(Vector v) {",
        "55": "",
        "76": "\tpublic void set(Vector v) {",
        "16": "",
        "17": "public class Vector {",
        "19": "",
        "20": "\tpublic Vector() {",
        "23": "",
        "24": "\tpublic Vector(double x, double y) {",
        "56": "\tpublic void mult(Vector v) {",
        "28": "",
        "29": "\tpublic Vector(Vector v) {"
      },
      "id": 72425768,
      "filename": "Vector.java"
    },
    {
      "repo": "https://github.com/dotfeng/lwjgl.git",
      "language": "Java",
      "linescount": 113,
      "location": "/src/java/org/lwjgl/util/vector",
      "name": "lwjgl",
      "url": "https://searchcode.com/codesearch/view/72932639/",
      "md5hash": "00869d7c753bbcdd28ebb20d0fd5a3a1",
      "lines": {
        "32": "package org.lwjgl.util.vector;",
        "67": "\t/**",
        "68": "\t * Load this vector from a FloatBuffer",
        "38": " *",
        "39": " * Base class for vectors.",
        "44": " */",
        "45": "public abstract class Vector implements Serializable, ReadableVector {",
        "47": "\t/**",
        "48": "\t * Constructor for Vector.",
        "49": "\t */",
        "50": "\tprotected Vector() {",
        "54": "\t/**",
        "55": "\t * @return the length of the vector",
        "63": "\t * @return the length squared of the vector",
        "62": "\t/**",
        "31": " */"
      },
      "id": 72932639,
      "filename": "Vector.java"
    },
    {
      "repo": "https://github.com/vampireneo/Boids.git",
      "language": "Java",
      "linescount": 86,
      "location": "/src/info/girafik/boids",
      "name": "Boids",
      "url": "https://searchcode.com/codesearch/view/73676481/",
      "md5hash": "7ae2ec9708b65e0d37bbc6dc3354e320",
      "lines": {
        "64": "\tpublic float multiply(Vector that) {",
        "48": "",
        "4": "",
        "5": "public class Vector {",
        "49": "\tpublic Vector divide(float c) {",
        "41": "",
        "10": "",
        "11": "\tpublic Vector(float x, float y, float z) {",
        "16": "",
        "17": "\tpublic Vector add(Vector that) {",
        "23": "",
        "24": "\tpublic Vector subtract(Vector that) {",
        "63": "",
        "42": "\tpublic Vector multiply(float c) {",
        "30": "",
        "31": "\tpublic Vector limit(float limit) {"
      },
      "id": 73676481,
      "filename": "Vector.java"
    },
    {
      "repo": "https://bitbucket.org/meijer/gwt-openlayers",
      "language": "Java",
      "linescount": 377,
      "location": "/gwt-openlayers-client/src/main/java/org/gwtopenmaps/openlayers/client/layer",
      "name": "gwt-openlayers",
      "url": "https://searchcode.com/codesearch/view/76414883/",
      "md5hash": "26bbada4b7a4bd04de1b578653b340d2",
      "lines": {
        "32": "import org.gwtopenmaps.openlayers.client.event.VectorFeatureAddedListener;",
        "33": "import org.gwtopenmaps.openlayers.client.event.VectorFeatureAddedListener.FeatureAddedEvent;",
        "34": "import org.gwtopenmaps.openlayers.client.event.VectorFeatureModifiedListener;",
        "35": "import org.gwtopenmaps.openlayers.client.event.VectorFeatureModifiedListener.FeatureModifiedEvent;",
        "36": "import org.gwtopenmaps.openlayers.client.event.VectorFeatureRemovedListener;",
        "37": "import org.gwtopenmaps.openlayers.client.event.VectorFeatureRemovedListener.FeatureRemovedEvent;",
        "38": "import org.gwtopenmaps.openlayers.client.event.VectorFeatureSelectedListener;",
        "39": "import org.gwtopenmaps.openlayers.client.event.VectorFeatureSelectedListener.FeatureSelectedEvent;",
        "40": "import org.gwtopenmaps.openlayers.client.event.VectorFeatureUnselectedListener;",
        "41": "import org.gwtopenmaps.openlayers.client.event.VectorFeatureUnselectedListener.FeatureUnselectedEvent;",
        "25": "import org.gwtopenmaps.openlayers.client.event.EventType;",
        "26": "import org.gwtopenmaps.openlayers.client.event.VectorAfterFeatureModifiedListener;",
        "27": "import org.gwtopenmaps.openlayers.client.event.VectorAfterFeatureModifiedListener.AfterFeatureModifiedEvent;",
        "28": "import org.gwtopenmaps.openlayers.client.event.VectorBeforeFeatureAddedListener;",
        "31": "import org.gwtopenmaps.openlayers.client.event.VectorBeforeFeatureModifiedListener.BeforeFeatureModifiedEvent;"
      },
      "id": 76414883,
      "filename": "Vector.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 48436,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 26490,
      "source": "Github",
      "id": 2
    },
    {
      "count": 10865,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 3243,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 466,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 227,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 127,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 15,
      "source": "Gitorious",
      "id": 10
    },
    {
      "count": 8,
      "source": "Google Android",
      "id": 12
    }
  ]
}