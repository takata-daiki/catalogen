{
  "matchterm": "DocumentInputStream",
  "previouspage": null,
  "searchterm": "DocumentInputStream",
  "query": "DocumentInputStream",
  "language_filters": [
    {
      "count": 48,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 48,
  "results": [
    {
      "repo": "https://github.com/minstrelsy/POI-Android.git",
      "language": "Java",
      "linescount": 174,
      "location": "/ppt/poi/org/apache/poi/poifs/filesystem",
      "name": "POI-Android",
      "url": "https://searchcode.com/codesearch/view/97397924/",
      "md5hash": "a62824300869ffa075859750e715454a",
      "lines": {
        "64": "\t      delegate = new NDocumentInputStream(document);",
        "74": "\t */",
        "38": "\t",
        "39": "\tprivate DocumentInputStream delegate;",
        "41": "\t/** For use by downstream implementations */",
        "42": "\tprotected DocumentInputStream() {}",
        "75": "\tpublic DocumentInputStream(POIFSDocument document) {",
        "76": "\t   delegate = new ODocumentInputStream(document);",
        "63": "\t   } else if(parentNode.getNFileSystem() != null) {",
        "51": "\t */",
        "52": "\tpublic DocumentInputStream(DocumentEntry document) throws IOException {",
        "62": "\t      delegate = new ODocumentInputStream(document);",
        "59": "\t   if(documentNode.getDocument() != null) {",
        "60": "\t      delegate = new ODocumentInputStream(document);",
        "61": "\t   } else if(parentNode.getFileSystem() != null) {",
        "30": " */",
        "31": "public class DocumentInputStream extends InputStream implements LittleEndianInput {"
      },
      "id": 97397924,
      "filename": "DocumentInputStream.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 480,
      "location": "/components/forks/poi/src/loci/poi/poifs/filesystem",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642283/",
      "md5hash": "780a8fadedc97af7e64c7b8a48712256",
      "lines": {
        "54": "",
        "119": "",
        "120": "    public DocumentInputStream(final POIFSDocument document,",
        "55": "public class DocumentInputStream",
        "91": "",
        "92": "    public DocumentInputStream(final DocumentEntry document,",
        "477": "    }",
        "478": "}   // end public class DocumentInputStream"
      },
      "id": 15642283,
      "filename": "DocumentInputStream.java"
    },
    {
      "repo": "https://github.com/solsson/tika.git",
      "language": "Java",
      "linescount": 595,
      "location": "/tika-parsers/src/main/java/org/apache/tika/parser/microsoft",
      "name": "tika",
      "url": "https://searchcode.com/codesearch/view/111785559/",
      "md5hash": "6b55090236799f49ee0f5bd7d54bbbac",
      "lines": {
        "275": "            // Create event factory and process Workbook (fire events)",
        "276": "            DocumentInputStream documentInputStream = filesystem.createDocumentInputStream(\"Workbook\");",
        "277": "            HSSFEventFactory eventFactory = new HSSFEventFactory();",
        "278": "            eventFactory.processEvents(hssfRequest, documentInputStream);",
        "61": "import org.apache.poi.poifs.filesystem.DirectoryEntry;",
        "62": "import org.apache.poi.poifs.filesystem.DocumentInputStream;"
      },
      "id": 111785559,
      "filename": "ExcelExtractor.java"
    },
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 270,
      "location": "/src/org/apache/poi/poifs/filesystem",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97383212/",
      "md5hash": "3e82db13f1b60dbf552f1788134392b0",
      "lines": {
        "251": "          inpB = new DocumentInputStream(docB);",
        "54": "            DocumentEntry dentry = (DocumentEntry) entry;",
        "247": "       boolean matches = true;",
        "248": "       DocumentInputStream inpA = null, inpB = null;",
        "249": "       try {",
        "250": "          inpA = new DocumentInputStream(docA);",
        "55": "            DocumentInputStream dstream = new DocumentInputStream( dentry );",
        "252": "          "
      },
      "id": 97383212,
      "filename": "EntryUtils.java"
    },
    {
      "repo": "https://github.com/solsson/tika.git",
      "language": "Java",
      "linescount": 156,
      "location": "/tika-parsers/src/main/java/org/apache/tika/parser/microsoft",
      "name": "tika",
      "url": "https://searchcode.com/codesearch/view/111785558/",
      "md5hash": "64d1deabff94104c27c2076ff362e8df",
      "lines": {
        "81": "        } catch (MarkUnsupportedException e) {",
        "82": "            throw new TikaException(\"Invalid DocumentInputStream\", e);",
        "67": "            PropertySet properties =",
        "68": "                new PropertySet(new DocumentInputStream(entry));",
        "30": "import org.apache.poi.poifs.filesystem.DocumentEntry;",
        "31": "import org.apache.poi.poifs.filesystem.DocumentInputStream;"
      },
      "id": 111785558,
      "filename": "SummaryExtractor.java"
    },
    {
      "repo": "https://github.com/solsson/tika.git",
      "language": "Java",
      "linescount": 140,
      "location": "/tika-parsers/src/main/java/org/apache/tika/parser/microsoft",
      "name": "tika",
      "url": "https://searchcode.com/codesearch/view/111785564/",
      "md5hash": "00cd5fb17c44cf06140281a60e81832a",
      "lines": {
        "84": "          TikaInputStream ooxmlStream = TikaInputStream.get(",
        "85": "                new DocumentInputStream((DocumentEntry)ooxml)",
        "134": "                InputStream contents = new DocumentInputStream((DocumentEntry)entry); ",
        "26": "import org.apache.poi.poifs.filesystem.DocumentEntry;",
        "27": "import org.apache.poi.poifs.filesystem.DocumentInputStream;",
        "133": "                // Copy entry"
      },
      "id": 111785564,
      "filename": "AbstractPOIFSExtractor.java"
    },
    {
      "repo": "https://github.com/minstrelsy/POI-Android.git",
      "language": "Java",
      "linescount": 275,
      "location": "/ppt/scratchpad/src/org/apache/poi/hslf/usermodel",
      "name": "POI-Android",
      "url": "https://searchcode.com/codesearch/view/97394952/",
      "md5hash": "d46d9fc3abfee8ffc6df3e3fa372d533",
      "lines": {
        "259": "",
        "260": "\tpublic DocumentInputStream getStream() {",
        "21": "",
        "22": "import org.apache.poi.poifs.filesystem.DocumentInputStream;",
        "264": "\tpublic int rawdataPos;",
        "265": "\tDocumentInputStream is;",
        "267": "",
        "268": "\tpublic void setSteram(DocumentInputStream is, int pos, int imgsize) {"
      },
      "id": 97394952,
      "filename": "PictureData.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 260,
      "location": "/components/forks/poi/src/loci/poi/hssf/eventusermodel",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642337/",
      "md5hash": "880394f1b0f8ed8b4183af136268bc56",
      "lines": {
        "128": "     * Processes a DocumentInputStream into essentially Record events.",
        "129": "     *",
        "83": "        InputStream in = fs.createDocumentInputStream(\"Workbook\");",
        "131": "     * @param req       an Instance of HSSFRequest which has your registered listeners",
        "132": "     * @param in        a DocumentInputStream obtained from POIFS's POIFSFileSystem object",
        "146": "\t * @param req       an Instance of HSSFRequest which has your registered listeners",
        "147": "\t * @param in        a DocumentInputStream obtained from POIFS's POIFSFileSystem object",
        "130": "     * @see loci.poi.poifs.filesystem.POIFSFileSystem#createDocumentInputStream(String)",
        "142": "     /**",
        "143": "\t * Processes a DocumentInputStream into essentially Record events.",
        "144": "\t *",
        "145": "\t * @see loci.poi.poifs.filesystem.POIFSFileSystem#createDocumentInputStream(String)",
        "50": "/**",
        "51": " * Low level event based HSSF reader.  Pass either a DocumentInputStream to",
        "82": "    {",
        "127": "    /**"
      },
      "id": 15642337,
      "filename": "HSSFEventFactory.java"
    },
    {
      "repo": "http://eid-applet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 630,
      "location": "/eid-applet-service-signer/src/main/java/be/fedict/eid/applet/service/signer",
      "name": "eid-applet",
      "url": "https://searchcode.com/codesearch/view/7982611/",
      "md5hash": "53ef8d97a576361c0bad08d1ecda167a",
      "lines": {
        "618": "\t\tNoCloseInputStream noCloseInputStream = new NoCloseInputStream(",
        "615": "",
        "616": "\tprotected Document loadDocumentNoClose(InputStream documentInputStream)",
        "265": "\t\ttry {",
        "266": "\t\t\tdocument = loadDocument(documentInputStream);",
        "619": "\t\t\t\tdocumentInputStream);",
        "254": "\t\tTemporaryDataStorage temporaryDataStorage = getTemporaryDataStorage();",
        "603": "",
        "604": "\tprotected Document loadDocument(InputStream documentInputStream)",
        "605": "\t\t\tthrows ParserConfigurationException, SAXException, IOException {",
        "606": "\t\tInputSource inputSource = new InputSource(documentInputStream);",
        "255": "\t\tInputStream documentInputStream = temporaryDataStorage"
      },
      "id": 7982611,
      "filename": "AbstractXmlSignatureService.java"
    },
    {
      "repo": "http://eid-idp.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 208,
      "location": "/eid-idp-tests/src/test/java/test/integ/be/fedict/eid/idp",
      "name": "eid-idp",
      "url": "https://searchcode.com/codesearch/view/12938425/",
      "md5hash": "91731ee3b858602d787bfb0ad7188ab1",
      "lines": {
        "112": "\t\t\t\t.getResourceAsStream(\"/eid-idp-ws-fed-response.xml\");",
        "70": "\tpublic void testSAML2AssertionTokenSignature() throws Exception {",
        "71": "\t\tInputStream documentInputStream = WSFederationTest.class",
        "72": "\t\t\t\t.getResourceAsStream(\"/eid-idp-ws-fed-response.xml\");",
        "73": "\t\tassertNotNull(documentInputStream);",
        "110": "",
        "111": "\t\tInputStream documentInputStream = WSFederationTest.class",
        "80": "\t\tDocument wsFedDocument = documentBuilder.parse(documentInputStream);",
        "113": "\t\tassertNotNull(documentInputStream);",
        "119": "\t\t\t\t.newDocumentBuilder();",
        "120": "\t\tDocument wsFedDocument = documentBuilder.parse(documentInputStream);",
        "79": "\t\t\t\t.newDocumentBuilder();"
      },
      "id": 12938425,
      "filename": "WSFederationTest.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 104,
      "location": "/components/forks/poi/src/loci/poi/poifs/eventfilesystem",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642293/",
      "md5hash": "1e53c478518579e98dad7747cf35907b",
      "lines": {
        "67": "",
        "68": "    POIFSReaderEvent(final DocumentInputStream stream,",
        "44": "import loci.poi.poifs.filesystem.DocumentInputStream;",
        "43": "",
        "76": "    /**",
        "77": "     * @return the DocumentInputStream, freshly opened",
        "79": "",
        "80": "    public DocumentInputStream getStream()",
        "55": "{",
        "56": "    private DocumentInputStream stream;",
        "62": "     *",
        "63": "     * @param stream the DocumentInputStream, freshly opened"
      },
      "id": 15642293,
      "filename": "POIFSReaderEvent.java"
    },
    {
      "repo": "http://eid-idp.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 277,
      "location": "/eid-idp-protocol-ws-federation/src/test/java/test/unit/be/fedict/eid/idp/protocol/ws_federation",
      "name": "eid-idp",
      "url": "https://searchcode.com/codesearch/view/12938478/",
      "md5hash": "4f3526ef8090c3ed73ae6974626946a6",
      "lines": {
        "192": "\tprivate Document loadDocument(InputStream documentInputStream)",
        "193": "\t\t\tthrows ParserConfigurationException, SAXException, IOException {",
        "194": "\t\tInputSource inputSource = new InputSource(documentInputStream);",
        "164": "\t\t// setup",
        "165": "\t\tInputStream documentInputStream = WSFederationProtocolServiceTest.class",
        "166": "\t\t\t\t.getResourceAsStream(\"/FederationMetadata.xml\");",
        "167": "\t\tassertNotNull(documentInputStream);",
        "168": "",
        "169": "\t\tDocument document = loadDocument(documentInputStream);",
        "191": ""
      },
      "id": 12938478,
      "filename": "WSFederationMetadataHttpServletTest.java"
    },
    {
      "repo": "http://eid-idp.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 401,
      "location": "/eid-idp-protocol-ws-federation/src/test/java/test/unit/be/fedict/eid/idp/protocol/ws_federation",
      "name": "eid-idp",
      "url": "https://searchcode.com/codesearch/view/12938479/",
      "md5hash": "6c0b5af3ef5d57ff775747226c98b35c",
      "lines": {
        "225": "",
        "226": "\tprivate Document loadDocument(InputStream documentInputStream)",
        "227": "\t\t\tthrows ParserConfigurationException, SAXException, IOException {",
        "196": "\t\t// setup",
        "197": "\t\tInputStream documentInputStream = WSFederationProtocolServiceTest.class",
        "198": "\t\t\t\t.getResourceAsStream(\"/sts-response-message.xml\");",
        "199": "\t\tassertNotNull(documentInputStream);",
        "200": "",
        "201": "\t\tDocument document = loadDocument(documentInputStream);",
        "228": "\t\tInputSource inputSource = new InputSource(documentInputStream);"
      },
      "id": 12938479,
      "filename": "WSFederationProtocolServiceTest.java"
    },
    {
      "repo": "https://github.com/isdom/POI-Android.git",
      "language": "Java",
      "linescount": 190,
      "location": "/ppt/scratchpad/src/org/apache/poi/hsmf/parsers",
      "name": "POI-Android",
      "url": "https://searchcode.com/codesearch/view/88636100/",
      "md5hash": "9c88a7698cc287ccc385a9389ab3678d",
      "lines": {
        "35": "import org.apache.poi.poifs.filesystem.DirectoryNode;",
        "36": "import org.apache.poi.poifs.filesystem.DocumentInputStream;",
        "173": "                try {",
        "174": "                   DocumentInputStream inp = new DocumentInputStream((DocumentNode)entry);"
      },
      "id": 88636100,
      "filename": "POIFSChunkParser.java"
    },
    {
      "repo": "http://eid-applet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1344,
      "location": "/eid-applet-service-signer/src/test/java/test/unit/be/fedict/eid/applet/service/signer",
      "name": "eid-applet",
      "url": "https://searchcode.com/codesearch/view/7982566/",
      "md5hash": "1a7ab83fef31de24daa4544485f7c7ef",
      "lines": {
        "864": "\t\tInputSource inputSource = new InputSource(documentInputStream);",
        "822": "\tpublic void testLoadXMLFileWithDTD() throws Exception {",
        "823": "\t\tInputStream documentInputStream = AbstractXmlSignatureServiceTest.class",
        "825": "",
        "826": "\t\tInputSource inputSource = new InputSource(documentInputStream);",
        "860": "\t\t// setup",
        "861": "\t\tInputStream documentInputStream = AbstractXmlSignatureServiceTest.class",
        "863": ""
      },
      "id": 7982566,
      "filename": "AbstractXmlSignatureServiceTest.java"
    },
    {
      "repo": "https://bitbucket.org/AlexeyD/hibench.git",
      "language": "Java",
      "linescount": 232,
      "location": "/nutchindexing/nutch-1.2/src/plugin/parse-msword/src/java/org/apache/nutch/parse/msword",
      "name": "hibench",
      "url": "https://searchcode.com/codesearch/view/48925096/",
      "md5hash": "201b11b383ec9671f21b7ecae9a90b52",
      "lines": {
        "32": "import org.apache.poi.poifs.filesystem.DocumentInputStream;",
        "64": "    DocumentInputStream din = fsys.createDocumentInputStream(\"WordDocument\");",
        "114": "    din = fsys.createDocumentInputStream(tableName);",
        "113": "",
        "31": "import org.apache.poi.poifs.filesystem.DocumentEntry;",
        "63": "        (DocumentEntry)fsys.getRoot().getEntry(\"WordDocument\");"
      },
      "id": 48925096,
      "filename": "WordExtractor.java"
    },
    {
      "repo": "https://bitbucket.org/AlexeyD/hibench.git",
      "language": "Java",
      "linescount": 432,
      "location": "/nutchindexing/nutch-1.2/src/plugin/parse-mspowerpoint/src/java/org/apache/nutch/parse/mspowerpoint",
      "name": "hibench",
      "url": "https://searchcode.com/codesearch/view/48925118/",
      "md5hash": "75c37848bf3d7cb3ed9cca98daec6b70",
      "lines": {
        "76": "    try {",
        "29": "import org.apache.poi.poifs.eventfilesystem.POIFSReaderListener;",
        "30": "import org.apache.poi.poifs.filesystem.DocumentInputStream;",
        "77": "      final DocumentInputStream dis = event.getStream();"
      },
      "id": 48925118,
      "filename": "ContentReaderListener.java"
    },
    {
      "repo": "https://bitbucket.org/smitdevel/delta.git",
      "language": "Java",
      "linescount": 1169,
      "location": "/source/java/ee/webmedia/alfresco/imap/service",
      "name": "delta",
      "url": "https://searchcode.com/codesearch/view/50611261/",
      "md5hash": "44e67ff597e827966c9464b83db4169e",
      "lines": {
        "562": "                if (\"CONTENTS\".equals(entry.getName()) && entry instanceof DocumentNode) {",
        "563": "                    DocumentInputStream inputStream = root.createDocumentInputStream(entry);",
        "62": "import org.apache.poi.poifs.filesystem.DirectoryNode;",
        "63": "import org.apache.poi.poifs.filesystem.DocumentInputStream;"
      },
      "id": 50611261,
      "filename": "ImapServiceExtImpl.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 244,
      "location": "/components/forks/poi/src/loci/poi",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642236/",
      "md5hash": "d16ea92e13b3c1846cc34e8c5e120339",
      "lines": {
        "112": "\t\t\tdis = filesystem.createDocumentInputStream(setName);",
        "57": "import loci.poi.poifs.filesystem.DocumentEntry;",
        "58": "import loci.poi.poifs.filesystem.DocumentInputStream;",
        "235": "      DocumentInputStream dstream = new DocumentInputStream(dentry);",
        "108": "\tprotected PropertySet getPropertySet(String setName) {",
        "109": "\t\tDocumentInputStream dis;",
        "234": "\t\t  /*\t",
        "111": "\t\t\t// Find the entry, and get an input stream for it"
      },
      "id": 15642236,
      "filename": "POIDocument.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 183,
      "location": "/components/bio-formats/src/loci/formats/services",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15643830/",
      "md5hash": "7950a72da383fcccc650c3974e739f91",
      "lines": {
        "98": "  public InputStream getInputStream(String file) throws IOException {",
        "99": "    return new DocumentInputStream(files.get(file), stream);",
        "38": "import loci.poi.poifs.filesystem.DocumentEntry;",
        "39": "import loci.poi.poifs.filesystem.DocumentInputStream;",
        "171": "",
        "172": "        DocumentInputStream s =",
        "173": "          new DocumentInputStream((DocumentEntry) o, stream);",
        "174": "        fileSizes.put(path.toString(), new Integer(s.available()));"
      },
      "id": 15643830,
      "filename": "POIServiceImpl.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 24,
      "source": "Github",
      "id": 2
    },
    {
      "count": 19,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 5,
      "source": "Bitbucket",
      "id": 3
    }
  ]
}