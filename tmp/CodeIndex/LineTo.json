{
  "matchterm": "LineTo",
  "previouspage": null,
  "searchterm": "LineTo",
  "query": "LineTo",
  "language_filters": [
    {
      "count": 4164,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 4164,
  "results": [
    {
      "repo": "https://bitbucket.org/hawky4s/oryx.git",
      "language": "Java",
      "linescount": 66,
      "location": "/editor/server/src/de/hpi/visio/data",
      "name": "oryx",
      "url": "https://searchcode.com/codesearch/view/42466111/",
      "md5hash": "c30fab28df052e0775b82fc387042d92",
      "lines": {
        "45": "\t@Override",
        "46": "\tpublic int compareTo(LineTo other) {",
        "7": "/**",
        "8": " * Class for xmappr - xml to java mapping. LineTo actually isn't a line, but a",
        "41": "\t/**",
        "42": "\t * Compares two lineTos (dockers): Sorting of lineTos is done by their ids,",
        "12": " */",
        "13": "@RootElement(\"LineTo\")",
        "14": "public class LineTo implements Comparable<LineTo> {",
        "15": ""
      },
      "id": 42466111,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://bitbucket.org/rbair/rbair-controls-8",
      "language": "Java",
      "linescount": 191,
      "location": "/javafx-ui-common/src/javafx/scene/shape",
      "name": "rbair-controls-8",
      "url": "https://searchcode.com/codesearch/view/103092785/",
      "md5hash": "0a724e062eb32ec5baa491c5988b5a08",
      "lines": {
        "172": "        } else {",
        "170": "        if (isAbsolute()) {",
        "171": "            path.lineTo((float)getX(), (float)getY());",
        "140": "                public Object getBean() {",
        "141": "                    return LineTo.this;",
        "173": "            path.lineTo((float)(path.getCurrentX() + getX()),",
        "48": "path.getElements().add(new MoveTo(0.0f, 50.0f));",
        "49": "path.getElements().add(new LineTo(100.0f, 100.0f));",
        "178": "    /**",
        "179": "     * Returns a string representation of this {@code LineTo} object.",
        "180": "     * @return a string representation of this {@code LineTo} object.",
        "155": "        if (isAbsolute()) {",
        "156": "            pgPath.addLineTo((float)getX(), (float)getY());",
        "157": "        } else {",
        "158": "            pgPath.addLineTo((float)(pgPath.getCurrentX() + getX()),"
      },
      "id": 103092785,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://bitbucket.org/shemnon/openjfx-8-master-rt",
      "language": "Java",
      "linescount": 191,
      "location": "/javafx-ui-common/src/javafx/scene/shape",
      "name": "openjfx-8-master-rt",
      "url": "https://searchcode.com/codesearch/view/64650682/",
      "md5hash": "0a724e062eb32ec5baa491c5988b5a08",
      "lines": {
        "172": "        } else {",
        "170": "        if (isAbsolute()) {",
        "171": "            path.lineTo((float)getX(), (float)getY());",
        "140": "                public Object getBean() {",
        "141": "                    return LineTo.this;",
        "173": "            path.lineTo((float)(path.getCurrentX() + getX()),",
        "48": "path.getElements().add(new MoveTo(0.0f, 50.0f));",
        "49": "path.getElements().add(new LineTo(100.0f, 100.0f));",
        "178": "    /**",
        "179": "     * Returns a string representation of this {@code LineTo} object.",
        "180": "     * @return a string representation of this {@code LineTo} object.",
        "155": "        if (isAbsolute()) {",
        "156": "            pgPath.addLineTo((float)getX(), (float)getY());",
        "157": "        } else {",
        "158": "            pgPath.addLineTo((float)(pgPath.getCurrentX() + getX()),"
      },
      "id": 64650682,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://bitbucket.org/carrot_garden/openjfx-8-master-rt",
      "language": "Java",
      "linescount": 190,
      "location": "/javafx-ui-common/src/javafx/scene/shape",
      "name": "openjfx-8-master-rt",
      "url": "https://searchcode.com/codesearch/view/136761511/",
      "md5hash": "7ffb6e5f4ed0fadd0516c0653413d021",
      "lines": {
        "171": "        } else {",
        "179": "     * @return a string representation of this {@code LineTo} object.",
        "177": "    /**",
        "169": "        if (isAbsolute()) {",
        "170": "            path.lineTo((float)getX(), (float)getY());",
        "139": "                public Object getBean() {",
        "140": "                    return LineTo.this;",
        "48": "path.getElements().add(new MoveTo(0.0f, 50.0f));",
        "49": "path.getElements().add(new LineTo(100.0f, 100.0f));",
        "178": "     * Returns a string representation of this {@code LineTo} object.",
        "172": "            path.lineTo((float)(path.getCurrentX() + getX()),",
        "154": "        if (isAbsolute()) {",
        "155": "            pgPath.addLineTo((float)getX(), (float)getY());",
        "156": "        } else {",
        "157": "            pgPath.addLineTo((float)(pgPath.getCurrentX() + getX()),"
      },
      "id": 136761511,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://bitbucket.org/carrot_garden/openjfx-8-graphics-rt",
      "language": "Java",
      "linescount": 190,
      "location": "/javafx-ui-common/src/javafx/scene/shape",
      "name": "openjfx-8-graphics-rt",
      "url": "https://searchcode.com/codesearch/view/136764640/",
      "md5hash": "7ffb6e5f4ed0fadd0516c0653413d021",
      "lines": {
        "171": "        } else {",
        "179": "     * @return a string representation of this {@code LineTo} object.",
        "177": "    /**",
        "169": "        if (isAbsolute()) {",
        "170": "            path.lineTo((float)getX(), (float)getY());",
        "139": "                public Object getBean() {",
        "140": "                    return LineTo.this;",
        "48": "path.getElements().add(new MoveTo(0.0f, 50.0f));",
        "49": "path.getElements().add(new LineTo(100.0f, 100.0f));",
        "178": "     * Returns a string representation of this {@code LineTo} object.",
        "172": "            path.lineTo((float)(path.getCurrentX() + getX()),",
        "154": "        if (isAbsolute()) {",
        "155": "            pgPath.addLineTo((float)getX(), (float)getY());",
        "156": "        } else {",
        "157": "            pgPath.addLineTo((float)(pgPath.getCurrentX() + getX()),"
      },
      "id": 136764640,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://bitbucket.org/openjfxmirrors/openjfx-sandbox-8-controls-rt",
      "language": "Java",
      "linescount": 178,
      "location": "/javafx-ui-common/src/javafx/scene/shape",
      "name": "openjfx-sandbox-8-controls-rt",
      "url": "https://searchcode.com/codesearch/view/60435417/",
      "md5hash": "edb85f2c2b2a4c038bac6c83a0ae993c",
      "lines": {
        "172": "            path.lineTo((float)(path.getCurrentX() + getX()),",
        "171": "        } else {",
        "169": "        if (isAbsolute()) {",
        "170": "            path.lineTo((float)getX(), (float)getY());",
        "139": "                public Object getBean() {",
        "140": "                    return LineTo.this;",
        "48": "path.getElements().add(new MoveTo(0.0f, 50.0f));",
        "49": "path.getElements().add(new LineTo(100.0f, 100.0f));",
        "51": " */",
        "52": "public class LineTo extends PathElement {",
        "54": "    /**",
        "55": "     * Creates an empty instance of LineTo.",
        "56": "     */",
        "154": "        if (isAbsolute()) {",
        "155": "            pgPath.addLineTo((float)getX(), (float)getY());",
        "156": "        } else {",
        "157": "            pgPath.addLineTo((float)(pgPath.getCurrentX() + getX()),"
      },
      "id": 60435417,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://bitbucket.org/maxgoebel/tableannotator.git",
      "language": "Java",
      "linescount": 74,
      "location": "/plugins/pdfbox-1.6.0/src/at/ac/tuwien/dbai/pdfwrap/operator",
      "name": "tableannotator",
      "url": "https://searchcode.com/codesearch/view/50149077/",
      "md5hash": "2ccd3704611ea0e4f554bb2b86f5cd42",
      "lines": {
        "49": " */",
        "50": "public class LineTo extends OperatorProcessor",
        "67": "        //drawer.getLinePath().lineTo( x.floatValue(), (float)drawer.fixY( x.doubleValue(), y.doubleValue()) );",
        "68": "        Point2D Ppos = drawer.TransformedPoint(x.doubleValue(), y.doubleValue());",
        "69": "        drawer.getLinePath().lineTo((float)Ppos.getX(), (float)Ppos.getY());",
        "70": "        ",
        "71": "        ////drawer.simpleLineTo((float)Ppos.getX(), (float)Ppos.getY());",
        "72": "        drawer.simpleLineTo(x.floatValue(), y.floatValue());",
        "73": "    }",
        "66": "        "
      },
      "id": 50149077,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://bitbucket.org/shemnon/openjfx-rt",
      "language": "Java",
      "linescount": 178,
      "location": "/javafx-ui-common/src/javafx/scene/shape",
      "name": "openjfx-rt",
      "url": "https://searchcode.com/codesearch/view/132891187/",
      "md5hash": "edb85f2c2b2a4c038bac6c83a0ae993c",
      "lines": {
        "172": "            path.lineTo((float)(path.getCurrentX() + getX()),",
        "171": "        } else {",
        "169": "        if (isAbsolute()) {",
        "170": "            path.lineTo((float)getX(), (float)getY());",
        "139": "                public Object getBean() {",
        "140": "                    return LineTo.this;",
        "48": "path.getElements().add(new MoveTo(0.0f, 50.0f));",
        "49": "path.getElements().add(new LineTo(100.0f, 100.0f));",
        "51": " */",
        "52": "public class LineTo extends PathElement {",
        "54": "    /**",
        "55": "     * Creates an empty instance of LineTo.",
        "56": "     */",
        "154": "        if (isAbsolute()) {",
        "155": "            pgPath.addLineTo((float)getX(), (float)getY());",
        "156": "        } else {",
        "157": "            pgPath.addLineTo((float)(pgPath.getCurrentX() + getX()),"
      },
      "id": 132891187,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://github.com/uisleandro/org.eclipse.papyrus.git",
      "language": "Java",
      "linescount": 62,
      "location": "/extraplugins/diagram-definition/org.eclipse.papyrus.dd/src/org/eclipse/papyrus/dd/dg",
      "name": "org.eclipse.papyrus",
      "url": "https://searchcode.com/codesearch/view/97919822/",
      "md5hash": "c45559740512481ddef6b2a43a54c876",
      "lines": {
        "33": " */",
        "34": "public interface LineTo extends PathCommand {",
        "42": "\t * @see #setPoint(Point)",
        "43": "\t * @see org.eclipse.papyrus.dd.dg.DGPackage#getLineTo_Point()",
        "61": "} // LineTo",
        "49": "\t/**",
        "50": "\t * Sets the value of the '{@link org.eclipse.papyrus.dd.dg.LineTo#getPoint",
        "19": " * ",
        "20": " * <!-- begin-model-doc --> LineTo is a kind of path command that draw a",
        "25": " * <ul>",
        "26": " * <li>{@link org.eclipse.papyrus.dd.dg.LineTo#getPoint <em>Point</em>}</li>",
        "60": "",
        "29": " * ",
        "30": " * @see org.eclipse.papyrus.dd.dg.DGPackage#getLineTo()"
      },
      "id": 97919822,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://github.com/apache/pdfbox.git",
      "language": "Java",
      "linescount": 64,
      "location": "/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics",
      "name": "pdfbox",
      "url": "https://searchcode.com/codesearch/view/105579419/",
      "md5hash": "e70b0892e779927e37d0b06160adda31",
      "lines": {
        "48": "        {",
        "33": " */",
        "34": "public class LineTo extends GraphicsOperatorProcessor",
        "35": "{",
        "36": "    private static final Log LOG = LogFactory.getLog(LineTo.class);",
        "53": "        {",
        "54": "            context.lineTo(pos.x, pos.y);",
        "49": "            LOG.warn(\"LineTo (\" + pos.x + \",\" + pos.y + \") without initial MoveTo\");"
      },
      "id": 105579419,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://github.com/bioclipse/org.openscience.cdk.git",
      "language": "Java",
      "linescount": 47,
      "location": "/plugins/org.openscience.cdk.renderbasic/src/org/openscience/cdk/renderer/elements/path",
      "name": "org.openscience.cdk",
      "url": "https://searchcode.com/codesearch/view/111482711/",
      "md5hash": "07e5d696b2368d35b9f75def5c8f1a45",
      "lines": {
        "32": "public class LineTo extends PathElement {",
        "35": "",
        "36": "    public LineTo(Point2d point) {",
        "37": "",
        "38": "        super( Type.LineTo );",
        "31": " */"
      },
      "id": 111482711,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://bitbucket.org/maxgoebel/tableannotator.git",
      "language": "Java",
      "linescount": 55,
      "location": "/plugins/pdfbox-1.6.0/src/org/apache/pdfbox/util/operator/pagedrawer",
      "name": "tableannotator",
      "url": "https://searchcode.com/codesearch/view/50148427/",
      "md5hash": "ba2918b478c36a27c94d0c0a173eb398",
      "lines": {
        "33": " */",
        "34": "public class LineTo extends OperatorProcessor",
        "51": "        Point2D pos = drawer.transformedPoint(x.doubleValue(), y.doubleValue());",
        "52": "        drawer.getLinePath().lineTo((float)pos.getX(), (float)pos.getY());"
      },
      "id": 50148427,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://bitbucket.org/LucaREz/alchemistwithosm",
      "language": "Java",
      "linescount": 68,
      "location": "/nextreactionmodel/src/main/java/com/kitfox/svg/pathcmd",
      "name": "alchemistwithosm",
      "url": "https://searchcode.com/codesearch/view/136271803/",
      "md5hash": "1ccef80c32226f06c4f3e43f1f445c68",
      "lines": {
        "59": "        path.lineTo(x + offx, y + offy);",
        "58": "",
        "36": " */",
        "37": "public class LineTo extends PathCommand {",
        "42": "    /** Creates a new instance of MoveTo */",
        "43": "    public LineTo() {",
        "45": "",
        "46": "    public LineTo(boolean isRelative, float x, float y) {"
      },
      "id": 136271803,
      "filename": "LineTo.java"
    },
    {
      "repo": "https://bitbucket.org/dyp/geotools.git",
      "language": "Java",
      "linescount": 226,
      "location": "/modules/library/render/src/main/java/org/geotools/renderer/style",
      "name": "geotools",
      "url": "https://searchcode.com/codesearch/view/47137228/",
      "md5hash": "8886624db91e9f1d3b5819b2c75b9f74",
      "lines": {
        "96": "        starPath.lineTo(0.346f, 0.638f);",
        "97": "        starPath.lineTo(0.5f, 0.951f);",
        "70": "        crossPath.moveTo(0.5f, 0.125f);",
        "71": "        crossPath.lineTo(0.125f, 0.125f);",
        "72": "        crossPath.lineTo(0.125f, 0.5f);",
        "73": "        crossPath.lineTo(-0.125f, 0.5f);",
        "74": "        crossPath.lineTo(-0.125f, 0.125f);",
        "75": "        crossPath.lineTo(-0.5f, 0.125f);",
        "76": "        crossPath.lineTo(-0.5f, -0.125f);",
        "77": "        crossPath.lineTo(-0.125f, -0.125f);",
        "78": "        crossPath.lineTo(-0.125f, -0.5f);",
        "79": "        crossPath.lineTo(0.125f, -0.5f);",
        "80": "        crossPath.lineTo(0.125f, -0.125f);",
        "81": "        crossPath.lineTo(0.5f, -0.125f);",
        "95": "        starPath.lineTo(0.0f, 0.588f);"
      },
      "id": 47137228,
      "filename": "WellKnownMarkFactory.java"
    },
    {
      "repo": "https://bitbucket.org/nbargnesi/idea.git",
      "language": "Java",
      "linescount": 3182,
      "location": "/platform/platform-api/src/com/intellij/ui/tabs/impl",
      "name": "idea",
      "url": "https://searchcode.com/codesearch/view/39397139/",
      "md5hash": "89b3e57339d6ddc6947a9c86a6d197fb",
      "lines": {
        "1728": "      shape.path.quadTo(lastX, shape.labelTopY, lastX, shape.labelTopY + shape.path.deltaY(getArcSize()));",
        "1729": "      shape.path.lineTo(lastX, shape.labelBottomY);",
        "1732": "      if (rightEdge) {",
        "1733": "        shape.path.lineTo(shape.labelRightX + 1 - shape.path.deltaX(getArcSize()), shape.labelTopY);",
        "1800": "    if (isLeftFromSelection) {",
        "1801": "      path.lineTo(bottomX, topY);",
        "1803": "    else {",
        "1804": "      path.lineTo(bottomX - getArcSize(), topY);",
        "1715": "      shape.path.quadTo(shape.labelLeftX, shape.labelTopY, shape.labelLeftX + shape.labelPath.deltaX(getEdgeArcSize()), shape.labelTopY);",
        "1716": "      shape.path.lineTo(shape.labelRightX - shape.labelPath.deltaX(getArcSize()), shape.labelTopY);",
        "1718": "      shape.path.moveTo(shape.insets.left, shape.labelBottomY);",
        "1719": "      shape.path.lineTo(shape.labelLeftX, shape.labelBottomY);",
        "1720": "      shape.path.lineTo(shape.labelLeftX, shape.labelTopY + shape.labelPath.deltaY(getArcSize()));",
        "1721": "      shape.path.quadTo(shape.labelLeftX, shape.labelTopY, shape.labelLeftX + shape.labelPath.deltaX(getArcSize()), shape.labelTopY);",
        "1726": "    if (isStealthModeEffective()) {",
        "1727": "      shape.path.lineTo(lastX - shape.path.deltaX(getArcSize()), shape.labelTopY);"
      },
      "id": 39397139,
      "filename": "JBTabsImpl.java"
    },
    {
      "repo": "https://bitbucket.org/generalplus/android_packages_apps_settings.git",
      "language": "Java",
      "linescount": 734,
      "location": "/src/com/android/settings/fuelgauge",
      "name": "android_packages_apps_settings",
      "url": "https://searchcode.com/codesearch/view/35470403/",
      "md5hash": "24bc96cbaf7bb53e508886c8e5b530e6",
      "lines": {
        "416": "            mScreenOnPath.lineTo(w, h-mScreenOnOffset);",
        "546": "                            } else {",
        "547": "                                path.lineTo(x, y);",
        "421": "        if (lastWifiRunning) {",
        "422": "            mWifiRunningPath.lineTo(w, h-mWifiRunningOffset);",
        "402": "                if (lastPath != null) {",
        "403": "                    lastPath.lineTo(w, y);",
        "404": "                }",
        "405": "                curLevelPath.lineTo(w, y);",
        "406": "            }",
        "407": "            curLevelPath.lineTo(w, mLevelTop+levelh);",
        "408": "            curLevelPath.lineTo(startX, mLevelTop+levelh);",
        "409": "            curLevelPath.close();",
        "541": "                                if (lastLinePath != null) {",
        "542": "                                    lastLinePath.lineTo(x, y);",
        "415": "        if (lastScreenOn) {"
      },
      "id": 35470403,
      "filename": "BatteryHistoryChart.java"
    },
    {
      "repo": "https://bitbucket.org/iqm/android_gnexus_packages_apps_settings.git",
      "language": "Java",
      "linescount": 734,
      "location": "/src/com/android/settings/fuelgauge",
      "name": "android_gnexus_packages_apps_settings",
      "url": "https://searchcode.com/codesearch/view/36441982/",
      "md5hash": "24bc96cbaf7bb53e508886c8e5b530e6",
      "lines": {
        "416": "            mScreenOnPath.lineTo(w, h-mScreenOnOffset);",
        "546": "                            } else {",
        "547": "                                path.lineTo(x, y);",
        "421": "        if (lastWifiRunning) {",
        "422": "            mWifiRunningPath.lineTo(w, h-mWifiRunningOffset);",
        "402": "                if (lastPath != null) {",
        "403": "                    lastPath.lineTo(w, y);",
        "404": "                }",
        "405": "                curLevelPath.lineTo(w, y);",
        "406": "            }",
        "407": "            curLevelPath.lineTo(w, mLevelTop+levelh);",
        "408": "            curLevelPath.lineTo(startX, mLevelTop+levelh);",
        "409": "            curLevelPath.close();",
        "541": "                                if (lastLinePath != null) {",
        "542": "                                    lastLinePath.lineTo(x, y);",
        "415": "        if (lastScreenOn) {"
      },
      "id": 36441982,
      "filename": "BatteryHistoryChart.java"
    },
    {
      "repo": "https://bitbucket.org/tamacjp/android_gnexus_packages_apps_settings.git",
      "language": "Java",
      "linescount": 734,
      "location": "/src/com/android/settings/fuelgauge",
      "name": "android_gnexus_packages_apps_settings",
      "url": "https://searchcode.com/codesearch/view/36458810/",
      "md5hash": "24bc96cbaf7bb53e508886c8e5b530e6",
      "lines": {
        "416": "            mScreenOnPath.lineTo(w, h-mScreenOnOffset);",
        "546": "                            } else {",
        "547": "                                path.lineTo(x, y);",
        "421": "        if (lastWifiRunning) {",
        "422": "            mWifiRunningPath.lineTo(w, h-mWifiRunningOffset);",
        "402": "                if (lastPath != null) {",
        "403": "                    lastPath.lineTo(w, y);",
        "404": "                }",
        "405": "                curLevelPath.lineTo(w, y);",
        "406": "            }",
        "407": "            curLevelPath.lineTo(w, mLevelTop+levelh);",
        "408": "            curLevelPath.lineTo(startX, mLevelTop+levelh);",
        "409": "            curLevelPath.close();",
        "541": "                                if (lastLinePath != null) {",
        "542": "                                    lastLinePath.lineTo(x, y);",
        "415": "        if (lastScreenOn) {"
      },
      "id": 36458810,
      "filename": "BatteryHistoryChart.java"
    },
    {
      "repo": "https://bitbucket.org/seandroid/packages-apps-settings.git",
      "language": "Java",
      "linescount": 741,
      "location": "/src/com/android/settings/fuelgauge",
      "name": "packages-apps-settings",
      "url": "https://searchcode.com/codesearch/view/37035209/",
      "md5hash": "d66f8ffb7203c765e476c644043a81dd",
      "lines": {
        "416": "            mScreenOnPath.lineTo(w, h-mScreenOnOffset);",
        "546": "                            } else {",
        "547": "                                path.lineTo(x, y);",
        "421": "        if (lastWifiRunning) {",
        "422": "            mWifiRunningPath.lineTo(w, h-mWifiRunningOffset);",
        "402": "                if (lastPath != null) {",
        "403": "                    lastPath.lineTo(w, y);",
        "404": "                }",
        "405": "                curLevelPath.lineTo(w, y);",
        "406": "            }",
        "407": "            curLevelPath.lineTo(w, mLevelTop+levelh);",
        "408": "            curLevelPath.lineTo(startX, mLevelTop+levelh);",
        "409": "            curLevelPath.close();",
        "541": "                                if (lastLinePath != null) {",
        "542": "                                    lastLinePath.lineTo(x, y);",
        "415": "        if (lastScreenOn) {"
      },
      "id": 37035209,
      "filename": "BatteryHistoryChart.java"
    },
    {
      "repo": "https://bitbucket.org/cm3066/android_packages_apps_settings.git",
      "language": "Java",
      "linescount": 734,
      "location": "/src/com/android/settings/fuelgauge",
      "name": "android_packages_apps_settings",
      "url": "https://searchcode.com/codesearch/view/43317541/",
      "md5hash": "24bc96cbaf7bb53e508886c8e5b530e6",
      "lines": {
        "416": "            mScreenOnPath.lineTo(w, h-mScreenOnOffset);",
        "546": "                            } else {",
        "547": "                                path.lineTo(x, y);",
        "421": "        if (lastWifiRunning) {",
        "422": "            mWifiRunningPath.lineTo(w, h-mWifiRunningOffset);",
        "402": "                if (lastPath != null) {",
        "403": "                    lastPath.lineTo(w, y);",
        "404": "                }",
        "405": "                curLevelPath.lineTo(w, y);",
        "406": "            }",
        "407": "            curLevelPath.lineTo(w, mLevelTop+levelh);",
        "408": "            curLevelPath.lineTo(startX, mLevelTop+levelh);",
        "409": "            curLevelPath.close();",
        "541": "                                if (lastLinePath != null) {",
        "542": "                                    lastLinePath.lineTo(x, y);",
        "415": "        if (lastScreenOn) {"
      },
      "id": 43317541,
      "filename": "BatteryHistoryChart.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 2365,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 1220,
      "source": "Github",
      "id": 2
    },
    {
      "count": 534,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 31,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 12,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 2,
      "source": "CodePlex",
      "id": 5
    }
  ]
}