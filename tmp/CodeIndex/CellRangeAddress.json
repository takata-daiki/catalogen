{
  "matchterm": "CellRangeAddress",
  "previouspage": null,
  "searchterm": "CellRangeAddress",
  "query": "CellRangeAddress",
  "language_filters": [
    {
      "count": 227,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 227,
  "results": [
    {
      "repo": "https://bitbucket.org/openicar/juniprint",
      "language": "Java",
      "linescount": 1375,
      "location": "/src/main/java/org/comsoft/juniprint/utils",
      "name": "juniprint",
      "url": "https://searchcode.com/codesearch/view/60212069/",
      "md5hash": "c11a8c0e57714af4cf1eeffb5ef652f0",
      "lines": {
        "449": "\t",
        "450": "\tprivate static CellRangeAddressList unionAllRectangular(List<List<CellRangeAddress>> rangeListForColumns){",
        "451": "\t\tCellRangeAddressList rangeList = new CellRangeAddressList();",
        "421": "\t\t\treturn ",
        "422": "\t\t\t\tnew CellRangeAddress(Math.max(crA.getFirstRow(), crB.getFirstRow()), ",
        "43": "import org.apache.poi.ss.util.AreaReference;",
        "44": "import org.apache.poi.ss.util.CellRangeAddress;",
        "45": "import org.apache.poi.ss.util.CellRangeAddressList;",
        "430": "\t",
        "431": "\tpublic static CellRangeAddress unionRectangular(CellRangeAddress crA, CellRangeAddress crB){",
        "46": "import org.apache.poi.ss.util.CellReference;",
        "440": "\t\t\treturn ",
        "441": "\t\t\t\tnew CellRangeAddress(Math.min(crA.getFirstRow(), crB.getFirstRow()), ",
        "413": "",
        "414": "\tpublic static CellRangeAddress intersectRectangular(CellRangeAddress crA, CellRangeAddress crB){"
      },
      "id": 60212069,
      "filename": "ExcelUtils.java"
    },
    {
      "repo": "https://bitbucket.org/openicar/juniprint",
      "language": "Java",
      "linescount": 2096,
      "location": "/src/main/java/org/comsoft/juniprint",
      "name": "juniprint",
      "url": "https://searchcode.com/codesearch/view/60212057/",
      "md5hash": "e9487002cf69dbd9246766c01c968b73",
      "lines": {
        "832": "\t\t\t\t\t\tcellReff = workR.getCellRangeAddress(workR.countRanges()-1);",
        "831": "\t\t\t\t\t\t}",
        "44": "import org.apache.poi.ss.util.AreaReference;",
        "813": "\t\t\tmods:{\t\t\t",
        "814": "\t\t\t\tworkR = ExcelUtils.getSpecialCells(sh, new CellRangeAddress(yyy, xxx - yyy > zzz?yyy + zzz - 1:xxx, 0, 0), ExcelUtils.XlCellType.xlCellTypeVisible);",
        "45": "import org.apache.poi.ss.util.CellRangeAddress;",
        "818": "\t\t\t\t\t\telse {",
        "819": "\t\t\t\t\t\t\tworkR = new CellRangeAddressList();",
        "820": "\t\t\t\t\t\t\tworkR.addCellRangeAddress(yyy, yyy, 0, 0);",
        "46": "import org.apache.poi.ss.util.CellRangeAddressList;",
        "824": "\t\t\t\t\tif(kFRowE > 1){",
        "825": "\t\t\t\t\t\tCellRangeAddress cellReff = workR.getCellRangeAddress(0);",
        "47": "import org.apache.poi.ss.util.CellReference;",
        "796": "\t\tint yyy, zzz; ",
        "797": "\t\tCellRangeAddressList workR, sArea, workFormul;",
        "821": "\t\t\t\t\t\t}"
      },
      "id": 60212057,
      "filename": "JUniPrint.java"
    },
    {
      "repo": "https://github.com/setsuna/msa.git",
      "language": "Java",
      "linescount": 299,
      "location": "/dbapp/cfile/java/bak",
      "name": "msa",
      "url": "https://searchcode.com/codesearch/view/70057009/",
      "md5hash": "ced1d1167c7e12e50e5fafdd02fb82e8",
      "lines": {
        "224": "\t\t        \t\t CellRangeAddress Hebin=new CellRangeAddress(7,7,1,8);",
        "198": "\t\t        \t }else{",
        "199": "\t\t        \t\t   CellRangeAddress Hebin=new CellRangeAddress(5,5,1,8);",
        "232": "\t\t        \t targetRow.setHeight((short)rowHeight1);    ",
        "233": "\t\t        \t CellRangeAddress Hebin=new CellRangeAddress(8,8,0,8);",
        "10": "import org.apache.poi.hssf.usermodel.HSSFWorkbook;",
        "11": "import org.apache.poi.hssf.util.CellRangeAddress;",
        "175": "\t\t        \t   targetRow.setHeight((short)rowHeight1);    ",
        "142": "\t\t        \t   targetRow.setHeight((short)rowHeight1);        \t",
        "143": "\t\t        \t   CellRangeAddress Hebin=new CellRangeAddress(0,0,0,8);",
        "176": "\t\t        \t   CellRangeAddress Hebin=new CellRangeAddress(3,3,0,8);",
        "211": "\t\t        \t }else{",
        "212": "\t\t        \t\t CellRangeAddress Hebin=new CellRangeAddress(6,6,1,8);",
        "186": "\t\t        \t }else{",
        "187": "\t\t        \t\t   CellRangeAddress Hebin=new CellRangeAddress(4,4,1,8);",
        "223": "\t\t        \t }else{"
      },
      "id": 70057009,
      "filename": "Toexcel.java"
    },
    {
      "repo": "https://bitbucket.org/tomas12/laguna.git",
      "language": "Java",
      "linescount": 869,
      "location": "/src/main/java/Excel",
      "name": "Laguna",
      "url": "https://searchcode.com/codesearch/view/91974058/",
      "md5hash": "6e91f341ca470ddad3adac6f482a8d65",
      "lines": {
        "514": "\t\t\t\t\tif (kontaktperson2 != 0) {",
        "396": "\t\t\t\t\tif (kontaktperson1 != 0) {",
        "424": "\t\t\t\t\tif (patient2 != 0) {",
        "425": "\t\t\t\t\t\tsheet.addMergedRegion(new CellRangeAddress(1, // first",
        "11": "",
        "12": "import org.apache.poi.hssf.util.CellRangeAddress;",
        "397": "\t\t\t\t\t\tsheet.addMergedRegion(new CellRangeAddress(1, // first",
        "529": "\t\t\t\t\tif (patient1 != 0) {",
        "530": "\t\t\t\t\t\tsheet.addMergedRegion(new CellRangeAddress(1, // first",
        "515": "\t\t\t\t\t\tsheet.addMergedRegion(new CellRangeAddress(1, // first",
        "437": "\t\t\t\t\tif (kontaktperson2 != 0) {",
        "438": "\t\t\t\t\t\tsheet.addMergedRegion(new CellRangeAddress(1, // first",
        "409": "\t\t\t\t\tif (kontaktperson2 != 0) {",
        "410": "\t\t\t\t\t\tsheet.addMergedRegion(new CellRangeAddress(1, // first",
        "542": "\t\t\t\t\tif (kontaktperson2 != 0) {",
        "543": "\t\t\t\t\t\tsheet.addMergedRegion(new CellRangeAddress(1, // first"
      },
      "id": 91974058,
      "filename": "ExcelFamilienAU.java"
    },
    {
      "repo": "https://bitbucket.org/ansgarkonermann/simpleodf",
      "language": "Java",
      "linescount": 797,
      "location": "/src/main/java/org/odftoolkit/simple/chart",
      "name": "simpleodf",
      "url": "https://searchcode.com/codesearch/view/60371825/",
      "md5hash": "8af8c5e1c2f1fb39f0d566e184a453be",
      "lines": {
        "560": "\t * ",
        "34": "import org.odftoolkit.odfdom.pkg.OdfNamespace;",
        "35": "import org.odftoolkit.odfdom.type.CellRangeAddress;",
        "36": "import org.odftoolkit.odfdom.type.CellRangeAddressList;",
        "37": "import org.odftoolkit.simple.SpreadsheetDocument;",
        "561": "\t * @param cellRangeAddress",
        "144": "\t */",
        "145": "\tpublic CellRangeAddressList getCellRangeAddress() {",
        "146": "\t\treturn cellRangeAddress;",
        "147": "\t}",
        "55": "\tprivate Vector<String> legendset; // legend vector",
        "56": "\t// Vector<OdfCellRangeAddressList> seriesCellRange; //cellrange of data",
        "58": "\t// Vector<String> legendCellRange;",
        "59": "\t// String cellRangeAddress;",
        "60": "\tprivate CellRangeAddressList cellRangeAddress;"
      },
      "id": 60371825,
      "filename": "DataSet.java"
    },
    {
      "repo": "https://github.com/eordano/agilefant.git",
      "language": "Java",
      "linescount": 501,
      "location": "/src/fi/hut/soberit/agilefant/business/impl",
      "name": "agilefant",
      "url": "https://searchcode.com/codesearch/view/74830150/",
      "md5hash": "a104cf7f4e2fd82ec6768cf15ab2f963",
      "lines": {
        "19": "import org.apache.poi.ss.usermodel.Workbook;",
        "420": "        info.addMergedRegion(new CellRangeAddress(2, 2, 1, 6));",
        "421": "        info.addMergedRegion(new CellRangeAddress(3, 3, 1, 6));",
        "422": "        info.addMergedRegion(new CellRangeAddress(4, 4, 1, 6));",
        "423": "        info.addMergedRegion(new CellRangeAddress(5, 6, 1, 6));",
        "424": "    }",
        "20": "import org.apache.poi.ss.util.CellRangeAddress;",
        "419": "        // merge cells"
      },
      "id": 74830150,
      "filename": "ExportIterationBusinessImpl.java"
    },
    {
      "repo": "https://github.com/leonate/poitest.git",
      "language": "Java",
      "linescount": 113,
      "location": "/src/test/java/org/poitest",
      "name": "poitest",
      "url": "https://searchcode.com/codesearch/view/65741396/",
      "md5hash": "6a9b1d55e46c91d45429b4e9c0f41c91",
      "lines": {
        "80": "        Assert.assertEquals(\"Incorrect merged region\", new CellRangeAddress(2,2,1,2).toString(),sheet.getMergedRegion(2).toString());",
        "4": "import org.apache.poi.ss.usermodel.*;",
        "5": "import org.apache.poi.ss.util.CellRangeAddress;",
        "104": "        sheet.removeMergedRegion(0);",
        "105": "        sheet.addMergedRegion(new CellRangeAddress(0,1,0,2));",
        "75": "        Util.copyCells(srcCell, destCell);",
        "76": "        sheet.addMergedRegion(new CellRangeAddress(10, 11, 4, 5));",
        "77": "        sheet.addMergedRegion(new CellRangeAddress(2, 2, 1, 2));",
        "78": "        Assert.assertEquals(\"Incorrect number of merged regions\", 3, sheet.getNumMergedRegions());",
        "79": "        Assert.assertEquals(\"Incorrect merged region\", new CellRangeAddress(10, 11, 4, 5).toString(), sheet.getMergedRegion(1).toString());",
        "48": "        Assert.assertEquals(\"Incorrect merged region\", new CellRangeAddress(0,1,0,1).toString(),sheet.getMergedRegion(0).toString());",
        "81": "        Assert.assertEquals(4, sheet.getRow(2).getCell(1).getNumericCellValue(), 1e-6);",
        "47": "        Assert.assertEquals(\"Incorrect number of merged regions\", 1, sheet.getNumMergedRegions());"
      },
      "id": 65741396,
      "filename": "MergedCellTest.java"
    },
    {
      "repo": "https://bitbucket.org/president/schedule",
      "language": "Java",
      "linescount": 312,
      "location": "/src/schedule/xslparser",
      "name": "schedule",
      "url": "https://searchcode.com/codesearch/view/126554773/",
      "md5hash": "a123342126cc94c960946eba3c837e91",
      "lines": {
        "131": "            numOfGroups = groups.size();",
        "132": "            s.addMergedRegion(new CellRangeAddress(curRow, curRow,",
        "165": "                    s.addMergedRegion(new CellRangeAddress(curRow + 3, curRow + 3,",
        "49": "                    curSpec = group.getSpecialty();",
        "177": "            numOfGroups = groups.size();",
        "187": "                    curSpec = group.getSpecialty();",
        "141": "                    curSpec = group.getSpecialty();",
        "142": "                    s.addMergedRegion(new CellRangeAddress(curRow + 3, curRow + 3,",
        "16": "import org.apache.poi.ss.usermodel.Workbook;",
        "17": "import org.apache.poi.ss.util.CellRangeAddress;",
        "50": "                    s.addMergedRegion(new CellRangeAddress(curRow + 3, curRow + 3,",
        "178": "            s.addMergedRegion(new CellRangeAddress(curRow, curRow,",
        "164": "                    curSpec = group.getSpecialty();",
        "154": "            numOfGroups = groups.size();",
        "155": "            s.addMergedRegion(new CellRangeAddress(curRow, curRow,",
        "188": "                    s.addMergedRegion(new CellRangeAddress(curRow + 3, curRow + 3,"
      },
      "id": 126554773,
      "filename": "XSLGenerator.java"
    },
    {
      "repo": "https://github.com/abhinav681/drools.git",
      "language": "Java",
      "linescount": 276,
      "location": "/drools-decisiontables/src/main/java/org/drools/decisiontable/parser/xls",
      "name": "drools",
      "url": "https://searchcode.com/codesearch/view/93105691/",
      "md5hash": "dfb6123bb8748bdec7b3f0caf1a28d29",
      "lines": {
        "240": "            CellRangeAddress r = mergedRanges[ i ];",
        "35": "import org.apache.poi.ss.usermodel.WorkbookFactory;",
        "36": "import org.apache.poi.ss.util.CellRangeAddress;",
        "137": "",
        "138": "                CellRangeAddress merged = getRangeIfMerged( cell,",
        "236": "",
        "109": "",
        "110": "    private CellRangeAddress[] getMergedCells( Sheet sheet ) {",
        "111": "        CellRangeAddress[] ranges = new CellRangeAddress[ sheet.getNumMergedRegions() ];",
        "112": "        for ( int i = 0; i < ranges.length; i++ ) {",
        "237": "    CellRangeAddress getRangeIfMerged( Cell cell,",
        "238": "                                       CellRangeAddress[] mergedRanges ) {",
        "121": "",
        "122": "        CellRangeAddress[] mergedRanges = getMergedCells( sheet );",
        "239": "        for ( int i = 0; i < mergedRanges.length; i++ ) {"
      },
      "id": 93105691,
      "filename": "ExcelParser.java"
    },
    {
      "repo": "https://bitbucket.org/ignatenko/bmp",
      "language": "Java",
      "linescount": 531,
      "location": "/src/skala/erp/bmp/server/excellexporters",
      "name": "bmp",
      "url": "https://searchcode.com/codesearch/view/137412596/",
      "md5hash": "4afff37e487b3b0a255223eb98ff1a2c",
      "lines": {
        "384": "\t\tfillEmptyCells(row, newCellStyle, 37, 38);",
        "385": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$AK$\" + (rowIndex + 1)",
        "420": "\t\tfillEmptyCells(row, newCellStyle, 4, 6);",
        "421": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$D$\" + (rowIndex + 1)",
        "394": "\t\tfillEmptyCells(row, newCellStyle, 40, 43);",
        "395": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$AN$\" + (rowIndex + 1)",
        "12": "import org.apache.poi.ss.usermodel.CellStyle;",
        "13": "import org.apache.poi.ss.util.CellRangeAddress;",
        "430": "\t\tfillEmptyCells(row, newCellStyle, 8, 9);",
        "431": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$H$\" + (rowIndex + 1)",
        "304": "\t\tfillEmptyCells(row, newCellStyle, 1, 9);",
        "305": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$A$\" + (rowIndex + 1)",
        "440": "\t\tfillEmptyCells(row, newCellStyle, 11, 12);",
        "441": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$K$\" + (rowIndex + 1)",
        "410": "\t\tfillEmptyCells(row, newCellStyle, 1, 2);",
        "411": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$A$\" + (rowIndex + 1)"
      },
      "id": 137412596,
      "filename": "TTNExcelExporter.java"
    },
    {
      "repo": "https://bitbucket.org/ignatenko/bmp",
      "language": "Java",
      "linescount": 581,
      "location": "/src/skala/erp/bmp/server/excellexporters",
      "name": "bmp",
      "url": "https://searchcode.com/codesearch/view/137412608/",
      "md5hash": "9fcf646bcafefc0461892ab3986959e4",
      "lines": {
        "416": "\t\tfillEmptyCells(row, newCellStyle, 16, 18);",
        "417": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$P$\" + (rowIndex + 1)",
        "515": "\t\tfillEmptyCells(row, newCellStyle, 1, 1);",
        "516": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$A$\" + (rowIndex + 1)",
        "390": "\t\tfillEmptyCells(row, newCellStyle, 11, 11);",
        "391": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$K$\" + (rowIndex + 1)",
        "11": "import org.apache.poi.ss.usermodel.CellStyle;",
        "12": "import org.apache.poi.ss.util.CellRangeAddress;",
        "525": "\t\tfillEmptyCells(row, newCellStyle, 2, 14);",
        "526": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$C$\" + (rowIndex + 1)",
        "431": "\t\tfillEmptyCells(row, newCellStyle, 20, 21);",
        "400": "\t\tfillEmptyCells(row, newCellStyle, 13, 13);",
        "401": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$M$\" + (rowIndex + 1)",
        "370": "\t\tfillEmptyCells(row, newCellStyle, 3, 7);",
        "371": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$C$\" + (rowIndex + 1)",
        "432": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$T$\" + (rowIndex + 1)"
      },
      "id": 137412608,
      "filename": "SchetFacturaExcellExporter.java"
    },
    {
      "repo": "https://github.com/secundinogarcia/indicadoresv2a.git",
      "language": "Java",
      "linescount": 222,
      "location": "/AnsDesk_Indicadoresv0.2a/src/com/bbva/importans",
      "name": "indicadoresv2a",
      "url": "https://searchcode.com/codesearch/view/92190361/",
      "md5hash": "fc178bbff538ce61ebf2b7b09755a6c4",
      "lines": {
        "192": "\t * elle se trouve dans la current row que nous traitons. ",
        "193": "\t * Si oui, retourne l'objet CellRangeAddress. ",
        "130": "\t              //System.out.println(\"Selected merged region: \" + mergedRegion.toString());  ",
        "131": "\t              CellRangeAddress newMergedRegion = new CellRangeAddress(mergedRegion.getFirstRow()+deltaRows, mergedRegion.getLastRow()+deltaRows, mergedRegion.getFirstColumn(),  mergedRegion.getLastColumn());  ",
        "132": "\t                //System.out.println(\"New merged region: \" + newMergedRegion.toString());  ",
        "133": "\t                CellRangeAddressWrapper wrapper = new CellRangeAddressWrapper(newMergedRegion);  ",
        "198": "\t * @return the CellRangeAddress created. ",
        "199": "\t */  ",
        "200": "\tpublic static CellRangeAddress getMergedRegion(HSSFSheet sheet, int rowNum, short cellNum) {     ",
        "201": "\t    for (int i = 0; i < sheet.getNumMergedRegions(); i++) {   ",
        "19": "import org.apache.poi.ss.usermodel.Row;",
        "20": "import org.apache.poi.ss.util.CellRangeAddress;",
        "24": "import advit.logger.ToLog;",
        "25": "import advit.poi.CellRangeAddressWrapper;",
        "197": "\t * @param cellNum the num of the cell to copy. "
      },
      "id": 92190361,
      "filename": "ThExtraerNotas.java"
    },
    {
      "repo": "http://zkspreadsheet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 5111,
      "location": "/zss/src/org/zkoss/zss/model/impl",
      "name": "zkspreadsheet",
      "url": "https://searchcode.com/codesearch/view/3970697/",
      "md5hash": "f6740268ba4be4778508748ca1c3becc",
      "lines": {
        "1536": "\t\t\t\tCellRangeAddressList addrList = dataValidation.getRegions();",
        "1539": "\t\t\t\tfor(int j = addrList.countRanges(); --j >= 0;) {",
        "1540": "\t\t\t\t\tfinal CellRangeAddress addr = addrList.getCellRangeAddress(j);",
        "1578": "\t\t\t\tif (dstDataValidation == null) {",
        "1579": "\t\t\t\t\tfinal CellRangeAddressList dstAddrList = new CellRangeAddressList(dstRow, dstCol, dstRow, dstCol);",
        "1582": "\t\t\t\t} else {",
        "1583": "\t\t\t\t\tCellRangeAddressList dstAddrList = dstDataValidation.getRegions();",
        "1584": "\t\t\t\t\tdstAddrList.addCellRangeAddress(dstRow, dstCol, dstRow, dstCol);",
        "2072": "\t\tfinal List<CellRangeAddress[]> shiftedRanges = ((HSSFSheetImpl)sheet).shiftRowsOnly(startRow0, lastRowNum, -num, true, false, true, true, Range.FORMAT_NONE);",
        "1554": "\t\t\t\tif (!dstInRange) { //so we shall copy this data validation to dst cell",
        "1555": "\t\t\t\t\tdataValidation.getRegions().addCellRangeAddress(dstRow, dstCol, dstRow, dstCol);",
        "2071": "\t\t}",
        "1560": "\t\t\tfor(DataValidation dataValidation : dataValidations) {",
        "1561": "\t\t\t\tCellRangeAddressList addrList = dataValidation.getRegions();",
        "1563": "\t\t\t\tfor(int j = addrList.countRanges(); --j >= 0;) {",
        "1564": "\t\t\t\t\tfinal CellRangeAddress addr = addrList.getCellRangeAddress(j);",
        "1535": "\t\t\tfor(DataValidation dataValidation : dataValidations) {"
      },
      "id": 3970697,
      "filename": "BookHelper.java"
    },
    {
      "repo": "https://bitbucket.org/ignatenko/bmp",
      "language": "Java",
      "linescount": 346,
      "location": "/src/skala/erp/bmp/server/excellexporters",
      "name": "bmp",
      "url": "https://searchcode.com/codesearch/view/137412609/",
      "md5hash": "7ab221a586c79534775d1e0171dc3ebe",
      "lines": {
        "320": "\t\tfillEmptyCells(row, newCellStyle, 117, 122);",
        "321": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$DM$\" + (rowIndex + 1)",
        "290": "\t\tfillEmptyCells(row, newCellStyle, 90, 98);",
        "259": "\t\tfillEmptyCells(row, newCellStyle, 66, 73);",
        "260": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$BN$\" + (rowIndex + 1)",
        "300": "\t\tfillEmptyCells(row, newCellStyle, 100, 106);",
        "12": "import org.apache.poi.ss.usermodel.CellStyle;",
        "13": "import org.apache.poi.ss.util.CellRangeAddress;",
        "270": "\t\tfillEmptyCells(row, newCellStyle, 75, 80);",
        "271": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$BW$\" + (rowIndex + 1)",
        "291": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$CL$\" + (rowIndex + 1)",
        "301": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$CV$\" + (rowIndex + 1)",
        "310": "\t\tfillEmptyCells(row, newCellStyle, 108, 115);",
        "311": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$DD$\" + (rowIndex + 1)",
        "280": "\t\tfillEmptyCells(row, newCellStyle, 82, 88);",
        "281": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$CD$\" + (rowIndex + 1)"
      },
      "id": 137412609,
      "filename": "M15ExcellExporter.java"
    },
    {
      "repo": "https://bitbucket.org/ignatenko/bmp",
      "language": "Java",
      "linescount": 394,
      "location": "/src/skala/erp/bmp/server/excellexporters",
      "name": "bmp",
      "url": "https://searchcode.com/codesearch/view/137412595/",
      "md5hash": "c789eae924ad4af9764541b7a1a116a7",
      "lines": {
        "336": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$G$\" + (rowIndex + 1)",
        "283": "\t\tfillEmptyCells(row, newCellStyle, 17, 17);",
        "324": "\t\tfillEmptyCells(row, newCellStyle, 3, 5);",
        "325": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$C$\" + (rowIndex + 1)",
        "294": "\t\tfillEmptyCells(row, newCellStyle, 19, 19);",
        "295": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$S$\" + (rowIndex + 1)",
        "12": "import org.apache.poi.ss.usermodel.CellStyle;",
        "13": "import org.apache.poi.ss.util.CellRangeAddress;",
        "335": "\t\tfillEmptyCells(row, newCellStyle, 7, 7);",
        "272": "\t\tfillEmptyCells(row, newCellStyle, 13, 15);",
        "273": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$M$\" + (rowIndex + 1)",
        "388": "\t\tfillEmptyCells(row, newCellStyle, 19, 19);",
        "314": "\t\tfillEmptyCells(row, newCellStyle, 1, 1);",
        "315": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$A$\" + (rowIndex + 1)",
        "284": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$Q$\" + (rowIndex + 1)",
        "389": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$S$\" + (rowIndex + 1)"
      },
      "id": 137412595,
      "filename": "SverkaExcellExporter.java"
    },
    {
      "repo": "https://bitbucket.org/ignatenko/bmp",
      "language": "Java",
      "linescount": 413,
      "location": "/src/skala/erp/bmp/server/excellexporters",
      "name": "bmp",
      "url": "https://searchcode.com/codesearch/view/137412599/",
      "md5hash": "d8ec0f2a4caa78b48353b9c9c785d7ce",
      "lines": {
        "388": "\t\tfillEmptyCells(row, newCellStyle, 20, 20);",
        "389": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$T$\" + (rowIndex + 1)",
        "326": "\t\tfillEmptyCells(row, newCellStyle, 9, 9);",
        "295": "\t\tfillEmptyCells(row, newCellStyle, 4, 4);",
        "296": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$D$\" + (rowIndex + 1)",
        "204": "\t\tfillEmptyCells(row, newCellStyle, 1, 14);",
        "327": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$I$\" + (rowIndex + 1)",
        "12": "import org.apache.poi.ss.usermodel.CellStyle;",
        "13": "import org.apache.poi.ss.util.CellRangeAddress;",
        "337": "\t\tfillEmptyCells(row, newCellStyle, 11, 11);",
        "205": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$A$\" + (rowIndex + 1)",
        "400": "\t\tfillEmptyCells(row, newCellStyle, 22, 23);",
        "273": "\t\tfillEmptyCells(row, newCellStyle, 1, 1);",
        "274": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$A$\" + (rowIndex + 1)",
        "401": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$V$\" + (rowIndex + 1)",
        "338": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$K$\" + (rowIndex + 1)"
      },
      "id": 137412599,
      "filename": "MX18ForTransferExcellExporter.java"
    },
    {
      "repo": "https://bitbucket.org/ignatenko/bmp",
      "language": "Java",
      "linescount": 319,
      "location": "/src/skala/erp/bmp/server/excellexporters",
      "name": "bmp",
      "url": "https://searchcode.com/codesearch/view/137412601/",
      "md5hash": "b7d45695388f2874c8a93b83bb4de4c2",
      "lines": {
        "291": "\t\t//",
        "292": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$A$\" + (rowIndex + 1)",
        "293": "\t\t\t\t+ \":$Q$\" + (rowIndex + 1)));",
        "294": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$R$\" + (rowIndex + 1)",
        "295": "\t\t\t\t+ \":$Z$\" + (rowIndex + 1)));",
        "296": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$AA$\" + (rowIndex + 1)",
        "297": "\t\t\t\t+ \":$AF$\" + (rowIndex + 1)));",
        "298": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$AG$\" + (rowIndex + 1)",
        "11": "import org.apache.poi.ss.usermodel.CellStyle;",
        "12": "import org.apache.poi.ss.util.CellRangeAddress;",
        "301": "\t\t\t\t+ \":$BA$\" + (rowIndex + 1)));",
        "302": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$BB$\" + (rowIndex + 1)",
        "303": "\t\t\t\t+ \":$BI$\" + (rowIndex + 1)));",
        "300": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$AT$\" + (rowIndex + 1)",
        "299": "\t\t\t\t+ \":$AS$\" + (rowIndex + 1)));"
      },
      "id": 137412601,
      "filename": "M4ExcelExporter.java"
    },
    {
      "repo": "https://bitbucket.org/ignatenko/bmp",
      "language": "Java",
      "linescount": 468,
      "location": "/src/skala/erp/bmp/server/excellexporters",
      "name": "bmp",
      "url": "https://searchcode.com/codesearch/view/137412605/",
      "md5hash": "3eaa7e02a30330e135cab15c66f7dfe7",
      "lines": {
        "293": "\t\tfillEmptyCells(row, newCellStyle, 22, 23);",
        "294": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$V$\" + (rowIndex + 1)",
        "423": "\t\tfillEmptyCells(row, newCellStyle, 18, 18);",
        "424": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$R$\" + (rowIndex + 1)",
        "12": "import org.apache.poi.ss.usermodel.CellStyle;",
        "13": "import org.apache.poi.ss.util.CellRangeAddress;",
        "399": "\t\tfillEmptyCells(row, newCellStyle, 14, 14);",
        "400": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$N$\" + (rowIndex + 1)",
        "273": "\t\tfillEmptyCells(row, newCellStyle, 18, 18);",
        "274": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$R$\" + (rowIndex + 1)",
        "433": "\t\tfillEmptyCells(row, newCellStyle, 20, 20);",
        "283": "\t\tfillEmptyCells(row, newCellStyle, 20, 20);",
        "284": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$T$\" + (rowIndex + 1)",
        "434": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$T$\" + (rowIndex + 1)",
        "318": "\t\tfillEmptyCells(row, newCellStyle, 1, 1);",
        "319": "\t\tsheet.addMergedRegion(CellRangeAddress.valueOf(\"$A$\" + (rowIndex + 1)"
      },
      "id": 137412605,
      "filename": "MX18ExcellExporter.java"
    },
    {
      "repo": "https://bitbucket.org/xunchangguo/spudsoft-birt-excel-emitters",
      "language": "Java",
      "linescount": 591,
      "location": "/SpudSoft BIRT Excel Emitters/src/uk/co/spudsoft/birt/emitters/excel",
      "name": "spudsoft-birt-excel-emitters",
      "url": "https://searchcode.com/codesearch/view/64530825/",
      "md5hash": "55584d02d79e59362ceefc7f64ab9bfd",
      "lines": {
        "560": "\tpublic CellRange<? extends Cell> setArrayFormula(String formula,",
        "561": "\t\t\tCellRangeAddress range) {",
        "194": "",
        "195": "\tpublic int addMergedRegion(CellRangeAddress region) {",
        "580": "",
        "229": "",
        "230": "\tpublic CellRangeAddress getMergedRegion(int index) {",
        "42": "import org.apache.poi.ss.usermodel.Workbook;",
        "43": "import org.apache.poi.ss.util.CellRangeAddress;",
        "581": "\tpublic AutoFilter setAutoFilter(CellRangeAddress range) {"
      },
      "id": 64530825,
      "filename": "FilteredSheet.java"
    },
    {
      "repo": "https://bitbucket.org/xunchangguo/spudsoft-birt-excel-emitters",
      "language": "Java",
      "linescount": 327,
      "location": "/SpudSoft BIRT Excel Emitters/src/uk/co/spudsoft/birt/emitters/excel/handlers",
      "name": "spudsoft-birt-excel-emitters",
      "url": "https://searchcode.com/codesearch/view/64530939/",
      "md5hash": "cf3f3641791c59236db8fc48da2da811",
      "lines": {
        "137": "                log.debug( \"Should be merging ? [\", state.rowNum, \",\", column, \"] to [\", endRow, \",\", column + cell.getColSpan() - 1, \"]\" );",
        "25": "import org.apache.poi.ss.usermodel.Cell;",
        "26": "import org.apache.poi.ss.util.CellRangeAddress;",
        "139": "                CellRangeAddress newMergedRegion = new CellRangeAddress( state.rowNum, endRow, column, column + cell.getColSpan() - 1 );",
        "140": "                state.currentSheet.addMergedRegion( newMergedRegion );",
        "138": "                // CellRangeAddress newMergedRegion = new CellRangeAddress( state.rowNum, endRow, state.colNum + offset, endCol + offset );"
      },
      "id": 64530939,
      "filename": "AbstractRealTableCellHandler.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 160,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 33,
      "source": "Github",
      "id": 2
    },
    {
      "count": 32,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 2,
      "source": "GitLab",
      "id": 13
    }
  ]
}