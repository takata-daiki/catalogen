{
  "matchterm": "Npv",
  "previouspage": null,
  "searchterm": "Npv",
  "query": "Npv",
  "language_filters": [
    {
      "count": 36,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 36,
  "results": [
    {
      "repo": "https://github.com/JCRichstein/emlab-generation.git",
      "language": "Java",
      "linescount": 547,
      "location": "/emlab-generation/src/main/java/emlab/gen/role/investment",
      "name": "emlab-generation",
      "url": "https://searchcode.com/codesearch/view/73889768/",
      "md5hash": "ab1d978c4d1dd79dcc82ddc504e6b74a",
      "lines": {
        "296": "                     * Divide by capacity, in order not to favour large power",
        "265": "                    double discountedCapitalCosts = npv(discountedProjectCapitalOutflow, wacc);// are",
        "407": "            npv += netCashFlow.get(iterator).doubleValue() / Math.pow(1 + wacc, iterator.intValue());",
        "273": "",
        "274": "                    double discountedOpProfit = npv(discountedProjectCashInflow, wacc);",
        "403": "",
        "404": "    private double npv(TreeMap<Integer, Double> netCashFlow, double wacc) {",
        "405": "        double npv = 0;",
        "406": "        for (Integer iterator : netCashFlow.keySet()) {",
        "297": "                     * plants (which have the single largest NPV",
        "408": "        }",
        "409": "        return npv;",
        "264": ""
      },
      "id": 73889768,
      "filename": "InvestInPowerGenerationTechnologiesRole.java"
    },
    {
      "repo": "https://github.com/JCRichstein/emlab-generation.git",
      "language": "Java",
      "linescount": 626,
      "location": "/emlab-generation/src/main/java/emlab/gen/role/investment",
      "name": "emlab-generation",
      "url": "https://searchcode.com/codesearch/view/73889775/",
      "md5hash": "dedc8f55e046f2e73303deea2a01922d",
      "lines": {
        "416": "",
        "417": "    private double npv(TreeMap<Integer, Double> netCashFlow, double wacc) {",
        "418": "        double npv = 0;",
        "419": "        for (Integer iterator : netCashFlow.keySet()) {",
        "420": "            npv += netCashFlow.get(iterator).doubleValue() / Math.pow(1 + wacc, iterator.intValue());",
        "421": "        }",
        "422": "        return npv;",
        "308": "                    /*",
        "277": "",
        "278": "                    double discountedCapitalCosts = npv(discountedProjectCapitalOutflow, wacc);// are",
        "287": "                    double discountedOpProfit = npv(discountedProjectCashInflow, wacc);",
        "286": "",
        "309": "                     * Divide by capacity, in order not to favour large power plants (which have the single largest NPV"
      },
      "id": 73889775,
      "filename": "InvestInPowerGenerationTechnologiesWithCO2ForecastRole.java"
    },
    {
      "repo": "https://github.com/jcrabtree/JPOWER.git",
      "language": "Java",
      "linescount": 198,
      "location": "/src/main/java/edu/cornell/pserc/jpower/pf",
      "name": "JPOWER",
      "url": "https://searchcode.com/codesearch/view/75158831/",
      "md5hash": "96d657752859d1b6cb4fc8a837c20b38",
      "lines": {
        "103": "\t\t/* set up indexing for updating V */",
        "104": "\t\tnpv = pv.length;",
        "105": "\t\tnpq = pq.length;",
        "106": "\t\tj1 = 0;\t\tj2 = npv;\t\t\t// j1:j2 - V angle of pv buses",
        "155": "\t\t\t/* update voltage */",
        "156": "\t\t\tif (npv > 0)",
        "78": "\t\t\tDComplexMatrix1D V0, int ref, int[] pv, int[] pq, Map<String, Double> jpopt) {",
        "79": "\t\tint i, max_it, verbose, npv, npq, j1, j2, j3, j4, j5, j6;"
      },
      "id": 75158831,
      "filename": "Djp_newtonpf.java"
    },
    {
      "repo": "https://github.com/dsths/mondrian.git",
      "language": "Java",
      "linescount": 1397,
      "location": "/testsrc/main/mondrian/olap/fun/vba",
      "name": "mondrian",
      "url": "https://searchcode.com/codesearch/view/100409289/",
      "md5hash": "f6546f8bce8c16a0de1f0521b83a6154",
      "lines": {
        "672": "        assertEquals(x, npv);",
        "675": "        v = new double[] {1000, 666.66666, 333.33, 12.2768416};",
        "676": "        npv = Vba.nPV(r, v);",
        "677": "        x = 347.99232604144827;",
        "678": "        assertEquals(x, npv, SMALL);",
        "681": "        v = new double[] {1000, 0, -900, -7777.5765};",
        "682": "        npv = Vba.nPV(r, v);",
        "683": "        x = 74.3742433377061;",
        "684": "        assertEquals(x, npv, 1e-12);",
        "689": "        };",
        "690": "        npv = Vba.nPV(r, v);",
        "691": "        x = 11342283.4233124;",
        "692": "        assertEquals(x, npv, 1e-8);",
        "664": "",
        "665": "    public void testNpv() {",
        "666": "        double r, v[], npv, x;",
        "671": "        x = 162.5;"
      },
      "id": 100409289,
      "filename": "VbaTest.java"
    },
    {
      "repo": "https://github.com/Berico-Technologies/mondrian.git",
      "language": "Java",
      "linescount": 1397,
      "location": "/testsrc/main/mondrian/olap/fun/vba",
      "name": "mondrian",
      "url": "https://searchcode.com/codesearch/view/69449093/",
      "md5hash": "39d6493c70f41f9341c601162a933250",
      "lines": {
        "672": "        assertEquals(x, npv);",
        "675": "        v = new double[] {1000, 666.66666, 333.33, 12.2768416};",
        "676": "        npv = Vba.nPV(r, v);",
        "677": "        x = 347.99232604144827;",
        "678": "        assertEquals(x, npv, SMALL);",
        "681": "        v = new double[] {1000, 0, -900, -7777.5765};",
        "682": "        npv = Vba.nPV(r, v);",
        "683": "        x = 74.3742433377061;",
        "684": "        assertEquals(x, npv, 1e-12);",
        "689": "        };",
        "690": "        npv = Vba.nPV(r, v);",
        "691": "        x = 11342283.4233124;",
        "692": "        assertEquals(x, npv, 1e-8);",
        "664": "",
        "665": "    public void testNpv() {",
        "666": "        double r, v[], npv, x;",
        "671": "        x = 162.5;"
      },
      "id": 69449093,
      "filename": "VbaTest.java"
    },
    {
      "repo": "https://github.com/user1984/basex.git",
      "language": "Java",
      "linescount": 133,
      "location": "/src/main/java/org/basex/util/ft",
      "name": "basex",
      "url": "https://searchcode.com/codesearch/view/113722019/",
      "md5hash": "d1ace06fa3973b1563759ebf44277204",
      "lines": {
        "98": "   */",
        "99": "  public static double textNode(final double npv, final double is,",
        "100": "      final double tokl, final double tl) {",
        "101": "    return max(npv / is, log(tokl * npv + 1) / log(tl + 1));",
        "92": "   * Used when no index score is available.",
        "93": "   * @param npv number of pos values"
      },
      "id": 113722019,
      "filename": "Scoring.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 777,
      "location": "/java/java-analysis-impl/src/com/intellij/codeInspection/bytecodeAnalysis",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/116148917/",
      "md5hash": "34ae894381f286db052800276c88147b",
      "lines": {
        "689": "      if (arg instanceof NthParamValue) {",
        "690": "        NthParamValue npv = (NthParamValue)arg;",
        "691": "        if (npv.n == i) {",
        "692": "          keys.add(new Key(conditionValue.method, new InOut(argI, inValue), conditionValue.stableCall, true));",
        "266": "        if (arg instanceof NthParamValue) {",
        "267": "          NthParamValue npv = (NthParamValue)arg;",
        "268": "          if (npv.n == i) {",
        "269": "            keys.add(new Key(call.method, new InOut(argI, inValue), call.stableCall));"
      },
      "id": 116148917,
      "filename": "Combined.java"
    },
    {
      "repo": "https://github.com/jcrabtree/JPOWER.git",
      "language": "Java",
      "linescount": 170,
      "location": "/src/main/java/edu/cornell/pserc/jpower/pf",
      "name": "JPOWER",
      "url": "https://searchcode.com/codesearch/view/75158779/",
      "md5hash": "dba6dc39769f8cc19948c9232788bb69",
      "lines": {
        "129": "\t\t\t/* update voltage at PV buses */",
        "130": "\t\t\tif (npv > 0) {",
        "72": "\t\tdouble tol, normF;",
        "73": "\t\tint i, max_it, verbose, npv;",
        "93": "\t\t/* set up indexing for updating V */",
        "94": "\t\tnpv = pv.length;"
      },
      "id": 75158779,
      "filename": "Djp_gausspf.java"
    },
    {
      "repo": "https://github.com/Berico-Technologies/mondrian.git",
      "language": "Java",
      "linescount": 2500,
      "location": "/src/main/mondrian/olap/fun/vba",
      "name": "mondrian",
      "url": "https://searchcode.com/codesearch/view/69456310/",
      "md5hash": "67a51ed00e7b0438ab0a0fa75f26792c",
      "lines": {
        "899": "        double ratio =",
        "900": "            (- reNPV * Math.pow(1 + reinvestRate, valueArray.length))",
        "901": "            / (fiNPV * (1 + financeRate));",
        "902": "",
        "935": "",
        "936": "    @FunctionName(\"NPV\")",
        "937": "    @Signature(\"NPV(rate, values())\")",
        "938": "    @Description(",
        "941": "        + \"and a discount rate.\")",
        "942": "    public static double nPV(double r, double[] cfs) {",
        "943": "        double npv = 0;",
        "944": "        double r1 = r + 1;",
        "946": "        for (int i = 0, iSize = cfs.length; i < iSize; i++) {",
        "947": "            npv += cfs[i] / trate;",
        "949": "        }",
        "950": "        return npv;"
      },
      "id": 69456310,
      "filename": "Vba.java"
    },
    {
      "repo": "https://code.google.com/p/cybert/",
      "language": "Java",
      "linescount": 134,
      "location": "/cybert/src/ch/rgw/cybert/persist",
      "name": "cybert",
      "url": "https://searchcode.com/codesearch/view/11925511/",
      "md5hash": "331b3f7ed2e17ef419e92b64795df7a0",
      "lines": {
        "36": "\tprivate int phase;",
        "37": "\tprivate float npv;",
        "48": "\t",
        "49": "\tpublic float getNpv(){",
        "50": "\t\treturn npv;",
        "51": "\t}",
        "52": "\t",
        "53": "\tpublic void setNpv(float npv){",
        "54": "\t\tthis.npv = npv;",
        "55": "\t}",
        "127": "\t\tret.setNpv(npv);",
        "118": "\t\tnpv = quant.getNpv();",
        "126": "\t\tret.setPpv(ppv);",
        "117": "\t\tppv = quant.getPpv();"
      },
      "id": 11925511,
      "filename": "QuantWrapper.java"
    },
    {
      "repo": "https://github.com/rmuller/xmlgraphics-mavenized.git",
      "language": "Java",
      "linescount": 3802,
      "location": "/fop/src/main/java/org/apache/fop/complexscripts/fonts",
      "name": "xmlgraphics-mavenized",
      "url": "https://searchcode.com/codesearch/view/96996009/",
      "md5hash": "172ba7e1b3b2ebce8e3f88071881604c",
      "lines": {
        "1904": "        GlyphPositioningTable.PairValues[] pva = new GlyphPositioningTable.PairValues [ npv ];",
        "1905": "        for (int i = 0, n = npv; i < n; i++) {",
        "1906": "            GlyphPositioningTable.PairValues pv = readPosPairValues(subtableOffset, true, vf1, vf2);",
        "1896": "        // read pair values count",
        "1897": "        int npv = in.readTTFUShort();",
        "1900": "            log.debug(tableTag + \" pair set table offset: \" + pairSetTableOffset);",
        "1901": "            log.debug(tableTag + \" pair set table values count: \" + npv);",
        "1903": "        // read pair values"
      },
      "id": 96996009,
      "filename": "OTFAdvancedTypographicTableReader.java"
    },
    {
      "repo": "https://github.com/poidasmith/xlloop.git",
      "language": "Java",
      "linescount": 127,
      "location": "/org.boris.expr/java/test/org/boris/expr",
      "name": "xlloop",
      "url": "https://searchcode.com/codesearch/view/105398266/",
      "md5hash": "cb4732cc95f7dc6e1eec169221790ab0",
      "lines": {
        "80": "",
        "81": "    public void testNPV() throws Exception {",
        "82": "        NPV n = new NPV();",
        "19": "import org.boris.expr.function.excel.NPER;",
        "20": "import org.boris.expr.function.excel.NPV;",
        "84": "    }",
        "83": "        fail(\"NPV not implemented\");"
      },
      "id": 105398266,
      "filename": "ExcelFinancialFunctionsTest.java"
    },
    {
      "repo": "http://ytex.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 168,
      "location": "/workspace/ytex.kernel/src/main/java/ytex/kernel/model",
      "name": "ytex",
      "url": "https://searchcode.com/codesearch/view/13316590/",
      "md5hash": "b6513d85d6fc2ed5d7b047596367f3be",
      "lines": {
        "139": "",
        "140": "\tpublic void setNpv(double npv) {",
        "141": "\t\tthis.npv = npv;",
        "142": "\t}",
        "49": "\t\tthis.ppv = tp + fp > 0 ? ((double) tp) / (double) (tp + fp) : 0;",
        "50": "\t\tthis.npv = tn + fn > 0 ? ((double) tn) / (double) (tn + fn) : 0;",
        "84": "",
        "85": "\tpublic double getNpv() {",
        "86": "\t\treturn npv;",
        "87": "\t}",
        "24": "\tint irClassId;",
        "25": "\tdouble npv;"
      },
      "id": 13316590,
      "filename": "ClassifierEvaluationIRStat.java"
    },
    {
      "repo": "https://bitbucket.org/kubohiroya/fop-formgenerator",
      "language": "Java",
      "linescount": 3804,
      "location": "/src/java/org/apache/fop/complexscripts/fonts",
      "name": "fop-formgenerator",
      "url": "https://searchcode.com/codesearch/view/128945263/",
      "md5hash": "e2591f85acda6ab0481ed848df1519b9",
      "lines": {
        "1905": "        // read pair values",
        "1906": "        GlyphPositioningTable.PairValues[] pva = new GlyphPositioningTable.PairValues [ npv ];",
        "1907": "        for ( int i = 0, n = npv; i < n; i++ ) {",
        "1908": "            GlyphPositioningTable.PairValues pv = readPosPairValues ( subtableOffset, true, vf1, vf2 );",
        "1898": "        // read pair values count",
        "1899": "        int npv = in.readTTFUShort();",
        "1902": "            log.debug(tableTag + \" pair set table offset: \" + pairSetTableOffset );",
        "1903": "            log.debug(tableTag + \" pair set table values count: \" + npv );"
      },
      "id": 128945263,
      "filename": "OTFAdvancedTypographicTableReader.java"
    },
    {
      "repo": "https://bitbucket.org/kubohiroya/patch-for-sqs-translator",
      "language": "Java",
      "linescount": 3804,
      "location": "/src/java/org/apache/fop/complexscripts/fonts",
      "name": "patch-for-sqs-translator",
      "url": "https://searchcode.com/codesearch/view/128948368/",
      "md5hash": "e2591f85acda6ab0481ed848df1519b9",
      "lines": {
        "1905": "        // read pair values",
        "1906": "        GlyphPositioningTable.PairValues[] pva = new GlyphPositioningTable.PairValues [ npv ];",
        "1907": "        for ( int i = 0, n = npv; i < n; i++ ) {",
        "1908": "            GlyphPositioningTable.PairValues pv = readPosPairValues ( subtableOffset, true, vf1, vf2 );",
        "1898": "        // read pair values count",
        "1899": "        int npv = in.readTTFUShort();",
        "1902": "            log.debug(tableTag + \" pair set table offset: \" + pairSetTableOffset );",
        "1903": "            log.debug(tableTag + \" pair set table values count: \" + npv );"
      },
      "id": 128948368,
      "filename": "OTFAdvancedTypographicTableReader.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 3453,
      "location": "/src/main/java/com/extentech/formats/XLS/formulas",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47124971/",
      "md5hash": "3c788f981451f0037f54e553a922448f",
      "lines": {
        "1835": "\t\t// Calculate MIRR from NPV values",
        "3117": "\t * XNPV Returns the net present value for a schedule of cash flows that is",
        "1830": "",
        "1831": "\t\t// add rate to Ptg array for call to calcNPV",
        "3116": "\t/**",
        "1834": "",
        "1931": "\tprotected static Ptg calcNPV(Ptg[] operands) {",
        "1836": "\t\tdouble X = calcNPV(positiveValues).getDoubleVal();",
        "1837": "\t\tX = -1 * X * Math.pow(1 + reinvest_rate, posVals.size());",
        "1949": "\t\t}",
        "1938": "\t\t}",
        "1939": "\t\tif (DEBUG) debugOperands(operands, \"calcNPV\");",
        "1940": "\t\tPtg[] params = PtgCalculator.getAllComponents(operands);",
        "1941": "\t\tif (DEBUG) debugOperands(params, \"calcNPV\"); // AFTER converting references ...",
        "1930": "\t */",
        "1950": "\t\tif (DEBUG) Logger.logInfo(\"Result from calcNPV= \" + result);"
      },
      "id": 47124971,
      "filename": "FinancialCalculator.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 3453,
      "location": "/src/main/java/com/extentech/formats/XLS/formulas",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976595/",
      "md5hash": "3c788f981451f0037f54e553a922448f",
      "lines": {
        "1835": "\t\t// Calculate MIRR from NPV values",
        "3117": "\t * XNPV Returns the net present value for a schedule of cash flows that is",
        "1830": "",
        "1831": "\t\t// add rate to Ptg array for call to calcNPV",
        "3116": "\t/**",
        "1834": "",
        "1931": "\tprotected static Ptg calcNPV(Ptg[] operands) {",
        "1836": "\t\tdouble X = calcNPV(positiveValues).getDoubleVal();",
        "1837": "\t\tX = -1 * X * Math.pow(1 + reinvest_rate, posVals.size());",
        "1949": "\t\t}",
        "1938": "\t\t}",
        "1939": "\t\tif (DEBUG) debugOperands(operands, \"calcNPV\");",
        "1940": "\t\tPtg[] params = PtgCalculator.getAllComponents(operands);",
        "1941": "\t\tif (DEBUG) debugOperands(params, \"calcNPV\"); // AFTER converting references ...",
        "1930": "\t */",
        "1950": "\t\tif (DEBUG) Logger.logInfo(\"Result from calcNPV= \" + result);"
      },
      "id": 50976595,
      "filename": "FinancialCalculator.java"
    },
    {
      "repo": "http://zkspreadsheet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1430,
      "location": "/zssapp/src/org/zkoss/zss/app/formula",
      "name": "zkspreadsheet",
      "url": "https://searchcode.com/codesearch/view/3969892/",
      "md5hash": "a07bf1b4287ec51f4c6c5c920d857dd5",
      "lines": {
        "225": "\t\tfinanceAry.add(new FormulaMetaInfo(FINANCIAL,",
        "226": "\t\t\t\t\t\"NPV\",",
        "227": "\t\t\t\t\t\"NPV(rate, value1, value2,...)\",",
        "228": "\t\t\t\t\t\"Returns the net present value of an investment based on a discount rate and a series of future payments (negative values) and income (positive values).\",",
        "345": "\t\tfinanceAry.add(new FormulaMetaInfo(FINANCIAL,",
        "346": "\t\t\t\t\t\"XNPV\",",
        "347": "\t\t\t\t\t\"XNPV(rate, values, dates)\",",
        "348": "\t\t\t\t\t\"Returns the net present value for a schedule of case flows.\","
      },
      "id": 3969892,
      "filename": "Formulas.java"
    },
    {
      "repo": "http://balmysundaycandy.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 72,
      "location": "/balmysundaycandy-morelowlevel-sample/src/balmysundaycandy/morelowlevel/sample/services",
      "name": "balmysundaycandy",
      "url": "https://searchcode.com/codesearch/view/4534493/",
      "md5hash": "a03ac040f3ca3427854eae76dd99369c",
      "lines": {
        "67": "        ",
        "68": "        return europeanOption.NPV();",
        "30": "\t",
        "31": "\tpublic double npv(BlackScholesArgument blackScholesArgument){"
      },
      "id": 4534493,
      "filename": "BlackScholesCalcurationService.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 717,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/biff/formula",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260581/",
      "md5hash": "15b9307e10209bd7f14a819df4b60a44",
      "lines": {
        "200": "    new Function(0xa, \"na\", 0);",
        "201": "  public static final Function NPV =",
        "202": "    new Function(0xb, \"npv\", 0xff);",
        "203": "  public static final Function STDEV ="
      },
      "id": 43260581,
      "filename": "Function.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 20,
      "source": "Github",
      "id": 2
    },
    {
      "count": 10,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 6,
      "source": "Google Code",
      "id": 1
    }
  ]
}