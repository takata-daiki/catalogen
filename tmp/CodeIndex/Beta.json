{
  "matchterm": "Beta",
  "previouspage": null,
  "searchterm": "Beta",
  "query": "Beta",
  "language_filters": [
    {
      "count": 9121,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 9121,
  "results": [
    {
      "repo": "https://bitbucket.org/rossetti/jsl",
      "language": "Java",
      "linescount": 573,
      "location": "/nbprojects/JSLCore/src/jsl/utilities/random/distributions",
      "name": "jsl",
      "url": "https://searchcode.com/codesearch/view/53148149/",
      "md5hash": "33a2a0265d2d7002182d95643494fc57",
      "lines": {
        "64": "    private double myBetaA1A2;",
        "67": "",
        "68": "    private BetaRootFunction myBetaRootFunction = new BetaRootFunction();",
        "69": "",
        "70": "    /** Creates a Beta with parameters 1.0, 1.0",
        "72": "     */",
        "73": "    public Beta() {",
        "76": "",
        "77": "    /** Creates a beta with the supplied parameters",
        "47": " */",
        "48": "public class Beta extends Distribution implements ContinuousDistributionIfc {",
        "49": "",
        "50": "    private static IncompleteBetaFunctionFraction myContinuedFraction = new IncompleteBetaFunctionFraction();",
        "61": "",
        "62": "    private double mylnBetaA1A2;",
        "63": ""
      },
      "id": 53148149,
      "filename": "Beta.java"
    },
    {
      "repo": "https://github.com/percyliang/fig.git",
      "language": "Java",
      "linescount": 79,
      "location": "/src/main/java/fig/prob",
      "name": "fig",
      "url": "https://searchcode.com/codesearch/view/74746758/",
      "md5hash": "219bde700241510dced7d39d6e71b702",
      "lines": {
        "5": "",
        "6": "public class Beta implements BetaInterface {",
        "7": "  private double alpha, beta;",
        "8": "",
        "9": "  public Beta(double alpha, double beta) {",
        "10": "    this.alpha = alpha;",
        "11": "    this.beta = beta;",
        "14": "  // Compute log probability",
        "15": "  public double logProb(double x) { return logProb(alpha, beta, x); }",
        "16": "  public static double logProb(double alpha, double beta, double x) {",
        "17": "    // $p(x|\\alpha,\\beta) = \\Gamma(\\alpha+\\beta)/(\\Gamma(\\alpha) \\Gamma(\\beta))",
        "18": "    // x^(\\alpha-1) (1-x)^(\\beta-1)$",
        "19": "    return",
        "20": "      NumUtils.logGamma(alpha+beta) -",
        "21": "      NumUtils.logGamma(alpha) - NumUtils.logGamma(beta) +"
      },
      "id": 74746758,
      "filename": "Beta.java"
    },
    {
      "repo": "https://github.com/eandrejko/LatentFactorLogLinear.git",
      "language": "Java",
      "linescount": 449,
      "location": "/math/src/main/java/org/apache/mahout/math/jet/random",
      "name": "LatentFactorLogLinear",
      "url": "https://searchcode.com/codesearch/view/112050415/",
      "md5hash": "7a7d7004304028105cc02d99657b838b",
      "lines": {
        "384": " *                                                                *",
        "385": " * FUNCTION :   - bsprc samples a random variate from the beta    *",
        "392": " *                beta variates via patchwork rejection,          *",
        "387": " * REFERENCES : - H. Sakasegawa (1983): Stratified rejection and  *",
        "388": " *                squeeze method for generating beta random       *",
        "65": "  public Beta(double alpha, double beta, Random randomGenerator) {",
        "64": "  /** Constructs a Beta distribution. */",
        "391": " *              - H. Zechner, E. Stadlober (1993): Generating     *",
        "396": " *                unsigned long integer *seed.                    *",
        "397": " *              - b00(seed,a,b) ... Beta generator for a<1, b<1   *",
        "398": " *              - b01(seed,a,b) ... Beta generator for a<1<b or   *",
        "399": " *                                  b<1<a                         *",
        "16": "@Deprecated",
        "17": "public class Beta extends AbstractContinousDistribution {",
        "19": "  private double alpha;",
        "20": "  private double beta;",
        "63": ""
      },
      "id": 112050415,
      "filename": "Beta.java"
    },
    {
      "repo": "https://bitbucket.org/lknix/swarmai",
      "language": "Java",
      "linescount": 388,
      "location": "/sim/util/distribution",
      "name": "swarmai",
      "url": "https://searchcode.com/codesearch/view/117869419/",
      "md5hash": "87251888891f8e0d9a33ac80e13f71a9",
      "lines": {
        "34": " * <p>",
        "35": " * Stadlober E., H. Zechner (1993), <A HREF=\"http://www.cis.tu-graz.ac.at/stat/stadl/random.html\"> Generating beta variates via patchwork rejection,</A>,",
        "292": "    public double nextDouble() {",
        "293": "        return nextDouble(alpha, beta);",
        "12": "/**",
        "13": " * Beta distribution; <A HREF=\"http://www.cern.ch/RD11/rkb/AN16pp/node15.html#SECTION000150000000000000000\"> math definition</A>",
        "14": " * and <A HREF=\"http://www.statsoft.com/textbook/glosb.html#Beta Distribution\"> animated definition</A>.",
        "15": " * <p>",
        "16": " * <tt>p(x) = k * x^(alpha-1) * (1-x)^(beta-1)</tt> with <tt>k = g(alpha+beta)/(g(alpha)*g(beta))</tt> and <tt>g(a)</tt> being the gamma function.",
        "17": " * <p>",
        "18": " * Valid parameter ranges: <tt>alpha &gt; 0</tt> and <tt>beta &gt; 0</tt>.            ",
        "283": "    public double cdf(double x) {",
        "284": "        return Probability.beta(alpha,beta,x);",
        "29": " * <p>",
        "30": " * H. Sakasegawa (1983): Stratified rejection and squeeze method for generating beta random numbers, "
      },
      "id": 117869419,
      "filename": "Beta.java"
    },
    {
      "repo": "http://lazerdoom.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 408,
      "location": "/lazerdoom/libs/colt/src/cern/jet/random",
      "name": "lazerdoom",
      "url": "https://searchcode.com/codesearch/view/12655663/",
      "md5hash": "f8b20dc2ce9f12d8105280e37d1c7630",
      "lines": {
        "35": " * <p>",
        "36": " * Stadlober E., H. Zechner (1993), <A HREF=\"http://www.cis.tu-graz.ac.at/stat/stadl/random.html\"> Generating beta variates via patchwork rejection,</A>,",
        "295": "public double nextDouble() {",
        "296": "\treturn nextDouble(alpha, beta);",
        "41": " */",
        "42": "public class Beta extends AbstractContinousDistribution {",
        "43": "\tprotected double alpha;",
        "13": "/**",
        "14": " * Beta distribution; <A HREF=\"http://www.cern.ch/RD11/rkb/AN16pp/node15.html#SECTION000150000000000000000\"> math definition</A>",
        "15": " * and <A HREF=\"http://www.statsoft.com/textbook/glosb.html#Beta Distribution\"> animated definition</A>.",
        "16": " * <p>",
        "17": " * <tt>p(x) = k * x^(alpha-1) * (1-x)^(beta-1)</tt> with <tt>k = g(alpha+beta)/(g(alpha)*g(beta))</tt> and <tt>g(a)</tt> being the gamma function.",
        "18": " * <p>",
        "19": " * Valid parameter ranges: <tt>alpha &gt; 0</tt> and <tt>beta &gt; 0</tt>.            ",
        "286": "public double cdf(double x) {",
        "287": "\treturn Probability.beta(alpha,beta,x);"
      },
      "id": 12655663,
      "filename": "Beta.java"
    },
    {
      "repo": "http://symja.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 208,
      "location": "/commons-math/src/main/java/org/apache/commons/math3/special",
      "name": "symja",
      "url": "https://searchcode.com/codesearch/view/11753175/",
      "md5hash": "b074e2edd9abab223f759417d508e0c7",
      "lines": {
        "34": "     */",
        "35": "    private Beta() {}",
        "38": "     * Returns the",
        "39": "     * <a href=\"http://mathworld.wolfram.com/RegularizedBetaFunction.html\">",
        "40": "     * regularized beta function</a> I(x, a, b).",
        "41": "     *",
        "44": "     * @param b Parameter {@code b}.",
        "45": "     * @return the regularized beta function I(x, a, b).",
        "48": "     */",
        "49": "    public static double regularizedBeta(double x, double a, double b) {",
        "50": "        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",
        "23": " * This is a utility class that provides computation methods related to the",
        "24": " * Beta family of functions.",
        "25": " *",
        "26": " * @version $Id: Beta.java 1244107 2012-02-14 16:17:55Z erans $",
        "27": " */",
        "28": "public class Beta {"
      },
      "id": 11753175,
      "filename": "Beta.java"
    },
    {
      "repo": "git://github.com/GregBowyer/renjin.git",
      "language": "Java",
      "linescount": 414,
      "location": "/core/src/main/java/org/renjin/stats/internals/distributions",
      "name": "renjin",
      "url": "https://searchcode.com/codesearch/view/101771379/",
      "md5hash": "88580ba9367827f4bc790b24f7e8dfda",
      "lines": {
        "35": "  /* Uses these GLOBALS to save time when many rv's are generated : */",
        "36": "  static double beta, gamma, delta, k1, k2;",
        "214": "    term = Distributions.dbeta(x, a + kMax, b, /* log = */ true);",
        "41": "  #define v_w_from__u1_bet(AA) \t\t\t\\",
        "138": "      if (!qsame) { /* initialize */",
        "139": "        beta = Math.sqrt((alpha - 2.0) / (2.0 * a * b - alpha));",
        "140": "        gamma = a + 1.0 / beta;",
        "141": "      }",
        "29": "",
        "145": "",
        "146": "        v = beta * Math.log(u1 / (1.0 - u1));",
        "172": "  @Primitive",
        "213": "    /* The starting \"middle term\" --- first look at it's log scale: */",
        "173": "  public static double dnbeta(double x, double a, double b, double ncp, boolean give_log) {",
        "42": "  v = beta * log(u1 / (1.0 - u1));\t\\",
        "30": "public class Beta {"
      },
      "id": 101771379,
      "filename": "Beta.java"
    },
    {
      "repo": "http://renjin.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 409,
      "location": "/core/src/main/java/org/renjin/primitives/random",
      "name": "renjin",
      "url": "https://searchcode.com/codesearch/view/13555453/",
      "md5hash": "89ebc78809c33e8738f1fb613b3a3221",
      "lines": {
        "33": "  /* Uses these GLOBALS to save time when many rv's are generated : */",
        "34": "  static double beta, gamma, delta, k1, k2;",
        "168": "",
        "39": "  #define v_w_from__u1_bet(AA) \t\t\t\\",
        "40": "  v = beta * log(u1 / (1.0 - u1));\t\\",
        "137": "        gamma = a + 1.0 / beta;",
        "138": "      }",
        "135": "      if (!qsame) { /* initialize */",
        "143": "        v = beta * Math.log(u1 / (1.0 - u1));",
        "46": "   */",
        "47": "  public static double rbeta(Context.Globals context, double aa, double bb) {",
        "136": "        beta = Math.sqrt((alpha - 2.0) / (2.0 * a * b - alpha));",
        "142": "",
        "169": "  public static double dnbeta(double x, double a, double b, double ncp, boolean give_log) {",
        "27": "",
        "28": "public class Beta {"
      },
      "id": 13555453,
      "filename": "Beta.java"
    },
    {
      "repo": "https://github.com/JoshiManjila/tyrus.git",
      "language": "Java",
      "linescount": 81,
      "location": "/core/src/main/java/org/glassfish/tyrus/core",
      "name": "tyrus",
      "url": "https://searchcode.com/codesearch/view/94185516/",
      "md5hash": "c16353e2ad343fedeb8eb49ac13e5bcc",
      "lines": {
        "64": " * This annotation does not indicate inferior quality or performance of the API, just informs that the",
        "65": " * API may still evolve in the future in a backward-incompatible ways. Tyrus users may use beta APIs",
        "69": " * <p>",
        "70": " * Once a {@code @Beta}-annotated Tyrus API reaches the desired maturity, the {@code @Beta} annotation",
        "55": "/**",
        "56": " * Marker of a public Tyrus API that is still in \"beta\" non-final version.",
        "60": " * (or even removal) in a future Tyrus release. Tyrus development team does not make any guarantees",
        "61": " * to retain backward compatibility of a {@code @Beta}-annotated Tyrus API.",
        "78": "@Target({ANNOTATION_TYPE, TYPE, CONSTRUCTOR, METHOD, FIELD, PACKAGE})",
        "79": "public @interface Beta {"
      },
      "id": 94185516,
      "filename": "Beta.java"
    },
    {
      "repo": "https://gitlab.com/jforge/RxJava.git",
      "language": "Java",
      "linescount": 51,
      "location": "/src/main/java/rx/annotations",
      "name": "RxJava",
      "url": "https://searchcode.com/codesearch/view/115079946/",
      "md5hash": "7defad1bb7e0e3bab5207a125ea959a4",
      "lines": {
        "48": "@Documented",
        "17": " * ",
        "18": " * Originally from https://code.google.com/p/guava-libraries/source/browse/guava/src/com/google/common/annotations/Beta.java",
        "35": " * <p>It is generally safe for <i>applications</i> to depend on beta APIs, at",
        "50": "public @interface Beta {",
        "49": "@Beta",
        "34": " *",
        "51": "}"
      },
      "id": 115079946,
      "filename": "Beta.java"
    },
    {
      "repo": "https://bitbucket.org/pombredanne/cern-colt-mirror",
      "language": "Java",
      "linescount": 408,
      "location": "/src/cern/jet/random",
      "name": "cern-colt-mirror",
      "url": "https://searchcode.com/codesearch/view/135390491/",
      "md5hash": "9d839c1d3a987038bc0694dbaec4b496",
      "lines": {
        "35": " * <p>",
        "36": " * Stadlober E., H. Zechner (1993), <A HREF=\"http://www.cis.tu-graz.ac.at/stat/stadl/random.html\"> Generating beta variates via patchwork rejection,</A>,",
        "295": "public double nextDouble() {",
        "296": "\treturn nextDouble(alpha, beta);",
        "41": " */",
        "42": "public class Beta extends AbstractContinousDistribution {",
        "43": "\tprotected double alpha;",
        "13": "/**",
        "14": " * Beta distribution; <A HREF=\"http://www.cern.ch/RD11/rkb/AN16pp/node15.html#SECTION000150000000000000000\"> math definition</A>",
        "15": " * and <A HREF=\"http://www.statsoft.com/textbook/glosb.html#Beta Distribution\"> animated definition</A>.",
        "16": " * <p>",
        "17": " * <tt>p(x) = k * x^(alpha-1) * (1-x)^(beta-1)</tt> with <tt>k = g(alpha+beta)/(g(alpha)*g(beta))</tt> and <tt>g(a)</tt> being the gamma function.",
        "18": " * <p>",
        "19": " * Valid parameter ranges: <tt>alpha &gt; 0</tt> and <tt>beta &gt; 0</tt>.            ",
        "286": "public double cdf(double x) {",
        "287": "\treturn Probability.beta(alpha,beta,x);"
      },
      "id": 135390491,
      "filename": "Beta.java"
    },
    {
      "repo": "https://bitbucket.org/dadams/ecfinalproject",
      "language": "Java",
      "linescount": 388,
      "location": "/mason/sim/util/distribution",
      "name": "ecfinalproject",
      "url": "https://searchcode.com/codesearch/view/126675037/",
      "md5hash": "87251888891f8e0d9a33ac80e13f71a9",
      "lines": {
        "34": " * <p>",
        "35": " * Stadlober E., H. Zechner (1993), <A HREF=\"http://www.cis.tu-graz.ac.at/stat/stadl/random.html\"> Generating beta variates via patchwork rejection,</A>,",
        "292": "    public double nextDouble() {",
        "293": "        return nextDouble(alpha, beta);",
        "12": "/**",
        "13": " * Beta distribution; <A HREF=\"http://www.cern.ch/RD11/rkb/AN16pp/node15.html#SECTION000150000000000000000\"> math definition</A>",
        "14": " * and <A HREF=\"http://www.statsoft.com/textbook/glosb.html#Beta Distribution\"> animated definition</A>.",
        "15": " * <p>",
        "16": " * <tt>p(x) = k * x^(alpha-1) * (1-x)^(beta-1)</tt> with <tt>k = g(alpha+beta)/(g(alpha)*g(beta))</tt> and <tt>g(a)</tt> being the gamma function.",
        "17": " * <p>",
        "18": " * Valid parameter ranges: <tt>alpha &gt; 0</tt> and <tt>beta &gt; 0</tt>.            ",
        "283": "    public double cdf(double x) {",
        "284": "        return Probability.beta(alpha,beta,x);",
        "29": " * <p>",
        "30": " * H. Sakasegawa (1983): Stratified rejection and squeeze method for generating beta random numbers, "
      },
      "id": 126675037,
      "filename": "Beta.java"
    },
    {
      "repo": "https://bitbucket.org/certifiedss/apache-commons-math-v2_2",
      "language": "Java",
      "linescount": 203,
      "location": "/src/main/java/org/apache/commons/math/special",
      "name": "apache-commons-math-v2_2",
      "url": "https://searchcode.com/codesearch/view/127520619/",
      "md5hash": "21afeb90477f6ff62c56748031a18f5c",
      "lines": {
        "36": "     */",
        "37": "    private Beta() {",
        "42": "     * Returns the",
        "43": "     * <a href=\"http://mathworld.wolfram.com/RegularizedBetaFunction.html\">",
        "44": "     * regularized beta function</a> I(x, a, b).",
        "45": "     *",
        "48": "     * @param b the b parameter.",
        "49": "     * @return the regularized beta function I(x, a, b)",
        "51": "     */",
        "52": "    public static double regularizedBeta(double x, double a, double b)",
        "54": "    {",
        "55": "        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",
        "24": " * This is a utility class that provides computation methods related to the",
        "25": " * Beta family of functions.",
        "28": " */",
        "29": "public class Beta {"
      },
      "id": 127520619,
      "filename": "Beta.java"
    },
    {
      "repo": "https://bitbucket.org/jeremejevs/code-tanks.git",
      "language": "Java",
      "linescount": 21,
      "location": "/#local-runner/src/com/google/common/annotations",
      "name": "code-tanks",
      "url": "https://searchcode.com/codesearch/view/47979559/",
      "md5hash": "28d9d4c355f102abb92ca5bdd8fbaaee",
      "lines": {
        "18": "/* Location:           D:\\stuff\\work\\random\\CodeTanks\\#local-runner\\local-runner\\",
        "19": " * Qualified Name:     com.google.common.annotations.Beta",
        "9": "@GwtCompatible",
        "10": "@Beta",
        "13": "@Documented",
        "14": "public @interface Beta"
      },
      "id": 47979559,
      "filename": "Beta.java"
    },
    {
      "repo": "git://github.com/mongodb/mongo-java-driver.git",
      "language": "Java",
      "linescount": 51,
      "location": "/driver-core/src/main/com/mongodb/annotations",
      "name": "mongo-java-driver",
      "url": "https://searchcode.com/codesearch/view/116000067/",
      "md5hash": "63bef32829934bb69f40c1a02f944d92",
      "lines": {
        "48": "@Beta",
        "33": " *",
        "34": " * <p>It is generally safe for <i>applications</i> to depend on beta APIs, at",
        "49": "public @interface Beta {",
        "50": "}",
        "47": "@Documented"
      },
      "id": 116000067,
      "filename": "Beta.java"
    },
    {
      "repo": "https://code.google.com/p/classroom-presenter/",
      "language": "Java",
      "linescount": 26,
      "location": "/testing/apache-ant-1.8.2/src/etc/testcases/taskdefs/manifestclasspath",
      "name": "classroom-presenter",
      "url": "https://searchcode.com/codesearch/view/7238582/",
      "md5hash": "4bf3c765b2b40f29ed425371be664890",
      "lines": {
        "16": "*/",
        "17": "public class Beta extends Alpha {",
        "18": "    public String toString() {",
        "19": "\treturn \"beta \" + super.toString();",
        "21": "    public static void main(String [] args) {",
        "22": "\tBeta myBeta = new Beta();",
        "23": "\tSystem.out.println(myBeta.toString());",
        "24": "    }"
      },
      "id": 7238582,
      "filename": "Beta.java"
    },
    {
      "repo": "https://github.com/alparslanavci/hazelcast.git",
      "language": "Java",
      "linescount": 37,
      "location": "/hazelcast/src/main/java/com/hazelcast/spi/annotation",
      "name": "hazelcast",
      "url": "https://searchcode.com/codesearch/view/95415569/",
      "md5hash": "508dabe8889d699d10e36506c534c9bc",
      "lines": {
        "34": "@Target({ElementType.PACKAGE, ElementType.TYPE })",
        "35": "public @interface Beta {",
        "25": "/**",
        "26": " * An element annotated with this annotation is considered beta status.<br/>",
        "27": " * Beta in this case means it is a fully new feature and in general seems",
        "28": " * ready for production use but can be subject to change in the near future when"
      },
      "id": 95415569,
      "filename": "Beta.java"
    },
    {
      "repo": "https://bitbucket.org/cyanogenmod/android_external_guava.git",
      "language": "Java",
      "linescount": 44,
      "location": "/guava/src/com/google/common/annotations",
      "name": "android_external_guava",
      "url": "https://searchcode.com/codesearch/view/40475603/",
      "md5hash": "ff23527c1c206dc34d476a8c1c675ef4",
      "lines": {
        "41": "@GwtCompatible",
        "42": "@Beta",
        "43": "public @interface Beta {}"
      },
      "id": 40475603,
      "filename": "Beta.java"
    },
    {
      "repo": "https://bitbucket.org/CruzBishop/versioneer.git",
      "language": "Java",
      "linescount": 44,
      "location": "/src/main/java/biz/massivedynamics/versioneer/annotations",
      "name": "versioneer",
      "url": "https://searchcode.com/codesearch/view/45765674/",
      "md5hash": "d1cb4dd07e08ac7d925497a5b61a9f54",
      "lines": {
        "40": "@Documented",
        "41": "public @interface Beta {",
        "28": "/**",
        "29": " * An annotation that defines the annotated value as being a beta version,"
      },
      "id": 45765674,
      "filename": "Beta.java"
    },
    {
      "repo": "https://bitbucket.org/abahdanovich/selenium.git",
      "language": "Java",
      "linescount": 44,
      "location": "/java/client/src/org/openqa/selenium",
      "name": "selenium",
      "url": "https://searchcode.com/codesearch/view/51338754/",
      "md5hash": "0545f73e06e482672f74491159eabeb8",
      "lines": {
        "43": "public @interface Beta {}",
        "42": "@Documented",
        "27": " * Indicates that a feature or API is in active development, and so should not",
        "28": " * be relied upon. The update policy for anything marked beta is that it may be"
      },
      "id": 51338754,
      "filename": "Beta.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 3409,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 3083,
      "source": "Github",
      "id": 2
    },
    {
      "count": 2350,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 135,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 69,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 51,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 16,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 8,
      "source": "Unknown",
      "id": 0
    }
  ]
}