{
  "matchterm": "PictureType",
  "previouspage": null,
  "searchterm": "PictureType",
  "query": "PictureType",
  "language_filters": [
    {
      "count": 111,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 111,
  "results": [
    {
      "repo": "https://github.com/user9733/SongDownloader.git",
      "language": "Java",
      "linescount": 88,
      "location": "/lib/beaglebuddy_mp3/src/com/beaglebuddy/mp3/enums",
      "name": "SongDownloader",
      "url": "https://searchcode.com/codesearch/view/98857072/",
      "md5hash": "97d64dd3c54e03424f08cdd4a6c8c6d0",
      "lines": {
        "48": "    */",
        "66": "    * @return a picture type enum corresponding to the integral value.",
        "67": "    * @param pictureType  integral value to be converted to a picture type enum.",
        "69": "    */",
        "70": "   public static PictureType getPictureType(byte pictureType) throws IllegalArgumentException",
        "71": "   {",
        "72": "      for (PictureType p : PictureType.values())",
        "73": "         if (pictureType == p.ordinal())",
        "74": "            return p;",
        "75": "      throw new IllegalArgumentException(\"Invalid picture type \" + pictureType + \".\");",
        "15": " */",
        "16": "public enum PictureType",
        "49": "   private PictureType(String name, String description)"
      },
      "id": 98857072,
      "filename": "PictureType.java"
    },
    {
      "repo": "https://github.com/fjwangsjtu/naruto.git",
      "language": "Java",
      "linescount": 33,
      "location": "/Naruto/src/cn/bmob/naruto/model",
      "name": "naruto",
      "url": "https://searchcode.com/codesearch/view/98198603/",
      "md5hash": "03df6a37778ed06500a11ceb506192fd",
      "lines": {
        "28": "\tpublic String toString() {",
        "4": "",
        "5": "public class PictureType extends BmobObject {",
        "29": "\t\treturn \"PictureType [name=\" + name + \"]\";"
      },
      "id": 98198603,
      "filename": "PictureType.java"
    },
    {
      "repo": "https://bitbucket.org/encuestame/encuestame.git",
      "language": "Java",
      "linescount": 62,
      "location": "/enme-utils/src/main/java/org/encuestame/utils/enums",
      "name": "encuestame",
      "url": "https://searchcode.com/codesearch/view/135206218/",
      "md5hash": "a227eb35c3b5d2fd462f5c81d71692fd",
      "lines": {
        "19": " */",
        "20": "public enum PictureType {",
        "29": "",
        "30": "    private PictureType(final String optionAsString) {"
      },
      "id": 135206218,
      "filename": "PictureType.java"
    },
    {
      "repo": "http://fsnet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 46,
      "location": "/fsnetWeb/src/main/java/fr/univartois/ili/fsnet/actions/utils",
      "name": "fsnet",
      "url": "https://searchcode.com/codesearch/view/1626944/",
      "md5hash": "b81b7b257c926ac527b6a09c07a16f82",
      "lines": {
        "16": "\t",
        "17": "\tprivate PictureType(String mimeType, String suffix, int imageType) {",
        "4": "",
        "5": "public enum PictureType {"
      },
      "id": 1626944,
      "filename": "PictureType.java"
    },
    {
      "repo": "git://github.com/encuestame/encuestame.git",
      "language": "Java",
      "linescount": 59,
      "location": "/encuestame-utils/src/main/java/org/encuestame/utils/enums",
      "name": "encuestame",
      "url": "https://searchcode.com/codesearch/view/16002446/",
      "md5hash": "73416d4e041a8a341eb604244ef9f811",
      "lines": {
        "27": "",
        "28": "    private PictureType() {",
        "19": " */",
        "20": "public enum PictureType {"
      },
      "id": 16002446,
      "filename": "PictureType.java"
    },
    {
      "repo": "git://github.com/nischal/face4j.git",
      "language": "Java",
      "linescount": 35,
      "location": "/src/com/face4j/facebook/enums",
      "name": "face4j",
      "url": "https://searchcode.com/codesearch/view/17034478/",
      "md5hash": "72fee9e918dbd5441c9acba969b31624",
      "lines": {
        "24": "\tprivate PictureType(String type){",
        "2": "",
        "3": "public enum PictureType {",
        "23": "\t"
      },
      "id": 17034478,
      "filename": "PictureType.java"
    },
    {
      "repo": "https://github.com/fengweiyou/juapk.git",
      "language": "Java",
      "linescount": 264,
      "location": "/src/com/juapk/frame/util",
      "name": "juapk",
      "url": "https://searchcode.com/codesearch/view/75479500/",
      "md5hash": "9a6a5d9f4a497a2f9dc962c5ad6b3414",
      "lines": {
        "32": "//        //System.out.println(dpr.getElementValue(\"/commonURLXML/picture_URL/pictureType[1]\"));",
        "209": "     *   <picture_URL>",
        "211": "     *    <pictureType typeid=\"1\" typedescr=\"\u4ea7\u54c1\u56fe\u7247\" serverName=\"imgserver\">product</pictureType>",
        "167": "     *    <picture_URL>",
        "168": "     *     <pictureType typeid=\"0\" typedescr=\"\u5546\u673a\u56fe\u7247\" serverName=\"imgserver\">busin</pictureType>",
        "169": "     *     <pictureType typeid=\"1\" typedescr=\"\u4ea7\u54c1\u56fe\u7247\" serverName=\"imgserver\">product</pictureType>",
        "138": "     *    <picture_URL>",
        "139": "     *      <pictureType typeid=\"0\" typedescr=\"\u5546\u673a\u56fe\u7247\" serverName=\"imgserver\">busin</pictureType>",
        "140": "     *      <pictureType typeid=\"1\" typedescr=\"\u4ea7\u54c1\u56fe\u7247\" serverName=\"imgserver\">product</pictureType>",
        "141": "     *    <picture_URL>",
        "143": "     * </pre>             ",
        "144": "     * @param xmlpath:\u6307\u5b9a\u8282\u70b9\u7684xmlpath\u8def\u5f84 \u5982:/commonURLXML/picture_URL/pictureType",
        "173": "    * @param xmlpath:\u6307\u5b9a\u8282\u70b9\u7684xmlpath\u8def\u5f84 \u5982:/commonURLXML/picture_URL/pictureType[1]",
        "210": "     *    <pictureType typeid=\"0\" typedescr=\"\u5546\u673a\u56fe\u7247\" serverName=\"imgserver\">busin</pictureType>",
        "172": "     *</pre>",
        "170": "     *    <picture_URL>",
        "31": "//        //dom4jXmlParseMgr dpr=new dom4jXmlParseMgr(\"F:/e30work/b2b/bin/hc360/b2b/netWorker/Hhc360URLXML.xml\");"
      },
      "id": 75479500,
      "filename": "dom4jXmlParseMgr.java"
    },
    {
      "repo": "https://bitbucket.org/gbouthenot/pcutmp3",
      "language": "Java",
      "linescount": 402,
      "location": "/jid3/org/blinkenlights/jid3/v2",
      "name": "pcutmp3",
      "url": "https://searchcode.com/codesearch/view/60363652/",
      "md5hash": "0794f14bb7a6ada9a81c52627b8cd5e1",
      "lines": {
        "165": "     *",
        "166": "     * @param oPictureType the type of the picture in this frame.",
        "167": "     */",
        "168": "    public void setPictureType(PictureType oPictureType)",
        "169": "    {",
        "42": "    private String m_sMimeType = null;",
        "43": "    private PictureType m_oPictureType;",
        "176": "     */",
        "177": "    public PictureType getPictureType()",
        "178": "    {",
        "179": "        return m_oPictureType;",
        "53": "     *                  if null is specified is \"image/\")",
        "54": "     * @param oPictureType the classification of the picture attached",
        "279": "        return \"Attached picure: Mime type=[\" + m_sMimeType + \"], Picture type = \" +",
        "280": "               m_oPictureType.getValue() + \", Description=[\" + m_sDescription + \"], Picture data length = \" +",
        "170": "        m_oPictureType = oPictureType;"
      },
      "id": 60363652,
      "filename": "APICID3V2Frame.java"
    },
    {
      "repo": "https://github.com/user9733/SongDownloader.git",
      "language": "Java",
      "linescount": 332,
      "location": "/lib/beaglebuddy_mp3/src/com/beaglebuddy/mp3/pojo",
      "name": "SongDownloader",
      "url": "https://searchcode.com/codesearch/view/98857223/",
      "md5hash": "0f6833354d2201c739671f8753effa39",
      "lines": {
        "32": " *       <tr><td class=\"beaglebuddy\">1. </td><td class=\"beaglebuddy\">{@link com.beaglebuddy.mp3.enums.PictureType}                           </td><td class=\"beaglebuddy\">type of picture the image represents.</td></tr>",
        "64": "    *     import com.beaglebuddy.mp3.enums.PictureType;",
        "66": "    *     AttachedPicture attachedPicture = new AttachedPicture(PictureType.BAND_LOGO, \"/images/rush/band_logo.jpg\");</pre></code>",
        "67": "    * @param pictureType    {@link com.beaglebuddy.mp3.enums.PictureType type} of picture the image represents.",
        "68": "    * @param imageFile      path to the image file on your hard drive.",
        "70": "    */",
        "65": "    *",
        "72": "   {",
        "9": "import java.util.Hashtable;",
        "10": "import com.beaglebuddy.mp3.enums.PictureType;",
        "71": "   public AttachedPicture(PictureType pictureType, String imageFile) throws IOException",
        "45": "   // data members",
        "46": "   private PictureType pictureType;    // type of picture the image represents.",
        "31": " *    <tbody>",
        "63": "    * <br/><br/><b>Example:</b><code><pre>"
      },
      "id": 98857223,
      "filename": "AttachedPicture.java"
    },
    {
      "repo": "https://github.com/user9733/SongDownloader.git",
      "language": "Java",
      "linescount": 1272,
      "location": "/lib/beaglebuddy_mp3/src/com/beaglebuddy/mp3",
      "name": "SongDownloader",
      "url": "https://searchcode.com/codesearch/view/98857019/",
      "md5hash": "f5864e3d32214fd420287e6d431f8b42",
      "lines": {
        "738": "    *     MP3             mp3             = new MP3(\"c:/mp3/queensryche/the warning/take hold of the flame.mp3\");",
        "739": "    *     AttachedPicture attachedPicture = mp3.getPicture(PictureType.FRONT_COVER);",
        "790": "    * @see #getPicture(PictureType)",
        "12": "import com.beaglebuddy.mp3.enums.Language;",
        "13": "import com.beaglebuddy.mp3.enums.PictureType;",
        "80": " *          mp3.setLyrics(\"From the distance came the thunder\\nAnd took their breath away\\nEternal lights forever\\n...\");",
        "81": " *          mp3.setPicture(PictureType.FRONT_COVER, new File(\"c:/images/axel_rudi_pell.kings_and_queens.jpg\"));",
        "786": "    * @return a list of all the pictures in the .mp3 file's tag.  If no pictures are found in the tag, then an empty list is returned.",
        "787": "    * @see #setPicture(PictureType, String)",
        "788": "    * @see #setPicture(PictureType, File)",
        "53": " * import com.beaglebuddy.mp3.enums.Genre;",
        "54": " * import com.beaglebuddy.mp3.enums.PictureType;",
        "791": "    * @see #removePicture(PictureType)",
        "792": "    * @see #removePictures()",
        "789": "    * @see #setPicture(AttachedPicture)"
      },
      "id": 98857019,
      "filename": "MP3.java"
    },
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 633,
      "location": "/src/org/apache/poi/hwpf/usermodel",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97384428/",
      "md5hash": "abf85d22a465320cca19a26cbf1926ad",
      "lines": {
        "288": "    {",
        "289": "        PictureType pictureType = suggestPictureType();",
        "290": "        // trying to extract width and height from pictures content:",
        "291": "        switch ( pictureType )",
        "569": "                return PictureType.UNKNOWN;",
        "553": "",
        "554": "    public PictureType suggestPictureType()",
        "556": "        if (_blipRecords == null || _blipRecords.size() != 1 ) {",
        "557": "            return PictureType.UNKNOWN;",
        "568": "            case 0x00:",
        "438": "    {",
        "439": "        return suggestPictureType().getMime();",
        "536": "    {",
        "537": "        return suggestPictureType().getExtension();",
        "570": "            case 0x01:"
      },
      "id": 97384428,
      "filename": "Picture.java"
    },
    {
      "repo": "https://github.com/user9733/SongDownloader.git",
      "language": "Java",
      "linescount": 475,
      "location": "/lib/beaglebuddy_mp3/src/com/beaglebuddy/mp3/id3v23/frame_body",
      "name": "SongDownloader",
      "url": "https://searchcode.com/codesearch/view/98857110/",
      "md5hash": "b2223b156e18a39253d793967aef582f",
      "lines": {
        "160": "   {",
        "161": "      this(Encoding.ISO_8859_1, null, PictureType.OTHER, \"picture\", new byte[1]);",
        "34": " *       <tr><td class=\"beaglebuddy\">2. </td><td class=\"beaglebuddy\"><a href=\"http://www.iana.org/assignments/media-types/index.html\">mimeType</a></td><td class=\"beaglebuddy\">the MIME type and subtype for the image, such as <i>image/jpg</i> or <i>image/gif</i>. In the event that the MIME media type name is omitted, \"image/\" will be implied.</td></tr>",
        "35": " *       <tr><td class=\"beaglebuddy\">3. </td><td class=\"beaglebuddy\">{@link com.beaglebuddy.mp3.enums.PictureType pictureType}                    </td><td class=\"beaglebuddy\">indicates which of the 21 pre-defined {@link #setPictureType(PictureType) picture types} the attached image is.                                                        </td></tr>",
        "168": "    * @param mimeType       MIME type of the image.",
        "9": "import com.beaglebuddy.mp3.enums.FrameType;",
        "42": " * There may be more than one <i>attached picture</i> frame in an ID3v2.3 {@link com.beaglebuddy.mp3.id3v23.ID3v23Tag tag}, but only one with the same <i>description</i> field.",
        "43": " * There may only be one <i>attached picture</i> frame with the picture type declared as picture type {@link com.beaglebuddy.mp3.enums.PictureType#SMALL_ICON SMALL_ICON} and",
        "44": " * {@link com.beaglebuddy.mp3.enums.PictureType#OTHER_ICON OTHER_ICON} respectively.",
        "143": "   private String      mimeType;      // MIME type of the picture",
        "144": "   private PictureType pictureType;   // type of picture",
        "169": "    * @param pictureType    type of picture.  see {@link #setPictureType}",
        "153": "    *    <li>image/ mime type</li>",
        "154": "    *    <li>other as the picture type - see {@link #setPictureType}</li>",
        "10": "import com.beaglebuddy.mp3.enums.PictureType;"
      },
      "id": 98857110,
      "filename": "ID3v23FrameBodyAttachedPicture.java"
    },
    {
      "repo": "https://github.com/user9733/SongDownloader.git",
      "language": "Java",
      "linescount": 1110,
      "location": "/lib/beaglebuddy_mp3/src/com/beaglebuddy/mp3",
      "name": "SongDownloader",
      "url": "https://searchcode.com/codesearch/view/98857007/",
      "md5hash": "40bd54bb126eee8d666676e368828d50",
      "lines": {
        "384": "         ID3v23FrameBodyAttachedPicture frameBody = (ID3v23FrameBodyAttachedPicture)frame.getBody();",
        "385": "         if (frameBody.getPictureType() == pictureType)",
        "418": "      ID3v23Frame frame = getAttachedPictureFrame(pictureType);",
        "963": "    *     mp3.removePicture(PictureType.FRONT_COVER);</pre></code>",
        "964": "    * @param type   {@link com.beaglebuddy.mp3.enums.PictureType type} of picture to remove from the .mp3 file.",
        "962": "    *",
        "417": "   {",
        "397": "   {",
        "398": "      ID3v23Frame                    frame     = getAttachedPictureFrame(attachedPicture.getPictureType());",
        "416": "   protected void removeAttachedPicture(PictureType pictureType) throws IllegalArgumentException",
        "20": "import com.beaglebuddy.mp3.enums.Language;",
        "21": "import com.beaglebuddy.mp3.enums.PictureType;",
        "406": "      frameBody.setMimeType   (attachedPicture.getMimeType());",
        "407": "      frameBody.setPictureType(attachedPicture.getPictureType());",
        "413": "    * removes the attached picture for the specified picture type.",
        "414": "    * @param pictureType  one of the 21 valid ID3v2.3 picture types.",
        "415": "    */"
      },
      "id": 98857007,
      "filename": "MP3Base.java"
    },
    {
      "repo": "https://bitbucket.org/gbouthenot/pcutmp3",
      "language": "Java",
      "linescount": 3800,
      "location": "/jid3/org/blinkenlights/jid3/test",
      "name": "pcutmp3",
      "url": "https://searchcode.com/codesearch/view/60363662/",
      "md5hash": "8e02c139bf915f588893521dc3177b25",
      "lines": {
        "2817": "            ",
        "2818": "            oAPIC3 = new APICID3V2Frame(\"image/gif\", APICID3V2Frame.PictureType.Artist, \"artist3\", new byte[] { 0x03 });",
        "2796": "            oAPIC2 = new APICID3V2Frame(\"image/gif\", APICID3V2Frame.PictureType.Artist, \"artist2\", new byte[] { 0x02 });",
        "2792": "        {",
        "2793": "            oAPIC1 = new APICID3V2Frame(\"image/gif\", APICID3V2Frame.PictureType.Artist, \"artist1\", new byte[] { 0x01 });",
        "2795": "            ",
        "1516": "            ID3V2_3_0Tag oID3V2_3_0Tag = new ID3V2_3_0Tag();",
        "1517": "            APICID3V2Frame oAPIC = new APICID3V2Frame(\"image/png\", APICID3V2Frame.PictureType.Artist, \"Artist image.\", new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 });",
        "1519": "            oID3V2_3_0Tag.addAPICFrame(oAPIC);",
        "1520": "            oID3V2_3_0Tag.addAPICFrame(new APICID3V2Frame(\"image/jpeg\", APICID3V2Frame.PictureType.FrontCover, \"Front cover.\", new byte[] { 0x05, 0x04, 0x03, 0x02, 0x01 }));",
        "1500": "            ID3V2_3_0Tag oID3V2_3_0Tag = new ID3V2_3_0Tag();",
        "1501": "            oID3V2_3_0Tag.addAPICFrame(new APICID3V2Frame(\"image/png\", APICID3V2Frame.PictureType.Artist, \"Artist image.\", new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 }));",
        "1502": "            oID3V2_3_0Tag.addAPICFrame(new APICID3V2Frame(\"image/jpeg\", APICID3V2Frame.PictureType.FrontCover, \"Front cover.\", new byte[] { 0x05, 0x04, 0x03, 0x02, 0x01 }));",
        "1503": ""
      },
      "id": 60363662,
      "filename": "ID3V2Test.java"
    },
    {
      "repo": "https://github.com/ice6/mp3agic.git",
      "language": "Java",
      "linescount": 162,
      "location": "/src/main/java/com/mpatric/mp3agic",
      "name": "mp3agic",
      "url": "https://searchcode.com/codesearch/view/94425310/",
      "md5hash": "93ed5d8f6c915f467d88b250ebb52817",
      "lines": {
        "98": "",
        "67": "\t\tbytes[marker++] = 0;",
        "68": "\t\tbytes[marker++] = pictureType; ",
        "40": "\t\t}",
        "41": "\t\tpictureType = bytes[marker + 1];",
        "132": "\t\tresult = prime * result + pictureType;",
        "99": "\tpublic byte getPictureType() {",
        "16": "\t",
        "17": "\tpublic ID3v2PictureFrameData(boolean unsynchronisation, String mimeType, byte pictureType, EncodedText description, byte[] imageData) {",
        "19": "\t\tthis.mimeType = mimeType;",
        "20": "\t\tthis.pictureType = pictureType;",
        "131": "\t\t\t\t+ ((mimeType == null) ? 0 : mimeType.hashCode());",
        "8": "\tprotected String mimeType;",
        "9": "\tprotected byte pictureType;",
        "100": "\t\treturn pictureType;",
        "156": "\t\t\treturn false;",
        "157": "\t\tif (pictureType != other.pictureType)"
      },
      "id": 94425310,
      "filename": "ID3v2PictureFrameData.java"
    },
    {
      "repo": "https://github.com/fjwangsjtu/naruto.git",
      "language": "Java",
      "linescount": 58,
      "location": "/Naruto/src/cn/bmob/naruto/model",
      "name": "naruto",
      "url": "https://searchcode.com/codesearch/view/98198593/",
      "md5hash": "2d3b38a503e7898eaeec7514c7992311",
      "lines": {
        "7": "",
        "8": "\tprivate PictureType pictureType = null;",
        "12": "",
        "13": "\tpublic PictureData(PictureType type) {",
        "14": "\t\tpictureType = type;",
        "15": "\t\tpictureItems = new ArrayList<PictureItem>();",
        "17": "",
        "18": "\tpublic PictureType getPictureType() {",
        "19": "\t\treturn pictureType;",
        "20": "\t}",
        "21": "",
        "22": "\tpublic void setPictureType(PictureType pictureType) {",
        "23": "\t\tthis.pictureType = pictureType;",
        "24": "\t}"
      },
      "id": 98198593,
      "filename": "PictureData.java"
    },
    {
      "repo": "https://bitbucket.org/encuestame/encuestame.git",
      "language": "Java",
      "linescount": 130,
      "location": "/enme-mvc/controllers/src/main/java/org/encuestame/mvc/page",
      "name": "encuestame",
      "url": "https://searchcode.com/codesearch/view/135206373/",
      "md5hash": "1a4f50d360b5af78cfe4626cdd4024ee",
      "lines": {
        "101": "            @PathVariable String username ) {",
        "102": "        return this.getPicture(username, PictureType.PROFILE);",
        "113": "            @PathVariable String username ){",
        "76": "            @PathVariable String username, final HttpServletResponse response){",
        "77": "        //System.out.println(this.getPicture(username, PictureType.THUMBNAIL));",
        "78": "        return this.getPicture(username, PictureType.THUMBNAIL);",
        "79": "    }",
        "49": "     * @param username",
        "50": "     * @param pictureType",
        "52": "     */",
        "53": "    private byte[] getPicture(String username, final PictureType pictureType){",
        "24": "import org.encuestame.persistence.exception.EnMeNoResultsFoundException;",
        "57": "            bytes = getPictureService().getProfilePicture(username, pictureType);",
        "56": "        try {",
        "25": "import org.encuestame.utils.enums.PictureType;",
        "114": "          return this.getPicture(username, PictureType.PREVIEW);"
      },
      "id": 135206373,
      "filename": "PictureProfileFactoryController.java"
    },
    {
      "repo": "https://bitbucket.org/wrapman/frostwire.desktop.translations.pirate",
      "language": "Java",
      "linescount": 350,
      "location": "/lib/jars-src/jaudiotagger/org/jaudiotagger/audio/flac/metadatablock",
      "name": "frostwire.desktop.translations.pirate",
      "url": "https://searchcode.com/codesearch/view/125746407/",
      "md5hash": "1a58c26e26327973006601f60b14c806",
      "lines": {
        "2": "",
        "3": "import org.jaudiotagger.tag.reference.PictureTypes;",
        "74": "        //Picture Type",
        "75": "        pictureType = rawdata.getInt();",
        "76": "        if (pictureType >= PictureTypes.getInstanceOf().getSize())",
        "77": "        {",
        "78": "            throw new InvalidFrameException(\"PictureType was:\" + pictureType + \"but the maximum allowed is \" + (PictureTypes.getInstanceOf().getSize() - 1));",
        "47": "    private int pictureType;",
        "113": "    public MetadataBlockDataPicture(byte[] imageData,",
        "114": "                                    int pictureType,",
        "243": "    {",
        "244": "        return PictureTypes.getInstanceOf().getValueForId(pictureType) + \":\" +",
        "46": "",
        "153": "            ByteArrayOutputStream baos = new ByteArrayOutputStream();",
        "154": "            baos.write(Utils.getSizeBigEndian(pictureType));"
      },
      "id": 125746407,
      "filename": "MetadataBlockDataPicture.java"
    },
    {
      "repo": "https://bitbucket.org/encuestame/encuestame.git",
      "language": "Java",
      "linescount": 155,
      "location": "/enme-business/src/main/java/org/encuestame/business/service",
      "name": "encuestame",
      "url": "https://searchcode.com/codesearch/view/135204785/",
      "md5hash": "932fc250b12a04f042596161d47f8fd3",
      "lines": {
        "97": "     */",
        "98": "    private byte[] getProfilePicture(final PictureType size, final UserAccount account) throws IOException, EnmeFailOperation{",
        "68": "     */",
        "69": "    private byte[] getGravatarPicture(final String email, final PictureType size) throws EnMeGenericException {",
        "136": "     * @param username",
        "137": "     * @param pictureType",
        "141": "     */",
        "142": "    public byte[] getProfilePicture(final String username, final PictureType pictureType) throws IOException, EnMeGenericException {",
        "143": "        log.trace(\"getProfilePicture \"+username);",
        "144": "        log.trace(\"getProfilePicture \"+pictureType.toString());",
        "146": "        if (user.getPictureSource().equals(PictureSource.UPLOADED)) {",
        "147": "            return this.getProfilePicture(pictureType, user);",
        "148": "        } else if (user.getPictureSource().equals(PictureSource.GRAVATAR)) {",
        "149": "            return this.getGravatarPicture(user.getUserEmail(), pictureType);",
        "150": "        } else {"
      },
      "id": 135204785,
      "filename": "PictureService.java"
    },
    {
      "repo": "https://github.com/PYDebug/online-tutoring-system.git",
      "language": "Java",
      "linescount": 143,
      "location": "/src/com/tutoring/action",
      "name": "online-tutoring-system",
      "url": "https://searchcode.com/codesearch/view/70308648/",
      "md5hash": "0a1f145f8ac46b5ead590bf0f1cfc1bf",
      "lines": {
        "108": "\t\t{",
        "109": "\t\t\tString pictureType = pictureFileName.substring(pictureFileName.indexOf('.'));",
        "110": "\t\t\tif(pictureType.equals(\".jpg\")||pictureType.equals(\".jpeg\")||pictureType.equals(\".png\")||pictureType.equals(\".bmp\"))",
        "111": "\t\t\t{"
      },
      "id": 70308648,
      "filename": "LaunchTopicAction.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 63,
      "source": "Github",
      "id": 2
    },
    {
      "count": 27,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 21,
      "source": "Google Code",
      "id": 1
    }
  ]
}