{
  "matchterm": "AutoFilter",
  "previouspage": null,
  "searchterm": "AutoFilter",
  "query": "AutoFilter",
  "language_filters": [
    {
      "count": 140,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 140,
  "results": [
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 1105,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47124905/",
      "md5hash": "003a4cb18d7fac8afba29591b3cb8f0e",
      "lines": {
        "68": "    boolean fSimple2; // trueif the second condition is a simple equality;",
        "69": "    boolean fTop10; // true if the condition is a Top10 autofilter",
        "38": "    ---",
        "39": "    4       iEntry          2       Index of the active autofilter",
        "72": "    short wTop10; //The number of items to show (from 1-500)",
        "71": "    boolean fPercent; // true if the Top 10 AutoFilter shows percentage, 0 if it shows items",
        "47": "/* TODO: ************************************************************************************************************",
        "48": " * Creation of new AutoFilters, removal of existing (see Boundsheet) ",
        "50": " * fix:  iEntry is not always the index of the column ",
        "51": " * APPARENTLY if there are more than two autofilters, iEntry is the index of the column",
        "52": " * if there is only 1 autofilter, iEntry is 0 --- dependent upon Obj record????",
        "53": " * ",
        "436": "    /**",
        "70": "    boolean fTop; // true if the top 10 AutoFilter shows the top itemsl 0 if it shows the bottom items",
        "437": "     * return a string representation of this autofilter"
      },
      "id": 47124905,
      "filename": "AutoFilter.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 1105,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976529/",
      "md5hash": "003a4cb18d7fac8afba29591b3cb8f0e",
      "lines": {
        "68": "    boolean fSimple2; // trueif the second condition is a simple equality;",
        "69": "    boolean fTop10; // true if the condition is a Top10 autofilter",
        "38": "    ---",
        "39": "    4       iEntry          2       Index of the active autofilter",
        "72": "    short wTop10; //The number of items to show (from 1-500)",
        "71": "    boolean fPercent; // true if the Top 10 AutoFilter shows percentage, 0 if it shows items",
        "47": "/* TODO: ************************************************************************************************************",
        "48": " * Creation of new AutoFilters, removal of existing (see Boundsheet) ",
        "50": " * fix:  iEntry is not always the index of the column ",
        "51": " * APPARENTLY if there are more than two autofilters, iEntry is the index of the column",
        "52": " * if there is only 1 autofilter, iEntry is 0 --- dependent upon Obj record????",
        "53": " * ",
        "436": "    /**",
        "70": "    boolean fTop; // true if the top 10 AutoFilter shows the top itemsl 0 if it shows the bottom items",
        "437": "     * return a string representation of this autofilter"
      },
      "id": 50976529,
      "filename": "AutoFilter.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 685,
      "location": "/src/main/java/com/extentech/formats/OOXML",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47125142/",
      "md5hash": "fe1cc75718da460aa7df258513630185",
      "lines": {
        "32": " * autoFilter (AutoFilter Settings)",
        "33": " * AutoFilter temporarily hides rows based on a filter criteria, which is applied column by column to a table of data",
        "34": " * in the worksheet. This collection expresses AutoFilter settings.",
        "35": " * ",
        "68": "\t\t            if (tnm.equals(\"autoFilter\")) {\t\t// get ref attribute",
        "76": "  \t\t            String endTag= xpp.getName();",
        "43": "// TODO: finish filterColumn children filters->filter, dataGroupItem",
        "44": "public class AutoFilter implements OOXMLElement{",
        "77": "  \t\t            if (endTag.equals(\"autoFilter\")) {",
        "49": "    ",
        "50": "\tpublic AutoFilter(String ref, ArrayList<FilterColumn> f) {",
        "67": "\t\t            String tnm = xpp.getName();",
        "53": "\t}",
        "54": "\tpublic AutoFilter(AutoFilter a) {",
        "31": "/**"
      },
      "id": 47125142,
      "filename": "AutoFilter.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 685,
      "location": "/src/main/java/com/extentech/formats/OOXML",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976766/",
      "md5hash": "fe1cc75718da460aa7df258513630185",
      "lines": {
        "32": " * autoFilter (AutoFilter Settings)",
        "33": " * AutoFilter temporarily hides rows based on a filter criteria, which is applied column by column to a table of data",
        "34": " * in the worksheet. This collection expresses AutoFilter settings.",
        "35": " * ",
        "68": "\t\t            if (tnm.equals(\"autoFilter\")) {\t\t// get ref attribute",
        "76": "  \t\t            String endTag= xpp.getName();",
        "43": "// TODO: finish filterColumn children filters->filter, dataGroupItem",
        "44": "public class AutoFilter implements OOXMLElement{",
        "77": "  \t\t            if (endTag.equals(\"autoFilter\")) {",
        "49": "    ",
        "50": "\tpublic AutoFilter(String ref, ArrayList<FilterColumn> f) {",
        "67": "\t\t            String tnm = xpp.getName();",
        "53": "\t}",
        "54": "\tpublic AutoFilter(AutoFilter a) {",
        "31": "/**"
      },
      "id": 50976766,
      "filename": "AutoFilter.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 74,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374670/",
      "md5hash": "621c5b351f485acb193a625d0013b3b5",
      "lines": {
        "32": "  private AutoFilterInfoRecord autoFilterInfo;",
        "33": "  private AutoFilterRecord autoFilter;",
        "34": "",
        "37": "   */",
        "38": "  public AutoFilter(FilterModeRecord fmr, ",
        "39": "                    AutoFilterInfoRecord afir)",
        "40": "  {",
        "41": "    filterMode = fmr;",
        "42": "    autoFilterInfo = afir;",
        "44": "",
        "45": "  public void add(AutoFilterRecord af)",
        "46": "  {",
        "26": "/**",
        "27": " * Information for autofiltering",
        "28": " */",
        "29": "public class AutoFilter",
        "31": "  private FilterModeRecord filterMode;"
      },
      "id": 11374670,
      "filename": "AutoFilter.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 74,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260536/",
      "md5hash": "8e8128c8ea14c5bc7ae0f8c38839073d",
      "lines": {
        "32": "  private AutoFilterInfoRecord autoFilterInfo;",
        "33": "  private AutoFilterRecord autoFilter;",
        "34": "",
        "37": "   */",
        "38": "  public AutoFilter(FilterModeRecord fmr, ",
        "39": "                    AutoFilterInfoRecord afir)",
        "40": "  {",
        "41": "    filterMode = fmr;",
        "42": "    autoFilterInfo = afir;",
        "44": "",
        "45": "  public void add(AutoFilterRecord af)",
        "46": "  {",
        "26": "/**",
        "27": " * Information for autofiltering",
        "28": " */",
        "29": "public class AutoFilter",
        "31": "  private FilterModeRecord filterMode;"
      },
      "id": 43260536,
      "filename": "AutoFilter.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 74,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49201064/",
      "md5hash": "8e8128c8ea14c5bc7ae0f8c38839073d",
      "lines": {
        "32": "  private AutoFilterInfoRecord autoFilterInfo;",
        "33": "  private AutoFilterRecord autoFilter;",
        "34": "",
        "37": "   */",
        "38": "  public AutoFilter(FilterModeRecord fmr, ",
        "39": "                    AutoFilterInfoRecord afir)",
        "40": "  {",
        "41": "    filterMode = fmr;",
        "42": "    autoFilterInfo = afir;",
        "44": "",
        "45": "  public void add(AutoFilterRecord af)",
        "46": "  {",
        "26": "/**",
        "27": " * Information for autofiltering",
        "28": " */",
        "29": "public class AutoFilter",
        "31": "  private FilterModeRecord filterMode;"
      },
      "id": 49201064,
      "filename": "AutoFilter.java"
    },
    {
      "repo": "http://newswebsite.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 65,
      "location": "/News/src/pku/ss/news/filter",
      "name": "newswebsite",
      "url": "https://searchcode.com/codesearch/view/14052624/",
      "md5hash": "1e2b2aca40a6b71cb2de0de06254d562",
      "lines": {
        "17": "",
        "18": "public class AutoFilter implements Filter{"
      },
      "id": 14052624,
      "filename": "AutoFilter.java"
    },
    {
      "repo": "https://github.com/peidachang/druid.git",
      "language": "Java",
      "linescount": 1953,
      "location": "/src/main/java/com/alibaba/druid/pool",
      "name": "druid",
      "url": "https://searchcode.com/codesearch/view/73322881/",
      "md5hash": "257c430f7e497851bd9f6e303f18901c",
      "lines": {
        "496": "            AutoLoad autoLoad = autoFilter.getClass().getAnnotation(AutoLoad.class);",
        "497": "            if (autoLoad != null && autoLoad.value()) {",
        "498": "                if (LOG.isInfoEnabled()) {",
        "499": "                    LOG.info(\"load filter from spi :\" + autoFilter.getClass().getName());",
        "500": "                }",
        "501": "                addFilter(autoFilter);",
        "492": "",
        "493": "        ServiceLoader<Filter> druidAutoFilterLoader = ServiceLoader.load(Filter.class);",
        "494": "",
        "495": "        for (Filter autoFilter : druidAutoFilterLoader) {"
      },
      "id": 73322881,
      "filename": "DruidDataSource.java"
    },
    {
      "repo": "https://github.com/ttgive/druid.git",
      "language": "Java",
      "linescount": 1873,
      "location": "/src/main/java/com/alibaba/druid/pool",
      "name": "druid",
      "url": "https://searchcode.com/codesearch/view/74295790/",
      "md5hash": "0ab50c3d57faa9f8db21dcb605bc1fa0",
      "lines": {
        "482": "",
        "483": "        ServiceLoader<Filter> druidAutoFilterLoader = ServiceLoader.load(Filter.class);",
        "484": "",
        "485": "        for (Filter autoFilter : druidAutoFilterLoader) {",
        "486": "            AutoLoad autoLoad = autoFilter.getClass().getAnnotation(AutoLoad.class);",
        "487": "            if (autoLoad != null && autoLoad.value()) {",
        "488": "                if (LOG.isInfoEnabled()) {",
        "489": "                    LOG.info(\"load filter from spi :\" + autoFilter.getClass().getName());",
        "490": "                }",
        "491": "                addFilter(autoFilter);"
      },
      "id": 74295790,
      "filename": "DruidDataSource.java"
    },
    {
      "repo": "http://zkspreadsheet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 2438,
      "location": "/zss/src/org/zkoss/zss/model/impl",
      "name": "zkspreadsheet",
      "url": "https://searchcode.com/codesearch/view/3970693/",
      "md5hash": "440bc7eec80263e4ee2bfd222f4c5f7c",
      "lines": {
        "32": "import org.zkoss.poi.ss.usermodel.AutoFilter;",
        "2081": "\t",
        "2082": "\tprivate boolean canUnhide(AutoFilter af, FilterColumn fc, int row, int col) {",
        "2191": "\t@Override",
        "2192": "\tpublic AutoFilter autoFilter(int field, Object criteria1, int filterOp, Object criteria2, Boolean visibleDropDown) {",
        "2065": "\t\t\t\t}",
        "2066": "\t\t\t\t_sheet.setAutoFilter(affectedArea);",
        "2069": "\t\t\t//I have to know the top row area to show/remove the combo button",
        "2070": "\t\t\t//changed by this autofilter action, it's not the same area",
        "2104": "\t\tsynchronized (_sheet) {",
        "2105": "\t\t\tAutoFilter af = _sheet.getAutoFilter();",
        "2106": "\t\t\tif (af == null) { //no AutoFilter to apply ",
        "2077": "\t\t\t",
        "2078": "\t\t\treturn _sheet.getAutoFilter();",
        "31": "import org.zkoss.poi.ss.SpreadsheetVersion;"
      },
      "id": 3970693,
      "filename": "RangeImpl.java"
    },
    {
      "repo": "https://bitbucket.org/openicar/juniprint",
      "language": "Java",
      "linescount": 1375,
      "location": "/src/main/java/org/comsoft/juniprint/utils",
      "name": "juniprint",
      "url": "https://searchcode.com/codesearch/view/60212069/",
      "md5hash": "c11a8c0e57714af4cf1eeffb5ef652f0",
      "lines": {
        "640": "\tpublic static void autoFilter(HSSFSheet sh, int topLeftRow, int topLeftCol, int botRightRow, int botRightCol, Object filterValue){",
        "641": "\t\tautoFilter(sh, new AreaReference(new CellReference(topLeftRow,  topLeftCol), ",
        "642": "\t\t\t\tnew CellReference(botRightRow,  botRightCol)), filterValue);",
        "644": "",
        "645": "\tpublic static void autoFilter(HSSFSheet sh, CellReference topLeft, CellReference botRight, Object filterValue){",
        "646": "\t\tautoFilter(sh, new  AreaReference(topLeft, botRight), filterValue);",
        "647": "\t}",
        "648": "",
        "649": "\tpublic static void autoFilter(HSSFSheet sh, String strAreaRef, Object filterValue){",
        "650": "\t\tautoFilter(sh, new AreaReference(strAreaRef), filterValue);",
        "651": "\t}",
        "652": "",
        "653": "\tpublic static void autoFilter(HSSFSheet sh, CellRangeAddress cellsRef, Object filterValue){",
        "654": "\t\tautoFilter(sh, new  AreaReference(new CellReference(cellsRef.getFirstRow(), cellsRef.getFirstColumn()),",
        "639": ""
      },
      "id": 60212069,
      "filename": "ExcelUtils.java"
    },
    {
      "repo": "http://zkspreadsheet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 613,
      "location": "/zss/src/org/zkoss/zss/model",
      "name": "zkspreadsheet",
      "url": "https://searchcode.com/codesearch/view/3970672/",
      "md5hash": "a8ec860f6feee3f2b5430923b2585bcc",
      "lines": {
        "352": "\t * @param field offset of the field on which you want to base the filter on (1-based; i.e. leftmost column in this range is field 1).",
        "353": "\t * @param criteria1 \"=\" to find blank fields, \"<>\" to find non-blank fields. If null, means ALL. If filterOp == AutoFilter#FILTEROP_TOP10, ",
        "356": "\t * @param criteria2 2nd criteria; used with criteria1 and filterOP to construct compound criteria.",
        "357": "\t * @param visibleDropDown true to show the autoFilter drop-down arrow for the filtered field; false to hide the autoFilter drop-down arrow; null",
        "358": "\t * to keep as is.",
        "359": "\t * @return the applied AutoFiltering",
        "360": "\t */",
        "361": "\tpublic AutoFilter autoFilter(int field, Object criteria1, int filterOp, Object criteria2, Boolean visibleDropDown);",
        "363": "\t/**",
        "364": "\t * Toggle the visibility of the AutoFilter dropdown buttons of this Range. Toggle off will remove current AutoFilter object. ",
        "365": "\t * @return the applied AutoFiltering if toggle on; null if toggle off. ",
        "366": "\t */",
        "15": "",
        "16": "import org.zkoss.poi.ss.usermodel.AutoFilter;",
        "367": "\tpublic AutoFilter autoFilter();"
      },
      "id": 3970672,
      "filename": "Range.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 4583,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47124896/",
      "md5hash": "4301cacd2b525780778bbfd8418fdb0a",
      "lines": {
        "3200": "\t\t\t/* 20100216 KSC: WHAT ARE  THESE RECORD??? They are necessary for new AutoFilter's */",
        "2881": "\t/**",
        "2882": "\t * return the AutoFilter record for this Boundsheet, if any",
        "2883": "\t * TODO: Merge with OOXML Autofilter",
        "165": "\tprivate AbstractList cond_formats = new Vector();",
        "166": "\tprivate AbstractList autoFilters = new Vector(); // 20100111 KSC",
        "2887": "\t\treturn autoFilters;",
        "2888": "\t}",
        "2318": "\t/**",
        "2319": "\t*  remove the _FILTER_DATABASE name (necessary for AutoFilters) for this sheet ",
        "2886": "\tpublic List getAutoFilters() {",
        "181": "\tprivate SheetPr sheetPr = null;",
        "182": "\tprivate com.extentech.formats.OOXML.AutoFilter ooautofilter = null;",
        "3199": "",
        "2885": "\t */"
      },
      "id": 47124896,
      "filename": "Boundsheet.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 4583,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976520/",
      "md5hash": "4301cacd2b525780778bbfd8418fdb0a",
      "lines": {
        "3200": "\t\t\t/* 20100216 KSC: WHAT ARE  THESE RECORD??? They are necessary for new AutoFilter's */",
        "2881": "\t/**",
        "2882": "\t * return the AutoFilter record for this Boundsheet, if any",
        "2883": "\t * TODO: Merge with OOXML Autofilter",
        "165": "\tprivate AbstractList cond_formats = new Vector();",
        "166": "\tprivate AbstractList autoFilters = new Vector(); // 20100111 KSC",
        "2887": "\t\treturn autoFilters;",
        "2888": "\t}",
        "2318": "\t/**",
        "2319": "\t*  remove the _FILTER_DATABASE name (necessary for AutoFilters) for this sheet ",
        "2886": "\tpublic List getAutoFilters() {",
        "181": "\tprivate SheetPr sheetPr = null;",
        "182": "\tprivate com.extentech.formats.OOXML.AutoFilter ooautofilter = null;",
        "3199": "",
        "2885": "\t */"
      },
      "id": 50976520,
      "filename": "Boundsheet.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1850,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/read/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374407/",
      "md5hash": "7f91270abbfb3387b7abcd30255c0a02",
      "lines": {
        "160": "  private AutoFilter autoFilter;",
        "896": "        if (!workbookSettings.getAutoFilterDisabled())",
        "898": "          AutoFilterRecord af = new AutoFilterRecord(r);",
        "899": "",
        "900": "          if (autoFilter == null)",
        "37": "import jxl.WorkbookSettings;",
        "38": "import jxl.biff.AutoFilter;",
        "39": "import jxl.biff.AutoFilterInfoRecord;",
        "904": "            autoFilterInfo = null;",
        "903": "            filterMode = null;",
        "902": "            autoFilter = new AutoFilter(filterMode, autoFilterInfo);",
        "901": "          {",
        "159": "   */",
        "897": "        {",
        "157": "  /**",
        "158": "   * The autofilter information",
        "895": "      {"
      },
      "id": 11374407,
      "filename": "SheetReader.java"
    },
    {
      "repo": "http://brainstream.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1901,
      "location": "/trunk/core/ReadExperimentDefinition/java/jexcelapi/src/jxl/read/biff",
      "name": "brainstream",
      "url": "https://searchcode.com/codesearch/view/13919585/",
      "md5hash": "64420fd674275ba389b00cf0c5263661",
      "lines": {
        "160": "   */",
        "161": "  private AutoFilter autoFilter;",
        "896": "      {",
        "899": "          AutoFilterRecord af = new AutoFilterRecord(r);",
        "900": "",
        "37": "import jxl.WorkbookSettings;",
        "38": "import jxl.biff.AutoFilter;",
        "39": "import jxl.biff.AutoFilterInfoRecord;",
        "904": "            filterMode = null;",
        "905": "            autoFilterInfo = null;",
        "903": "            autoFilter = new AutoFilter(filterMode, autoFilterInfo);",
        "898": "        {",
        "902": "          {",
        "901": "          if (autoFilter == null)",
        "159": "   * The autofilter information",
        "158": "  /**",
        "897": "        if (!workbookSettings.getAutoFilterDisabled())"
      },
      "id": 13919585,
      "filename": "SheetReader.java"
    },
    {
      "repo": "http://zkbooks.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 72,
      "location": "/zssessentials/examples/src/org/zkoss/zssessentials/config",
      "name": "zkbooks",
      "url": "https://searchcode.com/codesearch/view/3016380/",
      "md5hash": "fe59bf65385a6b6dee2c83e02308f583",
      "lines": {
        "1": "/* AutoFilterComposer.java",
        "2": "",
        "36": "",
        "37": "\tButton autoFilter;",
        "38": "\tButton reapplyAutoFilter;",
        "39": "\tButton clearAutoFilter;",
        "40": "\t",
        "50": "\t/**",
        "18": "",
        "19": "import org.zkoss.poi.ss.usermodel.AutoFilter;",
        "52": "\t */",
        "53": "\tpublic void onClick$autoFilter() {",
        "54": "\t\tAutoFilter autoFilter = Ranges.range(spreadsheet.getSelectedSheet(), rowIndex, columnIndex).autoFilter();",
        "51": "\t * Toggle AutoFilter to sheet",
        "30": " */",
        "31": "public class AutoFilterComposer extends GenericForwardComposer {"
      },
      "id": 3016380,
      "filename": "AutoFilterComposer.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 213,
      "location": "/src/main/java/com/extentech/ExtenXLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47125195/",
      "md5hash": "13741dd599d192d5f19fa3883ce0346a",
      "lines": {
        "34": " */",
        "35": "public class AutoFilterHandle implements Handle {",
        "36": "    private AutoFilter af= null; ",
        "37": "    ",
        "39": "    /**",
        "40": "     * For internal use only.  Creates an AutoFilter Handle based on the AutoFilter passed in",
        "41": "     * ",
        "42": "     * @param AutoFilter af",
        "43": "     */",
        "24": "",
        "25": "import com.extentech.formats.XLS.AutoFilter;",
        "28": "/** ",
        "29": " * AutoFilterHandle allows for manipulation of the AutoFilters within the Spreadsheet",
        "30": " *",
        "31": " * AutoFilters allow for  "
      },
      "id": 47125195,
      "filename": "AutoFilterHandle.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 213,
      "location": "/src/main/java/com/extentech/ExtenXLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976819/",
      "md5hash": "13741dd599d192d5f19fa3883ce0346a",
      "lines": {
        "34": " */",
        "35": "public class AutoFilterHandle implements Handle {",
        "36": "    private AutoFilter af= null; ",
        "37": "    ",
        "39": "    /**",
        "40": "     * For internal use only.  Creates an AutoFilter Handle based on the AutoFilter passed in",
        "41": "     * ",
        "42": "     * @param AutoFilter af",
        "43": "     */",
        "24": "",
        "25": "import com.extentech.formats.XLS.AutoFilter;",
        "28": "/** ",
        "29": " * AutoFilterHandle allows for manipulation of the AutoFilters within the Spreadsheet",
        "30": " *",
        "31": " * AutoFilters allow for  "
      },
      "id": 50976819,
      "filename": "AutoFilterHandle.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 89,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 37,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 12,
      "source": "Github",
      "id": 2
    },
    {
      "count": 2,
      "source": "CodePlex",
      "id": 5
    }
  ]
}