{
  "matchterm": "PropertyTable",
  "previouspage": null,
  "searchterm": "PropertyTable",
  "query": "PropertyTable",
  "language_filters": [
    {
      "count": 218,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 218,
  "results": [
    {
      "repo": "https://github.com/bmorrise/pentaho-reporting.git",
      "language": "Java",
      "linescount": 288,
      "location": "/libraries/libswing/source/org/pentaho/reporting/libraries/designtime/swing/table",
      "name": "pentaho-reporting",
      "url": "https://searchcode.com/codesearch/view/100689670/",
      "md5hash": "d7f94ee598b81d7f7c2b9471990658f1",
      "lines": {
        "64": "",
        "65": "  public PropertyTable()",
        "228": "    final TableModel tableModel = getModel();",
        "229": "    if (tableModel instanceof PropertyTableModel)",
        "230": "    {",
        "231": "      final PropertyTableModel model = (PropertyTableModel) getModel();",
        "108": "",
        "109": "  public PropertyTable(final TableModel dm)",
        "184": "    final TableModel tableModel = getModel();",
        "50": "",
        "51": "public class PropertyTable extends JTable",
        "57": "  private static Log logger = LogFactory.getLog(PropertyTable.class);",
        "56": "",
        "185": "    if (tableModel instanceof PropertyTableModel)",
        "186": "    {"
      },
      "id": 100689670,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "https://bitbucket.org/cyanogenmod/android_external_eclipse-windowbuilder.git",
      "language": "Java",
      "linescount": 1602,
      "location": "/propertysheet/src/org/eclipse/wb/internal/core/model/property/table",
      "name": "android_external_eclipse-windowbuilder",
      "url": "https://searchcode.com/codesearch/view/40473053/",
      "md5hash": "428d550d56dd642f1fd11276c405fafa",
      "lines": {
        "744": "   *          the {@link PropertyTable} relative coordinate.",
        "939": "   * @return the {@link PropertyCategory} that is used by this {@link PropertyTable} to display.",
        "1316": "  /**",
        "741": "   * @param x",
        "742": "   *          the {@link PropertyTable} relative coordinate.",
        "487": "  /**",
        "488": "   * Updates {@link PropertyTableTooltipHelper}.",
        "938": "  /**",
        "743": "   * @param y",
        "108": "  ////////////////////////////////////////////////////////////////////////////",
        "109": "  private final PropertyTableTooltipHelper m_tooltipHelper;",
        "144": "  ////////////////////////////////////////////////////////////////////////////",
        "145": "  public PropertyTable(Composite parent, int style) {",
        "61": " */",
        "62": "public class PropertyTable extends Canvas implements ISelectionProvider {",
        "1317": "   * @return the {@link PropertyCategory} that is used by this {@link PropertyTable} to display."
      },
      "id": 40473053,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "https://bitbucket.org/nbargnesi/idea.git",
      "language": "Java",
      "linescount": 1320,
      "location": "/platform/platform-impl/src/com/intellij/designer/propertyTable",
      "name": "idea",
      "url": "https://searchcode.com/codesearch/view/39396829/",
      "md5hash": "65c468669cca818115feac593445be73",
      "lines": {
        "64": "  private static final Comparator<String> GROUP_COMPARATOR = new Comparator<String>() {",
        "97": "",
        "98": "  public PropertyTable() {",
        "1008": "  private class PropertyTableModel extends AbstractTableModel {",
        "1007": "",
        "125": "        super.selectElement(element, selectedText);",
        "126": "        repaint(PropertyTable.this.getVisibleRect());",
        "15": " */",
        "16": "package com.intellij.designer.propertyTable;",
        "84": "",
        "21": "import com.intellij.designer.model.PropertyContext;",
        "22": "import com.intellij.designer.propertyTable.renderers.LabelPropertyRenderer;",
        "63": "  private static final Logger LOG = Logger.getInstance(\"#com.intellij.designer.propertyTable.PropertyTable\");",
        "61": " */",
        "62": "public abstract class PropertyTable extends JBTable {",
        "85": "  private final AbstractTableModel myModel = new PropertyTableModel();"
      },
      "id": 39396829,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "http://aribaweb.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 301,
      "location": "/src/util/ariba/util/core",
      "name": "aribaweb",
      "url": "https://searchcode.com/codesearch/view/11920199/",
      "md5hash": "b982241452f559d9586259deae798338",
      "lines": {
        "32": "    returning a property as a particular type; if the value stored in the",
        "33": "    <code>PropertyTable</code> is of a different type, a reasonable conversion",
        "66": "    */",
        "67": "    public PropertyTable ()",
        "38": "*/",
        "39": "public class PropertyTable implements DebugState",
        "72": "    /**",
        "73": "        Creates a new <code>PropertyTable</code> from the given",
        "79": "    public PropertyTable (Map properties)",
        "14": "",
        "15": "    $Id: //ariba/platform/util/core/ariba/util/core/PropertyTable.java#10 $",
        "78": "    */",
        "26": "/**",
        "27": "    <code>PropertyTable</code> is an extension of a <code>Map</code>",
        "30": "    with a null value removes the value for the given key from the",
        "31": "    <code>PropertyTable</code>.  There are also convenience methods for"
      },
      "id": 11920199,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "https://github.com/Chanjet/oozie.git",
      "language": "Java",
      "linescount": 620,
      "location": "/workflowgenerator/src/main/java/org/apache/oozie/tools/workflowgenerator/client/property",
      "name": "oozie",
      "url": "https://searchcode.com/codesearch/view/71157936/",
      "md5hash": "e1540d564fb8239c11bc06c279bf1344",
      "lines": {
        "64": " */",
        "65": "public abstract class PropertyTable extends ScrollPanel {",
        "82": "    public PropertyTable(NodeWidget w) {",
        "81": "     */"
      },
      "id": 71157936,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "http://keywatch.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 346,
      "location": "/src/server/gwtgui/src/keymind/keywatch/gui/client/eventtable",
      "name": "keywatch",
      "url": "https://searchcode.com/codesearch/view/1482756/",
      "md5hash": "df12b3f600a8079ca7b5a98f13caaa16",
      "lines": {
        "2": " * -----------------------------------------------------------------------------------------------",
        "3": " *  File: PropertyTable.java",
        "40": "     */",
        "41": "    public PropertyTable()",
        "11": " *  Revision History:",
        "12": " *   $URL: http://keywatch.googlecode.com/svn/trunk/src/server/gwtgui/src/keymind/keywatch/gui/client/eventtable/PropertyTable.java $",
        "29": " */",
        "30": "public class PropertyTable extends FlexTable implements ClickHandler, IValueListener"
      },
      "id": 1482756,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 268,
      "location": "/components/forks/poi/src/loci/poi/poifs/property",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642249/",
      "md5hash": "ec58a14799afd1ed760c28ac77bdf126",
      "lines": {
        "64": "public class PropertyTable",
        "95": "    public PropertyTable(final int startBlock,",
        "265": "    /* **********  END  implementation of BlockWritable ********** */",
        "74": "",
        "75": "    public PropertyTable()",
        "266": "}   // end public class PropertyTable",
        "94": "",
        "63": ""
      },
      "id": 15642249,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "https://github.com/timp21337/curator.git",
      "language": "Java",
      "linescount": 53,
      "location": "/src/main/java/com/ical/curator/poem",
      "name": "curator",
      "url": "https://searchcode.com/codesearch/view/108711611/",
      "md5hash": "b0d57060a75200b72988cbd139cae681",
      "lines": {
        "32": " */",
        "33": "public class PropertyTable extends PropertyTableBase {",
        "2": "",
        "3": "import com.ical.curator.poem.generated.PropertyTableBase;",
        "9": " * Melati POEM generated, programmer modifiable stub ",
        "10": " * for a <code>PropertyTable</code> object.",
        "43": "  */",
        "44": "  public PropertyTable("
      },
      "id": 108711611,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "https://github.com/Hayarobee/Activiti-KickStart.git",
      "language": "Java",
      "linescount": 106,
      "location": "/activiti-kickstart-ui/src/main/java/org/activiti/kickstart/ui/table",
      "name": "Activiti-KickStart",
      "url": "https://searchcode.com/codesearch/view/59112834/",
      "md5hash": "74ac86b6d9bc21a029de6136cdc61769",
      "lines": {
        "33": "",
        "34": "  public PropertyTable() {",
        "29": " */",
        "30": "public class PropertyTable extends Table {"
      },
      "id": 59112834,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "http://pride-toolsuite.googlecode.com/svn/",
      "language": "Java",
      "linescount": 62,
      "location": "/pride-inspector/tags/1.0.6/src/main/java/uk/ac/ebi/pride/gui/component/mzgraph",
      "name": "pride-toolsuite",
      "url": "https://searchcode.com/codesearch/view/13417553/",
      "md5hash": "cff374b2c4b655f4083f3ec322fd24fa",
      "lines": {
        "16": " */",
        "17": "public class PropertyTable extends JTable {",
        "18": "",
        "19": "    public PropertyTable(Collection<Parameter> params) {",
        "20": "        this.setModel(new PropertyTableModel(params));",
        "21": "        this.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));",
        "23": "    ",
        "24": "    private static class PropertyTableModel extends AbstractTableModel {",
        "27": "",
        "28": "        private PropertyTableModel(Collection<Parameter> params) {"
      },
      "id": 13417553,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "http://pride-toolsuite.googlecode.com/svn/",
      "language": "Java",
      "linescount": 62,
      "location": "/pride-inspector/tags/0.2.0/src/main/java/uk/ac/ebi/pride/gui/component/mzgraph",
      "name": "pride-toolsuite",
      "url": "https://searchcode.com/codesearch/view/13417904/",
      "md5hash": "17edc1b0a62894b42d21e4b00d36bb2b",
      "lines": {
        "16": " */",
        "17": "public class PropertyTable extends JTable {",
        "18": "",
        "19": "    public PropertyTable(Collection<Parameter> params) {",
        "20": "        this.setModel(new PropertyTableModel(params));",
        "21": "        this.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));",
        "23": "    ",
        "24": "    private class PropertyTableModel extends AbstractTableModel {",
        "27": "",
        "28": "        private PropertyTableModel(Collection<Parameter> params) {"
      },
      "id": 13417904,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "http://pride-toolsuite.googlecode.com/svn/",
      "language": "Java",
      "linescount": 62,
      "location": "/pride-inspector/trunk/src/main/java/uk/ac/ebi/pride/gui/component/mzgraph",
      "name": "pride-toolsuite",
      "url": "https://searchcode.com/codesearch/view/13418224/",
      "md5hash": "7013e5101e1d84627036c0a63ff1ca0b",
      "lines": {
        "16": " */",
        "17": "public class PropertyTable extends JTable {",
        "18": "",
        "19": "    public PropertyTable(Collection<Parameter> params) {",
        "20": "        this.setModel(new PropertyTableModel(params));",
        "21": "        this.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));",
        "23": "    ",
        "24": "    private static class PropertyTableModel extends AbstractTableModel {",
        "27": "",
        "28": "        private PropertyTableModel(Collection<Parameter> params) {"
      },
      "id": 13418224,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "http://gwt-stuff.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 149,
      "location": "/src/org/mcarthur/sandy/gwt/table/client/alpha",
      "name": "gwt-stuff",
      "url": "https://searchcode.com/codesearch/view/13739577/",
      "md5hash": "0d175e838a38e96070faca4664bd1293",
      "lines": {
        "48": "",
        "49": "    private final PropertyTableModel ptm;",
        "50": "    private final PropertyTableEventList ptel;",
        "51": "",
        "52": "    public PropertyTable(final PropertyTableModel ptm) {",
        "55": "        this.ptm = ptm;",
        "56": "        ptel = new PropertyTableEventList(ptm.getElements());",
        "43": " */",
        "44": "public class PropertyTable extends Composite {"
      },
      "id": 13739577,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "http://facile-api.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 82,
      "location": "/Facile/at/pollaknet/api/facile/header/cli/stream/metatable",
      "name": "facile-api",
      "url": "https://searchcode.com/codesearch/view/12576941/",
      "md5hash": "472d33b74f5b9779e278d54d7d5c63db",
      "lines": {
        "16": "public class PropertyTable extends AbstractTable {",
        "15": " */"
      },
      "id": 12576941,
      "filename": "PropertyTable.java"
    },
    {
      "repo": "https://github.com/luosong/RoboBinding.git",
      "language": "Java",
      "linescount": 1021,
      "location": "/robobinding/src/main/java/org/robobinding/internal/java_beans",
      "name": "RoboBinding",
      "url": "https://searchcode.com/codesearch/view/94154166/",
      "md5hash": "3a2e9ced4bd21e5b7234605187303332",
      "lines": {
        "480": "\t// fix possible getter & setter collisions",
        "481": "\tfixGetSet(propertyTable);",
        "694": "",
        "556": "",
        "557": "    private static void introspectGet(Method theMethod, HashMap<String, HashMap> propertyTable) {",
        "689": "     *",
        "690": "     * @param propertyTable",
        "692": "     */",
        "661": "",
        "662": "\tHashMap table = propertyTable.get(propertyName);",
        "695": "\tif (propertyTable == null) {",
        "664": "\t    table = new HashMap();",
        "665": "\t    propertyTable.put(propertyName, table);",
        "698": "",
        "699": "\tfor (Map.Entry<String, HashMap> entry : propertyTable.entrySet()) {",
        "693": "    private void fixGetSet(HashMap<String, HashMap> propertyTable) throws IntrospectionException {"
      },
      "id": 94154166,
      "filename": "StandardBeanInfo.java"
    },
    {
      "repo": "https://github.com/hoshi3115/Activiti.git",
      "language": "Java",
      "linescount": 41,
      "location": "/modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/simple/editor/listener",
      "name": "Activiti",
      "url": "https://searchcode.com/codesearch/view/84895200/",
      "md5hash": "30a854df839df3caf04e1cc2e87f7ce9",
      "lines": {
        "33": "  public void buttonClick(ClickEvent event) {",
        "34": "    if (propertyTable.size() > 1) {",
        "35": "      Object id = event.getButton().getData();",
        "36": "      propertyTable.removeItem(id);",
        "14": "",
        "15": "import org.activiti.explorer.ui.process.simple.editor.table.PropertyTable;",
        "26": "",
        "27": "  protected PropertyTable propertyTable;",
        "28": "",
        "29": "  public DeletePropertyClickListener(PropertyTable propertyTable) {",
        "30": "    this.propertyTable = propertyTable;",
        "31": "  }"
      },
      "id": 84895200,
      "filename": "DeletePropertyClickListener.java"
    },
    {
      "repo": "https://github.com/bmorrise/pentaho-reporting.git",
      "language": "Java",
      "linescount": 248,
      "location": "/designer/datasource-editor-table/source/org/pentaho/reporting/ui/datasources/sequence",
      "name": "pentaho-reporting",
      "url": "https://searchcode.com/codesearch/view/100683157/",
      "md5hash": "b77b6de09c766ce36bfc2d1806cfe3bd",
      "lines": {
        "128": "",
        "129": "    propertyTableModel = new SequencePropertyTableModel();",
        "130": "    propertyTable = new PropertyTable();",
        "131": "    propertyTable.setModel(propertyTableModel);",
        "132": "",
        "167": "      this.sequence = sequence;",
        "40": "import org.pentaho.reporting.libraries.designtime.swing.settings.LocaleSettings;",
        "41": "import org.pentaho.reporting.libraries.designtime.swing.table.PropertyTable;",
        "140": "    setLayout(new BorderLayout());",
        "141": "    add(new JScrollPane(propertyTable), BorderLayout.CENTER);",
        "173": "        propertyTable.setEnabled(false);",
        "168": "      this.propertyTableModel.setSequence(sequence);",
        "172": "        sequenceNameBox.setEnabled(false);",
        "148": "  {",
        "149": "    propertyTable.applyLocaleSettings(localeSettings);"
      },
      "id": 100683157,
      "filename": "SequenceEditor.java"
    },
    {
      "repo": "https://github.com/erikryverling/soapui.git",
      "language": "Java",
      "linescount": 58,
      "location": "/soapui/src/main/java/com/eviware/soapui/impl/wsdl/panels/teststeps/support",
      "name": "soapui",
      "url": "https://searchcode.com/codesearch/view/96361297/",
      "md5hash": "c454ae952d23bd5b5f1bfeaf67b82a93",
      "lines": {
        "34": "",
        "35": "    public RemovePropertyAction(JTable propertyTable, MutableTestPropertyHolder propertyHolder, String description) {",
        "36": "        super(DELETE_PARAM_ACTON_NAME);",
        "37": "        this.propertyTable = propertyTable;",
        "44": "    public void actionPerformed(ActionEvent e) {",
        "45": "        int row = propertyTable.getSelectedRow();",
        "49": "",
        "50": "        UISupport.stopCellEditing(propertyTable);",
        "51": "",
        "52": "        String propertyName = propertyTable.getValueAt(row, 0).toString();",
        "53": "        if (UISupport.confirm(\"Remove parameter [\" + propertyName + \"]?\", \"Remove Parameter\")) {",
        "54": "            propertyTable.clearSelection();",
        "30": "public class RemovePropertyAction extends AbstractAction {",
        "31": "    private final JTable propertyTable;"
      },
      "id": 96361297,
      "filename": "RemovePropertyAction.java"
    },
    {
      "repo": "https://github.com/erikryverling/soapui.git",
      "language": "Java",
      "linescount": 52,
      "location": "/soapui/src/main/java/com/eviware/soapui/impl/wsdl/panels/teststeps/support",
      "name": "soapui",
      "url": "https://searchcode.com/codesearch/view/96361333/",
      "md5hash": "e23605b9a674e98dd3d7be72069fbd08",
      "lines": {
        "32": "    private final JTable propertyTable;",
        "34": "",
        "35": "    public MovePropertyUpAction(JTable propertyTable, MutableTestPropertyHolder propertyHolder, String description) {",
        "36": "        super(MOVE_PROPERTY_UP_ACTION_NAME);",
        "37": "        this.propertyTable = propertyTable;",
        "44": "    public void actionPerformed(ActionEvent e) {",
        "45": "        int ix = propertyTable.getSelectedRow();",
        "46": "        if (ix != -1) {",
        "47": "            String propName = (String) propertyTable.getValueAt(ix, 0);",
        "48": "            ((PropertyHolderTableModel) propertyTable.getModel()).moveProperty(propName, ix, ix - 1);",
        "49": "            propertyTable.setRowSelectionInterval(ix - 1, ix - 1);",
        "50": "        }",
        "31": "    public static final String MOVE_PROPERTY_UP_ACTION_NAME = \"Move Property up\";"
      },
      "id": 96361333,
      "filename": "MovePropertyUpAction.java"
    },
    {
      "repo": "https://github.com/erikryverling/soapui.git",
      "language": "Java",
      "linescount": 53,
      "location": "/soapui/src/main/java/com/eviware/soapui/impl/wsdl/panels/teststeps/support",
      "name": "soapui",
      "url": "https://searchcode.com/codesearch/view/96361336/",
      "md5hash": "b55f8d13bf6dd3b555fec55eb7e82651",
      "lines": {
        "32": "    private final JTable propertyTable;",
        "34": "",
        "35": "    public MovePropertyDownAction(JTable propertyTable, MutableTestPropertyHolder propertyHolder, String description) {",
        "36": "        super(MOVE_PROPERTY_DOWN_ACTION_NAME);",
        "37": "        this.propertyTable = propertyTable;",
        "44": "    public void actionPerformed(ActionEvent e) {",
        "45": "        int ix = propertyTable.getSelectedRow();",
        "46": "        if (ix != -1) {",
        "47": "            String propName = (String) propertyTable.getValueAt(ix, 0);",
        "48": "            ((PropertyHolderTableModel) propertyTable.getModel()).moveProperty(propName, ix, ix + 1);",
        "49": "            propertyTable.setRowSelectionInterval(ix + 1, ix + 1);",
        "50": "        }",
        "31": "    public static final String MOVE_PROPERTY_DOWN_ACTION_NAME = \"Move Property Down\";"
      },
      "id": 96361336,
      "filename": "MovePropertyDownAction.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 107,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 72,
      "source": "Github",
      "id": 2
    },
    {
      "count": 23,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 16,
      "source": "Google Code",
      "id": 1
    }
  ]
}