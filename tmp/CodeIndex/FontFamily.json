{
  "matchterm": "FontFamily",
  "previouspage": null,
  "searchterm": "FontFamily",
  "query": "FontFamily",
  "language_filters": [
    {
      "count": 1317,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 1317,
  "results": [
    {
      "repo": "http://umple.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 203,
      "location": "/Umplificator/UmplifiedProjects/jhotdraw7/src/main/java/org/jhotdraw/gui/fontchooser",
      "name": "umple",
      "url": "https://searchcode.com/codesearch/view/2884186/",
      "md5hash": "e73bbb618fdf728a4420a40cf427673a",
      "lines": {
        "32": "",
        "1": "/**",
        "2": " * @(#)FontFamily.java",
        "37": "    @Override",
        "38": "    public int compareTo(FontFamilyNode that) {",
        "33": "    public FontFamilyNode(String name) {",
        "42": "    @Override",
        "43": "    public FontFamilyNode clone() {",
        "44": "        FontFamilyNode that;",
        "19": "/**",
        "20": " * A FontFamilyNode is a MutableTreeNode which only allows FontFaceNode",
        "23": " * @author Werner Randelshofer",
        "24": " * @version $Id: FontFamilyNode.java 717 2010-11-21 12:30:57Z rawcoder $",
        "25": " */",
        "26": "public class FontFamilyNode implements MutableTreeNode, Comparable<FontFamilyNode>, Cloneable {"
      },
      "id": 2884186,
      "filename": "FontFamilyNode.java"
    },
    {
      "repo": "https://bitbucket.org/gustavoasoares/saferefactor.git",
      "language": "Java",
      "linescount": 186,
      "location": "/test/subjects/JHD458target/src/org/jhotdraw/gui/fontchooser",
      "name": "saferefactor",
      "url": "https://searchcode.com/codesearch/view/136063761/",
      "md5hash": "9630936997a85d815eb974da75c2c7e4",
      "lines": {
        "32": "",
        "1": "/**",
        "2": " * @(#)FontFamily.java  1.0  May 19, 2008",
        "36": "",
        "37": "    public int compareTo(FontFamilyNode that) {",
        "33": "    public FontFamilyNode(String name) {",
        "72": "        FontFamilyNode oldParent = (FontFamilyNode) newChild.getParent();",
        "41": "    @Override",
        "42": "    public FontFamilyNode clone() {",
        "43": "        FontFamilyNode that;",
        "44": "        try {",
        "45": "            that = (FontFamilyNode) super.clone();",
        "178": "    public boolean equals(Object o) {",
        "179": "        if (o instanceof FontFamilyNode) {",
        "180": "            FontFamilyNode that = (FontFamilyNode) o;",
        "71": "    public void insert(MutableTreeNode newChild, int index) {"
      },
      "id": 136063761,
      "filename": "FontFamilyNode.java"
    },
    {
      "repo": "https://bitbucket.org/gustavoasoares/saferefactor.git",
      "language": "Java",
      "linescount": 186,
      "location": "/test/subjects/JHD596source/src/org/jhotdraw/gui/fontchooser",
      "name": "saferefactor",
      "url": "https://searchcode.com/codesearch/view/136066880/",
      "md5hash": "d03538b1c395abefaad95436c4ea50e7",
      "lines": {
        "32": "",
        "1": "/**",
        "2": " * @(#)FontFamily.java",
        "36": "",
        "37": "    public int compareTo(FontFamilyNode that) {",
        "33": "    public FontFamilyNode(String name) {",
        "41": "    @Override",
        "42": "    public FontFamilyNode clone() {",
        "43": "        FontFamilyNode that;",
        "21": "/**",
        "22": " * A FontFamilyNode is a MutableTreeNode which only allows FontFaceNode",
        "25": " * @author Werner Randelshofer",
        "26": " *\u00c2\u00a0@version $Id: FontFamilyNode.java 527 2009-06-07 14:28:19Z rawcoder $",
        "27": " */",
        "28": "public class FontFamilyNode implements MutableTreeNode, Comparable<FontFamilyNode>, Cloneable {"
      },
      "id": 136066880,
      "filename": "FontFamilyNode.java"
    },
    {
      "repo": "https://bitbucket.org/gustavoasoares/saferefactor.git",
      "language": "Java",
      "linescount": 186,
      "location": "/test/subjects/JHD596target/src/org/jhotdraw/gui/fontchooser",
      "name": "saferefactor",
      "url": "https://searchcode.com/codesearch/view/136067856/",
      "md5hash": "d03538b1c395abefaad95436c4ea50e7",
      "lines": {
        "32": "",
        "1": "/**",
        "2": " * @(#)FontFamily.java",
        "36": "",
        "37": "    public int compareTo(FontFamilyNode that) {",
        "33": "    public FontFamilyNode(String name) {",
        "41": "    @Override",
        "42": "    public FontFamilyNode clone() {",
        "43": "        FontFamilyNode that;",
        "21": "/**",
        "22": " * A FontFamilyNode is a MutableTreeNode which only allows FontFaceNode",
        "25": " * @author Werner Randelshofer",
        "26": " *\u00c2\u00a0@version $Id: FontFamilyNode.java 527 2009-06-07 14:28:19Z rawcoder $",
        "27": " */",
        "28": "public class FontFamilyNode implements MutableTreeNode, Comparable<FontFamilyNode>, Cloneable {"
      },
      "id": 136067856,
      "filename": "FontFamilyNode.java"
    },
    {
      "repo": "https://bitbucket.org/gustavoasoares/saferefactor.git",
      "language": "Java",
      "linescount": 186,
      "location": "/test/subjects/JHD458source/src/org/jhotdraw/gui/fontchooser",
      "name": "saferefactor",
      "url": "https://searchcode.com/codesearch/view/136068718/",
      "md5hash": "9630936997a85d815eb974da75c2c7e4",
      "lines": {
        "32": "",
        "1": "/**",
        "2": " * @(#)FontFamily.java  1.0  May 19, 2008",
        "36": "",
        "37": "    public int compareTo(FontFamilyNode that) {",
        "33": "    public FontFamilyNode(String name) {",
        "72": "        FontFamilyNode oldParent = (FontFamilyNode) newChild.getParent();",
        "41": "    @Override",
        "42": "    public FontFamilyNode clone() {",
        "43": "        FontFamilyNode that;",
        "44": "        try {",
        "45": "            that = (FontFamilyNode) super.clone();",
        "178": "    public boolean equals(Object o) {",
        "179": "        if (o instanceof FontFamilyNode) {",
        "180": "            FontFamilyNode that = (FontFamilyNode) o;",
        "71": "    public void insert(MutableTreeNode newChild, int index) {"
      },
      "id": 136068718,
      "filename": "FontFamilyNode.java"
    },
    {
      "repo": "https://github.com/msteptoe/FURI_Code.git",
      "language": "Java",
      "linescount": 91,
      "location": "/IJ_Mobile/src/ome/xml/model/enums",
      "name": "FURI_Code",
      "url": "https://searchcode.com/codesearch/view/71585708/",
      "md5hash": "d3453e1ac8612f37fc09eb04c704d0e0",
      "lines": {
        "1": "/*",
        "2": " * ome.xml.model.enums.FontFamily",
        "50": "  public static FontFamily fromString(String value)",
        "73": "    String s = String.format(\"%s not a supported value of %s\",",
        "49": "",
        "40": "",
        "41": "public enum FontFamily implements Enumeration",
        "74": "                             value, FontFamily.class);",
        "44": "  ",
        "45": "  private FontFamily(String value)"
      },
      "id": 71585708,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://bitbucket.org/stofke72/pdf2svg",
      "language": "Java",
      "linescount": 164,
      "location": "/src/main/java/org/xmlcml/pdf2svg",
      "name": "pdf2svg",
      "url": "https://searchcode.com/codesearch/view/103132476/",
      "md5hash": "56981d1e726184bc30b164afb475f0df",
      "lines": {
        "65": "",
        "66": "\tpublic FontFamily() {",
        "75": "\t\t\t\tthrow new RuntimeException(\"FontFamilySet children must be: \"+FONT_FAMILY);",
        "69": "",
        "70": "\tpublic static FontFamily createFromElement(Element fontFamilyElement) {",
        "71": "\t\tFontFamily fontFamily = null;",
        "72": "\t\ttry {",
        "73": "\t\t\tfontFamily = new FontFamily();",
        "42": " */",
        "43": "public class FontFamily {",
        "44": "",
        "45": "\tpublic final static Logger LOG = Logger.getLogger(FontFamily.class);",
        "47": "\tpublic static final String CODE_POINT_SET = \"codePointSet\";",
        "48": "\tpublic final static String FONT_FAMILY = \"fontFamily\";",
        "74": "\t\t\tif (!(FONT_FAMILY.equals(fontFamilyElement.getLocalName()))) {"
      },
      "id": 103132476,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://bitbucket.org/nkabir/jdk-6",
      "language": "Java",
      "linescount": 297,
      "location": "/jdk/src/share/classes/sun/font",
      "name": "jdk-6",
      "url": "https://searchcode.com/codesearch/view/60701426/",
      "md5hash": "21ece22a756926488839b537ac1fbb97",
      "lines": {
        "32": "",
        "33": "public class FontFamily {",
        "34": "",
        "35": "    private static ConcurrentHashMap<String, FontFamily>",
        "36": "        familyNameMap = new ConcurrentHashMap<String, FontFamily>();",
        "37": "    private static HashMap<String, FontFamily> allLocaleNames;",
        "38": "",
        "269": "     */",
        "46": "",
        "47": "    public static FontFamily getFamily(String name) {",
        "272": "            allLocaleNames = new HashMap<String, FontFamily>();",
        "83": "",
        "84": "    public FontFamily(String name, boolean isLogFont, int rank) {",
        "270": "    static synchronized void addLocaleNames(FontFamily family, String[] names){",
        "271": "        if (allLocaleNames == null) {"
      },
      "id": 60701426,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://bitbucket.org/jwalton/jdk",
      "language": "Java",
      "linescount": 297,
      "location": "/src/share/classes/sun/font",
      "name": "jdk",
      "url": "https://searchcode.com/codesearch/view/123591200/",
      "md5hash": "21ece22a756926488839b537ac1fbb97",
      "lines": {
        "32": "",
        "33": "public class FontFamily {",
        "34": "",
        "35": "    private static ConcurrentHashMap<String, FontFamily>",
        "36": "        familyNameMap = new ConcurrentHashMap<String, FontFamily>();",
        "37": "    private static HashMap<String, FontFamily> allLocaleNames;",
        "38": "",
        "269": "     */",
        "46": "",
        "47": "    public static FontFamily getFamily(String name) {",
        "272": "            allLocaleNames = new HashMap<String, FontFamily>();",
        "83": "",
        "84": "    public FontFamily(String name, boolean isLogFont, int rank) {",
        "270": "    static synchronized void addLocaleNames(FontFamily family, String[] names){",
        "271": "        if (allLocaleNames == null) {"
      },
      "id": 123591200,
      "filename": "FontFamily.java"
    },
    {
      "repo": "git://github.com/CyanogenMod/android_frameworks_base.git",
      "language": "Java",
      "linescount": 81,
      "location": "/graphics/java/android/graphics",
      "name": "android_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/116011950/",
      "md5hash": "46c2c583cdabf9ea2a918c5a393bee3c",
      "lines": {
        "32": "    public FontFamily() {",
        "48": "            throw new IllegalStateException(\"error creating native FontFamily\");",
        "34": "        if (mNativePtr == 0) {",
        "35": "            throw new IllegalStateException(\"error creating native FontFamily\");",
        "38": "",
        "39": "    public FontFamily(String lang, String variant) {",
        "25": " */",
        "26": "public class FontFamily {",
        "47": "        if (mNativePtr == 0) {",
        "31": ""
      },
      "id": 116011950,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://github.com/hoadx/spreadshirtapps.git",
      "language": "Java",
      "linescount": 66,
      "location": "/java/samplebrowser/src/main/java/net/sprd/sampleapps/common/dataaccess/model",
      "name": "spreadshirtapps",
      "url": "https://searchcode.com/codesearch/view/97925085/",
      "md5hash": "0b12847219f7375a1751214cd49de0dc",
      "lines": {
        "40": "",
        "59": "        sb.append(\"FontFamily\");",
        "7": " */",
        "8": "public class FontFamily implements Serializable {",
        "41": "        FontFamily that = (FontFamily) o;",
        "58": "        final StringBuffer sb = new StringBuffer();",
        "11": "",
        "12": "    public FontFamily() {",
        "14": "",
        "15": "    public FontFamily(String id, String name) {"
      },
      "id": 97925085,
      "filename": "FontFamily.java"
    },
    {
      "repo": "git://github.com/GregBowyer/ManagedRuntimeInitiative.git",
      "language": "Java",
      "linescount": 297,
      "location": "/MRI-J/jdk/src/share/classes/sun/font",
      "name": "ManagedRuntimeInitiative",
      "url": "https://searchcode.com/codesearch/view/17104773/",
      "md5hash": "7780d5c92ad210e4fab4f987142024e2",
      "lines": {
        "32": "",
        "33": "public class FontFamily {",
        "34": "",
        "35": "    private static ConcurrentHashMap<String, FontFamily>",
        "36": "        familyNameMap = new ConcurrentHashMap<String, FontFamily>();",
        "37": "    private static HashMap<String, FontFamily> allLocaleNames;",
        "38": "",
        "269": "     */",
        "46": "",
        "47": "    public static FontFamily getFamily(String name) {",
        "272": "            allLocaleNames = new HashMap<String, FontFamily>();",
        "83": "",
        "84": "    public FontFamily(String name, boolean isLogFont, int rank) {",
        "270": "    static synchronized void addLocaleNames(FontFamily family, String[] names){",
        "271": "        if (allLocaleNames == null) {"
      },
      "id": 17104773,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://bitbucket.org/screenconnect/openjdk8-jdk",
      "language": "Java",
      "linescount": 441,
      "location": "/src/share/classes/sun/font",
      "name": "openjdk8-jdk",
      "url": "https://searchcode.com/codesearch/view/136815545/",
      "md5hash": "8c48be540ae6a9e0ea95705cf1741394",
      "lines": {
        "34": "",
        "35": "public class FontFamily {",
        "36": "",
        "37": "    private static ConcurrentHashMap<String, FontFamily>",
        "38": "        familyNameMap = new ConcurrentHashMap<String, FontFamily>();",
        "39": "    private static HashMap<String, FontFamily> allLocaleNames;",
        "40": "",
        "425": "    public static FontFamily[] getAllFontFamilies() {",
        "426": "       Collection<FontFamily> families = familyNameMap.values();",
        "427": "       return families.toArray(new FontFamily[0]);",
        "424": "",
        "408": "     */",
        "409": "    static synchronized void addLocaleNames(FontFamily family, String[] names){",
        "410": "        if (allLocaleNames == null) {",
        "411": "            allLocaleNames = new HashMap<String, FontFamily>();"
      },
      "id": 136815545,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://github.com/android/platform_frameworks_base.git",
      "language": "Java",
      "linescount": 203,
      "location": "/graphics/java/android/graphics",
      "name": "platform_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/140969402/",
      "md5hash": "f6c44c309acadf4042a357a7e07ddd3a",
      "lines": {
        "160": "     * freeze() won't fail and will create an empty FontFamily. This empty FontFamily is placed at",
        "161": "     * the top of the fallback chain but is never used. if we don't create this empty FontFamily",
        "34": " */",
        "35": "public class FontFamily {",
        "36": "",
        "37": "    private static String TAG = \"FontFamily\";",
        "162": "     * and put it at top, bad things (performance regressions, unexpected glyph selection) will",
        "46": "",
        "47": "    public FontFamily() {",
        "50": "",
        "51": "    public FontFamily(String lang, int variant) {",
        "153": "    /**",
        "154": "     * Allow creating unsupported FontFamily.",
        "155": "     *",
        "156": "     * For compatibility reasons, we still need to create a FontFamily object even if Minikin failed",
        "159": "     * return null if Minikin fails to find any usable 'cmap' table. By calling this method, the"
      },
      "id": 140969402,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://bitbucket.org/hamishm/haiku-jdk-jdk",
      "language": "Java",
      "linescount": 298,
      "location": "/src/share/classes/sun/font",
      "name": "haiku-jdk-jdk",
      "url": "https://searchcode.com/codesearch/view/127231875/",
      "md5hash": "0f511957ebde744cf4021eb06dd8692c",
      "lines": {
        "32": "",
        "33": "public class FontFamily {",
        "34": "",
        "35": "    private static ConcurrentHashMap<String, FontFamily>",
        "36": "        familyNameMap = new ConcurrentHashMap<String, FontFamily>();",
        "37": "    private static HashMap<String, FontFamily> allLocaleNames;",
        "38": "",
        "46": "",
        "47": "    public static FontFamily getFamily(String name) {",
        "272": "        if (allLocaleNames == null) {",
        "273": "            allLocaleNames = new HashMap<String, FontFamily>();",
        "83": "",
        "84": "    public FontFamily(String name, boolean isLogFont, int rank) {",
        "61": "        String name = font2D.getFamilyName(Locale.ENGLISH);",
        "62": "        FontFamily family = getFamily(name);"
      },
      "id": 127231875,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://bitbucket.org/chegar/jigsaw_jigsaw_jdk",
      "language": "Java",
      "linescount": 298,
      "location": "/src/share/classes/sun/font",
      "name": "jigsaw_jigsaw_jdk",
      "url": "https://searchcode.com/codesearch/view/129548799/",
      "md5hash": "0f511957ebde744cf4021eb06dd8692c",
      "lines": {
        "32": "",
        "33": "public class FontFamily {",
        "34": "",
        "35": "    private static ConcurrentHashMap<String, FontFamily>",
        "36": "        familyNameMap = new ConcurrentHashMap<String, FontFamily>();",
        "37": "    private static HashMap<String, FontFamily> allLocaleNames;",
        "38": "",
        "46": "",
        "47": "    public static FontFamily getFamily(String name) {",
        "272": "        if (allLocaleNames == null) {",
        "273": "            allLocaleNames = new HashMap<String, FontFamily>();",
        "83": "",
        "84": "    public FontFamily(String name, boolean isLogFont, int rank) {",
        "61": "        String name = font2D.getFamilyName(Locale.ENGLISH);",
        "62": "        FontFamily family = getFamily(name);"
      },
      "id": 129548799,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://bitbucket.org/chegar/jigsaw_modulefileparser",
      "language": "Java",
      "linescount": 298,
      "location": "/src/share/classes/sun/font",
      "name": "jigsaw_modulefileparser",
      "url": "https://searchcode.com/codesearch/view/129568536/",
      "md5hash": "0f511957ebde744cf4021eb06dd8692c",
      "lines": {
        "32": "",
        "33": "public class FontFamily {",
        "34": "",
        "35": "    private static ConcurrentHashMap<String, FontFamily>",
        "36": "        familyNameMap = new ConcurrentHashMap<String, FontFamily>();",
        "37": "    private static HashMap<String, FontFamily> allLocaleNames;",
        "38": "",
        "46": "",
        "47": "    public static FontFamily getFamily(String name) {",
        "272": "        if (allLocaleNames == null) {",
        "273": "            allLocaleNames = new HashMap<String, FontFamily>();",
        "83": "",
        "84": "    public FontFamily(String name, boolean isLogFont, int rank) {",
        "61": "        String name = font2D.getFamilyName(Locale.ENGLISH);",
        "62": "        FontFamily family = getFamily(name);"
      },
      "id": 129568536,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://bitbucket.org/sreilly/openjdk7u-jdk",
      "language": "Java",
      "linescount": 298,
      "location": "/src/share/classes/sun/font",
      "name": "openjdk7u-jdk",
      "url": "https://searchcode.com/codesearch/view/130317042/",
      "md5hash": "0f511957ebde744cf4021eb06dd8692c",
      "lines": {
        "32": "",
        "33": "public class FontFamily {",
        "34": "",
        "35": "    private static ConcurrentHashMap<String, FontFamily>",
        "36": "        familyNameMap = new ConcurrentHashMap<String, FontFamily>();",
        "37": "    private static HashMap<String, FontFamily> allLocaleNames;",
        "38": "",
        "46": "",
        "47": "    public static FontFamily getFamily(String name) {",
        "272": "        if (allLocaleNames == null) {",
        "273": "            allLocaleNames = new HashMap<String, FontFamily>();",
        "83": "",
        "84": "    public FontFamily(String name, boolean isLogFont, int rank) {",
        "61": "        String name = font2D.getFamilyName(Locale.ENGLISH);",
        "62": "        FontFamily family = getFamily(name);"
      },
      "id": 130317042,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://bitbucket.org/infinitekind/openjdk7u-jdk",
      "language": "Java",
      "linescount": 298,
      "location": "/src/share/classes/sun/font",
      "name": "openjdk7u-jdk",
      "url": "https://searchcode.com/codesearch/view/132217357/",
      "md5hash": "0f511957ebde744cf4021eb06dd8692c",
      "lines": {
        "32": "",
        "33": "public class FontFamily {",
        "34": "",
        "35": "    private static ConcurrentHashMap<String, FontFamily>",
        "36": "        familyNameMap = new ConcurrentHashMap<String, FontFamily>();",
        "37": "    private static HashMap<String, FontFamily> allLocaleNames;",
        "38": "",
        "46": "",
        "47": "    public static FontFamily getFamily(String name) {",
        "272": "        if (allLocaleNames == null) {",
        "273": "            allLocaleNames = new HashMap<String, FontFamily>();",
        "83": "",
        "84": "    public FontFamily(String name, boolean isLogFont, int rank) {",
        "61": "        String name = font2D.getFamilyName(Locale.ENGLISH);",
        "62": "        FontFamily family = getFamily(name);"
      },
      "id": 132217357,
      "filename": "FontFamily.java"
    },
    {
      "repo": "https://bitbucket.org/psandoz/lambda-jdk-pipeline-patches",
      "language": "Java",
      "linescount": 298,
      "location": "/src/share/classes/sun/font",
      "name": "lambda-jdk-pipeline-patches",
      "url": "https://searchcode.com/codesearch/view/132823398/",
      "md5hash": "0f511957ebde744cf4021eb06dd8692c",
      "lines": {
        "32": "",
        "33": "public class FontFamily {",
        "34": "",
        "35": "    private static ConcurrentHashMap<String, FontFamily>",
        "36": "        familyNameMap = new ConcurrentHashMap<String, FontFamily>();",
        "37": "    private static HashMap<String, FontFamily> allLocaleNames;",
        "38": "",
        "46": "",
        "47": "    public static FontFamily getFamily(String name) {",
        "272": "        if (allLocaleNames == null) {",
        "273": "            allLocaleNames = new HashMap<String, FontFamily>();",
        "83": "",
        "84": "    public FontFamily(String name, boolean isLogFont, int rank) {",
        "61": "        String name = font2D.getFamilyName(Locale.ENGLISH);",
        "62": "        FontFamily family = getFamily(name);"
      },
      "id": 132823398,
      "filename": "FontFamily.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 743,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 378,
      "source": "Github",
      "id": 2
    },
    {
      "count": 174,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 8,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 8,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 6,
      "source": "GitLab",
      "id": 13
    }
  ]
}