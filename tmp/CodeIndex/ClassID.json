{
  "matchterm": "ClassID",
  "previouspage": null,
  "searchterm": "ClassID",
  "query": "ClassID",
  "language_filters": [
    {
      "count": 2251,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 2251,
  "results": [
    {
      "repo": "https://github.com/dedoz/kotlin.git",
      "language": "Java",
      "linescount": 96,
      "location": "/core/serialization/src/org/jetbrains/jet/descriptors/serialization",
      "name": "kotlin",
      "url": "https://searchcode.com/codesearch/view/100038641/",
      "md5hash": "207a282c7b16a45b4caa79872635f812",
      "lines": {
        "33": "",
        "34": "    public ClassId(@NotNull FqName packageFqName, @NotNull FqNameUnsafe relativeClassName) {",
        "75": "        ClassId id = (ClassId) o;",
        "74": "",
        "55": "    @NotNull",
        "56": "    public ClassId getOuterClassId() {",
        "50": "    @NotNull",
        "51": "    public ClassId createNestedClassId(@NotNull Name name) {",
        "52": "        return new ClassId(getPackageFqName(), relativeClassName.child(name));",
        "53": "    }",
        "23": "",
        "24": "public final class ClassId {",
        "57": "        return new ClassId(getPackageFqName(), relativeClassName.parent());",
        "26": "    @NotNull",
        "27": "    public static ClassId topLevel(@NotNull FqName topLevelFqName) {",
        "28": "        return new ClassId(topLevelFqName.parent(), FqNameUnsafe.topLevel(topLevelFqName.shortName()));",
        "58": "    }"
      },
      "id": 100038641,
      "filename": "ClassId.java"
    },
    {
      "repo": "https://github.com/Bludge0n/disunity.git",
      "language": "Java",
      "linescount": 106,
      "location": "/src/info/ata4/unity/util",
      "name": "disunity",
      "url": "https://searchcode.com/codesearch/view/96319087/",
      "md5hash": "61c47ba4e1449389be17ea398ba55f50",
      "lines": {
        "98": "    ",
        "99": "    public static String getNameForID(int classID) {",
        "100": "        return getNameForID(classID, false);",
        "101": "    }",
        "102": "    ",
        "103": "    private ClassID() {",
        "40": "        ",
        "41": "        try (InputStream is = ClassID.class.getResourceAsStream(CLASSID_PATH)) {",
        "28": "public class ClassID {",
        "87": "    ",
        "88": "    public static String getNameForID(int classID, boolean safe) {",
        "89": "        String className = ID_TO_NAME.get(classID);",
        "90": "        ",
        "27": " */",
        "92": "        if (className == null && safe) {",
        "93": "            className = \"Class\" + classID;"
      },
      "id": 96319087,
      "filename": "ClassID.java"
    },
    {
      "repo": "http://l2emu.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 442,
      "location": "/L2EmuProject-Game/src/main/java/net/l2emuproject/gameserver/entity/base",
      "name": "l2emu",
      "url": "https://searchcode.com/codesearch/view/13354765/",
      "md5hash": "76ebb1f75b960ba1aa827e0100f3699d",
      "lines": {
        "291": "\t",
        "292": "\tprivate EnumSet<ClassId> _defaultAvailableSubclasses;",
        "261": "\t/**",
        "262": "\t * Return True if this Class is equal to the selected ClassId or a child of the selected ClassId.<BR>",
        "264": "\t * ",
        "265": "\t * @param cid The parent ClassId to check",
        "266": "\t */",
        "267": "\tpublic final boolean equalsOrChildOf(ClassId cid)",
        "275": "\t * ",
        "276": "\t * @param cid The parent ClassId to check",
        "21": "",
        "22": "public enum ClassId",
        "293": "\t",
        "283": "\t/**",
        "284": "\t * Return its parent ClassId<BR>",
        "286": "\t */",
        "287": "\tpublic final ClassId getParent()"
      },
      "id": 13354765,
      "filename": "ClassId.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 266,
      "location": "/components/forks/poi/src/loci/poi/hpsf",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642669/",
      "md5hash": "3129629c610f15f535d25cc1bd961c5e",
      "lines": {
        "256": "        {",
        "257": "            sbClassId.append(HexDump.toHex(bytes[i]));",
        "258": "            if (i == 3 || i == 5 || i == 7 || i == 9)",
        "67": "    /**",
        "68": "     *  <p>Creates a {@link ClassID} and reads its value from a byte",
        "261": "        sbClassId.append('}');",
        "73": "     */",
        "74": "    public ClassID(final byte[] src, final int offset)",
        "46": " *  <p>Represents a class ID (16 bytes). Unlike other little-endian",
        "47": " *  type the {@link ClassID} is not just 16 bytes stored in the wrong",
        "259": "                sbClassId.append('-');",
        "52": " * href=\"mailto:klute@rainer-klute.de\">&lt;klute@rainer-klute.de&gt;</a>",
        "53": " * @version $Id: ClassID.java 489730 2006-12-22 19:18:16Z bayard $",
        "55": " */",
        "56": "public class ClassID",
        "260": "        }"
      },
      "id": 15642669,
      "filename": "ClassID.java"
    },
    {
      "repo": "https://bitbucket.org/EvTeam/l2evil.git",
      "language": "Java",
      "linescount": 318,
      "location": "/gameserver/src/main/java/l2p/gameserver/model/base",
      "name": "l2evil",
      "url": "https://searchcode.com/codesearch/view/50893597/",
      "md5hash": "d1b87715fc0850a86e4f9a192477046f",
      "lines": {
        "32": " * <li>parent2 : The parent2 ClassId for female or null if parent2 like parent</li>",
        "33": " * <li>level : The child level of this Class</li><BR><BR>",
        "34": " */",
        "35": "public enum ClassId",
        "264": "\t/**",
        "265": "\t * Return True if this Class<?> is a child of the selected ClassId.<BR><BR>",
        "266": "\t *",
        "267": "\t * @param cid The parent ClassId to check",
        "268": "\t */",
        "269": "\tpublic final boolean childOf(ClassId cid)",
        "281": "\t/**",
        "282": "\t * Return True if this Class<?> is equal to the selected ClassId or a child of the selected ClassId.<BR><BR>",
        "283": "\t *",
        "284": "\t * @param cid The parent ClassId to check",
        "30": " * <li>race : The race of this class</li>",
        "31": " * <li>parent : The parent ClassId for male or null if this class is the root</li>"
      },
      "id": 50893597,
      "filename": "ClassId.java"
    },
    {
      "repo": "https://bitbucket.org/sleberrigaud_atlassian/amps.git",
      "language": "Java",
      "linescount": 109,
      "location": "/plugin-module-codegen-api/src/main/java/com/atlassian/plugins/codegen",
      "name": "amps",
      "url": "https://searchcode.com/codesearch/view/36443949/",
      "md5hash": "a9cec6e565b70c9d4106dd748358dfa2",
      "lines": {
        "32": "    ",
        "33": "    private ClassId(String packageName, String className)",
        "7": " */",
        "8": "public final class ClassId",
        "41": "     */",
        "42": "    public ClassId packageName(String packageName)",
        "43": "    {",
        "12": "    ",
        "13": "    public static ClassId packageAndClass(String packageName, String className)",
        "14": "    {",
        "15": "        return new ClassId(packageName, className); ",
        "17": "    ",
        "18": "    public static ClassId fullyQualified(String fullyQualifiedClassName)",
        "23": "        {",
        "24": "            return new ClassId(fullyQualifiedClassName.substring(0, lastDotPos),",
        "28": "        {",
        "29": "            return new ClassId(\"\", fullyQualifiedClassName);"
      },
      "id": 36443949,
      "filename": "ClassId.java"
    },
    {
      "repo": "https://bitbucket.org/rmanalan/amps.git",
      "language": "Java",
      "linescount": 109,
      "location": "/plugin-module-codegen-api/src/main/java/com/atlassian/plugins/codegen",
      "name": "amps",
      "url": "https://searchcode.com/codesearch/view/36703242/",
      "md5hash": "a9cec6e565b70c9d4106dd748358dfa2",
      "lines": {
        "32": "    ",
        "33": "    private ClassId(String packageName, String className)",
        "7": " */",
        "8": "public final class ClassId",
        "41": "     */",
        "42": "    public ClassId packageName(String packageName)",
        "43": "    {",
        "12": "    ",
        "13": "    public static ClassId packageAndClass(String packageName, String className)",
        "14": "    {",
        "15": "        return new ClassId(packageName, className); ",
        "17": "    ",
        "18": "    public static ClassId fullyQualified(String fullyQualifiedClassName)",
        "23": "        {",
        "24": "            return new ClassId(fullyQualifiedClassName.substring(0, lastDotPos),",
        "28": "        {",
        "29": "            return new ClassId(\"\", fullyQualifiedClassName);"
      },
      "id": 36703242,
      "filename": "ClassId.java"
    },
    {
      "repo": "https://bitbucket.org/mminns/amps.git",
      "language": "Java",
      "linescount": 109,
      "location": "/plugin-module-codegen-api/src/main/java/com/atlassian/plugins/codegen",
      "name": "amps",
      "url": "https://searchcode.com/codesearch/view/43046769/",
      "md5hash": "a9cec6e565b70c9d4106dd748358dfa2",
      "lines": {
        "32": "    ",
        "33": "    private ClassId(String packageName, String className)",
        "7": " */",
        "8": "public final class ClassId",
        "41": "     */",
        "42": "    public ClassId packageName(String packageName)",
        "43": "    {",
        "12": "    ",
        "13": "    public static ClassId packageAndClass(String packageName, String className)",
        "14": "    {",
        "15": "        return new ClassId(packageName, className); ",
        "17": "    ",
        "18": "    public static ClassId fullyQualified(String fullyQualifiedClassName)",
        "23": "        {",
        "24": "            return new ClassId(fullyQualifiedClassName.substring(0, lastDotPos),",
        "28": "        {",
        "29": "            return new ClassId(\"\", fullyQualifiedClassName);"
      },
      "id": 43046769,
      "filename": "ClassId.java"
    },
    {
      "repo": "https://bitbucket.org/tpettersen/amps.git",
      "language": "Java",
      "linescount": 109,
      "location": "/plugin-module-codegen-api/src/main/java/com/atlassian/plugins/codegen",
      "name": "amps",
      "url": "https://searchcode.com/codesearch/view/49730017/",
      "md5hash": "a9cec6e565b70c9d4106dd748358dfa2",
      "lines": {
        "32": "    ",
        "33": "    private ClassId(String packageName, String className)",
        "7": " */",
        "8": "public final class ClassId",
        "41": "     */",
        "42": "    public ClassId packageName(String packageName)",
        "43": "    {",
        "12": "    ",
        "13": "    public static ClassId packageAndClass(String packageName, String className)",
        "14": "    {",
        "15": "        return new ClassId(packageName, className); ",
        "17": "    ",
        "18": "    public static ClassId fullyQualified(String fullyQualifiedClassName)",
        "23": "        {",
        "24": "            return new ClassId(fullyQualifiedClassName.substring(0, lastDotPos),",
        "28": "        {",
        "29": "            return new ClassId(\"\", fullyQualifiedClassName);"
      },
      "id": 49730017,
      "filename": "ClassId.java"
    },
    {
      "repo": "https://bitbucket.org/mmeinhold/amps.git",
      "language": "Java",
      "linescount": 109,
      "location": "/plugin-module-codegen-api/src/main/java/com/atlassian/plugins/codegen",
      "name": "amps",
      "url": "https://searchcode.com/codesearch/view/51558730/",
      "md5hash": "a9cec6e565b70c9d4106dd748358dfa2",
      "lines": {
        "32": "    ",
        "33": "    private ClassId(String packageName, String className)",
        "7": " */",
        "8": "public final class ClassId",
        "41": "     */",
        "42": "    public ClassId packageName(String packageName)",
        "43": "    {",
        "12": "    ",
        "13": "    public static ClassId packageAndClass(String packageName, String className)",
        "14": "    {",
        "15": "        return new ClassId(packageName, className); ",
        "17": "    ",
        "18": "    public static ClassId fullyQualified(String fullyQualifiedClassName)",
        "23": "        {",
        "24": "            return new ClassId(fullyQualifiedClassName.substring(0, lastDotPos),",
        "28": "        {",
        "29": "            return new ClassId(\"\", fullyQualifiedClassName);"
      },
      "id": 51558730,
      "filename": "ClassId.java"
    },
    {
      "repo": "https://github.com/avanetten/gephi.git",
      "language": "Java",
      "linescount": 510,
      "location": "/modules/VisualizationImpl/src/main/java/org/gephi/visualization/opengl/octree",
      "name": "gephi",
      "url": "https://searchcode.com/codesearch/view/71275509/",
      "md5hash": "e641f9a92fd2cbb545b715b5d1f1ab79",
      "lines": {
        "256": "                if (!obj.isCacheMatching(cacheMarker)) {",
        "129": "            if (o != null) {",
        "130": "                o.addObject(classID, obj);",
        "267": "    public void resetObjectClass(int classID) {",
        "135": "        if (manualAdd) {",
        "136": "            root.addObject(classID, obj);",
        "268": "        for (Octant o : leaves) {",
        "266": "",
        "139": "",
        "140": "    public void removeObject(int classID, ModelImpl obj) {",
        "269": "            ParamAVLTree<ModelImpl> tree = o.getTree(classID);",
        "144": "            if (o != null) {",
        "145": "                octants[i].removeObject(classID, obj);",
        "279": "            //Empty the tree",
        "280": "            o.clear(classID);",
        "257": "                    removeObject(classID, obj);"
      },
      "id": 71275509,
      "filename": "Octree.java"
    },
    {
      "repo": "https://github.com/pruivo/fenix-framework.git",
      "language": "Java",
      "linescount": 356,
      "location": "/backend/jvstm-ojb/runtime/src/main/java/pt/ist/fenixframework/backend/jvstmojb/pstm",
      "name": "fenix-framework",
      "url": "https://searchcode.com/codesearch/view/72929191/",
      "md5hash": "f8fd7c3d901444739149466cd475a374",
      "lines": {
        "160": "        } else {",
        "161": "            array.set(info.classId, info);",
        "278": "    public DomainClassInfo(Class domainClass, int classId) {",
        "150": "",
        "279": "        this(domainClass.getName(), domainClass, classId);",
        "169": "        }",
        "170": "        return domainClassInfo.classId;",
        "87": "                                    + classInfo.classId + \")\");",
        "273": "    public final transient Class domainClass;",
        "274": "    public final int classId;",
        "180": "",
        "181": "    private static int mapOidToClassId(long oid) {",
        "86": "                            stmt.executeUpdate(\"INSERT INTO FF$DOMAIN_CLASS_INFO VALUES ('\" + javaClass.getName() + \"', \"",
        "151": "        int index = info.classId;",
        "280": "    }",
        "277": ""
      },
      "id": 72929191,
      "filename": "DomainClassInfo.java"
    },
    {
      "repo": "https://github.com/palvarez89/Webapp-NodeJS.git",
      "language": "Java",
      "linescount": 134,
      "location": "/bridge-java/src/org/meshpoint/anode/js",
      "name": "Webapp-NodeJS",
      "url": "https://searchcode.com/codesearch/view/74839682/",
      "md5hash": "2eb9f951005ff3da4a860f47be085815",
      "lines": {
        "37": "",
        "38": "\tpublic void release(int classId) {",
        "39": "\t\tenv.finalizeQueue.put(instHandle, classId);",
        "40": "\t}",
        "44": "\t *********************/",
        "45": "\tprotected Object __invoke(int classId, int opIdx, Object[] args) {",
        "46": "\t\tif(env.isEventThread())",
        "47": "\t\t\treturn BridgeNative.invokeJSInterface(env.getHandle(), instHandle, classId, opIdx, args);",
        "48": "\t\treturn deferOp(OP.INVOKE, env, instHandle, classId, opIdx, null, args);",
        "49": "\t}",
        "50": "",
        "51": "\tprotected Object __get(int classId, int attrIdx) {",
        "52": "\t\tif(env.isEventThread())",
        "53": "\t\t\treturn BridgeNative.getJSInterface(env.getHandle(), instHandle, classId, attrIdx);",
        "54": "\t\treturn deferOp(OP.GET, env, instHandle, classId, attrIdx, null, null);"
      },
      "id": 74839682,
      "filename": "JSInterface.java"
    },
    {
      "repo": "https://github.com/pruivo/fenix-framework.git",
      "language": "Java",
      "linescount": 277,
      "location": "/backend/jvstm-common/runtime/src/main/java/pt/ist/fenixframework/backend/jvstm/pstm",
      "name": "fenix-framework",
      "url": "https://searchcode.com/codesearch/view/72930838/",
      "md5hash": "7570e85770612389f8b07b17a91fcfcd",
      "lines": {
        "203": "            String serverIdHex = Long.toHexString(serverOidBase);",
        "198": "        } else {",
        "199": "            oid = serverOidBase + ((long) info.classId << 32) + nextKey;",
        "168": "",
        "169": "    private static int mapOidToClassId(long oid) {",
        "138": "    private static void addNewInfoToArray(ArrayList<DomainClassInfo> array, DomainClassInfo info) {",
        "139": "        int index = info.classId;",
        "204": "            String classIdHex = Long.toHexString(info.classId);",
        "46": "                logger.info(\"Existing domain class '{}' with id '{}'\", classInfo.domainClassName,",
        "47": "                        Long.toHexString(classInfo.classId));",
        "48": "                maxId = Math.max(maxId, classInfo.classId);",
        "49": "                addNewInfoToArray(array, classInfo);",
        "174": "    public static Class<? extends AbstractDomainObject> mapOidToClass(long oid) {",
        "175": "        return mapIdToClass(mapOidToClassId(oid));",
        "157": "        }",
        "158": "        return domainClassInfo.classId;"
      },
      "id": 72930838,
      "filename": "DomainClassInfo.java"
    },
    {
      "repo": "https://bitbucket.org/gkakaron/copeswingapp",
      "language": "Java",
      "linescount": 1054,
      "location": "/src/eu/opensme/cope/factgenerators",
      "name": "copeswingapp",
      "url": "https://searchcode.com/codesearch/view/119173277/",
      "md5hash": "37ecf8ca9d33486e12e7ede34043f339",
      "lines": {
        "289": "    //used in Jaccard Similarity (akritiko)",
        "290": "    public Set<Long> getClusterIDs(Long classid,Long projectid) {",
        "260": "        ",
        "261": "        this.clusters.put(classid, dependencies);",
        "265": "",
        "266": "    private Set<Long> getClusterSize(Set<Long> visited,Long classid) {",
        "267": "        if (visited.contains(classid))",
        "268": "            return visited;",
        "269": "",
        "270": "        if (clusters.containsKey(classid)){",
        "271": "            visited.addAll(clusters.get(classid));",
        "272": "            return visited;",
        "274": "",
        "275": "        visited.add(classid);",
        "276": "        try {",
        "277": "            String squery1 = \"Select dependency from classinternaldependencies where dependee=\" + classid;"
      },
      "id": 119173277,
      "filename": "DependenciesGenerator.java"
    },
    {
      "repo": "https://github.com/Santa827/Chemxseer_subSearch.git",
      "language": "Java",
      "linescount": 186,
      "location": "/src/edu/psu/chemxseer/structure/subsearch/Impl/indexfeature",
      "name": "Chemxseer_subSearch",
      "url": "https://searchcode.com/codesearch/view/75001026/",
      "md5hash": "47be3242ed17d6d5be99f6061082dbb1",
      "lines": {
        "66": "\t",
        "67": "\tpublic int[] getFullPosting(OneFeatureMultiClass feature, int classID){",
        "68": "\t\tint[] unequal = this.getUnEqualPosting(feature, classID);",
        "69": "\t\tint[] equal = this.getEqualPosting(feature, classID);",
        "70": "\t\tif(equal.length == 0)",
        "87": "\tpublic int[] getUnEqualPosting(int fID, int classID) {",
        "86": "\t}",
        "52": "\t",
        "53": "\tpublic int[] getUnEqualPosting(OneFeatureMultiClass feature, int classID){",
        "54": "\t\tlong[] postingShift = feature.getAllPostingShift();",
        "55": "\t\tint index= classID * 2;",
        "88": "\t\treturn this.getUnEqualPosting(features.getFeature(fID), classID);",
        "59": "\t",
        "60": "\tpublic int[] getEqualPosting(OneFeatureMultiClass feature, int classID){",
        "61": "\t\tlong[] postingShift = feature.getAllPostingShift();",
        "62": "\t\tint index= classID * 2+1;"
      },
      "id": 75001026,
      "filename": "PostingFeaturesMultiClass.java"
    },
    {
      "repo": "https://github.com/mtwstudios/comtor.git",
      "language": "Java",
      "linescount": 804,
      "location": "/code/src/comtor/analyzers",
      "name": "comtor",
      "url": "https://searchcode.com/codesearch/view/108818819/",
      "md5hash": "10a517294a80f4b8431e0a0d6065ef18",
      "lines": {
        "256": "\t\t\t\t\tpoints.put(\"Since\", new Integer(points.get(\"Since\") + 1));",
        "257": "\t\t\t\t\tprop.setProperty(classID + \".003\", \"Found @since tag.\");",
        "259": "\t\t\t\telse",
        "260": "\t\t\t\t\tprop.setProperty(classID + \".003\",",
        "293": "\t\t\t\t\t\tprop.setProperty(classID + \".\" + fieldId + \".002\",",
        "289": "\t\t\t\t\t\tprop.setProperty(classID + \".\" + fieldId + \".002\",",
        "288": "\t\t\t\t\t\tpoints.put(\"See\", new Integer(points.get(\"See\") + 1));",
        "274": "\t\t\t\t// Store field name",
        "275": "\t\t\t\tprop.setProperty(classID + \".\" + fieldId,",
        "308": "\t\t\t\t\t\t\tnew Integer(points.get(\"Since\") + 1));",
        "292": "\t\t\t\t\telse",
        "185": "\t\t\t// Leave numbers 0 - 24 open for general class properties",
        "186": "\t\t\tString classID = numberFormat(i + 25);",
        "188": "\t\t\t// Store the name of the class being processed",
        "189": "\t\t\tprop.setProperty(\"\" + classID, \"Class: \" + classes[i].name());",
        "309": "\t\t\t\t\t\tprop.setProperty(classID + \".\" + fieldId + \".003\","
      },
      "id": 108818819,
      "filename": "CheckForTags.java"
    },
    {
      "repo": "https://github.com/avanetten/gephi.git",
      "language": "Java",
      "linescount": 308,
      "location": "/modules/VisualizationImpl/src/main/java/org/gephi/visualization/opengl/octree",
      "name": "gephi",
      "url": "https://searchcode.com/codesearch/view/71275498/",
      "md5hash": "e2eb693b304c1c666e0ffe26dd787e4d",
      "lines": {
        "194": "",
        "195": "    public Iterator<ModelImpl> iterator(int classID) {",
        "196": "        return this.modelClasses.get(classID).iterator();",
        "197": "    }",
        "198": "",
        "167": "",
        "168": "    public void clear(int classID) {",
        "169": "        ParamAVLTree<ModelImpl> tree = getTree(classID);",
        "170": "        int count = tree.getCount();",
        "199": "    public ParamAVLTree<ModelImpl> getTree(int classID) {",
        "200": "        return modelClasses.get(classID);",
        "147": "            for (int index : obj.octreePosition(posX, posY, posZ, size)) {",
        "148": "                children[index].addObject(classID, obj);",
        "152": "",
        "153": "    public void removeObject(int classID, ModelImpl obj) {",
        "154": "        //Get the list",
        "155": "        ParamAVLTree<ModelImpl> objectClass = this.modelClasses.get(classID);"
      },
      "id": 71275498,
      "filename": "Octant.java"
    },
    {
      "repo": "https://github.com/mtwstudios/comtor.git",
      "language": "Java",
      "linescount": 419,
      "location": "/code/src/comtor/analyzers",
      "name": "comtor",
      "url": "https://searchcode.com/codesearch/view/108818837/",
      "md5hash": "5af9647a153cd11c659ecc0075e4607c",
      "lines": {
        "161": "\t  \t\t\t{",
        "162": "\t    \t\t\t\tprop.setProperty(classID + \".\" + methodID + \".a\", \"There should not be more than one @pre_text tag used for \" + methods[j].name() + \". Please remove duplicate @pre tags.\");",
        "135": "\t      \t\t\t\t\t\t{",
        "136": "\t        \t\t\t\t\t\tprop.setProperty(classID + \".\" + methodID + \".a\", \"There is a @pre_text tag used for \" + methods[j].name() + \". This comment is CORRECT.\");          ",
        "169": "\t\t\t\t\t\tprop.setProperty(classID + \".\" + methodID + \".c\", \"There is a @pre_exp tag used for \" + methods[j].name() + \". However there is no expression following the tag. Please write a precondition expression for this method.\");",
        "140": "\t\t\t\t\t      \t\t{",
        "141": "\t        \t\t\t\t\t\tprop.setProperty(classID + \".\" + methodID + \".a\", \"There is a @pre_text tag used for \" + methods[j].name() + \". More description of the precondition is needed for full credit.\");",
        "168": "\t\t\t\t\t{",
        "148": "\t      \t\t\t\t\t\t{",
        "149": "\t        \t\t\t\t\t\tprop.setProperty(classID + \".\" + methodID + \".a\", \"There is a @pre_text tag used for \" + methods[j].name() + \". A better description of the precondition is needed. Talk about the parameters and the conditions before the method executes.\");",
        "182": "\t\t\t\t\t\t\tprop.setProperty(classID + \".\" + methodID + \".c\", \"There is a @pre_exp tag used for \" + methods[j].name() + \". This comment is CORRECT.\");",
        "153": "\t      \t\t\t\t\t\t{",
        "154": "\t\t\t\t\t\t\t\tprop.setProperty(classID + \".\" + methodID + \".a\", \"There is a @pre_text tag used for \" + methods[j].name() + \". A better description of the precondition is needed. Try talking about the parameters and the conditions before the method executes.\\n Also elaborate on the precondition more. \");",
        "187": "\t\t\t\t\t\t\tprop.setProperty(classID + \".\" + methodID + \".c\", \"There is a @pre_exp tag used for \" + methods[j].name() + \". However no valid expression was provided. Please write a valid precondition expression.\");",
        "186": "\t\t\t\t\t\t{",
        "181": "\t\t\t\t\t\t{"
      },
      "id": 108818837,
      "filename": "PreAndPostCheck.java"
    },
    {
      "repo": "git://github.com/gradle/gradle.git",
      "language": "Java",
      "linescount": 391,
      "location": "/subprojects/testing-jvm/src/main/java/org/gradle/api/internal/tasks/testing/junit/result",
      "name": "gradle",
      "url": "https://searchcode.com/codesearch/view/116039915/",
      "md5hash": "95dfaa6d5d8af49e68dea671176dce05",
      "lines": {
        "256": "",
        "257": "                        rootBuilder.add(classId, classBuilder.build());",
        "291": "",
        "292": "            Index classIndex = index.children.get(classId);",
        "150": "",
        "147": "                for (Map.Entry<Long, Map<Long, TestCaseRegion>> classEntry : index.entrySet()) {",
        "148": "                    Long classId = classEntry.getKey();",
        "245": "                    for (int classCounter = 0; classCounter < numClasses; ++classCounter) {",
        "246": "                        long classId = input.readLong(true);",
        "151": "                    indexOutput.writeLong(classId, true);",
        "90": "",
        "91": "        public void onOutput(long classId, TestOutputEvent outputEvent) {",
        "92": "            onOutput(classId, 0, outputEvent);",
        "286": "",
        "287": "        public boolean hasOutput(long classId, TestOutputEvent.Destination destination) {"
      },
      "id": 116039915,
      "filename": "TestOutputStore.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 1488,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 508,
      "source": "Github",
      "id": 2
    },
    {
      "count": 229,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 12,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 11,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 2,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 1,
      "source": "Unknown",
      "id": 0
    }
  ]
}