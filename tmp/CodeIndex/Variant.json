{
  "matchterm": "Variant",
  "previouspage": null,
  "searchterm": "Variant",
  "query": "Variant",
  "language_filters": [
    {
      "count": 17126,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 17121,
  "results": [
    {
      "repo": "https://github.com/gbervik/Resteasy.git",
      "language": "Java",
      "linescount": 378,
      "location": "/jaxrs/jaxrs-api/src/main/java/javax/ws/rs/core",
      "name": "Resteasy",
      "url": "https://searchcode.com/codesearch/view/70905721/",
      "md5hash": "2fdc4316b1c7cfbe0d2a7417c800e9c3",
      "lines": {
        "64": "     * Create a new instance of Variant.",
        "65": "     *",
        "66": "     * @param mediaType the media type of the variant - may be {@code null}.",
        "67": "     * @param language  the language of the variant (two-letter ISO-639 code);",
        "68": "     *                  may be {@code null}.",
        "69": "     * @param encoding  the content encoding of the variant - may be {@code null}.",
        "73": "     */",
        "74": "    public Variant(MediaType mediaType, String language, String encoding) {",
        "48": "/**",
        "49": " * Abstraction for a resource representation variant.",
        "83": "    /**",
        "84": "     * Create a new instance of Variant.",
        "85": "     *",
        "56": " */",
        "57": "public class Variant {",
        "63": "    /**"
      },
      "id": 70905721,
      "filename": "Variant.java"
    },
    {
      "repo": "https://github.com/mattiasholmqvist/Resteasy.git",
      "language": "Java",
      "linescount": 375,
      "location": "/jaxrs/jaxrs-api/src/main/java/javax/ws/rs/core",
      "name": "Resteasy",
      "url": "https://searchcode.com/codesearch/view/75302652/",
      "md5hash": "13c6f5317fcd1866f6ce4a1885132cc8",
      "lines": {
        "64": "     * @param language  the language of the variant (two-letter ISO-639 code);",
        "65": "     *                  may be {@code null}.",
        "66": "     * @param encoding  the content encoding of the variant - may be {@code null}.",
        "70": "     */",
        "71": "    public Variant(MediaType mediaType, String language, String encoding) {",
        "80": "    /**",
        "47": "/**",
        "48": " * Abstraction for a resource representation variant.",
        "81": "     * Create a new instance of Variant.",
        "82": "     *",
        "53": " */",
        "54": "public class Variant {",
        "60": "    /**",
        "61": "     * Create a new instance of Variant.",
        "62": "     *",
        "63": "     * @param mediaType the media type of the variant - may be {@code null}."
      },
      "id": 75302652,
      "filename": "Variant.java"
    },
    {
      "repo": "https://github.com/skovatch/org.eclipse.swt.git",
      "language": "Java",
      "linescount": 1058,
      "location": "/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32",
      "name": "org.eclipse.swt",
      "url": "https://searchcode.com/codesearch/view/109829233/",
      "md5hash": "b94c576a44cb78a93e1d30ae577f4f7c",
      "lines": {
        "49": " * API for <code>Variant</code>. It is marked public only so that it",
        "55": " * @param pVarDest destination pointer to a variant",
        "44": "/**\t ",
        "45": " * Invokes platform specific functionality to copy a variant",
        "48": " * <b>IMPORTANT:</b> This method is <em>not</em> part of the public",
        "17": " *",
        "18": " * A Variant is a generic OLE mechanism for passing data of different types via a common interface.",
        "56": " * @param varSrc source <code>Variant</code>",
        "54": " *",
        "23": " */",
        "24": "public final class Variant {",
        "25": "\t/**",
        "26": "\t* The size in bytes of a native VARIANT struct.",
        "27": "\t*/",
        "28": "\tpublic static final int sizeof = VARIANT.sizeof;"
      },
      "id": 109829233,
      "filename": "Variant.java"
    },
    {
      "repo": "https://github.com/enebo/com4j.git",
      "language": "Java",
      "linescount": 863,
      "location": "/runtime/src/com4j",
      "name": "com4j",
      "url": "https://searchcode.com/codesearch/view/109889632/",
      "md5hash": "c0149170cfff293969d685d008d1678c",
      "lines": {
        "33": "@SuppressWarnings(\"serial\")",
        "34": "public final class Variant extends Number {",
        "35": "    /**",
        "36": "     * The memory image of the VARIANT.",
        "40": "    /**",
        "41": "     * The ComThread that generated this Variant.",
        "10": "/**",
        "11": " * Wraps COM VARIANT data structure.",
        "13": " *<p>",
        "14": " * This class allows you to deal with the raw VARIANT type in case you need it,",
        "15": " * but in general you should bind <tt>VARIANT*</tt> to {@link Object} or",
        "16": " * {@link Holder}&lt;Object&gt; for more natural Java binding.",
        "21": " * <li>",
        "22": " * Calling methods defined on {@link Number} changes the variant",
        "46": "    /**",
        "47": "     * Bit mask of a Variant array."
      },
      "id": 109889632,
      "filename": "Variant.java"
    },
    {
      "repo": "https://github.com/enebo/racob.git",
      "language": "Java",
      "linescount": 636,
      "location": "/src/org/racob/com",
      "name": "racob",
      "url": "https://searchcode.com/codesearch/view/109996773/",
      "md5hash": "e3b2716ce8afe960fdbfd3e1a17f685e",
      "lines": {
        "32": " * <p>",
        "33": " * PROPVARIANT introduces new types so eventually Variant will need to be",
        "34": " * upgraded to support PropVariant types.",
        "35": " * http://blogs.msdn.com/benkaras/archive/2006/09/13/749962.aspx",
        "40": " */",
        "41": "public class Variant {    ",
        "42": "    /** Use this constant for optional parameters */",
        "43": "    public final static Variant DEFAULT;",
        "44": "    /** Same than {@link #DEFAULT} */",
        "45": "    public final static Variant VT_MISSING;",
        "46": "    /** Use for true/false variant parameters */",
        "47": "    public final static Variant VT_TRUE = new Variant(true, false);",
        "48": "    /** Use for true/false variant parameters */",
        "30": " * <p>",
        "31": " * Just loading this class creates 3 variants that get added to the ROT"
      },
      "id": 109996773,
      "filename": "Variant.java"
    },
    {
      "repo": "git://github.com/twall/jna.git",
      "language": "Java",
      "linescount": 789,
      "location": "/contrib/platform/src/com/sun/jna/platform/win32",
      "name": "jna",
      "url": "https://searchcode.com/codesearch/view/64321877/",
      "md5hash": "3313914be5d945f8184e1a9a8637f3fa",
      "lines": {
        "48": "",
        "131": "",
        "132": "        public static class ByValue extends VARIANT implements",
        "133": "                Structure.ByValue {",
        "134": "            public ByValue(VARIANT variant) {",
        "49": "public interface Variant {",
        "104": "    public static VARIANT_BOOL VARIANT_TRUE = new VARIANT_BOOL(0xFFFF);",
        "105": "    public static VARIANT_BOOL VARIANT_FALSE = new VARIANT_BOOL(0x0000);",
        "103": "",
        "13": "import com.sun.jna.platform.win32.OaIdl.SAFEARRAY;",
        "14": "import com.sun.jna.platform.win32.OaIdl.VARIANT_BOOL;",
        "15": "import com.sun.jna.platform.win32.OaIdl.VARIANT_BOOLByReference;",
        "16": "import com.sun.jna.platform.win32.OaIdl._VARIANT_BOOLByReference;",
        "17": "import com.sun.jna.platform.win32.WTypes.BSTR;",
        "62": "    public static int VT_BOOL = 11;",
        "63": "    public static int VT_VARIANT = 12;"
      },
      "id": 64321877,
      "filename": "Variant.java"
    },
    {
      "repo": "https://bitbucket.org/netbeans/main_contrib",
      "language": "Java",
      "linescount": 79,
      "location": "/xtc/src/xtc/typical",
      "name": "main_contrib",
      "url": "https://searchcode.com/codesearch/view/122829144/",
      "md5hash": "28e1f103821fc9e570dd3df98e8e251b",
      "lines": {
        "33": "  /**",
        "34": "   * Create a new variant.",
        "37": "   */",
        "38": "  public Variant(T tuple) {",
        "41": "  ",
        "42": "  /** Create a new variant. */",
        "43": "  protected Variant() {",
        "44": "    // empty",
        "47": "  /**",
        "48": "   * Get this variant's name.",
        "21": "/**",
        "22": " * The superclass of all variants.",
        "27": " */",
        "28": "public abstract class Variant<T extends Tuple> {",
        "29": "",
        "30": "  /** The variant's tuple. */"
      },
      "id": 122829144,
      "filename": "Variant.java"
    },
    {
      "repo": "https://github.com/davelester/microservices.git",
      "language": "Java",
      "linescount": 275,
      "location": "/collatex-nmerge/src/main/java/au/edu/uq/nmerge/mvd",
      "name": "microservices",
      "url": "https://searchcode.com/codesearch/view/67416906/",
      "md5hash": "f4ecb80bfddaa902f3b39dd3a9008616",
      "lines": {
        "32": "/**",
        "33": " * Represent a variant computed from a range in a base version",
        "36": " */",
        "37": "public class Variant<T> implements Comparable<Variant<T>> {",
        "38": "  /**",
        "39": "   * more than one version for a variant is possible",
        "129": "    Variant<?> otherV = (Variant<?>) other;",
        "128": "  public boolean equals(Object other) {",
        "139": "   * Are two variants equal in content but differ only in versions?",
        "140": "   *",
        "141": "   * @param other the other variant to compare with",
        "143": "   */",
        "144": "  public boolean equalsContent(Variant<?> other) {",
        "54": "  /**",
        "55": "   * the length of the variant's real data in bytes",
        "138": "  /**"
      },
      "id": 67416906,
      "filename": "Variant.java"
    },
    {
      "repo": "https://github.com/gembin/variance.git",
      "language": "Java",
      "linescount": 168,
      "location": "/src/main/java/com/youdevise/variance",
      "name": "variance",
      "url": "https://searchcode.com/codesearch/view/70532038/",
      "md5hash": "44f7d8ec977b59729b9ad35345b779f6",
      "lines": {
        "33": "        ",
        "34": "        return new Variant(value);",
        "36": "    ",
        "37": "    public static Variant of(Object firstValue, Object...moreValues) {",
        "13": "",
        "14": "public class Variant extends Number implements Supplier<Object> {",
        "18": "    @SuppressWarnings({ \"rawtypes\" })",
        "19": "    public static Variant of(Object value) {",
        "20": "        Preconditions.checkNotNull(value, \"A variant cannot have a null value.\");",
        "21": "        ",
        "22": "        if (value instanceof Variant) {",
        "23": "            return (Variant) value;",
        "24": "        }",
        "26": "        if (value.getClass().isArray()) {",
        "27": "            return ofVariants(arrayToVariants(value));"
      },
      "id": 70532038,
      "filename": "Variant.java"
    },
    {
      "repo": "https://github.com/mbleda/biodata.git",
      "language": "Java",
      "linescount": 355,
      "location": "/models/src/main/java/org/opencb/biodata/models/variant",
      "name": "biodata",
      "url": "https://searchcode.com/codesearch/view/92444653/",
      "md5hash": "618c8c4da8b11e545b932ee0a020743a",
      "lines": {
        "1": "package org.opencb.biodata.models.variant;",
        "2": "",
        "3": "import java.util.*;",
        "4": "import org.opencb.biodata.models.variant.effect.VariantEffect;",
        "5": "import org.opencb.biodata.models.variant.stats.VariantStats;",
        "6": "",
        "135": "            this.type = VariantType.INDEL;",
        "136": "        } else {",
        "137": "            this.type = VariantType.SV;",
        "10": " */",
        "11": "public class Variant {",
        "23": "     */",
        "24": "    public enum VariantType { SNV, INDEL, SV, CNV };",
        "28": "     */",
        "29": "    private VariantType type;",
        "134": "            */"
      },
      "id": 92444653,
      "filename": "Variant.java"
    },
    {
      "repo": "https://github.com/SilverTeamWork/Silverpeas-Core.git",
      "language": "Java",
      "linescount": 207,
      "location": "/lib-core/src/main/java/org/silverpeas/util/csv",
      "name": "Silverpeas-Core",
      "url": "https://searchcode.com/codesearch/view/93257041/",
      "md5hash": "25bc12c09550d863e7d723f9bf4121d6",
      "lines": {
        "32": "public final class Variant {",
        "199": "    } catch (ParseException e) {",
        "31": "",
        "137": "    } catch (NumberFormatException e) {",
        "138": "      throw new UtilException(\"Variant.setValueInteger\",",
        "173": "    if (error) {",
        "174": "      throw new UtilException(\"Variant.setValueBoolean\",",
        "200": "      throw new UtilException(\"Variant.setValueDate\",",
        "148": "    } catch (NumberFormatException e) {",
        "149": "      throw new UtilException(\"Variant.setValueLong\",",
        "86": "  public Variant(String[] values, String type) {",
        "184": "    } catch (NumberFormatException e) {",
        "185": "      throw new UtilException(\"Variant.setValueFloat\",",
        "59": "",
        "60": "  public Variant(String value, String type) throws UtilException {",
        "85": ""
      },
      "id": 93257041,
      "filename": "Variant.java"
    },
    {
      "repo": "git://github.com/alljoyn/alljoyn_java.git",
      "language": "Java",
      "linescount": 174,
      "location": "/src/org/alljoyn/bus",
      "name": "alljoyn_java",
      "url": "https://searchcode.com/codesearch/view/16891908/",
      "md5hash": "d4d85c121a7cb123fa066f88fd144b84",
      "lines": {
        "37": "    /**",
        "38": "     * Creates a variant that can represent any AllJoyn data type.",
        "39": "     * This constructor is typically used by message receivers (method and",
        "40": "     * signal handlers) when the actual data type represented by the variant is",
        "42": "     */",
        "43": "    Variant() {}",
        "45": "    /**",
        "46": "     * Creates a Variant that represents a specific AllJoyn data type and value.",
        "47": "     * This constructor is typically used by message senders (method calls and",
        "48": "     * signal emitters) when a specific Variant type and value are known at the",
        "49": "     * time the Variant is created.",
        "50": "     *",
        "51": "     * @param value object wrapped inside this Variant",
        "52": "     */",
        "25": " */",
        "26": "public class Variant {"
      },
      "id": 16891908,
      "filename": "Variant.java"
    },
    {
      "repo": "http://raptor-chess-interface.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 123,
      "location": "/raptor/src/raptor/chess",
      "name": "raptor-chess-interface",
      "url": "https://searchcode.com/codesearch/view/1716403/",
      "md5hash": "d05d25245ea127582cd01f62d1453252",
      "lines": {
        "80": "\tpublic static String getIcsMatchType(Game game) {",
        "75": "\t * Returns the ics match type to use for a specified variant given a game.",
        "113": "\t\treturn variant == Variant.classic",
        "81": "\t\tswitch (game.getVariant()) {",
        "112": "\tpublic static boolean isClassic(Variant variant) {",
        "74": "\t/**",
        "107": "\tpublic static boolean isBughouse(Variant variant) {",
        "108": "\t\treturn variant == Variant.bughouse",
        "109": "\t\t\t\t|| variant == Variant.fischerRandomBughouse;",
        "110": "\t}",
        "111": "",
        "16": "/**",
        "17": " * An enum used to classify variants in chess.",
        "18": " */",
        "19": "public enum Variant {",
        "106": ""
      },
      "id": 1716403,
      "filename": "Variant.java"
    },
    {
      "repo": "git://github.com/restlet/restlet-framework-java.git",
      "language": "Java",
      "linescount": 561,
      "location": "/modules/org.restlet/src/org/restlet/representation",
      "name": "restlet-framework-java",
      "url": "https://searchcode.com/codesearch/view/15183045/",
      "md5hash": "c6a5bef6e49711da78ff4abe24e8c1eb",
      "lines": {
        "161": "        if (result && (other != this)) {",
        "162": "            Variant otherVariant = (Variant) other;",
        "166": "                result = ((getCharacterSet() == null)",
        "167": "                        && (otherVariant.getCharacterSet() == null) || (getCharacterSet() != null)",
        "168": "                        && getCharacterSet().equals(",
        "169": "                                otherVariant.getCharacterSet()));",
        "174": "                result = ((getMediaType() == null)",
        "175": "                        && (otherVariant.getMediaType() == null) || (getMediaType() != null)",
        "176": "                        && getMediaType().equals(otherVariant.getMediaType()));",
        "150": "    /**",
        "151": "     * Indicates if the current variant is equal to the given variant.",
        "153": "     * @param other",
        "154": "     *            The other variant.",
        "155": "     * @return True if the current variant includes the other.",
        "156": "     */",
        "158": "    public boolean equals(Object other) {",
        "159": "        boolean result = (other instanceof Variant);"
      },
      "id": 15183045,
      "filename": "Variant.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 537,
      "location": "/components/forks/poi/src/loci/poi/hpsf",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642694/",
      "md5hash": "ce67381a4c6cdc5b144657195364dbc8",
      "lines": {
        "386": "    /**",
        "387": "     * <p>Denotes a variant type with a length of 0 bytes.</p>",
        "135": "    /**",
        "136": "     * <p>[V][T][P][S] VARIANT *. <span style=\"background-color:",
        "139": "     */",
        "140": "    public static final int VT_VARIANT = 12;",
        "47": "/**",
        "48": " * <p>The <em>Variant</em> types as defined by Microsoft's COM. I",
        "49": " * found this information in <a",
        "50": " * href=\"http://www.marin.clara.net/COM/variant_type_definitions.htm\">",
        "51": " * http://www.marin.clara.net/COM/variant_type_definitions.htm</a>.</p>",
        "52": " *",
        "53": " * <p>In the variant types descriptions the following shortcuts are",
        "54": " * used: <strong> [V]</strong> - may appear in a VARIANT,",
        "55": " * <strong>[T]</strong> - may appear in a TYPEDESC,"
      },
      "id": 15642694,
      "filename": "Variant.java"
    },
    {
      "repo": "http://nativelibs4java.googlecode.com/svn/",
      "language": "Java",
      "linescount": 1132,
      "location": "/trunk/Moved to GitHub/Runtime/BridJ/src/main/java/org/bridj/cpp/com",
      "name": "nativelibs4java",
      "url": "https://searchcode.com/codesearch/view/11405077/",
      "md5hash": "a207cd33147514eacf36ab60153fa39e",
      "lines": {
        "32": "\tpublic VARIANT.__VARIANT_NAME_1_union __VARIANT_NAME_1() {",
        "36": "\t@Union",
        "37": "\tpublic static class __VARIANT_NAME_1_union extends StructObject {",
        "38": "\t\tpublic __VARIANT_NAME_1_union() {",
        "15": "@Runtime(CRuntime.class) ",
        "16": "public class VARIANT extends StructObject {",
        "17": "\tpublic VARIANT(Object value) {",
        "18": "\t\tsuper();",
        "20": "\t}",
        "21": "\tpublic VARIANT() {",
        "23": "\t}",
        "24": "\tpublic VARIANT(Pointer pointer) {",
        "26": "\t}",
        "27": "\tpublic VARIANT clone() {",
        "29": "\t}",
        "30": "\t/// C type : __VARIANT_NAME_1_union",
        "31": "\t@Field(0)"
      },
      "id": 11405077,
      "filename": "VARIANT.java"
    },
    {
      "repo": "git://github.com/plutext/docx4j.git",
      "language": "Java",
      "linescount": 1000,
      "location": "/src/main/java/org/docx4j/docProps/variantTypes",
      "name": "docx4j",
      "url": "https://searchcode.com/codesearch/view/17641572/",
      "md5hash": "41e4d19cb464eb7ceb4681aca7de6bda",
      "lines": {
        "33": "/**",
        "34": " * <p>Java class for CT_Variant complex type.",
        "43": " *         &lt;element ref=\"{http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes}variant\"/>",
        "38": " * <pre>",
        "39": " * &lt;complexType name=\"CT_Variant\">",
        "42": " *       &lt;choice>",
        "171": "    /**",
        "172": "     * Variant",
        "175": "     *     possible object is",
        "176": "     *     {@link Variant }",
        "178": "     */",
        "179": "    public Variant getVariant() {",
        "20": "",
        "21": "package org.docx4j.docProps.variantTypes;",
        "180": "        return variant;"
      },
      "id": 17641572,
      "filename": "Variant.java"
    },
    {
      "repo": "https://colossus.svn.sourceforge.net/svnroot/colossus",
      "language": "Java",
      "linescount": 414,
      "location": "/tags/20120205-0.13.0/Colossus/core/src/main/java/net/sf/colossus/variant",
      "name": "colossus",
      "url": "https://searchcode.com/codesearch/view/10638638/",
      "md5hash": "c626ba3b14f46130f801bcdeedc08434",
      "lines": {
        "32": " */",
        "1": "package net.sf.colossus.variant;",
        "2": "",
        "35": "    private static final Logger LOGGER = Logger.getLogger(Variant.class",
        "164": "                    at java.lang.Thread.dumpStack(Thread.java:1158)",
        "165": "                    at net.sf.colossus.variant.Variant.getCreatureByName(Variant.java:163)",
        "130": "    {",
        "33": "public class Variant",
        "43": "    private final Document readme;",
        "44": "    private final String variantName;",
        "34": "{",
        "131": "        return variantName;",
        "20": "/**",
        "21": " * Hub for all variant-specific information.",
        "54": "",
        "55": "    public Variant(IVariantInitializer variantInitializer,"
      },
      "id": 10638638,
      "filename": "Variant.java"
    },
    {
      "repo": "https://android.googlesource.com/platform/tools/build",
      "language": "Java",
      "linescount": 90,
      "location": "/builder-model/src/main/java/com/android/builder/model",
      "name": "build",
      "url": "https://searchcode.com/codesearch/view/68784733/",
      "md5hash": "47eccc0978c516940bb224beaf2f5677",
      "lines": {
        "32": "     * @return the name of the variant.",
        "68": "    /**",
        "37": "    /**",
        "38": "     * Returns a display name for the variant. It is made up of the build type and flavors",
        "61": "     * Returns the build type. All variants have a build type, so this is never null.",
        "46": "    /**",
        "47": "     * Returns the main artifact for this variant.",
        "69": "     * Returns the flavors for this variants. This can be empty if no flavors are configured.",
        "24": "/**",
        "25": " * A build Variant.",
        "26": " */",
        "27": "public interface Variant {",
        "60": "    /**",
        "29": "    /**",
        "30": "     * Returns the name of the variant. It is made up of the build type and flavors (if applicable)",
        "31": "     *"
      },
      "id": 68784733,
      "filename": "Variant.java"
    },
    {
      "repo": "http://ainotebook.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 97,
      "location": "/ainotebook/planetai/src/flj",
      "name": "ainotebook",
      "url": "https://searchcode.com/codesearch/view/12786520/",
      "md5hash": "0dc7c86463cd2f93d46a260f33c07546",
      "lines": {
        "67": "      });",
        "68": "      variantMemo.put(p, t);",
        "6": "/**",
        "7": " * A memoised generator variant. Stores generators that have already been computed for the given arguments.",
        "43": "",
        "44": "  private Variant() {",
        "82": "  /**",
        "15": " */",
        "16": "public final class Variant {",
        "17": "  private static final HashMap<LongGen, Gen<?>> variantMemo = new HashMap<LongGen, Gen<?>>();",
        "18": "",
        "83": "   * A curried version of {@link #variant(long, Gen)}.",
        "54": "   */",
        "55": "  public static <A> Gen<A> variant(final long n, final Gen<A> g) {",
        "56": "    final LongGen p = new LongGen(n, g);",
        "57": "    final Gen<?> gx = variantMemo.get(p);"
      },
      "id": 12786520,
      "filename": "Variant.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 10203,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 4906,
      "source": "Github",
      "id": 2
    },
    {
      "count": 944,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 909,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 112,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 26,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 12,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 12,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 2,
      "source": "Gitorious",
      "id": 10
    }
  ]
}