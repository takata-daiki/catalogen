{
  "matchterm": "Irr",
  "previouspage": null,
  "searchterm": "Irr",
  "query": "Irr",
  "language_filters": [
    {
      "count": 152,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 152,
  "results": [
    {
      "repo": "https://github.com/pipifuyj/wekax.git",
      "language": "Java",
      "linescount": 910,
      "location": "/wekaUT/weka/datagenerators",
      "name": "wekax",
      "url": "https://searchcode.com/codesearch/view/112654087/",
      "md5hash": "405801409dcd43b91eaba83f6c61da49",
      "lines": {
        "160": "  ",
        "161": "  /**@serial number of irrelevant attributes.*/",
        "162": "  private int m_NumIrrelevant = 0;",
        "163": "",
        "260": "      setNumIrrelevant((int)Double.valueOf(numIrrelevantString).doubleValue());",
        "261": "    } else {",
        "262": "      setNumIrrelevant(0);",
        "257": "",
        "264": "",
        "265": "    if ((getNumAttributes() - getNumIrrelevant()) < getMinRuleSize())",
        "295": "    options[current++] = \"-N\"; options[current++] = \"\" + getNumNumeric();",
        "258": "    String numIrrelevantString = Utils.getOption('I', options);",
        "296": "    options[current++] = \"-I\"; options[current++] = \"\" + getNumIrrelevant();",
        "259": "    if (numIrrelevantString.length() != 0) {",
        "89": " * %<br>",
        "90": " * % Number of attributes chosen as irrelevant = 0<br>"
      },
      "id": 112654087,
      "filename": "RDG1.java"
    },
    {
      "repo": "https://github.com/srlarkin/PuertoRico.git",
      "language": "Java",
      "linescount": 678,
      "location": "/src/ClassModules",
      "name": "PuertoRico",
      "url": "https://searchcode.com/codesearch/view/98546737/",
      "md5hash": "d3f5cbd61df81f58b07e7c5ea45801e7",
      "lines": {
        "416": "",
        "480": "      HowMuchCanShip = RawShipArray[iR];",
        "481": "      BestGood = iRR;",
        "428": "\t    ShipsInPlay[CandidateShip.ordinal()].NumHoldsFull;",
        "460": "     NextBestShip = BestShip[iR];",
        "429": "    if ( ShipsInPlay[CandidateShip.ordinal()].Good == iRR ) {",
        "467": "   NextBestGood = iRR;",
        "461": "     NextBestGood = iRR;",
        "466": "   NextBestShip = BestShip[iR];",
        "435": "     ",
        "436": "     BestGood = iRR;",
        "478": "     int iR = iRR.ordinal();",
        "477": "    for (Modules.ResourceIdx iRR : EnumSet.range( Indigo , Coffee)){",
        "476": "    BestGood = NullRIdx;",
        "413": " for ( int iRAI = 0; iRAI < PRCNumGoods; iRAI++){",
        "414": "  Modules.ResourceIdx iRR = AIGameData.AIGDPriorityGoodShip[iRAI];",
        "415": "  int iR = iRR.ordinal();"
      },
      "id": 98546737,
      "filename": "CargoShip.java"
    },
    {
      "repo": "https://github.com/Berico-Technologies/mondrian.git",
      "language": "Java",
      "linescount": 2500,
      "location": "/src/main/mondrian/olap/fun/vba",
      "name": "mondrian",
      "url": "https://searchcode.com/codesearch/view/69456310/",
      "md5hash": "67a51ed00e7b0438ab0a0fa75f26792c",
      "lines": {
        "832": "    @Signature(\"IRR(values()[, guess])\")",
        "833": "    @Description(",
        "835": "        + \"of periodic cash flows (payments and receipts).\")",
        "836": "    public static double IRR(double[] valueArray) {",
        "837": "        return IRR(valueArray, 0.10);",
        "838": "    }",
        "840": "",
        "841": "    @FunctionName(\"IRR\")",
        "842": "    @Signature(\"IRR(values()[, guess])\")",
        "843": "    @Description(",
        "876": "",
        "845": "        + \"of periodic cash flows (payments and receipts).\")",
        "846": "    public static double IRR(double[] valueArray, double guess) {",
        "877": "    @FunctionName(\"MIRR\")",
        "878": "    @Signature(\"MIRR(values(), finance_rate, reinvest_rate)\")",
        "831": "    @FunctionName(\"IRR\")"
      },
      "id": 69456310,
      "filename": "Vba.java"
    },
    {
      "repo": "https://bitbucket.org/sulab/thecure",
      "language": "Java",
      "linescount": 1227,
      "location": "/src/weka/datagenerators/classifiers/classification",
      "name": "thecure",
      "url": "https://searchcode.com/codesearch/view/60405743/",
      "md5hash": "fb2d627768c3248e0d6561cfa0881c39",
      "lines": {
        "320": "          \"I\", 1, \"-I <num>\"));",
        "416": "      setNumIrrelevant(Integer.parseInt(tmpStr));",
        "418": "      setNumIrrelevant(defaultNumIrrelevant());",
        "419": "",
        "420": "    if ((getNumAttributes() - getNumIrrelevant()) < getMinRuleSize())",
        "263": "    setMinRuleSize(defaultMinRuleSize());",
        "264": "    setNumIrrelevant(defaultNumIrrelevant());",
        "457": "    result.add(\"\" + getNumIrrelevant());",
        "417": "    else",
        "371": "   * <pre> -I &lt;num&gt;",
        "372": "   *  number of irrelevant attributes (default 0)</pre>",
        "456": "    result.add(\"-I\"); ",
        "319": "          + defaultNumIrrelevant() + \")\",",
        "317": "    result.addElement(new Option(",
        "318": "          \"\\tnumber of irrelevant attributes (default \" ",
        "415": "    if (tmpStr.length() != 0)"
      },
      "id": 60405743,
      "filename": "RDG1.java"
    },
    {
      "repo": "git://github.com/timmolter/XChange.git",
      "language": "Java",
      "linescount": 1972,
      "location": "/xchange-openexchangerates/src/main/java/com/xeiam/xchange/oer/dto/marketdata",
      "name": "XChange",
      "url": "https://searchcode.com/codesearch/view/101747450/",
      "md5hash": "b49e4f28de2e48606dcb8a9bfb18705a",
      "lines": {
        "1955": "        + \", hNL=\" + hNL + \", hRK=\" + hRK + \", hTG=\" + hTG + \", hUF=\" + hUF + \", iDR=\" + iDR + \", iLS=\" + iLS + \", iNR=\" + iNR + \", iQD=\" + iQD",
        "1956": "        + \", iRR=\" + iRR + \", iSK=\" + iSK + \", jEP=\" + jEP + \", jMD=\" + jMD + \", jOD=\" + jOD + \", jPY=\" + jPY + \", kES=\" + kES + \", kGS=\" + kGS",
        "75": "  private double iQD;",
        "76": "  private double iRR;",
        "877": "",
        "878": "  public double getIRR() {",
        "879": "",
        "880": "    return this.iRR;",
        "882": "",
        "883": "  @JsonProperty(\"IRR\")",
        "884": "  public void setIRR(double iRR) {",
        "885": "",
        "886": "    this.iRR = iRR;"
      },
      "id": 101747450,
      "filename": "OERRates.java"
    },
    {
      "repo": "https://github.com/srlarkin/PuertoRico.git",
      "language": "Java",
      "linescount": 628,
      "location": "/src/Forms",
      "name": "PuertoRico",
      "url": "https://searchcode.com/codesearch/view/98546754/",
      "md5hash": "38c486f42ce3e4377d5ec50aba7728a8",
      "lines": {
        "547": "  if ( Frames[i].isVisible() ) {",
        "484": " for (ResourceIdx iRR : EnumSet.range( Indigo , Coffee)){",
        "485": "  int iR = iRR.ordinal();",
        "486": "  PRFArray[PRGDCurrentPlayer.ordinal()].Text1[IndigoIdx.ordinal() + iR].setText(\"0\");",
        "548": "   for (ResourceIdx iRR : EnumSet.range( Indigo , Coffee)){",
        "550": "    if ( Integer.valueOf(Good[iR].getText()) > 0 ) {",
        "549": "    int iR = iRR.ordinal();",
        "483": "    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed"
      },
      "id": 98546754,
      "filename": "FGoneGoods.java"
    },
    {
      "repo": "https://bitbucket.org/nrg/cnda_xnat_prod_webapp",
      "language": "Java",
      "linescount": 982,
      "location": "/resources/java/org/nrg/xdat/om/base/auto",
      "name": "cnda_xnat_prod_webapp",
      "url": "https://searchcode.com/codesearch/view/60738202/",
      "md5hash": "e3ed4e21b06b0704b5be3088346df2e7",
      "lines": {
        "672": "\tpublic void setIrr(Integer v){",
        "673": "\t\ttry{",
        "651": "",
        "652": "\tprivate Integer _Irr=null;",
        "654": "\t/**",
        "655": "\t * @return Returns the IRR.",
        "656": "\t */",
        "657": "\tpublic Integer getIrr() {",
        "658": "\t\ttry{",
        "659": "\t\t\tif (_Irr==null){",
        "660": "\t\t\t\t_Irr=getIntegerProperty(\"IRR\");",
        "661": "\t\t\t\treturn _Irr;",
        "662": "\t\t\t}else {",
        "663": "\t\t\t\treturn _Irr;",
        "668": "\t/**",
        "669": "\t * Sets the value for IRR.",
        "671": "\t */"
      },
      "id": 60738202,
      "filename": "AutoUdsB5behavasdata.java"
    },
    {
      "repo": "https://github.com/poidasmith/xlloop.git",
      "language": "Java",
      "linescount": 127,
      "location": "/org.boris.expr/java/test/org/boris/expr",
      "name": "xlloop",
      "url": "https://searchcode.com/codesearch/view/105398266/",
      "md5hash": "cb4732cc95f7dc6e1eec169221790ab0",
      "lines": {
        "64": "    }",
        "70": "",
        "71": "    public void testMIRR() throws Exception {",
        "72": "        MIRR m = new MIRR();",
        "73": "        fail(\"MIRR not implemented\");",
        "74": "    }",
        "15": "import org.boris.expr.function.excel.IPMT;",
        "16": "import org.boris.expr.function.excel.IRR;",
        "17": "import org.boris.expr.function.excel.ISPMT;",
        "18": "import org.boris.expr.function.excel.MIRR;",
        "60": "",
        "61": "    public void testIRR() throws Exception {",
        "62": "        IRR i = new IRR();",
        "63": "        fail(\"IRR not implemented\");"
      },
      "id": 105398266,
      "filename": "ExcelFinancialFunctionsTest.java"
    },
    {
      "repo": "https://github.com/robatum/jobexchangeGit.git",
      "language": "Java",
      "linescount": 2684,
      "location": "/src/net/agef/jobexchange/services/internal",
      "name": "jobexchangeGit",
      "url": "https://searchcode.com/codesearch/view/114214125/",
      "md5hash": "afb0068aa147a38d5a3096cf48bccfd1",
      "lines": {
        "2374": "\t\t\t\t\t\"(\t66,0,364,'IRR'),\" +",
        "2373": "\t\t\t\t\t\"(\t65,0,368,'IQD'),\" +",
        "1926": "\t\t\t// Republic of",
        "1927": "\t\t\t// Iran','Tehran','ir','IRR',364,98,0,'\u0627\u064a\u0631\u0627\u0646','Iran',1),\"+\"+",
        "1372": "\t\t\t\t\t+",
        "1373": "\t\t\t\t\t\"(102, 0, 3, 'IRN', 364, 142, '\u062c\u0645\u0647\u0648\u0631\u06cc \u0627\u0633\u0644\u0627\u0645\u06cc \u0627\u064a\u0631\u0627\u0646', 'Islamic Republic of Iran', 'Tehran', 'ir', 'IRR', 364, 98, 0, '\u0627\u064a\u0631\u0627\u0646', 'Iran', 1),\""
      },
      "id": 114214125,
      "filename": "JobexchangeInitializerImpl.java"
    },
    {
      "repo": "https://github.com/dsths/mondrian.git",
      "language": "Java",
      "linescount": 1397,
      "location": "/testsrc/main/mondrian/olap/fun/vba",
      "name": "mondrian",
      "url": "https://searchcode.com/codesearch/view/100409289/",
      "md5hash": "f6546f8bce8c16a0de1f0521b83a6154",
      "lines": {
        "867": "        vals = new double[] {1000, -200, -200, -200, -200, -200, -200};",
        "868": "        assertTrue(Math.abs(0.05471796 - Vba.IRR(vals, 0.1)) < 0.0000001);",
        "870": "",
        "871": "    public void testMIRR() {",
        "872": "        double vals[] = {-1000, 50, 50, 50, 50, 50, 1050};",
        "873": "        assertTrue(Math.abs(0.05 - Vba.MIRR(vals, 0.05, 0.05)) < 0.0000001);",
        "876": "        assertTrue(",
        "877": "            Math.abs(0.05263266 - Vba.MIRR(vals, 0.05, 0.05)) < 0.0000001);",
        "880": "        assertTrue(",
        "881": "            Math.abs(0.04490701 - Vba.MIRR(vals, 0.06, 0.04)) < 0.0000001);",
        "856": "",
        "857": "    public void testIRR() {",
        "858": "        double vals[] = {-1000, 50, 50, 50, 50, 50, 1050};",
        "859": "        assertTrue(Math.abs(0.05 - Vba.IRR(vals, 0.1)) < 0.0000001);",
        "861": "        vals = new double[] {-1000, 200, 200, 200, 200, 200, 200};",
        "862": "        assertTrue(Math.abs(0.05471796 - Vba.IRR(vals, 0.1)) < 0.0000001);"
      },
      "id": 100409289,
      "filename": "VbaTest.java"
    },
    {
      "repo": "https://bitbucket.org/crome/client-bank",
      "language": "Java",
      "linescount": 119,
      "location": "/SCClient/src/com/sc/clientbank/client/model/directory",
      "name": "client-bank",
      "url": "https://searchcode.com/codesearch/view/57726252/",
      "md5hash": "3ab4c5ce641b645f13b304dd643c299f",
      "lines": {
        "48": "    public static final Currency IQD = new Currency(\"IQD\", \"368\");",
        "49": "    public static final Currency IRR = new Currency(\"IRR\", \"364\");",
        "102": "        CLP, CNY, COP, CUP, CYP, CZK, DKK, DZD, EEK, EGP, ETB, EUR,",
        "103": "        GBP, GEL, HUF, IDR, ILS, INR, IQD, IRR, ISK, JOD, JPY, KES,"
      },
      "id": 57726252,
      "filename": "Currencies.java"
    },
    {
      "repo": "https://github.com/Berico-Technologies/mondrian.git",
      "language": "Java",
      "linescount": 1397,
      "location": "/testsrc/main/mondrian/olap/fun/vba",
      "name": "mondrian",
      "url": "https://searchcode.com/codesearch/view/69449093/",
      "md5hash": "39d6493c70f41f9341c601162a933250",
      "lines": {
        "867": "        vals = new double[] {1000, -200, -200, -200, -200, -200, -200};",
        "868": "        assertTrue(Math.abs(0.05471796 - Vba.IRR(vals, 0.1)) < 0.0000001);",
        "870": "",
        "871": "    public void testMIRR() {",
        "872": "        double vals[] = {-1000, 50, 50, 50, 50, 50, 1050};",
        "873": "        assertTrue(Math.abs(0.05 - Vba.MIRR(vals, 0.05, 0.05)) < 0.0000001);",
        "876": "        assertTrue(",
        "877": "            Math.abs(0.05263266 - Vba.MIRR(vals, 0.05, 0.05)) < 0.0000001);",
        "880": "        assertTrue(",
        "881": "            Math.abs(0.04490701 - Vba.MIRR(vals, 0.06, 0.04)) < 0.0000001);",
        "856": "",
        "857": "    public void testIRR() {",
        "858": "        double vals[] = {-1000, 50, 50, 50, 50, 50, 1050};",
        "859": "        assertTrue(Math.abs(0.05 - Vba.IRR(vals, 0.1)) < 0.0000001);",
        "861": "        vals = new double[] {-1000, 200, 200, 200, 200, 200, 200};",
        "862": "        assertTrue(Math.abs(0.05471796 - Vba.IRR(vals, 0.1)) < 0.0000001);"
      },
      "id": 69449093,
      "filename": "VbaTest.java"
    },
    {
      "repo": "https://bitbucket.org/nrg/cnda_xnat_daily_webapp",
      "language": "Java",
      "linescount": 982,
      "location": "/resources/java/org/nrg/xdat/om/base/auto",
      "name": "cnda_xnat_daily_webapp",
      "url": "https://searchcode.com/codesearch/view/124714205/",
      "md5hash": "3d5197e23828bbde4bad15cfbdce49e0",
      "lines": {
        "672": "\tpublic void setIrr(Integer v){",
        "673": "\t\ttry{",
        "651": "",
        "652": "\tprivate Integer _Irr=null;",
        "654": "\t/**",
        "655": "\t * @return Returns the IRR.",
        "656": "\t */",
        "657": "\tpublic Integer getIrr() {",
        "658": "\t\ttry{",
        "659": "\t\t\tif (_Irr==null){",
        "660": "\t\t\t\t_Irr=getIntegerProperty(\"IRR\");",
        "661": "\t\t\t\treturn _Irr;",
        "662": "\t\t\t}else {",
        "663": "\t\t\t\treturn _Irr;",
        "668": "\t/**",
        "669": "\t * Sets the value for IRR.",
        "671": "\t */"
      },
      "id": 124714205,
      "filename": "AutoUdsB5behavasdata.java"
    },
    {
      "repo": "https://bitbucket.org/lwallace/cnda_xnat_prod_webapp",
      "language": "Java",
      "linescount": 982,
      "location": "/resources/java/org/nrg/xdat/om/base/auto",
      "name": "cnda_xnat_prod_webapp",
      "url": "https://searchcode.com/codesearch/view/127438921/",
      "md5hash": "402177b4dcf064887ae9923403f31535",
      "lines": {
        "672": "\tpublic void setIrr(Integer v){",
        "673": "\t\ttry{",
        "651": "",
        "652": "\tprivate Integer _Irr=null;",
        "654": "\t/**",
        "655": "\t * @return Returns the IRR.",
        "656": "\t */",
        "657": "\tpublic Integer getIrr() {",
        "658": "\t\ttry{",
        "659": "\t\t\tif (_Irr==null){",
        "660": "\t\t\t\t_Irr=getIntegerProperty(\"IRR\");",
        "661": "\t\t\t\treturn _Irr;",
        "662": "\t\t\t}else {",
        "663": "\t\t\t\treturn _Irr;",
        "668": "\t/**",
        "669": "\t * Sets the value for IRR.",
        "671": "\t */"
      },
      "id": 127438921,
      "filename": "AutoUdsB5behavasdata.java"
    },
    {
      "repo": "http://symja.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 273,
      "location": "/jas/src/main/java/edu/jas/application",
      "name": "symja",
      "url": "https://searchcode.com/codesearch/view/11752918/",
      "md5hash": "2174663171ee3fe9006927d50a1f1ef1",
      "lines": {
        "32": " * Simple setup to run a solvable GB example. <br /> Usage: RunSGB",
        "33": " * [seq|par|par+] [irr|left|right|two] &lt;file&gt; #procs",
        "75": "        String[] allmeth = new String[] { \"irr\", \"left\", \"right\", \"two\" };",
        "41": "     * main method to be called from commandline <br /> Usage: RunSGB",
        "170": "        System.out.println(\"\\nSolvable GB [\" + action + \"] sequential ...\");",
        "171": "        if (action.equals(\"irr\")) {",
        "172": "            G = sred.leftIrreducibleSet(L);",
        "173": "        }",
        "221": "        System.out.println(\"\\nSolvable GB [\" + action + \"] parallel \" + threads + \" threads ...\");",
        "50": "        //        + \"[ seq | par | dist | cli [port] ] \"",
        "51": "                + \"[ irr | left | right | two ] \" + \"<file> \" + \"#procs \";",
        "74": "        }",
        "42": "     * [seq|par|par+] [irr|left|right|two] &lt;file&gt; #procs",
        "222": "        if (action.equals(\"irr\")) {",
        "223": "            G = sred.leftIrreducibleSet(L);"
      },
      "id": 11752918,
      "filename": "RunSGB.java"
    },
    {
      "repo": "https://bitbucket.org/sandos/sunflow-patches",
      "language": "Java",
      "linescount": 246,
      "location": "/trunk/src/org/sunflow/core/gi",
      "name": "sunflow-patches",
      "url": "https://searchcode.com/codesearch/view/52695167/",
      "md5hash": "4eb5655637dc39ac20a05862d22bff12",
      "lines": {
        "32": "        samples = options.getInt(\"gi.irr-cache.samples\", 256);",
        "33": "        tolerance = options.getFloat(\"gi.irr-cache.tolerance\", 0.05f);",
        "34": "        invTolerance = 1.0f / tolerance;",
        "35": "        minSpacing = options.getFloat(\"gi.irr-cache.min_spacing\", 0.05f);",
        "36": "        maxSpacing = options.getFloat(\"gi.irr-cache.max_spacing\", 5.00f);",
        "37": "        root = null;",
        "38": "        rwl = new ReentrantReadWriteLock();",
        "39": "        globalPhotonMap = PluginRegistry.globalPhotonMapPlugins.createObject(options.getString(\"gi.irr-cache.gmap\", null));",
        "44": "        // display settings",
        "45": "        UI.printInfo(Module.LIGHT, \"Irradiance cache settings:\");",
        "19": "",
        "20": "public class IrradianceCacheGIEngine implements GIEngine {",
        "68": "",
        "69": "    public Color getIrradiance(ShadingState state, Color diffuseReflectance) {",
        "31": "        // get settings"
      },
      "id": 52695167,
      "filename": "IrradianceCacheGIEngine.java"
    },
    {
      "repo": "https://bitbucket.org/sandos/sunflow-patches",
      "language": "Java",
      "linescount": 261,
      "location": "/tags/v0.07.2/src/org/sunflow/core/gi",
      "name": "sunflow-patches",
      "url": "https://searchcode.com/codesearch/view/52695410/",
      "md5hash": "94a085631c029740cd6b46c66878ca1f",
      "lines": {
        "32": "        samples = options.getInt(\"gi.irr-cache.samples\", 256);",
        "33": "        tolerance = options.getFloat(\"gi.irr-cache.tolerance\", 0.05f);",
        "34": "        invTolerance = 1.0f / tolerance;",
        "35": "        minSpacing = options.getFloat(\"gi.irr-cache.min_spacing\", 0.05f);",
        "36": "        maxSpacing = options.getFloat(\"gi.irr-cache.max_spacing\", 5.00f);",
        "37": "        root = null;",
        "39": "        globalPhotonMap = null;",
        "40": "        String gmap = options.getString(\"gi.irr-cache.gmap\", null);",
        "42": "            return;",
        "43": "        int numEmit = options.getInt(\"gi.irr-cache.gmap.emit\", 100000);",
        "44": "        int gather = options.getInt(\"gi.irr-cache.gmap.gather\", 50);",
        "20": "",
        "21": "public class IrradianceCacheGIEngine implements GIEngine {",
        "30": "",
        "31": "    public IrradianceCacheGIEngine(Options options) {"
      },
      "id": 52695410,
      "filename": "IrradianceCacheGIEngine.java"
    },
    {
      "repo": "http://symja.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 717,
      "location": "/jas/src/main/java/edu/jas/gbufd",
      "name": "symja",
      "url": "https://searchcode.com/codesearch/view/11752930/",
      "md5hash": "88bf53ebb55cb08a1421ece9515bcb54",
      "lines": {
        "449": "    /**",
        "450": "     * Irreducible set. May not be boolean closed.",
        "454": "    @Override",
        "455": "    public List<GenPolynomial<C>> irreducibleSet(List<GenPolynomial<C>> Pp) {",
        "264": "            if (!a.isZERO()) { //! mt ) { ",
        "265": "                //logger.debug(\"irred\");",
        "492": "                    // correct since longer coeffs can reduce shorter coeffs",
        "482": "            logger.debug(String.valueOf(irr));",
        "494": "                } else {",
        "493": "                    irr++;",
        "481": "            // no not make monic because of boolean closure",
        "468": "",
        "469": "        int irr = 0;",
        "474": "        logger.debug(\"irr = \");",
        "475": "        while (irr != l) {",
        "476": "            //it = P.listIterator(); "
      },
      "id": 11752930,
      "filename": "RReductionSeq.java"
    },
    {
      "repo": "http://symja.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 322,
      "location": "/jas/src/main/java/edu/jas/gb",
      "name": "symja",
      "url": "https://searchcode.com/codesearch/view/11752990/",
      "md5hash": "3bf99a3e0e9203e8d90eee37a38cf926",
      "lines": {
        "192": "            a = leftNormalform( P, a );",
        "193": "            logger.debug(String.valueOf(irr));",
        "163": "    /**",
        "164": "     * Left irreducible set.",
        "168": "    public List<GenSolvablePolynomial<C>> ",
        "169": "           leftIrreducibleSet(List<GenSolvablePolynomial<C>> Pp) {  ",
        "203": "               if ( e.equals( f ) ) {",
        "204": "                  irr++;",
        "205": "               } else {",
        "206": "                  irr = 0; a = (GenSolvablePolynomial<C>)a.monic();",
        "180": "",
        "181": "        int irr = 0;",
        "22": " * Implements common left, right S-Polynomial, left normalform and ",
        "23": " * left irreducible set.",
        "185": "        Iterator<GenSolvablePolynomial<C>> it;",
        "186": "        logger.debug(\"irr = \");",
        "187": "        while ( irr != l ) {"
      },
      "id": 11752990,
      "filename": "SolvableReductionAbstract.java"
    },
    {
      "repo": "http://symja.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 380,
      "location": "/jas/src/main/java/edu/jas/gb",
      "name": "symja",
      "url": "https://searchcode.com/codesearch/view/11752991/",
      "md5hash": "acbfdc0155393f14855abde7f6db3334",
      "lines": {
        "323": "    /**",
        "324": "     * Irreducible set.",
        "357": "            a = normalform(P, a);",
        "358": "            logger.debug(String.valueOf(irr));",
        "369": "                } else {",
        "328": "    @Override",
        "329": "    public List<GenPolynomial<C>> irreducibleSet(List<GenPolynomial<C>> Pp) {",
        "343": "        int irr = 0;",
        "367": "                if (e.equals(f) && c.equals(d)) {",
        "368": "                    irr++;",
        "296": "            if ( ! mt ) { ",
        "370": "                    irr = 0;",
        "212": "                if (!a.isZERO()) { //! mt ) { ",
        "213": "                    //logger.debug(\"irred\");",
        "342": "",
        "297": "                //logger.debug(\"irred\");"
      },
      "id": 11752991,
      "filename": "EReductionSeq.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 105,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 30,
      "source": "Github",
      "id": 2
    },
    {
      "count": 14,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 2,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 1,
      "source": "Unknown",
      "id": 0
    }
  ]
}