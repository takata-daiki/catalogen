{
  "matchterm": "Fields",
  "previouspage": null,
  "searchterm": "Fields",
  "query": "Fields",
  "language_filters": [
    {
      "count": 203352,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 203350,
  "results": [
    {
      "repo": "git://github.com/zkoss/zk.git",
      "language": "Java",
      "linescount": 162,
      "location": "/zcommon/src/org/zkoss/lang/reflect",
      "name": "zk",
      "url": "https://searchcode.com/codesearch/view/17658476/",
      "md5hash": "15faa93bde5e196f21132b6dce2b6ae1",
      "lines": {
        "1": "/* Fields.java",
        "2": "",
        "26": "/**",
        "27": " * Utilities to access fields.",
        "30": " */",
        "31": "public class Fields {"
      },
      "id": 17658476,
      "filename": "Fields.java"
    },
    {
      "repo": "https://bitbucket.org/sentimental/classeditor_fork.git",
      "language": "Java",
      "linescount": 105,
      "location": "/src/main/java/classfile",
      "name": "classeditor_fork",
      "url": "https://searchcode.com/codesearch/view/45509781/",
      "md5hash": "de82b186aa82069513ed1fee22595f9d",
      "lines": {
        "1": "/*",
        "2": " * Fields.java",
        "35": "",
        "36": "public class Fields {",
        "37": "    int                     iFieldsCount;",
        "38": "    Vector                  fieldsVect;",
        "39": "    ",
        "44": "        fieldsVect          = new Vector(iFieldsCount);",
        "42": "        ",
        "11": " * 1.03  05th Jul 1999   Tanmay   Method to delete/add a field introduced",
        "12": " * 1.04  01st May 2001   Tanmay   Checking for number of fields before returning from getField",
        "45": "        for (iIndex=0; iIndex < iFieldsCount; iIndex++) {",
        "43": "        iFieldsCount        = dis.readUnsignedShort();",
        "27": "/**",
        "28": " * Class to handle Fields."
      },
      "id": 45509781,
      "filename": "Fields.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 119,
      "location": "/java/java-tests/testData/codeInsight/daemonCodeAnalyzer/advHighlighting",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/7368599/",
      "md5hash": "5bba73dcf8270ad778b8ac816611fd0e",
      "lines": {
        "1": "// fields double initialization",
        "2": "import java.io.*;"
      },
      "id": 7368599,
      "filename": "FieldDoubleInitialization.java"
    },
    {
      "repo": "https://bitbucket.org/nbargnesi/idea.git",
      "language": "Java",
      "linescount": 119,
      "location": "/java/java-tests/testData/codeInsight/daemonCodeAnalyzer/advHighlighting",
      "name": "idea",
      "url": "https://searchcode.com/codesearch/view/39413479/",
      "md5hash": "8ebd52b0698547164d768cdbd2eab5a0",
      "lines": {
        "1": "// fields double initialization",
        "2": "import java.io.*;"
      },
      "id": 39413479,
      "filename": "FieldDoubleInitialization.java"
    },
    {
      "repo": "https://github.com/alexli0707/Book-Catalogue.git",
      "language": "Java",
      "linescount": 1483,
      "location": "/src/com/eleybourn/bookcatalogue",
      "name": "Book-Catalogue",
      "url": "https://searchcode.com/codesearch/view/73469705/",
      "md5hash": "be04008f33a587d6732fc396aa094ecb",
      "lines": {
        "576": "\t\t\t\t// No validation required for invisible fields",
        "130": "\t */",
        "131": "\tFields(android.app.Activity a) {",
        "69": " * It is up to each accessor to decide what to do with any formatters defined for a field.",
        "70": " * The fields themselves have extract() and format() methods that will apply the formatter",
        "520": "\t\t * ",
        "521": "\t\t * @param fields\t\t\tThe Fields object containing the Field being validated",
        "523": "\t\t */",
        "524": "\t\tvoid validate(Fields fields, Bundle values);",
        "552": "\t/**",
        "211": "\tprivate ArrayList<ValidatorException> mValidationExceptions = new ArrayList<ValidatorException>();",
        "212": "\t// A list of cross-validators to apply if all fields pass simple validation.",
        "553": "\t * Validator to apply a default String value to empty fields.",
        "573": "",
        "574": "\t\tpublic void validate(Fields fields, Field field, Bundle values, boolean crossValidating) {",
        "575": "\t\t\tif (field.visible == false) {"
      },
      "id": 73469705,
      "filename": "Fields.java"
    },
    {
      "repo": "https://github.com/sp00/storm.git",
      "language": "Java",
      "linescount": 74,
      "location": "/src/jvm/backtype/storm/tuple",
      "name": "storm",
      "url": "https://searchcode.com/codesearch/view/75024516/",
      "md5hash": "0214ae2aac0525f3beb196c1b20943c4",
      "lines": {
        "10": "",
        "11": "public class Fields implements Iterable<String>, Serializable {",
        "12": "    private List<String> _fields;",
        "13": "    private Map<String, Integer> _index = new HashMap<String, Integer>();",
        "14": "    ",
        "15": "    public Fields(String... fields) {",
        "16": "        this(Arrays.asList(fields));",
        "17": "    }",
        "18": "    ",
        "19": "    public Fields(List<String> fields) {",
        "20": "        _fields = new ArrayList<String>(fields.size());",
        "21": "        for (String field : fields) {",
        "22": "            if (_fields.contains(field))",
        "23": "                throw new IllegalArgumentException(",
        "25": "                );",
        "26": "            _fields.add(field);"
      },
      "id": 75024516,
      "filename": "Fields.java"
    },
    {
      "repo": "https://github.com/cwensel/cascading.git",
      "language": "Java",
      "linescount": 1946,
      "location": "/cascading-core/src/main/java/cascading/tuple",
      "name": "cascading",
      "url": "https://searchcode.com/codesearch/view/104381125/",
      "md5hash": "77c4f47ff0f930a866236f69f8af5813",
      "lines": {
        "43": "/**",
        "44": " * Class Fields represents the field names in a {@link Tuple}. A tuple field may be a literal String value representing a",
        "45": " * name, or it may be a literal Integer value representing a position, where positions start at position 0.",
        "46": " * A Fields instance may also represent a set of field names and positions.",
        "47": " * <p/>",
        "48": " * Fields are used as both declarators and selectors. A declarator declares that a given {@link Tap} or",
        "49": " * {@link cascading.operation.Operation} returns the given field names, for a set of values the size of",
        "50": " * the given Fields instance. A selector is used to select given referenced fields from a Tuple.",
        "51": " * For example; <br/>",
        "52": " * <code>Fields fields = new Fields( \"a\", \"b\", \"c\" );</code><br/>",
        "53": " * This creates a new Fields instance with the field names \"a\", \"b\", and \"c\". This Fields instance can be used as both",
        "54": " * a declarator or a selector, depending on how it's used.",
        "56": " * Or For example; <br/>",
        "57": " * <code>Fields fields = new Fields( 1, 2, -1 );</code><br/>",
        "58": " * This creates a new Fields instance that can only be used as a selector. It would select the second, third, and last"
      },
      "id": 104381125,
      "filename": "Fields.java"
    },
    {
      "repo": "https://github.com/yellowant/cacert-gigi.git",
      "language": "Java",
      "linescount": 337,
      "location": "/lib/jetty/org/eclipse/jetty/util",
      "name": "cacert-gigi",
      "url": "https://searchcode.com/codesearch/view/96282796/",
      "md5hash": "49cfc3d33a0d873f6cbd67a059359fa9",
      "lines": {
        "32": "/**",
        "33": " * <p>A container for name/value pairs, known as fields.</p>",
        "38": " */",
        "39": "public class Fields implements Iterable<Fields.Field>",
        "41": "    private final boolean caseSensitive;",
        "42": "    private final Map<String, Field> fields;",
        "44": "    /**",
        "45": "     * <p>Creates an empty, modifiable, case insensitive {@link Fields} instance.</p>",
        "46": "     * @see #Fields(Fields, boolean)",
        "47": "     */",
        "48": "    public Fields()",
        "53": "    /**",
        "54": "     * <p>Creates an empty, modifiable, case insensitive {@link Fields} instance.</p>",
        "55": "     * @param caseSensitive whether this {@link Fields} instance must be case sensitive",
        "56": "     * @see #Fields(Fields, boolean)"
      },
      "id": 96282796,
      "filename": "Fields.java"
    },
    {
      "repo": "https://github.com/mrbradparks/jOOQ.git",
      "language": "Java",
      "linescount": 277,
      "location": "/jOOQ/src/main/java/org/jooq/impl",
      "name": "jOOQ",
      "url": "https://searchcode.com/codesearch/view/92818582/",
      "md5hash": "f8dfe70e605a4535625851e08d10cc4c",
      "lines": {
        "64": "    Field<?>[]                fields;",
        "65": "",
        "66": "    Fields(Field<?>... fields) {",
        "67": "        this.fields = fields;",
        "68": "    }",
        "69": "",
        "70": "    Fields(Collection<? extends Field<?>> fields) {",
        "71": "        this.fields = fields.toArray(new Field[fields.size()]);",
        "129": "    public final Field<?>[] fields() {",
        "128": "    @Override",
        "133": "    @Override",
        "130": "        return fields;",
        "131": "    }",
        "60": " */",
        "61": "class Fields<R extends Record> extends AbstractQueryPart implements RecordType<R> {",
        "134": "    public final Field<?>[] fields(Field<?>... f) {",
        "63": "    private static final long serialVersionUID = -6911012275707591576L;"
      },
      "id": 92818582,
      "filename": "Fields.java"
    },
    {
      "repo": "https://github.com/cjbooms/felix.git",
      "language": "Java",
      "linescount": 135,
      "location": "/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/util",
      "name": "felix",
      "url": "https://searchcode.com/codesearch/view/96333970/",
      "md5hash": "2dac481bff5d0c663bb26c86427bc5ff",
      "lines": {
        "35": "    private Object object;",
        "36": "    private Map<String, Field> fields;",
        "69": "    public Fields ofType(Class<? extends T> clazz) {",
        "73": "",
        "74": "    public Fields in(Object o) {",
        "79": "",
        "80": "    public Fields in(Class<?> c) {",
        "85": "    private Collection<Field> retrieve() {",
        "86": "        if (fields != null) {",
        "87": "            return fields.values();",
        "68": "",
        "28": "/**",
        "29": "* Fluent API to retrieve fields of a given type.",
        "30": "*/",
        "31": "public class Fields<T> {"
      },
      "id": 96333970,
      "filename": "Fields.java"
    },
    {
      "repo": "git://github.com/cwensel/cascading.git",
      "language": "Java",
      "linescount": 2000,
      "location": "/cascading-core/src/main/java/cascading/tuple",
      "name": "cascading",
      "url": "https://searchcode.com/codesearch/view/116115864/",
      "md5hash": "ea11975ec9bb8f8cf9e3d51270285eab",
      "lines": {
        "43": "/**",
        "44": " * Class Fields represents the field names in a {@link Tuple}. A tuple field may be a literal String value representing a",
        "45": " * name, or it may be a literal Integer value representing a position, where positions start at position 0.",
        "46": " * A Fields instance may also represent a set of field names and positions.",
        "47": " * <p/>",
        "48": " * Fields are used as both declarators and selectors. A declarator declares that a given {@link Tap} or",
        "49": " * {@link cascading.operation.Operation} returns the given field names, for a set of values the size of",
        "50": " * the given Fields instance. A selector is used to select given referenced fields from a Tuple.",
        "51": " * For example; <br/>",
        "52": " * <code>Fields fields = new Fields( \"a\", \"b\", \"c\" );</code><br/>",
        "53": " * This creates a new Fields instance with the field names \"a\", \"b\", and \"c\". This Fields instance can be used as both",
        "54": " * a declarator or a selector, depending on how it's used.",
        "56": " * Or For example; <br/>",
        "57": " * <code>Fields fields = new Fields( 1, 2, -1 );</code><br/>",
        "58": " * This creates a new Fields instance that can only be used as a selector. It would select the second, third, and last"
      },
      "id": 116115864,
      "filename": "Fields.java"
    },
    {
      "repo": "https://github.com/danielrizea/incubator-storm.git",
      "language": "Java",
      "linescount": 101,
      "location": "/storm-core/src/jvm/backtype/storm/tuple",
      "name": "incubator-storm",
      "url": "https://searchcode.com/codesearch/view/92969122/",
      "md5hash": "cc3548e8ad054d6b280232549410a80a",
      "lines": {
        "32": "    public Fields(String... fields) {",
        "33": "        this(Arrays.asList(fields));",
        "34": "    }",
        "35": "    ",
        "36": "    public Fields(List<String> fields) {",
        "37": "        _fields = new ArrayList<String>(fields.size());",
        "38": "        for (String field : fields) {",
        "39": "            if (_fields.contains(field))",
        "40": "                throw new IllegalArgumentException(",
        "42": "                );",
        "43": "            _fields.add(field);",
        "27": "",
        "28": "public class Fields implements Iterable<String>, Serializable {",
        "29": "    private List<String> _fields;",
        "30": "    private Map<String, Integer> _index = new HashMap<String, Integer>();",
        "31": "    "
      },
      "id": 92969122,
      "filename": "Fields.java"
    },
    {
      "repo": "https://github.com/platy/fred-staging.git",
      "language": "Java",
      "linescount": 799,
      "location": "/src/freenet/support",
      "name": "fred-staging",
      "url": "https://searchcode.com/codesearch/view/105064597/",
      "md5hash": "56e87faea95bf49fd4db73061c2e15f2",
      "lines": {
        "675": "\t\t\t\tres *= Double.parseDouble(multiplier);",
        "676": "\t\t\t\tif(Logger.shouldLog(Logger.MINOR, Fields.class))",
        "677": "\t\t\t\t\tLogger.minor(Fields.class, \"Parsed \" + multiplier + \" of \" + s + \" as double: \" + res);",
        "678": "\t\t\t} else {",
        "679": "\t\t\t\tres *= Long.parseLong(multiplier);",
        "680": "\t\t\t\tif(Logger.shouldLog(Logger.MINOR, Fields.class))",
        "588": "\t\t} catch(NumberFormatException e) {",
        "682": "\t\t\t}",
        "12": " * This class contains static methods used for parsing boolean and unsigned",
        "13": " * long fields in Freenet messages. Also some general utility methods for",
        "589": "\t\t\tLogger.error(Fields.class, \"Failed to parse value as long: \" + s + \" : \" + e, e);",
        "17": " */",
        "18": "public abstract class Fields {",
        "597": "\t\t} catch(NumberFormatException e) {",
        "598": "\t\t\tLogger.error(Fields.class, \"Failed to parse value as int: \" + s + \" : \" + e, e);",
        "681": "\t\t\t\t\tLogger.minor(Fields.class, \"Parsed \" + multiplier + \" of \" + s + \" as long: \" + res);"
      },
      "id": 105064597,
      "filename": "Fields.java"
    },
    {
      "repo": "https://github.com/heikok88/maedn_server.git",
      "language": "Java",
      "linescount": 108,
      "location": "/src/maedn_server/logic/luts",
      "name": "maedn_server",
      "url": "https://searchcode.com/codesearch/view/96950219/",
      "md5hash": "1c6346b2a2469702c6e779cd02fe5900",
      "lines": {
        "39": "    public List<Integer> getXY(int index) {",
        "40": "        return fields.get(index);",
        "9": "",
        "10": "public abstract class Fields {",
        "11": "",
        "12": "    private final HashMap<Integer, List<Integer>> fields;",
        "14": "",
        "15": "    public Fields(int cnt) {",
        "16": "        this.fields = new HashMap<>();",
        "17": "        figures = new Figure[cnt];",
        "20": "    protected void addPair(int index, List<Integer> xy) {",
        "21": "        fields.put(index, xy);",
        "29": "        int index = -1;",
        "30": "        for (Map.Entry<Integer, List<Integer>> field : fields.entrySet()) {"
      },
      "id": 96950219,
      "filename": "Fields.java"
    },
    {
      "repo": "https://github.com/volth/cosmos.git",
      "language": "Java",
      "linescount": 56,
      "location": "/sql/src/main/java/cosmos/sql/call",
      "name": "cosmos",
      "url": "https://searchcode.com/codesearch/view/98821788/",
      "md5hash": "44e6f973384e75a421ebe8f49beac4f6",
      "lines": {
        "32": "",
        "33": "  protected List<Field> fields;",
        "34": "",
        "35": "  public Fields(List<String> literal) {",
        "36": "    fields = Lists.newArrayListWithCapacity(literal.size());",
        "37": "",
        "45": "    if (child instanceof Field) {",
        "46": "      fields.add((Field) child);",
        "50": "",
        "51": "  public List<Field> getFields() {",
        "52": "    return Collections.unmodifiableList(fields);",
        "53": "  }",
        "27": "/**",
        "28": " * Defines a set of fields.",
        "30": " */",
        "31": "public class Fields implements CallIfc<Field> {"
      },
      "id": 98821788,
      "filename": "Fields.java"
    },
    {
      "repo": "git://github.com/cwensel/cascading.git",
      "language": "Java",
      "linescount": 1343,
      "location": "/src/core/cascading/tuple",
      "name": "cascading",
      "url": "https://searchcode.com/codesearch/view/3244756/",
      "md5hash": "a01df833fb139c2697f6f08d56871686",
      "lines": {
        "43": "/**",
        "44": " * Class Fields represents the field names in a {@link Tuple}. A tuple field may be a literal String value representing a",
        "45": " * name, or it may be a literal Integer value representing a position, where positions start at position 0.",
        "46": " * A Fields instance may also represent a set of field names and positions.",
        "47": " * <p/>",
        "48": " * Fields are used as both declarators and selectors. A declarator declares that a given {@link Tap} or",
        "49": " * {@link cascading.operation.Operation} returns the given field names, for a set of values the size of",
        "50": " * the given Fields instance. A selector is used to select given referenced fields from a Tuple.",
        "51": " * For example; <br/>",
        "52": " * <code>Fields fields = new Fields( \"a\", \"b\", \"c\" );</code><br/>",
        "53": " * This creates a new Fields instance with the field names \"a\", \"b\", and \"c\". This Fields instance can be used as both",
        "54": " * a declarator or a selector, depending on how it's used.",
        "56": " * Or For example; <br/>",
        "57": " * <code>Fields fields = new Fields( 1, 2, -1 );</code><br/>",
        "58": " * This creates a new Fields instance that can only be used as a selector. It would select the second, third, and last"
      },
      "id": 3244756,
      "filename": "Fields.java"
    },
    {
      "repo": "https://github.com/okkop/fixengine.git",
      "language": "Java",
      "linescount": 81,
      "location": "/src/fixengine/messages",
      "name": "fixengine",
      "url": "https://searchcode.com/codesearch/view/111360037/",
      "md5hash": "714b102bf2caa7c088b3c2af63414162",
      "lines": {
        "33": "    public Field lookup(Tag<?> tag) {",
        "34": "        return fields.get(tag.value());",
        "27": "    private final Map<Integer, Field> fields = new LinkedHashMap<Integer, Field>();",
        "37": "    public Field lookup(int tag) {",
        "38": "        return fields.get(tag);",
        "28": "",
        "74": "        this.fields.put(tag.value(), tag.newField(required));",
        "66": "    public void validate() {",
        "78": "        this.fields.put(group.countTag().value(), group);",
        "77": "    public void add(RepeatingGroup group) {",
        "67": "        for (Field field : fields.values()) {",
        "73": "    public void add(Tag<?> tag, Required required) {",
        "26": "public class Fields implements Iterable<Field> {",
        "59": "        StringBuilder result = new StringBuilder();",
        "60": "        for (Field field : fields.values()) {"
      },
      "id": 111360037,
      "filename": "Fields.java"
    },
    {
      "repo": "https://github.com/mdodsworth/lucene-solr.git",
      "language": "Java",
      "linescount": 50,
      "location": "/lucene/core/src/java/org/apache/lucene/index",
      "name": "lucene-solr",
      "url": "https://searchcode.com/codesearch/view/110745256/",
      "md5hash": "c93ea3425fcff72b17d4066c09deb38e",
      "lines": {
        "32": "",
        "33": "  /** Returns an iterator that will step through all fields",
        "41": "",
        "42": "  /** Returns the number of fields or -1 if the number of",
        "46": "  ",
        "47": "  /** Zero-length {@code Fields} array. */",
        "48": "  public final static Fields[] EMPTY_ARRAY = new Fields[0];",
        "49": "}",
        "22": "",
        "23": "/** Flex API for access to fields and terms",
        "25": "",
        "26": "public abstract class Fields implements Iterable<String> {",
        "29": "   *  constructors, typically implicit.) */",
        "30": "  protected Fields() {"
      },
      "id": 110745256,
      "filename": "Fields.java"
    },
    {
      "repo": "git://github.com/liferay/liferay-portal.git",
      "language": "Java",
      "linescount": 181,
      "location": "/modules/apps/forms-and-workflow/dynamic-data-mapping/dynamic-data-mapping-api/src/main/java/com/liferay/dynamic/data/mapping/storage",
      "name": "liferay-portal",
      "url": "https://searchcode.com/codesearch/view/116046424/",
      "md5hash": "ea2056cb71d2a9ab94c49ba7cca2bc2a",
      "lines": {
        "130": "\tpublic int hashCode() {",
        "131": "\t\tint hash = HashUtil.hash(0, _fieldsMap);",
        "36": " */",
        "37": "public class Fields implements Iterable<Field>, Serializable {",
        "39": "\tpublic boolean contains(String name) {",
        "40": "\t\treturn _fieldsMap.containsKey(name);",
        "132": "",
        "140": "",
        "141": "\tpublic Iterator<Field> iterator(boolean includePrivateFields) {",
        "47": "",
        "48": "\tpublic boolean equals(Object obj, boolean includePrivateFields) {",
        "52": "",
        "53": "\t\tif (!(obj instanceof Fields)) {",
        "56": "",
        "57": "\t\tFields fields = (Fields)obj;",
        "58": "",
        "133": "\t\treturn HashUtil.hash(hash, getFieldsList(true));"
      },
      "id": 116046424,
      "filename": "Fields.java"
    },
    {
      "repo": "git://github.com/ning/ning-api-java.git",
      "language": "Java",
      "linescount": 83,
      "location": "/src/main/java/com/ning/api/client/item",
      "name": "ning-api-java",
      "url": "https://searchcode.com/codesearch/view/15848240/",
      "md5hash": "4491112def59cc349ad446b36a0fb5e7",
      "lines": {
        "33": "        this.enumClass = enumClass;",
        "34": "        included = fields;",
        "7": " *",
        "8": " * @param <F> Enumeration that defines fields that are to be contained",
        "10": " */",
        "11": "public final class Fields<F extends Enum<F> & Typed>",
        "16": "",
        "17": "    public Fields(Class<F> enumClass)",
        "21": "    ",
        "22": "    public Fields(Class<F> enumClass, F first, F... rest) {",
        "25": "",
        "26": "    public Fields(Class<F> enumClass, Collection<F> fields) {",
        "27": "        this(enumClass);",
        "28": "        included.addAll(fields);",
        "30": "    ",
        "31": "    private Fields(Class<F> enumClass, EnumSet<F> fields)"
      },
      "id": 15848240,
      "filename": "Fields.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 124883,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 62237,
      "source": "Github",
      "id": 2
    },
    {
      "count": 13727,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 1151,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 622,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 347,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 233,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 111,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 41,
      "source": "Gitorious",
      "id": 10
    }
  ]
}