{
  "matchterm": "PropertyTemplate",
  "previouspage": null,
  "searchterm": "PropertyTemplate",
  "query": "PropertyTemplate",
  "language_filters": [
    {
      "count": 9,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 9,
  "results": [
    {
      "repo": "http://mobicents.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 49,
      "location": "/frameworks/sip-servlets/ssf/sf-flow/src/main/java/org/mobicents/ssf/flow/engine/builder/template",
      "name": "mobicents",
      "url": "https://searchcode.com/codesearch/view/76902/",
      "md5hash": "a75a3f1a7cd79e4dfd4e3d7c2cdb31cb",
      "lines": {
        "19": "",
        "20": "public class PropertyTemplate extends AbstractAnnotatedTemplate {"
      },
      "id": 76902,
      "filename": "PropertyTemplate.java"
    },
    {
      "repo": "http://jsonwebservice.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 170,
      "location": "/jsonwebservice/src/com/jaxws/json/codec/doc/provider",
      "name": "jsonwebservice",
      "url": "https://searchcode.com/codesearch/view/13554786/",
      "md5hash": "a963fedbf63ceb6084f2006324c0cc7b",
      "lines": {
        "128": "\t            .valueOf(JSONCodec.globalMapKeyPattern)));",
        "129": "\t        propertys.append(String.format(propertyTemplate,",
        "98": "\t            .getResourceAsStream(\"codec.properties\"));",
        "99": "\t        String propertyTemplate = templates",
        "131": "\t            .valueOf(JSONCodec.globalMapValuePattern)));",
        "102": "",
        "103": "\t        propertys.append(String.format(propertyTemplate,",
        "105": "\t            .valueOf(JSONCodec.dateFormat)));",
        "106": "\t        propertys.append(String.format(propertyTemplate,",
        "108": "\t            .valueOf(JSONCodec.responsePayloadEnabled)));",
        "109": "\t        propertys.append(String.format(propertyTemplate,",
        "111": "\t            .valueOf(JSONCodec.excludeNullProperties)));",
        "112": "\t        propertys.append(String.format(propertyTemplate,",
        "114": "\t            .valueOf(JSONCodec.createDefaultOnNonNullable)));",
        "115": "\t        propertys.append(String.format(propertyTemplate,",
        "116": "\t            JSONCodec.gzip_KEY, String.valueOf(JSONCodec.gzip)));",
        "132": "\t        propertys.append(String.format(propertyTemplate,"
      },
      "id": 13554786,
      "filename": "ServiceConfigurationProvider.java"
    },
    {
      "repo": "http://mobicents.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 459,
      "location": "/frameworks/sip-servlets/ssf/sf-flow/src/main/java/org/mobicents/ssf/flow/engine/builder",
      "name": "mobicents",
      "url": "https://searchcode.com/codesearch/view/76899/",
      "md5hash": "cc2363dd993299aac69def31e9bc3cf9",
      "lines": {
        "369": "            List<PropertyTemplate> propertyList = actionTemplate.getProperties();",
        "55": "import org.mobicents.ssf.flow.engine.builder.template.FlowTemplate;",
        "368": "            ",
        "56": "import org.mobicents.ssf.flow.engine.builder.template.PropertyTemplate;",
        "370": "            for(PropertyTemplate propertyTemplate: propertyList) {",
        "371": "                String name = propertyTemplate.getName();",
        "372": "                String value = propertyTemplate.getValue();",
        "373": "                action.addProperty(name, value);",
        "279": "            Evaluate evaluate) {",
        "280": "        List<PropertyTemplate> properties = template.getProperties();",
        "281": "        for(PropertyTemplate propertyTemplate: properties) {",
        "282": "            String name = propertyTemplate.getName();",
        "283": "            String value = propertyTemplate.getValue();",
        "284": "            evaluate.addProperty(name, value);"
      },
      "id": 76899,
      "filename": "DefaultFlowDefinitionHolder.java"
    },
    {
      "repo": "http://mobicents.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 75,
      "location": "/frameworks/sip-servlets/ssf/sf-flow/src/main/java/org/mobicents/ssf/flow/engine/builder/template",
      "name": "mobicents",
      "url": "https://searchcode.com/codesearch/view/76911/",
      "md5hash": "4148b21bdf848123399161d99fa2069a",
      "lines": {
        "32": "    }",
        "33": "    public List<PropertyTemplate> getProperties() {",
        "66": "    \ttemplate.properties = new ArrayList<PropertyTemplate>();",
        "35": "    }",
        "36": "    public void setProperties(List<PropertyTemplate> properties) {",
        "65": "    \t",
        "39": "    ",
        "40": "    public void addProperty(PropertyTemplate template) {",
        "41": "        if(this.properties == null) {",
        "42": "            this.properties = new ArrayList<PropertyTemplate>();",
        "67": "    \tfor(PropertyTemplate p: this.properties) {",
        "53": "    \t\tsb.append(\"[properties=\");",
        "54": "    \t\tfor(PropertyTemplate p: properties) {",
        "24": "    private String type;",
        "25": "    private List<PropertyTemplate> properties;",
        "68": "    \t\ttemplate.properties.add(p);"
      },
      "id": 76911,
      "filename": "EvaluateTemplate.java"
    },
    {
      "repo": "http://mobicents.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 551,
      "location": "/frameworks/sip-servlets/ssf/sf-flow/src/main/java/org/mobicents/ssf/flow/engine/builder/xml",
      "name": "mobicents",
      "url": "https://searchcode.com/codesearch/view/76924/",
      "md5hash": "9061263c4481f8cc4d9f56297a8b0e59",
      "lines": {
        "448": "        for(Element propertyElement:propertyElements) {",
        "449": "            evaluate.addProperty(parsePropertyTemplate(propertyElement));",
        "456": "        PropertyTemplate property = new PropertyTemplate();",
        "454": "",
        "39": "import org.mobicents.ssf.flow.engine.builder.template.FlowTemplate;",
        "40": "import org.mobicents.ssf.flow.engine.builder.template.PropertyTemplate;",
        "457": "        property.setName(element.getAttribute(\"name\"));",
        "455": "    private PropertyTemplate parsePropertyTemplate(Element element) {",
        "401": "        for(Element propertyElement:propertyElements) {",
        "402": "            action.addProperty(parsePropertyTemplate(propertyElement));",
        "441": "        if(sessionName != null) {",
        "442": "            PropertyTemplate prop = new PropertyTemplate();"
      },
      "id": 76924,
      "filename": "XmlFlowTemplateBuilder.java"
    },
    {
      "repo": "http://mobicents.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 74,
      "location": "/frameworks/sip-servlets/ssf/sf-flow/src/main/java/org/mobicents/ssf/flow/engine/builder/template",
      "name": "mobicents",
      "url": "https://searchcode.com/codesearch/view/76906/",
      "md5hash": "5b3bd5a8ad93cae53096c1302d9a454f",
      "lines": {
        "34": "    }",
        "35": "    public List<PropertyTemplate> getProperties() {",
        "37": "    }",
        "38": "    public void setProperties(List<PropertyTemplate> properties) {",
        "41": "    ",
        "42": "    public void addProperty(PropertyTemplate property) {",
        "43": "        if(this.properties == null) {",
        "44": "            this.properties = new ArrayList<PropertyTemplate>();",
        "66": "    \tActionTemplate template = (ActionTemplate)super.clone();",
        "67": "    \tfor(PropertyTemplate p:this.properties) {",
        "55": "    \t\tsb.append(\"[properties=\");",
        "56": "    \t\tfor(PropertyTemplate p: properties) {",
        "26": "    ",
        "27": "    private List<PropertyTemplate> properties;"
      },
      "id": 76906,
      "filename": "ActionTemplate.java"
    },
    {
      "repo": "https://github.com/megamonster/modeshape.git",
      "language": "Java",
      "linescount": 176,
      "location": "/modeshape-jcr/src/test/java/org/modeshape/jcr",
      "name": "modeshape",
      "url": "https://searchcode.com/codesearch/view/66748581/",
      "md5hash": "058a67a268bdd7f4304fe6a4df6989f5",
      "lines": {
        "67": "",
        "68": "            comparePropertyTemplateToPropertyDefinition(propertyTemplate, (JcrPropertyDefinition)matchingDefinition);",
        "62": "                    && pd.isMultiple() == propertyTemplate.isMultiple()) {",
        "61": "                if (pd.getName().equals(ptName) && pd.getRequiredType() == propertyTemplate.getRequiredType()",
        "50": "    private static void comparePropertyDefinitions( PropertyDefinition[] propertyDefs,",
        "51": "                                                    List<PropertyDefinitionTemplate> propertyTemplates ) {",
        "52": "        assertThat(propertyDefs.length, is(propertyTemplates.size()));",
        "53": "        for (PropertyDefinitionTemplate pt : propertyTemplates) {",
        "54": "            JcrPropertyDefinitionTemplate propertyTemplate = (JcrPropertyDefinitionTemplate)pt;",
        "55": "",
        "27": "        PropertyDefinition[] propertyDefs = nodeType.getDeclaredPropertyDefinitions();",
        "28": "        List<PropertyDefinitionTemplate> propertyTemplates = template.getPropertyDefinitionTemplates();",
        "29": "        comparePropertyDefinitions(propertyDefs, propertyTemplates);",
        "30": "",
        "63": "                    matchingDefinition = pd;"
      },
      "id": 66748581,
      "filename": "NodeTypeAssertion.java"
    },
    {
      "repo": "https://github.com/kylape/jboss-as.git",
      "language": "Java",
      "linescount": 193,
      "location": "/testsuite/integration/patching/src/test/java/org/jboss/as/test/patching/util/module",
      "name": "jboss-as",
      "url": "https://searchcode.com/codesearch/view/66109057/",
      "md5hash": "f1a818acfc131aa699b416c6a94a372e",
      "lines": {
        "49": "            stringBuilder.append(\"     <properties>\\n\");",
        "50": "            String propertyTemplate = \"          <property name=\\\"%s\\\" value=\\\"%s\\\"/>\\n\";",
        "51": "            for (String key : properties.stringPropertyNames()) {",
        "52": "                stringBuilder.append(String.format(propertyTemplate, key, properties.getProperty(key)));"
      },
      "id": 66109057,
      "filename": "Module.java"
    },
    {
      "repo": "https://github.com/dant3/pooka.git",
      "language": "Java",
      "linescount": 600,
      "location": "/src/main/java/net/suberic/util/gui/propedit",
      "name": "pooka",
      "url": "https://searchcode.com/codesearch/view/96317925/",
      "md5hash": "ccf7d3bb36b400a570420e31979376e3",
      "lines": {
        "42": "  List<String> removeValues = new ArrayList<String>();",
        "43": "  String propertyTemplate;"
      },
      "id": 96317925,
      "filename": "MultiEditorPane.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 6,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 3,
      "source": "Github",
      "id": 2
    }
  ]
}