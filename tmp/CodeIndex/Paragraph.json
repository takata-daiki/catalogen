{
  "matchterm": "Paragraph",
  "previouspage": null,
  "searchterm": "Paragraph",
  "query": "Paragraph",
  "language_filters": [
    {
      "count": 6823,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 6823,
  "results": [
    {
      "repo": "https://bitbucket.org/ivertex/itext-fork",
      "language": "Java",
      "linescount": 497,
      "location": "/src/core/com/itextpdf/text",
      "name": "itext-fork",
      "url": "https://searchcode.com/codesearch/view/57657013/",
      "md5hash": "1f4e04f35c96b8844d856e71f4090cf4",
      "lines": {
        "1": "/*",
        "2": " * $Id: Paragraph.java 4113 2009-12-01 11:08:59Z blowagie $",
        "67": "public class Paragraph extends Phrase {",
        "80": "    /** The indentation of this paragraph on the left side. */",
        "66": "",
        "46": "/**",
        "47": " * A <CODE>Paragraph</CODE> is a series of <CODE>Chunk</CODE>s and/or <CODE>Phrases</CODE>.",
        "48": " * <P>",
        "49": " * A <CODE>Paragraph</CODE> has the same qualities of a <CODE>Phrase</CODE>, but also",
        "82": "    ",
        "83": "    /** The indentation of this paragraph on the right side. */",
        "89": "    /** The spacing before the paragraph. */",
        "88": "    ",
        "57": " * <BLOCKQUOTE><PRE>",
        "58": " * <STRONG>Paragraph p = new Paragraph(\"This is a paragraph\",",
        "79": "    "
      },
      "id": 57657013,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://bitbucket.org/ansgarkonermann/simpleodf",
      "language": "Java",
      "linescount": 389,
      "location": "/src/main/java/org/odftoolkit/simple/text",
      "name": "simpleodf",
      "url": "https://searchcode.com/codesearch/view/60371753/",
      "md5hash": "613a7cc8b828182c13629f97c90077e7",
      "lines": {
        "66": "    /**",
        "67": "     * Get a paragraph instance by an instance of <code>TextPElement</code>.",
        "45": "/**",
        "46": " * This class presents paragraph in ODF document. It provides methods to",
        "47": " * manipulate text content, and other child component under the paragraph.",
        "48": " *",
        "50": " */",
        "51": "public class Paragraph extends Component implements TextboxContainer {",
        "52": "",
        "53": "    private TextPElement mParagraphElement;",
        "54": "    private Document mOwnerDocument;",
        "55": "    private ParagraphContainer mContainer;",
        "58": "",
        "59": "    private Paragraph(TextPElement pElement) {",
        "60": "        mParagraphElement = pElement;",
        "61": "        mOwnerDocument = (Document) ((OdfFileDom) pElement.getOwnerDocument()).getDocument();"
      },
      "id": 60371753,
      "filename": "Paragraph.java"
    },
    {
      "repo": "http://fb2pdf.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 544,
      "location": "/src/java/src/com/itextpdf/text",
      "name": "fb2pdf",
      "url": "https://searchcode.com/codesearch/view/2126687/",
      "md5hash": "a704e6f4d2e19c7d90a94addb4c2a6a6",
      "lines": {
        "64": " * <STRONG>Paragraph p = new Paragraph(\"This is a paragraph\",",
        "1": "/*",
        "2": " * $Id: Paragraph.java 5120 2012-04-17 12:50:05Z eugenemark $",
        "86": "    /** The indentation of this paragraph on the left side. */",
        "72": "",
        "73": "public class Paragraph extends Phrase implements Indentable, Spaceable {",
        "94": "",
        "52": "/**",
        "53": " * A <CODE>Paragraph</CODE> is a series of <CODE>Chunk</CODE>s and/or <CODE>Phrases</CODE>.",
        "54": " * <P>",
        "55": " * A <CODE>Paragraph</CODE> has the same qualities of a <CODE>Phrase</CODE>, but also",
        "88": "",
        "89": "    /** The indentation of this paragraph on the right side. */",
        "95": "    /** The spacing before the paragraph. */",
        "85": "",
        "63": " * <BLOCKQUOTE><PRE>"
      },
      "id": 2126687,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 660,
      "location": "/src/org/apache/poi/hwpf/usermodel",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97384407/",
      "md5hash": "d9e337622aaacee6d2790b7572b0af11",
      "lines": {
        "34": "",
        "35": "public class Paragraph extends Range implements Cloneable",
        "132": "                    properties = ParagraphSprmUncompressor.uncompressPAP(",
        "134": "                    // reapply style and local PAPX properties",
        "135": "                    properties = newParagraph_applyStyleProperties( styleSheet,",
        "136": "                            papx, properties );",
        "137": "                    properties = ParagraphSprmUncompressor.uncompressPAP(",
        "145": "",
        "146": "        return new Paragraph( papx, properties, parent );",
        "131": "                {",
        "148": "",
        "149": "    protected static ParagraphProperties newParagraph_applyStyleProperties(",
        "150": "            StyleSheet styleSheet, PAPX papx, ParagraphProperties properties )",
        "151": "    {",
        "156": "        byte[] grpprl = styleSheet.getPAPX( style );",
        "157": "        return ParagraphSprmUncompressor.uncompressPAP( properties, grpprl, 2 );"
      },
      "id": 97384407,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://bitbucket.org/keithb/tdd",
      "language": "Java",
      "linescount": 529,
      "location": "/targets/itext/1.4.8/com/lowagie/text",
      "name": "tdd",
      "url": "https://searchcode.com/codesearch/view/120313690/",
      "md5hash": "0819b19c458ce2244d35a0e08b981d47",
      "lines": {
        "1": "/*",
        "2": " * $Id: Paragraph.java,v 1.90 2006/11/20 13:42:28 blowagie Exp $",
        "91": "/** The indentation of this paragraph on the right side. */",
        "69": " * <BLOCKQUOTE><PRE>",
        "70": " * <STRONG>Paragraph p = new Paragraph(\"This is a paragraph\",",
        "93": "    ",
        "78": "",
        "79": "public class Paragraph extends Phrase implements TextElementArray, MarkupAttributes {",
        "90": "    ",
        "87": "    ",
        "88": "/** The indentation of this paragraph on the left side. */",
        "58": "/**",
        "59": " * A <CODE>Paragraph</CODE> is a series of <CODE>Chunk</CODE>s and/or <CODE>Phrases</CODE>.",
        "60": " * <P>",
        "61": " * A <CODE>Paragraph</CODE> has the same qualities of a <CODE>Phrase</CODE>, but also",
        "94": "/** The spacing before the paragraph. */"
      },
      "id": 120313690,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://bitbucket.org/mst/ooo340",
      "language": "Java",
      "linescount": 860,
      "location": "/xmerge/java/org/openoffice/xmerge/converter/xml/sxw/pocketword",
      "name": "ooo340",
      "url": "https://searchcode.com/codesearch/view/122077605/",
      "md5hash": "f2874b59147718ebab27436e193e9e0b",
      "lines": {
        "155": "        /*",
        "167": "    /*",
        "168": "     * Processes the text portion of the raw paragraph data from the Pocket Word",
        "156": "         * The actual paragraph data is in the remainder of the byte sequence.",
        "75": "        ",
        "76": "    // Will always have at least these formatting settings in each paragraph",
        "82": "     * Remaining elements assist in calculating correct values for the paragraph ",
        "46": " * Represents a paragraph data structure within a Pocket Word document.",
        "45": "/**",
        "81": "    /*",
        "50": " */",
        "51": "class Paragraph implements PocketWordConstants {",
        "52": "    /*",
        "53": "     * The data elements of a Paragraph.",
        "91": "    ",
        "92": "    private boolean isLastParagraph = false;"
      },
      "id": 122077605,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh-new",
      "language": "Java",
      "linescount": 226,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/text",
      "name": "elexis-base-marlovitsh-new",
      "url": "https://searchcode.com/codesearch/view/61098372/",
      "md5hash": "19948c707416b6c10f93cd8175abbd01",
      "lines": {
        "65": "/**",
        "66": " * Paragraph of a text document.",
        "131": "   * ",
        "132": "   * @return characterproperties of the paragraph",
        "150": "  public IParagraphPropertyStore getParagraphPropertyStore() throws TextException{",
        "129": "  /**",
        "130": "   * Returns character properties belonging to the paragraph",
        "46": "import ag.ion.bion.officelayer.text.IParagraph;",
        "45": "import ag.ion.bion.officelayer.text.ICharacterPropertyStore;",
        "48": "import ag.ion.bion.officelayer.text.IParagraphPropertyStore;",
        "49": "import ag.ion.bion.officelayer.text.ITextDocument;",
        "142": "   * Gets the property store of the paragraph",
        "141": "  /**",
        "47": "import ag.ion.bion.officelayer.text.IParagraphProperties;",
        "149": "   */"
      },
      "id": 61098372,
      "filename": "Paragraph.java"
    },
    {
      "repo": "http://creativecomputing.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 539,
      "location": "/cc.creativecomputing.gui/src/cc/creativecomputing/gui/text/linebreaking",
      "name": "creativecomputing",
      "url": "https://searchcode.com/codesearch/view/1116205/",
      "md5hash": "cdc8d82b8cce65f072c45dc2fba5a555",
      "lines": {
        "64": "     * @param wst the white space treatment policy of this paragraph",
        "160": "     * @throws LineBreakingException If the paragraph is not well formed",
        "161": "     */",
        "168": "                (\"Malformed Paragraph: last element is not an End-Of-Paragraph penalty\");",
        "167": "            throw new LineBreakingException",
        "159": "     * @return the node at the end of the paragraph",
        "16": "",
        "17": "/* $Id: Paragraph.java 39 2006-06-29 18:38:06Z simon $ */",
        "50": "    /**",
        "51": "     * @param wst the white space treatment policy of this paragraph",
        "54": "     */",
        "55": "    public Paragraph(WhiteSpaceTreatment wst, List<Float> reqLineLengths, int tolerance, int looseness) {",
        "27": " */",
        "28": "public class Paragraph{",
        "158": "     * Calculate the best linebreaking points",
        "63": "    /**"
      },
      "id": 1116205,
      "filename": "Paragraph.java"
    },
    {
      "repo": "http://java2word.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 166,
      "location": "/java2word/src/main/java/word/w2004/elements",
      "name": "java2word",
      "url": "https://searchcode.com/codesearch/view/12761771/",
      "md5hash": "e850b16aa1379e2cb7ad21440ad1952f",
      "lines": {
        "34": "     *",
        "35": "     * It receives many ParagraphPieces with their own style/formating",
        "8": "import word.api.interfaces.IFluentElementStylable;",
        "9": "import word.w2004.style.ParagraphStyle;",
        "15": " *",
        "16": " * Use this class to create paragraphs.",
        "18": " *  @see",
        "19": " *  ParagraphPiece",
        "21": " */",
        "22": "public class Paragraph implements IElement, IFluentElement<Paragraph>, IFluentElementStylable <ParagraphStyle> {",
        "23": "",
        "24": "    private ParagraphPiece[] pieces = null;",
        "25": "    private ParagraphStyle style = new ParagraphStyle();",
        "26": "    private List<Tab> tabs = new ArrayList<Tab>();",
        "27": "",
        "28": "    private Paragraph() {        "
      },
      "id": 12761771,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://bitbucket.org/josephg/wave-http-federation",
      "language": "Java",
      "linescount": 471,
      "location": "/src/org/waveprotocol/wave/client/editor/content/paragraph",
      "name": "wave-http-federation",
      "url": "https://searchcode.com/codesearch/view/58137027/",
      "md5hash": "fff226c4aace5e9e069ac2f56aaebd5f",
      "lines": {
        "35": "/**",
        "36": " * An editable paragraph element",
        "38": " */",
        "39": "public class Paragraph {",
        "41": "  /**",
        "42": "   * Tag name for regular paragraphs",
        "203": "   * Registers handlers for paragraphs",
        "17": "",
        "18": "package org.waveprotocol.wave.client.editor.content.paragraph;",
        "211": "   */",
        "212": "  public static final ParagraphRenderer DEFAULT_RENDERER = new ParagraphRenderer(",
        "213": "      new DefaultParagraphHtmlRenderer());",
        "214": "",
        "215": "  /**",
        "216": "   * Default NiceHtmlRenderer for paragraphs.",
        "217": "   */",
        "202": "  /**"
      },
      "id": 58137027,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://bitbucket.org/involvements/google-wave",
      "language": "Java",
      "linescount": 467,
      "location": "/src/org/waveprotocol/wave/client/editor/content/paragraph",
      "name": "google-wave",
      "url": "https://searchcode.com/codesearch/view/61568410/",
      "md5hash": "6bd176ef513877323de87baa6729d323",
      "lines": {
        "33": "/**",
        "34": " * An editable paragraph element",
        "36": " */",
        "37": "public class Paragraph {",
        "39": "  /**",
        "40": "   * Tag name for regular paragraphs",
        "201": "   * Registers handlers for paragraphs",
        "209": "   */",
        "210": "  public static final ParagraphRenderer DEFAULT_RENDERER = new ParagraphRenderer(",
        "17": "",
        "18": "package org.waveprotocol.wave.client.editor.content.paragraph;",
        "211": "      new DefaultParagraphHtmlRenderer());",
        "212": "",
        "213": "  /**",
        "214": "   * Default NiceHtmlRenderer for paragraphs.",
        "215": "   */",
        "200": "  /**"
      },
      "id": 61568410,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://github.com/jfgalhao/wave.git",
      "language": "Java",
      "linescount": 469,
      "location": "/client/src/main/java/org/waveprotocol/wave/client/editor/content/paragraph",
      "name": "wave",
      "url": "https://searchcode.com/codesearch/view/69836196/",
      "md5hash": "5aa7392d831f7970d999b0c10b72a31c",
      "lines": {
        "35": "/**",
        "36": " * An editable paragraph element",
        "38": " */",
        "39": "public class Paragraph {",
        "41": "  /**",
        "42": "   * Tag name for regular paragraphs",
        "203": "   * Registers handlers for paragraphs",
        "19": "",
        "20": "package org.waveprotocol.wave.client.editor.content.paragraph;",
        "213": "      new DefaultParagraphHtmlRenderer());",
        "214": "",
        "215": "  /**",
        "216": "   * Default NiceHtmlRenderer for paragraphs.",
        "212": "  public static final ParagraphRenderer DEFAULT_RENDERER = new ParagraphRenderer(",
        "217": "   */",
        "202": "  /**",
        "211": "   */"
      },
      "id": 69836196,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://github.com/marushkaalex/TaskTwo.git",
      "language": "Java",
      "linescount": 74,
      "location": "/src/main/java/com/epam/am/entity",
      "name": "TaskTwo",
      "url": "https://searchcode.com/codesearch/view/100204224/",
      "md5hash": "4cf416d6ad375842ae790f79add629e1",
      "lines": {
        "4": "",
        "5": "public class Paragraph extends AbstractCompoundText<Sentence> implements TextPart, DeepCloneable<Paragraph> {",
        "6": "",
        "7": "    public Paragraph(List<Sentence> components) {",
        "60": "    public Paragraph deepClone() {",
        "10": "",
        "11": "    public Paragraph() {",
        "61": "        Paragraph result = new Paragraph();",
        "46": "",
        "47": "        Paragraph paragraph = (Paragraph) o;",
        "48": "",
        "49": "        if (!components.equals(paragraph.components)) return false;",
        "59": "    @Override",
        "28": "        }",
        "29": "        return \"\\n\\nParagraph{\" +"
      },
      "id": 100204224,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://code.google.com/p/wave-protocol/",
      "language": "Java",
      "linescount": 467,
      "location": "/src/org/waveprotocol/wave/client/editor/content/paragraph",
      "name": "wave-protocol",
      "url": "https://searchcode.com/codesearch/view/7114982/",
      "md5hash": "6bd176ef513877323de87baa6729d323",
      "lines": {
        "33": "/**",
        "34": " * An editable paragraph element",
        "36": " */",
        "37": "public class Paragraph {",
        "39": "  /**",
        "40": "   * Tag name for regular paragraphs",
        "201": "   * Registers handlers for paragraphs",
        "209": "   */",
        "210": "  public static final ParagraphRenderer DEFAULT_RENDERER = new ParagraphRenderer(",
        "17": "",
        "18": "package org.waveprotocol.wave.client.editor.content.paragraph;",
        "211": "      new DefaultParagraphHtmlRenderer());",
        "212": "",
        "213": "  /**",
        "214": "   * Default NiceHtmlRenderer for paragraphs.",
        "215": "   */",
        "200": "  /**"
      },
      "id": 7114982,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://github.com/carlfish/ourplace.git",
      "language": "Java",
      "linescount": 49,
      "location": "/src/main/java/org/pastiche/wiki/parser",
      "name": "ourplace",
      "url": "https://searchcode.com/codesearch/view/104736510/",
      "md5hash": "909723f9a2820905d89b9ada28cda7d9",
      "lines": {
        "32": "            {",
        "33": "                ((Paragraph) element).add((Element) i.next());",
        "2": "",
        "3": "public class Paragraph extends CompositeElement",
        "4": "{",
        "5": "    private Paragraph()",
        "41": "",
        "10": "    {",
        "11": "        visitor.visitParagraph(this);",
        "44": "        Paragraph paragraph = new Paragraph();",
        "45": "        paragraph.add(Text.newInstance(initialContents));",
        "46": "        return paragraph;",
        "47": "    }",
        "43": "    {",
        "42": "    public static Paragraph newInstance(String initialContents)"
      },
      "id": 104736510,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://bitbucket.org/petermr/patentanalysis",
      "language": "Java",
      "linescount": 125,
      "location": "/src/main/java/uk/ac/cam/ch/wwmm/patents/chemtag",
      "name": "patentanalysis",
      "url": "https://searchcode.com/codesearch/view/56565311/",
      "md5hash": "eab1b0460adcae3cdf8919b1a28e152d",
      "lines": {
        "51": "\t\tif (sourceElement.getAttribute(\"num\") == null) {",
        "61": "\t\t\tlist.add(new Paragraph(paras.get(i)));",
        "48": "\t\tif (sourceElement.getAttribute(\"id\") == null) {",
        "49": "\t\t\tthrow new RuntimeException(\"paragraph must have an id attribute\");",
        "18": "",
        "19": "public class Paragraph {",
        "52": "\t\t\tthrow new RuntimeException(\"paragraph must have a num attribute\");",
        "57": "//\t\tElements paras = step.getSourceElement().getChildElements(\"p\");",
        "55": "",
        "56": "\tpublic static List<Paragraph> createParagraphsFromStep(Step step) {",
        "25": "\t",
        "26": "\tParagraph(Element p) {",
        "59": "\t\tList <Paragraph> list = new ArrayList<Paragraph>(paras.size());",
        "60": "\t\tfor (int i = 0; i < paras.size(); i++) {",
        "58": "\t\tList <Element> paras = Step.getNonChemistryParagraphs(step.getSourceElement());"
      },
      "id": 56565311,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://bitbucket.org/dmj30/reactionextractiondemo",
      "language": "Java",
      "linescount": 93,
      "location": "/src/main/java/extraction",
      "name": "reactionextractiondemo",
      "url": "https://searchcode.com/codesearch/view/62470199/",
      "md5hash": "2edd041600edec5fbd33607dbfe7792d",
      "lines": {
        "49": "\t\tif (sourceElement.getAttribute(\"num\") == null) {",
        "55": "//\t\tElements paras = step.getSourceElement().getChildElements(\"p\");",
        "46": "\t\tif (sourceElement.getAttribute(\"id\") == null) {",
        "47": "\t\t\tthrow new RuntimeException(\"paragraph must have an id attribute\");",
        "16": "",
        "17": "public class Paragraph {",
        "50": "\t\t\tthrow new RuntimeException(\"paragraph must have a num attribute\");",
        "56": "\t\tList <Element> paras = Step.getNonChemistryParagraphs(step.getSourceElement());",
        "53": "",
        "54": "\tpublic static List<Paragraph> createParagraphsFromStep(Step step) {",
        "23": "\t",
        "24": "\tParagraph(Element p) {",
        "57": "\t\tList <Paragraph> list = new ArrayList<Paragraph>(paras.size());",
        "58": "\t\tfor (int i = 0; i < paras.size(); i++) {",
        "59": "\t\t\tlist.add(new Paragraph(paras.get(i)));"
      },
      "id": 62470199,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://bitbucket.org/jimdowning/uima-oscar-play",
      "language": "Java",
      "linescount": 75,
      "location": "/src/main/java/org/u_compare/shared/document/text",
      "name": "uima-oscar-play",
      "url": "https://searchcode.com/codesearch/view/54425337/",
      "md5hash": "d923cc4995fb89d102c977f6fb5ca68d",
      "lines": {
        "37": "\t */",
        "38": "\tprotected Paragraph() {",
        "45": "\t */",
        "46": "\tpublic Paragraph(int addr, TOP_Type type) {",
        "15": "public class Paragraph extends TextBody {",
        "51": "\t/** @generated */",
        "20": "\tpublic final static int typeIndexID = JCasRegistry",
        "14": " */",
        "57": "\t/** @generated */",
        "52": "\tpublic Paragraph(JCas jcas) {",
        "58": "\tpublic Paragraph(JCas jcas, int begin, int end) {",
        "21": "\t\t\t.register(Paragraph.class);"
      },
      "id": 54425337,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://bitbucket.org/lh359/uima-oscar-play",
      "language": "Java",
      "linescount": 69,
      "location": "/src/main/java/org/u_compare/shared/document/text",
      "name": "uima-oscar-play",
      "url": "https://searchcode.com/codesearch/view/54425904/",
      "md5hash": "d2c7c3e7726c39102e5778f16ad50e17",
      "lines": {
        "32": "\t */",
        "33": "\tprotected Paragraph() {}",
        "39": "\t */",
        "40": "\tpublic Paragraph(int addr, TOP_Type type) {",
        "12": " * @generated */",
        "13": "public class Paragraph extends TextBody {",
        "46": "\tpublic Paragraph(JCas jcas) {",
        "45": "\t/** @generated */",
        "17": "\t */",
        "18": "\tpublic final static int typeIndexID = JCasRegistry.register(Paragraph.class);",
        "51": "\t/** @generated */",
        "52": "\tpublic Paragraph(JCas jcas, int begin, int end) {"
      },
      "id": 54425904,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://bitbucket.org/lh359/oscar-patternrecogniser",
      "language": "Java",
      "linescount": 61,
      "location": "/src/main/resources/org/u_compare/shared/document/text",
      "name": "oscar-patternrecogniser",
      "url": "https://searchcode.com/codesearch/view/54642165/",
      "md5hash": "f6e4ae2a41f399880fd21f4d8d21faba",
      "lines": {
        "33": "   * @generated */",
        "34": "  public Paragraph(int addr, TOP_Type type) {",
        "39": "  /** @generated */",
        "40": "  public Paragraph(JCas jcas) {",
        "45": "  /** @generated */  ",
        "46": "  public Paragraph(JCas jcas, int begin, int end) {",
        "15": " * @generated */",
        "16": "public class Paragraph extends TextBody {",
        "19": "   */",
        "20": "  public final static int typeIndexID = JCasRegistry.register(Paragraph.class);",
        "29": "   * @generated */",
        "30": "  protected Paragraph() {}"
      },
      "id": 54642165,
      "filename": "Paragraph.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 3831,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 2147,
      "source": "Github",
      "id": 2
    },
    {
      "count": 691,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 100,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 43,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 10,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 1,
      "source": "Gitorious",
      "id": 10
    }
  ]
}