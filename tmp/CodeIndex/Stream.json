{
  "matchterm": "Stream",
  "previouspage": null,
  "searchterm": "Stream",
  "query": "Stream",
  "language_filters": [
    {
      "count": 150939,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 150937,
  "results": [
    {
      "repo": "https://github.com/emitrom/titanium4j.git",
      "language": "Java",
      "linescount": 307,
      "location": "/src/com/emitrom/ti4j/mobile/client/stream",
      "name": "titanium4j",
      "url": "https://searchcode.com/codesearch/view/73107050/",
      "md5hash": "fd165e92c5710298faa234712d276f41",
      "lines": {
        "32": "",
        "1": "/************************************************************************",
        "2": "  Stream.java is part of Ti4j 3.1.0  Copyright 2013 Emitrom LLC",
        "35": "\t\t\tinstance = new Stream();",
        "33": "\tpublic static Stream get() {",
        "40": "\tprivate Stream() {",
        "39": "",
        "34": "\t\tif (instance == null) {",
        "15": "**************************************************************************/",
        "16": "package com.emitrom.ti4j.mobile.client.stream;",
        "23": "/**",
        "24": " * Stream module containing stream utility methods",
        "25": " */",
        "26": "public class Stream extends TiModule {",
        "30": "\tpublic static final double MODE_APPEND = MODE_APPEND();",
        "31": "\tprivate static Stream instance = null;"
      },
      "id": 73107050,
      "filename": "Stream.java"
    },
    {
      "repo": "https://code.google.com/p/abcl-dynamic-install/",
      "language": "Java",
      "linescount": 2640,
      "location": "/src/org/armedbear/lisp",
      "name": "abcl-dynamic-install",
      "url": "https://searchcode.com/codesearch/view/12140531/",
      "md5hash": "48928ea06fbdfa1d453cc35717863284",
      "lines": {
        "64": " */",
        "1": "/*",
        "2": " * Stream.java",
        "37": "",
        "38": "import java.io.BufferedInputStream;",
        "39": "import java.io.BufferedOutputStream;",
        "40": "import java.io.IOException;",
        "41": "import java.io.InputStream;",
        "42": "import java.io.OutputStream;",
        "43": "import java.io.OutputStreamWriter;",
        "44": "import java.io.PrintWriter;",
        "66": "    protected LispObject elementType;",
        "59": "",
        "60": "/** The stream class",
        "61": " *",
        "62": " * A base class for all Lisp built-in streams.",
        "65": "public class Stream extends StructureObject {"
      },
      "id": 12140531,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/jortizcs/sfs_applications.git",
      "language": "Java",
      "linescount": 47,
      "location": "/energylens/sfs_transactions/lib/simple/org/simpleframework/util/buffer",
      "name": "sfs_applications",
      "url": "https://searchcode.com/codesearch/view/67863966/",
      "md5hash": "ea3e68e64b259f35f1a2f05659611a4b",
      "lines": {
        "1": "/*",
        "2": " * Stream.java February 2001",
        "35": "public interface Stream {",
        "38": "    * This method is used so that a buffer can be represented as a",
        "39": "    * stream of bytes. This provides a quick means to access the data",
        "40": "    * that has been written to the buffer. It wraps the buffer within",
        "41": "    * an input stream so that it can be read directly.",
        "42": "    *",
        "43": "    * @return a stream that can be used to read the buffered bytes",
        "44": "    */   ",
        "34": " */ ",
        "45": "  public InputStream getInputStream() throws IOException;        ",
        "21": "import java.io.IOException;",
        "22": "import java.io.InputStream;",
        "24": "/**",
        "25": " * The <code>Stream</code> interface is used to represent anything that",
        "26": " * can be streamed. Typically this is used to represent a region of"
      },
      "id": 67863966,
      "filename": "Stream.java"
    },
    {
      "repo": "http://ziggystardust.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 257,
      "location": "/src/com/wisc/VegaLibrary",
      "name": "ziggystardust",
      "url": "https://searchcode.com/codesearch/view/13769622/",
      "md5hash": "ca06fb04ae444912d6a1b4b520459fa8",
      "lines": {
        "128": "                        sql = \"SELECT StreamID FROM streams WHERE SecurityID = 1 AND \"+ //need to add additional sec support",
        "1": "/*",
        "2": " * Stream.java",
        "38": "            ",
        "39": "            public static synchronized Stream getStream(Site site,",
        "44": "                ",
        "141": "                    //if there is one available, the first call to next is True",
        "46": "                if(retrieved != null){",
        "45": "                Stream tmp;",
        "144": "                        id = rs.getInt(\"StreamID\");",
        "145": "                    }else{//otherwise we must insert",
        "146": "                        //insert code to insert stream",
        "142": "                    //and then we can get our StreamID",
        "143": "                    if(rs.next()){",
        "127": "                    }else{"
      },
      "id": 13769622,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/franklinhu/storm.git",
      "language": "Java",
      "linescount": 321,
      "location": "/src/jvm/storm/trident",
      "name": "storm",
      "url": "https://searchcode.com/codesearch/view/74593895/",
      "md5hash": "cc057784a450a3332aac107671190983",
      "lines": {
        "11": "import storm.trident.fluent.IAggregatableStream;",
        "5": "import storm.trident.fluent.ChainedAggregatorDeclarer;",
        "6": "import backtype.storm.grouping.CustomStreamGrouping;",
        "9": "import storm.trident.fluent.GlobalAggregationScheme;",
        "10": "import storm.trident.fluent.GroupedStream;",
        "43": "// TODO: need to be able to replace existing fields with the function fields (like Cascading Fields.REPLACE)",
        "12": "import storm.trident.operation.Aggregator;",
        "47": "    ",
        "48": "    protected Stream(TridentTopology topology, Node node) {",
        "52": "    ",
        "53": "    public Stream parallelismHint(int hint) {",
        "57": "    ",
        "58": "    public Stream project(Fields keepFields) {",
        "59": "        return _topology.addSourcedNode(this, new ProcessorNode(_topology.getUniqueStreamId(), keepFields, new Fields(), new ProjectedProcessor(keepFields)));",
        "44": "public class Stream implements IAggregatableStream {"
      },
      "id": 74593895,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/mkouba/rewrite.git",
      "language": "Java",
      "linescount": 235,
      "location": "/config-servlet/src/main/java/org/ocpsoft/rewrite/servlet/config",
      "name": "rewrite",
      "url": "https://searchcode.com/codesearch/view/71464668/",
      "md5hash": "db809f31a412889f6c6dffff114ea042",
      "lines": {
        "32": " * {@link HttpServletResponse#getOutputStream()}.",
        "2": "",
        "3": "import java.io.BufferedInputStream;",
        "4": "import java.io.BufferedOutputStream;",
        "5": "import java.io.File;",
        "6": "import java.io.FileInputStream;",
        "7": "import java.io.FileNotFoundException;",
        "8": "import java.io.FileOutputStream;",
        "9": "import java.io.IOException;",
        "10": "import java.io.InputStream;",
        "11": "import java.io.OutputStream;",
        "12": "import java.util.Set;",
        "25": "import org.ocpsoft.rewrite.param.RegexParameterizedPatternBuilder;",
        "26": "import org.ocpsoft.rewrite.servlet.config.response.ResponseStreamWrapper;",
        "30": "/**",
        "31": " * An {@link Operation} responsible for streaming a {@link File} on the host file-system to the"
      },
      "id": 71464668,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/kuniss/FlowEclipsePlugins.git",
      "language": "Java",
      "linescount": 112,
      "location": "/de.grammarcraft.flow/src-gen/de/grammarcraft/flow/flow",
      "name": "FlowEclipsePlugins",
      "url": "https://searchcode.com/codesearch/view/74777492/",
      "md5hash": "ce5912c9a653c2a1e59b22018475b530",
      "lines": {
        "42": "   * @see #setLeftPort(LeftPort)",
        "43": "   * @see de.grammarcraft.flow.flow.FlowPackage#getStream_LeftPort()",
        "14": " * <!-- begin-user-doc -->",
        "15": " * A representation of the model object '<em><b>Stream</b></em>'.",
        "49": "  /**",
        "50": "   * Sets the value of the '{@link de.grammarcraft.flow.flow.Stream#getLeftPort <em>Left Port</em>}' containment reference.",
        "20": " * <ul>",
        "21": " *   <li>{@link de.grammarcraft.flow.flow.Stream#getLeftPort <em>Left Port</em>}</li>",
        "22": " *   <li>{@link de.grammarcraft.flow.flow.Stream#getMessage <em>Message</em>}</li>",
        "23": " *   <li>{@link de.grammarcraft.flow.flow.Stream#getRightPort <em>Right Port</em>}</li>",
        "24": " * </ul>",
        "26": " *",
        "27": " * @see de.grammarcraft.flow.flow.FlowPackage#getStream()",
        "30": " */",
        "31": "public interface Stream extends EObject"
      },
      "id": 74777492,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/kuniss/FlowEclipsePlugins.git",
      "language": "Java",
      "linescount": 110,
      "location": "/de.grammarcraft.csflow/src-gen/de/grammarcraft/csflow/flow",
      "name": "FlowEclipsePlugins",
      "url": "https://searchcode.com/codesearch/view/74778146/",
      "md5hash": "cc95be124e2f5f9396174b9ab6b97d7a",
      "lines": {
        "40": "   * @see #setLeftPort(LeftPort)",
        "41": "   * @see de.grammarcraft.csflow.flow.FlowPackage#getStream_LeftPort()",
        "12": " * <!-- begin-user-doc -->",
        "13": " * A representation of the model object '<em><b>Stream</b></em>'.",
        "47": "  /**",
        "48": "   * Sets the value of the '{@link de.grammarcraft.csflow.flow.Stream#getLeftPort <em>Left Port</em>}' containment reference.",
        "18": " * <ul>",
        "19": " *   <li>{@link de.grammarcraft.csflow.flow.Stream#getLeftPort <em>Left Port</em>}</li>",
        "20": " *   <li>{@link de.grammarcraft.csflow.flow.Stream#getMessage <em>Message</em>}</li>",
        "21": " *   <li>{@link de.grammarcraft.csflow.flow.Stream#getRightPort <em>Right Port</em>}</li>",
        "22": " * </ul>",
        "24": " *",
        "25": " * @see de.grammarcraft.csflow.flow.FlowPackage#getStream()",
        "28": " */",
        "29": "public interface Stream extends EObject"
      },
      "id": 74778146,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/jaechoon2/libstreaming.git",
      "language": "Java",
      "linescount": 91,
      "location": "/src/net/majorkernelpanic/streaming",
      "name": "libstreaming",
      "url": "https://searchcode.com/codesearch/view/75734250/",
      "md5hash": "c64e4b98adbe0664a324551400f514a9",
      "lines": {
        "59": "\t/**",
        "81": "\t * The SSRC identifier of the stream.",
        "60": "\t * Sets the destination ports of the stream.",
        "43": "\t/** ",
        "44": "\t * Sets the destination ip address of the stream.",
        "45": "\t * @param dest The destination address of the stream ",
        "46": "\t */",
        "80": "\t/**",
        "49": "\t/** ",
        "50": "\t * Sets the destination ports of the stream.",
        "20": "",
        "21": "package net.majorkernelpanic.streaming;",
        "87": "",
        "88": "\tpublic boolean isStreaming();",
        "26": "/**",
        "27": " * An interface that represents a Stream. ",
        "28": " */"
      },
      "id": 75734250,
      "filename": "Stream.java"
    },
    {
      "repo": "git://github.com/timyates/groovy-stream.git",
      "language": "Java",
      "linescount": 1055,
      "location": "/src/main/java/groovy/stream",
      "name": "groovy-stream",
      "url": "https://searchcode.com/codesearch/view/101736045/",
      "md5hash": "05b0b910d82c415ddf49d2788d76cd52",
      "lines": {
        "16": "",
        "17": "package groovy.stream ;",
        "50": " * @author Tim Yates",
        "51": " * @param <T> the type of each element returned from the Stream.",
        "20": "",
        "21": "import groovy.stream.iterators.* ;",
        "22": "import groovy.stream.iterators.java.* ;",
        "23": "import groovy.stream.iterators.groovy.* ;",
        "24": "import groovy.stream.functions.Function ;",
        "25": "import groovy.stream.functions.Function2 ;",
        "26": "import groovy.stream.functions.Predicate ;",
        "27": "import groovy.stream.functions.IndexedFunction ;",
        "28": "import groovy.stream.functions.IndexedFunction2 ;",
        "29": "import groovy.stream.functions.IndexedPredicate ;",
        "30": "",
        "52": " */"
      },
      "id": 101736045,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/danielrizea/incubator-storm.git",
      "language": "Java",
      "linescount": 378,
      "location": "/storm-core/src/jvm/storm/trident",
      "name": "incubator-storm",
      "url": "https://searchcode.com/codesearch/view/92967473/",
      "md5hash": "91a8fb98752c1425124752d81bae2cf4",
      "lines": {
        "65": "    ",
        "66": "    protected Stream(TridentTopology topology, String name, Node node) {",
        "71": "    ",
        "72": "    public Stream name(String name) {",
        "28": "import storm.trident.fluent.IAggregatableStream;",
        "74": "    }",
        "75": "    ",
        "73": "        return new Stream(_topology, name, _node);",
        "61": "public class Stream implements IAggregatableStream {",
        "76": "    public Stream parallelismHint(int hint) {",
        "22": "import storm.trident.fluent.ChainedAggregatorDeclarer;",
        "23": "import backtype.storm.grouping.CustomStreamGrouping;",
        "26": "import storm.trident.fluent.GlobalAggregationScheme;",
        "27": "import storm.trident.fluent.GroupedStream;",
        "60": "// TODO: need to be able to replace existing fields with the function fields (like Cascading Fields.REPLACE)",
        "29": "import storm.trident.operation.Aggregator;"
      },
      "id": 92967473,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/ecruciani/spring-xd.git",
      "language": "Java",
      "linescount": 204,
      "location": "/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/core",
      "name": "spring-xd",
      "url": "https://searchcode.com/codesearch/view/93768392/",
      "md5hash": "28cc3480f339c52697ca78d367a51086",
      "lines": {
        "33": " */",
        "34": "public class Stream {",
        "36": "\t/**",
        "37": "\t * Name of stream.",
        "41": "\t/**",
        "42": "\t * Ordered list of {@link ModuleDescriptor}s comprising this stream.",
        "47": "\t/**",
        "48": "\t * Deployment properties for this stream.",
        "52": "\t/**",
        "53": "\t * Construct a Stream.",
        "54": "\t *",
        "55": "\t * @param name                 stream name",
        "56": "\t * @param descriptors          module descriptors defined by this stream in stream",
        "28": "/**",
        "29": " * Domain model for runtime Stream modules. A stream consists of a set of modules used"
      },
      "id": 93768392,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/markmcd/Skrilla.git",
      "language": "Java",
      "linescount": 401,
      "location": "/htmlparser-2.0/org/htmlparser/lexer",
      "name": "Skrilla",
      "url": "https://searchcode.com/codesearch/view/106170572/",
      "md5hash": "995db852be42fb1a35a0d9b93f6fd82d",
      "lines": {
        "32": " * Provides for asynchronous fetching from a stream.",
        "65": "    /**",
        "34": " */",
        "35": "public class Stream extends InputStream implements Runnable",
        "68": "    protected volatile InputStream mIn;",
        "6": "//",
        "7": "// $URL: https://svn.sourceforge.net/svnroot/htmlparser/trunk/lexer/src/main/java/org/htmlparser/lexer/Stream.java $",
        "96": "     * Construct a stream with no assumptions about the number of bytes available.",
        "66": "     * The underlying stream.",
        "67": "     */",
        "97": "     * @param in The input stream to use.",
        "95": "    /**",
        "28": "import java.io.IOException;",
        "29": "import java.io.InputStream;",
        "31": "/**"
      },
      "id": 106170572,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/enson16855/tomcat.git",
      "language": "Java",
      "linescount": 523,
      "location": "/java/org/apache/el/stream",
      "name": "tomcat",
      "url": "https://searchcode.com/codesearch/view/96656883/",
      "md5hash": "48418f30a6336b0eeb4e4f1888f770a4",
      "lines": {
        "64": "    public Stream map(final LambdaExpression le) {",
        "65": "        Iterator<Object> downStream = new OpIterator() {",
        "34": "",
        "35": "public class Stream {",
        "39": "",
        "40": "    public Stream(Iterator<Object > iterator) {",
        "44": "",
        "45": "    public Stream filter(final LambdaExpression le) {",
        "46": "        Iterator<Object> downStream = new OpIterator() {",
        "47": "            @Override",
        "16": " */",
        "17": "package org.apache.el.stream;",
        "59": "        };",
        "60": "        return new Stream(downStream);",
        "63": ""
      },
      "id": 96656883,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/TufeiShao/libstreaming.git",
      "language": "Java",
      "linescount": 120,
      "location": "/src/net/majorkernelpanic/streaming",
      "name": "libstreaming",
      "url": "https://searchcode.com/codesearch/view/92762553/",
      "md5hash": "2d586f44071e5cf1b479f6bb192d8a60",
      "lines": {
        "32": "\t/**",
        "33": "\t * Configures the stream. You need to call this before calling {@link #getSessionDescription()} ",
        "34": "\t * to apply your configuration of the stream.",
        "3": " * ",
        "4": " * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)",
        "38": "\t/**",
        "39": "\t * Starts the stream.",
        "40": "\t * This method can only be called after {@link Stream#configure()}.",
        "35": "\t */",
        "20": "",
        "21": "package net.majorkernelpanic.streaming;",
        "23": "import java.io.IOException;",
        "24": "import java.io.OutputStream;",
        "27": "/**",
        "28": " * An interface that represents a Stream. ",
        "29": " */",
        "30": "public interface Stream {"
      },
      "id": 92762553,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/apache/pdfbox.git",
      "language": "Java",
      "linescount": 232,
      "location": "/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/streampane",
      "name": "pdfbox",
      "url": "https://searchcode.com/codesearch/view/105576364/",
      "md5hash": "c3aaa89a82be15d5172c374d8d02ed37",
      "lines": {
        "32": "import org.apache.pdfbox.pdmodel.PDResources;",
        "33": "import org.apache.pdfbox.pdmodel.common.PDStream;",
        "54": "     * @param isThumb boolean instance says if the stream is thumbnail image.",
        "38": " *",
        "39": " * A class that provides the COSStream in different version and related informations.",
        "40": " */",
        "41": "public class Stream",
        "45": "",
        "46": "    private final COSStream stream;",
        "17": "",
        "18": "package org.apache.pdfbox.tools.pdfdebugger.streampane;",
        "52": "     * Constructor.",
        "21": "import java.io.IOException;",
        "22": "import java.io.InputStream;",
        "53": "     * @param cosStream COSStream instance.",
        "30": "import org.apache.pdfbox.cos.COSName;",
        "31": "import org.apache.pdfbox.cos.COSStream;"
      },
      "id": 105576364,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/gerjomarty/Vidshare.git",
      "language": "Java",
      "linescount": 299,
      "location": "/VidshareHaggle/src/com/gm375/vidshare",
      "name": "Vidshare",
      "url": "https://searchcode.com/codesearch/view/111438176/",
      "md5hash": "844518b80ee0baa964e81d2ce1630570",
      "lines": {
        "48": "        id = dObj.getAttribute(\"id\", 0).getValue();",
        "35": "    private boolean isBeingViewed = false;",
        "36": "    private boolean streamEnding = false;",
        "37": "    private boolean streamEnded = false;",
        "38": "    ",
        "49": "        Log.d(Vidshare.LOG_TAG, \"*** Stream constructor *** dObj ID = \"+ id +\" ***\");",
        "76": "        Log.d(\"EVAL\", \"******** Time data object \"+ dObj.getAttribute(\"seqNumber\", 0).getValue()",
        "44": "    ",
        "45": "    Stream(DataObject dObj, Vidshare vs) {",
        "46": "        Log.d(Vidshare.LOG_TAG, \"*** Stream constructor *** creating stream ***\");",
        "47": "        chunks = new ConcurrentHashMap<Integer, String>();",
        "16": "",
        "17": "public class Stream {",
        "50": "        startTime = dObj.getAttribute(\"startTime\", 0).getValue();",
        "51": "        Log.d(Vidshare.LOG_TAG, \"*** Stream constructor *** start Time = \"+ startTime +\" ***\");",
        "77": "                +\" created STREAM CONSTRUCTOR: \"+ System.currentTimeMillis());"
      },
      "id": 111438176,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/jirkap/ringojs.git",
      "language": "Java",
      "linescount": 244,
      "location": "/src/org/ringojs/wrappers",
      "name": "ringojs",
      "url": "https://searchcode.com/codesearch/view/111806195/",
      "md5hash": "61494224d6ed28d1052d4af386550d74",
      "lines": {
        "8": "",
        "9": "import java.io.InputStream;",
        "10": "import java.io.OutputStream;",
        "11": "import java.io.IOException;",
        "13": "/**",
        "14": " * <p>A CommonJS-compliant wrapper around a Java input or output stream. To",
        "15": " * register Stream as a host object in Rhino call the <code>defineClass()</code> function",
        "16": " * with this class.</p>",
        "17": " *",
        "18": " * <pre><code>defineClass(org.ringojs.wrappers.Stream);</code></pre>",
        "19": " *",
        "20": " * <p>To create an Stream wrapper around an instance of <code>java.io.InputStream</code>",
        "21": " * or <code>java.io.OutputStream</code> call the constructor with the stream as argument:</p>",
        "22": " *",
        "23": " * <pre><code>var io = new Stream(javaInputStream);</code></pre>",
        "24": " *"
      },
      "id": 111806195,
      "filename": "Stream.java"
    },
    {
      "repo": "https://github.com/msandhudigg/digitalcoinj.git",
      "language": "Java",
      "linescount": 50,
      "location": "/orchid/src/com/subgraph/orchid",
      "name": "digitalcoinj",
      "url": "https://searchcode.com/codesearch/view/93589442/",
      "md5hash": "c1370942b2272cfd8ae531b1125a04f0",
      "lines": {
        "2": "",
        "3": "import java.io.InputStream;",
        "4": "import java.io.OutputStream;",
        "5": "",
        "6": "public interface Stream {",
        "7": "\t/**",
        "8": "\t * Returns the {@link Circuit} this stream belongs to.",
        "9": "\t * ",
        "10": "\t * @return The {@link Circuit} this stream belongs to.",
        "14": "\t/**",
        "15": "\t * Returns the stream id value of this stream.",
        "16": "\t * ",
        "17": "\t * @return The stream id value of this stream.",
        "18": "\t */",
        "19": "\tint getStreamId();"
      },
      "id": 93589442,
      "filename": "Stream.java"
    },
    {
      "repo": "git://github.com/mongodb/mongo-java-driver.git",
      "language": "Java",
      "linescount": 100,
      "location": "/driver-core/src/main/com/mongodb/connection",
      "name": "mongo-java-driver",
      "url": "https://searchcode.com/codesearch/view/116000336/",
      "md5hash": "d3e7814aae9dd45e2017ee9fd36f5ec8",
      "lines": {
        "32": "    /**",
        "33": "     * Open the stream.",
        "39": "    /**",
        "40": "     * Open the stream asynchronously.",
        "41": "     *",
        "42": "     * @param handler the completion handler for opening the stream",
        "46": "    /**",
        "47": "     * Write each buffer in the list to the stream in order, blocking until all are completely written.",
        "49": "     * @param buffers the buffers to write",
        "50": "     * @throws IOException if there are problems writing to the stream",
        "54": "    /**",
        "55": "     * Read from the stream, blocking until the requested number of bytes have been read.",
        "25": "/**",
        "26": " * A full duplex stream of bytes.",
        "29": " */",
        "30": "public interface Stream extends BufferProvider{"
      },
      "id": 116000336,
      "filename": "Stream.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 74574,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 59228,
      "source": "Github",
      "id": 2
    },
    {
      "count": 14116,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 1542,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 651,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 347,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 287,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 128,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 66,
      "source": "Gitorious",
      "id": 10
    }
  ]
}