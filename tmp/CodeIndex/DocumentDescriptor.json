{
  "matchterm": "DocumentDescriptor",
  "previouspage": null,
  "searchterm": "DocumentDescriptor",
  "query": "DocumentDescriptor",
  "language_filters": [
    {
      "count": 84,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 84,
  "results": [
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh",
      "language": "Java",
      "linescount": 310,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/document",
      "name": "elexis-base-marlovitsh",
      "url": "https://searchcode.com/codesearch/view/133379199/",
      "md5hash": "65670f931b730274e2dc2c214e78bc94",
      "lines": {
        "69": "  /**",
        "70": "   * Constructs new DocumentDescriptor.",
        "74": "   */",
        "75": "  public DocumentDescriptor() {",
        "78": "  /**",
        "79": "   * Constructs new DocumentDescriptor.",
        "48": " */",
        "49": "public class DocumentDescriptor implements IDocumentDescriptor {",
        "51": "\t/** A default document descriptor. */",
        "52": "\tpublic static final DocumentDescriptor DEFAULT = new DocumentDescriptor();",
        "85": "   */",
        "54": "\t/** A default document descriptor for hidden documents. */",
        "55": "\tpublic static final DocumentDescriptor DEFAULT_HIDDEN = new DocumentDescriptor(true);",
        "86": "  public DocumentDescriptor(boolean hidden) {"
      },
      "id": 133379199,
      "filename": "DocumentDescriptor.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh-new",
      "language": "Java",
      "linescount": 310,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/document",
      "name": "elexis-base-marlovitsh-new",
      "url": "https://searchcode.com/codesearch/view/61098517/",
      "md5hash": "65670f931b730274e2dc2c214e78bc94",
      "lines": {
        "69": "  /**",
        "70": "   * Constructs new DocumentDescriptor.",
        "74": "   */",
        "75": "  public DocumentDescriptor() {",
        "78": "  /**",
        "79": "   * Constructs new DocumentDescriptor.",
        "48": " */",
        "49": "public class DocumentDescriptor implements IDocumentDescriptor {",
        "51": "\t/** A default document descriptor. */",
        "52": "\tpublic static final DocumentDescriptor DEFAULT = new DocumentDescriptor();",
        "85": "   */",
        "54": "\t/** A default document descriptor for hidden documents. */",
        "55": "\tpublic static final DocumentDescriptor DEFAULT_HIDDEN = new DocumentDescriptor(true);",
        "86": "  public DocumentDescriptor(boolean hidden) {"
      },
      "id": 61098517,
      "filename": "DocumentDescriptor.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 140,
      "location": "/components/forks/poi/src/loci/poi/poifs/filesystem",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642285/",
      "md5hash": "7435ded9cbe9f607bd81e481f9e72aec",
      "lines": {
        "64": "    public DocumentDescriptor(final POIFSDocumentPath path, final String name)",
        "83": "     * equality. Two DocumentDescriptor instances are equal if they",
        "102": "            {",
        "103": "                DocumentDescriptor descriptor = ( DocumentDescriptor ) o;",
        "137": "    }",
        "138": "}   // end public class DocumentDescriptor",
        "44": "/**",
        "82": "    /**",
        "45": " * Class DocumentDescriptor",
        "50": "",
        "51": "public class DocumentDescriptor",
        "63": ""
      },
      "id": 15642285,
      "filename": "DocumentDescriptor.java"
    },
    {
      "repo": "https://github.com/drewgaren/android_sdk.git",
      "language": "Java",
      "linescount": 58,
      "location": "/eclipse/plugins/com.android.ide.eclipse.adt/src/com/android/ide/eclipse/adt/internal/editors/descriptors",
      "name": "android_sdk",
      "url": "https://searchcode.com/codesearch/view/65923803/",
      "md5hash": "6ed5728431637cbf04756fea8d439e83",
      "lines": {
        "32": " */",
        "33": "public class DocumentDescriptor extends ElementDescriptor {",
        "35": "    /**",
        "36": "     * Constructs a new {@link DocumentDescriptor} based on its XML name and children list.",
        "22": "/**",
        "23": " * {@link DocumentDescriptor} describes the properties expected for an XML document node.",
        "24": " * ",
        "25": " * Compared to ElementDescriptor, {@link DocumentDescriptor} does not have XML name nor UI name,",
        "45": "     */",
        "46": "    public DocumentDescriptor(String xml_name, ElementDescriptor[] children) {"
      },
      "id": 65923803,
      "filename": "DocumentDescriptor.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 225,
      "location": "/xmerge/source/pocketword/java/org/openoffice/xmerge/converter/xml/sxw/pocketword",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45005297/",
      "md5hash": "9b69d6a489f1b7beb373aae53a72b37d",
      "lines": {
        "192": "     * <code>ParagraphDescriptor</code> represents the data structure used to",
        "193": "     * describe individual paragraphs within a <code>DocumentDescriptor.</code>",
        "194": "     *",
        "195": "     * It is used solely by the <code>DocumentDescriptor<code> class.",
        "113": "            // Byte sequence marking the end of this DocumentDescriptor",
        "73": "    /**",
        "42": " */",
        "43": "class DocumentDescriptor {",
        "78": "     * @return  Byte array containing the Pocket Word representation of this",
        "79": "     *          <code>DocumentDescriptor</code>.",
        "112": "",
        "49": "",
        "50": "    DocumentDescriptor() {",
        "56": "    /**",
        "57": "     * Updates the <code>DocumentDescriptor</code> to include details of another",
        "74": "     * Retrieve the <code>DocumentDescriptor's</code> data.  Due to the variable"
      },
      "id": 45005297,
      "filename": "DocumentDescriptor.java"
    },
    {
      "repo": "https://bitbucket.org/generalplus/android_sdk.git",
      "language": "Java",
      "linescount": 58,
      "location": "/eclipse/plugins/com.android.ide.eclipse.adt/src/com/android/ide/eclipse/adt/internal/editors/descriptors",
      "name": "android_sdk",
      "url": "https://searchcode.com/codesearch/view/35504770/",
      "md5hash": "6d7aff5716e2ad9a648e64def082c881",
      "lines": {
        "32": " */",
        "33": "public class DocumentDescriptor extends ElementDescriptor {",
        "35": "    /**",
        "36": "     * Constructs a new {@link DocumentDescriptor} based on its XML name and children list.",
        "22": "/**",
        "23": " * {@link DocumentDescriptor} describes the properties expected for an XML document node.",
        "24": " *",
        "25": " * Compared to ElementDescriptor, {@link DocumentDescriptor} does not have XML name nor UI name,",
        "45": "     */",
        "46": "    public DocumentDescriptor(String xml_name, ElementDescriptor[] children) {"
      },
      "id": 35504770,
      "filename": "DocumentDescriptor.java"
    },
    {
      "repo": "https://bitbucket.org/cyanogenmod/android_sdk.git",
      "language": "Java",
      "linescount": 58,
      "location": "/eclipse/plugins/com.android.ide.eclipse.adt/src/com/android/ide/eclipse/adt/internal/editors/descriptors",
      "name": "android_sdk",
      "url": "https://searchcode.com/codesearch/view/41577169/",
      "md5hash": "6d7aff5716e2ad9a648e64def082c881",
      "lines": {
        "32": " */",
        "33": "public class DocumentDescriptor extends ElementDescriptor {",
        "35": "    /**",
        "36": "     * Constructs a new {@link DocumentDescriptor} based on its XML name and children list.",
        "22": "/**",
        "23": " * {@link DocumentDescriptor} describes the properties expected for an XML document node.",
        "24": " *",
        "25": " * Compared to ElementDescriptor, {@link DocumentDescriptor} does not have XML name nor UI name,",
        "45": "     */",
        "46": "    public DocumentDescriptor(String xml_name, ElementDescriptor[] children) {"
      },
      "id": 41577169,
      "filename": "DocumentDescriptor.java"
    },
    {
      "repo": "https://bitbucket.org/codefirex/sdk.git",
      "language": "Java",
      "linescount": 58,
      "location": "/eclipse/plugins/com.android.ide.eclipse.adt/src/com/android/ide/eclipse/adt/internal/editors/descriptors",
      "name": "sdk",
      "url": "https://searchcode.com/codesearch/view/51106481/",
      "md5hash": "6d7aff5716e2ad9a648e64def082c881",
      "lines": {
        "32": " */",
        "33": "public class DocumentDescriptor extends ElementDescriptor {",
        "35": "    /**",
        "36": "     * Constructs a new {@link DocumentDescriptor} based on its XML name and children list.",
        "22": "/**",
        "23": " * {@link DocumentDescriptor} describes the properties expected for an XML document node.",
        "24": " *",
        "25": " * Compared to ElementDescriptor, {@link DocumentDescriptor} does not have XML name nor UI name,",
        "45": "     */",
        "46": "    public DocumentDescriptor(String xml_name, ElementDescriptor[] children) {"
      },
      "id": 51106481,
      "filename": "DocumentDescriptor.java"
    },
    {
      "repo": "https://bitbucket.org/lukejackson/jgit-flow.git",
      "language": "Java",
      "linescount": 245,
      "location": "/jgitflow-maven-plugin/src/main/java/com/atlassian/maven/plugins/jgitflow/rewrite",
      "name": "jgit-flow",
      "url": "https://searchcode.com/codesearch/view/91854898/",
      "md5hash": "0f6a97193e59ef16e7df68667275caf4",
      "lines": {
        "128": "",
        "129": "    private DocumentDescriptor readPom(File pomFile, String eol) throws ProjectRewriteException",
        "60": "        DocumentDescriptor dd = readPom(pomFile, eol);",
        "74": "",
        "75": "    private void writePom(DocumentDescriptor dd, File f, String eol) throws ProjectRewriteException",
        "221": "",
        "215": "",
        "216": "    private class DocumentDescriptor",
        "59": "        //Document document = readPom(pomFile);",
        "188": "",
        "189": "            return new DocumentDescriptor(document, intro, outtro);",
        "222": "        private DocumentDescriptor(Document document, String intro, String outtro)"
      },
      "id": 91854898,
      "filename": "MavenProjectRewriter.java"
    },
    {
      "repo": "https://github.com/adamfowleruk/mljavasamples.git",
      "language": "Java",
      "linescount": 494,
      "location": "/example/com/marklogic/client/example/batch",
      "name": "mljavasamples",
      "url": "https://searchcode.com/codesearch/view/71668105/",
      "md5hash": "719b9d68666250d073a275da5e7fa43a",
      "lines": {
        "33": "import com.marklogic.client.MarkLogicIOException;",
        "34": "import com.marklogic.client.document.DocumentDescriptor;",
        "164": "\tclass InputItem {",
        "165": "\t\tDocumentDescriptor desc;",
        "166": "\t\tInputItem withDescriptor(DocumentDescriptor desc) {",
        "167": "\t\t\tthis.desc = desc;",
        "72": "",
        "73": "// TODO: DocumentDescriptor overloads",
        "216": "\t\tString uri;",
        "217": "//\t\tDocumentDescriptor desc;",
        "228": "/*",
        "229": "\t\tpublic DocumentDescriptor getDesc() {"
      },
      "id": 71668105,
      "filename": "BatchManager.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 498,
      "location": "/xml/xml-psi-impl/src/com/intellij/xml/impl/schema",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/116199150/",
      "md5hash": "5debd445ac0be866f2dba0b669efdcf4",
      "lines": {
        "288": "    return _canContainTag(localName, namespace, myTag, context, new HashSet<>(5),",
        "289": "                          new CurrentContextInfo(myDocumentDescriptor, myDocumentDescriptor.getDefaultNamespace()), false);",
        "292": "  static class CurrentContextInfo {",
        "134": "  public XmlElementsGroup getTopGroup() {",
        "262": "  public XmlNSDescriptorImpl getNsDescriptor() {",
        "135": "    return XmlElementsGroupProcessor.computeGroups(myDocumentDescriptor, myTag);",
        "296": "    public CurrentContextInfo(XmlNSDescriptorImpl _nsDescriptor, String _ns) {",
        "297": "      documentDescriptor = _nsDescriptor;",
        "263": "    return myDocumentDescriptor;",
        "46": "public class ComplexTypeDescriptor extends TypeDescriptor {",
        "47": "  protected final XmlNSDescriptorImpl myDocumentDescriptor;",
        "145": "    createProcessor(map).startProcessing(myTag);",
        "146": "    addSubstitutionGroups(map, myDocumentDescriptor, new HashSet<>());",
        "153": "  protected XmlSchemaTagsProcessor createProcessor(final Map<String, XmlElementDescriptor> map) {",
        "154": "    return new XmlSchemaTagsProcessor(myDocumentDescriptor) {",
        "293": "    final XmlNSDescriptorImpl documentDescriptor;"
      },
      "id": 116199150,
      "filename": "ComplexTypeDescriptor.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh",
      "language": "Java",
      "linescount": 538,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/document",
      "name": "elexis-base-marlovitsh",
      "url": "https://searchcode.com/codesearch/view/133379347/",
      "md5hash": "5aca8af1107e138b51a6c5f9418c328c",
      "lines": {
        "162": "   */",
        "163": "  public IDocument constructNewDocument(IFrame frame, String documentType, IDocumentDescriptor documentDescriptor) throws NOAException {",
        "133": "   */",
        "134": "  public IDocument constructNewDocument(String documentType, IDocumentDescriptor documentDescriptor) throws NOAException {",
        "135": "    return constructNewDocument(null, documentType, documentDescriptor);",
        "264": "   * @param url URL of the document",
        "265": "   * @param documentDescriptor document descriptor to be used",
        "302": "   */",
        "303": "  public IDocument loadDocument(InputStream inputStream, IDocumentDescriptor documentDescriptor) throws DocumentException {",
        "136": "  }",
        "274": "   */",
        "275": "  public IDocument loadDocument(String url, IDocumentDescriptor documentDescriptor) throws NOAException {",
        "276": "  \ttry { \t\t",
        "277": "  \t\tPropertyValue[] propertyValues = DocumentDescriptorTransformer.documentDescriptor2PropertyValues(documentDescriptor);",
        "154": "   * @param documentType document type to be used",
        "155": "   * @param documentDescriptor document descriptor to be used"
      },
      "id": 133379347,
      "filename": "DocumentService.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh",
      "language": "Java",
      "linescount": 405,
      "location": "/ch.elexis.noatext/src/ag/ion/noa4e/ui/operations",
      "name": "elexis-base-marlovitsh",
      "url": "https://searchcode.com/codesearch/view/133379562/",
      "md5hash": "fe3e53fbddc3a176f7fd3c5f29854ac0",
      "lines": {
        "65": "  private IFrame              frame              = null;",
        "66": "  private IDocumentDescriptor documentDescriptor = null;",
        "203": "  public LoadDocumentOperation(String documentType, IOfficeApplication officeApplication, IFrame frame, URL url, ",
        "198": "   * @param url URL of the document",
        "199": "   * @param documentDescriptor document descriptor to be used (can be null)",
        "204": "      IDocumentDescriptor documentDescriptor) {",
        "43": "import ag.ion.bion.officelayer.document.IDocument;",
        "44": "import ag.ion.bion.officelayer.document.IDocumentDescriptor;",
        "211": "    ",
        "212": "    this.documentDescriptor = documentDescriptor;",
        "181": "   * @param url URL of the document",
        "182": "   * @param documentDescriptor document descriptor to be used (can be null)",
        "187": "   */",
        "188": "  public LoadDocumentOperation(IOfficeApplication officeApplication, IFrame frame, URL url, IDocumentDescriptor documentDescriptor) throws IllegalArgumentException {",
        "189": "    this(null, officeApplication, frame, url, documentDescriptor);",
        "190": "  }"
      },
      "id": 133379562,
      "filename": "LoadDocumentOperation.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh",
      "language": "Java",
      "linescount": 283,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/document",
      "name": "elexis-base-marlovitsh",
      "url": "https://searchcode.com/codesearch/view/133379202/",
      "md5hash": "9bd8cbff99a203de0b3223af564ed3c8",
      "lines": {
        "194": "  public IDocument loadDocument(IOfficeProgressMonitor officeProgressMonitor, ",
        "195": "      InputStream inputStream, IDocumentDescriptor documentDescriptor) throws DocumentException;",
        "164": "   */",
        "165": "  public IDocument loadDocument(String url, IDocumentDescriptor documentDescriptor) throws NOAException;",
        "260": "   * @param documentDescriptor document descriptor to be used",
        "259": "   * @param url URL of the document (must start with file:///)",
        "170": "   * @param inputStream input stream to be used",
        "171": "   * @param documentDescriptor document descriptor to be used",
        "109": "   */",
        "110": "  public IDocument constructNewDocument(IFrame frame, String documentType, IDocumentDescriptor documentDescriptor) throws NOAException;  ",
        "178": "   */",
        "179": "  public IDocument loadDocument(InputStream inputStream, IDocumentDescriptor documentDescriptor) throws DocumentException;",
        "185": "   * @param inputStream input stream to be used",
        "154": "   * @param url URL of the document ",
        "155": "   * @param documentDescriptor document descriptor to be used",
        "186": "   * @param documentDescriptor document descriptor to be used"
      },
      "id": 133379202,
      "filename": "IDocumentService.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh-new",
      "language": "Java",
      "linescount": 538,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/document",
      "name": "elexis-base-marlovitsh-new",
      "url": "https://searchcode.com/codesearch/view/61098448/",
      "md5hash": "5aca8af1107e138b51a6c5f9418c328c",
      "lines": {
        "162": "   */",
        "163": "  public IDocument constructNewDocument(IFrame frame, String documentType, IDocumentDescriptor documentDescriptor) throws NOAException {",
        "133": "   */",
        "134": "  public IDocument constructNewDocument(String documentType, IDocumentDescriptor documentDescriptor) throws NOAException {",
        "135": "    return constructNewDocument(null, documentType, documentDescriptor);",
        "264": "   * @param url URL of the document",
        "265": "   * @param documentDescriptor document descriptor to be used",
        "302": "   */",
        "303": "  public IDocument loadDocument(InputStream inputStream, IDocumentDescriptor documentDescriptor) throws DocumentException {",
        "136": "  }",
        "274": "   */",
        "275": "  public IDocument loadDocument(String url, IDocumentDescriptor documentDescriptor) throws NOAException {",
        "276": "  \ttry { \t\t",
        "277": "  \t\tPropertyValue[] propertyValues = DocumentDescriptorTransformer.documentDescriptor2PropertyValues(documentDescriptor);",
        "154": "   * @param documentType document type to be used",
        "155": "   * @param documentDescriptor document descriptor to be used"
      },
      "id": 61098448,
      "filename": "DocumentService.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh",
      "language": "Java",
      "linescount": 165,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/document",
      "name": "elexis-base-marlovitsh",
      "url": "https://searchcode.com/codesearch/view/133379340/",
      "md5hash": "6681493f9091644a3ece0a6351e57c42",
      "lines": {
        "67": "   */",
        "68": "  public static PropertyValue[] documentDescriptor2PropertyValues(IDocumentDescriptor documentDescriptor) {",
        "69": "    return documentDescriptor2PropertyValues(null, documentDescriptor);",
        "70": "  }",
        "135": "    String title = documentDescriptor.getTitle();",
        "40": "",
        "41": "import ag.ion.bion.officelayer.document.IDocumentDescriptor;",
        "76": "   * @param propertyValues property values to be used",
        "77": "   * @param documentDescriptor document descriptor to be converted",
        "83": "   */",
        "84": "  public static PropertyValue[] documentDescriptor2PropertyValues(PropertyValue[] propertyValues, IDocumentDescriptor documentDescriptor) {",
        "85": "    if(documentDescriptor == null) {",
        "55": " */",
        "56": "public class DocumentDescriptorTransformer {",
        "134": "",
        "61": "   * ",
        "62": "   * @param documentDescriptor document descriptor to be converted"
      },
      "id": 133379340,
      "filename": "DocumentDescriptorTransformer.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh-new",
      "language": "Java",
      "linescount": 405,
      "location": "/ch.elexis.noatext/src/ag/ion/noa4e/ui/operations",
      "name": "elexis-base-marlovitsh-new",
      "url": "https://searchcode.com/codesearch/view/61098166/",
      "md5hash": "fe3e53fbddc3a176f7fd3c5f29854ac0",
      "lines": {
        "65": "  private IFrame              frame              = null;",
        "66": "  private IDocumentDescriptor documentDescriptor = null;",
        "203": "  public LoadDocumentOperation(String documentType, IOfficeApplication officeApplication, IFrame frame, URL url, ",
        "198": "   * @param url URL of the document",
        "199": "   * @param documentDescriptor document descriptor to be used (can be null)",
        "204": "      IDocumentDescriptor documentDescriptor) {",
        "43": "import ag.ion.bion.officelayer.document.IDocument;",
        "44": "import ag.ion.bion.officelayer.document.IDocumentDescriptor;",
        "211": "    ",
        "212": "    this.documentDescriptor = documentDescriptor;",
        "181": "   * @param url URL of the document",
        "182": "   * @param documentDescriptor document descriptor to be used (can be null)",
        "187": "   */",
        "188": "  public LoadDocumentOperation(IOfficeApplication officeApplication, IFrame frame, URL url, IDocumentDescriptor documentDescriptor) throws IllegalArgumentException {",
        "189": "    this(null, officeApplication, frame, url, documentDescriptor);",
        "190": "  }"
      },
      "id": 61098166,
      "filename": "LoadDocumentOperation.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh-new",
      "language": "Java",
      "linescount": 283,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/document",
      "name": "elexis-base-marlovitsh-new",
      "url": "https://searchcode.com/codesearch/view/61098513/",
      "md5hash": "9bd8cbff99a203de0b3223af564ed3c8",
      "lines": {
        "194": "  public IDocument loadDocument(IOfficeProgressMonitor officeProgressMonitor, ",
        "195": "      InputStream inputStream, IDocumentDescriptor documentDescriptor) throws DocumentException;",
        "164": "   */",
        "165": "  public IDocument loadDocument(String url, IDocumentDescriptor documentDescriptor) throws NOAException;",
        "260": "   * @param documentDescriptor document descriptor to be used",
        "259": "   * @param url URL of the document (must start with file:///)",
        "170": "   * @param inputStream input stream to be used",
        "171": "   * @param documentDescriptor document descriptor to be used",
        "109": "   */",
        "110": "  public IDocument constructNewDocument(IFrame frame, String documentType, IDocumentDescriptor documentDescriptor) throws NOAException;  ",
        "178": "   */",
        "179": "  public IDocument loadDocument(InputStream inputStream, IDocumentDescriptor documentDescriptor) throws DocumentException;",
        "185": "   * @param inputStream input stream to be used",
        "154": "   * @param url URL of the document ",
        "155": "   * @param documentDescriptor document descriptor to be used",
        "186": "   * @param documentDescriptor document descriptor to be used"
      },
      "id": 61098513,
      "filename": "IDocumentService.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh-new",
      "language": "Java",
      "linescount": 165,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/document",
      "name": "elexis-base-marlovitsh-new",
      "url": "https://searchcode.com/codesearch/view/61098451/",
      "md5hash": "6681493f9091644a3ece0a6351e57c42",
      "lines": {
        "67": "   */",
        "68": "  public static PropertyValue[] documentDescriptor2PropertyValues(IDocumentDescriptor documentDescriptor) {",
        "69": "    return documentDescriptor2PropertyValues(null, documentDescriptor);",
        "70": "  }",
        "135": "    String title = documentDescriptor.getTitle();",
        "40": "",
        "41": "import ag.ion.bion.officelayer.document.IDocumentDescriptor;",
        "76": "   * @param propertyValues property values to be used",
        "77": "   * @param documentDescriptor document descriptor to be converted",
        "83": "   */",
        "84": "  public static PropertyValue[] documentDescriptor2PropertyValues(PropertyValue[] propertyValues, IDocumentDescriptor documentDescriptor) {",
        "85": "    if(documentDescriptor == null) {",
        "55": " */",
        "56": "public class DocumentDescriptorTransformer {",
        "134": "",
        "61": "   * ",
        "62": "   * @param documentDescriptor document descriptor to be converted"
      },
      "id": 61098451,
      "filename": "DocumentDescriptorTransformer.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 475,
      "location": "/xml/impl/src/com/intellij/xml/impl/schema",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/7382106/",
      "md5hash": "ca08bc2ddf5fd38b8c6a4f4240d44afa",
      "lines": {
        "137": "    createProcessor(map).startProcessing(myTag);",
        "138": "    addSubstitutionGroups(map, myDocumentDescriptor, new HashSet<XmlNSDescriptorImpl>());",
        "271": "    return _canContainTag(localName, namespace, myTag, context, new HashSet<XmlTag>(5),",
        "272": "                          new CurrentContextInfo(myDocumentDescriptor, myDocumentDescriptor.getDefaultNamespace()));",
        "145": "  protected XmlSchemaTagsProcessor createProcessor(final Map<String, XmlElementDescriptor> map) {",
        "146": "    return new XmlSchemaTagsProcessor(myDocumentDescriptor) {",
        "275": "  static class CurrentContextInfo {",
        "276": "    final XmlNSDescriptorImpl documentDescriptor;",
        "279": "    public CurrentContextInfo(XmlNSDescriptorImpl _nsDescriptor, String _ns) {",
        "280": "      documentDescriptor = _nsDescriptor;",
        "155": "    if (\"element\".equals(tagName) && tag.getAttribute(\"name\") != null) {",
        "156": "      addElementDescriptor(map, myDocumentDescriptor.createElementDescriptor(tag));",
        "285": "  static CurrentContextInfo getContextInfo(CurrentContextInfo info, String ref) {",
        "286": "    XmlTag rootTag = info.documentDescriptor.getTag();",
        "287": "    XmlNSDescriptorImpl nsDescriptor = XmlNSDescriptorImpl.getNSDescriptorToSearchIn(rootTag, ref, info.documentDescriptor);"
      },
      "id": 7382106,
      "filename": "ComplexTypeDescriptor.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 61,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 13,
      "source": "Github",
      "id": 2
    },
    {
      "count": 10,
      "source": "Google Code",
      "id": 1
    }
  ]
}