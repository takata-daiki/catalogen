{
  "matchterm": "SubRecord",
  "previouspage": null,
  "searchterm": "SubRecord",
  "query": "SubRecord",
  "language_filters": [
    {
      "count": 44,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 44,
  "results": [
    {
      "repo": "https://bitbucket.org/atlassian/atlassian-rest.git",
      "language": "Java",
      "linescount": 52,
      "location": "/atlassian-rest-samples/atlassian-rest-sample-expansion/src/main/java/com/atlassian/plugins/rest/sample/expansion/entity",
      "name": "atlassian-rest",
      "url": "https://searchcode.com/codesearch/view/122742134/",
      "md5hash": "feb48a6c31e357308d920e20316d8fea",
      "lines": {
        "32": "",
        "33": "    public SubRecord(final PlayerRecord playerRecord) {",
        "36": "",
        "37": "    public SubRecord(int pointsScored) {",
        "16": "@XmlAccessorType(FIELD)",
        "17": "@Expander(SubRecordExpander.class)",
        "18": "public class SubRecord {",
        "19": "",
        "25": "",
        "26": "    public static SubRecord emptySubRecord(PlayerRecord playerRecord) {",
        "27": "        return new SubRecord(playerRecord);",
        "28": "    }",
        "29": "",
        "30": "    public SubRecord() {"
      },
      "id": 122742134,
      "filename": "SubRecord.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 101,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642394/",
      "md5hash": "d40b14ea92262475f6a64dcc34544617",
      "lines": {
        "82": "                break;",
        "81": "                r = new CommonObjectDataSubRecord( in );",
        "79": "        {",
        "44": "/**",
        "45": " * Subrecords are part of the OBJ class.",
        "46": " */",
        "47": "abstract public class SubRecord",
        "80": "            case CommonObjectDataSubRecord.sid:",
        "49": "{",
        "50": "    public SubRecord()",
        "83": "            case EmbeddedObjectRefSubRecord.sid:",
        "84": "                r = new EmbeddedObjectRefSubRecord( in );",
        "53": "",
        "54": "    public SubRecord( RecordInputStream in )",
        "58": "",
        "59": "    public static Record createSubRecord(RecordInputStream in)"
      },
      "id": 15642394,
      "filename": "SubRecord.java"
    },
    {
      "repo": "https://github.com/PouzinSociety/tinos.git",
      "language": "Java",
      "linescount": 940,
      "location": "/projects/org.pouzinsociety.org.xbill.dns/src/test/java/org/xbill/DNS",
      "name": "tinos",
      "url": "https://searchcode.com/codesearch/view/109419778/",
      "md5hash": "9521dc520975a0ef9183c1276c2ec70d",
      "lines": {
        "512": "\tbyte[] exp = new byte[] { ' ', 0x1F, 'A', 'a', ';', '\"', '\\\\', 0x7E, 0x7F, (byte)0xFF };",
        "513": "\tout = SubRecord.byteArrayFromString(in);",
        "131": "\ttry {",
        "132": "\t    new SubRecord(r, t, d, ttl);",
        "534": "\ttry {",
        "137": "\ttry {",
        "138": "\t    new SubRecord(n, -1, d, ttl);",
        "523": "\ttry {",
        "524": "\t    SubRecord.byteArrayFromString(b.toString());",
        "143": "\ttry {",
        "144": "\t    new SubRecord(n, t, -1, ttl);",
        "529": "\ttry {",
        "530": "\t    SubRecord.byteArrayFromString(\"\\\\256\");",
        "149": "\ttry {",
        "150": "\t    new SubRecord(n, t, d, -1);",
        "535": "\t    SubRecord.byteArrayFromString(\"\\\\25a\");"
      },
      "id": 109419778,
      "filename": "RecordTest.java"
    },
    {
      "repo": "https://bitbucket.org/gusto2_/oftp2-core-1.2.rc2.git",
      "language": "Java",
      "linescount": 462,
      "location": "/src/main/java/org/neociclo/odetteftp/protocol",
      "name": "oftp2-core-1.2.RC2",
      "url": "https://searchcode.com/codesearch/view/66653422/",
      "md5hash": "557f246a315954c696cb773cc022cdf9",
      "lines": {
        "65": "",
        "34": " * <p>",
        "35": " * For transmission of Virtual File records, data is divided into Subrecords,",
        "36": " * each of which is preceded by a one octet Subrecord Header.",
        "37": " * <p>",
        "70": "            boolean compressed = SubrecordHeader.isCompressed(headerOctet);",
        "71": "            boolean endOfRecord = SubrecordHeader.isEndOfRecord(headerOctet);",
        "42": " *  | C | H |           | H |           | H |           |   /",
        "43": " *  | M | D | SUBRECORD | D | SUBRECORD | D | SUBRECORD |  /_",
        "66": "        public SubrecordHeader next() {",
        "52": "",
        "53": "    public static class SubrecordHeaderIterator implements Iterator<SubrecordHeader> {",
        "56": "",
        "57": "        public SubrecordHeaderIterator(ByteBuffer buffer) {",
        "69": ""
      },
      "id": 66653422,
      "filename": "DataExchangeBuffer.java"
    },
    {
      "repo": "https://github.com/starschema/stagekillaz.git",
      "language": "Java",
      "linescount": 107,
      "location": "/src/com/starschema/stagekillaz/ODI",
      "name": "stagekillaz",
      "url": "https://searchcode.com/codesearch/view/112437354/",
      "md5hash": "b0ec95ea8e9243a777b06b36c8a8df83",
      "lines": {
        "64": "      for (int i = 0; i < nodes.getLength(); i++) {",
        "65": "        Node subRecord = nodes.item(i);",
        "66": "",
        "67": "        final String name = DataStageReader.propertyValue(subRecord, \"Name\");",
        "68": "        final String prompt = DataStageReader.propertyValue(subRecord, \"Prompt\");",
        "69": "        final String def = DataStageReader.propertyValue(subRecord, \"Default\");",
        "70": "",
        "59": "      XPath xpath = factory.newXPath();",
        "60": "      XPathExpression expr = xpath.compile(\"//Record/Collection[@Type='Parameters']/SubRecord\");",
        "61": "",
        "62": "      NodeList nodes = DataStageReader.executeXPath(\"//Record/Collection[@Type='Parameters']/SubRecord\");"
      },
      "id": 112437354,
      "filename": "Variables.java"
    },
    {
      "repo": "https://bitbucket.org/gusto2_/oftp2-core-1.2.rc2.git",
      "language": "Java",
      "linescount": 237,
      "location": "/src/main/java/org/neociclo/odetteftp/protocol/data",
      "name": "oftp2-core-1.2.RC2",
      "url": "https://searchcode.com/codesearch/view/66653477/",
      "md5hash": "b0bdd9ec893024d4a14a6873560fbf01",
      "lines": {
        "64": "         * Exchange Buffer subrecords.",
        "33": "import org.neociclo.odetteftp.protocol.VirtualFileMappingException;",
        "34": "import org.neociclo.odetteftp.protocol.DataExchangeBuffer.SubrecordHeader;",
        "35": "import org.neociclo.odetteftp.protocol.DataExchangeBuffer.SubrecordHeaderIterator;",
        "36": "import org.neociclo.odetteftp.util.BufferUtil;",
        "70": "            boolean endOfRecord = false;",
        "71": "            byte[] subrecord = null;",
        "83": "",
        "66": "        int freeSpace;",
        "81": "",
        "82": "            int subrecordSize = Math.min(Math.min(bytesRead, MAX_SUBRECORD_LENGTH), freeSpace - 1);",
        "67": "        ByteBuffer buffer = ByteBufferFactory.allocate(virtualFile.getRecordFormat() == TEXTFILE ? MAX_SUBRECORD_LENGTH + 1: MAX_SUBRECORD_LENGTH);",
        "84": "            // Repetition sequence found within next Subrecord boundaries.",
        "85": "            int posRepetition = BufferUtil.seekRepeatSequence(buffer, subrecordSize, COMPRESSION_MIN_SEQUENCE_LENGTH);",
        "63": "         * some space available). Drain data stream of read records into Data"
      },
      "id": 66653477,
      "filename": "CompressionMapping.java"
    },
    {
      "repo": "https://bitbucket.org/gusto2_/oftp2-core-1.2.rc2.git",
      "language": "Java",
      "linescount": 200,
      "location": "/src/main/java/org/neociclo/odetteftp/protocol/data",
      "name": "oftp2-core-1.2.RC2",
      "url": "https://searchcode.com/codesearch/view/66653482/",
      "md5hash": "5d8b56bef7cbab8df7b89aebe0597734",
      "lines": {
        "64": "        int freeSpace;",
        "33": "import org.neociclo.odetteftp.protocol.VirtualFileMappingException;",
        "34": "import org.neociclo.odetteftp.protocol.DataExchangeBuffer.SubrecordHeader;",
        "35": "import org.neociclo.odetteftp.protocol.DataExchangeBuffer.SubrecordHeaderIterator;",
        "36": "import org.neociclo.odetteftp.util.BufferUtil;",
        "69": "            byte[] subrecord = null;",
        "65": "        ByteBuffer buffer = ByteBufferFactory.allocate(virtualFile.getRecordFormat() == TEXTFILE ? MAX_SUBRECORD_LENGTH + 1: MAX_SUBRECORD_LENGTH);",
        "79": "",
        "80": "            int subrecordSize = Math.min(Math.min(bytesRead, MAX_SUBRECORD_LENGTH), freeSpace - 1);",
        "83": "            if (virtualFile.getRecordFormat() == TEXTFILE) {",
        "84": "                int countPos = BufferUtil.seekWithinBuffer(LINE_SEPARATOR, buffer, subrecordSize);",
        "85": "                if (countPos > 0) {",
        "68": "            boolean endOfRecord = false;",
        "61": "         * some space available). Drain data stream of read records into Data",
        "62": "         * Exchange Buffer subrecords."
      },
      "id": 66653482,
      "filename": "NormalMapping.java"
    },
    {
      "repo": "https://bitbucket.org/hidecheck/hidecheck_monooki",
      "language": "Java",
      "linescount": 2948,
      "location": "/gingerbread/apps/Nfc/src/com/android/nfc",
      "name": "hidecheck_monooki",
      "url": "https://searchcode.com/codesearch/view/120461578/",
      "md5hash": "dbd96d28c02d9f93c27ea82312fb336c",
      "lines": {
        "2608": "                                for (NdefRecord subRecord : msg.getRecords()) {",
        "2609": "                                    short subTnf = subRecord.getTnf();",
        "2610": "                                    if (subTnf == NdefRecord.TNF_WELL_KNOWN",
        "2611": "                                            && Arrays.equals(subRecord.getType(),",
        "2612": "                                                    NdefRecord.RTD_URI)) {",
        "2613": "                                        intent.setData(parseWellKnownUriRecord(subRecord));",
        "2615": "                                    } else if (subTnf == NdefRecord.TNF_ABSOLUTE_URI) {",
        "2616": "                                        intent.setData(Uri.parse(new String(subRecord.getPayload(),",
        "2607": "                                NdefMessage msg = new NdefMessage(record.getPayload());"
      },
      "id": 120461578,
      "filename": "NfcService.java"
    },
    {
      "repo": "https://github.com/beauli/databus.git",
      "language": "Java",
      "linescount": 61,
      "location": "/databus-util-cmdline/databus-util-cmdline-impl/src/main/java/com/linkedin/databus/eventgenerator",
      "name": "databus",
      "url": "https://searchcode.com/codesearch/view/71544471/",
      "md5hash": "f008909c0cb6dda6f37938654017381c",
      "lines": {
        "48": "  {",
        "49": "    GenericRecord subRecord = new GenericData.Record(field.schema());",
        "53": "      fill = SchemaFiller.createRandomField(field);",
        "54": "      fill.writeToRecord(subRecord);",
        "56": "",
        "57": "    return subRecord;"
      },
      "id": 71544471,
      "filename": "RecordFieldGenerate.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 893,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47124816/",
      "md5hash": "d5837fa01ebb3a0efe08815c3e1007c4",
      "lines": {
        "144": "    /**",
        "36": "    MsoDrawing, MsoDrawngGroup + MsoDrawingSelection contain remaining drawing object data",
        "37": "    Each subrecord begins with a 2byte id number, ft.  Next, a two-byte length field, b, specifies the length",
        "38": "    of the subrecord data.  The subrecord data field follws the length field.",
        "39": "\t",
        "145": "     * creates the basic subrecord structure for the desired object type",
        "42": "\t",
        "43": "\tTo store an OBJ record in BIFF8, Microsoft Excel writes a collection of subrecords. The structure of a subrecord is identical to the ",
        "44": "\tstructure of a BIFF record. Each subrecord begins with a 2-byte id number, ft (see the following table). ",
        "45": "\tNext a 2-byte length field, cb, specifies the length of the subrecord data field. The subrecord data field follows the length field.     ",
        "46": "    First subrecord is always ftCmo (common object data) and the last is always ftEnd.",
        "47": "",
        "48": "    For all records other than ftEnd and ftCmo, the subrecord contents are as follows: ",
        "49": "    NOTE: THIS IS NOT NECESSARILY TRUE IF THE SUBRECORD CONTAINS CONTINUES ******** see ftClbsData ",
        "50": ""
      },
      "id": 47124816,
      "filename": "Obj.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 893,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976440/",
      "md5hash": "d5837fa01ebb3a0efe08815c3e1007c4",
      "lines": {
        "144": "    /**",
        "36": "    MsoDrawing, MsoDrawngGroup + MsoDrawingSelection contain remaining drawing object data",
        "37": "    Each subrecord begins with a 2byte id number, ft.  Next, a two-byte length field, b, specifies the length",
        "38": "    of the subrecord data.  The subrecord data field follws the length field.",
        "39": "\t",
        "145": "     * creates the basic subrecord structure for the desired object type",
        "42": "\t",
        "43": "\tTo store an OBJ record in BIFF8, Microsoft Excel writes a collection of subrecords. The structure of a subrecord is identical to the ",
        "44": "\tstructure of a BIFF record. Each subrecord begins with a 2-byte id number, ft (see the following table). ",
        "45": "\tNext a 2-byte length field, cb, specifies the length of the subrecord data field. The subrecord data field follows the length field.     ",
        "46": "    First subrecord is always ftCmo (common object data) and the last is always ftEnd.",
        "47": "",
        "48": "    For all records other than ftEnd and ftCmo, the subrecord contents are as follows: ",
        "49": "    NOTE: THIS IS NOT NECESSARILY TRUE IF THE SUBRECORD CONTAINS CONTINUES ******** see ftClbsData ",
        "50": ""
      },
      "id": 50976440,
      "filename": "Obj.java"
    },
    {
      "repo": "https://bitbucket.org/gcubar/openintents.git",
      "language": "Java",
      "linescount": 937,
      "location": "/samples/EnumClient/dnsjava-2.0.6/tests/org/xbill/DNS",
      "name": "openintents",
      "url": "https://searchcode.com/codesearch/view/38891432/",
      "md5hash": "da6c80de6b565e81966f17a47a3ccff2",
      "lines": {
        "132": "\ttry {",
        "133": "\t    new SubRecord(n, -1, d, ttl);",
        "518": "\ttry {",
        "519": "\t    SubRecord.byteArrayFromString(b.toString());",
        "138": "\ttry {",
        "139": "\t    new SubRecord(n, t, -1, ttl);",
        "524": "\ttry {",
        "45": "{",
        "46": "    private static class SubRecord extends Record",
        "47": "    {",
        "144": "\ttry {",
        "145": "\t    new SubRecord(n, t, d, -1);",
        "530": "\t    SubRecord.byteArrayFromString(\"\\\\25a\");",
        "529": "\ttry {",
        "525": "\t    SubRecord.byteArrayFromString(\"\\\\256\");"
      },
      "id": 38891432,
      "filename": "RecordTest.java"
    },
    {
      "repo": "http://openintents.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 937,
      "location": "/samples/EnumClient/dnsjava-2.0.6/tests/org/xbill/DNS",
      "name": "openintents",
      "url": "https://searchcode.com/codesearch/view/1942728/",
      "md5hash": "da6c80de6b565e81966f17a47a3ccff2",
      "lines": {
        "132": "\ttry {",
        "133": "\t    new SubRecord(n, -1, d, ttl);",
        "518": "\ttry {",
        "519": "\t    SubRecord.byteArrayFromString(b.toString());",
        "138": "\ttry {",
        "139": "\t    new SubRecord(n, t, -1, ttl);",
        "524": "\ttry {",
        "45": "{",
        "46": "    private static class SubRecord extends Record",
        "47": "    {",
        "144": "\ttry {",
        "145": "\t    new SubRecord(n, t, d, -1);",
        "530": "\t    SubRecord.byteArrayFromString(\"\\\\25a\");",
        "529": "\ttry {",
        "525": "\t    SubRecord.byteArrayFromString(\"\\\\256\");"
      },
      "id": 1942728,
      "filename": "RecordTest.java"
    },
    {
      "repo": "https://bitbucket.org/atlassian/atlassian-rest.git",
      "language": "Java",
      "linescount": 17,
      "location": "/atlassian-rest-samples/atlassian-rest-sample-expansion/src/main/java/com/atlassian/plugins/rest/sample/expansion/entity",
      "name": "atlassian-rest",
      "url": "https://searchcode.com/codesearch/view/122742135/",
      "md5hash": "1e7ba02d05aa267153a31b9f0ccdda29",
      "lines": {
        "6": "/**",
        "7": " * Expands a {com.atlassian.plugins.rest.sample.expansion.entity.SubRecord} by asking the {@link com.atlassian.plugins.rest.sample.expansion.resource.DataStore} to perform the database queries (fake).",
        "8": " */",
        "9": "public class SubRecordExpander extends AbstractRecursiveEntityExpander<SubRecord> {",
        "10": "    protected SubRecord expandInternal(SubRecord entity) {",
        "11": "        if (entity != null && entity.getPlayerRecord() != null) {",
        "12": "            return DataStore.getInstance().getSubRecord(entity.getPlayerRecord());"
      },
      "id": 122742135,
      "filename": "SubRecordExpander.java"
    },
    {
      "repo": "https://github.com/Cafogen/android_packages_apps_Nfc.git",
      "language": "Java",
      "linescount": 3102,
      "location": "/src/com/android/nfc",
      "name": "android_packages_apps_Nfc",
      "url": "https://searchcode.com/codesearch/view/70571532/",
      "md5hash": "fe76b2efa156b3871c8c0abb7ef7e4b7",
      "lines": {
        "2784": "                                for (NdefRecord subRecord : msg.getRecords()) {",
        "2785": "                                    short subTnf = subRecord.getTnf();",
        "2786": "                                    if (subTnf == NdefRecord.TNF_WELL_KNOWN",
        "2787": "                                            && Arrays.equals(subRecord.getType(),",
        "2788": "                                                    NdefRecord.RTD_URI)) {",
        "2789": "                                        intent.setData(parseWellKnownUriRecord(subRecord));",
        "2791": "                                    } else if (subTnf == NdefRecord.TNF_ABSOLUTE_URI) {",
        "2792": "                                        intent.setData(Uri.parse(new String(subRecord.getType(),",
        "2783": "                                NdefMessage msg = new NdefMessage(record.getPayload());"
      },
      "id": 70571532,
      "filename": "NfcService.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 223,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642527/",
      "md5hash": "f8fb1e0157f597b2f66fbf49eaefc450",
      "lines": {
        "128": "            short subRecordSize = -1; // set default to \"< 0\"",
        "129": "            if (pos-offset <= size-4) { // see if size info is present, else default to -1",
        "130": "                subRecordSize = LittleEndian.getShort(data, pos + 2);",
        "99": "    {",
        "100": "        subrecords = new ArrayList();",
        "70": "    {",
        "71": "        subrecords = new ArrayList(2);",
        "104": "        byte[] subRecordData = in.readRemainder();",
        "105": "        RecordInputStream subRecStream = new RecordInputStream(new ByteArrayInputStream(subRecordData));",
        "103": "        int subSize = 0;",
        "131": "            }",
        "132": "            Record subRecord = SubRecord.createSubRecord(subRecordSid, subRecordSize, data, pos + 4);",
        "63": "    private List subrecords;",
        "62": "    public final static short      sid                             = 0x5D;",
        "127": "            short subRecordSid = LittleEndian.getShort(data, pos);"
      },
      "id": 15642527,
      "filename": "ObjRecord.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 2128,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47124833/",
      "md5hash": "72e4d3a8e6d0ec2ba92d415debc3171f",
      "lines": {
        "675": "\t\t// 2nd pass:  now have the important container lengths and their updated ",
        "676": "\t\t// subrecords/atoms, create resulting byte array\t\t",
        "933": "\t\t// subrecords/atoms, create resulting byte array\t\t",
        "1798": "    public void setOPTSubRecord(int propertyId, boolean isBid, boolean isComplex, int dtx, byte[] complexBytes) {",
        "297": "\t\t    \t\tDGCONTAINERLENGTH= len;",
        "298": "\t\t    \t} else if (fbt==MSODrawingConstants.MSOFBTSPGRCONTAINER){//patriarch shape, with all non-background non-deleted shapes in it - may have more than 1 subrecord",
        "655": "\t\t\t\t\tdefault:",
        "814": "    /**",
        "815": "     * remove the set of subrecords necessary to define a MSO header record",
        "656": "\t\t\t\t\t\tLogger.logInfo(\"MSODrawing.updateRecord:  unknown subrecord encountered: \" + fbt);",
        "1939": "\t    optrec.setProperty(MSODrawingConstants.msooptfFitTextToShape, false, false, 524296, null);",
        "1940": "\t    optrec.setProperty(344, false, false, 0, null);\t// no info on this subrecord",
        "932": "\t\t// 2nd pass:  now have the important container lengths and their updated ",
        "923": "\t\t\t\t\tdefault:",
        "924": "\t\t\t\t\t\tLogger.logInfo(\"MSODrawing.removeHeader:  unknown subrecord encountered: \" + fbt);",
        "1797": "     */"
      },
      "id": 47124833,
      "filename": "MSODrawing.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 2128,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976457/",
      "md5hash": "72e4d3a8e6d0ec2ba92d415debc3171f",
      "lines": {
        "675": "\t\t// 2nd pass:  now have the important container lengths and their updated ",
        "676": "\t\t// subrecords/atoms, create resulting byte array\t\t",
        "933": "\t\t// subrecords/atoms, create resulting byte array\t\t",
        "1798": "    public void setOPTSubRecord(int propertyId, boolean isBid, boolean isComplex, int dtx, byte[] complexBytes) {",
        "297": "\t\t    \t\tDGCONTAINERLENGTH= len;",
        "298": "\t\t    \t} else if (fbt==MSODrawingConstants.MSOFBTSPGRCONTAINER){//patriarch shape, with all non-background non-deleted shapes in it - may have more than 1 subrecord",
        "655": "\t\t\t\t\tdefault:",
        "814": "    /**",
        "815": "     * remove the set of subrecords necessary to define a MSO header record",
        "656": "\t\t\t\t\t\tLogger.logInfo(\"MSODrawing.updateRecord:  unknown subrecord encountered: \" + fbt);",
        "1939": "\t    optrec.setProperty(MSODrawingConstants.msooptfFitTextToShape, false, false, 524296, null);",
        "1940": "\t    optrec.setProperty(344, false, false, 0, null);\t// no info on this subrecord",
        "932": "\t\t// 2nd pass:  now have the important container lengths and their updated ",
        "923": "\t\t\t\t\tdefault:",
        "924": "\t\t\t\t\t\tLogger.logInfo(\"MSODrawing.removeHeader:  unknown subrecord encountered: \" + fbt);",
        "1797": "     */"
      },
      "id": 50976457,
      "filename": "MSODrawing.java"
    },
    {
      "repo": "https://github.com/jnorthrup/1xam.git",
      "language": "Java",
      "linescount": 709,
      "location": "/src/test/java/model",
      "name": "1xam",
      "url": "https://searchcode.com/codesearch/view/105245131/",
      "md5hash": "c81ed00bdd65d377285aca91e527ef8f",
      "lines": {
        "128": "                \"\\n\" +",
        "129": "                \"        if (___subrecord___ == null) {\\n\" +",
        "132": "                \"                try {\\n\" +",
        "133": "                \"                    ___subrecord___ = (Class<? extends Enum>) Class.forName(getClass().getPackage().getName() + '.' + name() + indexPrefix);\\n\" +",
        "134": "                \"                    try {\\n\" +",
        "135": "                \"                        size = ___subrecord___.getField(\\\"___recordlen___\\\").getInt(null);\\n\" +",
        "422": "",
        "423": "    private Object[] getSubRecord(Enum enum_) {",
        "47": "                        Modifier.toString(Modifier.FINAL | Modifier.PUBLIC) + \" int ___seek___;\");",
        "48": "        INTRINSICS.put(\"___subrecord___\",",
        "52": "                        \"     */\\n\" +",
        "53": "                        \"\\tpublic Class<? extends Enum> ___subrecord___;\");",
        "406": "                    + \"Visitor#\" + name + \"(ByteBuffer, int[], IntBuffer)\" : subRecord.getCanonicalName()) + \"}</td>\" +",
        "407": "                    \"</tr>\\n\";",
        "404": "                    \"<td>{@link \"",
        "405": "                    + (subRecord == null ? theSlot.getDeclaringClass().getSimpleName()"
      },
      "id": 105245131,
      "filename": "EnumPackageAssemblyUtil.java"
    },
    {
      "repo": "https://bitbucket.org/generalplus/android_packages_apps_nfc.git",
      "language": "Java",
      "linescount": 447,
      "location": "/src/com/android/nfc",
      "name": "android_packages_apps_nfc",
      "url": "https://searchcode.com/codesearch/view/35468932/",
      "md5hash": "afe0df36f4bbdcc380033c5c9c308342",
      "lines": {
        "384": "                                        && Arrays.equals(subRecord.getType(),",
        "385": "                                                NdefRecord.RTD_URI)) {",
        "386": "                                    intent.setData(NdefRecord.parseWellKnownUriRecord(subRecord));",
        "388": "                                } else if (subTnf == NdefRecord.TNF_ABSOLUTE_URI) {",
        "389": "                                    intent.setData(Uri.parse(new String(subRecord.getType(),",
        "380": "                            NdefMessage msg = new NdefMessage(record.getPayload());",
        "381": "                            for (NdefRecord subRecord : msg.getRecords()) {",
        "382": "                                short subTnf = subRecord.getTnf();",
        "383": "                                if (subTnf == NdefRecord.TNF_WELL_KNOWN"
      },
      "id": 35468932,
      "filename": "NfcDispatcher.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 23,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 20,
      "source": "Github",
      "id": 2
    },
    {
      "count": 1,
      "source": "Google Code",
      "id": 1
    }
  ]
}