{
  "matchterm": "Configurator",
  "previouspage": null,
  "searchterm": "Configurator",
  "query": "Configurator",
  "language_filters": [
    {
      "count": 3810,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 3807,
  "results": [
    {
      "repo": "https://github.com/apcj/neo4j.git",
      "language": "Java",
      "linescount": 186,
      "location": "/community/server/src/main/java/org/neo4j/server/configuration",
      "name": "neo4j",
      "url": "https://searchcode.com/codesearch/view/71631468/",
      "md5hash": "e10356661b888072b56ce61fe5a54c0a",
      "lines": {
        "182": "    public static final Configurator EMPTY = new Configurator.Adapter()",
        "40": "",
        "41": "public interface Configurator",
        "154": "",
        "181": "",
        "150": "        {",
        "151": "            return Configurator.class.getName();",
        "121": "",
        "122": "    DiagnosticsExtractor<Configurator> DIAGNOSTICS = new DiagnosticsExtractor<Configurator>()",
        "155": "    public static abstract class Adapter implements Configurator",
        "124": "        @Override",
        "125": "        public void dumpDiagnostics( final Configurator source, DiagnosticsPhase phase, StringLogger log )"
      },
      "id": 71631468,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://bitbucket.org/c3isoft/citadelclient",
      "language": "Java",
      "linescount": 159,
      "location": "",
      "name": "citadelclient",
      "url": "https://searchcode.com/codesearch/view/56064869/",
      "md5hash": "649d84caa52fd040180ce068e4746640",
      "lines": {
        "33": "          ERROR = 1;",
        "34": "          CitadelClient.log(\"Configurator Unknown encoding of input file \"+pathFile);",
        "37": "          ERROR = 2;",
        "38": "          CitadelClient.log(\"Configurator Can't open file \"+ pathFile);",
        "9": "",
        "10": "public class Configurator {",
        "11": "\t  private static final Configurator instance = new Configurator();",
        "12": "\t  // **************************",
        "45": "\tpublic static Configurator getInstance() {",
        "44": "\t/*=============================================================================*/",
        "50": "\tpublic String getServerAddress() {",
        "51": "\t\tCitadelClient.log(\"Configurator getServerAddress() Host = \"+server);",
        "56": "\tpublic int getServerPort() {",
        "57": "\t\tCitadelClient.log(\"Configurator getServerPort() Client Port = \"+port.intValue());",
        "26": "\t/*=============================================================================*/",
        "27": "\tprivate Configurator() {"
      },
      "id": 56064869,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://bitbucket.org/Fantom_JAC/squilla-ralink",
      "language": "Java",
      "linescount": 361,
      "location": "/src/main/java/org/squilla/ralink/chip",
      "name": "squilla-ralink",
      "url": "https://searchcode.com/codesearch/view/62736024/",
      "md5hash": "5b0ba31aa6d5ceca44c25f24941d7c1d",
      "lines": {
        "34": "",
        "35": "    public Configurator(AsicInfo asicInfo, EEPROM eeprom) {",
        "41": "        PhyConfiguration wlanConfig = new PhyConfiguration();",
        "42": "        Configurator configurator = new Configurator(asicInfo, eeprom);",
        "43": "        configurator.readROMVersion();",
        "44": "        configurator.readMACAddress(wlanConfig);",
        "45": "        configurator.readVendorBBPSettings(wlanConfig);",
        "46": "        configurator.readVendorRFSettings(wlanConfig);",
        "47": "        configurator.readLEDOperatingMode(wlanConfig);",
        "48": "        configurator.readAntennaInfo(wlanConfig);",
        "49": "        configurator.readNICConfiguration(wlanConfig);",
        "50": "        configurator.readPowerSettings(wlanConfig);",
        "51": "        configurator.readPowerCompensation(wlanConfig);",
        "52": "        configurator.readRSSIOffsetsAndLNAGains(wlanConfig);",
        "53": "        return wlanConfig;"
      },
      "id": 62736024,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://github.com/hnmrlwy/dubbo.git",
      "language": "Java",
      "linescount": 43,
      "location": "/dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster",
      "name": "dubbo",
      "url": "https://searchcode.com/codesearch/view/73062763/",
      "md5hash": "86a45df826eb72cc249df331ca08ff8b",
      "lines": {
        "20": "/**",
        "21": " * Configurator. (SPI, Prototype, ThreadSafe)",
        "24": " */",
        "25": "public interface Configurator extends Comparable<Configurator> {",
        "27": "    /**",
        "28": "     * get the configurator url.",
        "29": "     * ",
        "30": "     * @return configurator url."
      },
      "id": 73062763,
      "filename": "Configurator.java"
    },
    {
      "repo": "git://github.com/Mimodek/Mimodek.git",
      "language": "Java",
      "linescount": 612,
      "location": "/Documents/Processing/libraries/MimodekV2/src/MimodekV2/config",
      "name": "Mimodek",
      "url": "https://searchcode.com/codesearch/view/17422838/",
      "md5hash": "3a927fa950b23b54ce83d52af25b5196",
      "lines": {
        "65": " * <td>Boolean</td>",
        "66": " * <td>Configurator.getBooleanSetting</td>",
        "75": " * calling respectively Configurator.saveToFile(\"fileName.xml\") and",
        "69": " * <td>String</td>",
        "70": " * <td>Configurator.getStringSetting</td>",
        "41": " * To be available the singleton must first be created by",
        "42": " * Configurator.createConfigurator(parentSketch). To set a parameter call",
        "43": " * Configurator.setSetting(\"nameOfTheParameter\",theValueOfTheParameter). The",
        "44": " * value can be an integer, a long, a float, a string or a boolean. To get a",
        "76": " * Configurator.loadFromFile(\"fileName.xml\").",
        "74": " * value it contains. The parameters can be saved/loaded to/from a XML file by",
        "53": " * <td>Integer</td>",
        "54": " * <td>Configurator.getIntegerSetting</td>",
        "57": " * <td>Long</td>",
        "58": " * <td>Configurator.getLongSetting</td>",
        "61": " * <td>Float</td>",
        "62": " * <td>Configurator.getFloatSetting</td>"
      },
      "id": 17422838,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://github.com/syxzhang/Kundera.git",
      "language": "Java",
      "linescount": 69,
      "location": "/kundera-core/src/main/java/com/impetus/kundera/configure",
      "name": "Kundera",
      "url": "https://searchcode.com/codesearch/view/72509269/",
      "md5hash": "8b07e97ccd7f1c38ada467b8a269c12d",
      "lines": {
        "48": "    public Configurator(Map properties, String... persistenceUnits)",
        "34": "    /** The logger. */",
        "35": "    private static Logger logger = LoggerFactory.getLogger(Configurator.class);",
        "25": "/**",
        "26": " * Configurator to load and configure different configuration objects.",
        "47": "     */",
        "30": " */",
        "31": "public final class Configurator"
      },
      "id": 72509269,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://github.com/bakash/Kundera.git",
      "language": "Java",
      "linescount": 68,
      "location": "/kundera-core/src/main/java/com/impetus/kundera/configure",
      "name": "Kundera",
      "url": "https://searchcode.com/codesearch/view/73974461/",
      "md5hash": "14c4ce64e348d36062b3bdbf834475ad",
      "lines": {
        "33": "    /** The logger. */",
        "34": "    private static Logger logger = LoggerFactory.getLogger(Configurator.class);",
        "46": "     */",
        "24": "/**",
        "25": " * Configurator to load and configure different configuration objects.",
        "29": " */",
        "30": "public final class Configurator",
        "47": "    public Configurator(String... persistenceUnits)"
      },
      "id": 73974461,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://github.com/ruderphilipp/community.git",
      "language": "Java",
      "linescount": 126,
      "location": "/server/src/main/java/org/neo4j/server/configuration",
      "name": "community",
      "url": "https://searchcode.com/codesearch/view/75414228/",
      "md5hash": "c49446daab5f955edb25046a37509dac",
      "lines": {
        "32": "",
        "33": "public interface Configurator",
        "121": "        {",
        "96": "        public void dumpDiagnostics( final Configurator source, DiagnosticsPhase phase, StringLogger log )",
        "122": "            return Configurator.class.getName();",
        "92": "",
        "93": "    DiagnosticsExtractor<Configurator> DIAGNOSTICS = new DiagnosticsExtractor<Configurator>()",
        "95": "        @Override"
      },
      "id": 75414228,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://bitbucket.org/androidplot/androidplot.git",
      "language": "Java",
      "linescount": 347,
      "location": "/AndroidPlot-Core/src/main/java/com/androidplot/util",
      "name": "androidplot",
      "url": "https://searchcode.com/codesearch/view/45943934/",
      "md5hash": "8f0ea50798e6dcb1e83fdf9df41d8b9c",
      "lines": {
        "65": " * Now let's pretend that setCondition takes an instance of the Condition enum as it's argument.",
        "66": " * Configurator then does the following:",
        "43": " * MyObject obj = new MyObject();",
        "44": " * Configurator.configure(obj, R.xml.myConfig);",
        "77": " * That's pretty straight forward.  But colors are expressed as ints too in Android",
        "78": " * but can be defined using hex values or even names of colors.  When Configurator",
        "47": " * Given a series of parameters stored in an XML file, Configurator iterates through each parameter, using the name",
        "80": " * Configurator will first attempt to parse the parameter as a color.  Only after this",
        "81": " * attempt fails will Configurator resort to Integer.ParseInt.  So:",
        "82": " * <p/>",
        "46": " * WHAT IT DOES:",
        "56": " * Given a Car instance car and assuming the method setCondition(String) exists within the SparkPlug class,",
        "57": " * Configurator does the following:",
        "79": " * attempts to parse a parameter for a method that it knows takes an int as it's argument,",
        "92": " * <p/>",
        "93": " * Configurator will correctly parse each of these into their corresponding real pixel value expressed as a float.",
        "94": " * <p/>"
      },
      "id": 45943934,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://bitbucket.org/ifor_powell/androidplot.git",
      "language": "Java",
      "linescount": 319,
      "location": "/AndroidPlot-Core/src/main/java/com/androidplot/util",
      "name": "androidplot",
      "url": "https://searchcode.com/codesearch/view/48615674/",
      "md5hash": "9051b96a72891a0fdc03e60bbbb419f0",
      "lines": {
        "64": " * Configurator then does the following:",
        "100": " */",
        "101": "public abstract class Configurator {",
        "77": " * attempts to parse a parameter for a method that it knows takes an int as it's argument,",
        "41": " * MyObject obj = new MyObject();",
        "42": " * Configurator.configure(obj, R.xml.myConfig);",
        "75": " * That's pretty straight forward.  But colors are expressed as ints too in Android",
        "76": " * but can be defined using hex values or even names of colors.  When Configurator",
        "45": " * Given a series of parameters stored in an XML file, Configurator iterates through each parameter, using the name",
        "78": " * Configurator will first attempt to parse the parameter as a color.  Only after this",
        "44": " * WHAT IT DOES:",
        "80": " * <p/>",
        "79": " * attempt fails will Configurator resort to Integer.ParseInt.  So:",
        "92": " * <p/>",
        "93": " * One last thing to keep in mind when using Configurator:",
        "63": " * Now let's pretend that setCondition takes an instance of the Condition enum as it's argument."
      },
      "id": 48615674,
      "filename": "Configurator.java"
    },
    {
      "repo": "http://rugl.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 172,
      "location": "/fun/Configuration/src/com/ryanm/config",
      "name": "rugl",
      "url": "https://searchcode.com/codesearch/view/12309383/",
      "md5hash": "528463197658cd4650a63e58ef820a38",
      "lines": {
        "32": "\t *         sub-configurators",
        "129": "\t */",
        "130": "\tpublic void removeConfiguratorListener( ConfiguratorListener listener );",
        "7": "/**",
        "8": " * The Configurator object provides information about variables, and",
        "156": "\t/**",
        "12": " */",
        "13": "public interface Configurator",
        "15": "\t/**",
        "16": "\t * Gets the name of this configurator. This name must not contain",
        "18": "\t * ",
        "19": "\t * @return the name of this configurator",
        "27": "\t * <li>Strings - Names of variables.</li>",
        "28": "\t * <li>Configurators - a subgroup of variables.</li>",
        "157": "\t * Gets a \"/\" separated sequence of configurator names that lead to",
        "31": "\t * @return A list of Objects defining the variables and"
      },
      "id": 12309383,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://bitbucket.org/JRS/open-jgossip",
      "language": "Java",
      "linescount": 270,
      "location": "/app/src/main/java/org/jresearch/gossip/configuration",
      "name": "open-jgossip",
      "url": "https://searchcode.com/codesearch/view/57758221/",
      "md5hash": "3458340e9c102075a5be6d02df3d9861",
      "lines": {
        "128": "\t\tif (this.props.getProperty(key) == null) {",
        "1": "/*",
        "2": " * $$Id: Configurator.java,v 1.3 2005/06/07 12:32:29 bel70 Exp $$",
        "67": "",
        "68": "\tprivate Configurator() {",
        "129": "\t\t\tthrow new ConfiguratorException(\"Parameter by key=\" + key",
        "46": "import org.jresearch.gossip.dao.drivers.DbDriver;",
        "47": "import org.jresearch.gossip.exception.ConfiguratorException;",
        "144": "\t * @throws ConfiguratorException",
        "146": "\t */",
        "147": "\tpublic boolean getBoolean(String key) throws ConfiguratorException {",
        "55": " */",
        "56": "public class Configurator implements IConst {",
        "57": "",
        "58": "\tprivate static Configurator ourInstance;",
        "143": "\t * "
      },
      "id": 57758221,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://github.com/bdecoste/JGroups.git",
      "language": "Java",
      "linescount": 1437,
      "location": "/src/org/jgroups/stack",
      "name": "JGroups",
      "url": "https://searchcode.com/codesearch/view/70039834/",
      "md5hash": "f75acbe2650bc753fb62e82f5ec44d45",
      "lines": {
        "33": " * the desired setup, which is both the layering and the configuration of each layer, is",
        "34": " * given to the configurator which creates and configures the protocol stack and returns",
        "166": "",
        "167": "        if(prot_spec == null) throw new Exception(\"Configurator.createProtocol(): prot_spec is null\");",
        "40": " */",
        "41": "public class Configurator {",
        "42": "    protected static final Log log=LogFactory.getLog(Configurator.class);",
        "43": "    private final ProtocolStack stack;",
        "45": "     ",
        "46": "    public Configurator() {      ",
        "49": "",
        "50": "    public Configurator(ProtocolStack protocolStack) {"
      },
      "id": 70039834,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://bitbucket.org/seandroid/frameworks-base.git",
      "language": "Java",
      "linescount": 225,
      "location": "/cmds/uiautomator/library/core-src/com/android/uiautomator/core",
      "name": "frameworks-base",
      "url": "https://searchcode.com/codesearch/view/130964138/",
      "md5hash": "2eda2f4342a8aa38278d5275deb79951",
      "lines": {
        "179": "     */",
        "145": "     */",
        "41": "    // reference to self",
        "42": "    private static Configurator sConfigurator;",
        "43": "",
        "44": "    private Configurator() {",
        "146": "    public Configurator setScrollAcknowledgmentTimeout(long timeout) {",
        "48": "    /**",
        "49": "     * Retrieves a singleton instance of Configurator.",
        "50": "     *",
        "51": "     * @return Configurator instance",
        "180": "    public Configurator setActionAcknowledgmentTimeout(long timeout) {",
        "21": " *",
        "22": " * To modify parameters using Configurator, first obtain an instance by calling",
        "28": " */",
        "29": "public final class Configurator {"
      },
      "id": 130964138,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://github.com/android/platform_frameworks_base.git",
      "language": "Java",
      "linescount": 228,
      "location": "/cmds/uiautomator/library/core-src/com/android/uiautomator/core",
      "name": "platform_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/140971670/",
      "md5hash": "3803d287db1b7e18fee9114bd9500615",
      "lines": {
        "32": "public final class Configurator {",
        "149": "    public Configurator setScrollAcknowledgmentTimeout(long timeout) {",
        "54": "     * @return Configurator instance",
        "44": "    // reference to self",
        "45": "    private static Configurator sConfigurator;",
        "46": "",
        "47": "    private Configurator() {",
        "51": "    /**",
        "52": "     * Retrieves a singleton instance of Configurator.",
        "21": " *",
        "22": " * To modify parameters using Configurator, first obtain an instance by calling",
        "183": "    public Configurator setActionAcknowledgmentTimeout(long timeout) {",
        "148": "     */",
        "182": "     */",
        "53": "     *",
        "31": "@Deprecated"
      },
      "id": 140971670,
      "filename": "Configurator.java"
    },
    {
      "repo": "http://jacolib.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 85,
      "location": "/jacolib-java/modules/jacolib/src/main/java/it/gashale/jacolib/main/configurator",
      "name": "jacolib",
      "url": "https://searchcode.com/codesearch/view/12788201/",
      "md5hash": "8bc620cd445395cc416a062eef18a7e6",
      "lines": {
        "64": "\t",
        "33": "\t}",
        "34": "\tprotected Configurator() {",
        "67": "\t\tif(configurator_class!=null) {",
        "68": "\t\t\ttry {",
        "69": "\t\t\t\tClass<?> c = Class.forName(configurator_class);",
        "70": "\t\t\t\tconfigurator=(Configurator)c.newInstance();",
        "65": "\tpublic static Configurator newConfigurator(String configurator_class, Environment env) throws JacolibError {",
        "66": "\t\tConfigurator configurator=null;",
        "19": "",
        "20": "package it.gashale.jacolib.main.configurator;",
        "25": "",
        "26": "public abstract class Configurator {",
        "29": "\t",
        "30": "\tprotected Configurator(Environment env) {"
      },
      "id": 12788201,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://github.com/vikrammiddha/TJava.git",
      "language": "Java",
      "linescount": 57,
      "location": "/TJava/Common/src/com/Config",
      "name": "TJava",
      "url": "https://searchcode.com/codesearch/view/75349254/",
      "md5hash": "7695e2bd23001130e1c28767ebda5759",
      "lines": {
        "16": "public class Configurator {",
        "17": "",
        "18": "\tprivate static Logger LOGGER = Logger.getLogger(Configurator.class);",
        "33": "",
        "22": "\t */",
        "23": "\tprivate Configurator() {",
        "34": "\t\t//LOGGER.info(\"Configurator:getAppConfig(): Configuring the Application credentials .........................\");",
        "15": " */"
      },
      "id": 75349254,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://bitbucket.org/blackspirit/bs-graphics.git",
      "language": "Java",
      "linescount": 153,
      "location": "/bsgraphics-demo/src/main/java/ch/blackspirit/graphics/demo",
      "name": "bs-graphics",
      "url": "https://searchcode.com/codesearch/view/39884811/",
      "md5hash": "7801aa5cc9a445ac14c38cf0abca46f8",
      "lines": {
        "147": "\tpublic static void main(String[] args) {",
        "36": " */",
        "37": "public class Configurator {",
        "150": "\t\tconfigurator.show();",
        "151": "\t}",
        "148": "\t\tConfigurator configurator = new Configurator(new ch.blackspirit.graphics.jogl.CanvasFactory());",
        "45": "\t",
        "46": "\tpublic Configurator(CanvasFactory canvasFactory) {",
        "149": "\t\tconfigurator.addWindowSize(800, 600);"
      },
      "id": 39884811,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://github.com/ECF/JGroups.git",
      "language": "Java",
      "linescount": 759,
      "location": "/bundles/org.jgroups.mchannel/src/org/jgroups/stack",
      "name": "JGroups",
      "url": "https://searchcode.com/codesearch/view/110076400/",
      "md5hash": "c6d589ba659ae06c0d7f3ccec50731b0",
      "lines": {
        "655": "                        throw new Exception(\"Configurator.ProtocolConfiguration.setContents(): '=' not found in \" + comp);",
        "165": "    public static void insertProtocol(Protocol prot, int position, String neighbor_prot, ProtocolStack stack) throws Exception {",
        "166": "        if(neighbor_prot == null) throw new Exception(\"Configurator.insertProtocol(): neighbor_prot is null\");",
        "140": "",
        "141": "        if(prot_spec == null) throw new Exception(\"Configurator.createProtocol(): prot_spec is null\");",
        "654": "                    if(index == -1) {",
        "431": "                    if(!providesDownServices(i, req_list, evt_type)) {",
        "432": "                        throw new Exception(\"Configurator.sanityCheck(): event \" +",
        "19": " * the desired setup, which is both the layering and the configuration of each layer, is",
        "20": " * given to the configurator which creates and configures the protocol stack and returns",
        "24": " * @author Bela Ban",
        "25": " * @version $Id: Configurator.java,v 1.1 2009/07/30 00:58:14 phperret Exp $",
        "26": " */",
        "27": "public class Configurator {",
        "28": "",
        "29": "     protected static final Log log=LogFactory.getLog(Configurator.class);"
      },
      "id": 110076400,
      "filename": "Configurator.java"
    },
    {
      "repo": "https://bitbucket.org/jyukopla/gwt-bootstrap.git",
      "language": "Java",
      "linescount": 144,
      "location": "/src/main/java/com/github/gwtbootstrap/client/ui/config",
      "name": "gwt-bootstrap",
      "url": "https://searchcode.com/codesearch/view/47019759/",
      "md5hash": "120a164c495f37aa347544a774467da8",
      "lines": {
        "114": " * @see DefaultConfigurator",
        "113": " * @see Resources",
        "73": " * <p>",
        "74": " * 3. Create a <code>Configurator</code> that returns your new {@link Resources}.",
        "76": " * <pre>",
        "77": " * \tpublic MyConfigurator implements Configurator {",
        "49": " * |   |   `-- bootstrap.min.js < your custom js",
        "50": " * |   |-- ExampleConfigurator.java < your custom Configurator class",
        "115": " */",
        "116": "public interface Configurator {",
        "25": " * GWT-Bootstrap uses embedded copies of bootstrap.css and bootstrap.js by default. If you need to use your own copies",
        "26": " * or include other resources, you'll need to create a custom {@link Configurator} and a custom {@link Resources}.",
        "93": " * <replace-with class=\"com.example.resources.ExampleConfigurator\">",
        "94": " *     <when-type-is class=\"com.github.gwtbootstrap.client.ui.config.Configurator\"/>",
        "95": " * </replace-with>"
      },
      "id": 47019759,
      "filename": "Configurator.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 2158,
      "source": "Github",
      "id": 2
    },
    {
      "count": 1422,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 199,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 22,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 6,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 2,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 1,
      "source": "Google Android",
      "id": 12
    }
  ]
}