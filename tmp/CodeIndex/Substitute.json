{
  "matchterm": "Substitute",
  "previouspage": null,
  "searchterm": "Substitute",
  "query": "Substitute",
  "language_filters": [
    {
      "count": 137396,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 137395,
  "results": [
    {
      "repo": "https://github.com/mkouba/rewrite.git",
      "language": "Java",
      "linescount": 137,
      "location": "/config-servlet/src/main/java/org/ocpsoft/rewrite/servlet/config",
      "name": "rewrite",
      "url": "https://searchcode.com/codesearch/view/71464826/",
      "md5hash": "f1b3d9c6ecd5765fef3f775eba7d3f0f",
      "lines": {
        "83": "      return new Substitute(location);",
        "132": "   {",
        "133": "      return \"Substitute [location=\" + location + \"]\";",
        "82": "   {",
        "46": " */",
        "47": "public class Substitute extends HttpOperation implements Parameterized",
        "80": "    */",
        "81": "   public static Substitute with(final String location)",
        "50": "",
        "51": "   private Substitute(final String location)",
        "110": "   /**",
        "57": "   /**",
        "58": "    * Substitute the current {@link Address} with the given location.",
        "111": "    * Get the underlying {@link ParameterizedPatternParser} for this {@link Substitute}."
      },
      "id": 71464826,
      "filename": "Substitute.java"
    },
    {
      "repo": "https://openerp.svn.codeplex.com/svn",
      "language": "Java",
      "linescount": 789,
      "location": "/srcAD/org.openERP.erpWindows/Product",
      "name": "openerp",
      "url": "https://searchcode.com/codesearch/view/116940711/",
      "md5hash": "5f89074937b1721afc485ff1b62cfa84",
      "lines": {
        "68": "",
        "69": "      String strView = vars.getSessionValue(tabId + \"|Substitute.view\");",
        "73": "        if (strView.equals(\"EDIT\")) {",
        "74": "          if (strSubstitute_ID.equals(\"\")) strSubstitute_ID = firstElement(vars);",
        "75": "          if (strSubstitute_ID.equals(\"\")) strView = \"RELATION\";",
        "76": "        }",
        "61": "        strPM_Product_ID = getParentID(vars, strSubstitute_ID);",
        "60": "            if (strPM_Product_ID.equals(\"\")) {",
        "80": "        printPageEdit(response, request, vars, false, strSubstitute_ID, strPM_Product_ID);",
        "81": "",
        "79": "",
        "58": "",
        "59": "      String strSubstitute_ID = vars.getGlobalVariable(\"inpsubstituteId\", windowId + \"|Substitute_ID\", \"\");",
        "28": "",
        "29": "public class Substitute extends HttpSecureAppServlet {"
      },
      "id": 116940711,
      "filename": "Substitute.java"
    },
    {
      "repo": "https://bitbucket.org/CKachur/fastr_ck",
      "language": "Java",
      "linescount": 142,
      "location": "/com.oracle.truffle.r.nodes.builtin/src/com/oracle/truffle/r/nodes/builtin/base",
      "name": "FastR_CK",
      "url": "https://searchcode.com/codesearch/view/91899430/",
      "md5hash": "bfade9fb3df6faddb6725ac864fbbdbf",
      "lines": {
        "67": "    @Specialization",
        "68": "    protected Object doSubstitute(VirtualFrame frame, RPromise expr, @SuppressWarnings(\"unused\") RMissing envMissing) {",
        "69": "        controlVisibility();",
        "70": "        return doSubstituteWithEnv(frame, expr, null);",
        "40": "",
        "41": "@RBuiltin(name = \"substitute\", kind = PRIMITIVE, parameterNames = {\"expr\", \"env\"}, nonEvalArgs = {0})",
        "42": "public abstract class Substitute extends RBuiltinNode {",
        "43": "",
        "76": "        return doSubstituteWithEnv(frame, expr, env);",
        "79": "    @Specialization",
        "80": "    protected Object doSubstitute(VirtualFrame frame, RPromise expr, RList list) {",
        "81": "        controlVisibility();",
        "75": "        controlVisibility();",
        "73": "    @Specialization",
        "74": "    protected Object doSubstitute(VirtualFrame frame, RPromise expr, REnvironment env) {",
        "62": "    @Fallback",
        "63": "    protected Object doSubstitute(Object expr, Object x) {"
      },
      "id": 91899430,
      "filename": "Substitute.java"
    },
    {
      "repo": "http://androjena.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 216,
      "location": "/arqoid/src/com/hp/hpl/jena/sparql/core",
      "name": "androjena",
      "url": "https://searchcode.com/codesearch/view/820453/",
      "md5hash": "4edb831cd76f9bf7673c499d65107cdf",
      "lines": {
        "34": "        if ( isNotNeeded(binding) ) return op ;",
        "35": "        return Transformer.transform(new OpSubstituteWorker(binding), op) ;",
        "37": "    ",
        "38": "    public static Op substitute(Op op, Var var, Node node)",
        "40": "        Binding b = new Binding1(null, var, node) ;",
        "41": "        return substitute(op, b) ;",
        "43": "    ",
        "44": "    public static BasicPattern substitute(BasicPattern bgp, Binding binding)",
        "50": "        {",
        "51": "            Triple t = substitute(triple, binding) ;",
        "56": "    ",
        "57": "    public static Triple substitute(Triple triple, Binding binding)",
        "26": "",
        "27": "public class Substitute",
        "28": "{",
        "29": "    public static Op substitute(Op op, Binding binding)"
      },
      "id": 820453,
      "filename": "Substitute.java"
    },
    {
      "repo": "https://github.com/LorenzoBettini/buckminster.git",
      "language": "Java",
      "linescount": 121,
      "location": "/org.eclipse.buckminster.ant/src/ant_tasks/org/eclipse/buckminster/ant/taskdefs",
      "name": "buckminster",
      "url": "https://searchcode.com/codesearch/view/72215273/",
      "md5hash": "1fd06375fa4a0c4cf9c8da6a53e27156",
      "lines": {
        "24": " */",
        "25": "public class Substitute extends Task {",
        "82": "\t * Sets the name of the property that will receive the substituted value.",
        "81": "\t/**"
      },
      "id": 72215273,
      "filename": "Substitute.java"
    },
    {
      "repo": "https://bitbucket.org/lazopard/fastr",
      "language": "Java",
      "linescount": 41,
      "location": "/com.oracle.truffle.r.nodes/src/com/oracle/truffle/r/nodes/builtin/base",
      "name": "FastR",
      "url": "https://searchcode.com/codesearch/view/91897260/",
      "md5hash": "8cdbb31232ebe560880fd11844a5e82e",
      "lines": {
        "32": "@RBuiltin(name = \"substitute\", kind = PRIMITIVE)",
        "33": "public abstract class Substitute extends RBuiltinNode {",
        "34": "",
        "35": "    @Specialization",
        "36": "    public String doSubstitute(String x) {",
        "31": "// TODO Implement properly"
      },
      "id": 91897260,
      "filename": "Substitute.java"
    },
    {
      "repo": "https://bitbucket.org/smitdevel/delta.git",
      "language": "Java",
      "linescount": 199,
      "location": "/common/source/java/ee/webmedia/alfresco/substitute/model",
      "name": "delta",
      "url": "https://searchcode.com/codesearch/view/50612833/",
      "md5hash": "5f21f54c840a2f8e6a06e82e70e4865a",
      "lines": {
        "32": "    public Substitute() {",
        "1": "package ee.webmedia.alfresco.substitute.model;",
        "2": "",
        "35": "    public Substitute(Substitute sub) {",
        "36": "        replacedPersonUserName = sub.replacedPersonUserName;",
        "34": "",
        "16": "",
        "17": "@AlfrescoModelType(uri = SubstituteModel.URI)",
        "18": "public class Substitute implements Serializable {",
        "19": "    private static final long serialVersionUID = 0L;",
        "20": "",
        "21": "    private String substituteName;",
        "22": "    private String substituteId;",
        "23": "    private Date substitutionStartDate;",
        "31": ""
      },
      "id": 50612833,
      "filename": "Substitute.java"
    },
    {
      "repo": "https://github.com/poidasmith/xlloop.git",
      "language": "Java",
      "linescount": 39,
      "location": "/org.boris.expr/java/src/org/boris/expr/function/excel",
      "name": "xlloop",
      "url": "https://searchcode.com/codesearch/view/105398745/",
      "md5hash": "a4c35b7c7a6cb1140de48d18b9326cf3",
      "lines": {
        "8": "public class SUBSTITUTE extends AbstractFunction",
        "7": ""
      },
      "id": 105398745,
      "filename": "SUBSTITUTE.java"
    },
    {
      "repo": "https://gitlab.com/Barrti/football-stats.git",
      "language": "Java",
      "linescount": 84,
      "location": "/src/main/java/pl/bmiedlar/stats/events",
      "name": "football-stats",
      "url": "https://searchcode.com/codesearch/view/115563688/",
      "md5hash": "aaa99e22f54e429b01ac1b21403f1003",
      "lines": {
        "13": "@Table",
        "14": "public class Substitute {"
      },
      "id": 115563688,
      "filename": "Substitute.java"
    },
    {
      "repo": "https://github.com/ejrh/Whiley.git",
      "language": "Java",
      "linescount": 440,
      "location": "/modules/wyjc/src/wyjc/runtime",
      "name": "Whiley",
      "url": "https://searchcode.com/codesearch/view/74139687/",
      "md5hash": "8d9b9f70133f353388f0859e5ad6d19b",
      "lines": {
        "308": "\t\t\tt.key = substitute((Label)t.key,nodes);",
        "292": "\t\t\tTuple t = (Tuple) type;",
        "293": "\t\t\tsubstitute(t.types,nodes);",
        "307": "\t\t\tDictionary t = (Dictionary) type;",
        "297": "\t\t\tSet t = (Set) type;",
        "298": "\t\t\tt.element = substitute((Label)t.element,nodes);",
        "302": "\t\t\tList t = (List) type;",
        "303": "\t\t\tt.element = substitute((Label)t.element,nodes);",
        "19": "// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES",
        "276": "\t",
        "277": "\tprivate static void substitute(WyType type, ArrayList<WyType> nodes) {",
        "310": "\t\t\treturn;",
        "313": "\t\t\tReference t = (Reference) type;",
        "20": "// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",
        "314": "\t\t\tt.element = substitute((Label)t.element,nodes);",
        "309": "\t\t\tt.value = substitute((Label)t.value,nodes);"
      },
      "id": 74139687,
      "filename": "WyType.java"
    },
    {
      "repo": "https://github.com/ejrh/Whiley.git",
      "language": "Java",
      "linescount": 941,
      "location": "/modules/wycs/src/wycs/syntax",
      "name": "Whiley",
      "url": "https://searchcode.com/codesearch/view/74141995/",
      "md5hash": "47559c451e995b2a3308dc4b947420e2",
      "lines": {
        "715": "\t\t",
        "716": "\t\tpublic Expr substitute(Map<String,Expr> binding) {",
        "427": "\t\t",
        "428": "\t\tpublic Expr substitute(Map<String,Expr> binding) {",
        "429": "\t\t\tExpr lhs = leftOperand.substitute(binding);",
        "430": "\t\t\tExpr rhs = rightOperand.substitute(binding);",
        "431": "\t\t\tif(lhs == leftOperand && rhs == rightOperand) {",
        "596": "\t\t\t",
        "597": "\t\tpublic Expr substitute(Map<String,Expr> binding) {\t\t\t",
        "25": "\t",
        "152": "\t\t",
        "153": "\t\tpublic Expr substitute(Map<String,Expr> binding) {",
        "26": "\tpublic abstract Expr substitute(Map<String,Expr> binding);",
        "187": "\t\t",
        "188": "\t\tpublic Expr substitute(Map<String,Expr> binding) {"
      },
      "id": 74141995,
      "filename": "Expr.java"
    },
    {
      "repo": "https://github.com/iamsteveholmes/kotlin.git",
      "language": "Java",
      "linescount": 166,
      "location": "/compiler/frontend/src/org/jetbrains/jet/lang/resolve/scopes",
      "name": "kotlin",
      "url": "https://searchcode.com/codesearch/view/74086469/",
      "md5hash": "21966e328d7f20c4634ab77fe21a89dc",
      "lines": {
        "64": "        return (D) substituted;",
        "40": "",
        "41": "    private Map<DeclarationDescriptor, DeclarationDescriptor> substitutedDescriptors = null;",
        "49": "    @Nullable",
        "50": "    private <D extends DeclarationDescriptor> D substitute(@Nullable D descriptor) {",
        "53": "",
        "54": "        if (substitutedDescriptors == null) {",
        "55": "            substitutedDescriptors = Maps.newHashMap();",
        "56": "        }",
        "57": "",
        "58": "        DeclarationDescriptor substituted = substitutedDescriptors.get(descriptor);",
        "59": "        if (substituted == null) {",
        "60": "            substituted = descriptor.substitute(substitutor);",
        "61": "            substitutedDescriptors.put(descriptor, substituted);",
        "62": "        }",
        "63": "        //noinspection unchecked"
      },
      "id": 74086469,
      "filename": "SubstitutingScope.java"
    },
    {
      "repo": "https://github.com/lalyos/kotlin.git",
      "language": "Java",
      "linescount": 166,
      "location": "/compiler/frontend/src/org/jetbrains/jet/lang/resolve/scopes",
      "name": "kotlin",
      "url": "https://searchcode.com/codesearch/view/75560403/",
      "md5hash": "1865ad8fcc367e383234c1b2d1747eff",
      "lines": {
        "64": "        //noinspection unchecked",
        "65": "        return (D) substituted;",
        "41": "",
        "42": "    private Map<DeclarationDescriptor, DeclarationDescriptor> substitutedDescriptors = null;",
        "50": "    @Nullable",
        "51": "    private <D extends DeclarationDescriptor> D substitute(@Nullable D descriptor) {",
        "54": "",
        "55": "        if (substitutedDescriptors == null) {",
        "56": "            substitutedDescriptors = Maps.newHashMap();",
        "57": "        }",
        "58": "",
        "59": "        DeclarationDescriptor substituted = substitutedDescriptors.get(descriptor);",
        "60": "        if (substituted == null) {",
        "61": "            substituted = descriptor.substitute(substitutor);",
        "62": "            substitutedDescriptors.put(descriptor, substituted);",
        "63": "        }"
      },
      "id": 75560403,
      "filename": "SubstitutingScope.java"
    },
    {
      "repo": "https://github.com/mprabhuram/impala.git",
      "language": "Java",
      "linescount": 572,
      "location": "/fe/src/main/java/com/cloudera/impala/analysis",
      "name": "impala",
      "url": "https://searchcode.com/codesearch/view/73180090/",
      "md5hash": "60099323f3b5bf1167bb565ffc55a9a2",
      "lines": {
        "257": "   * Analyze aggregation-relevant components of the select block (Group By clause,",
        "258": "   * select list, Order By clause), substitute AVG with SUM/COUNT, create the",
        "166": "   * This select block might contain inline views.",
        "167": "   * Substitute all exprs (result of the analysis) of this select block referencing any",
        "170": "   */",
        "171": "  protected void substituteInlineViewExprs(Analyzer analyzer) {",
        "302": "      groupingExprsCopy = Expr.cloneList(groupingExprs, null);",
        "303": "      substituteOrdinals(groupingExprsCopy, \"GROUP BY\");",
        "308": "      }",
        "309": "      Expr.substituteList(groupingExprsCopy, aliasSMap);",
        "185": "",
        "186": "    // Substitute select list, join clause, where clause, aggregate, order by",
        "156": "",
        "157": "    // Substitute expressions to the underlying inline view expressions",
        "158": "    substituteInlineViewExprs(analyzer);",
        "159": ""
      },
      "id": 73180090,
      "filename": "SelectStmt.java"
    },
    {
      "repo": "https://github.com/yixzhang/impala.git",
      "language": "Java",
      "linescount": 578,
      "location": "/fe/src/main/java/com/cloudera/impala/analysis",
      "name": "impala",
      "url": "https://searchcode.com/codesearch/view/73675509/",
      "md5hash": "d884335a293ed161feab1bc9b1a9a0f4",
      "lines": {
        "192": "    Expr.substituteList(resultExprs, sMap);",
        "191": "    // select",
        "166": "   * This select block might contain inline views.",
        "167": "   * Substitute all exprs (result of the analysis) of this select block referencing any",
        "264": "   * Analyze aggregation-relevant components of the select block (Group By clause,",
        "188": "    // Substitute select list, join clause, where clause, aggregate, order by",
        "265": "   * select list, Order By clause), substitute AVG with SUM/COUNT, create the",
        "172": "   */",
        "173": "  protected void substituteInlineViewExprs(Analyzer analyzer) {",
        "182": "",
        "183": "    // we might not have anything to substitute",
        "187": "",
        "156": "",
        "157": "    // Substitute expressions to the underlying inline view expressions",
        "158": "    substituteInlineViewExprs(analyzer);",
        "159": ""
      },
      "id": 73675509,
      "filename": "SelectStmt.java"
    },
    {
      "repo": "https://github.com/hanchensu/adrd.git",
      "language": "Java",
      "linescount": 673,
      "location": "/impala-fe/src/com/cloudera/impala/analysis",
      "name": "adrd",
      "url": "https://searchcode.com/codesearch/view/75861273/",
      "md5hash": "d153cc4e245c3e4eda948ea44df150d7",
      "lines": {
        "352": "      Expr.substituteList(groupingExprsCopy, aliasSMap);",
        "172": "",
        "300": "   * Analyze aggregation-relevant components of the select block (Group By clause,",
        "301": "   * select list, Order By clause), substitute AVG with SUM/COUNT, create the",
        "174": "    substituteInlineViewExprs(analyzer);",
        "173": "    // Substitute expressions to the underlying inline view expressions",
        "210": "   * This select block might contain inline views.",
        "211": "   * Substitute all exprs (result of the analysis) of this select block referencing any",
        "365": "    if (havingClause != null) {",
        "366": "      // substitute aliases in place (ordinals not allowed in having clause)",
        "214": "   */",
        "215": "  protected void substituteInlineViewExprs(Analyzer analyzer) {",
        "345": "      groupingExprsCopy = Expr.cloneList(groupingExprs, null);",
        "346": "      substituteOrdinals(groupingExprsCopy, \"GROUP BY\");",
        "175": "",
        "351": "      }"
      },
      "id": 75861273,
      "filename": "SelectStmt.java"
    },
    {
      "repo": "https://github.com/eustimenko/izpack.git",
      "language": "Java",
      "linescount": 577,
      "location": "/izpack-core/src/main/java/com/izforge/izpack/core/substitutor",
      "name": "izpack",
      "url": "https://searchcode.com/codesearch/view/76100389/",
      "md5hash": "505b03bd4eb348d0503eaa40bbb371b2",
      "lines": {
        "36": "/**",
        "37": " * Substitutes variables occurring in an input stream or a string. This implementation supports a",
        "38": " * generic variable value mapping and escapes the possible special characters occurring in the",
        "137": "    /**",
        "138": "     * Substitutes the variables found in the specified string. Escapes special characters using",
        "141": "     * @param str the string to check for variables",
        "142": "     * @return the string with substituted variables",
        "144": "     */",
        "145": "    public String substitute(String str)",
        "146": "    {",
        "147": "        return substitute(str, SubstitutionType.TYPE_PLAIN);",
        "150": "    /**",
        "151": "     * Substitutes the variables found in the specified string. Escapes special characters using",
        "155": "     * @param type the escaping type or null for plain",
        "156": "     * @return the string with substituted variables",
        "158": "     */",
        "159": "    public String substitute(String str, SubstitutionType type)"
      },
      "id": 76100389,
      "filename": "VariableSubstitutorBase.java"
    },
    {
      "repo": "https://github.com/zyro23/groovy-eclipse.git",
      "language": "Java",
      "linescount": 301,
      "location": "/jdt-patch/e37/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup",
      "name": "groovy-eclipse",
      "url": "https://searchcode.com/codesearch/view/81766900/",
      "md5hash": "0825e84c75345841f8774aaaaaba87f5",
      "lines": {
        "65": "\t\t\t\t}",
        "66": "\t\t\t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable) {",
        "67": "\t\t\t\t\t// check this variable can be substituted given copied variables",
        "37": "\t\t/* missing type bit cannot be copied as is it might come from the return type or a parameter type that",
        "38": "\t\t * is substituted by a raw type.",
        "16": " * Binding denoting a method after type parameter substitutions got performed.",
        "17": " * On parameterized type bindings, all methods got substituted, regardless whether",
        "50": "\t\t\t// at least fix up the declaringElement binding + bound substitution if non static",
        "51": "\t\t\tfinal TypeVariableBinding[] substitutedVariables = new TypeVariableBinding[length];",
        "53": "\t\t\t\tTypeVariableBinding originalVariable = originalVariables[i];",
        "54": "\t\t\t\tsubstitutedVariables[i] = new TypeVariableBinding(originalVariable.sourceName, this, originalVariable.rank, parameterizedDeclaringClass.environment);",
        "55": "\t\t\t}",
        "56": "\t\t\tthis.typeVariables = substitutedVariables;",
        "57": "",
        "58": "\t\t\t// need to substitute old var refs with new ones (double substitution: declaringClass + new type variables)"
      },
      "id": 81766900,
      "filename": "ParameterizedMethodBinding.java"
    },
    {
      "repo": "https://github.com/ejrh/Whiley.git",
      "language": "Java",
      "linescount": 467,
      "location": "/modules/wyjc/src/wyjvm/lang",
      "name": "Whiley",
      "url": "https://searchcode.com/codesearch/view/74139845/",
      "md5hash": "e1523ef01fcaaffb5a2041d887272359",
      "lines": {
        "176": "\t\t\tif(lb != null) { lb = substitute(lb,binding); }",
        "194": "\t\t\t\t\tnc.add(substitute(r,binding));",
        "193": "\t\t\t\tfor(JvmType.Reference r : c.second()) {",
        "201": "\t\t",
        "202": "\t\tthrow new RuntimeException(\"Cannot substitute against type \" + type);",
        "175": "\t\t\tJvmType.Reference ub = wc.upperBound();",
        "144": "     * then substitutes each such variable occuring in the target type with its",
        "177": "\t\t\tif(ub != null) { ub = substitute(ub,binding); }",
        "178": "\t\t\treturn new JvmType.Wildcard(lb,ub);",
        "19": "// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES",
        "20": "// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",
        "181": "\t\t\tif(at.element() instanceof JvmType.Reference) {",
        "182": "\t\t\t\treturn new JvmType.Array(substitute((JvmType.Reference) at.element(),binding));",
        "143": "     * This method accepts a binding from type variables to concrete types, and",
        "158": "     */",
        "159": "\tpublic static JvmType.Reference substitute(JvmType.Reference type, Map<String,JvmType.Reference> binding) {"
      },
      "id": 74139845,
      "filename": "JvmTypes.java"
    },
    {
      "repo": "https://github.com/eustimenko/izpack.git",
      "language": "Java",
      "linescount": 90,
      "location": "/izpack-core/src/test/java/com/izforge/izpack/core/substitutor",
      "name": "izpack",
      "url": "https://searchcode.com/codesearch/view/76099911/",
      "md5hash": "d5eeb0dc64f889e4533c09fae3d0ffac",
      "lines": {
        "64": "        assertThat(",
        "65": "                variableSubstitutor.substitute(\"${MY_PROP}${MY_PROP2}\", SubstitutionType.TYPE_PLAIN),",
        "67": "        assertThat(",
        "68": "                variableSubstitutor.substitute(\"$MY_PROP2$MY_PROP\", SubstitutionType.TYPE_PLAIN),",
        "72": "    @Test",
        "73": "    public void shouldSubstituteAntType() throws Exception",
        "52": "    @Test",
        "53": "    public void shouldNotSubstitute() throws Exception",
        "54": "    {",
        "55": "        String res = variableSubstitutor.substitute(\"string not substitute\", SubstitutionType.TYPE_PLAIN);",
        "56": "        assertThat(res, Is.is(\"string not substitute\"));",
        "57": "        res = variableSubstitutor.substitute(\"string not ${substitute}\", SubstitutionType.TYPE_PLAIN);",
        "58": "        assertThat(res, Is.is(\"string not ${substitute}\"));",
        "59": "    }",
        "61": "    @Test",
        "62": "    public void shouldSubstitutePlainText() throws Exception"
      },
      "id": 76099911,
      "filename": "VariableSubstitutorImplTest.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 79042,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 34993,
      "source": "Github",
      "id": 2
    },
    {
      "count": 19360,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 2656,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 803,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 335,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 183,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 23,
      "source": "Gitorious",
      "id": 10
    },
    {
      "count": 1,
      "source": "Google Android",
      "id": 12
    }
  ]
}