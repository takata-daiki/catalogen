{
  "matchterm": "ChunkSeparator",
  "previouspage": null,
  "searchterm": "ChunkSeparator",
  "query": "ChunkSeparator",
  "language_filters": [
    {
      "count": 24,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 24,
  "results": [
    {
      "repo": "https://bitbucket.org/brewengine/centrifuge.git",
      "language": "Java",
      "linescount": 1063,
      "location": "/OpenFeintAPI/src/com/openfeint/internal/vendor/org/apache/commons/codec/binary",
      "name": "centrifuge",
      "url": "https://searchcode.com/codesearch/view/35764454/",
      "md5hash": "f78b4f2b02b0a99d4c492e0c4dd09a25",
      "lines": {
        "963": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "964": "     *        chunkSeparator (e.g. CRLF).",
        "965": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "966": "     *",
        "983": "                len += chunkSeparator.length;",
        "982": "            if (!lenChunksPerfectly) {",
        "969": "     */",
        "970": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "980": "            boolean lenChunksPerfectly = len % chunkSize == 0;",
        "981": "            len += (len / chunkSize) * chunkSeparator.length;"
      },
      "id": 35764454,
      "filename": "Base64.java"
    },
    {
      "repo": "https://github.com/mocleiri/wicket.git",
      "language": "Java",
      "linescount": 1106,
      "location": "/wicket-util/src/main/java/org/apache/wicket/util/crypt",
      "name": "wicket",
      "url": "https://searchcode.com/codesearch/view/112853883/",
      "md5hash": "746d1cb7694d0bb9033d0a3fce4d5617",
      "lines": {
        "993": "\t * @param chunkSize",
        "994": "\t *            line-length of the output (<= 0 means no chunking) between each chunkSeparator",
        "995": "\t *            (e.g. CRLF).",
        "996": "\t * @param chunkSeparator",
        "1016": "\t\t\tboolean lenChunksPerfectly = len % chunkSize == 0;",
        "1017": "\t\t\tlen += (len / chunkSize) * chunkSeparator.length;",
        "1002": "\tprivate static long getEncodeLength(final byte[] pArray, int chunkSize,",
        "1003": "\t\tfinal byte[] chunkSeparator)",
        "1020": "\t\t\t\tlen += chunkSeparator.length;",
        "1019": "\t\t\t{"
      },
      "id": 112853883,
      "filename": "Base64.java"
    },
    {
      "repo": "https://github.com/droolsjbpm/droolsjbpm-integration.git",
      "language": "Java",
      "linescount": 1061,
      "location": "/kie-infinispan/drools-infinispan-persistence/src/main/java/org/drools/persistence/util",
      "name": "droolsjbpm-integration",
      "url": "https://searchcode.com/codesearch/view/113112902/",
      "md5hash": "5c1a5d3e38d0773b5b8d2a3fd114233d",
      "lines": {
        "961": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "962": "     *        chunkSeparator (e.g. CRLF).",
        "963": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "964": "     *",
        "981": "                len += chunkSeparator.length;",
        "967": "     */",
        "968": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "980": "            if (!lenChunksPerfectly) {",
        "978": "            boolean lenChunksPerfectly = len % chunkSize == 0;",
        "979": "            len += (len / chunkSize) * chunkSeparator.length;"
      },
      "id": 113112902,
      "filename": "Base64.java"
    },
    {
      "repo": "http://jwebsocket.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1056,
      "location": "/jWebSocket/libs/J2SE/CommonsCodec/1.4/src/org/apache/commons/codec/binary",
      "name": "jwebsocket",
      "url": "https://searchcode.com/codesearch/view/2397952/",
      "md5hash": "c7bdcfd2c3ec1b0d935f437821debd70",
      "lines": {
        "976": "                len += chunkSeparator.length;",
        "962": "     */",
        "963": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "974": "            len += (len / chunkSize) * chunkSeparator.length;",
        "973": "            boolean lenChunksPerfectly = len % chunkSize == 0;",
        "975": "            if (!lenChunksPerfectly) {",
        "956": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "957": "     *        chunkSeparator (e.g. CRLF).",
        "958": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "959": "     *"
      },
      "id": 2397952,
      "filename": "Base64.java"
    },
    {
      "repo": "https://code.google.com/p/odata4j/",
      "language": "Java",
      "linescount": 989,
      "location": "/odata4j-core/src/main/java/org/odata4j/repack/org/apache/commons/codec/binary",
      "name": "odata4j",
      "url": "https://searchcode.com/codesearch/view/2681596/",
      "md5hash": "c367ae4a4512a7579a997d5fa5f12e79",
      "lines": {
        "896": "  private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "908": "      if (!lenChunksPerfectly) {",
        "907": "      len += (len / chunkSize) * chunkSeparator.length;",
        "909": "        len += chunkSeparator.length;",
        "889": "   * @param chunkSize",
        "890": "   *            line-length of the output (<= 0 means no chunking) between each chunkSeparator (e.g. CRLF).",
        "891": "   * @param chunkSeparator",
        "892": "   *            the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "906": "      boolean lenChunksPerfectly = len % chunkSize == 0;",
        "895": "   */"
      },
      "id": 2681596,
      "filename": "Base64.java"
    },
    {
      "repo": "git://github.com/braintree/braintree_java.git",
      "language": "Java",
      "linescount": 1056,
      "location": "/src/com/braintreegateway/org/apache/commons/codec/binary",
      "name": "braintree_java",
      "url": "https://searchcode.com/codesearch/view/15345327/",
      "md5hash": "1a70ac749c7f9ebf846c9882c0380bd8",
      "lines": {
        "976": "                len += chunkSeparator.length;",
        "962": "     */",
        "963": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "974": "            len += (len / chunkSize) * chunkSeparator.length;",
        "973": "            boolean lenChunksPerfectly = len % chunkSize == 0;",
        "975": "            if (!lenChunksPerfectly) {",
        "956": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "957": "     *        chunkSeparator (e.g. CRLF).",
        "958": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "959": "     *"
      },
      "id": 15345327,
      "filename": "Base64.java"
    },
    {
      "repo": "https://github.com/cjbooms/felix.git",
      "language": "Java",
      "linescount": 1091,
      "location": "/webconsole-plugins/upnp/src/main/java/org/apache/felix/webconsole/plugins/upnp/internal",
      "name": "felix",
      "url": "https://searchcode.com/codesearch/view/96324904/",
      "md5hash": "3b6158a65284248d22eca1f5f8e706c0",
      "lines": {
        "976": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "989": "                len += chunkSeparator.length;",
        "988": "            if (!lenChunksPerfectly) {",
        "987": "            len += (len / chunkSize) * chunkSeparator.length;",
        "969": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "970": "     *        chunkSeparator (e.g. CRLF).",
        "971": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "972": "     *",
        "986": "            boolean lenChunksPerfectly = len % chunkSize == 0;",
        "975": "     */"
      },
      "id": 96324904,
      "filename": "Base64.java"
    },
    {
      "repo": "https://github.com/victorhorta/AirCastingAndroidClient.git",
      "language": "Java",
      "linescount": 1057,
      "location": "/src/main/java/pl/llp/aircasting/util/base64",
      "name": "AirCastingAndroidClient",
      "url": "https://searchcode.com/codesearch/view/100230213/",
      "md5hash": "6afb3a4ce14f1cb666b22cbb172c59eb",
      "lines": {
        "960": "     *",
        "976": "            if (!lenChunksPerfectly) {",
        "963": "     */",
        "964": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "974": "            boolean lenChunksPerfectly = len % chunkSize == 0;",
        "977": "                len += chunkSeparator.length;",
        "975": "            len += (len / chunkSize) * chunkSeparator.length;",
        "957": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "958": "     *        chunkSeparator (e.g. CRLF).",
        "959": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF)."
      },
      "id": 100230213,
      "filename": "Base64.java"
    },
    {
      "repo": "https://github.com/Innuendo80/droolsjbpm-integration.git",
      "language": "Java",
      "linescount": 1046,
      "location": "/kie-infinispan/drools-infinispan-persistence/src/main/java/org/drools/persistence/util",
      "name": "droolsjbpm-integration",
      "url": "https://searchcode.com/codesearch/view/101368408/",
      "md5hash": "47343339a5411da49fd57ac03a8cf4f2",
      "lines": {
        "946": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "947": "     *        chunkSeparator (e.g. CRLF).",
        "948": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "949": "     *",
        "966": "                len += chunkSeparator.length;",
        "952": "     */",
        "953": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "964": "            len += (len / chunkSize) * chunkSeparator.length;",
        "963": "            boolean lenChunksPerfectly = len % chunkSize == 0;",
        "965": "            if (!lenChunksPerfectly) {"
      },
      "id": 101368408,
      "filename": "Base64.java"
    },
    {
      "repo": "https://bitbucket.org/odata4jexp/odata4j",
      "language": "Java",
      "linescount": 989,
      "location": "/odata4j-core/src/main/java/org/odata4j/repack/org/apache/commons/codec/binary",
      "name": "odata4j",
      "url": "https://searchcode.com/codesearch/view/102517062/",
      "md5hash": "c367ae4a4512a7579a997d5fa5f12e79",
      "lines": {
        "896": "  private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "908": "      if (!lenChunksPerfectly) {",
        "907": "      len += (len / chunkSize) * chunkSeparator.length;",
        "909": "        len += chunkSeparator.length;",
        "889": "   * @param chunkSize",
        "890": "   *            line-length of the output (<= 0 means no chunking) between each chunkSeparator (e.g. CRLF).",
        "891": "   * @param chunkSeparator",
        "892": "   *            the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "906": "      boolean lenChunksPerfectly = len % chunkSize == 0;",
        "895": "   */"
      },
      "id": 102517062,
      "filename": "Base64.java"
    },
    {
      "repo": "https://bitbucket.org/recrack/pyload-android",
      "language": "Java",
      "linescount": 1056,
      "location": "/src/org/apache/commons/codec/binary",
      "name": "pyload-android",
      "url": "https://searchcode.com/codesearch/view/102658425/",
      "md5hash": "c7bdcfd2c3ec1b0d935f437821debd70",
      "lines": {
        "976": "                len += chunkSeparator.length;",
        "962": "     */",
        "963": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "974": "            len += (len / chunkSize) * chunkSeparator.length;",
        "973": "            boolean lenChunksPerfectly = len % chunkSize == 0;",
        "975": "            if (!lenChunksPerfectly) {",
        "956": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "957": "     *        chunkSeparator (e.g. CRLF).",
        "958": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "959": "     *"
      },
      "id": 102658425,
      "filename": "Base64.java"
    },
    {
      "repo": "https://bitbucket.org/Nippey/pyload-android",
      "language": "Java",
      "linescount": 1056,
      "location": "/src/org/apache/commons/codec/binary",
      "name": "pyload-android",
      "url": "https://searchcode.com/codesearch/view/102858294/",
      "md5hash": "c7bdcfd2c3ec1b0d935f437821debd70",
      "lines": {
        "976": "                len += chunkSeparator.length;",
        "962": "     */",
        "963": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "974": "            len += (len / chunkSize) * chunkSeparator.length;",
        "973": "            boolean lenChunksPerfectly = len % chunkSize == 0;",
        "975": "            if (!lenChunksPerfectly) {",
        "956": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "957": "     *        chunkSeparator (e.g. CRLF).",
        "958": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "959": "     *"
      },
      "id": 102858294,
      "filename": "Base64.java"
    },
    {
      "repo": "https://bitbucket.org/dshvadskiy/odata4j-sp",
      "language": "Java",
      "linescount": 989,
      "location": "/odata4j-core/src/main/java/org/odata4j/repack/org/apache/commons/codec/binary",
      "name": "odata4j-sp",
      "url": "https://searchcode.com/codesearch/view/58099982/",
      "md5hash": "c367ae4a4512a7579a997d5fa5f12e79",
      "lines": {
        "896": "  private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "908": "      if (!lenChunksPerfectly) {",
        "907": "      len += (len / chunkSize) * chunkSeparator.length;",
        "909": "        len += chunkSeparator.length;",
        "889": "   * @param chunkSize",
        "890": "   *            line-length of the output (<= 0 means no chunking) between each chunkSeparator (e.g. CRLF).",
        "891": "   * @param chunkSeparator",
        "892": "   *            the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "906": "      boolean lenChunksPerfectly = len % chunkSize == 0;",
        "895": "   */"
      },
      "id": 58099982,
      "filename": "Base64.java"
    },
    {
      "repo": "https://bitbucket.org/mibo/odata4j",
      "language": "Java",
      "linescount": 989,
      "location": "/odata4j-core/src/main/java/org/odata4j/repack/org/apache/commons/codec/binary",
      "name": "odata4j",
      "url": "https://searchcode.com/codesearch/view/62952914/",
      "md5hash": "c367ae4a4512a7579a997d5fa5f12e79",
      "lines": {
        "896": "  private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "908": "      if (!lenChunksPerfectly) {",
        "907": "      len += (len / chunkSize) * chunkSeparator.length;",
        "909": "        len += chunkSeparator.length;",
        "889": "   * @param chunkSize",
        "890": "   *            line-length of the output (<= 0 means no chunking) between each chunkSeparator (e.g. CRLF).",
        "891": "   * @param chunkSeparator",
        "892": "   *            the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "906": "      boolean lenChunksPerfectly = len % chunkSize == 0;",
        "895": "   */"
      },
      "id": 62952914,
      "filename": "Base64.java"
    },
    {
      "repo": "https://bitbucket.org/ollihh/pyload-android-ics",
      "language": "Java",
      "linescount": 1056,
      "location": "/src/org/apache/commons/codec/binary",
      "name": "pyload-android-ics",
      "url": "https://searchcode.com/codesearch/view/64569296/",
      "md5hash": "c7bdcfd2c3ec1b0d935f437821debd70",
      "lines": {
        "976": "                len += chunkSeparator.length;",
        "962": "     */",
        "963": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "974": "            len += (len / chunkSize) * chunkSeparator.length;",
        "973": "            boolean lenChunksPerfectly = len % chunkSize == 0;",
        "975": "            if (!lenChunksPerfectly) {",
        "956": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "957": "     *        chunkSeparator (e.g. CRLF).",
        "958": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "959": "     *"
      },
      "id": 64569296,
      "filename": "Base64.java"
    },
    {
      "repo": "https://github.com/mdproctor/drools.git",
      "language": "Java",
      "linescount": 1064,
      "location": "/drools-core/src/main/java/org/drools/util/codec",
      "name": "drools",
      "url": "https://searchcode.com/codesearch/view/68101737/",
      "md5hash": "171b19840e99db753a7131aa7f0c1068",
      "lines": {
        "984": "                len += chunkSeparator.length;",
        "964": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "965": "     *        chunkSeparator (e.g. CRLF).",
        "966": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "967": "     *",
        "982": "            len += (len / chunkSize) * chunkSeparator.length;",
        "970": "     */",
        "971": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "983": "            if (!lenChunksPerfectly) {",
        "981": "            boolean lenChunksPerfectly = len % chunkSize == 0;"
      },
      "id": 68101737,
      "filename": "Base64.java"
    },
    {
      "repo": "https://bitbucket.org/RolfAden/odata4j",
      "language": "Java",
      "linescount": 989,
      "location": "/odata4j-core/src/main/java/org/odata4j/repack/org/apache/commons/codec/binary",
      "name": "odata4j",
      "url": "https://searchcode.com/codesearch/view/125355475/",
      "md5hash": "c367ae4a4512a7579a997d5fa5f12e79",
      "lines": {
        "896": "  private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "908": "      if (!lenChunksPerfectly) {",
        "907": "      len += (len / chunkSize) * chunkSeparator.length;",
        "909": "        len += chunkSeparator.length;",
        "889": "   * @param chunkSize",
        "890": "   *            line-length of the output (<= 0 means no chunking) between each chunkSeparator (e.g. CRLF).",
        "891": "   * @param chunkSeparator",
        "892": "   *            the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "906": "      boolean lenChunksPerfectly = len % chunkSize == 0;",
        "895": "   */"
      },
      "id": 125355475,
      "filename": "Base64.java"
    },
    {
      "repo": "https://bitbucket.org/mcars/mcars-odata4j",
      "language": "Java",
      "linescount": 989,
      "location": "/odata4j-core/src/main/java/org/odata4j/repack/org/apache/commons/codec/binary",
      "name": "mcars-odata4j",
      "url": "https://searchcode.com/codesearch/view/125413354/",
      "md5hash": "c367ae4a4512a7579a997d5fa5f12e79",
      "lines": {
        "896": "  private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "908": "      if (!lenChunksPerfectly) {",
        "907": "      len += (len / chunkSize) * chunkSeparator.length;",
        "909": "        len += chunkSeparator.length;",
        "889": "   * @param chunkSize",
        "890": "   *            line-length of the output (<= 0 means no chunking) between each chunkSeparator (e.g. CRLF).",
        "891": "   * @param chunkSeparator",
        "892": "   *            the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "906": "      boolean lenChunksPerfectly = len % chunkSize == 0;",
        "895": "   */"
      },
      "id": 125413354,
      "filename": "Base64.java"
    },
    {
      "repo": "https://bitbucket.org/X3n0m0rph59/pyload-android",
      "language": "Java",
      "linescount": 1056,
      "location": "/src/org/apache/commons/codec/binary",
      "name": "pyload-android",
      "url": "https://searchcode.com/codesearch/view/128609200/",
      "md5hash": "c7bdcfd2c3ec1b0d935f437821debd70",
      "lines": {
        "976": "                len += chunkSeparator.length;",
        "962": "     */",
        "963": "    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "974": "            len += (len / chunkSize) * chunkSeparator.length;",
        "973": "            boolean lenChunksPerfectly = len % chunkSize == 0;",
        "975": "            if (!lenChunksPerfectly) {",
        "956": "     * @param chunkSize line-length of the output (<= 0 means no chunking) between each",
        "957": "     *        chunkSeparator (e.g. CRLF).",
        "958": "     * @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "959": "     *"
      },
      "id": 128609200,
      "filename": "Base64.java"
    },
    {
      "repo": "https://bitbucket.org/sklevenz/odata4j",
      "language": "Java",
      "linescount": 989,
      "location": "/odata4j-core/src/main/java/org/odata4j/repack/org/apache/commons/codec/binary",
      "name": "odata4j",
      "url": "https://searchcode.com/codesearch/view/130888538/",
      "md5hash": "c367ae4a4512a7579a997d5fa5f12e79",
      "lines": {
        "896": "  private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {",
        "908": "      if (!lenChunksPerfectly) {",
        "907": "      len += (len / chunkSize) * chunkSeparator.length;",
        "909": "        len += chunkSeparator.length;",
        "889": "   * @param chunkSize",
        "890": "   *            line-length of the output (<= 0 means no chunking) between each chunkSeparator (e.g. CRLF).",
        "891": "   * @param chunkSeparator",
        "892": "   *            the sequence of bytes used to separate chunks of output (e.g. CRLF).",
        "906": "      boolean lenChunksPerfectly = len % chunkSize == 0;",
        "895": "   */"
      },
      "id": 130888538,
      "filename": "Base64.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 15,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 7,
      "source": "Github",
      "id": 2
    },
    {
      "count": 2,
      "source": "Google Code",
      "id": 1
    }
  ]
}