{
  "matchterm": "TableRecord",
  "previouspage": null,
  "searchterm": "TableRecord",
  "query": "TableRecord",
  "language_filters": [
    {
      "count": 165,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 165,
  "results": [
    {
      "repo": "https://bitbucket.org/sgratzl/sqlitereader.git",
      "language": "Java",
      "linescount": 57,
      "location": "/src/main/java/at/jku/sii/sqlitereader/model/master",
      "name": "sqlitereader",
      "url": "https://searchcode.com/codesearch/view/39185498/",
      "md5hash": "dbbfa18a34afefa5865a2c8819841ea1",
      "lines": {
        "46": "\t\treturn String.format(\"TableRecord [table=%s, %s]\", this.table, this.toStringAttr());",
        "10": "",
        "11": "public class TableRecord extends MasterTableRecord {",
        "13": "",
        "14": "\tpublic TableRecord(Record c) {",
        "45": "\tpublic String toString() {"
      },
      "id": 39185498,
      "filename": "TableRecord.java"
    },
    {
      "repo": "https://bitbucket.org/glinsky/qiworkbench",
      "language": "Java",
      "linescount": 89,
      "location": "/XMLeditor/dev/src/com/bhpb/xmleditor/swing/model",
      "name": "qiworkbench",
      "url": "https://searchcode.com/codesearch/view/123689600/",
      "md5hash": "b4d09ff102264fe0e6f870602f87a2f1",
      "lines": {
        "2": "",
        "3": "public class TableRecord {"
      },
      "id": 123689600,
      "filename": "TableRecord.java"
    },
    {
      "repo": "https://github.com/mrbradparks/jOOQ.git",
      "language": "Java",
      "linescount": 104,
      "location": "/jOOQ/src/main/java/org/jooq",
      "name": "jOOQ",
      "url": "https://searchcode.com/codesearch/view/92817184/",
      "md5hash": "3aa330260615d71ee03fefa24b6d3082",
      "lines": {
        "50": " */",
        "51": "public interface TableRecord<R extends TableRecord<R>> extends Record {",
        "101": "     */",
        "102": "    <O extends UpdatableRecord<O>> O fetchParent(ForeignKey<R, O> key) throws DataAccessException;"
      },
      "id": 92817184,
      "filename": "TableRecord.java"
    },
    {
      "repo": "git://github.com/jOOQ/jOOQ.git",
      "language": "Java",
      "linescount": 78,
      "location": "/jOOQ/src/main/java/org/jooq",
      "name": "jOOQ",
      "url": "https://searchcode.com/codesearch/view/16957008/",
      "md5hash": "939b497081ef6b553738a31f8de9fbba",
      "lines": {
        "75": "     */",
        "50": " */",
        "51": "public interface TableRecord<R extends TableRecord<R>> extends Record {",
        "76": "    <O extends UpdatableRecord<O>> O fetchParent(ForeignKey<R, O> key) throws DataAccessException;"
      },
      "id": 16957008,
      "filename": "TableRecord.java"
    },
    {
      "repo": "https://github.com/belong/teiid.git",
      "language": "Java",
      "linescount": 549,
      "location": "/metadata/src/main/java/org/teiid/metadata/index",
      "name": "teiid",
      "url": "https://searchcode.com/codesearch/view/73435025/",
      "md5hash": "223a0c1a587393ff01169d4ac35958e0",
      "lines": {
        "352": "\t    \t\tif (fullName.startsWith(tableRecord.getName() + '.')) {",
        "353": "\t    \t\t\tcolumnRecordImpl.setName(new String(fullName.substring(tableRecord.getName().length() + 1)));",
        "354": "\t    \t\t}",
        "356": "\t        Collections.sort(columns);",
        "357": "\t        tableRecord.setColumns(columns);",
        "358": "\t        tableRecord.setAccessPatterns(getByParent(tableRecord.getUUID(), MetadataConstants.RECORD_TYPE.ACCESS_PATTERN, KeyRecord.class, false));",
        "359": "\t        Map<String, Column> uuidColumnMap = new HashMap<String, Column>();",
        "362": "\t\t\t}",
        "363": "\t        for (KeyRecord columnSetRecordImpl : tableRecord.getAccessPatterns()) {",
        "364": "\t\t\t\tloadColumnSetRecords(columnSetRecordImpl, uuidColumnMap);",
        "345": "\t\t",
        "346": "\t\tfor (Table tableRecord : records) {",
        "347": "\t    \tList<Column> columns = new ArrayList<Column>(getByParent(tableRecord.getUUID(), MetadataConstants.RECORD_TYPE.COLUMN, Column.class, false));",
        "348": "\t        for (Column columnRecordImpl : columns) {",
        "349": "\t    \t\tcolumnRecordImpl.setDatatype((Datatype) getByType(MetadataConstants.RECORD_TYPE.DATATYPE).get(columnRecordImpl.getDatatypeUUID()));",
        "350": "\t    \t\tcolumnRecordImpl.setParent(tableRecord);",
        "351": "\t    \t\tString fullName = columnRecordImpl.getName();"
      },
      "id": 73435025,
      "filename": "IndexMetadataStore.java"
    },
    {
      "repo": "https://github.com/belong/teiid.git",
      "language": "Java",
      "linescount": 1167,
      "location": "/engine/src/main/java/org/teiid/query/metadata",
      "name": "teiid",
      "url": "https://searchcode.com/codesearch/view/73454986/",
      "md5hash": "b85da6cbe3d2cd97b20211b333f9f62f",
      "lines": {
        "516": "    \tArgCheck.isInstanceOf(Table.class, groupID);",
        "517": "        Table tableRecordImpl = (Table)groupID;",
        "518": "        if (!tableRecordImpl.isVirtual()) {",
        "519": "             throw new QueryMetadataException(QueryPlugin.Event.TEIID30359, QueryPlugin.Util.gs(QueryPlugin.Event.TEIID30359, tableRecordImpl.getFullName(), \"Insert\")); //$NON-NLS-1$",
        "520": "        }",
        "521": "        return tableRecordImpl.isInsertPlanEnabled()?tableRecordImpl.getInsertPlan():null;",
        "525": "        ArgCheck.isInstanceOf(Table.class, groupID);",
        "526": "        Table tableRecordImpl = (Table)groupID;",
        "527": "        if (!tableRecordImpl.isVirtual()) {",
        "528": "        \tthrow new QueryMetadataException(QueryPlugin.Event.TEIID30359, QueryPlugin.Util.gs(QueryPlugin.Event.TEIID30359, tableRecordImpl.getFullName(), \"Update\")); //$NON-NLS-1$",
        "529": "        }",
        "530": "        return tableRecordImpl.isUpdatePlanEnabled()?tableRecordImpl.getUpdatePlan():null;",
        "534": "        ArgCheck.isInstanceOf(Table.class, groupID);",
        "535": "        Table tableRecordImpl = (Table)groupID;",
        "536": "        if (!tableRecordImpl.isVirtual()) {"
      },
      "id": 73454986,
      "filename": "TransformationMetadata.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 290,
      "location": "/contrib-fort/rules4jbi/netbeans/project/src/org/openesb/components/rules4jbi/netbeans/wsdl/wizard",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43303924/",
      "md5hash": "8f8c1a18663f8bb4b5334ef38cbfb4a8",
      "lines": {
        "198": "                        ",
        "139": "",
        "196": "                    if (tableRecord.getDirection().isInput()) {",
        "197": "                        builder.inputObject(clazz, tableRecord.getCardinality().intValue());",
        "195": "",
        "199": "                    } else {",
        "168": "            ",
        "169": "            for (BusinessObjectTableRecord tableRecord : tableData) {",
        "170": "                logger.fine(\"Processing table record: \" + tableRecord);",
        "171": "",
        "140": "            List<BusinessObjectTableRecord> tableData = tableModel.getTableData();",
        "175": "                 * FileObject javaSourceFile =",
        "176": "                 *         directoryManager.getJavaSourceFile(businessObjectTableRecord.getType());",
        "200": "                        builder.outputObject(clazz, tableRecord.getCardinality().intValue());",
        "18": "import org.openesb.components.rules4jbi.netbeans.wsdl.WSDLBuilder;",
        "19": "import org.openesb.components.rules4jbi.netbeans.wsdl.wizard.table.BusinessObjectTableRecord;"
      },
      "id": 43303924,
      "filename": "CreateWSDLActionHandler.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 290,
      "location": "/contrib-fort/rules4jbi/netbeans/project/src/org/openesb/components/rules4jbi/netbeans/wsdl/wizard",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49244942/",
      "md5hash": "8f8c1a18663f8bb4b5334ef38cbfb4a8",
      "lines": {
        "198": "                        ",
        "139": "",
        "196": "                    if (tableRecord.getDirection().isInput()) {",
        "197": "                        builder.inputObject(clazz, tableRecord.getCardinality().intValue());",
        "195": "",
        "199": "                    } else {",
        "168": "            ",
        "169": "            for (BusinessObjectTableRecord tableRecord : tableData) {",
        "170": "                logger.fine(\"Processing table record: \" + tableRecord);",
        "171": "",
        "140": "            List<BusinessObjectTableRecord> tableData = tableModel.getTableData();",
        "175": "                 * FileObject javaSourceFile =",
        "176": "                 *         directoryManager.getJavaSourceFile(businessObjectTableRecord.getType());",
        "200": "                        builder.outputObject(clazz, tableRecord.getCardinality().intValue());",
        "18": "import org.openesb.components.rules4jbi.netbeans.wsdl.WSDLBuilder;",
        "19": "import org.openesb.components.rules4jbi.netbeans.wsdl.wizard.table.BusinessObjectTableRecord;"
      },
      "id": 49244942,
      "filename": "CreateWSDLActionHandler.java"
    },
    {
      "repo": "https://github.com/belong/teiid.git",
      "language": "Java",
      "linescount": 239,
      "location": "/engine/src/main/java/org/teiid/query/metadata",
      "name": "teiid",
      "url": "https://searchcode.com/codesearch/view/73455039/",
      "md5hash": "11d5e698428ee4c0637b24de39345dfc",
      "lines": {
        "160": "",
        "161": "\tpublic Collection<Table> getXMLTempGroups(Table tableRecord) {",
        "162": "\t\tArrayList<Table> results = new ArrayList<Table>();",
        "163": "\t\tString namePrefix = tableRecord.getName() + TransformationMetadata.DELIMITER_STRING;",
        "164": "\t\tfor (Table table : tableRecord.getParent().getTables().values()) {",
        "165": "\t\t\tif (table.getTableType() == Type.XmlStagingTable && table.getName().startsWith(namePrefix)) {"
      },
      "id": 73455039,
      "filename": "CompositeMetadataStore.java"
    },
    {
      "repo": "https://github.com/724150880/teiid.git",
      "language": "Java",
      "linescount": 481,
      "location": "/metadata/src/main/java/org/teiid/metadata/index",
      "name": "teiid",
      "url": "https://searchcode.com/codesearch/view/92341970/",
      "md5hash": "b115108412da8e8c58a944b1859f244b",
      "lines": {
        "289": "\t\t\t}",
        "290": "\t        for (KeyRecord columnSetRecordImpl : tableRecord.getAccessPatterns()) {",
        "291": "\t\t\t\tloadColumnSetRecords(columnSetRecordImpl, uuidColumnMap);",
        "272": "\t\t",
        "273": "\t\tfor (Table tableRecord : records) {",
        "274": "\t    \tList<Column> columns = new ArrayList<Column>(getByParent(tableRecord.getUUID(), MetadataConstants.RECORD_TYPE.COLUMN, Column.class, false));",
        "275": "\t        for (Column columnRecordImpl : columns) {",
        "276": "\t    \t\tcolumnRecordImpl.setDatatype((Datatype) getByType(MetadataConstants.RECORD_TYPE.DATATYPE).get(columnRecordImpl.getDatatypeUUID()));",
        "277": "\t    \t\tcolumnRecordImpl.setParent(tableRecord);",
        "278": "\t    \t\tString fullName = columnRecordImpl.getName();",
        "279": "\t    \t\tif (fullName.startsWith(tableRecord.getName() + '.')) {",
        "280": "\t    \t\t\tcolumnRecordImpl.setName(new String(fullName.substring(tableRecord.getName().length() + 1)));",
        "281": "\t    \t\t}",
        "283": "\t        Collections.sort(columns);",
        "284": "\t        tableRecord.setColumns(columns);",
        "285": "\t        tableRecord.setAccessPatterns(getByParent(tableRecord.getUUID(), MetadataConstants.RECORD_TYPE.ACCESS_PATTERN, KeyRecord.class, false));",
        "286": "\t        Map<String, Column> uuidColumnMap = new HashMap<String, Column>();"
      },
      "id": 92341970,
      "filename": "IndexMetadataRepository.java"
    },
    {
      "repo": "https://github.com/724150880/teiid.git",
      "language": "Java",
      "linescount": 1156,
      "location": "/engine/src/main/java/org/teiid/query/metadata",
      "name": "teiid",
      "url": "https://searchcode.com/codesearch/view/92346338/",
      "md5hash": "713f94129f907f39de1cd13714eef21d",
      "lines": {
        "512": "        }",
        "513": "        return tableRecordImpl.isInsertPlanEnabled()?tableRecordImpl.getInsertPlan():null;",
        "516": "    public String getUpdatePlan(final Object groupID) throws TeiidComponentException, QueryMetadataException {",
        "517": "        Table tableRecordImpl = (Table)groupID;",
        "518": "        if (!tableRecordImpl.isVirtual()) {",
        "519": "        \tthrow new QueryMetadataException(QueryPlugin.Event.TEIID30359, QueryPlugin.Util.gs(QueryPlugin.Event.TEIID30359, tableRecordImpl.getFullName(), \"Update\")); //$NON-NLS-1$",
        "520": "        }",
        "521": "        return tableRecordImpl.isUpdatePlanEnabled()?tableRecordImpl.getUpdatePlan():null;",
        "490": "    public QueryNode getVirtualPlan(final Object groupID) throws TeiidComponentException, QueryMetadataException {",
        "491": "        Table tableRecord = (Table) groupID;",
        "492": "        if (!tableRecord.isVirtual()) {",
        "525": "        Table tableRecordImpl = (Table)groupID;",
        "526": "        if (!tableRecordImpl.isVirtual()) {",
        "527": "        \tthrow new QueryMetadataException(QueryPlugin.Event.TEIID30359, QueryPlugin.Util.gs(QueryPlugin.Event.TEIID30359, tableRecordImpl.getFullName(), \"Delete\")); //$NON-NLS-1$",
        "524": "    public String getDeletePlan(final Object groupID) throws TeiidComponentException, QueryMetadataException {"
      },
      "id": 92346338,
      "filename": "TransformationMetadata.java"
    },
    {
      "repo": "https://bitbucket.org/ignatenko/bmp",
      "language": "Java",
      "linescount": 220,
      "location": "/src/skala/erp/bmp/server/excellexporters",
      "name": "bmp",
      "url": "https://searchcode.com/codesearch/view/137412593/",
      "md5hash": "0aa470a3b4503d7f78e38d9d62b9841d",
      "lines": {
        "33": "",
        "34": "\tList<TableRecord> writeOffItems;",
        "35": "\tList<TableRecord> produceItems;",
        "36": "",
        "106": "\t\t\t\t// System.out.println(item + \" \" + bom.getQty());",
        "107": "\t\t\t\tTableRecord record = new TableRecord();",
        "173": "",
        "174": "\t\tfor (TableRecord record : writeOffItems) {",
        "48": "\t\tqtyies = new HashMap<String, Double>();",
        "49": "\t\twriteOffItems = new ArrayList<ProdTableInRangeExellExporter.TableRecord>();",
        "50": "\t\tproduceItems = new ArrayList<ProdTableInRangeExellExporter.TableRecord>();",
        "51": "\t\tSimpleDateFormat dateFormat = new SimpleDateFormat(\"dd.MM.YYYY\");",
        "212": "",
        "131": "\t\t\tif (prodItem.getItemType() != ItemType.Service.getIntValue()) {",
        "132": "\t\t\t\tTableRecord record = new TableRecord();",
        "213": "\tclass TableRecord {"
      },
      "id": 137412593,
      "filename": "ProdTableInRangeExellExporter.java"
    },
    {
      "repo": "https://bitbucket.org/Crisu83/dungeon",
      "language": "Java",
      "linescount": 1012,
      "location": "/src/com/cniska/dungeon/core",
      "name": "dungeon",
      "url": "https://searchcode.com/codesearch/view/118849693/",
      "md5hash": "ae7f36f4cf502d0ca9b24ffa14123331",
      "lines": {
        "65": "\t\thostileRecords = new HashMap<String, HostileRecord>();",
        "66": "\t\tlootTableRecords = new HashMap<String, LootTableRecord>();",
        "67": "\t\tpowerupTableRecords = new HashMap<String, PowerupTableRecord>();",
        "41": "\tprivate HashMap<String, LootTableRecord> lootTableRecords;",
        "42": "\tprivate HashMap<String, PowerupTableRecord> powerupTableRecords;",
        "43": "\tprivate HashMap<String, TilesetRecord> tilesetRecords;",
        "429": "\t\t\t\t\t\tlootRecord.oddment = Integer.parseInt(lootElement.getAttribute(\"oddment\"));",
        "430": "\t\t\t\t\t\ttableRecord.loot.add(lootRecord);",
        "925": "\tpublic class LootTableRecord",
        "433": "",
        "434": "\t\t\t\tlootTableRecords.put(tableElement.getAttribute(\"id\"), tableRecord);",
        "924": "\t */",
        "475": "",
        "476": "\t\t\t\tpowerupTableRecords.put(tableElement.getAttribute(\"id\"), tableRecord);",
        "413": "\t\t\t\tElement tableElement = (Element) tableNode;",
        "414": "\t\t\t\tLootTableRecord tableRecord = new LootTableRecord();"
      },
      "id": 118849693,
      "filename": "DataManager.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 278,
      "location": "/contrib-fort/rules4jbi/netbeans/project/src/org/openesb/components/rules4jbi/netbeans/wsdl/wizard",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43303929/",
      "md5hash": "cac096c9ce2284360709343a2c5e9075",
      "lines": {
        "96": "            final String currentType = tableRecord.getType();",
        "81": "    public void validate() throws WizardValidationException {",
        "82": "        List<BusinessObjectTableRecord> tableData = getComponent().getDataModel().getTableData();",
        "36": "import org.openesb.components.rules4jbi.netbeans.wsdl.schema.BusinessObject;",
        "37": "import org.openesb.components.rules4jbi.netbeans.wsdl.wizard.table.BusinessObjectTableRecord;",
        "102": "            ",
        "97": "            ",
        "103": "            if (tableRecord.getDirection().isInput()) {",
        "94": "",
        "95": "        for (BusinessObjectTableRecord tableRecord : tableData) {"
      },
      "id": 43303929,
      "filename": "BusinessObjectsWizardPanel.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 278,
      "location": "/contrib-fort/rules4jbi/netbeans/project/src/org/openesb/components/rules4jbi/netbeans/wsdl/wizard",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49244947/",
      "md5hash": "cac096c9ce2284360709343a2c5e9075",
      "lines": {
        "96": "            final String currentType = tableRecord.getType();",
        "81": "    public void validate() throws WizardValidationException {",
        "82": "        List<BusinessObjectTableRecord> tableData = getComponent().getDataModel().getTableData();",
        "36": "import org.openesb.components.rules4jbi.netbeans.wsdl.schema.BusinessObject;",
        "37": "import org.openesb.components.rules4jbi.netbeans.wsdl.wizard.table.BusinessObjectTableRecord;",
        "102": "            ",
        "97": "            ",
        "103": "            if (tableRecord.getDirection().isInput()) {",
        "94": "",
        "95": "        for (BusinessObjectTableRecord tableRecord : tableData) {"
      },
      "id": 49244947,
      "filename": "BusinessObjectsWizardPanel.java"
    },
    {
      "repo": "https://bitbucket.org/glinsky/qiworkbench",
      "language": "Java",
      "linescount": 300,
      "location": "/XMLeditor/dev/src/com/bhpb/xmleditor/swing",
      "name": "qiworkbench",
      "url": "https://searchcode.com/codesearch/view/123689593/",
      "md5hash": "b5e0a1a11b0f73521e208fac94a528e8",
      "lines": {
        "256": "\t\t\tline.setDispName((String)record.get(0));",
        "209": "\t\t\tVector record = (Vector)tableModel.getDataVector().get(tableIndex);",
        "210": "\t\t\tTableRecord line = getTableRecor(record);",
        "215": "\t\t  Vector record = (Vector)tableModel.getDataVector().get(tableIndex);",
        "216": "\t\t  TableRecord line = getTableRecor(record);",
        "255": "\t\tTableRecord line = new TableRecord();",
        "12": "import com.bhpb.xmleditor.swing.model.FileListModel;",
        "13": "import com.bhpb.xmleditor.swing.model.TableRecord;",
        "254": "\tprivate TableRecord getTableRecor(Vector record) {",
        "253": "\t"
      },
      "id": 123689593,
      "filename": "PluginManager.java"
    },
    {
      "repo": "git://github.com/jOOQ/jOOQ.git",
      "language": "Java",
      "linescount": 696,
      "location": "/jOOQ-test/src/org/jooq/test/_/testcases",
      "name": "jOOQ",
      "url": "https://searchcode.com/codesearch/view/58674243/",
      "md5hash": "3da3a9f9c48850919f3085251d240952",
      "lines": {
        "99": "public class VisitListenerTests<",
        "100": "    A    extends UpdatableRecord<A> & Record6<Integer, String, String, Date, Integer, ?>,",
        "101": "    AP,",
        "102": "    B    extends UpdatableRecord<B>,",
        "103": "    S    extends UpdatableRecord<S> & Record1<String>,",
        "104": "    B2S  extends UpdatableRecord<B2S> & Record3<String, Integer, Integer>,",
        "105": "    BS   extends UpdatableRecord<BS>,",
        "106": "    L    extends TableRecord<L> & Record2<String, String>,",
        "107": "    X    extends TableRecord<X>,",
        "108": "    DATE extends UpdatableRecord<DATE>,",
        "109": "    BOOL extends UpdatableRecord<BOOL>,",
        "110": "    D    extends UpdatableRecord<D>,",
        "111": "    T    extends UpdatableRecord<T>,",
        "112": "    U    extends TableRecord<U>,",
        "113": "    UU   extends UpdatableRecord<UU>,"
      },
      "id": 58674243,
      "filename": "VisitListenerTests.java"
    },
    {
      "repo": "git://github.com/jOOQ/jOOQ.git",
      "language": "Java",
      "linescount": 110,
      "location": "/jOOQ-test/src/org/jooq/test/_/testcases",
      "name": "jOOQ",
      "url": "https://searchcode.com/codesearch/view/58674244/",
      "md5hash": "e6fea567dc9ba975ab27a157abd4d004",
      "lines": {
        "64": "    B    extends UpdatableRecord<B>,",
        "65": "    S    extends UpdatableRecord<S> & Record1<String>,",
        "66": "    B2S  extends UpdatableRecord<B2S> & Record3<String, Integer, Integer>,",
        "67": "    BS   extends UpdatableRecord<BS>,",
        "68": "    L    extends TableRecord<L> & Record2<String, String>,",
        "69": "    X    extends TableRecord<X>,",
        "70": "    DATE extends UpdatableRecord<DATE>,",
        "71": "    BOOL extends UpdatableRecord<BOOL>,",
        "72": "    D    extends UpdatableRecord<D>,",
        "73": "    T    extends UpdatableRecord<T>,",
        "74": "    U    extends TableRecord<U>,",
        "75": "    UU   extends UpdatableRecord<UU>,",
        "76": "    I    extends TableRecord<I>,",
        "53": "import org.jooq.Result;",
        "54": "import org.jooq.TableRecord;",
        "55": "import org.jooq.UpdatableRecord;",
        "63": "    AP,"
      },
      "id": 58674244,
      "filename": "ValuesConstructorTests.java"
    },
    {
      "repo": "git://github.com/jOOQ/jOOQ.git",
      "language": "Java",
      "linescount": 197,
      "location": "/jOOQ-test/src/org/jooq/test/_/testcases",
      "name": "jOOQ",
      "url": "https://searchcode.com/codesearch/view/58674245/",
      "md5hash": "e8eec04283e6d0326bc0842096db8516",
      "lines": {
        "65": "public class TruncateTests<",
        "66": "    A    extends UpdatableRecord<A> & Record6<Integer, String, String, Date, Integer, ?>,",
        "67": "    AP,",
        "68": "    B    extends UpdatableRecord<B>,",
        "69": "    S    extends UpdatableRecord<S> & Record1<String>,",
        "70": "    B2S  extends UpdatableRecord<B2S> & Record3<String, Integer, Integer>,",
        "71": "    BS   extends UpdatableRecord<BS>,",
        "72": "    L    extends TableRecord<L> & Record2<String, String>,",
        "73": "    X    extends TableRecord<X>,",
        "74": "    DATE extends UpdatableRecord<DATE>,",
        "75": "    BOOL extends UpdatableRecord<BOOL>,",
        "76": "    D    extends UpdatableRecord<D>,",
        "77": "    T    extends UpdatableRecord<T>,",
        "78": "    U    extends TableRecord<U>,",
        "79": "    UU   extends UpdatableRecord<UU>,"
      },
      "id": 58674245,
      "filename": "TruncateTests.java"
    },
    {
      "repo": "git://github.com/jOOQ/jOOQ.git",
      "language": "Java",
      "linescount": 133,
      "location": "/jOOQ-test/src/org/jooq/test/_/testcases",
      "name": "jOOQ",
      "url": "https://searchcode.com/codesearch/view/58674246/",
      "md5hash": "760afd432dfd63c32a6a3f6bc70dc13c",
      "lines": {
        "64": "    B2S  extends UpdatableRecord<B2S> & Record3<String, Integer, Integer>,",
        "65": "    BS   extends UpdatableRecord<BS>,",
        "66": "    L    extends TableRecord<L> & Record2<String, String>,",
        "67": "    X    extends TableRecord<X>,",
        "68": "    DATE extends UpdatableRecord<DATE>,",
        "69": "    BOOL extends UpdatableRecord<BOOL>,",
        "70": "    D    extends UpdatableRecord<D>,",
        "71": "    T    extends UpdatableRecord<T>,",
        "72": "    U    extends TableRecord<U>,",
        "73": "    UU   extends UpdatableRecord<UU>,",
        "74": "    I    extends TableRecord<I>,",
        "51": "import org.jooq.Record6;",
        "52": "import org.jooq.TableRecord;",
        "53": "import org.jooq.UpdatableRecord;",
        "63": "    S    extends UpdatableRecord<S> & Record1<String>,"
      },
      "id": 58674246,
      "filename": "ThreadSafetyTests.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 150,
      "source": "Github",
      "id": 2
    },
    {
      "count": 15,
      "source": "Bitbucket",
      "id": 3
    }
  ]
}