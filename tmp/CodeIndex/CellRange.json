{
  "matchterm": "CellRange",
  "previouspage": null,
  "searchterm": "CellRange",
  "query": "CellRange",
  "language_filters": [
    {
      "count": 136,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 136,
  "results": [
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 1976,
      "location": "/src/main/java/com/extentech/ExtenXLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47125191/",
      "md5hash": "c31ff3ebcde5d89a80011dc68b6d7984",
      "lines": {
        "176": "\t * The source <code>CellRangeRef</code> instance must be qualified with a",
        "178": "\t * ",
        "177": "\t * single resolved worksheet.",
        "183": "\tpublic CellRange (CellRangeRef source) {",
        "141": "\t",
        "174": "\t",
        "175": "\t/** Initializes a <code>CellRange</code> from a <code>CellRangeRef</code>.",
        "144": "\t * single resolved worksheet.",
        "145": "\t * ",
        "146": "\t * @param source the <code>CellRangeRef<code> from which to initialize",
        "179": "\t * @param source the <code>CellRangeRef<code> from which to initialize",
        "142": "\t/** Initializes a <code>CellRange</code> from a <code>CellRangeRef</code>.",
        "182": "\t */",
        "151": "\t */",
        "152": "\tpublic CellRange (CellRangeRef source, boolean init, boolean create) {",
        "143": "\t * The source <code>CellRangeRef</code> instance must be qualified with a"
      },
      "id": 47125191,
      "filename": "CellRange.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 1976,
      "location": "/src/main/java/com/extentech/ExtenXLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976815/",
      "md5hash": "c31ff3ebcde5d89a80011dc68b6d7984",
      "lines": {
        "176": "\t * The source <code>CellRangeRef</code> instance must be qualified with a",
        "178": "\t * ",
        "177": "\t * single resolved worksheet.",
        "183": "\tpublic CellRange (CellRangeRef source) {",
        "141": "\t",
        "174": "\t",
        "175": "\t/** Initializes a <code>CellRange</code> from a <code>CellRangeRef</code>.",
        "144": "\t * single resolved worksheet.",
        "145": "\t * ",
        "146": "\t * @param source the <code>CellRangeRef<code> from which to initialize",
        "179": "\t * @param source the <code>CellRangeRef<code> from which to initialize",
        "142": "\t/** Initializes a <code>CellRange</code> from a <code>CellRangeRef</code>.",
        "182": "\t */",
        "151": "\t */",
        "152": "\tpublic CellRange (CellRangeRef source, boolean init, boolean create) {",
        "143": "\t * The source <code>CellRangeRef</code> instance must be qualified with a"
      },
      "id": 50976815,
      "filename": "CellRange.java"
    },
    {
      "repo": "https://bitbucket.org/ansgarkonermann/simpleodf",
      "language": "Java",
      "linescount": 478,
      "location": "/src/main/java/org/odftoolkit/simple/table",
      "name": "simpleodf",
      "url": "https://searchcode.com/codesearch/view/60371774/",
      "md5hash": "632f6de156bc5842bb8fd51aeb1a88e5",
      "lines": {
        "130": "\t/**",
        "131": "\t * construct the empty cellRange",
        "132": "\t */",
        "133": "\tCellRange() {",
        "44": "/**",
        "45": " * CellRange represent a rang of cells that are adjacent with each other",
        "46": " * <p>",
        "47": " * CellRange provides methods to get/set/modify the properties of cell range.",
        "48": " */",
        "49": "public class CellRange {",
        "302": "\t\t\t\t\t\t\t\tLogger.getLogger(CellRange.class.getName()).log(Level.SEVERE, e.getMessage(), e);",
        "301": "\t\t\t\t\t\t\t} catch (Exception e) {",
        "54": "\tprivate int mnEndColumn;",
        "55": "\tprivate String msCellRangeName;",
        "312": "\t//the returned value is all measured with \"mm\" unit",
        "313": "\tprivate List<Double> getCellRangeWidthList() {"
      },
      "id": 60371774,
      "filename": "CellRange.java"
    },
    {
      "repo": "https://github.com/lcrees/simplyhtml.git",
      "language": "Java",
      "linescount": 226,
      "location": "/src/com/lightdev/app/shtm",
      "name": "simplyhtml",
      "url": "https://searchcode.com/codesearch/view/71482903/",
      "md5hash": "bd0ff02cf01e53a55f5d5e3bbd0ca09c",
      "lines": {
        "160": "        crPanel.add(new JLabel(Util.getResourceString(\"applyCellAttrLabel\")));",
        "161": "        cellRange = new JComboBox(cellRangeSelection);",
        "162": "        crPanel.add(cellRange);",
        "163": "        // get the preferred size of the tabbed pane",
        "157": "        final String[] cellRangeSelection = new String[] { Util.getResourceString(\"thisCellRangeLabel\"),",
        "178": "     */",
        "179": "    public int getCellRange() {",
        "180": "        return cellRange.getSelectedIndex();",
        "181": "    }",
        "156": "        final JPanel crPanel = new JPanel();",
        "61": "    /** selector for cell range to apply cell attributes to */",
        "62": "    JComboBox cellRange;"
      },
      "id": 71482903,
      "filename": "TableDialog.java"
    },
    {
      "repo": "https://github.com/semantalytics/RightField.git",
      "language": "Java",
      "linescount": 135,
      "location": "/src/main/java/uk/ac/manchester/cs/owl/semspreadsheets/ui/action",
      "name": "RightField",
      "url": "https://searchcode.com/codesearch/view/72855445/",
      "md5hash": "42378f3567dc47fc586555a5ff8da4b1",
      "lines": {
        "64": "\t\t\t\t\t\t\tpasteValidations(cellRange, cellContent.validationDescriptor);",
        "65": "\t\t\t\t\t\t\tpasteTextValue(cellRange, cellContent.textValue);",
        "66": "\t\t\t\t\t\t}",
        "62": "\t\t\t\t\t\tfor (SelectedCellDataContainer cellContent : dataValues) {",
        "63": "\t\t\t\t\t\t\tRange cellRange = new Range(selectedRange.getSheet(),col+cellContent.col,row+cellContent.row,col+cellContent.col,row+cellContent.row);\t\t\t\t\t\t\t"
      },
      "id": 72855445,
      "filename": "SheetCellPasteAction.java"
    },
    {
      "repo": "https://github.com/iljsan/drools.git",
      "language": "Java",
      "linescount": 403,
      "location": "/drools-scorecards/src/main/java/org/drools/scorecards/parser/xls",
      "name": "drools",
      "url": "https://searchcode.com/codesearch/view/100221570/",
      "md5hash": "716088065c641b7e1868bd79a7aebc92",
      "lines": {
        "224": "            if (cellRange != null) {",
        "225": "                int indexOfPartialScore = indexOfColumn(cellRange, XLSKeywords.SCORECARD_CHARACTERISTIC_BIN_INITIALSCORE);",
        "290": "    private int indexOfColumn(MergedCellRange mergedCellRange, String columnHeading) {",
        "35": "    private List<DataExpectation> expectations = new ArrayList<DataExpectation>();",
        "36": "    private List<MergedCellRange> cellRangeList;",
        "289": "",
        "296": "                    return i-mergedCellRange.getFirstCol();",
        "295": "                if ( columnHeading.equalsIgnoreCase(peekValue)) {",
        "349": "        cellRangeList = null;",
        "291": "        int row = mergedCellRange.getFirstRow()-1;",
        "292": "        for ( int i=0; i<10;i++) {",
        "348": "        expectations.clear();",
        "221": "        } else if (XLSKeywords.SCORECARD_CHARACTERISTIC_BIN_ATTRIBUTE.equalsIgnoreCase(stringCellValue)) {",
        "222": "            MergedCellRange cellRange = getMergedRegionForCell(currentRowCtr + 1, currentColCtr);",
        "223": ""
      },
      "id": 100221570,
      "filename": "XLSEventDataCollector.java"
    },
    {
      "repo": "https://bitbucket.org/ansgarkonermann/simpleodf",
      "language": "Java",
      "linescount": 247,
      "location": "/src/test/java/org/odftoolkit/simple/table",
      "name": "simpleodf",
      "url": "https://searchcode.com/codesearch/view/60371706/",
      "md5hash": "e8138852595fb68d2c20f3b2f8ab838b",
      "lines": {
        "64": "\t\t// get the first two cell",
        "65": "\t\tCellRange cellRange = table1.getCellRangeByPosition(0, 0, 1, 0);",
        "66": "\t\tcellRange.merge();",
        "67": "\t\tCell cell = cellRange.getCellByPosition(0, 0);",
        "68": "\t\tsaveodt(\"MergeTwoCell\");",
        "38": "",
        "39": "public class TableCellRangeTest {",
        "75": "\t\t\t// so the cell range will be enlarged",
        "76": "\t\t\tCellRange savedCellRange = savedTable1.getCellRangeByPosition(1, 0, 2, 0);",
        "77": "\t\t\tsavedCellRange.merge();",
        "78": "\t\t\tAssert.assertTrue(savedCellRange.getColumnNumber() == 3);",
        "79": "\t\t\tCell savedCell = savedCellRange.getCellByPosition(0, 0);",
        "80": "\t\t\tNodeList paraList = savedCell.getOdfElement().getChildNodes();",
        "54": "\t\t} catch (Exception e) {",
        "55": "\t\t\tLogger.getLogger(TableCellRangeTest.class.getName()).log(Level.SEVERE, e.getMessage(), e);"
      },
      "id": 60371706,
      "filename": "TableCellRangeTest.java"
    },
    {
      "repo": "https://bitbucket.org/ansgarkonermann/simpleodf",
      "language": "Java",
      "linescount": 3279,
      "location": "/src/main/java/org/odftoolkit/simple/table",
      "name": "simpleodf",
      "url": "https://searchcode.com/codesearch/view/60371767/",
      "md5hash": "d51a889b5f5be5a2ffc79888c517ebfb",
      "lines": {
        "2464": "\t * @see #getCellRangeByPosition(int, int, int, int)",
        "2465": "\t * @see #getCellRangeByPosition(String, String)",
        "2466": "\t * @see #getCellRangeByName(String)",
        "2467": "\t * @see #getColumnByIndex(int)",
        "2500": "\t * @see #getCellRangeByPosition(int, int, int, int)",
        "2501": "\t * @see #getCellRangeByPosition(String, String)",
        "2502": "\t * @see #getCellRangeByName(String)",
        "2503": "\t * @see #getColumnByIndex(int)",
        "2529": "\t * <code>insertColumnsBefore()</code>, <code>getCellByPosition()</code>,",
        "2445": "\t * For <code>getCellByPosition()</code>,",
        "2446": "\t * <code>getCellRangeByPosition()</code>, <code>getCellRangeByName()</code>,",
        "2530": "\t * <code>getCellRangeByPosition()</code>, <code>getCellRangeByName()</code>,",
        "2499": "\t * @see #getCellByPosition(String)",
        "2486": "\t * <code>insertColumnsBefore()</code>, <code>getCellByPosition()</code>,",
        "2487": "\t * <code>getCellRangeByPosition()</code>, <code>getCellRangeByName()</code>,",
        "2463": "\t * @see #getCellByPosition(String)"
      },
      "id": 60371767,
      "filename": "Table.java"
    },
    {
      "repo": "https://bitbucket.org/sulab/thecure",
      "language": "Java",
      "linescount": 1066,
      "location": "/src/weka/gui/visualize",
      "name": "thecure",
      "url": "https://searchcode.com/codesearch/view/60405327/",
      "md5hash": "ea5f54b798611b14e5c5bf8ced20261c",
      "lines": {
        "992": "            if(cellRange-m_points[i][yattrib]+jitterVals[i][1]<0 || cellRange-m_points[i][yattrib]+jitterVals[i][1]>cellRange) {",
        "993": "              //both x and y out of range don't add jitter",
        "994": "              x=intpad+m_points[i][xattrib];",
        "995": "              y=intpad+(cellRange - m_points[i][yattrib]);",
        "773": "      lastxpos = lastypos = 0;\t  ",
        "774": "      cellRange = cellSize; cellSize = cellRange + 2*intpad;",
        "999": "              x=intpad+m_points[i][xattrib];",
        "1000": "              y=intpad+(cellRange - m_points[i][yattrib])+jitterVals[i][1];",
        "1001": "            }",
        "1002": "          else if(cellRange-m_points[i][yattrib]+jitterVals[i][1]<0 || cellRange-m_points[i][yattrib]+jitterVals[i][1]>cellRange) {",
        "1004": "            x=intpad+m_points[i][xattrib]+jitterVals[i][0];",
        "1005": "            y=intpad+(cellRange - m_points[i][yattrib]);",
        "1009": "            x=intpad+m_points[i][xattrib]+jitterVals[i][0];",
        "1010": "            y=intpad+(cellRange - m_points[i][yattrib])+jitterVals[i][1];",
        "991": "          if(m_points[i][xattrib]+jitterVals[i][0]<0 || m_points[i][xattrib]+jitterVals[i][0]>cellRange)"
      },
      "id": 60405327,
      "filename": "MatrixPanel.java"
    },
    {
      "repo": "https://github.com/pipifuyj/wekax.git",
      "language": "Java",
      "linescount": 954,
      "location": "/wekaUT/weka/gui/visualize",
      "name": "wekax",
      "url": "https://searchcode.com/codesearch/view/112653837/",
      "md5hash": "5e3172065795de6ce0052b348343ba00",
      "lines": {
        "864": "\t      x=intpad+m_points[i][xattrib];",
        "865": "\t      y=intpad+(cellRange - m_points[i][yattrib]);",
        "709": "",
        "710": "    int extpad=3, intpad=4, cellSize=100, cellRange=100, lastx=0, lasty=0, jitter=0;",
        "871": "\t    }",
        "872": "\t  else if(cellRange-m_points[i][yattrib]+jitterVals[i][1]<0 || cellRange-m_points[i][yattrib]+jitterVals[i][1]>cellRange) {",
        "874": "\t    x=intpad+m_points[i][xattrib]+jitterVals[i][0];",
        "875": "\t    y=intpad+(cellRange - m_points[i][yattrib]);",
        "879": "\t    x=intpad+m_points[i][xattrib]+jitterVals[i][0];",
        "880": "\t    y=intpad+(cellRange - m_points[i][yattrib])+jitterVals[i][1];",
        "870": "\t      y=intpad+(cellRange - m_points[i][yattrib])+jitterVals[i][1];",
        "729": "      lastxpos = lastypos = 0;\t  ",
        "730": "      cellRange = cellSize; cellSize = cellRange + 2*intpad;",
        "860": "",
        "861": "\t  if(m_points[i][xattrib]+jitterVals[i][0]<0 || m_points[i][xattrib]+jitterVals[i][0]>cellRange)",
        "862": "\t    if(cellRange-m_points[i][yattrib]+jitterVals[i][1]<0 || cellRange-m_points[i][yattrib]+jitterVals[i][1]>cellRange) {",
        "869": "\t      x=intpad+m_points[i][xattrib];"
      },
      "id": 112653837,
      "filename": "MatrixPanel.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh-new",
      "language": "Java",
      "linescount": 787,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/text/table/extended",
      "name": "elexis-base-marlovitsh-new",
      "url": "https://searchcode.com/codesearch/view/61098419/",
      "md5hash": "4332aaa4463cff426be99e9167f9d364",
      "lines": {
        "161": "\t\t\t\t\tif(tablePropertyStore.repeatHeadline()) {",
        "162": "\t\t\t\t\t\ttextTableCellRangeHeaderClone.getCloneService().cloneToPositionNoReturn(destinationPosition,null);",
        "131": "\t */",
        "132": "\tprivate void addRowsProperty(int count, ITextTableCellRange textTableCellRangeClone) throws TextException {",
        "163": "\t\t\t\t\t\tdestinationPosition = new DestinationPosition(textTable.getCell(\"A2\"));",
        "166": "\t\t\t\t\telse {",
        "167": "\t\t\t\t\t\ttextTableCellRangeClone.getCloneService().cloneToPositionNoReturn(destinationPosition,false,null);",
        "139": "\t\t\telse {",
        "140": "\t\t\t\tITextTableCellRange textTableCellRangeHeaderClone = textTableLast.getCellRange(0,0,columnCount-1,0);",
        "45": "",
        "46": "import ag.ion.bion.officelayer.internal.text.table.TextTableCellRangeName;",
        "164": "\t\t\t\t\t\ttextTableCellRangeClone.getCloneService().cloneToPositionNoReturn(destinationPosition,false,null);",
        "51": "import ag.ion.bion.officelayer.text.ITextTableCell;",
        "52": "import ag.ion.bion.officelayer.text.ITextTableCellRange;",
        "56": "",
        "57": "import ag.ion.bion.officelayer.text.table.ITextTableCellRangeName;"
      },
      "id": 61098419,
      "filename": "ETextTable.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 3142,
      "location": "/src/main/java/com/extentech/ExtenXLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47125189/",
      "md5hash": "fe67a393666e812d472cc3c733fc5812",
      "lines": {
        "1536": "                Ai ai = s.getSeriesValueAi();                ",
        "1537": "                Ptg[] p=ai.getCellRangePtgs();\t// should only be 1 ptg",
        "1282": "     * @param CellHandle legendCell - references the legend cell for this series ",
        "1283": "     * @param CellRange categoryRange - The CellRange referencing the category (should be the same for all Series)\t",
        "1284": "     * @param CelLRange seriesRange - The CellRange referencing the data points for one bar, line or wedge in the chart",
        "1285": "     * @param CellRange bubbleRange -The CellRange referencing bubble sizes for this series, or null if chart is not of type BUBBLE",
        "1286": "     * @see ChartHandle.addSeriesRange(String legendCell, String categoryRange, String seriesRange, String bubbleRange) ",
        "1288": "     */",
        "1289": "    public ChartSeriesHandle addSeriesRange(CellHandle legendCell, CellRange categoryRange, CellRange seriesRange, CellRange bubbleRange) {",
        "1293": "    /**",
        "1294": "\t * Adds a new Series to the chart via CellHandles and CellRange Objects.  ",
        "1298": "     * @param CellHandle legendCell - references the legend cell for this series ",
        "1299": "     * @param CellRange categoryRange - The CellRange referencing the category (should be the same for all Series)\t",
        "1300": "     * @param CelLRange seriesRange - The CellRange referencing the data points for one bar, line or wedge in the chart",
        "1301": "     * @param CellRange bubbleRange -The CellRange referencing bubble sizes for this series, or null if chart is not of type BUBBLE"
      },
      "id": 47125189,
      "filename": "ChartHandle.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 3142,
      "location": "/src/main/java/com/extentech/ExtenXLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976813/",
      "md5hash": "fe67a393666e812d472cc3c733fc5812",
      "lines": {
        "1536": "                Ai ai = s.getSeriesValueAi();                ",
        "1537": "                Ptg[] p=ai.getCellRangePtgs();\t// should only be 1 ptg",
        "1282": "     * @param CellHandle legendCell - references the legend cell for this series ",
        "1283": "     * @param CellRange categoryRange - The CellRange referencing the category (should be the same for all Series)\t",
        "1284": "     * @param CelLRange seriesRange - The CellRange referencing the data points for one bar, line or wedge in the chart",
        "1285": "     * @param CellRange bubbleRange -The CellRange referencing bubble sizes for this series, or null if chart is not of type BUBBLE",
        "1286": "     * @see ChartHandle.addSeriesRange(String legendCell, String categoryRange, String seriesRange, String bubbleRange) ",
        "1288": "     */",
        "1289": "    public ChartSeriesHandle addSeriesRange(CellHandle legendCell, CellRange categoryRange, CellRange seriesRange, CellRange bubbleRange) {",
        "1293": "    /**",
        "1294": "\t * Adds a new Series to the chart via CellHandles and CellRange Objects.  ",
        "1298": "     * @param CellHandle legendCell - references the legend cell for this series ",
        "1299": "     * @param CellRange categoryRange - The CellRange referencing the category (should be the same for all Series)\t",
        "1300": "     * @param CelLRange seriesRange - The CellRange referencing the data points for one bar, line or wedge in the chart",
        "1301": "     * @param CellRange bubbleRange -The CellRange referencing bubble sizes for this series, or null if chart is not of type BUBBLE"
      },
      "id": 50976813,
      "filename": "ChartHandle.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 733,
      "location": "/src/main/java/com/extentech/ExtenXLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47125171/",
      "md5hash": "2084106e0c7da784c20b742b5eb53743",
      "lines": {
        "293": "    public void updateRow(Object[] objarr, int idxcol) throws Exception{",
        "294": "        CellRange[] rngs = getCellRanges();",
        "295": "        if(rngs.length>1) {",
        "296": "        \tthrow new WorkBookException(\"NamedRange.updateRow Object array failed: too many CellRanges.\",WorkBookException.RUNTIME_ERROR);",
        "297": "        }else if(rngs.length ==0){",
        "266": "    public void deleteRow(int idxcol) throws Exception{",
        "267": "        CellRange[] rngs = getCellRanges();",
        "268": "        if(rngs.length>1) {",
        "269": "        \tthrow new WorkBookException(\"NamedRange.updateRow Object array failed: too many CellRanges.\",WorkBookException.RUNTIME_ERROR);",
        "270": "        }else if(rngs.length ==0){",
        "271": "        \tthrow new WorkBookException(\"NamedRange.updateRow Object array failed: zero CellRanges\",WorkBookException.RUNTIME_ERROR);",
        "58": "    private boolean createblanks = false;",
        "59": "    private CellRange initialRange = null;",
        "60": "    ",
        "298": "        \tthrow new WorkBookException(\"NamedRange.updateRow Object array failed: zero CellRanges\",WorkBookException.RUNTIME_ERROR);"
      },
      "id": 47125171,
      "filename": "NameHandle.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 733,
      "location": "/src/main/java/com/extentech/ExtenXLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976795/",
      "md5hash": "2084106e0c7da784c20b742b5eb53743",
      "lines": {
        "293": "    public void updateRow(Object[] objarr, int idxcol) throws Exception{",
        "294": "        CellRange[] rngs = getCellRanges();",
        "295": "        if(rngs.length>1) {",
        "296": "        \tthrow new WorkBookException(\"NamedRange.updateRow Object array failed: too many CellRanges.\",WorkBookException.RUNTIME_ERROR);",
        "297": "        }else if(rngs.length ==0){",
        "266": "    public void deleteRow(int idxcol) throws Exception{",
        "267": "        CellRange[] rngs = getCellRanges();",
        "268": "        if(rngs.length>1) {",
        "269": "        \tthrow new WorkBookException(\"NamedRange.updateRow Object array failed: too many CellRanges.\",WorkBookException.RUNTIME_ERROR);",
        "270": "        }else if(rngs.length ==0){",
        "271": "        \tthrow new WorkBookException(\"NamedRange.updateRow Object array failed: zero CellRanges\",WorkBookException.RUNTIME_ERROR);",
        "58": "    private boolean createblanks = false;",
        "59": "    private CellRange initialRange = null;",
        "60": "    ",
        "298": "        \tthrow new WorkBookException(\"NamedRange.updateRow Object array failed: zero CellRanges\",WorkBookException.RUNTIME_ERROR);"
      },
      "id": 50976795,
      "filename": "NameHandle.java"
    },
    {
      "repo": "https://bitbucket.org/marlovitsh/elexis-base-marlovitsh-new",
      "language": "Java",
      "linescount": 270,
      "location": "/ch.elexis.noatext/src/ag/ion/bion/officelayer/internal/text",
      "name": "elexis-base-marlovitsh-new",
      "url": "https://searchcode.com/codesearch/view/61098351/",
      "md5hash": "79ce75eeb41585d12fa548da2cf541b3",
      "lines": {
        "96": "    }",
        "97": "    if(!cellRange.equals(oldCellName))",
        "98": "      cellRange = cellRange + \":\" + oldCellName;",
        "99": "    this.textTableCellRange = textTable.getCellRange(cellRange);",
        "100": "    this.index = index;",
        "45": "import ag.ion.bion.officelayer.text.ITextTable;",
        "46": "import ag.ion.bion.officelayer.text.ITextTableCellRange;",
        "61": "  ",
        "254": "  \treturn textTableCellRange;",
        "253": "  public ITextTableCellRange getCellRange() {",
        "62": "  private ITextTableCellRange\ttextTableCellRange\t= null;",
        "91": "      if(TextTableCellNameHelper.getColumnIndex(cellNames[i]) == index) {",
        "92": "        if(cellRange == null)",
        "93": "          cellRange = cellNames[i];",
        "94": "        oldCellName = cellNames[i];",
        "255": "  }"
      },
      "id": 61098351,
      "filename": "TextTableColumn.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 961,
      "location": "/src/main/java/com/extentech/formats/XLS/charts",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47125060/",
      "md5hash": "2f449a69ec7e4df13c139e056f79b785",
      "lines": {
        "562": "\t       \t\t\t\t\tPtg[] ps = ((Ai)br).getCellRangePtgs();",
        "36": "import com.extentech.ExtenXLS.CellHandle;",
        "37": "import com.extentech.ExtenXLS.CellRange;",
        "712": "\t\t\t\t\t\t\t\ttry {",
        "713": "\t\t\t\t\t\t\t\t\tCellRange cells= new CellRange(ranges[idx], wbh, false, true);",
        "172": "    \t\t    int z = ch.length;",
        "173": "    \t\t    CellRange crb= new CellRange(myseries.getBubbleValueAi().toString(), parentChart.wbh, true);",
        "143": "    \t\tlegends[i] = com.extentech.formats.XLS.OOXMLAdapter.stripNonAscii(myseries.getLegendText()).toString();",
        "144": "    \t\tCellRange cr = new CellRange(myseries.getSeriesValueAi().toString(), parentChart.wbh, true);",
        "561": "\t       \t\t\t\ttry {",
        "530": "\t */",
        "531": "\tpublic Ptg[] getCellRangePtgs() {",
        "538": "       \t\t\t\ttry {",
        "539": "       \t\t\t\t\tPtg[] ps = ((Ai)br).getCellRangePtgs();\t       \t\t\t",
        "190": "    \t\t// com.extentech.formats.XLS.OOXMLAdapter.stripNonAscii(myseries.getLegend());",
        "191": "    \t\tCellRange cr = new CellRange(myseries.getSeriesValueAi().toString(), parentChart.wbh, true);"
      },
      "id": 47125060,
      "filename": "ChartSeries.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 961,
      "location": "/src/main/java/com/extentech/formats/XLS/charts",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976684/",
      "md5hash": "2f449a69ec7e4df13c139e056f79b785",
      "lines": {
        "562": "\t       \t\t\t\t\tPtg[] ps = ((Ai)br).getCellRangePtgs();",
        "36": "import com.extentech.ExtenXLS.CellHandle;",
        "37": "import com.extentech.ExtenXLS.CellRange;",
        "712": "\t\t\t\t\t\t\t\ttry {",
        "713": "\t\t\t\t\t\t\t\t\tCellRange cells= new CellRange(ranges[idx], wbh, false, true);",
        "172": "    \t\t    int z = ch.length;",
        "173": "    \t\t    CellRange crb= new CellRange(myseries.getBubbleValueAi().toString(), parentChart.wbh, true);",
        "143": "    \t\tlegends[i] = com.extentech.formats.XLS.OOXMLAdapter.stripNonAscii(myseries.getLegendText()).toString();",
        "144": "    \t\tCellRange cr = new CellRange(myseries.getSeriesValueAi().toString(), parentChart.wbh, true);",
        "561": "\t       \t\t\t\ttry {",
        "530": "\t */",
        "531": "\tpublic Ptg[] getCellRangePtgs() {",
        "538": "       \t\t\t\ttry {",
        "539": "       \t\t\t\t\tPtg[] ps = ((Ai)br).getCellRangePtgs();\t       \t\t\t",
        "190": "    \t\t// com.extentech.formats.XLS.OOXMLAdapter.stripNonAscii(myseries.getLegend());",
        "191": "    \t\tCellRange cr = new CellRange(myseries.getSeriesValueAi().toString(), parentChart.wbh, true);"
      },
      "id": 50976684,
      "filename": "ChartSeries.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 220,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47124829/",
      "md5hash": "d1c0929f7db1a34d25b5c65a2bfc70b8",
      "lines": {
        "192": "\t\t\t    CellRange cr = new CellRange(shtr, cellcoords,false);",
        "66": "",
        "67": "\t/** Un-merge a CellRange",
        "70": "\t */",
        "71": "\tpublic void removeCellRange(CellRange rng){",
        "172": "\t/** Initialize the CellRanges containing the Merged Cells.",
        "75": "",
        "76": "\t/** merge a CellRange",
        "79": "\t */",
        "80": "\tpublic void addCellRange(CellRange rng){",
        "171": "\t",
        "86": "\t *  ",
        "87": "\t * @return an array of CellRanges each containing Merged Cells.",
        "88": "\t */",
        "156": "\t    while(ita.hasNext()) {",
        "157": "\t        mcfresh.addCellRange((CellRange)ita.next());",
        "191": "\t\t\t    // TODO: testing -- this saves about 30MB in parsing the Reflexis 700+ sheet problem"
      },
      "id": 47124829,
      "filename": "Mergedcells.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 220,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976453/",
      "md5hash": "d1c0929f7db1a34d25b5c65a2bfc70b8",
      "lines": {
        "192": "\t\t\t    CellRange cr = new CellRange(shtr, cellcoords,false);",
        "66": "",
        "67": "\t/** Un-merge a CellRange",
        "70": "\t */",
        "71": "\tpublic void removeCellRange(CellRange rng){",
        "172": "\t/** Initialize the CellRanges containing the Merged Cells.",
        "75": "",
        "76": "\t/** merge a CellRange",
        "79": "\t */",
        "80": "\tpublic void addCellRange(CellRange rng){",
        "171": "\t",
        "86": "\t *  ",
        "87": "\t * @return an array of CellRanges each containing Merged Cells.",
        "88": "\t */",
        "156": "\t    while(ita.hasNext()) {",
        "157": "\t        mcfresh.addCellRange((CellRange)ita.next());",
        "191": "\t\t\t    // TODO: testing -- this saves about 30MB in parsing the Reflexis 700+ sheet problem"
      },
      "id": 50976453,
      "filename": "Mergedcells.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 122,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 12,
      "source": "Github",
      "id": 2
    },
    {
      "count": 1,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 1,
      "source": "Google Code",
      "id": 1
    }
  ]
}