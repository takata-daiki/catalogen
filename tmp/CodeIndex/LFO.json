{
  "matchterm": "LFO",
  "previouspage": null,
  "searchterm": "LFO",
  "query": "LFO",
  "language_filters": [
    {
      "count": 137,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 137,
  "results": [
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 43,
      "location": "/src/org/apache/poi/hwpf/model",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97384000/",
      "md5hash": "489ff9ef21347586a93773ed3bc5bf48",
      "lines": {
        "32": "public class LFO extends LFOAbstractType",
        "33": "{",
        "34": "    public LFO()",
        "37": "",
        "38": "    public LFO( byte[] std, int offset )",
        "20": "",
        "21": "import org.apache.poi.hwpf.model.types.LFOAbstractType;",
        "23": "/**",
        "24": " * \"The LFO structure specifies the LSTF element that corresponds to a list that",
        "25": " * contains a paragraph. An LFO can also specify formatting information that",
        "26": " * overrides the LSTF element to which it corresponds.\" -- [MS-DOC] -- v20110315",
        "31": "@Internal"
      },
      "id": 97384000,
      "filename": "LFO.java"
    },
    {
      "repo": "https://bitbucket.org/xiaoqiangnk/openjdk-mips",
      "language": "Java",
      "linescount": 3934,
      "location": "/hotspot/agent/src/share/classes/sun/jvm/hotspot/debugger/win32/coff",
      "name": "openjdk-mips",
      "url": "https://searchcode.com/codesearch/view/118233563/",
      "md5hash": "36fc199701300648b7d859d021b80378",
      "lines": {
        "896": "            case SST_ALIGN_SYM:",
        "897": "              return new DebugVC50SSAlignSymImpl(ssType, iMod, cb, lfo);",
        "898": "            case SST_SRC_LN_SEG:",
        "899": "              return new DebugVC50SSSrcLnSegImpl(ssType, iMod, cb, lfo);",
        "900": "            case SST_SRC_MODULE:",
        "901": "              return new DebugVC50SSSrcModuleImpl(ssType, iMod, cb, lfo);",
        "902": "            case SST_LIBRARIES:",
        "903": "              return new DebugVC50SSLibrariesImpl(ssType, iMod, cb, lfo);",
        "904": "            case SST_GLOBAL_SYM:",
        "905": "              return new DebugVC50SSGlobalSymImpl(ssType, iMod, cb, lfo);",
        "906": "            case SST_GLOBAL_PUB:",
        "907": "              return new DebugVC50SSGlobalPubImpl(ssType, iMod, cb, lfo);",
        "908": "            case SST_GLOBAL_TYPES:",
        "909": "              return new DebugVC50SSGlobalTypesImpl(ssType, iMod, cb, lfo);",
        "910": "            case SST_MPC:"
      },
      "id": 118233563,
      "filename": "COFFFileParser.java"
    },
    {
      "repo": "https://bitbucket.org/hegr/gaia-tool",
      "language": "Java",
      "linescount": 141,
      "location": "/src/main/java/nl/grauw/gaia_tool/views",
      "name": "gaia-tool",
      "url": "https://searchcode.com/codesearch/view/119663541/",
      "md5hash": "2e5a3e967a46fe7dd6f9e8bcbb297a66",
      "lines": {
        "99": "\t\ttext.append(String.format(\"Amp pan: %s\\n\", t.getAmpPan()));",
        "100": "\t\ttext.append(String.format(\"LFO shape: %s\\n\", t.getLFOShape()));",
        "101": "\t\ttext.append(String.format(\"LFO rate: %s\\n\", t.getLFORate()));",
        "102": "\t\ttext.append(String.format(\"LFO tempo sync switch: %s\\n\", t.getLFOTempoSyncSwitch()));",
        "103": "\t\ttext.append(String.format(\"LFO tempo sync note: %s\\n\", t.getLFOTempoSyncNote()));",
        "104": "\t\ttext.append(String.format(\"LFO fade time: %s\\n\", t.getLFOFadeTime()));",
        "105": "\t\ttext.append(String.format(\"LFO key trigger: %s\\n\", t.getLFOKeyTrigger()));",
        "106": "\t\ttext.append(String.format(\"LFO pitch depth: %s\\n\", t.getLFOPitchDepth()));",
        "107": "\t\ttext.append(String.format(\"LFO filter depth: %s\\n\", t.getLFOFilterDepth()));",
        "108": "\t\ttext.append(String.format(\"LFO amp depth: %s\\n\", t.getLFOAmpDepth()));",
        "109": "\t\ttext.append(String.format(\"LFO pan depth: %s\\n\", t.getLFOPanDepth()));",
        "110": "\t\ttext.append(String.format(\"Modulation LFO shape: %s\\n\", t.getModulationLFOShape()));",
        "111": "\t\ttext.append(String.format(\"Modulation LFO rate: %s\\n\", t.getModulationLFORate()));",
        "112": "\t\ttext.append(String.format(\"Modulation LFO tempo sync switch: %s\\n\", t.getModulationLFOTempoSyncSwitch()));",
        "113": "\t\ttext.append(String.format(\"Modulation LFO tempo sync note: %s\\n\", t.getModulationLFOTempoSyncNote()));"
      },
      "id": 119663541,
      "filename": "ToneView.java"
    },
    {
      "repo": "https://bitbucket.org/grauw/gaia-tool",
      "language": "Java",
      "linescount": 114,
      "location": "/src/main/java/nl/grauw/gaia/tool/views",
      "name": "gaia-tool",
      "url": "https://searchcode.com/codesearch/view/119885446/",
      "md5hash": "6870d656c07da67f442c7c440cfbec29",
      "lines": {
        "72": "\t\ttext.append(String.format(\"Amp pan: %s\\n\", t.getAmpPan()));",
        "73": "\t\ttext.append(String.format(\"LFO shape: %s\\n\", t.getLFOShape()));",
        "74": "\t\ttext.append(String.format(\"LFO rate: %s\\n\", t.getLFORate()));",
        "75": "\t\ttext.append(String.format(\"LFO tempo sync switch: %s\\n\", t.getLFOTempoSyncSwitch()));",
        "76": "\t\ttext.append(String.format(\"LFO tempo sync note: %s\\n\", t.getLFOTempoSyncNote()));",
        "77": "\t\ttext.append(String.format(\"LFO fade time: %s\\n\", t.getLFOFadeTime()));",
        "78": "\t\ttext.append(String.format(\"LFO key trigger: %s\\n\", t.getLFOKeyTrigger()));",
        "79": "\t\ttext.append(String.format(\"LFO pitch depth: %s\\n\", t.getLFOPitchDepth()));",
        "80": "\t\ttext.append(String.format(\"LFO filter depth: %s\\n\", t.getLFOFilterDepth()));",
        "81": "\t\ttext.append(String.format(\"LFO amp depth: %s\\n\", t.getLFOAmpDepth()));",
        "82": "\t\ttext.append(String.format(\"LFO pan depth: %s\\n\", t.getLFOPanDepth()));",
        "83": "\t\ttext.append(String.format(\"Modulation LFO shape: %s\\n\", t.getModulationLFOShape()));",
        "84": "\t\ttext.append(String.format(\"Modulation LFO rate: %s\\n\", t.getModulationLFORate()));",
        "85": "\t\ttext.append(String.format(\"Modulation LFO tempo sync switch: %s\\n\", t.getModulationLFOTempoSyncSwitch()));",
        "86": "\t\ttext.append(String.format(\"Modulation LFO tempo sync note: %s\\n\", t.getModulationLFOTempoSyncNote()));"
      },
      "id": 119885446,
      "filename": "ToneView.java"
    },
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 222,
      "location": "/src/org/apache/poi/hwpf/model",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97384147/",
      "md5hash": "b5d9339ca4853e5e226395f421624c70",
      "lines": {
        "32": " * The PlfLfo structure contains the list format override data for the document.",
        "38": " */",
        "39": "public class PlfLfo",
        "40": "{",
        "41": "    private static POILogger log = POILogFactory.getLogger( PlfLfo.class );",
        "44": "     * An unsigned integer that specifies the count of elements in both the",
        "45": "     * rgLfo and rgLfoData arrays.",
        "46": "     */",
        "47": "    private int _lfoMac;",
        "48": "",
        "49": "    private LFO[] _rgLfo;",
        "50": "",
        "51": "    private LFOData[] _rgLfoData;",
        "53": "    ",
        "54": "    PlfLfo( byte[] tableStream, int fcPlfLfo, int lcbPlfLfo )",
        "31": "/**"
      },
      "id": 97384147,
      "filename": "PlfLfo.java"
    },
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 216,
      "location": "/src/org/apache/poi/hwpf/model",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97384153/",
      "md5hash": "f04e9799c9a8555d3618ad5c62633ad4",
      "lines": {
        "128": "    public LFOData getLfoData( int ilfo ) throws NoSuchElementException",
        "129": "    {",
        "130": "        return _plfLfo.getLfoData( ilfo );",
        "163": "                + ( ( _plfLfo == null ) ? 0 : _plfLfo.hashCode() );",
        "135": "    {",
        "136": "        return _plfLfo.getIlfoByLsid( lsid );",
        "42": "    private final LinkedHashMap<Integer, ListData> _listMap = new LinkedHashMap<Integer, ListData>();",
        "43": "    private PlfLfo _plfLfo;",
        "162": "        result = prime * result",
        "50": "    public ListTables( byte[] tableStream, final int lstOffset,",
        "51": "            final int fcPlfLfo, final int lcbPlfLfo )",
        "183": "            return false;",
        "184": "        if ( _plfLfo == null )",
        "185": "        {",
        "127": ""
      },
      "id": 97384153,
      "filename": "ListTables.java"
    },
    {
      "repo": "https://github.com/mixblendr/mixblendr.git",
      "language": "Java",
      "linescount": 823,
      "location": "/src/com/mixblendr/effects",
      "name": "mixblendr",
      "url": "https://searchcode.com/codesearch/view/104495779/",
      "md5hash": "274e4101606abbc4679b93bf8cddad67",
      "lines": {
        "128": "\t\t}",
        "129": "\t\tif (DEBUG_FLANGER) debug(\"lfoInc = \" + lfoInc);",
        "229": "\t\t\tdouble targetReadPos = writePos - delayTimeSamples",
        "230": "\t\t\t\t\t+ getDelayOffsetSamples(lfoCurr);",
        "192": "\t}",
        "50": "\tprivate double delayBufferWritePos;",
        "51": "\tprivate double lfoInc;",
        "52": "\tprivate double lfoCurr;",
        "53": "",
        "184": "\t/**",
        "185": "\t * given the current lfo value, return the current delay time offset",
        "186": "\t * ",
        "187": "\t * @param lfo the current lfo value [-1...0...+1]",
        "189": "\t */",
        "190": "\tprivate final double getDelayOffsetSamples(double lfo) {",
        "191": "\t\treturn lfo * amplitude * amplitude * (delayTimeSamples / 2);"
      },
      "id": 104495779,
      "filename": "Flanger.java"
    },
    {
      "repo": "https://bitbucket.org/xiaoqiangnk/openjdk-mips",
      "language": "Java",
      "linescount": 919,
      "location": "/jdk/src/share/classes/com/sun/media/sound",
      "name": "openjdk-mips",
      "url": "https://searchcode.com/codesearch/view/118246954/",
      "md5hash": "5c86b43f982d30f84b09293e28c815ef",
      "lines": {
        "64": "    private SoftProcess eg = new SoftEnvelopeGenerator();",
        "65": "    private SoftProcess lfo = new SoftLowFrequencyOscillator();",
        "434": "        lfo.init(synthesizer);",
        "342": "        eg.reset();",
        "343": "        lfo.reset();",
        "656": "            lfo.processControlLogic();",
        "655": "            eg.processControlLogic();",
        "348": "        objects.put(\"eg\", eg);",
        "349": "        objects.put(\"lfo\", lfo);",
        "433": "        eg.init(synthesizer);"
      },
      "id": 118246954,
      "filename": "SoftVoice.java"
    },
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 291,
      "location": "/src/org/apache/poi/hwpf/model/types",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97384245/",
      "md5hash": "a3fadc46038e7b7c16d48887b8abe6af",
      "lines": {
        "160": "        builder.append(\"[/LFO]\");",
        "131": "        result = prime * result + field_3_unused2;",
        "132": "        result = prime * result + field_4_clfolvl;",
        "165": "     * A signed integer that specifies the list identifier of an LSTF. This LFO corresponds to the LSTF in PlfLst.rgLstf that has an lsid whose value is equal to this value..",
        "38": "@Internal",
        "39": "public abstract class LFOAbstractType",
        "151": "        builder.append( \"    .clfolvl              = \" );",
        "164": "    /**",
        "143": "",
        "144": "        builder.append(\"[LFO]\\n\");",
        "152": "        builder.append(\" ( \").append( field_4_clfolvl ).append( \" )\\n\" );",
        "150": "        builder.append(\" ( \").append( field_3_unused2 ).append( \" )\\n\" );",
        "23": "/**",
        "24": " * List Format Override (LFO). <p>Class and fields descriptions are quoted from",
        "153": "        builder.append( \"    .ibstFltAutoNum       = \" );",
        "159": ""
      },
      "id": 97384245,
      "filename": "LFOAbstractType.java"
    },
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 660,
      "location": "/src/org/apache/poi/hwpf/usermodel",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97384407/",
      "md5hash": "d9e337622aaacee6d2790b7572b0af11",
      "lines": {
        "603": "        HWPFList hwpfList = new HWPFList( getDocument().getStyleSheet(),",
        "539": "  {",
        "534": "   * Returns the ilfo, an index to the document's hpllfo, which",
        "604": "                getDocument().getListTables(), getIlfo() );",
        "599": "        if ( getIlfo() == 0x000 || getIlfo() == 0xF801 )",
        "598": "    {",
        "142": "",
        "143": "        if ( properties.getIlfo() > 0 )",
        "48": "  public final static short SPRM_ILFO = 0x460B;",
        "533": "  /**",
        "22": "import org.apache.poi.hwpf.HWPFDocumentCore;",
        "23": "import org.apache.poi.hwpf.model.LFO;",
        "537": "   */",
        "538": "  public int getIlfo()",
        "47": "  public final static short SPRM_ILVL = 0x260A;",
        "540": "     return _props.getIlfo();"
      },
      "id": 97384407,
      "filename": "Paragraph.java"
    },
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 764,
      "location": "/src/org/apache/poi/hwpf/dev",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97384386/",
      "md5hash": "a5fd3aeec9338ae1535ca742a1539e0e",
      "lines": {
        "717": "    {",
        "43": "import org.apache.poi.hwpf.model.GenericPropertyNode;",
        "44": "import org.apache.poi.hwpf.model.LFO;",
        "45": "import org.apache.poi.hwpf.model.LFOData;",
        "718": "        if ( paragraph.getIlfo() != 0 )",
        "719": "        {",
        "720": "            final LFO lfo = listTables.getLfo( paragraph.getIlfo() );",
        "721": "            System.out.println( \"PAP's LFO: \" + lfo );",
        "722": "",
        "723": "            final LFOData lfoData = listTables.getLfoData( paragraph.getIlfo() );",
        "724": "            System.out.println( \"PAP's LFOData: \" + lfoData );",
        "46": "import org.apache.poi.hwpf.model.ListLevel;",
        "726": "            if ( lfo != null )",
        "727": "            {",
        "725": ""
      },
      "id": 97384386,
      "filename": "HWPFLister.java"
    },
    {
      "repo": "git://github.com/JorenSix/TarsosDSP.git",
      "language": "Java",
      "linescount": 213,
      "location": "/src/core/be/tarsos/dsp/effects",
      "name": "TarsosDSP",
      "url": "https://searchcode.com/codesearch/view/101739557/",
      "md5hash": "51bc2b2a472a8968897ffabb747c8e36",
      "lines": {
        "131": "",
        "132": "\t\t\t// Calculate the LFO delay value with a sine wave:",
        "133": "\t\t\t//fix by hans bickel",
        "134": "\t\t\tdouble lfoValue = (flangerBuffer.length - 1) * Math.sin(twoPIf * time);",
        "138": "\t\t\t// Make the delay a positive integer",
        "139": "\t\t\tint delay = (int) (Math.round(Math.abs(lfoValue)));",
        "177": "\t/**",
        "178": "\t * Sets the frequency of the LFO (sine wave), in Hertz.",
        "179": "\t * ",
        "180": "\t * @param lfoFrequency",
        "181": "\t *            The new LFO frequency in Hertz.",
        "182": "\t */",
        "183": "\tpublic void setLFOFrequency(double lfoFrequency) {",
        "184": "\t\tthis.lfoFrequency = lfoFrequency;",
        "185": "\t}"
      },
      "id": 101739557,
      "filename": "FlangerEffect.java"
    },
    {
      "repo": "https://bitbucket.org/bjzrccf/jdk6-jdk-mips",
      "language": "Java",
      "linescount": 893,
      "location": "/src/share/classes/com/sun/media/sound",
      "name": "jdk6-jdk-mips",
      "url": "https://searchcode.com/codesearch/view/61013884/",
      "md5hash": "601beb9631b628ee5eb669915b9dec51",
      "lines": {
        "64": "    private SoftProcess eg = new SoftEnvelopeGenerator();",
        "65": "    private SoftProcess lfo = new SoftLowFrequencyOscillator();",
        "339": "        eg.reset();",
        "340": "        lfo.reset();",
        "629": "            eg.processControlLogic();",
        "630": "            lfo.processControlLogic();",
        "345": "        objects.put(\"eg\", eg);",
        "346": "        objects.put(\"lfo\", lfo);",
        "430": "        eg.init(synthesizer);",
        "431": "        lfo.init(synthesizer);"
      },
      "id": 61013884,
      "filename": "SoftVoice.java"
    },
    {
      "repo": "https://bitbucket.org/nbandroid/nbandroid",
      "language": "Java",
      "linescount": 329,
      "location": "/project/src/org/netbeans/modules/android/project/ui/layout",
      "name": "nbandroid",
      "url": "https://searchcode.com/codesearch/view/64582313/",
      "md5hash": "650c0b2d306e1a6a7f38a475a8e57dfd",
      "lines": {
        "288": "        }",
        "289": "        Project p = FileOwnerQuery.getOwner(lFo);",
        "264": "    ",
        "265": "      FileObject lFo;",
        "266": "      DalvikPlatform lPlatform;",
        "267": "      FolderConfiguration lFolderConfig;",
        "269": "      synchronized (lock) {",
        "270": "        lFo = fo;",
        "271": "        lPlatform = platform;",
        "272": "        lFolderConfig = folderConfig;",
        "305": "            p,",
        "306": "            lFolderConfig,",
        "307": "            lPlatform);",
        "308": "        Reader layoutReader = new InputStreamReader(lFo.getInputStream());",
        "311": "          final RenderSession session = service.createRenderSession(ams, cpProvider,",
        "312": "              layoutReader, lTheme.themeName, lTheme.isProjectTheme, lFo.getName());"
      },
      "id": 64582313,
      "filename": "PreviewController.java"
    },
    {
      "repo": "https://bitbucket.org/timroes/nbandroid",
      "language": "Java",
      "linescount": 235,
      "location": "/project/src/org/netbeans/modules/android/project/ui/layout",
      "name": "nbandroid",
      "url": "https://searchcode.com/codesearch/view/64630798/",
      "md5hash": "a9070350546ba2f4e90ee97157ee99a2",
      "lines": {
        "200": "            ap,",
        "201": "            lFolderConfig,",
        "202": "            lPlatform);",
        "203": "        Reader layoutReader = new InputStreamReader(lFo.getInputStream());",
        "206": "          final RenderSession session = service.createRenderSession(ap,",
        "207": "              layoutReader, lTheme.themeName, lTheme.isProjectTheme, lFo.getName());",
        "176": "    ",
        "177": "      FileObject lFo;",
        "178": "      DalvikPlatform lPlatform;",
        "179": "      FolderConfiguration lFolderConfig;",
        "181": "      synchronized (lock) {",
        "182": "        lFo = fo;",
        "183": "        lPlatform = platform;",
        "184": "        lFolderConfig = folderConfig;",
        "187": "      try {",
        "188": "        if (lPlatform == null || lFolderConfig == null || lFo == null) {"
      },
      "id": 64630798,
      "filename": "PreviewController.java"
    },
    {
      "repo": "http://monome-pages.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1273,
      "location": "/pages-0.2/src/org/monome/pages/pages",
      "name": "monome-pages",
      "url": "https://searchcode.com/codesearch/view/12898546/",
      "md5hash": "9e51ff9ee1c006d4eec2a2720865fd0c",
      "lines": {
        "416": "\t\t\t\t\tthis.paramNum[this.lfo] = x;",
        "417": "\t\t\t\t} else {",
        "418": "\t\t\t\t\tthis.paramValue[this.lfo][this.paramNum[this.lfo]] = (x + ((y - 3) * 8));",
        "419": "\t\t\t\t\tif (this.paramValue[this.lfo][this.paramNum[this.lfo]] > 127) {",
        "393": "\t",
        "394": "\tpublic class MDMLFOManager implements MachineDrumModule {",
        "397": "\t\t",
        "398": "\t\tint lfo;",
        "401": "\t\t",
        "402": "\t\tpublic MDMLFOManager(MachineDrumInterfacePage page, int index) {",
        "411": "\t\t\tif (value == 1) {",
        "412": "\t\t\t\tboolean sendLfoChange = false;",
        "413": "\t\t\t\tif (y < 2) {",
        "414": "\t\t\t\t\tthis.lfo = x + (y * 8);",
        "415": "\t\t\t\t} else if (y < 3) {"
      },
      "id": 12898546,
      "filename": "MachineDrumInterfacePage.java"
    },
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 1910,
      "location": "/src/org/apache/poi/hwpf/model/types",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97384338/",
      "md5hash": "2efbe2193578055560aa9b1a50dfe60f",
      "lines": {
        "544": "     * ",
        "545": "     * 0x0001 - 0x07FE -- The value is a 1-based index into PlfLfo.rgLfo. The",
        "546": "     * LFO at this index defines the list that this paragraph is in.",
        "547": "     * ",
        "516": "     * ",
        "517": "     * 0x0001 - 0x07FE -- The value is a 1-based index into PlfLfo.rgLfo. The",
        "518": "     * LFO at this index defines the list that this paragraph is in.",
        "519": "     * ",
        "551": "     * PlfLfo.rgLfo. The LFO at this index defines the list that this paragraph",
        "522": "     * 0xF802 - 0xFFFF -- The value is the negation of a 1-based index into",
        "523": "     * PlfLfo.rgLfo. The LFO at this index defines the list that this paragraph",
        "532": "    @Internal",
        "533": "    public int getIlfo()",
        "534": "    {",
        "535": "        return field_9_ilfo;",
        "550": "     * 0xF802 - 0xFFFF -- The value is the negation of a 1-based index into"
      },
      "id": 97384338,
      "filename": "PAPAbstractType.java"
    },
    {
      "repo": "git://github.com/GregBowyer/ManagedRuntimeInitiative.git",
      "language": "Java",
      "linescount": 107,
      "location": "/MRI-J/jdk/test/javax/sound/midi/Gervill/SoftLowFrequencyOscillator",
      "name": "ManagedRuntimeInitiative",
      "url": "https://searchcode.com/codesearch/view/17116966/",
      "md5hash": "51e1ed0d523ad6549e5b2ff7f8f8bd9e",
      "lines": {
        "36": "    private static SoftSynthesizer synth = new SoftSynthesizer();",
        "37": "    private static SoftLowFrequencyOscillator lfo = new SoftLowFrequencyOscillator();",
        "38": "",
        "39": "    private static void testLFO(boolean shared, int instance, float freq, float delay,",
        "40": "            float delay2) throws Exception {",
        "41": "        SoftLowFrequencyOscillator lfo = ",
        "42": "            shared?TestProcessControlLogic.lfo:new SoftLowFrequencyOscillator();",
        "43": "        lfo.reset();",
        "44": "        double[] lfo_freq = lfo.get(instance, \"freq\");",
        "45": "        double[] lfo_delay = lfo.get(instance, \"delay\");",
        "46": "        double[] lfo_delay2 = lfo.get(instance, \"delay2\");",
        "47": "        double[] lfo_output = lfo.get(instance, null);",
        "48": "        lfo_freq[0] = freq;",
        "49": "        lfo_delay[0] = delay;",
        "50": "        lfo_delay2[0] = delay2;"
      },
      "id": 17116966,
      "filename": "TestProcessControlLogic.java"
    },
    {
      "repo": "git://github.com/ddf/Minim.git",
      "language": "Java",
      "linescount": 243,
      "location": "/src/ddf/minim/ugens",
      "name": "Minim",
      "url": "https://searchcode.com/codesearch/view/17059799/",
      "md5hash": "2388007fa8986cbe0353575c25af12ab",
      "lines": {
        "129": "\t *            float: the minimum delay applied to incoming samples (in milliseconds)",
        "130": "\t * @param lfoRate",
        "131": "\t *            float: the frequency of the the LFO",
        "132": "\t * @param delayDepth",
        "5": "/**",
        "6": " * A Flanger is a specialized kind of delay that uses an LFO (low frequency",
        "145": "\t\tdelay = addControl( delayLength );",
        "140": "\t */",
        "141": "\tpublic Flanger(float delayLength, float lfoRate, float delayDepth,",
        "15": " * <li>delay (in milliseconds): the minimum amount of delay applied to an incoming sample</li>",
        "16": " * <li>rate (in Hz): the frequency of the LFO</li>",
        "17": " * <li>depth (in milliseconds): the maximum amount of delay added onto delay by the LFO</li>",
        "18": " * <li>feedback: how much of delayed signal should be fed back into the effect</li>",
        "146": "\t\trate = addControl( lfoRate );",
        "133": "\t *            float: the maximum amount added to the delay by the LFO (in milliseconds)"
      },
      "id": 17059799,
      "filename": "Flanger.java"
    },
    {
      "repo": "https://bitbucket.org/luchsh/openjdk8-hotspot",
      "language": "Java",
      "linescount": 3963,
      "location": "/agent/src/share/classes/sun/jvm/hotspot/debugger/win32/coff",
      "name": "openjdk8-hotspot",
      "url": "https://searchcode.com/codesearch/view/125203773/",
      "md5hash": "5ba9f18128ead3bdbbd4206371abc7de",
      "lines": {
        "902": "            short iMod   = readShort(); // Unneeded?",
        "903": "            int   lfo    = globalOffset(readInt());",
        "906": "            case SST_MODULE:",
        "907": "              return new DebugVC50SSModuleImpl(ssType, iMod, cb, lfo);",
        "908": "            case SST_TYPES:",
        "909": "              return new DebugVC50SSTypesImpl(ssType, iMod, cb, lfo);",
        "910": "            case SST_PUBLIC:",
        "911": "              return new DebugVC50SSPublicImpl(ssType, iMod, cb, lfo);",
        "912": "            case SST_PUBLIC_SYM:",
        "913": "              return new DebugVC50SSPublicSymImpl(ssType, iMod, cb, lfo);",
        "914": "            case SST_SYMBOLS:",
        "915": "              return new DebugVC50SSSymbolsImpl(ssType, iMod, cb, lfo);",
        "916": "            case SST_ALIGN_SYM:",
        "917": "              return new DebugVC50SSAlignSymImpl(ssType, iMod, cb, lfo);",
        "918": "            case SST_SRC_LN_SEG:"
      },
      "id": 125203773,
      "filename": "COFFFileParser.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 104,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 27,
      "source": "Github",
      "id": 2
    },
    {
      "count": 5,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 1,
      "source": "GitLab",
      "id": 13
    }
  ]
}