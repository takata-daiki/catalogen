{
  "matchterm": "Picture",
  "previouspage": null,
  "searchterm": "Picture",
  "query": "Picture",
  "language_filters": [
    {
      "count": 7126,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 7123,
  "results": [
    {
      "repo": "https://bitbucket.org/Spivey/geomlab",
      "language": "Java",
      "linescount": 230,
      "location": "/src/plugins",
      "name": "geomlab",
      "url": "https://searchcode.com/codesearch/view/66619322/",
      "md5hash": "a55abc08b5a8e3e3a0498e5c776e9c85",
      "lines": {
        "1": "/*",
        "2": " * Picture.java",
        "40": "",
        "41": "/* The pictures that GeomLab works with do not have a fixed size, but",
        "43": " width.  Thus the aspect ratio (width/height) is fixed even if the",
        "44": " size is not.  When two pictures are put side-by-side, there is a",
        "45": " constraint that they should have the same height, and this removes",
        "46": " one degree of freedom in the scaling; similarly when pictures are put",
        "47": " one above another.  Each picture thus has a total of one degree of ",
        "48": " freedom for scaling.",
        "49": " ",
        "50": " Pictures are drawn in two layers: first the coloured fills, then",
        "51": " black outlines over the top.  The colours used for the fills rotate",
        "52": " as the pictures themselves are rotated: this makes Escher tilings",
        "55": "/** A rectangular graphical object of scalable size but fixed aspect ratio */",
        "56": "public class Picture extends Stylus.AbstractDrawable {"
      },
      "id": 66619322,
      "filename": "Picture.java"
    },
    {
      "repo": "https://github.com/fvilla/imt.git",
      "language": "Java",
      "linescount": 215,
      "location": "/org.integratedmodelling.thinklab.core/src/main/java/org/integratedmodelling/utils/image",
      "name": "imt",
      "url": "https://searchcode.com/codesearch/view/108980259/",
      "md5hash": "115d1917c90a025f83e1ef6e1bd0aa1c",
      "lines": {
        "1": "/**",
        "2": " * Picture.java",
        "35": "/*************************************************************************",
        "36": "*  Compilation:  javac Picture.java",
        "37": "*  Execution:    java Picture filename",
        "38": "*",
        "72": "",
        "73": "public final class Picture implements ActionListener {",
        "43": "*",
        "44": "*  % java Picture image.jpg",
        "77": "   // create a blank w-by-h image",
        "78": "   public Picture(int w, int h) {",
        "49": "*",
        "50": "*   - see also GrayPicture.java for a grayscale version",
        "151": "           frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);",
        "152": "           frame.setTitle(\"Picture Frame\");"
      },
      "id": 108980259,
      "filename": "Picture.java"
    },
    {
      "repo": "https://bitbucket.org/pragmatists/tdd-trainings",
      "language": "Java",
      "linescount": 95,
      "location": "/pokerapp/src/main/java/net/sourceforge/pokerapp",
      "name": "tdd-trainings",
      "url": "https://searchcode.com/codesearch/view/60411366/",
      "md5hash": "23cb1307bb80208389a48c20ffe3295b",
      "lines": {
        "1": "/******************************************************************************************",
        "2": " * Picture.java                    PokerApp                                               *",
        "33": "/****************************************************",
        "40": " **/",
        "41": "public class Picture {",
        "42": "",
        "43": "\tprivate int x; // X coordinate of this picture",
        "44": "\tprivate int y; // Y coordinate of this picture",
        "34": " * The picture class is used to display images on the poker table. It contains",
        "45": "\tprivate Image image; // The image",
        "48": "\t * A Picture class is created by specifying the image and x and y position",
        "51": "\t * @param i",
        "52": "\t *            The Image that this Picture class represents",
        "53": "\t * @param xpos",
        "47": "\t/***************************"
      },
      "id": 60411366,
      "filename": "Picture.java"
    },
    {
      "repo": "http://airforce2.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 41,
      "location": "/src",
      "name": "airforce2",
      "url": "https://searchcode.com/codesearch/view/3380031/",
      "md5hash": "15f082a74f188c33083c8c4ec94abc91",
      "lines": {
        "1": "// Picture.java",
        "2": "// Jim Sproch",
        "17": "",
        "8": "/**",
        "9": "\tPicture contains images",
        "18": "public class Picture"
      },
      "id": 3380031,
      "filename": "Picture.java"
    },
    {
      "repo": "https://bitbucket.org/huynv_55/lab06",
      "language": "Java",
      "linescount": 31,
      "location": "",
      "name": "lab06",
      "url": "https://searchcode.com/codesearch/view/133559050/",
      "md5hash": "86f3d9a6ad1209e8b063c73b150bcfd2",
      "lines": {
        "1": "/**",
        "2": " * @(#)Picture.java",
        "9": "",
        "10": "public class Picture extends Graphic{",
        "11": "",
        "12": "    public Picture() {"
      },
      "id": 133559050,
      "filename": "Picture.java"
    },
    {
      "repo": "https://bitbucket.org/kejar31/android_frameworks_base",
      "language": "Java",
      "linescount": 177,
      "location": "/graphics/java/android/graphics",
      "name": "android_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/61777750/",
      "md5hash": "a48c132c73226efff15e5285ed698f00",
      "lines": {
        "32": "    private Canvas mRecordingCanvas;",
        "33": "    private final int mNativePicture;",
        "36": "",
        "37": "    public Picture() {",
        "41": "    /**",
        "42": "     * Create a picture by making a copy of what has already been recorded in",
        "43": "     * src. The contents of src are unchanged, and if src changes later, those",
        "22": "/**",
        "23": " * A picture records drawing calls (via the canvas returned by beginRecording)",
        "24": " * and can then play them back (via picture.draw(canvas) or canvas.drawPicture).",
        "25": " * The picture's contents can also be written to a stream, and then later",
        "26": " * restored to a new picture (via writeToStream / createFromStream). For most",
        "27": " * content (esp. text, lines, rectangles), drawing a sequence from a picture can",
        "28": " * be faster than the equivalent API calls, since the picture performs its",
        "29": " * playback without incurring any java-call overhead.",
        "30": " */",
        "31": "public class Picture {"
      },
      "id": 61777750,
      "filename": "Picture.java"
    },
    {
      "repo": "https://bitbucket.org/sequencepoint/j2me_mpeg",
      "language": "Java",
      "linescount": 321,
      "location": "",
      "name": "j2me_mpeg",
      "url": "https://searchcode.com/codesearch/view/53302839/",
      "md5hash": "ac214be6a251da5c28087ccb3a3cf458",
      "lines": {
        "36": "",
        "37": "\tPicture(int mbWidth, int mbHeight) {",
        "57": "\t}",
        "13": "/*",
        "14": " * A picture consists of three rectangular matrices of eight-bit numbers;",
        "49": "\t * Motion compensation (MC) predicts the value of a block of ",
        "50": "\t * neighboring pels in a picture by relocating a block of ",
        "51": "\t * neighboring pel values from a known picture. The motion ",
        "20": "",
        "21": "public class Picture {",
        "54": "\t */",
        "55": "\tpublic void compensate(Picture src, int srcRow, int srcCol, MotionVector mv) {",
        "56": "\t\tPicture.compensate(src, srcRow, srcCol, this, srcRow, srcCol, mv);",
        "52": "\t * is described in terms of the two-dimensional motion vector ",
        "59": "\t/*",
        "60": "\t * If the decoder reconstructs a picture from the past and a ",
        "61": "\t * picture from the future, then the intermediate pictures can "
      },
      "id": 53302839,
      "filename": "Picture.java"
    },
    {
      "repo": "https://bitbucket.org/fenrir/jcollector",
      "language": "Java",
      "linescount": 292,
      "location": "/src/org/fenrir/jcollector/core/entity",
      "name": "jcollector",
      "url": "https://searchcode.com/codesearch/view/61900804/",
      "md5hash": "ffadc1e4211a81fa8b80b208dc246d15",
      "lines": {
        "32": "    \tthis.setRelativePath(picture.getRelativePath());",
        "33": "    \tthis.setCollection(picture.getCollection());",
        "34": "    \tthis.setPictureGroup(picture.getPictureGroup());",
        "35": "    \tthis.setRepository(picture.getRepository());",
        "36": "    \tthis.setWidth(picture.getWidth());",
        "37": "    \tthis.setHeight(picture.getHeight());",
        "38": "    \tthis.setResolution(picture.getResolution());",
        "39": "    \tthis.setCollectionDate(picture.getCollectionDate());",
        "40": "    \tthis.setCollected(picture.isCollected());",
        "9": " */",
        "10": "public class Picture ",
        "42": "    }",
        "41": "    \tthis.setChecksum(picture.getChecksum());",
        "28": "    ",
        "29": "    public Picture(Picture picture)",
        "30": "    {",
        "31": "    \tthis.setId(picture.getId());"
      },
      "id": 61900804,
      "filename": "Picture.java"
    },
    {
      "repo": "https://bitbucket.org/ewan/infandango",
      "language": "Java",
      "linescount": 259,
      "location": "/src/labs/Jester/StdLib",
      "name": "infandango",
      "url": "https://searchcode.com/codesearch/view/63130080/",
      "md5hash": "886646a14b0699673473800c9f991fdb",
      "lines": {
        "64": "     * Create a blank w-by-h picture, where each pixel is black.",
        "65": "     */",
        "2": "/*************************************************************************",
        "3": " *  Compilation:  javac Picture.java",
        "4": " *  Execution:    java Picture imagename",
        "5": " *",
        "10": " *",
        "11": " *  % java Picture mandrill.jpg",
        "145": "   /**",
        "146": "     * Display the picture in a window on the screen.",
        "179": "   /**",
        "180": "     * Return the height of the picture in pixels.",
        "55": " */",
        "56": "public final class Picture implements ActionListener {",
        "186": "   /**",
        "187": "     * Return the width of the picture in pixels.",
        "63": "   /**"
      },
      "id": 63130080,
      "filename": "Picture.java"
    },
    {
      "repo": "https://github.com/loveverdl/mybatis.git",
      "language": "Java",
      "linescount": 131,
      "location": "/mybatis/src/main/java/test/model",
      "name": "mybatis",
      "url": "https://searchcode.com/codesearch/view/69735944/",
      "md5hash": "c85cccc1c44f04223b4e8f5cf66348b0",
      "lines": {
        "33": "     */",
        "2": "",
        "3": "public class Picture {",
        "5": "     * This field was generated by MyBatis Generator.",
        "6": "     * This field corresponds to the database column picture.pict_id",
        "39": "     *",
        "13": "     * This field was generated by MyBatis Generator.",
        "14": "     * This field corresponds to the database column picture.file",
        "34": "    private Integer pictureSet_id;",
        "21": "     * This field was generated by MyBatis Generator.",
        "22": "     * This field corresponds to the database column picture.name",
        "38": "     * This method returns the value of the database column picture.pict_id",
        "29": "     * This field was generated by MyBatis Generator.",
        "30": "     * This field corresponds to the database column picture.pictureSet_id",
        "37": "     * This method was generated by MyBatis Generator."
      },
      "id": 69735944,
      "filename": "Picture.java"
    },
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 633,
      "location": "/src/org/apache/poi/hwpf/usermodel",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97384428/",
      "md5hash": "abf85d22a465320cca19a26cbf1926ad",
      "lines": {
        "96": "        for ( int i = 0; ( i + offset ) < pictureData.length",
        "128": "    /**",
        "131": "     */",
        "132": "    public Picture( int dataBlockStartOfsset, byte[] _dataStream,",
        "129": "     * Builds a Picture object for a Picture stored in the",
        "63": "            .getLogger( Picture.class );",
        "42": "/**",
        "43": " * Represents embedded picture extracted from Word Document",
        "44": " */",
        "45": "public final class Picture",
        "62": "    private static final POILogger log = POILogFactory",
        "91": "",
        "92": "    private static boolean matchSignature( byte[] pictureData,",
        "94": "    {",
        "95": "        boolean matched = offset < pictureData.length;"
      },
      "id": 97384428,
      "filename": "Picture.java"
    },
    {
      "repo": "https://github.com/minstrelsy/POI-Android.git",
      "language": "Java",
      "linescount": 280,
      "location": "/ppt/scratchpad/src/org/apache/poi/hslf/model",
      "name": "POI-Android",
      "url": "https://searchcode.com/codesearch/view/97394307/",
      "md5hash": "c0426f09ab6f17114414ade32966e4ad",
      "lines": {
        "86": "    /**",
        "77": "    /**",
        "40": "/**",
        "41": " * Represents a picture in a PowerPoint document.",
        "87": "     * Create a new <code>Picture</code>",
        "44": " */",
        "45": "public class Picture extends SimpleShape {",
        "78": "     * Create a new <code>Picture</code>",
        "79": "     *",
        "80": "    * @param idx the index of the picture",
        "81": "     */",
        "82": "    public Picture(int idx){",
        "22": "import org.apache.poi.ddf.*;",
        "23": "import org.apache.poi.hslf.usermodel.PictureData;",
        "88": "     *"
      },
      "id": 97394307,
      "filename": "Picture.java"
    },
    {
      "repo": "git://github.com/android/platform_frameworks_base.git",
      "language": "Java",
      "linescount": 212,
      "location": "/graphics/java/android/graphics",
      "name": "platform_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/2434915/",
      "md5hash": "1bc1aacec70d50ce172b64ae352b7f44",
      "lines": {
        "32": "    private long mNativePicture;",
        "36": "    /**",
        "37": "     * Creates an empty picture that is ready to record.",
        "38": "     */",
        "39": "    public Picture() {",
        "22": "/**",
        "23": " * A Picture records drawing calls (via the canvas returned by beginRecording)",
        "24": " * and can then play them back into Canvas (via {@link Picture#draw(Canvas)} or ",
        "25": " * {@link Canvas#drawPicture(Picture)}).For most content (e.g. text, lines, rectangles),",
        "26": " * drawing a sequence from a picture can be faster than the equivalent API",
        "27": " * calls, since the picture performs its playback without incurring any",
        "28": " * method-call overhead.",
        "29": " */",
        "30": "public class Picture {",
        "31": "    private Canvas mRecordingCanvas;"
      },
      "id": 2434915,
      "filename": "Picture.java"
    },
    {
      "repo": "https://bitbucket.org/kingjon/strategicprimer_code",
      "language": "Java",
      "linescount": 407,
      "location": "/sp_java_next/utils",
      "name": "strategicprimer_code",
      "url": "https://searchcode.com/codesearch/view/61138479/",
      "md5hash": "14f1831674ee1a54bde86a586c46b721",
      "lines": {
        "130": "\t */",
        "131": "\tpublic Picture(final int width, final int height) {",
        "68": " */",
        "69": "public final class Picture implements Serializable {",
        "166": "\t */",
        "167": "\tpublic Picture(final String filename, final int type) throws FileNotFoundException {",
        "13": "/**",
        "142": "\tpublic Picture(final int width, final int height, final int type) {",
        "141": "\t */",
        "48": " * <pre>",
        "49": " * Pixel pix = picture.getPixel(0, 0);",
        "14": " * A Picture object represents a color 2D image. It maintains a Pixel object for",
        "343": "\t\t\tfor (int y = 0; y < getHeight(); y++) {",
        "344": "\t\t\t\tsetPixel(x, y, pictureCopy.getPixel((x + (getWidth() / 2)) % getWidth(),",
        "153": "\t */",
        "154": "\tpublic Picture(final String filename) throws FileNotFoundException {"
      },
      "id": 61138479,
      "filename": "Picture.java"
    },
    {
      "repo": "https://github.com/sweetybanana/algorithms-course-coursera.git",
      "language": "Java",
      "linescount": 298,
      "location": "/coursera_libs/src/stdlib",
      "name": "algorithms-course-coursera",
      "url": "https://searchcode.com/codesearch/view/94437020/",
      "md5hash": "379fcc61e6a7f55097ca6bef6978bc0d",
      "lines": {
        "1": "/*************************************************************************",
        "2": " *  Compilation:  javac Picture.java",
        "3": " *  Execution:    java Picture imagename",
        "4": " *",
        "69": "     */",
        "9": " *",
        "10": " *  % java Picture mandrill.jpg",
        "139": "     * Returns a JLabel containing this picture, for embedding in a JPanel,",
        "162": "   /**",
        "15": " *",
        "16": " *   - see also GrayPicture.java for a grayscale version",
        "67": "   /**",
        "68": "     * Initializes a blank <tt>w</tt>-by-<tt>h</tt> picture, where each pixel is black.",
        "163": "     * Displays the picture in a window on the screen.",
        "59": " */",
        "60": "public final class Picture implements ActionListener {",
        "138": "   /**"
      },
      "id": 94437020,
      "filename": "Picture.java"
    },
    {
      "repo": "https://github.com/kavon/Cosis.git",
      "language": "Java",
      "linescount": 143,
      "location": "/src/cosis/media",
      "name": "Cosis",
      "url": "https://searchcode.com/codesearch/view/107361112/",
      "md5hash": "cebfa58703683f8eadb81fca17a30657",
      "lines": {
        "33": "    private boolean custom;",
        "34": "    Picture(String path) {",
        "67": "                URL imgURL = Picture.class.getResource(path);",
        "135": "        };",
        "136": "        Picture[] pictures = new Picture[imagesIncluded.length];",
        "137": "        for(int i = 0; i < imagesIncluded.length; i++) {",
        "138": "            pictures[i] = new Picture(imagesIncluded[i]);",
        "139": "        }",
        "140": "        return pictures;",
        "66": "            try {",
        "46": "     * @return the path of this picture",
        "45": "    /**",
        "27": " * Stores a Picture",
        "26": "/**",
        "91": "     */",
        "92": "    public static Picture[] getGenericPictures() {"
      },
      "id": 107361112,
      "filename": "Picture.java"
    },
    {
      "repo": "https://bitbucket.org/seandroid/frameworks-base.git",
      "language": "Java",
      "linescount": 212,
      "location": "/graphics/java/android/graphics",
      "name": "frameworks-base",
      "url": "https://searchcode.com/codesearch/view/37041264/",
      "md5hash": "1bc1aacec70d50ce172b64ae352b7f44",
      "lines": {
        "32": "    private long mNativePicture;",
        "36": "    /**",
        "37": "     * Creates an empty picture that is ready to record.",
        "38": "     */",
        "39": "    public Picture() {",
        "22": "/**",
        "23": " * A Picture records drawing calls (via the canvas returned by beginRecording)",
        "24": " * and can then play them back into Canvas (via {@link Picture#draw(Canvas)} or ",
        "25": " * {@link Canvas#drawPicture(Picture)}).For most content (e.g. text, lines, rectangles),",
        "26": " * drawing a sequence from a picture can be faster than the equivalent API",
        "27": " * calls, since the picture performs its playback without incurring any",
        "28": " * method-call overhead.",
        "29": " */",
        "30": "public class Picture {",
        "31": "    private Canvas mRecordingCanvas;"
      },
      "id": 37041264,
      "filename": "Picture.java"
    },
    {
      "repo": "https://bitbucket.org/htchoi1995/frameworks_base.git",
      "language": "Java",
      "linescount": 216,
      "location": "/graphics/java/android/graphics",
      "name": "frameworks_base",
      "url": "https://searchcode.com/codesearch/view/51921490/",
      "md5hash": "13020c106501c4b5bb86f73f85321300",
      "lines": {
        "32": "    private final int mNativePicture;",
        "41": "    /**",
        "42": "     * Creates an empty picture that is ready to record.",
        "43": "     */",
        "44": "    public Picture() {",
        "22": "/**",
        "23": " * A Picture records drawing calls (via the canvas returned by beginRecording)",
        "24": " * and can then play them back into Canvas (via {@link Picture#draw(Canvas)} or ",
        "25": " * {@link Canvas#drawPicture(Picture)}).For most content (e.g. text, lines, rectangles),",
        "26": " * drawing a sequence from a picture can be faster than the equivalent API",
        "27": " * calls, since the picture performs its playback without incurring any",
        "28": " * method-call overhead.",
        "29": " */",
        "30": "public class Picture {",
        "31": "    private Canvas mRecordingCanvas;"
      },
      "id": 51921490,
      "filename": "Picture.java"
    },
    {
      "repo": "https://github.com/chenxiuheng/jcodec.git",
      "language": "Java",
      "linescount": 154,
      "location": "/src/main/java/org/jcodec/common/model",
      "name": "jcodec",
      "url": "https://searchcode.com/codesearch/view/94211972/",
      "md5hash": "e83f859df9bccb2a63fa9c2ff066f32f",
      "lines": {
        "35": "",
        "36": "    public Picture(Picture other) {",
        "39": "",
        "8": " * ",
        "9": " * A YUV picture",
        "43": "",
        "44": "    public static Picture create(int width, int height, ColorSpace colorSpace, Rect crop) {",
        "13": " */",
        "14": "public class Picture {",
        "60": "",
        "40": "    public static Picture create(int width, int height, ColorSpace colorSpace) {",
        "23": "",
        "24": "    public Picture(int width, int height, int[][] data, ColorSpace color) {",
        "27": "",
        "28": "    public Picture(int width, int height, int[][] data, ColorSpace color, Rect crop) {",
        "61": "        return new Picture(width, height, data, colorSpace, crop);"
      },
      "id": 94211972,
      "filename": "Picture.java"
    },
    {
      "repo": "http://jmonkeyengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 160,
      "location": "/engine/src/core/com/jme3/ui",
      "name": "jmonkeyengine",
      "url": "https://searchcode.com/codesearch/view/8140020/",
      "md5hash": "133013ae2ed082d559cff55ee917ba19",
      "lines": {
        "64": "     */",
        "65": "    public Picture(String name, boolean flipY){",
        "71": "    /**",
        "72": "     * Creates a named picture.",
        "73": "     * By default a picture's width and height are 1",
        "45": "/**",
        "46": " * A <code>Picture</code> represents a 2D image drawn on the screen.",
        "50": " */",
        "51": "public class Picture extends Geometry {",
        "56": "    /**",
        "57": "     * Create a named picture. ",
        "58": "     * ",
        "59": "     * By default a picture's width and height are 1",
        "61": "     * ",
        "62": "     * @param name the name of the picture in the scene graph"
      },
      "id": 8140020,
      "filename": "Picture.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 3132,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 2840,
      "source": "Github",
      "id": 2
    },
    {
      "count": 1044,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 38,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 26,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 25,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 12,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 8,
      "source": "Gitorious",
      "id": 10
    },
    {
      "count": 1,
      "source": "CodePlex",
      "id": 5
    }
  ]
}