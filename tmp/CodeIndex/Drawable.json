{
  "matchterm": "Drawable",
  "previouspage": null,
  "searchterm": "Drawable",
  "query": "Drawable",
  "language_filters": [
    {
      "count": 40267,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 40267,
  "results": [
    {
      "repo": "https://github.com/ericl/asteroids.git",
      "language": "Java",
      "linescount": 12,
      "location": "/asteroids/display",
      "name": "asteroids",
      "url": "https://searchcode.com/codesearch/view/139392843/",
      "md5hash": "5f9b08b4a1ec67b03bc7ef7df2beb391",
      "lines": {
        "8": "",
        "1": "/**",
        "2": " * Drawable object.",
        "9": "public interface Drawable extends Visible {"
      },
      "id": 139392843,
      "filename": "Drawable.java"
    },
    {
      "repo": "https://bitbucket.org/seandroid/frameworks-base.git",
      "language": "Java",
      "linescount": 1427,
      "location": "/graphics/java/android/graphics/drawable",
      "name": "frameworks-base",
      "url": "https://searchcode.com/codesearch/view/37041317/",
      "md5hash": "abef2f3045d8a4fb53b3f33418ebca57",
      "lines": {
        "65": " *",
        "66": " * <p>In addition to simple drawing, Drawable provides a number of generic",
        "70": " *     <li> The {@link #setBounds} method <var>must</var> be called to tell the",
        "71": " *     Drawable where it is drawn and how large it should be.  All Drawables",
        "72": " *     should respect the requested size, often simply by scaling their",
        "73": " *     imagery.  A client can find the preferred size for some Drawables with",
        "75": " *",
        "76": " *     <li> The {@link #getPadding} method can return from some Drawables",
        "77": " *     information about how to frame content that is placed inside of them.",
        "16": "",
        "17": "package android.graphics.drawable;",
        "58": "/**",
        "59": " * A Drawable is a general abstraction for \"something that can be drawn.\"  Most",
        "60": " * often you will deal with Drawable as the type of resource retrieved for",
        "61": " * drawing things to the screen; the Drawable class provides a generic API for",
        "62": " * dealing with an underlying visual resource that may take a variety of forms.",
        "63": " * Unlike a {@link android.view.View}, a Drawable does not have any facility to"
      },
      "id": 37041317,
      "filename": "Drawable.java"
    },
    {
      "repo": "https://bitbucket.org/iainh/projectzzz-platform-frameworks-base.git",
      "language": "Java",
      "linescount": 987,
      "location": "/graphics/java/android/graphics/drawable",
      "name": "projectzzz-platform-frameworks-base",
      "url": "https://searchcode.com/codesearch/view/37263749/",
      "md5hash": "7b0d17ae9f282a542a1d45d623ac0ab2",
      "lines": {
        "64": " *",
        "48": " * A Drawable is a general abstraction for \"something that can be drawn.\"  Most",
        "66": " *     information about how to frame content that is placed inside of them.",
        "65": " *     <li> The {@link #getPadding} method can return from some Drawables",
        "49": " * often you will deal with Drawable as the type of resource retrieved for",
        "47": "/**",
        "16": "",
        "17": "package android.graphics.drawable;",
        "50": " * drawing things to the screen; the Drawable class provides a generic API for",
        "51": " * dealing with an underlying visual resource that may take a variety of forms.",
        "52": " * Unlike a {@link android.view.View}, a Drawable does not have any facility to",
        "54": " *",
        "55": " * <p>In addition to simple drawing, Drawable provides a number of generic",
        "59": " *     <li> The {@link #setBounds} method <var>must</var> be called to tell the",
        "60": " *     Drawable where it is drawn and how large it should be.  All Drawables",
        "61": " *     should respect the requested size, often simply by scaling their",
        "62": " *     imagery.  A client can find the preferred size for some Drawables with"
      },
      "id": 37263749,
      "filename": "Drawable.java"
    },
    {
      "repo": "https://bitbucket.org/htchoi1995/frameworks_base.git",
      "language": "Java",
      "linescount": 1012,
      "location": "/graphics/java/android/graphics/drawable",
      "name": "frameworks_base",
      "url": "https://searchcode.com/codesearch/view/51921543/",
      "md5hash": "df72d8b7dd36d51d72b2d6a8e0f132e2",
      "lines": {
        "64": " *",
        "48": " * A Drawable is a general abstraction for \"something that can be drawn.\"  Most",
        "66": " *     information about how to frame content that is placed inside of them.",
        "65": " *     <li> The {@link #getPadding} method can return from some Drawables",
        "49": " * often you will deal with Drawable as the type of resource retrieved for",
        "47": "/**",
        "16": "",
        "17": "package android.graphics.drawable;",
        "50": " * drawing things to the screen; the Drawable class provides a generic API for",
        "51": " * dealing with an underlying visual resource that may take a variety of forms.",
        "52": " * Unlike a {@link android.view.View}, a Drawable does not have any facility to",
        "54": " *",
        "55": " * <p>In addition to simple drawing, Drawable provides a number of generic",
        "59": " *     <li> The {@link #setBounds} method <var>must</var> be called to tell the",
        "60": " *     Drawable where it is drawn and how large it should be.  All Drawables",
        "61": " *     should respect the requested size, often simply by scaling their",
        "62": " *     imagery.  A client can find the preferred size for some Drawables with"
      },
      "id": 51921543,
      "filename": "Drawable.java"
    },
    {
      "repo": "git://github.com/android/platform_frameworks_base.git",
      "language": "Java",
      "linescount": 1427,
      "location": "/graphics/java/android/graphics/drawable",
      "name": "platform_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/2434931/",
      "md5hash": "abef2f3045d8a4fb53b3f33418ebca57",
      "lines": {
        "65": " *",
        "66": " * <p>In addition to simple drawing, Drawable provides a number of generic",
        "70": " *     <li> The {@link #setBounds} method <var>must</var> be called to tell the",
        "71": " *     Drawable where it is drawn and how large it should be.  All Drawables",
        "72": " *     should respect the requested size, often simply by scaling their",
        "73": " *     imagery.  A client can find the preferred size for some Drawables with",
        "75": " *",
        "76": " *     <li> The {@link #getPadding} method can return from some Drawables",
        "77": " *     information about how to frame content that is placed inside of them.",
        "16": "",
        "17": "package android.graphics.drawable;",
        "58": "/**",
        "59": " * A Drawable is a general abstraction for \"something that can be drawn.\"  Most",
        "60": " * often you will deal with Drawable as the type of resource retrieved for",
        "61": " * drawing things to the screen; the Drawable class provides a generic API for",
        "62": " * dealing with an underlying visual resource that may take a variety of forms.",
        "63": " * Unlike a {@link android.view.View}, a Drawable does not have any facility to"
      },
      "id": 2434931,
      "filename": "Drawable.java"
    },
    {
      "repo": "https://bitbucket.org/chameleonos/miui_frameworks.git",
      "language": "Java",
      "linescount": 452,
      "location": "/framework/java/jad/android/graphics/drawable",
      "name": "miui_frameworks",
      "url": "https://searchcode.com/codesearch/view/44006018/",
      "md5hash": "6fc24f8af70e7dd7e30e294b68a56718",
      "lines": {
        "32": "            return newDrawable();",
        "4": "",
        "5": "package android.graphics.drawable;",
        "17": "",
        "18": "// Referenced classes of package android.graphics.drawable:",
        "19": "//            StateListDrawable, LevelListDrawable, LayerDrawable, TransitionDrawable, ",
        "20": "//            ColorDrawable, GradientDrawable, ScaleDrawable, ClipDrawable, ",
        "21": "//            RotateDrawable, AnimatedRotateDrawable, AnimationDrawable, InsetDrawable, ",
        "22": "//            BitmapDrawable, NinePatchDrawable",
        "23": "",
        "24": "public abstract class Drawable {",
        "28": "",
        "29": "        public abstract Drawable newDrawable();",
        "30": "",
        "31": "        public Drawable newDrawable(Resources resources) {"
      },
      "id": 44006018,
      "filename": "Drawable.java"
    },
    {
      "repo": "https://bitbucket.org/chameleonos/miui_frameworks.git",
      "language": "Java",
      "linescount": 493,
      "location": "/framework/java/jd-gui/android/graphics/drawable",
      "name": "miui_frameworks",
      "url": "https://searchcode.com/codesearch/view/44003914/",
      "md5hash": "2ccf14fdf89728305c66868ec97f13df",
      "lines": {
        "1": "package android.graphics.drawable;",
        "2": "",
        "38": "",
        "39": "    public static Drawable createFromPath(String paramString)",
        "40": "    {",
        "41": "        Drawable localDrawable = null;",
        "44": "        {",
        "45": "            return localDrawable;",
        "47": "            if (localBitmap != null)",
        "48": "                localDrawable = drawableFromBitmap(null, localBitmap, null, null, null, paramString);",
        "51": "",
        "52": "    public static Drawable createFromResourceStream(Resources paramResources, TypedValue paramTypedValue, InputStream paramInputStream, String paramString)",
        "56": "",
        "57": "    public static Drawable createFromResourceStream(Resources paramResources, TypedValue paramTypedValue, InputStream paramInputStream, String paramString, BitmapFactory.Options paramOptions)",
        "58": "    {",
        "28": "",
        "29": "public abstract class Drawable"
      },
      "id": 44003914,
      "filename": "Drawable.java"
    },
    {
      "repo": "http://minime.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 496,
      "location": "/minime/src/minime",
      "name": "minime",
      "url": "https://searchcode.com/codesearch/view/1973430/",
      "md5hash": "47c1e59a2435b662eafd75c4ff5f8883",
      "lines": {
        "32": "public abstract class Drawable {",
        "36": "\t/**",
        "5": "/**",
        "6": " * Contains the drawable base class, font and image classes as resources, and UI facilites.",
        "80": "",
        "81": "\t/** The initial visible attribute when the drawable component is created */",
        "83": "",
        "52": "",
        "53": "\t/** The x,y coordinates and size of the drawable object */",
        "217": "\t/**",
        "84": "\t/** the drawable object clip status */",
        "218": "\t * Get the Drawable's frame thickness",
        "31": " */",
        "70": "\t/** set to true when the drawable need to layout by layout method */",
        "69": "",
        "37": "\t * Box-orientation constant used to specify the drawable's alignment inside"
      },
      "id": 1973430,
      "filename": "Drawable.java"
    },
    {
      "repo": "http://rokon.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 153,
      "location": "/src/com/stickycoding/rokon",
      "name": "rokon",
      "url": "https://searchcode.com/codesearch/view/2361080/",
      "md5hash": "6c9d3c908d71eac763c1cbaf748df798",
      "lines": {
        "61": "\t * Fetches the name for this Drawable",
        "7": "/**",
        "8": " * Drawable.java",
        "9": " * An interface for objects which are to be in the render queue ",
        "10": " * Confusion with Androids own Drawable class may be a potential issue, though this being an interface they cannot easily be used accidentally",
        "13": " */",
        "14": "public abstract interface Drawable {",
        "60": "\t/**",
        "16": "\t/**",
        "17": "\t * Called each time the Drawable must be rendered",
        "22": "\t/**",
        "23": "\t * Called when the Drawable is added to a Layer",
        "24": "\t * @param layer the Layer which the Drawable has just been added to",
        "25": "\t */",
        "28": "\t/**",
        "29": "\t * Called when the Drawable is removed from a Layer"
      },
      "id": 2361080,
      "filename": "Drawable.java"
    },
    {
      "repo": "https://bitbucket.org/dagronlund/opengl-game-platform.git",
      "language": "Java",
      "linescount": 78,
      "location": "/game_platform/lib/lwjgl-2.8.5/src/java/org/lwjgl/opengl",
      "name": "opengl-game-platform",
      "url": "https://searchcode.com/codesearch/view/52612687/",
      "md5hash": "fb46daa40a7537f690fd50576513d6c2",
      "lines": {
        "68": "\t * so that if it is used in a <code>clCreateContext(FromType)</code> call, the created CL",
        "37": "/**",
        "38": " * The Drawable interface describes an OpenGL drawable with an associated",
        "43": "",
        "44": "public interface Drawable {",
        "45": "",
        "46": "\t/** Returns true if the Drawable's context is current in the current thread. */",
        "49": "\t/**",
        "50": "\t * Makes the Drawable's context current in the current thread.",
        "69": "\t * context will be sharing objects with this <code>Drawable</code>'s GL context. After a",
        "56": "\t/**",
        "57": "\t * If the Drawable's context is current in the current thread, no context will be current after a call to this method.",
        "62": "",
        "63": "\t/** Destroys the Drawable. */"
      },
      "id": 52612687,
      "filename": "Drawable.java"
    },
    {
      "repo": "https://bitbucket.org/dagronlund/opengl-game-platform.git",
      "language": "Java",
      "linescount": 78,
      "location": "/game_platform/lib/lwjgl-2.8.5/java/org/lwjgl/opengl",
      "name": "opengl-game-platform",
      "url": "https://searchcode.com/codesearch/view/52614875/",
      "md5hash": "fb46daa40a7537f690fd50576513d6c2",
      "lines": {
        "68": "\t * so that if it is used in a <code>clCreateContext(FromType)</code> call, the created CL",
        "37": "/**",
        "38": " * The Drawable interface describes an OpenGL drawable with an associated",
        "43": "",
        "44": "public interface Drawable {",
        "45": "",
        "46": "\t/** Returns true if the Drawable's context is current in the current thread. */",
        "49": "\t/**",
        "50": "\t * Makes the Drawable's context current in the current thread.",
        "69": "\t * context will be sharing objects with this <code>Drawable</code>'s GL context. After a",
        "56": "\t/**",
        "57": "\t * If the Drawable's context is current in the current thread, no context will be current after a call to this method.",
        "62": "",
        "63": "\t/** Destroys the Drawable. */"
      },
      "id": 52614875,
      "filename": "Drawable.java"
    },
    {
      "repo": "http://e3roid.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 57,
      "location": "/E3roid/src/com/e3roid/drawable",
      "name": "e3roid",
      "url": "https://searchcode.com/codesearch/view/2407886/",
      "md5hash": "74f018615a2540f46aa6093767f9d038",
      "lines": {
        "35": "\t/**",
        "36": "\t * Called to draw the drawable.",
        "40": "\t/**",
        "41": "\t * Called when the drawable is removed.",
        "13": " */",
        "14": "package com.e3roid.drawable;",
        "48": "\t/**",
        "49": "\t * Returns whether drawable is removed not not.",
        "20": "/**",
        "21": " * Drawable is interface that represents 2D shape.",
        "22": " */",
        "23": "public interface Drawable extends E3LifeCycle {",
        "24": "\t/**",
        "25": "\t * Called when the drawable is created or recreated.",
        "29": "\t/**",
        "30": "\t * Called when the drawable is created or recreated."
      },
      "id": 2407886,
      "filename": "Drawable.java"
    },
    {
      "repo": "http://enhanced-groovydoc.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 193,
      "location": "/enhanced-groovydoc/src/main/java/net/sf/sdedit/drawable",
      "name": "enhanced-groovydoc",
      "url": "https://searchcode.com/codesearch/view/13693211/",
      "md5hash": "25c7d7cc73f96d433bf1f945bab04c90",
      "lines": {
        "32": "/**",
        "33": " * A <tt>Drawable</tt> object is a representation of a visible component that",
        "66": "     * @param g2d",
        "67": "     *            the Graphics2D context to draw this drawable sequence diagram",
        "134": "     *            a rectangle specifiying an area of the sequence diagram",
        "38": " * A {@linkplain #draw(Graphics2D)} method must be implemented, so a",
        "39": " * <tt>Drawable</tt> object is able to draw itself into a <tt>Graphics</tt>",
        "129": "    /**",
        "73": "     * This method is called when and if the left and top positions of the",
        "74": "     * drawable components of a sequence diagram are fixed. Its purpose is to",
        "135": "     * @return true if this drawable component's bounds intersect the rectangle",
        "44": " */",
        "45": "public abstract class Drawable implements Constants",
        "55": "     */",
        "56": "    protected Drawable() {",
        "130": "     * Returns <tt>true</tt> if this drawable component's bounds intersect the"
      },
      "id": 13693211,
      "filename": "Drawable.java"
    },
    {
      "repo": "https://bitbucket.org/kejar31/android_frameworks_base",
      "language": "Java",
      "linescount": 973,
      "location": "/graphics/java/android/graphics/drawable",
      "name": "android_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/61777802/",
      "md5hash": "872e853cc8aadeaca160b8753ef910be",
      "lines": {
        "64": " *     <li> The {@link #getPadding} method can return from some Drawables",
        "48": " * often you will deal with Drawable as the type of resource retrieved for",
        "65": " *     information about how to frame content that is placed inside of them.",
        "49": " * drawing things to the screen; the Drawable class provides a generic API for",
        "46": "/**",
        "47": " * A Drawable is a general abstraction for \"something that can be drawn.\"  Most",
        "16": "",
        "17": "package android.graphics.drawable;",
        "50": " * dealing with an underlying visual resource that may take a variety of forms.",
        "51": " * Unlike a {@link android.view.View}, a Drawable does not have any facility to",
        "53": " *",
        "54": " * <p>In addition to simple drawing, Drawable provides a number of generic",
        "58": " *     <li> The {@link #setBounds} method <var>must</var> be called to tell the",
        "59": " *     Drawable where it is drawn and how large it should be.  All Drawables",
        "60": " *     should respect the requested size, often simply by scaling their",
        "61": " *     imagery.  A client can find the preferred size for some Drawables with",
        "63": " *"
      },
      "id": 61777802,
      "filename": "Drawable.java"
    },
    {
      "repo": "git://github.com/prog694/VIRSYSJ.git",
      "language": "Java",
      "linescount": 78,
      "location": "/LWJGL/src/java/org/lwjgl/opengl",
      "name": "VIRSYSJ",
      "url": "https://searchcode.com/codesearch/view/14442148/",
      "md5hash": "fb46daa40a7537f690fd50576513d6c2",
      "lines": {
        "68": "\t * so that if it is used in a <code>clCreateContext(FromType)</code> call, the created CL",
        "37": "/**",
        "38": " * The Drawable interface describes an OpenGL drawable with an associated",
        "43": "",
        "44": "public interface Drawable {",
        "45": "",
        "46": "\t/** Returns true if the Drawable's context is current in the current thread. */",
        "49": "\t/**",
        "50": "\t * Makes the Drawable's context current in the current thread.",
        "69": "\t * context will be sharing objects with this <code>Drawable</code>'s GL context. After a",
        "56": "\t/**",
        "57": "\t * If the Drawable's context is current in the current thread, no context will be current after a call to this method.",
        "62": "",
        "63": "\t/** Destroys the Drawable. */"
      },
      "id": 14442148,
      "filename": "Drawable.java"
    },
    {
      "repo": "http://20widgets.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 68,
      "location": "/20widgets/src/razie/draw",
      "name": "20widgets",
      "url": "https://searchcode.com/codesearch/view/12734345/",
      "md5hash": "87c5a51f594b633efeabcb69f76a3fa7",
      "lines": {
        "40": " */",
        "41": "public interface Drawable {",
        "10": "/**",
        "11": " * basic drawable objects, which are rendered by Renderers for different technologies",
        "12": " * ",
        "13": " * Convention: each drawable MUST support at least HTML and TEXT. It SHOULD also support XML and",
        "14": " * JSON. For other rendering technologies, you should create basic drawable objects in this package,",
        "15": " * which will render themselves onto those respective technologies, depending on their availability",
        "51": "    * @param stream - not null, a stream to draw to",
        "52": "    * @return null if it was drawn on the stream, a drawable object otherwise",
        "56": "   /** just a syntax marker - not sure i'll ever use this... */",
        "57": "   public static abstract class Widget implements Drawable {}",
        "59": "   /** nothing - can return from render() if you've written to the stream */",
        "60": "   public static class Nothing implements Drawable {"
      },
      "id": 12734345,
      "filename": "Drawable.java"
    },
    {
      "repo": "http://gwt-links.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 42,
      "location": "/gwt-links-parent/gwt-links/src/main/java/com/orange/links/client/shapes",
      "name": "gwt-links",
      "url": "https://searchcode.com/codesearch/view/8577467/",
      "md5hash": "4838d4d696e2888b21c54ad1d59e3598",
      "lines": {
        "32": "     * ",
        "33": "     * @param allowSynchronized whether or not the Drawable should allow itself to be set as synchronized.",
        "37": "    /**",
        "6": " */",
        "7": "public interface Drawable {",
        "9": "    /**",
        "10": "     * @param sync whether or not this drawable is synchronized",
        "14": "    /**",
        "15": "     * @return whether or not this drawable is synchronized",
        "38": "     * @return wether or not the drawable allow to be synchronied by itself",
        "29": "    /**",
        "30": "     * Whether or not a Drawable can be set as Synchronized per setSynchronized.  E.g., a Connection sets itself as "
      },
      "id": 8577467,
      "filename": "Drawable.java"
    },
    {
      "repo": "https://bitbucket.org/bigxie/android_frameworks_base",
      "language": "Java",
      "linescount": 973,
      "location": "/graphics/java/android/graphics/drawable",
      "name": "android_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/124757232/",
      "md5hash": "872e853cc8aadeaca160b8753ef910be",
      "lines": {
        "64": " *     <li> The {@link #getPadding} method can return from some Drawables",
        "48": " * often you will deal with Drawable as the type of resource retrieved for",
        "65": " *     information about how to frame content that is placed inside of them.",
        "49": " * drawing things to the screen; the Drawable class provides a generic API for",
        "46": "/**",
        "47": " * A Drawable is a general abstraction for \"something that can be drawn.\"  Most",
        "16": "",
        "17": "package android.graphics.drawable;",
        "50": " * dealing with an underlying visual resource that may take a variety of forms.",
        "51": " * Unlike a {@link android.view.View}, a Drawable does not have any facility to",
        "53": " *",
        "54": " * <p>In addition to simple drawing, Drawable provides a number of generic",
        "58": " *     <li> The {@link #setBounds} method <var>must</var> be called to tell the",
        "59": " *     Drawable where it is drawn and how large it should be.  All Drawables",
        "60": " *     should respect the requested size, often simply by scaling their",
        "61": " *     imagery.  A client can find the preferred size for some Drawables with",
        "63": " *"
      },
      "id": 124757232,
      "filename": "Drawable.java"
    },
    {
      "repo": "https://bitbucket.org/droidandy/derrick-spencer",
      "language": "Java",
      "linescount": 973,
      "location": "/graphics/java/android/graphics/drawable",
      "name": "derrick-spencer",
      "url": "https://searchcode.com/codesearch/view/125596633/",
      "md5hash": "872e853cc8aadeaca160b8753ef910be",
      "lines": {
        "64": " *     <li> The {@link #getPadding} method can return from some Drawables",
        "48": " * often you will deal with Drawable as the type of resource retrieved for",
        "65": " *     information about how to frame content that is placed inside of them.",
        "49": " * drawing things to the screen; the Drawable class provides a generic API for",
        "46": "/**",
        "47": " * A Drawable is a general abstraction for \"something that can be drawn.\"  Most",
        "16": "",
        "17": "package android.graphics.drawable;",
        "50": " * dealing with an underlying visual resource that may take a variety of forms.",
        "51": " * Unlike a {@link android.view.View}, a Drawable does not have any facility to",
        "53": " *",
        "54": " * <p>In addition to simple drawing, Drawable provides a number of generic",
        "58": " *     <li> The {@link #setBounds} method <var>must</var> be called to tell the",
        "59": " *     Drawable where it is drawn and how large it should be.  All Drawables",
        "60": " *     should respect the requested size, often simply by scaling their",
        "61": " *     imagery.  A client can find the preferred size for some Drawables with",
        "63": " *"
      },
      "id": 125596633,
      "filename": "Drawable.java"
    },
    {
      "repo": "https://github.com/android/platform_frameworks_base.git",
      "language": "Java",
      "linescount": 1595,
      "location": "/graphics/java/android/graphics/drawable",
      "name": "platform_frameworks_base",
      "url": "https://searchcode.com/codesearch/view/140969421/",
      "md5hash": "3ef5e5420f539ffd0cf1cd911d4e2611",
      "lines": {
        "64": " * A Drawable is a general abstraction for \"something that can be drawn.\"  Most",
        "65": " * often you will deal with Drawable as the type of resource retrieved for",
        "66": " * drawing things to the screen; the Drawable class provides a generic API for",
        "67": " * dealing with an underlying visual resource that may take a variety of forms.",
        "68": " * Unlike a {@link android.view.View}, a Drawable does not have any facility to",
        "70": " *",
        "71": " * <p>In addition to simple drawing, Drawable provides a number of generic",
        "80": " *",
        "75": " *     <li> The {@link #setBounds} method <var>must</var> be called to tell the",
        "76": " *     Drawable where it is drawn and how large it should be.  All Drawables",
        "77": " *     should respect the requested size, often simply by scaling their",
        "78": " *     imagery.  A client can find the preferred size for some Drawables with",
        "16": "",
        "17": "package android.graphics.drawable;",
        "82": " *     information about how to frame content that is placed inside of them.",
        "81": " *     <li> The {@link #getPadding} method can return from some Drawables",
        "63": "/**"
      },
      "id": 140969421,
      "filename": "Drawable.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 18924,
      "source": "Github",
      "id": 2
    },
    {
      "count": 16805,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 3780,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 553,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 151,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 36,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 16,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 2,
      "source": "Unknown",
      "id": 0
    }
  ]
}