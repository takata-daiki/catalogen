{
  "matchterm": "Match",
  "previouspage": null,
  "searchterm": "Match",
  "query": "Match",
  "language_filters": [
    {
      "count": 124069,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 124069,
  "results": [
    {
      "repo": "git://github.com/rstudio/rstudio.git",
      "language": "Java",
      "linescount": 48,
      "location": "/src/gwt/src/org/rstudio/core/client/regex",
      "name": "rstudio",
      "url": "https://searchcode.com/codesearch/view/7490369/",
      "md5hash": "1a7315ff50faad122468029d77affd85",
      "lines": {
        "32": "      return @org.rstudio.core.client.regex.Match::doNextMatch(Lorg/rstudio/core/client/regex/Pattern;Ljava/lang/String;I)(this.pattern, this.input, this.next);",
        "1": "/*",
        "2": " * Match.java",
        "35": "   public final native String getGroup(int number) /*-{",
        "36": "      return this.match[number];",
        "33": "   }-*/;",
        "40": "      return typeof(this.match[number]) != 'undefined';",
        "42": "",
        "39": "   public final native boolean hasGroup(int number) /*-{",
        "44": "   {",
        "45": "      return pattern.match(input, index);",
        "43": "   private static Match doNextMatch(Pattern pattern, String input, int index)",
        "18": "",
        "19": "public class Match extends JavaScriptObject",
        "20": "{",
        "31": "   public final native Match nextMatch() /*-{"
      },
      "id": 7490369,
      "filename": "Match.java"
    },
    {
      "repo": "https://bitbucket.org/gargdeendayal/procyon",
      "language": "Java",
      "linescount": 139,
      "location": "/Procyon.CompilerTools/src/main/java/com/strobel/decompiler/patterns",
      "name": "Procyon",
      "url": "https://searchcode.com/codesearch/view/67347750/",
      "md5hash": "fa06ede24ace1617dea9da4a15c957a7",
      "lines": {
        "1": "/*",
        "2": " * Match.java",
        "131": "    public static Match createNew() {",
        "132": "        return new Match(new ArrayList<Pair<String, INode>>());",
        "133": "    }",
        "130": "",
        "33": "",
        "135": "    public static Match failure() {",
        "34": "    private Match(final List<Pair<String, INode>> results) {",
        "134": "",
        "28": "",
        "29": "public final class Match {",
        "30": "    private final static Match FAILURE = new Match(null);",
        "31": ""
      },
      "id": 67347750,
      "filename": "Match.java"
    },
    {
      "repo": "https://github.com/michaelkirschbaum/hungarian.git",
      "language": "Java",
      "linescount": 101,
      "location": "",
      "name": "hungarian",
      "url": "https://searchcode.com/codesearch/view/98099229/",
      "md5hash": "50fcc53ac7fb197f09d2eb84833295f9",
      "lines": {
        "96": "\t\tSystem.out.println(\"-------------------------------------------------------- ---------------------------- ------\");",
        "1": "/**",
        "2": " * Match specifies a bijection between proteins and drugs such that ",
        "99": "\t}",
        "97": "\t\tfor (i = 0; i < maxMatches.length; i++)",
        "28": "\t\tif (args.length != 2) {\t\t// check that two files are provided",
        "98": "\t\t\tmaxMatches[i].display();",
        "93": "\t\tSystem.out.println(maximumBA + \"\\n\");",
        "16": "",
        "17": "public class Match {",
        "22": "\t\tDrug[] drugs;",
        "23": "\t\tPair[] maxMatches;",
        "91": "\t\tfor (i = 0; i < maxMatches.length; i++)",
        "92": "\t\t\tmaximumBA += maxMatches[i].getAffinity();",
        "29": "\t\t\tSystem.out.println(\"Usage: backendProblem1.Match <path to protein names file> <path to drug names file>\");"
      },
      "id": 98099229,
      "filename": "Match.java"
    },
    {
      "repo": "https://bitbucket.org/xiangshen/tec",
      "language": "Java",
      "linescount": 45,
      "location": "/TecAndroidCommon/src/org/simpleframework/xml/util",
      "name": "tec",
      "url": "https://searchcode.com/codesearch/view/125752615/",
      "md5hash": "90e7f32b8cfcfe8fc5e4584a2fdb9562",
      "lines": {
        "32": " */",
        "1": "/*",
        "2": " * Match.java March 2002",
        "37": "    * pattern can consist of a \"*\" character and a \"?\" character",
        "38": "    * to match the pattern. Implementations of this class should",
        "33": "public interface Match {",
        "40": "    * ",
        "41": "    * @return this returns the pattern that is to be matched",
        "22": " * This object is stored within a <code>Resolver</code> so that it ",
        "23": " * can be retrieved using a string that matches its pattern. Any",
        "24": " * object that extends this can be inserted into the resolver and",
        "25": " * retrieved using a string that matches its pattern. For example",
        "26": " * take the following pattern \"*.html\" this will match the string",
        "27": " * \"/index.html\" or \"readme.html\". This object should be extended",
        "28": " * to add more XML attributes and elements, which can be retrieved",
        "29": " * when the <code>Match</code> object is retrieve from a resolver."
      },
      "id": 125752615,
      "filename": "Match.java"
    },
    {
      "repo": "https://bitbucket.org/xiangshen/tecandorid",
      "language": "Java",
      "linescount": 45,
      "location": "/TecAndroidCommon/src/org/simpleframework/xml/util",
      "name": "tecandorid",
      "url": "https://searchcode.com/codesearch/view/129085041/",
      "md5hash": "90e7f32b8cfcfe8fc5e4584a2fdb9562",
      "lines": {
        "32": " */",
        "1": "/*",
        "2": " * Match.java March 2002",
        "37": "    * pattern can consist of a \"*\" character and a \"?\" character",
        "38": "    * to match the pattern. Implementations of this class should",
        "33": "public interface Match {",
        "40": "    * ",
        "41": "    * @return this returns the pattern that is to be matched",
        "22": " * This object is stored within a <code>Resolver</code> so that it ",
        "23": " * can be retrieved using a string that matches its pattern. Any",
        "24": " * object that extends this can be inserted into the resolver and",
        "25": " * retrieved using a string that matches its pattern. For example",
        "26": " * take the following pattern \"*.html\" this will match the string",
        "27": " * \"/index.html\" or \"readme.html\". This object should be extended",
        "28": " * to add more XML attributes and elements, which can be retrieved",
        "29": " * when the <code>Match</code> object is retrieve from a resolver."
      },
      "id": 129085041,
      "filename": "Match.java"
    },
    {
      "repo": "https://bitbucket.org/xiangshen/tec_jgroups",
      "language": "Java",
      "linescount": 45,
      "location": "/TecAndroidCommon/src/org/simpleframework/xml/util",
      "name": "tec_jgroups",
      "url": "https://searchcode.com/codesearch/view/136470229/",
      "md5hash": "90e7f32b8cfcfe8fc5e4584a2fdb9562",
      "lines": {
        "32": " */",
        "1": "/*",
        "2": " * Match.java March 2002",
        "37": "    * pattern can consist of a \"*\" character and a \"?\" character",
        "38": "    * to match the pattern. Implementations of this class should",
        "33": "public interface Match {",
        "40": "    * ",
        "41": "    * @return this returns the pattern that is to be matched",
        "22": " * This object is stored within a <code>Resolver</code> so that it ",
        "23": " * can be retrieved using a string that matches its pattern. Any",
        "24": " * object that extends this can be inserted into the resolver and",
        "25": " * retrieved using a string that matches its pattern. For example",
        "26": " * take the following pattern \"*.html\" this will match the string",
        "27": " * \"/index.html\" or \"readme.html\". This object should be extended",
        "28": " * to add more XML attributes and elements, which can be retrieved",
        "29": " * when the <code>Match</code> object is retrieve from a resolver."
      },
      "id": 136470229,
      "filename": "Match.java"
    },
    {
      "repo": "https://bitbucket.org/jpfcontinuity/jpf-continuity",
      "language": "Java",
      "linescount": 276,
      "location": "/src/main/gov/nasa/jpf/simplify",
      "name": "jpf-continuity",
      "url": "https://searchcode.com/codesearch/view/76402509/",
      "md5hash": "e47597806b83ff5f09393258d1409d60",
      "lines": {
        "32": "//       filling in any vars with their values from the match.",
        "33": "//",
        "37": "//     binds x-->z and produces \"t = (y * z)\"",
        "38": "public class Match {",
        "39": "  public static MatchData match(RealConstraint pattern, RealConstraint constraint) {",
        "40": "    MatchData data = new MatchData();",
        "41": "    match(pattern, constraint, data);",
        "42": "    return data;",
        "44": "",
        "45": "  public static MatchData match(RealExpression pattern, RealExpression constraint) {",
        "46": "    MatchData data = new MatchData();",
        "27": "//   means",
        "28": "//     - recursively match \"realExprPattern\" against subexpressions of",
        "30": "//       in \"vars\" as varibles to be bound.",
        "31": "//     - When a match occurs, replace it with \"realExprResult\","
      },
      "id": 76402509,
      "filename": "Match.java"
    },
    {
      "repo": "https://github.com/denki/openttt.git",
      "language": "Java",
      "linescount": 447,
      "location": "/src/database/match",
      "name": "openttt",
      "url": "https://searchcode.com/codesearch/view/71473124/",
      "md5hash": "e0e7a58c6b1912726ae715aebebbaa03",
      "lines": {
        "32": "",
        "1": "package database.match;",
        "2": "",
        "33": "\tprivate List<Match> submatches;",
        "72": "\t\t\twinner.addMatch(this);",
        "73": "\t\t\tloser.addMatch(this);",
        "71": "\t\t\tloser = rightPlayer;",
        "45": "\t */",
        "46": "\tpublic Match(double d, int group, Player player, Player player2) {",
        "15": "/**",
        "16": " * Represents a match of two players",
        "20": " */",
        "21": "public class Match extends Edge<Player> implements Comparable<Match> {",
        "155": "\t */",
        "156": "\tpublic boolean equals(Match g) {",
        "61": "\t */",
        "62": "\tpublic Match(Player player, Player player2) {"
      },
      "id": 71473124,
      "filename": "Match.java"
    },
    {
      "repo": "https://github.com/LorenzoBettini/buckminster.git",
      "language": "Java",
      "linescount": 184,
      "location": "/org.eclipse.buckminster.model.common/src/org/eclipse/buckminster/model/common",
      "name": "buckminster",
      "url": "https://searchcode.com/codesearch/view/72237578/",
      "md5hash": "e386acdef497568bbf7d0b27df66c45d",
      "lines": {
        "130": "\t * Sets the value of the '",
        "131": "\t * {@link org.eclipse.buckminster.model.common.Match#getPattern",
        "13": " * <!-- begin-user-doc --> A representation of the model object '",
        "14": " * <em><b>Match</b></em>'. <!-- end-user-doc -->",
        "143": "\t * Sets the value of the '",
        "144": "\t * {@link org.eclipse.buckminster.model.common.Match#isQuotePattern",
        "18": " * <ul>",
        "19": " * <li>{@link org.eclipse.buckminster.model.common.Match#getPattern <em>Pattern",
        "20": " * </em>}</li>",
        "21": " * <li>{@link org.eclipse.buckminster.model.common.Match#isQuotePattern <em>",
        "22": " * Quote Pattern</em>}</li>",
        "23": " * <li>{@link org.eclipse.buckminster.model.common.Match#getReplacement <em>",
        "24": " * Replacement</em>}</li>",
        "25": " * <li>{@link org.eclipse.buckminster.model.common.Match#getCompiledPattern <em>",
        "29": " * ",
        "30": " * @see org.eclipse.buckminster.model.common.CommonPackage#getMatch()"
      },
      "id": 72237578,
      "filename": "Match.java"
    },
    {
      "repo": "https://github.com/Kaibin/Football_Android.git",
      "language": "Java",
      "linescount": 711,
      "location": "/src/com/orange/score/model/match",
      "name": "Football_Android",
      "url": "https://searchcode.com/codesearch/view/75114854/",
      "md5hash": "c225d3ae0308ab243eeee503abf039d6",
      "lines": {
        "1": "",
        "2": "package com.orange.score.model.match;",
        "35": "\tprivate static final String TAG = \"Match\";",
        "36": "\t",
        "37": "\tpublic String matchId;",
        "34": "",
        "14": "",
        "15": "public class Match implements Comparable<Match>{",
        "16": "",
        "17": "\tprivate static final int MATCH_DATE_LENGTH = 14;",
        "183": "    ",
        "184": "\tpublic String getMatchId() {",
        "185": "\t\treturn matchId;",
        "186": "\t}",
        "187": "\t",
        "188": "\tpublic void setMatchId(String matchId) {",
        "189": "\t\tthis.matchId = matchId;"
      },
      "id": 75114854,
      "filename": "Match.java"
    },
    {
      "repo": "https://github.com/ljnelson/objexj.git",
      "language": "Java",
      "linescount": 90,
      "location": "/src/main/java/com/edugility/objexj/engine",
      "name": "objexj",
      "url": "https://searchcode.com/codesearch/view/72785836/",
      "md5hash": "49753ccca32f20034ea86af603e5a7b9",
      "lines": {
        "64": "  /**",
        "65": "   * Calls {@link InstructionContext#match()} when invoked.",
        "34": " * An {@link Instruction} that causes an {@link InstructionContext} to",
        "35": " * be {@linkplain InstructionContext#match() placed into the match",
        "46": " *",
        "47": " * @see InstructionContext#match()",
        "48": " */",
        "49": "public class Match<T> extends Instruction<T> {",
        "82": "    }",
        "83": "    context.match();",
        "57": "  /**",
        "58": "   * Creates a new {@link Match} instruction.",
        "59": "   */",
        "60": "  public Match() {"
      },
      "id": 72785836,
      "filename": "Match.java"
    },
    {
      "repo": "https://gitlab.com/jforge/pmd.git",
      "language": "Java",
      "linescount": 132,
      "location": "/pmd-core/src/main/java/net/sourceforge/pmd/cpd",
      "name": "pmd",
      "url": "https://searchcode.com/codesearch/view/115084268/",
      "md5hash": "fc07e1f7598931eca725d37df06030c7",
      "lines": {
        "32": "    \tpublic int compare(Match ma, Match mb) {",
        "33": "    \t\tif (ma.getLabel() == null) {",
        "44": "        public int compare(Match ma, Match mb) {",
        "42": "    ",
        "43": "    public static final Comparator<Match> LENGTH_COMPARATOR = new Comparator<Match>() {",
        "12": "",
        "13": "public class Match implements Comparable<Match> {",
        "18": "    ",
        "19": "    public static final Comparator<Match> MATCHES_COMPARATOR = new Comparator<Match>() {",
        "20": "    \tpublic int compare(Match ma, Match mb) {",
        "21": "    \t\treturn mb.getMarkCount() - ma.getMarkCount();",
        "24": "    ",
        "25": "    public static final Comparator<Match> LINES_COMPARATOR = new Comparator<Match>() {",
        "26": "    \tpublic int compare(Match ma, Match mb) {",
        "27": "    \t\treturn mb.getLineCount() - ma.getLineCount();",
        "30": "    ",
        "31": "    public static final Comparator<Match> LABEL_COMPARATOR = new Comparator<Match>() {"
      },
      "id": 115084268,
      "filename": "Match.java"
    },
    {
      "repo": "https://github.com/YahorSimanau/gherkin.git",
      "language": "Java",
      "linescount": 34,
      "location": "/java/src/main/java/gherkin/formatter/model",
      "name": "gherkin",
      "url": "https://searchcode.com/codesearch/view/73997401/",
      "md5hash": "2a46b8f561ff4fd90085260d76c3de40",
      "lines": {
        "16": "",
        "17": "    public Match(List<Argument> arguments, String location) {",
        "30": "    public void replay(Reporter reporter) {",
        "9": "",
        "10": "public class Match extends Mappable {",
        "31": "        reporter.match(this);",
        "14": "    private final String location;",
        "15": "    public static final Match UNDEFINED = new Match(Collections.<Argument>emptyList(), null);"
      },
      "id": 73997401,
      "filename": "Match.java"
    },
    {
      "repo": "https://adempiere.svn.codeplex.com/svn",
      "language": "Java",
      "linescount": 463,
      "location": "/adempiereSource/client/src/org/compiere/apps/form",
      "name": "adempiere",
      "url": "https://searchcode.com/codesearch/view/116801149/",
      "md5hash": "b2f25ad4fff9bd8ef58d45aeb0b73860",
      "lines": {
        "38": "",
        "39": "public class Match",
        "42": "\t/**\tLogger\t\t\t*/",
        "43": "\tprivate static CLogger log = CLogger.getCLogger(Match.class);",
        "44": "",
        "45": "\t/** Match Options           */",
        "46": "\tprivate String[] m_matchOptions = new String[] {",
        "47": "\t\tMsg.getElement(Env.getCtx(), \"C_Invoice_ID\", false),",
        "49": "\t\tMsg.getElement(Env.getCtx(), \"C_Order_ID\", false) };",
        "50": "\tprivate static final int\t\tMATCH_INVOICE = 0;",
        "51": "\tprivate static final int\t\tMATCH_SHIPMENT = 1;",
        "27": "import org.compiere.model.MInvoiceLine;",
        "28": "import org.compiere.model.MMatchInv;",
        "29": "import org.compiere.model.MMatchPO;",
        "30": "import org.compiere.model.MOrderLine;"
      },
      "id": 116801149,
      "filename": "Match.java"
    },
    {
      "repo": "https://github.com/ICGog/MapReduce-Thorn.git",
      "language": "Java",
      "linescount": 104,
      "location": "/lib/fisher/src/fisher/syn",
      "name": "MapReduce-Thorn",
      "url": "https://searchcode.com/codesearch/view/112072628/",
      "md5hash": "8f4b376d452c475eea708972b03e12d9",
      "lines": {
        "96": "public Syntax internalDeepCopy(Token start, Token end)  {",
        "48": "return \"Match(\" + ",
        "97": "Syntax copy = new Match(start, end, ",
        "38": "public String details(){",
        "39": "return \"Match(\"",
        "47": ") {",
        "12": "import fisher.statics.purity.PurityStatus;",
        "13": "public  class Match extends Cmd implements ProcMember {",
        "15": "public final List<Case> cases;",
        "16": "public Match(Token start, Token end, Cmd subject, List<Case> cases){",
        "50": "+ \")\";}",
        "51": "public String toString() {return \"match \" + subject + \"{\" + sep(cases, \" | \") + \"} \";}",
        "26": "public <ARG,  EXN extends Exception> void accept(Walker<ARG, EXN> vis, ARG arg) throws EXN {",
        "27": "    vis.visit((Match)this, arg);",
        "29": "public <ARG, RET,  EXN extends Exception> RET accept(VisitCmd<ARG,RET,  EXN> vis, ARG arg) throws EXN {",
        "30": "   return vis.visit((Match)this, arg);"
      },
      "id": 112072628,
      "filename": "Match.java"
    },
    {
      "repo": "https://wardphotodirectory.svn.codeplex.com/svn",
      "language": "Java",
      "linescount": 223,
      "location": "/1.x/nfop/xerces-2_0_2/src/org/apache/xerces/impl/xpath/regex",
      "name": "wardphotodirectory",
      "url": "https://searchcode.com/codesearch/view/117210479/",
      "md5hash": "5da81b5d163a7cc38336602f61d29fa8",
      "lines": {
        "64": " * An instance of this class has ranges captured in matching.",
        "65": " *",
        "66": " * @see RegularExpression#matches(char[], int, int, Match)",
        "67": " * @see RegularExpression#matches(char[], Match)",
        "68": " * @see RegularExpression#matches(java.text.CharacterIterator, Match)",
        "69": " * @see RegularExpression#matches(java.lang.String, int, int, Match)",
        "70": " * @see RegularExpression#matches(java.lang.String, Match)",
        "71": " * @author TAMURA Kent &lt;kent@trl.ibm.co.jp&gt;",
        "200": "     * Return an substring of the target text matched to specified regular expression group.",
        "171": "    /**",
        "172": "     * Return a start position in the target text matched to specified regular expression group.",
        "185": "    /**",
        "186": "     * Return an end position in the target text matched to specified regular expression group.",
        "199": "    /**",
        "63": " * "
      },
      "id": 117210479,
      "filename": "Match.java"
    },
    {
      "repo": "https://bitbucket.org/tomers77/ontobuilderdev",
      "language": "Java",
      "linescount": 141,
      "location": "/ontobuilder.matching/src/ac/technion/iem/ontobuilder/matching/match",
      "name": "ontobuilderdev",
      "url": "https://searchcode.com/codesearch/view/121187285/",
      "md5hash": "940f951a4997332c3ec9c04c044f0e22",
      "lines": {
        "1": "package ac.technion.iem.ontobuilder.matching.match;",
        "2": "",
        "99": "     * A Match is equal if the terms are equal",
        "132": "\tpublic Match clone(){",
        "133": "\t\tMatch m = new Match(this.targetTerm,this.candidateTerm,this.effectiveness);",
        "102": "    {",
        "7": "/**",
        "8": " * <p>Title: Match</p>",
        "9": " */",
        "10": "public class Match",
        "103": "        if (!(o instanceof Match))",
        "98": "    /**",
        "17": "    /**",
        "18": "     * Constructs a Match",
        "131": "\t",
        "134": "\t\tif (props!=null)"
      },
      "id": 121187285,
      "filename": "Match.java"
    },
    {
      "repo": "git://github.com/jOOQ/jOOX.git",
      "language": "Java",
      "linescount": 2233,
      "location": "/jOOX/src/main/java/org/joox",
      "name": "jOOX",
      "url": "https://searchcode.com/codesearch/view/16547749/",
      "md5hash": "5d7a4744b288e23945e1dc9a0a6fd84e",
      "lines": {
        "144": "     * Get a list of namespace prefixes of the elements in the current set of",
        "150": "     * Get a list of namespace prefixes of the elements at given indexes in the",
        "134": "     * Get a namespace URI of the element at a given index in the current set of",
        "135": "     * matched elements.",
        "72": " */",
        "73": "public interface Match extends Iterable<Element> {",
        "151": "     * current set of matched elements.",
        "79": "    /**",
        "80": "     * Get a new Match with added namespace configuration for subsequent XPath",
        "145": "     * matched elements.",
        "86": "     * @param namespaceURI A namespace URI",
        "87": "     * @return A modified <code>Match</code>",
        "156": "     * Get the namespace prefix of the first element in the current set of",
        "157": "     * matched elements.",
        "62": " * elements without duplicates and provides useful operations upon all of the",
        "63": " * contained elements. The wrapped DOM elements have been previously \"matched\""
      },
      "id": 16547749,
      "filename": "Match.java"
    },
    {
      "repo": "https://bitbucket.org/lazopard/fastr",
      "language": "Java",
      "linescount": 282,
      "location": "/com.oracle.truffle.r.nodes/src/com/oracle/truffle/r/nodes/builtin/base",
      "name": "FastR",
      "url": "https://searchcode.com/codesearch/view/91897252/",
      "md5hash": "08db013a421e605df917a75c028d5c37",
      "lines": {
        "64": "    @SuppressWarnings(\"unused\")",
        "65": "    public RIntVector match(VirtualFrame frame, RNull x, RAbstractVector table, Object nomatchObj, Object incomparables) {",
        "36": "",
        "37": "@RBuiltin(name = \"match\", kind = INTERNAL)",
        "38": "public abstract class Match extends RBuiltinNode {",
        "39": "",
        "71": "    public RIntVector match(VirtualFrame frame, RAbstractVector x, RNull table, Object nomatchObj, Object incomparables) {",
        "76": "    @SuppressWarnings(\"unused\")",
        "77": "    public RIntVector match(VirtualFrame frame, RAbstractIntVector x, RAbstractIntVector table, Object nomatchObj, Object incomparables) {",
        "78": "        controlVisibility();",
        "79": "        int nomatch = castInt(frame, nomatchObj);",
        "80": "        int[] result = initResult(x.getLength(), nomatch);",
        "81": "        boolean matchAll = true;",
        "82": "        for (int i = 0; i < result.length; ++i) {",
        "70": "    @SuppressWarnings(\"unused\")"
      },
      "id": 91897252,
      "filename": "Match.java"
    },
    {
      "repo": "https://github.com/nwalters512/the-blue-alliance-android.git",
      "language": "Java",
      "linescount": 470,
      "location": "/android/src/main/java/com/thebluealliance/androidclient/models",
      "name": "the-blue-alliance-android",
      "url": "https://searchcode.com/codesearch/view/93342462/",
      "md5hash": "e472ed6dde00626348e7cb3496fefdf0",
      "lines": {
        "32": "",
        "33": "    public Match() {",
        "34": "        super(Database.TABLE_MATCHES);",
        "35": "        year = -1;",
        "36": "        type = MatchHelper.TYPE.NONE;",
        "40": "",
        "41": "    public Match(String key, MatchHelper.TYPE type, int matchNumber, int setNumber, JsonObject alliances, String timeString, long timestamp, JsonArray videos, long last_updated) {",
        "42": "        super(Database.TABLE_MATCHES);",
        "15": "import com.thebluealliance.androidclient.datafeed.TBAv2;",
        "16": "import com.thebluealliance.androidclient.helpers.MatchHelper;",
        "17": "import com.thebluealliance.androidclient.helpers.ModelInflater;",
        "18": "import com.thebluealliance.androidclient.listitems.MatchListElement;",
        "24": "",
        "25": "public class Match extends BasicModel<Match> {",
        "28": "    private int year;",
        "29": "    private MatchHelper.TYPE type;"
      },
      "id": 93342462,
      "filename": "Match.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 64791,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 45536,
      "source": "Github",
      "id": 2
    },
    {
      "count": 10924,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 1598,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 582,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 226,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 208,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 161,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 43,
      "source": "Gitorious",
      "id": 10
    }
  ]
}