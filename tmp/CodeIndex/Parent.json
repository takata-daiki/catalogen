{
  "matchterm": "Parent",
  "previouspage": null,
  "searchterm": "Parent",
  "query": "Parent",
  "language_filters": [
    {
      "count": 187490,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 187490,
  "results": [
    {
      "repo": "https://github.com/gbervik/Resteasy.git",
      "language": "Java",
      "linescount": 94,
      "location": "/jaxrs/providers/test-all-jaxb/src/test/java/org/jboss/resteasy/test/providers/jaxb",
      "name": "Resteasy",
      "url": "https://searchcode.com/codesearch/view/70900340/",
      "md5hash": "3a749baa22146c7fb0071d3410c00453",
      "lines": {
        "33": "",
        "34": "   public Parent(String name)",
        "86": "   {",
        "12": "/**",
        "13": " * A Parent.",
        "80": "   {",
        "81": "      child.setParent(this);",
        "19": "@XmlAccessorType(XmlAccessType.FIELD)",
        "20": "@XmlType(name = \"parentType\")",
        "21": "public class Parent",
        "22": "{",
        "87": "      Parent parent = new Parent(name);",
        "88": "      parent.addChild(new Child(\"Child 1\"));",
        "89": "      parent.addChild(new Child(\"Child 2\"));",
        "90": "      parent.addChild(new Child(\"Child 3\"));"
      },
      "id": 70900340,
      "filename": "Parent.java"
    },
    {
      "repo": "https://github.com/anujojha/MyExamples.git",
      "language": "Java",
      "linescount": 44,
      "location": "/src/com/java/basics",
      "name": "MyExamples",
      "url": "https://searchcode.com/codesearch/view/73518436/",
      "md5hash": "696a325cf8726c76b461b6c9730abf34",
      "lines": {
        "2": "",
        "3": "public class Parent {",
        "36": "\t\tParent p = new Parent();",
        "5": "\t",
        "6": "\tpublic Parent(){",
        "7": "\t\t",
        "8": "\t\tSystem.out.println(\"parent no arg const\");",
        "17": "\tpublic String getName(){",
        "18": "\t\tSystem.out.println(\"inside parent getname\");",
        "35": "\t\t",
        "38": "\t\t",
        "37": "\t\tSystem.out.println(\"inside parent main\");"
      },
      "id": 73518436,
      "filename": "Parent.java"
    },
    {
      "repo": "https://github.com/MSO20102011/MSO20102011.git",
      "language": "Java",
      "linescount": 82,
      "location": "/src",
      "name": "MSO20102011",
      "url": "https://searchcode.com/codesearch/view/77668611/",
      "md5hash": "49ae5ab4d933c1ac07f2c6c0eda23e76",
      "lines": {
        "3": "",
        "4": "public class Parent extends UserDecorator {",
        "11": "",
        "12": "    public Parent(User u) {",
        "47": "",
        "48": "    /* Check if the parent is available to supervise on the given date. */",
        "17": "",
        "18": "    /* Adds a child to the parent's children */",
        "22": "",
        "23": "    /* Remove a child from the parent's children */",
        "27": "",
        "28": "    /* Checks if the given Child is a child of this parent. */"
      },
      "id": 77668611,
      "filename": "Parent.java"
    },
    {
      "repo": "https://bitbucket.org/rbair/rbair-controls-8",
      "language": "Java",
      "linescount": 1717,
      "location": "/javafx-ui-common/src/javafx/scene",
      "name": "rbair-controls-8",
      "url": "https://searchcode.com/codesearch/view/103092506/",
      "md5hash": "d104c4b3a827eff904dcdd1a9f4c4419",
      "lines": {
        "96": "     * Do not populate list of removed children when its number exceeds threshold,",
        "97": "     * but mark whole parent dirty.",
        "272": "",
        "73": " * <p>",
        "74": " * There are two direct concrete Parent subclasses",
        "273": "                    // update the parent and scene for each new node",
        "173": "                Node n = children.get(idx);",
        "174": "                if (n.getParent() != this) {",
        "175": "                    java.lang.System.err.println(\"*** this=\" + this + \" validatePG children[\" + idx + \"].parent= \" + n.getParent());",
        "176": "                    assertionFailed = true;",
        "81": " */",
        "82": "public abstract class Parent extends Node {",
        "86": "    // If set to true, generate a warning message whenever adding a node to a",
        "87": "    // parent if it is currently a child of another parent.",
        "218": "     * See the class documentation for {@link Node} for scene graph structure",
        "219": "     * restrictions on setting a {@link Parent}'s children ObservableList."
      },
      "id": 103092506,
      "filename": "Parent.java"
    },
    {
      "repo": "https://bitbucket.org/jon_black/connector-eclipse",
      "language": "Java",
      "linescount": 240,
      "location": "/org.jdom_jaxen/source-bundle/org/jdom",
      "name": "connector-eclipse",
      "url": "https://searchcode.com/codesearch/view/102779169/",
      "md5hash": "7e5c86889441cc55b24b187259b64b0c",
      "lines": {
        "160": "     * Removes all content from this parent and returns the detached",
        "2": "",
        "3": " $Id: Parent.java,v 1.12 2004/08/31 21:47:51 jhunter Exp $",
        "162": "     *",
        "133": "     *",
        "134": "     * @return a list of the content of the parent",
        "135": "     * @throws IllegalStateException if parent is a Document",
        "136": "     *         and the root element is not set",
        "141": "     * Returns as a {@link java.util.List} the content of",
        "142": "     * this parent that matches the supplied filter. The returned list is",
        "163": "     * @return list of the old content detached from this parent",
        "152": "     * @param  filter filter to apply",
        "153": "     * @return a list of the content of the parent matching the filter",
        "154": "     * @throws IllegalStateException if parent is a Document",
        "155": "     *         and the root element is not set",
        "159": "    /**"
      },
      "id": 102779169,
      "filename": "Parent.java"
    },
    {
      "repo": "https://github.com/luishpm/prueba.git",
      "language": "Java",
      "linescount": 240,
      "location": "/content2Web/src/jwm/jdom",
      "name": "prueba",
      "url": "https://searchcode.com/codesearch/view/111233258/",
      "md5hash": "1f6f2a9e7f0c726a81af7e37ed51b0de",
      "lines": {
        "160": "     * Removes all content from this parent and returns the detached",
        "2": "",
        "3": " $Id: Parent.java,v 1.1 2006/12/04 16:56:31 carlos Exp $",
        "162": "     *",
        "133": "     *",
        "134": "     * @return a list of the content of the parent",
        "135": "     * @throws IllegalStateException if parent is a Document",
        "136": "     *         and the root element is not set",
        "141": "     * Returns as a {@link java.util.List} the content of",
        "142": "     * this parent that matches the supplied filter. The returned list is",
        "163": "     * @return list of the old content detached from this parent",
        "152": "     * @param  filter filter to apply",
        "153": "     * @return a list of the content of the parent matching the filter",
        "154": "     * @throws IllegalStateException if parent is a Document",
        "155": "     *         and the root element is not set",
        "159": "    /**"
      },
      "id": 111233258,
      "filename": "Parent.java"
    },
    {
      "repo": "https://github.com/spn/hibernate-core.git",
      "language": "Java",
      "linescount": 51,
      "location": "/hibernate-core/src/test/java/org/hibernate/test/annotations/onetomany",
      "name": "hibernate-core",
      "url": "https://searchcode.com/codesearch/view/77772100/",
      "md5hash": "a56fce77516cba066e0a0718f285fbf7",
      "lines": {
        "34": "\t\t//a NPE can occurs, but I don't expect equals to be used before pk is set",
        "35": "\t\tif ( obj != null && obj instanceof Parent ) {",
        "36": "\t\t\treturn id.equals( ( (Parent) obj ).id );",
        "37": "\t\t}",
        "46": "\t\t}",
        "47": "\t\tchild.parent = this;",
        "17": "@Entity",
        "18": "public class Parent implements Serializable {",
        "19": "\t@Id",
        "20": "\tpublic ParentPk id;",
        "22": "",
        "23": "\t@OneToMany(cascade = CascadeType.ALL, mappedBy = \"parent\")"
      },
      "id": 77772100,
      "filename": "Parent.java"
    },
    {
      "repo": "https://bitbucket.org/openjfxmirrors/openjfx-sandbox-8-controls-rt",
      "language": "Java",
      "linescount": 1736,
      "location": "/javafx-ui-common/src/javafx/scene",
      "name": "openjfx-sandbox-8-controls-rt",
      "url": "https://searchcode.com/codesearch/view/60435375/",
      "md5hash": "2340920833fa73b1549596790dc35cc9",
      "lines": {
        "71": " * <p>",
        "168": "                Node n = children.get(idx);",
        "169": "                if (n.getParent() != this) {",
        "170": "                    java.lang.System.err.println(\"*** this=\" + this + \" validatePG children[\" + idx + \"].parent= \" + n.getParent());",
        "171": "                    assertionFailed = true;",
        "268": "",
        "269": "                    // update the parent and scene for each new node",
        "78": " */",
        "79": "public abstract class Parent extends Node {",
        "72": " * There are two direct concrete Parent subclasses",
        "83": "    // If set to true, generate a warning message whenever adding a node to a",
        "84": "    // parent if it is currently a child of another parent.",
        "213": "     * See the class documentation for {@link Node} for scene graph structure",
        "214": "     * restrictions on setting a {@link Parent}'s children ObservableList.",
        "93": "     * Do not populate list of removed children when its number exceeds threshold,",
        "94": "     * but mark whole parent dirty."
      },
      "id": 60435375,
      "filename": "Parent.java"
    },
    {
      "repo": "https://bitbucket.org/shemnon/openjfx-8-master-rt",
      "language": "Java",
      "linescount": 1720,
      "location": "/javafx-ui-common/src/javafx/scene",
      "name": "openjfx-8-master-rt",
      "url": "https://searchcode.com/codesearch/view/64649957/",
      "md5hash": "366b243b60d80439d09a07c3a75f5f8e",
      "lines": {
        "96": "     * but mark whole parent dirty.",
        "272": "                    // update the parent and scene for each new node",
        "72": " * <p>",
        "73": " * There are two direct concrete Parent subclasses",
        "172": "                Node n = children.get(idx);",
        "173": "                if (n.getParent() != this) {",
        "174": "                    java.lang.System.err.println(\"*** this=\" + this + \" validatePG children[\" + idx + \"].parent= \" + n.getParent());",
        "175": "                    assertionFailed = true;",
        "80": " */",
        "81": "public abstract class Parent extends Node {",
        "85": "    // If set to true, generate a warning message whenever adding a node to a",
        "86": "    // parent if it is currently a child of another parent.",
        "217": "     * See the class documentation for {@link Node} for scene graph structure",
        "218": "     * restrictions on setting a {@link Parent}'s children ObservableList.",
        "271": "",
        "95": "     * Do not populate list of removed children when its number exceeds threshold,"
      },
      "id": 64649957,
      "filename": "Parent.java"
    },
    {
      "repo": "https://github.com/nikitochak/ReflRegExAnno.git",
      "language": "Java",
      "linescount": 113,
      "location": "/annotation/src/main/java/com/sirma/itt/javacourse/annotations",
      "name": "ReflRegExAnno",
      "url": "https://searchcode.com/codesearch/view/100147450/",
      "md5hash": "faa783938152a8101bb08ea742a38783",
      "lines": {
        "45": "class Child1 extends Parent {",
        "3": "/**",
        "4": " * The parent class.",
        "41": "/**",
        "42": " * The first class which extends the parent.",
        "12": "",
        "13": "\tpublic Parent(int number) {",
        "44": "@Layout(priority=1)",
        "16": "",
        "17": "\tpublic Parent() {",
        "67": "@Layout(priority=2)",
        "89": "class Child3 extends Parent {",
        "9": "@Layout(priority=0)",
        "88": "@Layout(priority=3)",
        "68": "class Child2 extends Parent {",
        "10": "public class Parent {"
      },
      "id": 100147450,
      "filename": "Parent.java"
    },
    {
      "repo": "https://github.com/kissys/es.git",
      "language": "Java",
      "linescount": 77,
      "location": "/common/src/test/java/com/sishuok/es/tmp/parentchild",
      "name": "es",
      "url": "https://searchcode.com/codesearch/view/92669399/",
      "md5hash": "b0e2122ef6d6b717a2ba5ff5747f5358",
      "lines": {
        "64": "",
        "65": "        if (id != null ? !id.equals(parent.id) : parent.id != null) return false;",
        "27": "",
        "5": " */",
        "6": "package com.sishuok.es.tmp.parentchild;",
        "63": "        Parent parent = (Parent) o;",
        "53": "    public void addChild(Child c) {",
        "22": "@Table(name = \"parent\")",
        "23": "public class Parent {",
        "24": "",
        "54": "        c.setParent(this);",
        "28": "    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, targetEntity = Child.class, mappedBy = \"parent\", orphanRemoval = true)",
        "62": "",
        "21": "@Entity"
      },
      "id": 92669399,
      "filename": "Parent.java"
    },
    {
      "repo": "https://github.com/william081117/hibernate-orm.git",
      "language": "Java",
      "linescount": 97,
      "location": "/hibernate-envers/src/test/java/ee/estonia/entities",
      "name": "hibernate-orm",
      "url": "https://searchcode.com/codesearch/view/96680815/",
      "md5hash": "9b7e83b4462daf98a22caef0438e1775",
      "lines": {
        "34": "",
        "35": "\tpublic Parent(String data, Long id) {",
        "69": "\tpublic String toString() {",
        "70": "\t\treturn \"Parent(id = \" + id + \", data = \" + data + \")\";",
        "49": "\t\tParent that = (Parent) o;",
        "44": "\t\t}",
        "45": "\t\tif ( !(o instanceof Parent) ) {",
        "48": "",
        "17": "@Audited",
        "18": "public class Parent implements Serializable {",
        "27": "",
        "28": "\tpublic Parent() {",
        "30": "",
        "31": "\tpublic Parent(String data) {"
      },
      "id": 96680815,
      "filename": "Parent.java"
    },
    {
      "repo": "https://github.com/iljsan/drools.git",
      "language": "Java",
      "linescount": 45,
      "location": "/drools-compiler/src/test/java/org/drools/compiler",
      "name": "drools",
      "url": "https://searchcode.com/codesearch/view/100218646/",
      "md5hash": "543850b4eb49d5c2b2a6b04dc6e442c4",
      "lines": {
        "32": "     */",
        "33": "    public GrandParent getGrandParent() {",
        "34": "        return grandParent;",
        "35": "    }",
        "37": "    /**",
        "38": "     * @param parent the parent to set",
        "39": "     */",
        "40": "    public void setGrandParent(GrandParent parent) {",
        "41": "        this.grandParent = parent;",
        "42": "    }",
        "18": "",
        "19": "public class Parent extends GrandParent {",
        "20": "    ",
        "21": "    private GrandParent grandParent;",
        "22": ""
      },
      "id": 100218646,
      "filename": "Parent.java"
    },
    {
      "repo": "https://bitbucket.org/kayabendroth/connector-eclipse",
      "language": "Java",
      "linescount": 240,
      "location": "/org.jdom_jaxen/source-bundle/org/jdom",
      "name": "connector-eclipse",
      "url": "https://searchcode.com/codesearch/view/61687261/",
      "md5hash": "7e5c86889441cc55b24b187259b64b0c",
      "lines": {
        "160": "     * Removes all content from this parent and returns the detached",
        "2": "",
        "3": " $Id: Parent.java,v 1.12 2004/08/31 21:47:51 jhunter Exp $",
        "162": "     *",
        "133": "     *",
        "134": "     * @return a list of the content of the parent",
        "135": "     * @throws IllegalStateException if parent is a Document",
        "136": "     *         and the root element is not set",
        "141": "     * Returns as a {@link java.util.List} the content of",
        "142": "     * this parent that matches the supplied filter. The returned list is",
        "163": "     * @return list of the old content detached from this parent",
        "152": "     * @param  filter filter to apply",
        "153": "     * @return a list of the content of the parent matching the filter",
        "154": "     * @throws IllegalStateException if parent is a Document",
        "155": "     *         and the root element is not set",
        "159": "    /**"
      },
      "id": 61687261,
      "filename": "Parent.java"
    },
    {
      "repo": "https://bitbucket.org/shemnon/openjfx-rt",
      "language": "Java",
      "linescount": 1699,
      "location": "/javafx-ui-common/src/javafx/scene",
      "name": "openjfx-rt",
      "url": "https://searchcode.com/codesearch/view/132891153/",
      "md5hash": "f1996e73660c471444ba7f940c5da851",
      "lines": {
        "71": " * <p>",
        "168": "                Node n = children.get(idx);",
        "169": "                if (n.getParent() != this) {",
        "170": "                    java.lang.System.err.println(\"*** this=\" + this + \" validatePG children[\" + idx + \"].parent= \" + n.getParent());",
        "171": "                    assertionFailed = true;",
        "268": "",
        "269": "                    // update the parent and scene for each new node",
        "78": " */",
        "79": "public abstract class Parent extends Node {",
        "72": " * There are two direct concrete Parent subclasses",
        "83": "    // If set to true, generate a warning message whenever adding a node to a",
        "84": "    // parent if it is currently a child of another parent.",
        "213": "     * See the class documentation for {@link Node} for scene graph structure",
        "214": "     * restrictions on setting a {@link Parent}'s children ObservableList.",
        "93": "     * Do not populate list of removed children when its number exceeds threshold,",
        "94": "     * but mark whole parent dirty."
      },
      "id": 132891153,
      "filename": "Parent.java"
    },
    {
      "repo": "https://bitbucket.org/carrot_garden/openjfx-8-master-rt",
      "language": "Java",
      "linescount": 1695,
      "location": "/javafx-ui-common/src/javafx/scene",
      "name": "openjfx-8-master-rt",
      "url": "https://searchcode.com/codesearch/view/136761429/",
      "md5hash": "adfc2df28fb6793153263017041b8818",
      "lines": {
        "96": "     * but mark whole parent dirty.",
        "73": " * <p>",
        "74": " * There are two direct concrete Parent subclasses",
        "171": "                if (n.getParent() != this) {",
        "172": "                    java.lang.System.err.println(\"*** this=\" + this + \" validatePG children[\" + idx + \"].parent= \" + n.getParent());",
        "173": "                    assertionFailed = true;",
        "270": "",
        "271": "                    // update the parent and scene for each new node",
        "80": " */",
        "81": "public abstract class Parent extends Node {",
        "85": "    // If set to true, generate a warning message whenever adding a node to a",
        "86": "    // parent if it is currently a child of another parent.",
        "215": "     * See the class documentation for {@link Node} for scene graph structure",
        "216": "     * restrictions on setting a {@link Parent}'s children ObservableList.",
        "170": "                Node n = children.get(idx);",
        "95": "     * Do not populate list of removed children when its number exceeds threshold,"
      },
      "id": 136761429,
      "filename": "Parent.java"
    },
    {
      "repo": "https://bitbucket.org/carrot_garden/openjfx-8-graphics-rt",
      "language": "Java",
      "linescount": 1694,
      "location": "/javafx-ui-common/src/javafx/scene",
      "name": "openjfx-8-graphics-rt",
      "url": "https://searchcode.com/codesearch/view/136764557/",
      "md5hash": "b77167c2fa76e66009943315679ff42e",
      "lines": {
        "96": "     * but mark whole parent dirty.",
        "73": " * <p>",
        "74": " * There are two direct concrete Parent subclasses",
        "171": "                if (n.getParent() != this) {",
        "172": "                    java.lang.System.err.println(\"*** this=\" + this + \" validatePG children[\" + idx + \"].parent= \" + n.getParent());",
        "173": "                    assertionFailed = true;",
        "270": "",
        "271": "                    // update the parent and scene for each new node",
        "80": " */",
        "81": "public abstract class Parent extends Node {",
        "85": "    // If set to true, generate a warning message whenever adding a node to a",
        "86": "    // parent if it is currently a child of another parent.",
        "215": "     * See the class documentation for {@link Node} for scene graph structure",
        "216": "     * restrictions on setting a {@link Parent}'s children ObservableList.",
        "170": "                Node n = children.get(idx);",
        "95": "     * Do not populate list of removed children when its number exceeds threshold,"
      },
      "id": 136764557,
      "filename": "Parent.java"
    },
    {
      "repo": "https://bitbucket.org/spaced30/connector-eclipse",
      "language": "Java",
      "linescount": 240,
      "location": "/org.jdom_jaxen/source-bundle/org/jdom",
      "name": "connector-eclipse",
      "url": "https://searchcode.com/codesearch/view/125837897/",
      "md5hash": "7e5c86889441cc55b24b187259b64b0c",
      "lines": {
        "160": "     * Removes all content from this parent and returns the detached",
        "2": "",
        "3": " $Id: Parent.java,v 1.12 2004/08/31 21:47:51 jhunter Exp $",
        "162": "     *",
        "133": "     *",
        "134": "     * @return a list of the content of the parent",
        "135": "     * @throws IllegalStateException if parent is a Document",
        "136": "     *         and the root element is not set",
        "141": "     * Returns as a {@link java.util.List} the content of",
        "142": "     * this parent that matches the supplied filter. The returned list is",
        "163": "     * @return list of the old content detached from this parent",
        "152": "     * @param  filter filter to apply",
        "153": "     * @return a list of the content of the parent matching the filter",
        "154": "     * @throws IllegalStateException if parent is a Document",
        "155": "     *         and the root element is not set",
        "159": "    /**"
      },
      "id": 125837897,
      "filename": "Parent.java"
    },
    {
      "repo": "https://bitbucket.org/byplayer/connector-eclipse",
      "language": "Java",
      "linescount": 240,
      "location": "/org.jdom_jaxen/source-bundle/org/jdom",
      "name": "connector-eclipse",
      "url": "https://searchcode.com/codesearch/view/132330927/",
      "md5hash": "7e5c86889441cc55b24b187259b64b0c",
      "lines": {
        "160": "     * Removes all content from this parent and returns the detached",
        "2": "",
        "3": " $Id: Parent.java,v 1.12 2004/08/31 21:47:51 jhunter Exp $",
        "162": "     *",
        "133": "     *",
        "134": "     * @return a list of the content of the parent",
        "135": "     * @throws IllegalStateException if parent is a Document",
        "136": "     *         and the root element is not set",
        "141": "     * Returns as a {@link java.util.List} the content of",
        "142": "     * this parent that matches the supplied filter. The returned list is",
        "163": "     * @return list of the old content detached from this parent",
        "152": "     * @param  filter filter to apply",
        "153": "     * @return a list of the content of the parent matching the filter",
        "154": "     * @throws IllegalStateException if parent is a Document",
        "155": "     *         and the root element is not set",
        "159": "    /**"
      },
      "id": 132330927,
      "filename": "Parent.java"
    },
    {
      "repo": "https://bitbucket.org/grze/euconnector-eclipse",
      "language": "Java",
      "linescount": 240,
      "location": "/org.jdom_jaxen/source-bundle/org/jdom",
      "name": "euconnector-eclipse",
      "url": "https://searchcode.com/codesearch/view/134409198/",
      "md5hash": "7e5c86889441cc55b24b187259b64b0c",
      "lines": {
        "160": "     * Removes all content from this parent and returns the detached",
        "2": "",
        "3": " $Id: Parent.java,v 1.12 2004/08/31 21:47:51 jhunter Exp $",
        "162": "     *",
        "133": "     *",
        "134": "     * @return a list of the content of the parent",
        "135": "     * @throws IllegalStateException if parent is a Document",
        "136": "     *         and the root element is not set",
        "141": "     * Returns as a {@link java.util.List} the content of",
        "142": "     * this parent that matches the supplied filter. The returned list is",
        "163": "     * @return list of the old content detached from this parent",
        "152": "     * @param  filter filter to apply",
        "153": "     * @return a list of the content of the parent matching the filter",
        "154": "     * @throws IllegalStateException if parent is a Document",
        "155": "     *         and the root element is not set",
        "159": "    /**"
      },
      "id": 134409198,
      "filename": "Parent.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 91311,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 71781,
      "source": "Github",
      "id": 2
    },
    {
      "count": 18707,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 3143,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 1189,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 590,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 488,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 265,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 16,
      "source": "Gitorious",
      "id": 10
    }
  ]
}