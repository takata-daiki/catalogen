{
  "matchterm": "FontTable",
  "previouspage": null,
  "searchterm": "FontTable",
  "query": "FontTable",
  "language_filters": [
    {
      "count": 70,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 70,
  "results": [
    {
      "repo": "https://github.com/mightyfrog/Swing-Properties-Viewer.git",
      "language": "Java",
      "linescount": 211,
      "location": "/src/org/mightyfrog/util/swingpropviewer",
      "name": "Swing-Properties-Viewer",
      "url": "https://searchcode.com/codesearch/view/108445085/",
      "md5hash": "5102d2d200527f716a29142df82a3ac8",
      "lines": {
        "18": " */",
        "19": "class FontTable extends ResourceTable {",
        "40": "    /**",
        "41": "     * Creates a FontTable.",
        "43": "     */",
        "44": "    public FontTable() {",
        "46": "        ",
        "47": "        FontTable.CellRenderer renderer = new FontTable.CellRenderer();"
      },
      "id": 108445085,
      "filename": "FontTable.java"
    },
    {
      "repo": "https://github.com/rmuller/xmlgraphics-mavenized.git",
      "language": "Java",
      "linescount": 185,
      "location": "/fop/src/main/java/org/apache/fop/render/rtf/rtflib/rtfdoc",
      "name": "xmlgraphics-mavenized",
      "url": "https://searchcode.com/codesearch/view/96991361/",
      "md5hash": "5a1f68e36eabf222c8ee2ac1cb89074a",
      "lines": {
        "182": "        fontTable.addElement(family);",
        "156": "            header.write(\"\\\\f\" + i);",
        "183": "    }",
        "142": "    public void writeFonts(RtfHeader header) throws IOException {",
        "143": "        if (fontTable == null || fontTable.size() == 0) {",
        "48": "    /** Used fonts to this vector */",
        "49": "    private Vector fontTable = null;",
        "180": "    private void addFont(String family) {",
        "181": "        fontIndex.put(getFontKey(family), new Integer(fontTable.size()));",
        "150": "",
        "151": "        int len = fontTable.size();",
        "59": "    private RtfFontManager() {",
        "60": "        fontTable = new Vector();",
        "157": "            header.write(\" \" + (String) fontTable.elementAt(i));",
        "126": "",
        "127": "            retVal = fontTable.size() - 1;"
      },
      "id": 96991361,
      "filename": "RtfFontManager.java"
    },
    {
      "repo": "https://github.com/bmorrise/pentaho-reporting.git",
      "language": "Java",
      "linescount": 367,
      "location": "/libraries/libfonts/source/org/pentaho/reporting/libraries/fonts/truetype",
      "name": "pentaho-reporting",
      "url": "https://searchcode.com/codesearch/view/100685554/",
      "md5hash": "c5b843af5d31750e95fbb4e101c57b1b",
      "lines": {
        "96": "    private int length;",
        "97": "    private FontTable table;",
        "290": "        final FontTable table = entry.getTable();",
        "131": "",
        "132": "    public void setTable(final FontTable table)",
        "294": "        }",
        "289": "      {",
        "295": "        final FontTable readTable = readTable(entry);",
        "307": "",
        "308": "  protected FontTable readTable(final TableDirectoryEntry table)",
        "281": "",
        "282": "  public FontTable getTable(final long key) throws IOException",
        "126": "",
        "127": "    public FontTable getTable()"
      },
      "id": 100685554,
      "filename": "TrueTypeFont.java"
    },
    {
      "repo": "https://github.com/skovatch/org.eclipse.swt.git",
      "language": "Java",
      "linescount": 9476,
      "location": "/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom",
      "name": "org.eclipse.swt",
      "url": "https://searchcode.com/codesearch/view/109829399/",
      "md5hash": "c9e100d993f71aeab509f9cc4b5eda36",
      "lines": {
        "834": "\t\theader.append(\";\");",
        "835": "\t\tfor (int i = 1; i < fontTable.size(); i++) {",
        "740": "\tint getFontIndex(Font font) {",
        "741": "\t\tint index = fontTable.indexOf(font);",
        "742": "\t\tif (index == -1) {",
        "743": "\t\t\tindex = fontTable.size();",
        "744": "\t\t\tfontTable.addElement(font);",
        "681": "\t\tstatic final int DEFAULT_BACKGROUND = 1;",
        "682": "\t\tVector colorTable, fontTable;",
        "839": "\t\t\tFontData fd = ((Font)fontTable.elementAt(i)).getFontData()[0];",
        "838": "\t\t\theader.append(\" \");",
        "745": "\t\t}",
        "696": "\t\tcolorTable = new Vector();",
        "697": "\t\tfontTable = new Vector();",
        "699": "\t\tcolorTable.addElement(getBackground());",
        "700": "\t\tfontTable.addElement(getFont());"
      },
      "id": 109829399,
      "filename": "StyledText.java"
    },
    {
      "repo": "https://github.com/minstrelsy/xdocreport.git",
      "language": "Java",
      "linescount": 105,
      "location": "/document/fr.opensagres.xdocreport.document.docx/src/main/java/fr/opensagres/xdocreport/document/docx/preprocessor/sax/rels",
      "name": "xdocreport",
      "url": "https://searchcode.com/codesearch/view/96675739/",
      "md5hash": "4aeef829850d7a25b59feb6b5723cc09",
      "lines": {
        "80": " * \t<Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\" Target=\"fontTable.xml\"/>",
        "61": " * \t<Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\" Target=\"fontTable.xml\"/>",
        "60": " * \t<Relationship Id=\"rId6\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/>",
        "45": " *   <Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml\" Target=\"../customXml/item1.xml\" /> ",
        "46": " *   <Relationship Id=\"rId6\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\" Target=\"fontTable.xml\" /> ",
        "79": " * \t<Relationship Id=\"rId6\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/>"
      },
      "id": 96675739,
      "filename": "DocxDocumentXMLRelsPreprocessor.java"
    },
    {
      "repo": "https://github.com/minstrelsy/xdocreport.git",
      "language": "Java",
      "linescount": 332,
      "location": "/document/fr.opensagres.xdocreport.document.docx/src/main/java/fr/opensagres/xdocreport/document/docx/preprocessor/sax/rels",
      "name": "xdocreport",
      "url": "https://searchcode.com/codesearch/view/96675743/",
      "md5hash": "5838d81c5c699829c1b117df33ca7f47",
      "lines": {
        "64": " *   <Relationship Id=\"rId6\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\" Target=\"fontTable.xml\" /> ",
        "97": " * \t<Relationship Id=\"rId6\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/>",
        "98": " * \t<Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\" Target=\"fontTable.xml\"/>",
        "63": " *   <Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml\" Target=\"../customXml/item1.xml\" /> ",
        "78": " * \t<Relationship Id=\"rId6\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/>",
        "79": " * \t<Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\" Target=\"fontTable.xml\"/>"
      },
      "id": 96675743,
      "filename": "DocxDocumentXMLRelsDocumentContentHandler.java"
    },
    {
      "repo": "https://bitbucket.org/petermr/chemdraw-converter",
      "language": "Java",
      "linescount": 1073,
      "location": "/src/main/java/org/xmlcml/cml/chemdraw/components",
      "name": "chemdraw-converter",
      "url": "https://searchcode.com/codesearch/view/126187194/",
      "md5hash": "a70572ab9ffefe07dc69946e95e6a121",
      "lines": {
        "641": "            CDXObject font = new CDXObject(\"font\");",
        "642": "            fontTable.appendChild(font);",
        "811": "",
        "812": "\tvoid processFontTable() {",
        "813": "        LOG.info(\"Ignored fonttable\");",
        "814": "    }",
        "337": "\t\t\tobj = new CDXML();",
        "338": "\t\t} else if (code == CDXFontTable.CODE) {",
        "339": "\t\t\tobj = new CDXFontTable();",
        "340": "\t\t} else if (code == CDXFragment.CODE) {",
        "662": "\tprivate void processColorTable(String value) {",
        "663": "//        CDXObject fonttable = new CDXObject(\"colortable\");",
        "475": "                    propVector.remove(prop);",
        "476": "                } else if (name.equals(\"fonttable\")) {",
        "477": "                    processFontTable(value);"
      },
      "id": 126187194,
      "filename": "CDXObject.java"
    },
    {
      "repo": "https://bitbucket.org/kubohiroya/fop-formgenerator",
      "language": "Java",
      "linescount": 185,
      "location": "/src/java/org/apache/fop/render/rtf/rtflib/rtfdoc",
      "name": "fop-formgenerator",
      "url": "https://searchcode.com/codesearch/view/128944988/",
      "md5hash": "9723fb5650868bc71214e18a45144795",
      "lines": {
        "182": "        fontTable.addElement(family);",
        "156": "            header.write(\"\\\\f\" + i);",
        "183": "    }",
        "142": "    public void writeFonts (RtfHeader header) throws IOException {",
        "143": "        if (fontTable == null || fontTable.size () == 0) {",
        "48": "    /** Used fonts to this vector */",
        "49": "    private Vector fontTable = null;",
        "180": "    private void addFont(String family) {",
        "181": "        fontIndex.put(getFontKey(family), new Integer(fontTable.size()));",
        "150": "",
        "151": "        int len = fontTable.size ();",
        "59": "    private RtfFontManager () {",
        "60": "        fontTable = new Vector ();",
        "157": "            header.write(\" \" + (String) fontTable.elementAt (i));",
        "126": "",
        "127": "            retVal = fontTable.size() - 1;"
      },
      "id": 128944988,
      "filename": "RtfFontManager.java"
    },
    {
      "repo": "https://bitbucket.org/kubohiroya/patch-for-sqs-translator",
      "language": "Java",
      "linescount": 185,
      "location": "/src/java/org/apache/fop/render/rtf/rtflib/rtfdoc",
      "name": "patch-for-sqs-translator",
      "url": "https://searchcode.com/codesearch/view/128948093/",
      "md5hash": "9723fb5650868bc71214e18a45144795",
      "lines": {
        "182": "        fontTable.addElement(family);",
        "156": "            header.write(\"\\\\f\" + i);",
        "183": "    }",
        "142": "    public void writeFonts (RtfHeader header) throws IOException {",
        "143": "        if (fontTable == null || fontTable.size () == 0) {",
        "48": "    /** Used fonts to this vector */",
        "49": "    private Vector fontTable = null;",
        "180": "    private void addFont(String family) {",
        "181": "        fontIndex.put(getFontKey(family), new Integer(fontTable.size()));",
        "150": "",
        "151": "        int len = fontTable.size ();",
        "59": "    private RtfFontManager () {",
        "60": "        fontTable = new Vector ();",
        "157": "            header.write(\" \" + (String) fontTable.elementAt (i));",
        "126": "",
        "127": "            retVal = fontTable.size() - 1;"
      },
      "id": 128948093,
      "filename": "RtfFontManager.java"
    },
    {
      "repo": "https://bitbucket.org/hamishm/haiku-jdk-jdk",
      "language": "Java",
      "linescount": 1642,
      "location": "/src/share/classes/javax/swing/text/rtf",
      "name": "haiku-jdk-jdk",
      "url": "https://searchcode.com/codesearch/view/127226657/",
      "md5hash": "bf2f5fbeb849cef53e009293d838d913",
      "lines": {
        "65": "  /** This Dictionary maps Integer font numbers to String font names. */",
        "66": "  Dictionary<Integer, String> fontTable;",
        "747": "        Enumeration<Integer> nums = fontTable.keys();",
        "708": "            //font name might be broken across multiple calls",
        "709": "            fontName = fontTable.get(fontNumberKey) + fontName;",
        "712": "        }",
        "713": "        fontTable.put(fontNumberKey, fontName);",
        "682": "/** Reads the fonttbl group, inserting fonts into the RTFReader's",
        "683": " *  fontTable dictionary. */",
        "750": "            Integer num = nums.nextElement();",
        "751": "            warning(\"Number \" + num + \": \" + fontTable.get(num));",
        "1365": "        if (fontnum != null)",
        "1366": "            fontFamily = fontTable.get(fontnum);",
        "151": "    parserState = new Hashtable<Object, Object>();",
        "152": "    fontTable = new Hashtable<Integer, String>();",
        "746": "    {"
      },
      "id": 127226657,
      "filename": "RTFReader.java"
    },
    {
      "repo": "https://bitbucket.org/chegar/jigsaw_jigsaw_jdk",
      "language": "Java",
      "linescount": 1642,
      "location": "/src/share/classes/javax/swing/text/rtf",
      "name": "jigsaw_jigsaw_jdk",
      "url": "https://searchcode.com/codesearch/view/129546958/",
      "md5hash": "88aa4decf712ad27553367ef0bb559c4",
      "lines": {
        "65": "  /** This Dictionary maps Integer font numbers to String font names. */",
        "66": "  Dictionary<Integer, String> fontTable;",
        "747": "        Enumeration<Integer> nums = fontTable.keys();",
        "708": "            //font name might be broken across multiple calls",
        "709": "            fontName = fontTable.get(fontNumberKey) + fontName;",
        "712": "        }",
        "713": "        fontTable.put(fontNumberKey, fontName);",
        "682": "/** Reads the fonttbl group, inserting fonts into the RTFReader's",
        "683": " *  fontTable dictionary. */",
        "750": "            Integer num = nums.nextElement();",
        "751": "            warning(\"Number \" + num + \": \" + fontTable.get(num));",
        "1365": "        if (fontnum != null)",
        "1366": "            fontFamily = fontTable.get(fontnum);",
        "151": "    parserState = new Hashtable<Object, Object>();",
        "152": "    fontTable = new Hashtable<Integer, String>();",
        "746": "    {"
      },
      "id": 129546958,
      "filename": "RTFReader.java"
    },
    {
      "repo": "https://bitbucket.org/chegar/jigsaw_modulefileparser",
      "language": "Java",
      "linescount": 1642,
      "location": "/src/share/classes/javax/swing/text/rtf",
      "name": "jigsaw_modulefileparser",
      "url": "https://searchcode.com/codesearch/view/129566695/",
      "md5hash": "88aa4decf712ad27553367ef0bb559c4",
      "lines": {
        "65": "  /** This Dictionary maps Integer font numbers to String font names. */",
        "66": "  Dictionary<Integer, String> fontTable;",
        "747": "        Enumeration<Integer> nums = fontTable.keys();",
        "708": "            //font name might be broken across multiple calls",
        "709": "            fontName = fontTable.get(fontNumberKey) + fontName;",
        "712": "        }",
        "713": "        fontTable.put(fontNumberKey, fontName);",
        "682": "/** Reads the fonttbl group, inserting fonts into the RTFReader's",
        "683": " *  fontTable dictionary. */",
        "750": "            Integer num = nums.nextElement();",
        "751": "            warning(\"Number \" + num + \": \" + fontTable.get(num));",
        "1365": "        if (fontnum != null)",
        "1366": "            fontFamily = fontTable.get(fontnum);",
        "151": "    parserState = new Hashtable<Object, Object>();",
        "152": "    fontTable = new Hashtable<Integer, String>();",
        "746": "    {"
      },
      "id": 129566695,
      "filename": "RTFReader.java"
    },
    {
      "repo": "https://bitbucket.org/sreilly/openjdk7u-jdk",
      "language": "Java",
      "linescount": 1642,
      "location": "/src/share/classes/javax/swing/text/rtf",
      "name": "openjdk7u-jdk",
      "url": "https://searchcode.com/codesearch/view/130314872/",
      "md5hash": "bf2f5fbeb849cef53e009293d838d913",
      "lines": {
        "65": "  /** This Dictionary maps Integer font numbers to String font names. */",
        "66": "  Dictionary<Integer, String> fontTable;",
        "747": "        Enumeration<Integer> nums = fontTable.keys();",
        "708": "            //font name might be broken across multiple calls",
        "709": "            fontName = fontTable.get(fontNumberKey) + fontName;",
        "712": "        }",
        "713": "        fontTable.put(fontNumberKey, fontName);",
        "682": "/** Reads the fonttbl group, inserting fonts into the RTFReader's",
        "683": " *  fontTable dictionary. */",
        "750": "            Integer num = nums.nextElement();",
        "751": "            warning(\"Number \" + num + \": \" + fontTable.get(num));",
        "1365": "        if (fontnum != null)",
        "1366": "            fontFamily = fontTable.get(fontnum);",
        "151": "    parserState = new Hashtable<Object, Object>();",
        "152": "    fontTable = new Hashtable<Integer, String>();",
        "746": "    {"
      },
      "id": 130314872,
      "filename": "RTFReader.java"
    },
    {
      "repo": "https://bitbucket.org/infinitekind/openjdk7u-jdk",
      "language": "Java",
      "linescount": 1642,
      "location": "/src/share/classes/javax/swing/text/rtf",
      "name": "openjdk7u-jdk",
      "url": "https://searchcode.com/codesearch/view/132215140/",
      "md5hash": "bf2f5fbeb849cef53e009293d838d913",
      "lines": {
        "65": "  /** This Dictionary maps Integer font numbers to String font names. */",
        "66": "  Dictionary<Integer, String> fontTable;",
        "747": "        Enumeration<Integer> nums = fontTable.keys();",
        "708": "            //font name might be broken across multiple calls",
        "709": "            fontName = fontTable.get(fontNumberKey) + fontName;",
        "712": "        }",
        "713": "        fontTable.put(fontNumberKey, fontName);",
        "682": "/** Reads the fonttbl group, inserting fonts into the RTFReader's",
        "683": " *  fontTable dictionary. */",
        "750": "            Integer num = nums.nextElement();",
        "751": "            warning(\"Number \" + num + \": \" + fontTable.get(num));",
        "1365": "        if (fontnum != null)",
        "1366": "            fontFamily = fontTable.get(fontnum);",
        "151": "    parserState = new Hashtable<Object, Object>();",
        "152": "    fontTable = new Hashtable<Integer, String>();",
        "746": "    {"
      },
      "id": 132215140,
      "filename": "RTFReader.java"
    },
    {
      "repo": "https://bitbucket.org/psandoz/lambda-jdk-pipeline-patches",
      "language": "Java",
      "linescount": 1642,
      "location": "/src/share/classes/javax/swing/text/rtf",
      "name": "lambda-jdk-pipeline-patches",
      "url": "https://searchcode.com/codesearch/view/132816458/",
      "md5hash": "88aa4decf712ad27553367ef0bb559c4",
      "lines": {
        "65": "  /** This Dictionary maps Integer font numbers to String font names. */",
        "66": "  Dictionary<Integer, String> fontTable;",
        "747": "        Enumeration<Integer> nums = fontTable.keys();",
        "708": "            //font name might be broken across multiple calls",
        "709": "            fontName = fontTable.get(fontNumberKey) + fontName;",
        "712": "        }",
        "713": "        fontTable.put(fontNumberKey, fontName);",
        "682": "/** Reads the fonttbl group, inserting fonts into the RTFReader's",
        "683": " *  fontTable dictionary. */",
        "750": "            Integer num = nums.nextElement();",
        "751": "            warning(\"Number \" + num + \": \" + fontTable.get(num));",
        "1365": "        if (fontnum != null)",
        "1366": "            fontFamily = fontTable.get(fontnum);",
        "151": "    parserState = new Hashtable<Object, Object>();",
        "152": "    fontTable = new Hashtable<Integer, String>();",
        "746": "    {"
      },
      "id": 132816458,
      "filename": "RTFReader.java"
    },
    {
      "repo": "https://bitbucket.org/psandoz/lambda-jdk",
      "language": "Java",
      "linescount": 1642,
      "location": "/src/share/classes/javax/swing/text/rtf",
      "name": "lambda-jdk",
      "url": "https://searchcode.com/codesearch/view/132842125/",
      "md5hash": "88aa4decf712ad27553367ef0bb559c4",
      "lines": {
        "65": "  /** This Dictionary maps Integer font numbers to String font names. */",
        "66": "  Dictionary<Integer, String> fontTable;",
        "747": "        Enumeration<Integer> nums = fontTable.keys();",
        "708": "            //font name might be broken across multiple calls",
        "709": "            fontName = fontTable.get(fontNumberKey) + fontName;",
        "712": "        }",
        "713": "        fontTable.put(fontNumberKey, fontName);",
        "682": "/** Reads the fonttbl group, inserting fonts into the RTFReader's",
        "683": " *  fontTable dictionary. */",
        "750": "            Integer num = nums.nextElement();",
        "751": "            warning(\"Number \" + num + \": \" + fontTable.get(num));",
        "1365": "        if (fontnum != null)",
        "1366": "            fontFamily = fontTable.get(fontnum);",
        "151": "    parserState = new Hashtable<Object, Object>();",
        "152": "    fontTable = new Hashtable<Integer, String>();",
        "746": "    {"
      },
      "id": 132842125,
      "filename": "RTFReader.java"
    },
    {
      "repo": "https://bitbucket.org/screenconnect/openjdk8-jdk",
      "language": "Java",
      "linescount": 1640,
      "location": "/src/share/classes/javax/swing/text/rtf",
      "name": "openjdk8-jdk",
      "url": "https://searchcode.com/codesearch/view/136818431/",
      "md5hash": "7414a83b5dd1e18cfa551c79bd35733b",
      "lines": {
        "65": "  /** This Dictionary maps Integer font numbers to String font names. */",
        "66": "  Dictionary<Integer, String> fontTable;",
        "707": "            fontName = fontTable.get(fontNumberKey) + fontName;",
        "710": "        }",
        "711": "        fontTable.put(fontNumberKey, fontName);",
        "680": "/** Reads the fonttbl group, inserting fonts into the RTFReader's",
        "681": " *  fontTable dictionary. */",
        "745": "        Enumeration<Integer> nums = fontTable.keys();",
        "748": "            Integer num = nums.nextElement();",
        "706": "            //font name might be broken across multiple calls",
        "749": "            warning(\"Number \" + num + \": \" + fontTable.get(num));",
        "744": "    {",
        "1363": "        if (fontnum != null)",
        "1364": "            fontFamily = fontTable.get(fontnum);",
        "151": "    parserState = new Hashtable<Object, Object>();",
        "152": "    fontTable = new Hashtable<Integer, String>();"
      },
      "id": 136818431,
      "filename": "RTFReader.java"
    },
    {
      "repo": "https://bitbucket.org/adoptopenjdk/jdk8-jdk",
      "language": "Java",
      "linescount": 1642,
      "location": "/src/share/classes/javax/swing/text/rtf",
      "name": "jdk8-jdk",
      "url": "https://searchcode.com/codesearch/view/137375568/",
      "md5hash": "8a5d8b3280177026ab7ee5d6bbf46a59",
      "lines": {
        "65": "  /** This Dictionary maps Integer font numbers to String font names. */",
        "66": "  Dictionary<Integer, String> fontTable;",
        "747": "        Enumeration<Integer> nums = fontTable.keys();",
        "708": "            //font name might be broken across multiple calls",
        "709": "            fontName = fontTable.get(fontNumberKey) + fontName;",
        "712": "        }",
        "713": "        fontTable.put(fontNumberKey, fontName);",
        "682": "/** Reads the fonttbl group, inserting fonts into the RTFReader's",
        "683": " *  fontTable dictionary. */",
        "750": "            Integer num = nums.nextElement();",
        "751": "            warning(\"Number \" + num + \": \" + fontTable.get(num));",
        "1365": "        if (fontnum != null)",
        "1366": "            fontFamily = fontTable.get(fontnum);",
        "151": "    parserState = new Hashtable<Object, Object>();",
        "152": "    fontTable = new Hashtable<Integer, String>();",
        "746": "    {"
      },
      "id": 137375568,
      "filename": "RTFReader.java"
    },
    {
      "repo": "https://github.com/andreyvit/yoursway-swt.git",
      "language": "Java",
      "linescount": 8308,
      "location": "/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom",
      "name": "yoursway-swt",
      "url": "https://searchcode.com/codesearch/view/139825094/",
      "md5hash": "44004f82089f729ddcd3032add7a5238",
      "lines": {
        "681": "\t\tcolorTable = new Vector();",
        "682": "\t\tfontTable = new Vector();",
        "823": "\t\t\theader.append(\" \");",
        "684": "\t\tcolorTable.addElement(getBackground());",
        "685": "\t\tfontTable.addElement(getFont());",
        "824": "\t\t\tFontData fd = ((Font)fontTable.elementAt(i)).getFontData()[0];",
        "819": "\t\theader.append(\";\");",
        "820": "\t\tfor (int i = 1; i < fontTable.size(); i++) {",
        "725": "\tint getFontIndex(Font font) {",
        "726": "\t\tint index = fontTable.indexOf(font);",
        "727": "\t\tif (index == -1) {",
        "728": "\t\t\tindex = fontTable.size();",
        "729": "\t\t\tfontTable.addElement(font);",
        "666": "\t\tstatic final int DEFAULT_BACKGROUND = 1;",
        "667": "\t\tVector colorTable, fontTable;",
        "730": "\t\t}"
      },
      "id": 139825094,
      "filename": "StyledText.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 518,
      "location": "/xmerge/source/wordsmith/java/org/openoffice/xmerge/converter/xml/sxw/wordsmith",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45005278/",
      "md5hash": "06a9b544174fb509e575fb13dc875b30",
      "lines": {
        "272": "                            encoder.addElement(new WseTextRun(s, defTextStyle,",
        "309": "                            fontTable, colorTable));",
        "273": "                            styleCat, fontTable, colorTable));",
        "301": "                                                       defTextStyle,",
        "302": "                                                      styleCat, fontTable, colorTable));",
        "269": "                            encoder.addElement(new WseTextRun(s, style, styleCat,",
        "112": "        encoder = new WSEncoder();",
        "113": "        encoder.addElement(fontTable);",
        "308": "                        encoder.addElement(new WseTextRun(\"\\t\", defTextStyle, styleCat,",
        "270": "                            fontTable, colorTable));",
        "316": "                        encoder.addElement(new WseTextRun(\"\\n\", defTextStyle,",
        "317": "                                            styleCat, fontTable, colorTable));",
        "62": "",
        "63": "    private WseFontTable fontTable = new WseFontTable();"
      },
      "id": 45005278,
      "filename": "DocumentSerializerImpl.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 40,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 23,
      "source": "Github",
      "id": 2
    },
    {
      "count": 7,
      "source": "Google Code",
      "id": 1
    }
  ]
}