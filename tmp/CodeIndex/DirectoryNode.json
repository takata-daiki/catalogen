{
  "matchterm": "DirectoryNode",
  "previouspage": null,
  "searchterm": "DirectoryNode",
  "query": "DirectoryNode",
  "language_filters": [
    {
      "count": 91,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 91,
  "results": [
    {
      "repo": "https://bitbucket.org/ludamad/icedtea-web",
      "language": "Java",
      "linescount": 168,
      "location": "/netx/net/sourceforge/jnlp/cache",
      "name": "icedtea-web",
      "url": "https://searchcode.com/codesearch/view/136199676/",
      "md5hash": "9f94895440df1bef12dd1de6219a09ad",
      "lines": {
        "1": "/* DirectoryNode.java -- Structure for maintaining the cache directory tree.",
        "2": "   Copyright (C) 2010 Red Hat, Inc.",
        "41": "",
        "42": "public class DirectoryNode {",
        "139": "     * @return DirectoryNode representing the parent of the current node.",
        "44": "    private File path;",
        "45": "    private ArrayList<DirectoryNode> childNodes;",
        "46": "    private DirectoryNode parent = null;",
        "47": "    private File infoFile;",
        "49": "    /**",
        "50": "     * Create a new instance of DirectoryNode.",
        "138": "     * ",
        "55": "     */",
        "56": "    public DirectoryNode(String name, String absPathToNode, DirectoryNode parent) {",
        "60": "    /**",
        "61": "     * Create a new instance of DirectoryNode."
      },
      "id": 136199676,
      "filename": "DirectoryNode.java"
    },
    {
      "repo": "https://github.com/avanetten/gephi.git",
      "language": "Java",
      "linescount": 258,
      "location": "/modules/DirectoryChooser/src/main/java/org/netbeans/swing/dirchooser",
      "name": "gephi",
      "url": "https://searchcode.com/codesearch/view/71275913/",
      "md5hash": "70e0c1825db5bb21a7963c841569217d",
      "lines": {
        "75": "    public DirectoryNode(File file, boolean allowsChildren) {",
        "134": "                        DirectoryNode node = new DirectoryNode(child);",
        "133": "                    try {",
        "70": "",
        "71": "    public DirectoryNode(File file) {",
        "74": "",
        "59": " */",
        "60": "public class DirectoryNode extends DefaultMutableTreeNode {",
        "78": "",
        "79": "    public DirectoryNode(File file, boolean allowsChildren, boolean isSelected,"
      },
      "id": 71275913,
      "filename": "DirectoryNode.java"
    },
    {
      "repo": "https://bitbucket.org/nbargnesi/idea.git",
      "language": "Java",
      "linescount": 262,
      "location": "/platform/lang-impl/src/com/intellij/packageDependencies/ui",
      "name": "idea",
      "url": "https://searchcode.com/codesearch/view/39398656/",
      "md5hash": "fd6e480ef12a054b166215ad3ac3688c",
      "lines": {
        "39": "",
        "168": "  public PsiDirectory getTargetDirectory() {",
        "169": "    DirectoryNode dirNode = this;",
        "203": "",
        "44": "",
        "45": "  private DirectoryNode myCompactedDirNode;",
        "46": "  private DirectoryNode myWrapper;",
        "47": "",
        "40": "public class DirectoryNode extends PackageDependenciesNode {",
        "204": "  public void setCompactedDirNode(final DirectoryNode compactedDirNode) {",
        "213": "",
        "214": "  public DirectoryNode getWrapper() {",
        "218": "  @Nullable",
        "219": "  public DirectoryNode getCompactedDirNode() {",
        "188": "",
        "189": "    final DirectoryNode packageNode = (DirectoryNode)o;"
      },
      "id": 39398656,
      "filename": "DirectoryNode.java"
    },
    {
      "repo": "https://github.com/shahedhossain/exo-training.git",
      "language": "Java",
      "linescount": 60,
      "location": "/design-pattern/src/main/java/org/example/visitor",
      "name": "exo-training",
      "url": "https://searchcode.com/codesearch/view/73513510/",
      "md5hash": "713705ecdb9c4bf0e3857b4a4086f8f5",
      "lines": {
        "32": "   public DirectoryNode(File directory)",
        "54": "         if(files[i].isFile()) holder[i] = new FileNode(files[i]) ;",
        "39": "   {",
        "40": "      visitor.visitDirectoryNode(this) ;",
        "55": "         else if(files[i].isDirectory()) holder[i] = new DirectoryNode(files[i]) ;",
        "26": " */",
        "27": "public class DirectoryNode implements FileSystemNode ",
        "31": "   "
      },
      "id": 73513510,
      "filename": "DirectoryNode.java"
    },
    {
      "repo": "https://bitbucket.org/badiale/utilities.git",
      "language": "Java",
      "linescount": 120,
      "location": "/filesizeanalyzer/src/main/java/br/com/dragonrise/filesizeanalyzer",
      "name": "utilities",
      "url": "https://searchcode.com/codesearch/view/38714046/",
      "md5hash": "658bb86d267dba93eaae0712cfe8cb52",
      "lines": {
        "16": "public class DirectoryNode",
        "20": "\tprivate static final Logger logger = LogManager",
        "21": "\t\t\t.getLogger ( DirectoryNode.class );",
        "89": "\t\tfinal DirectoryNode other = (DirectoryNode) obj;",
        "85": "\t\tif ( ! ( obj instanceof DirectoryNode ) ) {",
        "88": "",
        "84": "",
        "29": "",
        "30": "\tpublic DirectoryNode ( final File directory, final List<FileNode> childs ) {",
        "15": ""
      },
      "id": 38714046,
      "filename": "DirectoryNode.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 301,
      "location": "/platform/lang-impl/src/com/intellij/packageDependencies/ui",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/7345749/",
      "md5hash": "ea2c8f545f0635cc4183136eac5dedc5",
      "lines": {
        "256": "  public DirectoryNode getCompactedDirNode() {",
        "162": "    if (myCompactPackages) {",
        "163": "      final DirectoryNode compactedDirNode = myCompactedDirNode;",
        "199": "  public PsiDirectory getTargetDirectory() {",
        "200": "    DirectoryNode dirNode = this;",
        "41": "",
        "42": "public class DirectoryNode extends PackageDependenciesNode {",
        "46": "",
        "47": "  private DirectoryNode myCompactedDirNode;",
        "48": "  private DirectoryNode myWrapper;",
        "49": "",
        "53": "",
        "54": "  public DirectoryNode(VirtualFile aDirectory,",
        "151": "    if (myCompactPackages) {",
        "152": "      final DirectoryNode compactedDirNode = myCompactedDirNode;",
        "201": "    DirectoryNode compacted;",
        "255": "  @Nullable"
      },
      "id": 7345749,
      "filename": "DirectoryNode.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 458,
      "location": "/components/forks/poi/src/loci/poi/poifs/filesystem",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642286/",
      "md5hash": "a149450acd4d1363e1060108fcdd5c42",
      "lines": {
        "455": "    /* **********  END  begin implementation of POIFSViewable ********** */",
        "456": "}   // end public class DirectoryNode",
        "330": "        DirectoryProperty property = new DirectoryProperty(name);",
        "331": "        DirectoryNode     rval     = new DirectoryNode(property, _filesystem,",
        "77": "    /**",
        "78": "     * create a DirectoryNode. This method is not public by design; it",
        "112": "            {",
        "113": "                childNode = new DirectoryNode(( DirectoryProperty ) child,",
        "85": "",
        "86": "    DirectoryNode(final DirectoryProperty property,",
        "87": "                  final POIFSFileSystem filesystem,",
        "88": "                  final DirectoryNode parent)",
        "62": "",
        "63": "public class DirectoryNode"
      },
      "id": 15642286,
      "filename": "DirectoryNode.java"
    },
    {
      "repo": "https://bitbucket.org/evzijst/atlasshell-patches",
      "language": "Java",
      "linescount": 16,
      "location": "/src/main/java/com/atlassian/plugin/atlash/fs/disk",
      "name": "atlasshell-patches",
      "url": "https://searchcode.com/codesearch/view/58219825/",
      "md5hash": "30c2192b94d5fb8026c4c741e0eb8b6d",
      "lines": {
        "13": " */",
        "14": "public interface DirectoryNode extends Node {"
      },
      "id": 58219825,
      "filename": "DirectoryNode.java"
    },
    {
      "repo": "https://github.com/identityxx/penrose-studio.git",
      "language": "Java",
      "linescount": 210,
      "location": "/src/java/org/safehaus/penrose/studio/directory/tree",
      "name": "penrose-studio",
      "url": "https://searchcode.com/codesearch/view/138499273/",
      "md5hash": "72c6c83fc43e0504d1ccffccc82ef869",
      "lines": {
        "64": "    public DirectoryNode(String name, Image image, Object object, Node parent) {",
        "63": "",
        "54": " */",
        "55": "public class DirectoryNode extends Node {"
      },
      "id": 138499273,
      "filename": "DirectoryNode.java"
    },
    {
      "repo": "https://github.com/endisd/penrose-studio.git",
      "language": "Java",
      "linescount": 210,
      "location": "/src/java/org/safehaus/penrose/studio/directory/tree",
      "name": "penrose-studio",
      "url": "https://searchcode.com/codesearch/view/138855179/",
      "md5hash": "72c6c83fc43e0504d1ccffccc82ef869",
      "lines": {
        "64": "    public DirectoryNode(String name, Image image, Object object, Node parent) {",
        "63": "",
        "54": " */",
        "55": "public class DirectoryNode extends Node {"
      },
      "id": 138855179,
      "filename": "DirectoryNode.java"
    },
    {
      "repo": "https://github.com/avanetten/gephi.git",
      "language": "Java",
      "linescount": 2482,
      "location": "/modules/DirectoryChooser/src/main/java/org/netbeans/swing/dirchooser",
      "name": "gephi",
      "url": "https://searchcode.com/codesearch/view/71275938/",
      "md5hash": "59e9832f876ec045e6c5fc73bf36d897",
      "lines": {
        "934": "                        for(int i = 0; i < nodePath.length; i++) {",
        "935": "                            DirectoryNode nodeToDelete = (DirectoryNode)nodePath[i].getLastPathComponent();",
        "908": "            ",
        "1034": "        Collections.sort(files, DirectoryNode.FILE_NAME_COMPARATOR);",
        "172": "    ",
        "173": "    private DirectoryNode newFolderNode;",
        "1582": "                        DirectoryNode selectedNode = (DirectoryNode)path.getLastPathComponent();",
        "909": "            File file = ((DirectoryNode)nodePath[0].getLastPathComponent()).getFile();",
        "784": "            if (evt.getKeyCode() == KeyEvent.VK_F2) {",
        "785": "                DirectoryNode node = (DirectoryNode)tree.getLastSelectedPathComponent();",
        "1033": "        ",
        "923": "            RequestProcessor.getDefault().post(new Runnable() {",
        "924": "                DirectoryNode node;",
        "1581": "                    public void run() {",
        "926": "                int cannotDelete;",
        "927": "                ArrayList<DirectoryNode> nodes2Remove = new ArrayList<DirectoryNode>(nodePath.length);"
      },
      "id": 71275938,
      "filename": "DirectoryChooserUI.java"
    },
    {
      "repo": "https://bitbucket.org/nbargnesi/idea.git",
      "language": "Java",
      "linescount": 605,
      "location": "/platform/lang-impl/src/com/intellij/packageDependencies/ui",
      "name": "idea",
      "url": "https://searchcode.com/codesearch/view/39398654/",
      "md5hash": "fb14fe076da7144ab3cbb1f511f209e9",
      "lines": {
        "320": "    if (myCompactEmptyMiddlePackages && node instanceof DirectoryNode && node.getChildCount() == 1) { //compact",
        "321": "      final TreeNode treeNode = node.getChildAt(0);",
        "450": "    if (directoryNode != null) {",
        "451": "      if (myCompactEmptyMiddlePackages) {",
        "449": "    PackageDependenciesNode directoryNode = myModuleDirNodes.get(virtualFile);",
        "306": "      node.removeFromParent();",
        "307": "      if (node instanceof DirectoryNode) {",
        "308": "        while (node != null) {  //clear all compacted links",
        "280": "    if (dirNode == null) return null;",
        "281": "    if (dirNode instanceof DirectoryNode) {",
        "282": "      DirectoryNode wrapper = ((DirectoryNode)dirNode).getWrapper();",
        "283": "      while (wrapper != null) {",
        "285": "        myModuleDirNodes.put(wrapper.getDirectory(), null);",
        "286": "        wrapper = ((DirectoryNode)dirNode).getWrapper();",
        "319": "    }"
      },
      "id": 39398654,
      "filename": "FileTreeModelBuilder.java"
    },
    {
      "repo": "https://bitbucket.org/arykov/grinder.git",
      "language": "Java",
      "linescount": 509,
      "location": "/grinder-swing-console/src/main/java/net/grinder/console/swingui",
      "name": "grinder",
      "url": "https://searchcode.com/codesearch/view/47298695/",
      "md5hash": "62a58b7e5fdc004d432c18f6031f1455",
      "lines": {
        "219": "      if (node instanceof DirectoryNode) {",
        "221": "",
        "140": "",
        "141": "    if (parent instanceof DirectoryNode) {",
        "142": "      final DirectoryNode directoryNode = (DirectoryNode)parent;",
        "143": "",
        "144": "      if (directoryNode.belongsToModel(this)) {",
        "145": "        return directoryNode.getIndexOfChild((Node)child);",
        "146": "      }",
        "110": "    if (parent instanceof DirectoryNode) {",
        "218": "",
        "111": "      final DirectoryNode directoryNode = (DirectoryNode)parent;",
        "220": "        final DirectoryNode directoryNode = (DirectoryNode)node;",
        "109": "",
        "222": "        if (directoryNode.getChildForFile(paths[i + 1]) == null) {"
      },
      "id": 47298695,
      "filename": "FileTreeModel.java"
    },
    {
      "repo": "https://github.com/Hanuman/bi-platform-v2.git",
      "language": "Java",
      "linescount": 983,
      "location": "/bi-platform-repository/src/org/pentaho/platform/repository/solution/filebased",
      "name": "bi-platform-v2",
      "url": "https://searchcode.com/codesearch/view/107507055/",
      "md5hash": "117c2cd0424ebafde3a39d02f72a571a",
      "lines": {
        "481": "      if (publishIcon(PentahoSystem.getApplicationContext().getSolutionPath(solution + File.separator + path), iconPath)) {",
        "482": "        directoryNode.addElement(\"icon\").setText(\"getImage?image=icons/\" + iconPath); //$NON-NLS-1$ //$NON-NLS-2$",
        "483": "      } else {",
        "454": "",
        "455": "  protected void addIndexToRepository(final Document indexDoc, final File directoryFile, final Element directoryNode,",
        "465": "    if (solution == null) {",
        "466": "      directoryNode.addAttribute(\"name\", solution); //$NON-NLS-1$",
        "467": "    } else {",
        "468": "      directoryNode.addAttribute(\"name\", XmlHelper.encode(directoryFile.getName())); //$NON-NLS-1$",
        "469": "    }",
        "470": "    directoryNode.addElement(\"title\").setText(dirName); //$NON-NLS-1$",
        "471": "    // directoryNode.addElement( \"path\" ).setText( path ); //$NON-NLS-1$",
        "472": "    directoryNode.addAttribute(\"path\", XmlHelper.encode(path)); //$NON-NLS-1$",
        "473": "    directoryNode.addElement(\"description\").setText(description); //$NON-NLS-1$",
        "474": "    if (!StringUtil.isEmpty(iconPath)) {"
      },
      "id": 107507055,
      "filename": "FileBasedSolutionRepository.java"
    },
    {
      "repo": "https://github.com/Hanuman/bi-platform-v2.git",
      "language": "Java",
      "linescount": 1562,
      "location": "/bi-platform-repository/src/org/pentaho/platform/repository/solution/dbbased",
      "name": "bi-platform-v2",
      "url": "https://searchcode.com/codesearch/view/107507121/",
      "md5hash": "a4fe77b0b8c05cd59dfe8b5343d3ac78",
      "lines": {
        "512": "        } else {",
        "513": "          directoryNode.addElement(\"rollovericon\").setText(rolloverIconPath); //$NON-NLS-1$",
        "491": "    directoryNode.addElement(\"title\").setText(dirName); //$NON-NLS-1$",
        "489": "    }",
        "490": "    directoryNode.addAttribute(\"name\", name); //$NON-NLS-1$",
        "523": "    }",
        "492": "",
        "525": "    directoryNode.addAttribute(\"displaytype\", displayType); //$NON-NLS-1$",
        "526": "    if ((solution != null) && (solution.length() > 0)) {",
        "527": "      directoryNode.addElement(\"solution\").setText(solution); //$NON-NLS-1$",
        "528": "    } else {",
        "529": "      directoryNode.addElement(\"solution\").setText(getSolutionId(directoryFile)); //$NON-NLS-1$",
        "470": "  protected void addIndexToRepository(final Document indexDoc, final RepositoryFile directoryFile,",
        "471": "      final Element directoryNode, String path, final String solution) {",
        "524": "    directoryNode.addAttribute(\"visible\", visability.toString()); //$NON-NLS-1$"
      },
      "id": 107507121,
      "filename": "DbBasedSolutionRepository.java"
    },
    {
      "repo": "https://bitbucket.org/nbargnesi/idea.git",
      "language": "Java",
      "linescount": 1000,
      "location": "/platform/lang-impl/src/com/intellij/ide/scopeView",
      "name": "idea",
      "url": "https://searchcode.com/codesearch/view/39399079/",
      "md5hash": "23c20ec6d3f784944040eb52fed2a1f0",
      "lines": {
        "802": "        if (!node.isValid()) return null;",
        "803": "        if (node instanceof DirectoryNode) {",
        "804": "          DirectoryNode directoryNode = (DirectoryNode)node;",
        "805": "          while (directoryNode.getCompactedDirNode() != null) {",
        "806": "            directoryNode = directoryNode.getCompactedDirNode();",
        "807": "            LOG.assertTrue(directoryNode != null);",
        "808": "          }",
        "809": "          return (PsiDirectory)directoryNode.getPsiElement();",
        "411": "        final Object pathComponent = selectionPath.getLastPathComponent();",
        "412": "        if (pathComponent instanceof DirectoryNode) {",
        "413": "          return ((DirectoryNode)pathComponent).getTargetDirectory();",
        "414": "        }"
      },
      "id": 39399079,
      "filename": "ScopeTreeViewPanel.java"
    },
    {
      "repo": "https://github.com/shahedhossain/exo-training.git",
      "language": "Java",
      "linescount": 53,
      "location": "/design-pattern/src/main/java/org/example/visitor",
      "name": "exo-training",
      "url": "https://searchcode.com/codesearch/view/73513495/",
      "md5hash": "a62bac55840d065904c92809e80e9e1a",
      "lines": {
        "48": "   public static void main(String[] args) throws Exception {",
        "49": "      DirectoryNode node = new DirectoryNode(new File(\"/home/haint\")) ;",
        "37": "   ",
        "38": "   public void visitDirectoryNode(DirectoryNode node)"
      },
      "id": 73513495,
      "filename": "PrintVisitor.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 612,
      "location": "/platform/lang-impl/src/com/intellij/packageDependencies/ui",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/7345745/",
      "md5hash": "943e13a2beda12773fbec9d9d2b5dcb5",
      "lines": {
        "288": "        myModuleDirNodes.put(wrapper.getDirectory(), null);",
        "289": "        wrapper = ((DirectoryNode)dirNode).getWrapper();",
        "452": "    PackageDependenciesNode directoryNode = myModuleDirNodes.get(virtualFile);",
        "453": "    if (directoryNode != null) {",
        "454": "      if (myCompactEmptyMiddlePackages) {",
        "309": "      node.removeFromParent();",
        "310": "      if (node instanceof DirectoryNode) {",
        "311": "        while (node != null) {  //clear all compacted links",
        "312": "          myModuleDirNodes.put(((DirectoryNode)node).getDirectory(), null);",
        "313": "          node = ((DirectoryNode)node).getCompactedDirNode();",
        "314": "        }",
        "283": "    if (dirNode == null) return null;",
        "284": "    if (dirNode instanceof DirectoryNode) {",
        "285": "      DirectoryNode wrapper = ((DirectoryNode)dirNode).getWrapper();",
        "286": "      while (wrapper != null) {"
      },
      "id": 7345745,
      "filename": "FileTreeModelBuilder.java"
    },
    {
      "repo": "https://github.com/isdom/POI-Android.git",
      "language": "Java",
      "linescount": 190,
      "location": "/ppt/scratchpad/src/org/apache/poi/hsmf/parsers",
      "name": "POI-Android",
      "url": "https://searchcode.com/codesearch/view/88636100/",
      "md5hash": "9c88a7698cc287ccc385a9389ab3678d",
      "lines": {
        "160": "               if(entry instanceof DirectoryNode) {",
        "161": "                   chunk = new DirectoryChunk((DirectoryNode)entry, namePrefix, chunkId, type);",
        "34": "import org.apache.poi.hsmf.datatypes.Types;",
        "35": "import org.apache.poi.poifs.filesystem.DirectoryNode;",
        "162": "               }",
        "159": "            case Types.DIRECTORY:",
        "98": "            process(entry, grouping);",
        "49": "   }",
        "50": "   public static ChunkGroup[] parse(DirectoryNode node) throws IOException {",
        "99": "         } else if(entry instanceof DirectoryNode) {",
        "59": "      for(Entry entry : node) {",
        "60": "         if(entry instanceof DirectoryNode) {",
        "61": "            DirectoryNode dir = (DirectoryNode)entry;",
        "94": "    */",
        "95": "   protected static void processChunks(DirectoryNode node, ChunkGroup grouping) {"
      },
      "id": 88636100,
      "filename": "POIFSChunkParser.java"
    },
    {
      "repo": "https://github.com/minstrelsy/POI-Android.git",
      "language": "Java",
      "linescount": 615,
      "location": "/ppt/poi/org/apache/poi/poifs/filesystem",
      "name": "POI-Android",
      "url": "https://searchcode.com/codesearch/view/97397929/",
      "md5hash": "5083d727a84f9c004bece7393d2ae9b8",
      "lines": {
        "421": "",
        "422": "    public DirectoryNode getRoot()",
        "489": "                                   final Iterator properties,",
        "426": "            _root = new DirectoryNode(_property_table.getRoot(), this, null);",
        "503": "            {",
        "79": "    private List          _documents;",
        "80": "    private DirectoryNode _root;",
        "497": "            String        name     = property.getName();",
        "498": "            DirectoryNode parent   = (dir == null)",
        "499": "                                     ? (( DirectoryNode ) getRoot())",
        "500": "                                     : dir;",
        "425": "        {",
        "504": "                DirectoryNode new_dir =",
        "505": "                    ( DirectoryNode ) parent.createDirectory(name);",
        "506": "",
        "490": "                                   final DirectoryNode dir,"
      },
      "id": 97397929,
      "filename": "POIFSFileSystem.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 56,
      "source": "Github",
      "id": 2
    },
    {
      "count": 32,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 2,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 1,
      "source": "Google Android",
      "id": 12
    }
  ]
}