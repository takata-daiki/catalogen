{
  "matchterm": "FontDetails",
  "previouspage": null,
  "searchterm": "FontDetails",
  "query": "FontDetails",
  "language_filters": [
    {
      "count": 36,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 36,
  "results": [
    {
      "repo": "https://bitbucket.org/ivertex/itext-fork",
      "language": "Java",
      "linescount": 302,
      "location": "/src/core/com/itextpdf/text/pdf",
      "name": "itext-fork",
      "url": "https://searchcode.com/codesearch/view/57657212/",
      "md5hash": "496ae337e69b3bc4047544f08f620e53",
      "lines": {
        "1": "/*",
        "2": " * $Id: FontDetails.java 4141 2009-12-05 19:01:18Z psoares33 $",
        "115": "    FontDetails(PdfName fontName, PdfIndirectReference indirectReference, BaseFont baseFont) {",
        "57": " */",
        "58": "class FontDetails {",
        "114": "     */"
      },
      "id": 57657212,
      "filename": "FontDetails.java"
    },
    {
      "repo": "https://github.com/faquino/iText-4.2.0.git",
      "language": "Java",
      "linescount": 308,
      "location": "/src/core/com/lowagie/text/pdf",
      "name": "iText-4.2.0",
      "url": "https://searchcode.com/codesearch/view/70298193/",
      "md5hash": "cd2898f098ed556259319d1a08ce165b",
      "lines": {
        "64": "class FontDetails {",
        "1": "/*",
        "2": " * $Id: FontDetails.java 4024 2009-07-12 00:33:57Z xlv $",
        "120": "     */",
        "121": "    FontDetails(PdfName fontName, PdfIndirectReference indirectReference, BaseFont baseFont) {",
        "63": " */"
      },
      "id": 70298193,
      "filename": "FontDetails.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 201,
      "location": "/components/forks/poi/src/loci/poi/hssf/usermodel",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642331/",
      "md5hash": "eda603bac013e3ce98303621068d6290",
      "lines": {
        "64": "    public FontDetails( String fontName, int height )",
        "134": "            // Since we don't know its sizes, we can't work with it",
        "135": "            throw new IllegalArgumentException(\"The supplied FontMetrics doesn't know about the font '\" + fontName + \"', so we can't use it. Please add it to your font metrics file (see StaticFontMetrics.getFontDetails\");",
        "138": "        int height = Integer.parseInt(heightStr);",
        "139": "        FontDetails d = new FontDetails(fontName, height);",
        "51": " */",
        "52": "public class FontDetails",
        "117": "    /**",
        "118": "     * Create an instance of <code>FontDetails</code> by loading them from the",
        "122": "     *                          particular font.",
        "123": "     * @return  a new FontDetails instance.",
        "124": "     */",
        "125": "    public static FontDetails create( String fontName, Properties fontMetricsProps )",
        "63": "     */"
      },
      "id": 15642331,
      "filename": "FontDetails.java"
    },
    {
      "repo": "https://bitbucket.org/keithb/tdd",
      "language": "Java",
      "linescount": 277,
      "location": "/targets/itext/1.4.8/com/lowagie/text/pdf",
      "name": "tdd",
      "url": "https://searchcode.com/codesearch/view/120313789/",
      "md5hash": "737110a65d66888ed758d36ea1c1b05c",
      "lines": {
        "1": "/*",
        "2": " * $Id: FontDetails.java,v 1.47 2006/09/14 23:10:46 xlv Exp $",
        "103": "     */",
        "104": "    FontDetails(PdfName fontName, PdfIndirectReference indirectReference, BaseFont baseFont) {",
        "61": " */",
        "62": "class FontDetails {"
      },
      "id": 120313789,
      "filename": "FontDetails.java"
    },
    {
      "repo": "http://fb2pdf.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 318,
      "location": "/src/java/src/com/itextpdf/text/pdf",
      "name": "fb2pdf",
      "url": "https://searchcode.com/codesearch/view/2126830/",
      "md5hash": "8d06e4e2b40c0386602874cd9876dec4",
      "lines": {
        "1": "/*",
        "2": " * $Id: FontDetails.java 5235 2012-07-20 12:35:28Z achingarev $",
        "115": "    FontDetails(PdfName fontName, PdfIndirectReference indirectReference, BaseFont baseFont) {",
        "57": " */",
        "58": "class FontDetails {",
        "114": "     */"
      },
      "id": 2126830,
      "filename": "FontDetails.java"
    },
    {
      "repo": "https://bitbucket.org/tjklemz/itextmod",
      "language": "Java",
      "linescount": 302,
      "location": "/src/com/itextpdf/text/pdf",
      "name": "itextmod",
      "url": "https://searchcode.com/codesearch/view/125285629/",
      "md5hash": "fa3f332712a744ca04d4c7e6bd12d372",
      "lines": {
        "1": "/*",
        "2": " * $Id: FontDetails.java 4784 2011-03-15 08:33:00Z blowagie $",
        "115": "    FontDetails(PdfName fontName, PdfIndirectReference indirectReference, BaseFont baseFont) {",
        "57": " */",
        "58": "class FontDetails {",
        "114": "     */"
      },
      "id": 125285629,
      "filename": "FontDetails.java"
    },
    {
      "repo": "https://github.com/skovatch/org.eclipse.swt.git",
      "language": "Java",
      "linescount": 24,
      "location": "/Eclipse SWT PI/photon/org/eclipse/swt/internal/photon",
      "name": "org.eclipse.swt",
      "url": "https://searchcode.com/codesearch/view/109828735/",
      "md5hash": "7ef904dc75e0cd4c3aa344b0508c8374",
      "lines": {
        "13": " ",
        "14": "public class FontDetails {"
      },
      "id": 109828735,
      "filename": "FontDetails.java"
    },
    {
      "repo": "https://github.com/andreyvit/yoursway-swt.git",
      "language": "Java",
      "linescount": 22,
      "location": "/org.eclipse.swt/Eclipse SWT PI/photon/org/eclipse/swt/internal/photon",
      "name": "yoursway-swt",
      "url": "https://searchcode.com/codesearch/view/139826555/",
      "md5hash": "c1975cb735741007c2602a5e6ed7eeb0",
      "lines": {
        "13": " ",
        "14": "public class FontDetails {"
      },
      "id": 139826555,
      "filename": "FontDetails.java"
    },
    {
      "repo": "https://bitbucket.org/ivertex/itext-fork",
      "language": "Java",
      "linescount": 3125,
      "location": "/src/core/com/itextpdf/text/pdf",
      "name": "itext-fork",
      "url": "https://searchcode.com/codesearch/view/57657180/",
      "md5hash": "11357f9eb65de649fcb1af1a1f9ce15e",
      "lines": {
        "1664": "    public float getEffectiveStringWidth(String text, boolean kerned) {",
        "1665": "        BaseFont bf = state.fontDetails.getBaseFont();",
        "1415": "    private void showText2(String text) {",
        "1416": "        if (state.fontDetails == null)",
        "1417": "            throw new NullPointerException(MessageLocalization.getComposedMessage(\"font.and.size.must.be.set.before.writing.any.text\"));",
        "1418": "        byte b[] = state.fontDetails.convertToBytes(text);",
        "1703": "    private void showTextAligned(int alignment, String text, float x, float y, float rotation, boolean kerned) {",
        "78": "        /** This is the font in use */",
        "79": "        FontDetails fontDetails;",
        "1704": "        if (state.fontDetails == null)",
        "2464": "    public void showText(PdfTextArray text) {",
        "2465": "        if (state.fontDetails == null)",
        "1467": "    public void showTextKerned(String text) {",
        "1468": "        if (state.fontDetails == null)",
        "1469": "            throw new NullPointerException(MessageLocalization.getComposedMessage(\"font.and.size.must.be.set.before.writing.any.text\"));",
        "1470": "        BaseFont bf = state.fontDetails.getBaseFont();"
      },
      "id": 57657180,
      "filename": "PdfContentByte.java"
    },
    {
      "repo": "https://github.com/faquino/iText-4.2.0.git",
      "language": "Java",
      "linescount": 3131,
      "location": "/src/core/com/lowagie/text/pdf",
      "name": "iText-4.2.0",
      "url": "https://searchcode.com/codesearch/view/70298222/",
      "md5hash": "4d935860e4197f170a10f97dad18f2fd",
      "lines": {
        "1473": "    public void showTextKerned(String text) {",
        "1474": "        if (state.fontDetails == null)",
        "1475": "            throw new NullPointerException(MessageLocalization.getComposedMessage(\"font.and.size.must.be.set.before.writing.any.text\"));",
        "1476": "        BaseFont bf = state.fontDetails.getBaseFont();",
        "2470": "    public void showText(PdfTextArray text) {",
        "1670": "    public float getEffectiveStringWidth(String text, boolean kerned) {",
        "1671": "        BaseFont bf = state.fontDetails.getBaseFont();",
        "1709": "    private void showTextAligned(int alignment, String text, float x, float y, float rotation, boolean kerned) {",
        "2471": "        if (state.fontDetails == null)",
        "1421": "    private void showText2(String text) {",
        "1422": "        if (state.fontDetails == null)",
        "1423": "            throw new NullPointerException(MessageLocalization.getComposedMessage(\"font.and.size.must.be.set.before.writing.any.text\"));",
        "1424": "        byte b[] = state.fontDetails.convertToBytes(text);",
        "84": "        /** This is the font in use */",
        "85": "        FontDetails fontDetails;",
        "1710": "        if (state.fontDetails == null)"
      },
      "id": 70298222,
      "filename": "PdfContentByte.java"
    },
    {
      "repo": "https://bitbucket.org/darcyg/titracetool.git",
      "language": "Java",
      "linescount": 1630,
      "location": "/tracetool/src/android/tracetool",
      "name": "titracetool",
      "url": "https://searchcode.com/codesearch/view/51110329/",
      "md5hash": "83dfef8218723a6d9c5532e2f296a3a3",
      "lines": {
        "64": "   private ArrayList<FontDetail> fontDetails;",
        "1600": "         this.fontDetails.clear();",
        "1602": "      }",
        "1601": "         this.fontDetails = null; // once copied to commandlist, clear the array",
        "1449": "      fontDetail.fontName = \"BackgroundColor\";  // special name. Indicate that color is for background, not font itself //$NON-NLS-1$",
        "1450": "      this.fontDetails.add(fontDetail);",
        "63": "",
        "1533": "         this.fontDetails = new ArrayList<FontDetail>();",
        "1566": "            FontDetail fontDetail = this.fontDetails.get(c);",
        "1599": "         }",
        "1531": "",
        "1532": "      if (this.fontDetails == null)",
        "1565": "         {",
        "1534": "",
        "1535": "      this.fontDetails.add(fontDetail);"
      },
      "id": 51110329,
      "filename": "TraceNodeEx.java"
    },
    {
      "repo": "https://bitbucket.org/ivertex/itext-fork",
      "language": "Java",
      "linescount": 3166,
      "location": "/src/core/com/itextpdf/text/pdf",
      "name": "itext-fork",
      "url": "https://searchcode.com/codesearch/view/57657094/",
      "md5hash": "015de5db823946181507a75d57a47088",
      "lines": {
        "2146": "        for (Iterator it = documentFonts.values().iterator(); it.hasNext();) {",
        "2147": "            FontDetails ft = (FontDetails)it.next();",
        "2131": "",
        "2132": "    FontDetails addSimple(BaseFont bf) {",
        "2133": "        if (bf.getFontType() == BaseFont.FONT_TYPE_DOCUMENT) {",
        "2134": "            return new FontDetails(new PdfName(\"F\" + (fontNumber++)), ((DocumentFont)bf).getIndirectReference(), bf);",
        "2135": "        }",
        "2136": "        FontDetails ret = (FontDetails)documentFonts.get(bf);",
        "1241": "        for (Iterator it = documentFonts.values().iterator(); it.hasNext();) {",
        "1242": "            FontDetails details = (FontDetails)it.next();",
        "2139": "            ret = new FontDetails(new PdfName(\"F\" + (fontNumber++)), body.getPdfIndirectReference(), bf);",
        "2138": "            PdfXConformanceImp.checkPDFXConformance(this, PdfXConformanceImp.PDFXKEY_FONT, bf);"
      },
      "id": 57657094,
      "filename": "PdfWriter.java"
    },
    {
      "repo": "https://github.com/faquino/iText-4.2.0.git",
      "language": "Java",
      "linescount": 3198,
      "location": "/src/core/com/lowagie/text/pdf",
      "name": "iText-4.2.0",
      "url": "https://searchcode.com/codesearch/view/70296733/",
      "md5hash": "3db012ef4553f79ac7369fc42d3e625d",
      "lines": {
        "2144": "        FontDetails ret = (FontDetails)documentFonts.get(bf);",
        "1249": "        for (Iterator it = documentFonts.values().iterator(); it.hasNext();) {",
        "1250": "            FontDetails details = (FontDetails)it.next();",
        "2147": "            ret = new FontDetails(new PdfName(\"F\" + (fontNumber++)), body.getPdfIndirectReference(), bf);",
        "2154": "        for (Iterator it = documentFonts.values().iterator(); it.hasNext();) {",
        "2155": "            FontDetails ft = (FontDetails)it.next();",
        "2146": "            PdfXConformanceImp.checkPDFXConformance(this, PdfXConformanceImp.PDFXKEY_FONT, bf);",
        "2139": "",
        "2140": "    FontDetails addSimple(BaseFont bf) {",
        "2141": "        if (bf.getFontType() == BaseFont.FONT_TYPE_DOCUMENT) {",
        "2142": "            return new FontDetails(new PdfName(\"F\" + (fontNumber++)), ((DocumentFont)bf).getIndirectReference(), bf);",
        "2143": "        }"
      },
      "id": 70296733,
      "filename": "PdfWriter.java"
    },
    {
      "repo": "https://bitbucket.org/darcyg/titracetool.git",
      "language": "Java",
      "linescount": 338,
      "location": "/tracetool/src/android/tracetool",
      "name": "titracetool",
      "url": "https://searchcode.com/codesearch/view/51110336/",
      "md5hash": "7736ad2d541f8058e94a1015c72a6eed",
      "lines": {
        "224": "      this.fontDetails.add(fontDetail);",
        "272": "      {",
        "305": "         }",
        "307": "         this.fontDetails = null ;  // once copied to commandlist, clear the array",
        "306": "         this.fontDetails.clear() ;",
        "270": "      // add font detail",
        "271": "      if (this.fontDetails != null)",
        "144": "   private ArrayList<FontDetail> fontDetails ;",
        "273": "         for (int c = 0; c < this.fontDetails.size(); c++)",
        "274": "         {",
        "275": "            FontDetail fontDetail = (FontDetail) this.fontDetails.get(c);",
        "308": "     }",
        "143": "",
        "220": "",
        "221": "      if (this.fontDetails == null)",
        "222": "         this.fontDetails = new ArrayList<FontDetail>();",
        "223": ""
      },
      "id": 51110336,
      "filename": "TMemberNode.java"
    },
    {
      "repo": "https://bitbucket.org/ivertex/itext-fork",
      "language": "Java",
      "linescount": 172,
      "location": "/src/core/com/itextpdf/text/pdf",
      "name": "itext-fork",
      "url": "https://searchcode.com/codesearch/view/57657187/",
      "md5hash": "a495851de7fe69f43862eb25f50d0e03",
      "lines": {
        "137": "        if (bf.getFontType() == BaseFont.FONT_TYPE_DOCUMENT) {",
        "138": "            state.fontDetails = new FontDetails(null, ((DocumentFont)bf).getIndirectReference(), bf);",
        "140": "        else",
        "141": "            state.fontDetails = writer.addSimple(bf);",
        "144": "            if (bf.isSubset() && bf.getFontType() == BaseFont.FONT_TYPE_TTUNI)",
        "145": "                psn = state.fontDetails.getFontName();",
        "147": "                psn = new PdfName(bf.getPostscriptFontName());",
        "148": "                state.fontDetails.setSubset(false);",
        "151": "        PageResources prs = getPageResources();",
        "152": "//        PdfName name = state.fontDetails.getFontName();",
        "153": "        prs.addFont(psn, state.fontDetails.getIndirectReference());",
        "154": "        content.append(psn.getBytes()).append(' ').append(size).append(\" Tf\").append_i(separator);"
      },
      "id": 57657187,
      "filename": "PdfAppearance.java"
    },
    {
      "repo": "https://bitbucket.org/keithb/tdd",
      "language": "Java",
      "linescount": 3067,
      "location": "/targets/itext/1.4.8/com/lowagie/text/pdf",
      "name": "tdd",
      "url": "https://searchcode.com/codesearch/view/120313728/",
      "md5hash": "44193203b0b23d346d75b438178de9cc",
      "lines": {
        "1680": "        if (state.fontDetails == null)",
        "2440": "    public void showText(PdfTextArray text) {",
        "1347": "        state.size = size;",
        "1348": "        state.fontDetails = writer.addSimple(bf);",
        "1349": "        PageResources prs = getPageResources();",
        "1350": "        PdfName name = state.fontDetails.getFontName();",
        "1351": "        name = prs.addFont(name, state.fontDetails.getIndirectReference());",
        "1352": "        content.append(name.getBytes()).append(' ').append(size).append(\" Tf\").append_i(separator);",
        "2441": "        if (state.fontDetails == null)",
        "1679": "    private void showTextAligned(int alignment, String text, float x, float y, float rotation, boolean kerned) {",
        "80": "        /** This is the font in use */",
        "81": "        FontDetails fontDetails;",
        "1433": "    public void showTextKerned(String text) {",
        "1434": "        if (state.fontDetails == null)",
        "1435": "            throw new NullPointerException(\"Font and size must be set before writing any text\");",
        "1436": "        BaseFont bf = state.fontDetails.getBaseFont();"
      },
      "id": 120313728,
      "filename": "PdfContentByte.java"
    },
    {
      "repo": "https://bitbucket.org/keithb/tdd",
      "language": "Java",
      "linescount": 2805,
      "location": "/targets/itext/1.4.8/com/lowagie/text/pdf",
      "name": "tdd",
      "url": "https://searchcode.com/codesearch/view/120313745/",
      "md5hash": "3f3bd800eb13477a077d860a2e726118",
      "lines": {
        "1218": "        for (Iterator it = documentFonts.values().iterator(); it.hasNext();) {",
        "1571": "    FontDetails addSimple(BaseFont bf) {",
        "1572": "        if (bf.getFontType() == BaseFont.FONT_TYPE_DOCUMENT) {",
        "1573": "            return new FontDetails(new PdfName(\"F\" + (fontNumber++)), ((DocumentFont)bf).getIndirectReference(), bf);",
        "1574": "        }",
        "1575": "        FontDetails ret = (FontDetails)documentFonts.get(bf);",
        "1577": "            checkPDFXConformance(this, PDFXKEY_FONT, bf);",
        "1578": "            ret = new FontDetails(new PdfName(\"F\" + (fontNumber++)), body.getPdfIndirectReference(), bf);",
        "1570": "    ",
        "1585": "        for (Iterator it = documentFonts.values().iterator(); it.hasNext();) {",
        "1586": "            FontDetails ft = (FontDetails)it.next();",
        "1219": "            FontDetails details = (FontDetails)it.next();"
      },
      "id": 120313745,
      "filename": "PdfWriter.java"
    },
    {
      "repo": "http://fb2pdf.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 3718,
      "location": "/src/java/src/com/itextpdf/text/pdf",
      "name": "fb2pdf",
      "url": "https://searchcode.com/codesearch/view/2126804/",
      "md5hash": "edc34adcb58bf7009787e25c23e46f17",
      "lines": {
        "73": "        /** This is the font in use */",
        "74": "        FontDetails fontDetails;",
        "1584": "        state.size = size;",
        "1585": "        state.fontDetails = writer.addSimple(bf);",
        "1586": "        PageResources prs = getPageResources();",
        "1587": "        PdfName name = state.fontDetails.getFontName();",
        "1588": "        name = prs.addFont(name, state.fontDetails.getIndirectReference());",
        "1589": "        content.append(name.getBytes()).append(' ').append(size).append(\" Tf\").append_i(separator);",
        "1686": "            throw new NullPointerException(MessageLocalization.getComposedMessage(\"font.and.size.must.be.set.before.writing.any.text\"));",
        "1687": "        BaseFont bf = state.fontDetails.getBaseFont();",
        "1684": "    public void showTextKerned(final String text) {",
        "1940": "        BaseFont bf = state.fontDetails.getBaseFont();",
        "1979": "        if (state.fontDetails == null)",
        "1939": "    public float getEffectiveStringWidth(final String text, final boolean kerned) {",
        "1978": "    private void showTextAligned(final int alignment, final String text, float x, float y, final float rotation, final boolean kerned) {",
        "1685": "        if (state.fontDetails == null)"
      },
      "id": 2126804,
      "filename": "PdfContentByte.java"
    },
    {
      "repo": "https://bitbucket.org/keithb/tdd",
      "language": "Java",
      "linescount": 156,
      "location": "/targets/itext/1.4.8/com/lowagie/text/pdf",
      "name": "tdd",
      "url": "https://searchcode.com/codesearch/view/120313833/",
      "md5hash": "de394b5a4858b605304d9c8d101e359a",
      "lines": {
        "128": "            if (bf.isSubset() && bf.getFontType() == BaseFont.FONT_TYPE_TTUNI)",
        "129": "                psn = state.fontDetails.getFontName();",
        "131": "                psn = new PdfName(bf.getPostscriptFontName());",
        "132": "                state.fontDetails.setSubset(false);",
        "135": "        PageResources prs = getPageResources();",
        "136": "//        PdfName name = state.fontDetails.getFontName();",
        "137": "        prs.addFont(psn, state.fontDetails.getIndirectReference());",
        "138": "        content.append(psn.getBytes()).append(' ').append(size).append(\" Tf\").append_i(separator);",
        "121": "        if (bf.getFontType() == BaseFont.FONT_TYPE_DOCUMENT) {",
        "122": "            state.fontDetails = new FontDetails(null, ((DocumentFont)bf).getIndirectReference(), bf);",
        "124": "        else",
        "125": "            state.fontDetails = writer.addSimple(bf);"
      },
      "id": 120313833,
      "filename": "PdfAppearance.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 146,
      "location": "/components/forks/poi/src/loci/poi/hssf/usermodel",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642326/",
      "md5hash": "2ed6f6740577001880e70f7449c49b1e",
      "lines": {
        "128": "\t\t// If not, check with the font style added",
        "129": "\t\tif(fontMetricsProps.get(FontDetails.buildFontHeightProperty(fontName)) == null && ",
        "66": "     */",
        "67": "    public static FontDetails getFontDetails(Font font)",
        "135": "\t\t// Get the details on this font",
        "136": "        if (fontDetailsMap.get(fontName) == null) {",
        "137": "            FontDetails fontDetails = FontDetails.create(fontName, fontMetricsProps);",
        "138": "            fontDetailsMap.put( fontName, fontDetails );",
        "139": "            return fontDetails;",
        "140": "        } else {",
        "130": "\t\tfontMetricsProps.get(FontDetails.buildFontHeightProperty(fontName+\".\"+fontStyle)) != null) {",
        "141": "            return (FontDetails) fontDetailsMap.get(fontName);",
        "131": "\t\t\t// Need to add on the style to the font name",
        "92": "                    // Use the built-in font metrics file off the classpath",
        "93": "                    metricsIn = FontDetails.class.getResourceAsStream(\"/font_metrics.properties\");"
      },
      "id": 15642326,
      "filename": "StaticFontMetrics.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 17,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 14,
      "source": "Github",
      "id": 2
    },
    {
      "count": 5,
      "source": "Google Code",
      "id": 1
    }
  ]
}