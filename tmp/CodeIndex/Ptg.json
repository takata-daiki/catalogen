{
  "matchterm": "Ptg",
  "previouspage": null,
  "searchterm": "Ptg",
  "query": "Ptg",
  "language_filters": [
    {
      "count": 423,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 423,
  "results": [
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 485,
      "location": "/components/forks/poi/src/loci/poi/hssf/record/formula",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642564/",
      "md5hash": "a03fe68945d6947241c13705dd4cc5e3",
      "lines": {
        "66": "     *we keep this method in case we wish to change the way we parse",
        "67": "     *It needs a getPrecedence in OperationsPtg",
        "68": "    ",
        "69": "    public static List ptgsToRpn(List infixPtgs) {",
        "72": "        ",
        "73": "        java.util.ListIterator i = infixPtgs.listIterator();",
        "74": "        Object p;",
        "75": "        OperationPtg o ;",
        "55": "",
        "56": "public abstract class Ptg",
        "59": "        ",
        "60": "    /* convert infix order ptg list to rpn order ptg list",
        "61": "     * @return List ptgs in RPN order",
        "62": "     * @param infixPtgs List of ptgs in infix order",
        "63": "     */"
      },
      "id": 15642564,
      "filename": "Ptg.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 317,
      "location": "/src/main/java/com/extentech/formats/XLS/formulas",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47124959/",
      "md5hash": "f08b5be6da1ae6c26603cf3d16218203",
      "lines": {
        "64": "    ",
        "65": "\tpublic static int PTG_TYPE_SINGLE       = 1; // single-byte record",
        "34": "",
        "35": "   Ptg is the interface all ptgs implement in order to be handled equally under the",
        "36": "   eyes of the all seeing one, \"he that shall not be named\"  A ptg is a unique segment",
        "37": "   of a formula stack that indicates a value, a reference to a value, or an operation.",
        "39": "",
        "40": " * @see Ptg",
        "44": "",
        "45": "public interface Ptg extends XLSConstants, Serializable{",
        "66": "\tpublic static int PTG_TYPE_ARRAY        = 2; // array of bytes record",
        "59": "    ",
        "60": "\tpublic static int PTG_LOCATION_POLICY_UNLOCKED\t= 0;",
        "61": "\tpublic static int PTG_LOCATION_POLICY_LOCKED\t= 1;",
        "62": "\tpublic static int PTG_LOCATION_POLICY_TRACK\t\t= 2;",
        "63": "\t"
      },
      "id": 47124959,
      "filename": "Ptg.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 317,
      "location": "/src/main/java/com/extentech/formats/XLS/formulas",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976583/",
      "md5hash": "f08b5be6da1ae6c26603cf3d16218203",
      "lines": {
        "64": "    ",
        "65": "\tpublic static int PTG_TYPE_SINGLE       = 1; // single-byte record",
        "34": "",
        "35": "   Ptg is the interface all ptgs implement in order to be handled equally under the",
        "36": "   eyes of the all seeing one, \"he that shall not be named\"  A ptg is a unique segment",
        "37": "   of a formula stack that indicates a value, a reference to a value, or an operation.",
        "39": "",
        "40": " * @see Ptg",
        "44": "",
        "45": "public interface Ptg extends XLSConstants, Serializable{",
        "66": "\tpublic static int PTG_TYPE_ARRAY        = 2; // array of bytes record",
        "59": "    ",
        "60": "\tpublic static int PTG_LOCATION_POLICY_UNLOCKED\t= 0;",
        "61": "\tpublic static int PTG_LOCATION_POLICY_LOCKED\t= 1;",
        "62": "\tpublic static int PTG_LOCATION_POLICY_TRACK\t\t= 2;",
        "63": "\t"
      },
      "id": 50976583,
      "filename": "Ptg.java"
    },
    {
      "repo": "https://github.com/semantalytics/RightField.git",
      "language": "Java",
      "linescount": 140,
      "location": "/src/main/java/uk/ac/manchester/cs/owl/semspreadsheets/model/hssf/impl",
      "name": "RightField",
      "url": "https://searchcode.com/codesearch/view/72854649/",
      "md5hash": "9b32ac4d62bd845be04702f4e7103178",
      "lines": {
        "128": "\t\t\t} else if (token instanceof StringPtg) {",
        "129": "\t\t\t\tStringPtg stringPtg = (StringPtg) token;",
        "69": "\t\t\t\t\t\tFormula f1 = dvRecord.getFormula1();",
        "70": "\t\t\t\t\t\tString formula1 = getStringFromPtgTokens(",
        "82": "\t\t\t\t\t\tFormula f2 = dvRecord.getFormula2();",
        "83": "\t\t\t\t\t\tString formula1 = getStringFromPtgTokens(",
        "84": "\t\t\t\t\t\t\t\tf1.getTokens(), workbook);",
        "21": "import org.apache.poi.ss.formula.Formula;",
        "22": "import org.apache.poi.ss.formula.ptg.IntPtg;",
        "23": "import org.apache.poi.ss.formula.ptg.NamePtg;",
        "24": "import org.apache.poi.ss.formula.ptg.Ptg;",
        "25": "import org.apache.poi.ss.formula.ptg.StringPtg;",
        "26": "import org.apache.poi.ss.util.CellRangeAddressList;",
        "127": "\t\t\t\tsb.append(wb.getNameText(namePtg));",
        "85": "\t\t\t\t\t\tString formula2 = getStringFromPtgTokens("
      },
      "id": 72854649,
      "filename": "PatchedPoi.java"
    },
    {
      "repo": "https://bitbucket.org/manticoretrader/etltools",
      "language": "Java",
      "linescount": 297,
      "location": "/src/com/manticore/report",
      "name": "etltools",
      "url": "https://searchcode.com/codesearch/view/121321570/",
      "md5hash": "7585d5862f58929ffd0917b3367eea3f",
      "lines": {
        "96": "\t\t\t\t\t\t\t\t\t\tRefPtgBase refPtgBase = (RefPtgBase) ptg;",
        "97": "\t\t\t\t\t\t\t\t\t\t// if row is relative",
        "98": "\t\t\t\t\t\t\t\t\t\tif (refPtgBase.isRowRelative()) {",
        "99": "\t\t\t\t\t\t\t\t\t\t\trefPtgBase.setRow(",
        "11": "import org.apache.poi.ss.formula.*;",
        "12": "import org.apache.poi.ss.formula.ptg.AreaPtgBase;",
        "13": "import org.apache.poi.ss.formula.ptg.Ptg;",
        "14": "import org.apache.poi.ss.formula.ptg.RefPtgBase;",
        "15": "import org.apache.poi.ss.usermodel.*;",
        "89": "\t\t\t\t\t\t\t\tString oldFormula = oldCell.getCellFormula();",
        "90": "\t\t\t\t\t\t\t\tPtg[] ptgs",
        "92": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tworkbook.getSheetIndex(worksheet));",
        "93": "\t\t\t\t\t\t\t\t// iterating through all PTG's",
        "94": "\t\t\t\t\t\t\t\tfor (Ptg ptg : ptgs) {",
        "95": "\t\t\t\t\t\t\t\t\tif (ptg instanceof RefPtgBase) {"
      },
      "id": 121321570,
      "filename": "ExcelTools.java"
    },
    {
      "repo": "https://github.com/hellobaby/druid.git",
      "language": "Java",
      "linescount": 224,
      "location": "/src/main/java/com/alibaba/druid/support/jconsole/model",
      "name": "druid",
      "url": "https://searchcode.com/codesearch/view/69160355/",
      "md5hash": "22050d45ed0c31baee93fcfb2f2def57",
      "lines": {
        "160": "                Object tmpObj = ptg.vector.get(i);",
        "161": "                if (tmpObj instanceof ColumnGroup) {",
        "167": "                    if (tmpObj == tc) {",
        "168": "                        ptg.vector.remove(i);",
        "177": "",
        "178": "    public boolean removeColumnGrp(ColumnGroup ptg, ColumnGroup tg) {",
        "180": "        if (tg != null) {",
        "181": "            for (int i = 0; i < ptg.vector.size(); i++) {",
        "182": "                Object tmpObj = ptg.vector.get(i);",
        "183": "                if (tmpObj instanceof ColumnGroup) {",
        "184": "                    if (tmpObj == tg) {",
        "185": "                        ptg.vector.remove(i);",
        "155": "",
        "156": "    public boolean removeColumn(ColumnGroup ptg, TableColumn tc) {",
        "159": "            for (int i = 0; i < ptg.vector.size(); i++) {"
      },
      "id": 69160355,
      "filename": "ColumnGroup.java"
    },
    {
      "repo": "http://zkspreadsheet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 5111,
      "location": "/zss/src/org/zkoss/zss/model/impl",
      "name": "zkspreadsheet",
      "url": "https://searchcode.com/codesearch/view/3970697/",
      "md5hash": "f6740268ba4be4778508748ca1c3becc",
      "lines": {
        "1184": "\t",
        "1185": "\tprivate static Set<Ref>[] removeCell(Cell cell, boolean clearPtgs) {",
        "67": "import org.zkoss.poi.ss.formula.LazyAreaEval;",
        "68": "import org.zkoss.poi.ss.formula.PtgShifter;",
        "71": "import org.zkoss.poi.ss.formula.eval.ValueEval;",
        "72": "import org.zkoss.poi.ss.formula.ptg.Area3DPtg;",
        "73": "import org.zkoss.poi.ss.formula.ptg.AreaPtgBase;",
        "74": "import org.zkoss.poi.ss.formula.ptg.Ptg;",
        "75": "import org.zkoss.poi.ss.formula.ptg.RefPtgBase;",
        "1187": "\t\t\t//remove formula cell and create a blank one",
        "1796": "\tprivate static void setHSSFCellPtgs(HSSFCell cell, Ptg[] ptgs) {",
        "1795": "\t}",
        "1188": "\t\t\tremoveFormula(cell, clearPtgs);",
        "1793": "        \tsetXSSFCellPtgs((XSSFCell)cell, ptgs);",
        "1792": "        } else {"
      },
      "id": 3970697,
      "filename": "BookHelper.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 1069,
      "location": "/components/forks/poi/src/loci/poi/hssf/model",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642368/",
      "md5hash": "28d644f6963548f6234cc54a47085ba2",
      "lines": {
        "336": "            } else if (cellRef) {",
        "322": "                \t",
        "323": "                \ttokens.add(new Area3DPtg(first+\":\"+third,externIdx));",
        "324": "                } else {                                  ",
        "101": "     *  parsed against the supplied workbook.",
        "102": "     * A later call the parse() method to return ptg list in",
        "103": "     *  rpn order, then call the getRPNPtg() to retrive the",
        "328": "                tokens.add(new Ref3DPtg(first,externIdx));",
        "327": "            } else {",
        "305": "            tokens.add(new AreaPtg(first+\":\"+second));",
        "334": "            if (boolLit) {",
        "335": "                tokens.add(new BoolPtg(name));",
        "304": "            String second = GetName();",
        "49": "",
        "50": "//import PTG's .. since we need everything, import *",
        "337": "                tokens.add(new ReferencePtg(name));",
        "325": "                  tokens.add(new Area3DPtg(first+\":\"+second,externIdx));"
      },
      "id": 15642368,
      "filename": "FormulaParser.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 895,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642474/",
      "md5hash": "b624b98cf927c8cacabdf0db00401036",
      "lines": {
        "640": "        Ptg ptg;",
        "561": "",
        "562": "\t\t\tPtg.serializePtgStack(field_13_name_definition,  data, start_of_name_definition + offset );",
        "462": "    /** gets the definition, reference (Formula)",
        "463": "     * @return definition -- can be null if we cant parse ptgs",
        "48": "import loci.poi.hssf.record.formula.DeletedArea3DPtg;",
        "49": "import loci.poi.hssf.record.formula.DeletedRef3DPtg;",
        "50": "import loci.poi.hssf.record.formula.Ptg;",
        "51": "import loci.poi.hssf.record.formula.Ref3DPtg;",
        "52": "import loci.poi.hssf.util.RangeAddress;",
        "46": "import loci.poi.hssf.model.Workbook;",
        "599": "        {",
        "600": "        \tPtg ptg = ( Ptg ) list.get(k);",
        "601": "        \t",
        "47": "import loci.poi.hssf.record.formula.Area3DPtg;",
        "639": "    public void setExternSheetNumber(short externSheetNumber){"
      },
      "id": 15642474,
      "filename": "NameRecord.java"
    },
    {
      "repo": "https://github.com/rpwaltz/hazelcast.git",
      "language": "Java",
      "linescount": 110,
      "location": "/hazelcast-spring/src/test/java/com/hazelcast/spring",
      "name": "hazelcast",
      "url": "https://searchcode.com/codesearch/view/73870299/",
      "md5hash": "13eaf338824d9f76ba3f78484611c773",
      "lines": {
        "89": "        ThreadGroup tg = Thread.currentThread().getThreadGroup();",
        "90": "        ThreadGroup ptg;",
        "91": "        while ((ptg = tg.getParent()) != null)",
        "92": "            tg = ptg;",
        "93": "        return tg;"
      },
      "id": 73870299,
      "filename": "TestApplicationContext.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 572,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642396/",
      "md5hash": "097b310c8bca6adc7d7f77161df42564",
      "lines": {
        "128": "          field_7_expression_len = in.readShort();",
        "129": "          field_8_parsed_expr    = Ptg.createParsedExpressionTokens(field_7_expression_len, in);",
        "258": "        return ( Ptg ) field_8_parsed_expr.pop();",
        "299": "    ",
        "263": "     *",
        "257": "    {",
        "264": "     * @return Ptg - the token",
        "300": "    public void setParsedExpression(Stack ptgs) {",
        "266": "",
        "267": "    public Ptg peekExpressionToken()",
        "268": "    {",
        "269": "        return ( Ptg ) field_8_parsed_expr.peek();",
        "256": "    public Ptg popExpressionToken()",
        "301": "      field_8_parsed_expr = ptgs;",
        "289": "     * @return list of tokens (casts stack to a list and returns it!)",
        "290": "     * this method can return null is we are unable to create Ptgs from ",
        "255": ""
      },
      "id": 15642396,
      "filename": "FormulaRecord.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 305,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642473/",
      "md5hash": "0194853a122e58e181b7c54e5cfbf881",
      "lines": {
        "160": "",
        "161": "        buffer.append(\"    .numptgsinarray  = \").append(field_7_parsed_expr.size())",
        "226": "              RefNPtg refNPtg = (RefNPtg)ptg;",
        "227": "              ptg = new ReferencePtg( (short)(formulaRow + refNPtg.getRow()),",
        "228": "                                      (byte)(formulaColumn + refNPtg.getColumn()),",
        "229": "                                     refNPtg.isRowRelative(),",
        "230": "                                     refNPtg.isColRelative());",
        "199": "        while (in.remaining() != 0) {",
        "200": "            Ptg ptg = Ptg.createPtg(in);",
        "201": "            stack.push(ptg);",
        "202": "        }",
        "225": "            if (ptg instanceof RefNPtg) {",
        "224": "            Ptg ptg = (Ptg) field_7_parsed_expr.get(k);",
        "235": "                                 refNVPtg.isRowRelative(),",
        "233": "              ptg = new RefVPtg( (short)(formulaRow + refNVPtg.getRow()),",
        "234": "                                 (byte)(formulaColumn + refNVPtg.getColumn()),",
        "231": "            } else if (ptg instanceof RefNVPtg) {"
      },
      "id": 15642473,
      "filename": "SharedFormulaRecord.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 271,
      "location": "/components/forks/poi/src/loci/poi/hssf/record/formula",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642537/",
      "md5hash": "ae4b2a799caaa5bd816effb2aa28e037",
      "lines": {
        "129": "    {",
        "66": "",
        "67": "public class ArrayPtg extends Ptg",
        "130": "        StringBuffer buffer = new StringBuffer(\"[ArrayPtg]\\n\");",
        "144": "    {",
        "145": "        array[offset++] = (byte) (sid + ptgClass);",
        "55": "/**",
        "56": " * ArrayPtg - handles arrays",
        "57": " * ",
        "58": " * The ArrayPtg is a little wierd, the size of the Ptg when parsing initially only",
        "59": " * includes the Ptg sid and the reserved bytes. The next Ptg in the expression then follows.",
        "60": " * It is only after the \"size\" of all the Ptgs is met, that the ArrayPtg data is actually",
        "61": " * held after this. So Ptg.createParsedExpression keeps track of the number of ",
        "62": " * ArrayPtg elements and need to parse the data upto the FORMULA record size.",
        "63": " *  "
      },
      "id": 15642537,
      "filename": "ArrayPtg.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 102,
      "location": "/components/forks/poi/src/loci/poi/hssf/record/formula",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642535/",
      "md5hash": "2436f0ae2e31634eb44caeb14e1c9980",
      "lines": {
        "66": "",
        "67": "public class ArrayPtgV extends ArrayPtg",
        "70": "",
        "71": "    protected ArrayPtgV() {",
        "74": "",
        "75": "    public ArrayPtgV(RecordInputStream in)",
        "55": "/**",
        "56": " * ArrayPtg - handles arrays",
        "57": " * ",
        "58": " * The ArrayPtg is a little wierd, the size of the Ptg when parsing initially only",
        "59": " * includes the Ptg sid and the reserved bytes. The next Ptg in the expression then follows.",
        "60": " * It is only after the \"size\" of all the Ptgs is met, that the ArrayPtg data is actually",
        "61": " * held after this. So Ptg.createParsedExpression keeps track of the number of ",
        "62": " * ArrayPtg elements and need to parse the data upto the FORMULA record size.",
        "63": " *  "
      },
      "id": 15642535,
      "filename": "ArrayPtgV.java"
    },
    {
      "repo": "http://zkspreadsheet.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 163,
      "location": "/zss/src/org/zkoss/poi/ss/formula",
      "name": "zkspreadsheet",
      "url": "https://searchcode.com/codesearch/view/3970569/",
      "md5hash": "6c4cf9a355470c2f624993f5b0758c74",
      "lines": {
        "134": "\t\t\t}",
        "135": "\t\t\tfor(Ptg ptg : precedents) {",
        "136": "\t\t\t\tfinal WorkbookEvaluator evaluator = ec.getWorkbookEvaluator();",
        "137": "\t\t\t\tfinal ValueEval opResult = evaluator.getEvalForPtg(ptg, ec);",
        "114": "\t@Override",
        "115": "\tpublic void addDependency(OperationEvaluationContext ec, Ptg[] ptgs) {",
        "116": "\t\tboolean withIndirect = false;",
        "117": "\t\tfinal Set<Ptg> precedents = new HashSet<Ptg>(ptgs.length); ",
        "118": "\t\tfor(int j = 0; j < ptgs.length; ++j) {",
        "24": "import org.zkoss.poi.ss.formula.function.FunctionMetadataRegistry;",
        "25": "import org.zkoss.poi.ss.formula.ptg.AreaPtgBase;",
        "26": "import org.zkoss.poi.ss.formula.ptg.FuncPtg;",
        "27": "import org.zkoss.poi.ss.formula.ptg.Ptg;",
        "28": "import org.zkoss.poi.ss.formula.ptg.RefPtgBase;",
        "29": "import org.zkoss.poi.ss.util.CellReference;"
      },
      "id": 3970569,
      "filename": "DefaultDependencyTracker.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 97,
      "location": "/components/forks/poi/src/loci/poi/hssf/record/formula",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642584/",
      "md5hash": "380810e3067824231a40cf95f0036bd8",
      "lines": {
        "64": "",
        "65": "    protected ArrayPtgA() {",
        "69": "",
        "70": "    public ArrayPtgA(RecordInputStream in)",
        "75": "    public Object clone() {",
        "76": "      ArrayPtgA ptg = new ArrayPtgA();",
        "77": "      ptg.field_1_reserved = field_1_reserved;",
        "78": "      ptg.field_2_reserved = field_2_reserved;",
        "79": "      ptg.field_3_reserved = field_3_reserved;",
        "80": "      ptg.field_4_reserved = field_4_reserved;",
        "81": "      ptg.field_5_reserved = field_5_reserved;",
        "55": "/**",
        "56": " * ArrayPtgA - handles arrays",
        "60": "",
        "61": "public class ArrayPtgA extends ArrayPtg"
      },
      "id": 15642584,
      "filename": "ArrayPtgA.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 282,
      "location": "/components/forks/poi/src/loci/poi/hssf/dev",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642597/",
      "md5hash": "8c0f3f19688417e8138fee787add6462",
      "lines": {
        "128": "            buf.append(sep);",
        "129": "            switch (token.getPtgClass()) {",
        "130": "                case Ptg.CLASS_REF :",
        "131": "                    buf.append(\"REF\");",
        "132": "                    break;",
        "133": "                case Ptg.CLASS_VALUE :",
        "146": "                        buf.append(\"REF\");",
        "135": "                    break;",
        "136": "                case Ptg.CLASS_ARRAY :",
        "141": "            buf.append(sep);",
        "142": "            if (numptgs>1) {",
        "143": "                token = (Ptg) tokens.get(numptgs-2);",
        "144": "                switch (token.getPtgClass()) {",
        "145": "                    case Ptg.CLASS_REF :",
        "114": "        List tokens= record.getParsedExpression();",
        "115": "        int numptgs = record.getNumberOfExpressionTokens();",
        "116": "        Ptg token = null;"
      },
      "id": 15642597,
      "filename": "FormulaViewer.java"
    },
    {
      "repo": "https://github.com/vschlecht/Nightweb.git",
      "language": "Java",
      "linescount": 195,
      "location": "/common/java/router/net/i2p/router/tunnel",
      "name": "Nightweb",
      "url": "https://searchcode.com/codesearch/view/70838415/",
      "md5hash": "6aa4246c50677402f159849d5dab357e",
      "lines": {
        "128": "            _log.info(\"PTG backlogged, queued to \" + _nextHop + \" : \" + _prequeue.size() +",
        "97": "        if (_log.shouldLog(Log.DEBUG))",
        "98": "            _log.debug(\"OB PTG add type \" + msg.getType() + \" pri \" + cur.getPriority());",
        "68": "            _isInbound = false;",
        "69": "        } else if (receiver != null) {  // extended by ThrottledPTG for IB",
        "74": "        } else {",
        "75": "            // Poison PTG",
        "87": "     *",
        "88": "     * This is only for OBGWs. See TPTG override for IBGWs.",
        "188": "        if (rv && _log.shouldLog(Log.INFO))",
        "189": "            _log.info(\"PTG remaining to \" + _nextHop + \" : \" + _prequeue.size() +",
        "127": "        if (backlogged && _log.shouldLog(Log.INFO))"
      },
      "id": 70838415,
      "filename": "PumpedTunnelGateway.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 343,
      "location": "/components/forks/poi/src/loci/poi/hssf/record/formula",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642563/",
      "md5hash": "d4475a1caeccfa63cc9a7f88ef1f72f7",
      "lines": {
        "64": "public class Area3DPtg extends Ptg",
        "66": "\tpublic final static byte sid = 0x3b;",
        "67": "\tprivate final static int SIZE = 11; // 10 + 1 for Ptg",
        "297": "\t{",
        "298": "\t\treturn Ptg.CLASS_REF;",
        "302": "\t{",
        "303": "\t\tArea3DPtg ptg = new Area3DPtg();",
        "304": "\t\tptg.field_1_index_extern_sheet = field_1_index_extern_sheet;",
        "305": "\t\tptg.field_2_first_row = field_2_first_row;",
        "306": "\t\tptg.field_3_last_row = field_3_last_row;",
        "307": "\t\tptg.field_4_first_column = field_4_first_column;",
        "308": "\t\tptg.field_5_last_column = field_5_last_column;",
        "54": "/**",
        "55": " * Title:        Area 3D Ptg - 3D referecnce (Sheet + Area)<P>",
        "63": ""
      },
      "id": 15642563,
      "filename": "Area3DPtg.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 113,
      "location": "/components/forks/poi/src/loci/poi/hssf/record/formula",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642579/",
      "md5hash": "464c7797a254a50e9793386ddf4b679a",
      "lines": {
        "64": "    public AreaErrPtg(RecordInputStream in)",
        "98": "    {",
        "99": "        AreaErrPtg ptg = new AreaErrPtg();",
        "100": "        ptg.setFirstRow(getFirstRow());",
        "101": "        ptg.setFirstColumn(getFirstColumn());",
        "102": "        ptg.setLastRow(getLastRow());",
        "72": "",
        "73": "        buffer.append(\"AreaErrPtg\\n\");",
        "53": " */",
        "54": "public class AreaErrPtg extends AreaPtg",
        "89": "        array[offset] = (byte) (sid + ptgClass);",
        "88": "        super.writeBytes(array, offset);",
        "57": "",
        "58": "    private AreaErrPtg()",
        "63": "    "
      },
      "id": 15642579,
      "filename": "AreaErrPtg.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 275,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 78,
      "source": "Github",
      "id": 2
    },
    {
      "count": 70,
      "source": "Google Code",
      "id": 1
    }
  ]
}