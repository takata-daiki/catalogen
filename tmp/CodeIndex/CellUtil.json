{
  "matchterm": "CellUtil",
  "previouspage": null,
  "searchterm": "CellUtil",
  "query": "CellUtil",
  "language_filters": [
    {
      "count": 331,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 331,
  "results": [
    {
      "repo": "git://github.com/apache/hbase.git",
      "language": "Java",
      "linescount": 2536,
      "location": "/hbase-common/src/main/java/org/apache/hadoop/hbase",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/116069149/",
      "md5hash": "be7570343909034e12a4bb17d286448d",
      "lines": {
        "1987": "    public byte[] getFamilyArray() {",
        "516": "      // The incoming cell is supposed to be SettableTimestamp type.",
        "517": "      CellUtil.setTimestamp(cell, ts, tsOffset);",
        "2022": "    public byte[] getValueArray() {",
        "2023": "      return CellUtil.cloneValue(this);",
        "522": "      // The incoming cell is supposed to be SettableSequenceId type.",
        "523": "      CellUtil.setSequenceId(cell, seqId);",
        "2002": "    public byte[] getQualifierArray() {",
        "2003": "      return CellUtil.cloneQualifier(this);",
        "52": "@InterfaceStability.Evolving",
        "53": "public final class CellUtil {",
        "57": "   */",
        "1972": "    public byte[] getRowArray() {",
        "58": "  private CellUtil(){}",
        "1988": "      return CellUtil.cloneFamily(this);",
        "1973": "      return CellUtil.cloneRow(this);"
      },
      "id": 116069149,
      "filename": "CellUtil.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 478,
      "location": "/hbase-common/src/main/java/org/apache/hadoop/hbase",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94573115/",
      "md5hash": "32f8e812132452d2020a7ee5759cd5ce",
      "lines": {
        "38": "@InterfaceStability.Evolving",
        "39": "public final class CellUtil {"
      },
      "id": 94573115,
      "filename": "CellUtil.java"
    },
    {
      "repo": "https://bitbucket.org/ghooning/pentaho-kettle-4.3.0-stable.git",
      "language": "Java",
      "linescount": 936,
      "location": "/src/org/pentaho/di/trans/steps/excelwriter",
      "name": "pentaho-kettle-4.3.0-stable",
      "url": "https://searchcode.com/codesearch/view/42462258/",
      "md5hash": "b84f6536268cba938c4b3d41c46cab83",
      "lines": {
        "473": "\t\t\t\t\t\t\thlink_font.setColor(IndexedColors.BLUE.getIndex());",
        "474": "\t\t\t\t\t\t\tCellUtil.setCellStyleProperty(cell, data.wb, CellUtil.FONT, hlink_font.getIndex());",
        "412": "\t\t\t\t\t\tshort formatIndex = format.getFormat(excelField.getFormat());",
        "413": "\t\t\t\t\t\tCellUtil.setCellStyleProperty(cell, data.wb, CellUtil.DATA_FORMAT, formatIndex);",
        "46": "import org.apache.poi.ss.usermodel.Workbook;",
        "47": "import org.apache.poi.ss.util.CellUtil;"
      },
      "id": 42462258,
      "filename": "ExcelWriterStep.java"
    },
    {
      "repo": "https://bitbucket.org/nuclos/nuclos.git",
      "language": "Java",
      "linescount": 446,
      "location": "/nuclos-client/src/main/java/org/nuclos/client/customcomp/resplan",
      "name": "nuclos",
      "url": "https://searchcode.com/codesearch/view/46079289/",
      "md5hash": "b62de4f188714cc29ba588bc96e45818",
      "lines": {
        "25": "import org.apache.poi.ss.util.CellRangeAddress;",
        "26": "import org.apache.poi.ss.util.CellUtil;",
        "132": "\t\t\tsheet.addMergedRegion(new CellRangeAddress(mergeRange.x.x, mergeRange.y.x, mergeRange.x.y, mergeRange.y.y));",
        "133": "\t\t\tCell cell = CellUtil.createCell(sheet.getRow(mergeRange.x.x), mergeRange.x.y, sheet.getRow(mergeRange.x.x).getCell(mergeRange.x.y).getStringCellValue());"
      },
      "id": 46079289,
      "filename": "ResPlanExporter2.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 6214,
      "location": "/hbase-server/src/test/java/org/apache/hadoop/hbase/client",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94574402/",
      "md5hash": "e8521b2d8088363795363de43b131971",
      "lines": {
        "224": "     assertArrayEquals(T3, CellUtil.cloneValue(kvs[1]));",
        "225": "     assertTrue(CellUtil.isDelete(kvs[2]));",
        "226": "     assertArrayEquals(T2, CellUtil.cloneValue(kvs[3]));",
        "771": "      assertEquals(Bytes.toInt(CellUtil.cloneValue(result.rawCells()[0])), VALUE.length);",
        "2121": "        result.size() == 1);",
        "2122": "    assertTrue(Bytes.equals(CellUtil.cloneRow(result.rawCells()[0]), ROWS[3]));",
        "2123": "    assertTrue(Bytes.equals(CellUtil.cloneValue(result.rawCells()[0]), VALUES[0]));",
        "2124": "    result = scanner.next();",
        "770": "      assertEquals(result.rawCells()[0].getValueLength(), Bytes.SIZEOF_INT);",
        "2126": "        result.size() == 2);",
        "2127": "    assertTrue(Bytes.equals(CellUtil.cloneRow(result.rawCells()[0]), ROWS[4]));",
        "51": "import org.apache.hadoop.hbase.Cell;",
        "52": "import org.apache.hadoop.hbase.CellUtil;",
        "222": "     kvs = scanner.next().rawCells();",
        "223": "     assertTrue(CellUtil.isDeleteFamily(kvs[0]));"
      },
      "id": 94574402,
      "filename": "TestFromClientSide.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 4992,
      "location": "/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94574577/",
      "md5hash": "e65fd7e86d98e986e6dc6020036b8782",
      "lines": {
        "1856": "      assertTrue(CellUtil.matchingRow(results.get(0), rowB));",
        "67": "import org.apache.hadoop.hbase.CellComparator;",
        "68": "import org.apache.hadoop.hbase.CellUtil;",
        "1852": "      assertTrue(CellUtil.matchingRow(results.get(0), rowA));",
        "967": "        break;",
        "968": "      Delete delete = new Delete(CellUtil.cloneRow(results.get(0)));",
        "489": "    Cell keyValue = results.get(0);",
        "490": "    Assert.assertTrue(Bytes.compareTo(CellUtil.cloneRow(keyValue), Bytes.toBytes(\"r2\")) == 0);",
        "589": "          assertEquals(1, kvs.size());",
        "590": "          assertArrayEquals(Bytes.toBytes(i), CellUtil.cloneValue(kvs.get(0)));",
        "1851": "      s.next(results);",
        "535": "        assertEquals(1, kvs.size());",
        "536": "        assertArrayEquals(Bytes.toBytes(i), CellUtil.cloneValue(kvs.get(0)));",
        "987": "      for (Cell kv : results) {",
        "988": "        System.out.println(\"kv=\" + kv.toString() + \", \" + Bytes.toString(CellUtil.cloneValue(kv)));",
        "1855": "      s.next(results);"
      },
      "id": 94574577,
      "filename": "TestHRegion.java"
    },
    {
      "repo": "https://github.com/dongpf/hbase.git",
      "language": "Java",
      "linescount": 5018,
      "location": "/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/96737843/",
      "md5hash": "32edc0e07b9c96e5ceb1ed5b07185b4e",
      "lines": {
        "1856": "      assertTrue(CellUtil.matchingRow(results.get(0), rowB));",
        "67": "import org.apache.hadoop.hbase.CellComparator;",
        "68": "import org.apache.hadoop.hbase.CellUtil;",
        "1852": "      assertTrue(CellUtil.matchingRow(results.get(0), rowA));",
        "967": "        break;",
        "968": "      Delete delete = new Delete(CellUtil.cloneRow(results.get(0)));",
        "489": "    Cell keyValue = results.get(0);",
        "490": "    Assert.assertTrue(Bytes.compareTo(CellUtil.cloneRow(keyValue), Bytes.toBytes(\"r2\")) == 0);",
        "589": "          assertEquals(1, kvs.size());",
        "590": "          assertArrayEquals(Bytes.toBytes(i), CellUtil.cloneValue(kvs.get(0)));",
        "1851": "      s.next(results);",
        "535": "        assertEquals(1, kvs.size());",
        "536": "        assertArrayEquals(Bytes.toBytes(i), CellUtil.cloneValue(kvs.get(0)));",
        "987": "      for (Cell kv : results) {",
        "988": "        System.out.println(\"kv=\" + kv.toString() + \", \" + Bytes.toString(CellUtil.cloneValue(kv)));",
        "1855": "      s.next(results);"
      },
      "id": 96737843,
      "filename": "TestHRegion.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 77,
      "location": "/hbase-common/src/test/java/org/apache/hadoop/hbase",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94572999/",
      "md5hash": "260e5caedfe6468a3507cb7f9fa64ab3",
      "lines": {
        "37": "    // overlaps",
        "38": "    Assert.assertTrue(CellUtil.overlappingKeys(a, b, a, b));",
        "39": "    Assert.assertTrue(CellUtil.overlappingKeys(a, c, a, b));",
        "40": "    Assert.assertTrue(CellUtil.overlappingKeys(a, b, a, c));",
        "41": "    Assert.assertTrue(CellUtil.overlappingKeys(b, c, a, c));",
        "42": "    Assert.assertTrue(CellUtil.overlappingKeys(a, c, b, c));",
        "43": "    Assert.assertTrue(CellUtil.overlappingKeys(a, d, b, c));",
        "44": "    Assert.assertTrue(CellUtil.overlappingKeys(b, c, a, d));",
        "45": "",
        "46": "    Assert.assertTrue(CellUtil.overlappingKeys(empty, b, a, b));",
        "47": "    Assert.assertTrue(CellUtil.overlappingKeys(empty, b, a, c));",
        "48": "",
        "49": "    Assert.assertTrue(CellUtil.overlappingKeys(a, b, empty, b));",
        "50": "    Assert.assertTrue(CellUtil.overlappingKeys(a, b, empty, c));",
        "51": ""
      },
      "id": 94572999,
      "filename": "TestCellUtil.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 613,
      "location": "/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94574591/",
      "md5hash": "7430869e3b631a86837eb25d3b75fc64",
      "lines": {
        "160": "      }",
        "161": "      assertTrue(Bytes.BYTES_COMPARATOR.compare(stoprow, CellUtil.cloneRow(kv)) > 0);",
        "546": "          results.size() == 1);",
        "411": "                HConstants.SERVER_QUALIFIER));",
        "548": "      assertTrue(CellUtil.matchingFamily(results.get(0), fam2));",
        "555": "      assertTrue(CellUtil.matchingRow(results.get(0), secondRowBytes));",
        "156": "          assertTrue(CellUtil.matchingRow(kv,  startrow));",
        "394": "              HConstants.REGIONINFO_QUALIFIER));",
        "395": "          byte [] val = CellUtil.cloneValue(getColumn(results, HConstants.CATALOG_FAMILY,",
        "556": "      assertTrue(CellUtil.matchingFamily(results.get(0), fam1));",
        "432": "    for (Cell kv: kvs) {",
        "433": "      if (CellUtil.matchingFamily(kv, family) && CellUtil.matchingQualifier(kv, qualifier)) {",
        "547": "      assertTrue(CellUtil.matchingRow(results.get(0), firstRowBytes)); ",
        "155": "        if (first) {",
        "412": "            val = CellUtil.cloneValue(getColumn(results, HConstants.CATALOG_FAMILY,",
        "554": "      assertTrue(results.size() == 2);"
      },
      "id": 94574591,
      "filename": "TestScanner.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 845,
      "location": "/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94574738/",
      "md5hash": "c2d12d8e0888f37f5c9d23b48041fef8",
      "lines": {
        "385": "    assertEquals(2, kvs.size());",
        "386": "    assertArrayEquals(CellUtil.cloneValue(kvs.get(0)), T3);",
        "387": "    assertTrue(CellUtil.isDelete(kvs.get(1)));",
        "388": "",
        "340": "    assertEquals(8, kvs.size());",
        "341": "    assertTrue(CellUtil.isDeleteFamily(kvs.get(0)));",
        "342": "    assertArrayEquals(CellUtil.cloneValue(kvs.get(1)), T3);",
        "343": "    assertTrue(CellUtil.isDelete(kvs.get(2)));",
        "344": "    assertTrue(CellUtil.isDelete(kvs.get(3))); // .isDeleteType());",
        "345": "    assertArrayEquals(CellUtil.cloneValue(kvs.get(4)), T2);",
        "346": "    assertArrayEquals(CellUtil.cloneValue(kvs.get(5)), T1);",
        "347": "    // we have 3 CFs, so there are two more delete markers",
        "348": "    assertTrue(CellUtil.isDeleteFamily(kvs.get(6)));",
        "349": "    assertTrue(CellUtil.isDeleteFamily(kvs.get(7)));",
        "30": "import org.apache.hadoop.hbase.Cell;",
        "31": "import org.apache.hadoop.hbase.CellUtil;"
      },
      "id": 94574738,
      "filename": "TestKeepDeletes.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 6195,
      "location": "/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94575999/",
      "md5hash": "cfe0dbee5f70347b9810aff7fefa2d53",
      "lines": {
        "67": "import org.apache.hadoop.hbase.Cell;",
        "68": "import org.apache.hadoop.hbase.CellUtil;",
        "2053": "        if (kv.isLatestTimestamp() && kv.isDeleteType()) {",
        "2054": "          byte[] qual = CellUtil.cloneQualifier(kv);",
        "4017": "                    KeyValueUtil.createFirstOnRow(currentRow, offset, length), true, true)",
        "4013": "            // If joinedHeap is pointing to some other row, try to seek to a correct one.",
        "4014": "            boolean mayHaveData = (nextJoinedKv != null && CellUtil.matchingRow(nextJoinedKv,",
        "2064": "",
        "2065": "          Get get = new Get(CellUtil.cloneRow(kv));",
        "4018": "                    && joinedHeap.peek() != null && CellUtil.matchingRow(joinedHeap.peek(),",
        "4899": "            if (store == null) {",
        "4900": "              checkFamily(CellUtil.cloneFamily(kv));",
        "3258": "            // METACOLUMN info such as HBASE::CACHEFLUSH entries",
        "3259": "            if (CellUtil.matchingFamily(kv, WALEdit.METAFAMILY) ||",
        "5309": "            for (Cell cell: family.getValue()) {",
        "5310": "              get.addColumn(family.getKey(),  CellUtil.cloneQualifier(cell));"
      },
      "id": 94575999,
      "filename": "HRegion.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 420,
      "location": "/hbase-client/src/main/java/org/apache/hadoop/hbase/client",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94576824/",
      "md5hash": "a7e86b39416afb9767712c0499416794",
      "lines": {
        "32": "import org.apache.hadoop.hbase.CellUtil;",
        "385": "      for (Cell cell : list) {",
        "386": "        if (CellUtil.matchingFamily(cell, family) && CellUtil.matchingQualifier(cell, qualifier)",
        "387": "            && CellUtil.matchingValue(cell, value)) {",
        "388": "          return true;",
        "392": "      for (Cell cell : list) {",
        "393": "        if (CellUtil.matchingFamily(cell, family) &&",
        "394": "            CellUtil.matchingQualifier(cell, qualifier)) {",
        "395": "          return true;",
        "268": "  public Put add(Cell kv) throws IOException{",
        "269": "    byte [] family = CellUtil.cloneFamily(kv);",
        "174": "    familyMap.put(CellUtil.cloneFamily(kv), list);",
        "173": "    list.add(kv);",
        "412": "    for (Cell cell: getCellList(family)) {",
        "413": "      if (CellUtil.matchingQualifier(cell, qualifier)) {",
        "31": "import org.apache.hadoop.hbase.Cell;"
      },
      "id": 94576824,
      "filename": "Put.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 827,
      "location": "/hbase-client/src/main/java/org/apache/hadoop/hbase/client",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94576855/",
      "md5hash": "6ed78fd6fb4a91f54634a23c4d394212",
      "lines": {
        "419": "    }",
        "36": "import org.apache.hadoop.hbase.CellScanner;",
        "37": "import org.apache.hadoop.hbase.CellUtil;",
        "263": "    for (int i = pos ; i < kvs.length ; i++ ) {",
        "264": "      if (CellUtil.matchingColumn(kvs[i], family,qualifier)) {",
        "420": "    return CellUtil.cloneValue(kv);",
        "783": "      if (!ourKVs[i].equals(replicatedKVs[i]) ||",
        "784": "          !Bytes.equals(CellUtil.cloneValue(ourKVs[i]), CellUtil.cloneValue(replicatedKVs[i]))) {",
        "402": "    }",
        "403": "    if (CellUtil.matchingColumn(kvs[pos], family, foffset, flength, qualifier, qoffset, qlength)) {",
        "643": "      Long timestamp = kv.getTimestamp();",
        "277": "    Cell searchTerm =",
        "278": "        KeyValueUtil.createFirstOnRow(CellUtil.cloneRow(kvs[0]),",
        "152": "    if (this.row == null) {",
        "153": "      this.row = this.cells == null || this.cells.length == 0? null: CellUtil.cloneRow(this.cells[0]);",
        "644": "      byte [] value = CellUtil.cloneValue(kv);"
      },
      "id": 94576855,
      "filename": "Result.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 654,
      "location": "/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94575083/",
      "md5hash": "7ea7b3d3805c289680d87938993ec7da",
      "lines": {
        "38": "import org.apache.hadoop.hbase.Cell;",
        "423": "        for (Cell kv : kvs) {",
        "424": "          byte[] friends = CellUtil.cloneValue(kv);",
        "39": "import org.apache.hadoop.hbase.CellUtil;",
        "434": "          for (byte b : CellUtil.cloneValue(kv)) {",
        "527": "            KeyValue kvDelete =",
        "528": "                new KeyValue(rows[i], CellUtil.cloneFamily(kv), CellUtil.cloneQualifier(kv), ",
        "337": "        counter = kvs.size() == 0 ? 0 :",
        "338": "          Bytes.toInt(CellUtil.cloneValue(kvs.iterator().next()));",
        "531": "                new KeyValue(rows[1 - i], CellUtil.cloneFamily(kv), CellUtil.cloneQualifier(kv),",
        "532": "                    now, CellUtil.cloneValue(kv));",
        "533": "            mutations.add(kvDelete);",
        "433": "        for (Cell kv : kvs) {",
        "530": "            KeyValue kvAdd =",
        "637": "      for (Cell kv : kvs) {",
        "638": "        byte[] col = CellUtil.cloneQualifier(kv);",
        "639": "        byte[] val = CellUtil.cloneValue(kv);"
      },
      "id": 94575083,
      "filename": "TestRowProcessorEndpoint.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 202,
      "location": "/hbase-server/src/main/java/org/apache/hadoop/hbase/rest",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94575473/",
      "md5hash": "100860922bc2ed588241abb006451e7f",
      "lines": {
        "160": "      }",
        "161": "      ResponseBuilder response = Response.ok(CellUtil.cloneValue(value));",
        "162": "      response.cacheControl(cacheControl);",
        "163": "      response.header(\"X-Row\", Base64.encodeBytes(CellUtil.cloneRow(value)));      ",
        "132": "        model.addRow(rowModel);",
        "133": "        rowKey = CellUtil.cloneRow(value);",
        "38": "import org.apache.hadoop.hbase.Cell;",
        "39": "import org.apache.hadoop.hbase.CellUtil;",
        "136": "      rowModel.addCell(",
        "137": "        new CellModel(CellUtil.cloneFamily(value), CellUtil.cloneQualifier(value), ",
        "138": "          value.getTimestamp(), CellUtil.cloneValue(value)));",
        "139": "    } while (--count > 0);",
        "119": "      if (rowKey == null) {",
        "120": "        rowKey = CellUtil.cloneRow(value);",
        "166": "          KeyValue.makeColumn(CellUtil.cloneFamily(value), CellUtil.cloneQualifier(value))));",
        "165": "        Base64.encodeBytes("
      },
      "id": 94575473,
      "filename": "ScannerInstanceResource.java"
    },
    {
      "repo": "git://github.com/apache/hbase.git",
      "language": "Java",
      "linescount": 663,
      "location": "/hbase-common/src/test/java/org/apache/hadoop/hbase",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/116068931/",
      "md5hash": "14027ebb6efbf1af09d53c36e99569d3",
      "lines": {
        "267": "    // overlaps",
        "42": "@Category({MiscTests.class, SmallTests.class})",
        "43": "public class TestCellUtil {",
        "268": "    Assert.assertTrue(CellUtil.overlappingKeys(a, b, a, b));",
        "269": "    Assert.assertTrue(CellUtil.overlappingKeys(a, c, a, b));",
        "270": "    Assert.assertTrue(CellUtil.overlappingKeys(a, b, a, c));",
        "271": "    Assert.assertTrue(CellUtil.overlappingKeys(b, c, a, c));",
        "272": "    Assert.assertTrue(CellUtil.overlappingKeys(a, c, b, c));",
        "273": "    Assert.assertTrue(CellUtil.overlappingKeys(a, d, b, c));",
        "274": "    Assert.assertTrue(CellUtil.overlappingKeys(b, c, a, d));",
        "275": "",
        "276": "    Assert.assertTrue(CellUtil.overlappingKeys(empty, b, a, b));",
        "277": "    Assert.assertTrue(CellUtil.overlappingKeys(empty, b, a, c));",
        "278": "",
        "279": "    Assert.assertTrue(CellUtil.overlappingKeys(a, b, empty, b));"
      },
      "id": 116068931,
      "filename": "TestCellUtil.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 592,
      "location": "/hbase-common/src/test/java/org/apache/hadoop/hbase",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94573003/",
      "md5hash": "a4437ee3295c7559e06b41de15b7b75a",
      "lines": {
        "577": "",
        "578": "    tagItr = CellUtil.tagsIterator(kv.getTagsArray(), kv.getTagsOffset(), kv.getTagsLength());",
        "70": "    KeyValue aaa = new KeyValue(a, family1, qualifier1, 0L, Type.Put, a);",
        "71": "    assertFalse(CellUtil.matchingColumn(aaa, family2, qualifier2));",
        "563": "    Iterator<Tag> tagItr = CellUtil.tagsIterator(kv.getTagsArray(), kv.getTagsOffset(),",
        "562": "    assertTrue(meta2Ok);",
        "47": "    KeyValue aaa = new KeyValue(a, family1, qualifier1, 0L, Type.Put, a);",
        "48": "    assertFalse(CellUtil.matchingColumn(aaa, family2, qualifier2));",
        "49": "    assertTrue(CellUtil.matchingColumn(aaa, family1, qualifier1));",
        "50": "    aaa = new KeyValue(a, family2, qualifier2, 0L, Type.Put, a);",
        "51": "    assertFalse(CellUtil.matchingColumn(aaa, family1, qualifier1));",
        "52": "    assertTrue(CellUtil.matchingColumn(aaa, family2,qualifier2));",
        "53": "    byte [] nullQualifier = new byte[0];",
        "54": "    aaa = new KeyValue(a, family1, nullQualifier, 0L, Type.Put, a);",
        "55": "    assertTrue(CellUtil.matchingColumn(aaa, family1,null));",
        "56": "    assertFalse(CellUtil.matchingColumn(aaa, family2,qualifier2));"
      },
      "id": 94573003,
      "filename": "TestKeyValue.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 443,
      "location": "/hbase-examples/src/test/java/org/apache/hadoop/hbase/coprocessor/example",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94573575/",
      "md5hash": "c3929b3c7a759ca4e99d9b219ddd54f3",
      "lines": {
        "416": "      assertTrue(CellUtil.matchingValue(column.get(0), \"v4\".getBytes()));",
        "417": "      assertTrue(CellUtil.matchingValue(column.get(1), \"v3\".getBytes()));",
        "418": "      assertEquals(4, res.getColumnCells(FAMILY1, QUALIFIER3).size());",
        "28": "import org.apache.hadoop.hbase.Cell;",
        "331": "      assertEquals(2, column.size());",
        "332": "      assertTrue(CellUtil.matchingValue(column.get(0), \"v3\".getBytes()));",
        "333": "      assertTrue(CellUtil.matchingValue(column.get(1), \"v1\".getBytes()));",
        "334": "      rows++;",
        "285": "      assertEquals(1, column.size());",
        "413": "      assertTrue(CellUtil.matchingValue(column.get(1), \"v3\".getBytes()));",
        "411": "      assertEquals(2, column.size());",
        "412": "      assertTrue(CellUtil.matchingValue(column.get(0), \"v4\".getBytes()));",
        "29": "import org.apache.hadoop.hbase.CellUtil;",
        "286": "      assertTrue(CellUtil.matchingValue(column.get(0), \"v1\".getBytes()));",
        "415": "      assertEquals(2, column.size());"
      },
      "id": 94573575,
      "filename": "TestBulkDeleteProtocol.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 290,
      "location": "/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94573660/",
      "md5hash": "dd570fe4994a5488a108a25f8162f5da",
      "lines": {
        "228": "        for (Cell kv : deleteRow) {",
        "229": "          delete.deleteColumn(CellUtil.cloneFamily(kv), CellUtil.cloneQualifier(kv), kv.getTimestamp());",
        "200": "    // We just need the rowkey. Get it from 1st KV.",
        "201": "    byte[] row = CellUtil.cloneRow(deleteRow.get(0));",
        "234": "        for (Cell kv : deleteRow) {",
        "235": "          Column column = new Column(CellUtil.cloneFamily(kv), CellUtil.cloneQualifier(kv));",
        "205": "      for (Cell kv : deleteRow) {",
        "206": "        if (families.add(CellUtil.cloneFamily(kv))) {",
        "207": "          delete.deleteFamily(CellUtil.cloneFamily(kv), ts);",
        "208": "        }",
        "212": "      for (Cell kv : deleteRow) {",
        "213": "        Column column = new Column(CellUtil.cloneFamily(kv), CellUtil.cloneQualifier(kv));",
        "28": "import org.apache.commons.logging.LogFactory;",
        "29": "import org.apache.hadoop.hbase.CellUtil;"
      },
      "id": 94573660,
      "filename": "BulkDeleteEndpoint.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 1069,
      "location": "/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94575030/",
      "md5hash": "f621ca66cd7d36aa1a215df142678658",
      "lines": {
        "196": "      assertFalse(original.equals(kv));",
        "197": "      assertTrue(Bytes.equals(CellUtil.cloneRow(original), CellUtil.cloneRow(kv)));",
        "198": "      assertTrue(Bytes.equals(CellUtil.cloneFamily(original), CellUtil.cloneFamily(kv)));",
        "199": "      assertTrue(Bytes.equals(CellUtil.cloneQualifier(original), CellUtil.cloneQualifier(kv)));",
        "200": "      assertNotSame(original.getTimestamp(), kv.getTimestamp());",
        "43": "import org.apache.hadoop.hbase.Cell;",
        "44": "import org.apache.hadoop.hbase.CellUtil;",
        "433": "        for (Cell kv : res.rawCells()) {",
        "434": "          assertTrue(CellUtil.matchingRow(first, kv));",
        "435": "          assertTrue(Bytes.equals(CellUtil.cloneValue(first), CellUtil.cloneValue(kv)));",
        "436": "        }"
      },
      "id": 94575030,
      "filename": "TestHFileOutputFormat2.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 329,
      "source": "Github",
      "id": 2
    },
    {
      "count": 2,
      "source": "Bitbucket",
      "id": 3
    }
  ]
}