{
  "matchterm": "StringChunk",
  "previouspage": null,
  "searchterm": "StringChunk",
  "query": "StringChunk",
  "language_filters": [
    {
      "count": 50,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 50,
  "results": [
    {
      "repo": "http://xbird.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 754,
      "location": "/xbird-open/main/src/java/xbird/xquery/misc",
      "name": "xbird",
      "url": "https://searchcode.com/codesearch/view/270332/",
      "md5hash": "96748c8f0ae5b307764f3fc8ce0df87d",
      "lines": {
        "1": "/*",
        "2": " * @(#)$Id:StringChunk.java 2335 2007-07-17 04:14:15Z yui $",
        "131": "        final byte[] b = StringUtils.getBytes(s);",
        "132": "        return storeStringChunk(b);",
        "134": "",
        "135": "    protected final int storeStringChunk(final byte[] s) {",
        "136": "        final byte[] b = compressor.compress(s);",
        "137": "        return allocateStringChunk(b);",
        "139": "",
        "140": "    protected int allocateStringChunk(final byte[] s) {",
        "392": "                PrivilegedAccessor.unsafeSetField(this, PagedStringChunk.class, \"_cache\", null);",
        "391": "                super.close();",
        "694": "        @Override",
        "695": "        protected int allocateStringChunk(final byte[] s) {",
        "60": " */",
        "61": "public class StringChunk implements IStringChunk {",
        "62": "    private static final long serialVersionUID = 5218513633893247581L;"
      },
      "id": 270332,
      "filename": "StringChunk.java"
    },
    {
      "repo": "http://tungsten-replicator.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 156,
      "location": "/replicator/src/java/com/continuent/tungsten/replicator/extractor/parallel",
      "name": "tungsten-replicator",
      "url": "https://searchcode.com/codesearch/view/63799688/",
      "md5hash": "251a2ddfaa1e16e3616930ca086e6252",
      "lines": {
        "58": "    public StringChunk(Table table, String min, String max, long nbBlocks)",
        "51": "     * Creates a new <code>StringChunk</code> object",
        "50": "    /**",
        "35": "public class StringChunk extends AbstractChunk implements Chunk",
        "57": "     */",
        "42": "",
        "43": "    public StringChunk(Table table, String min, String max)",
        "34": " */"
      },
      "id": 63799688,
      "filename": "StringChunk.java"
    },
    {
      "repo": "https://github.com/nsanghavi/testng.git",
      "language": "Java",
      "linescount": 22,
      "location": "/src/main/java/org/testng/mustache",
      "name": "testng",
      "url": "https://searchcode.com/codesearch/view/68414315/",
      "md5hash": "beea363f719ddd03c516cf041b1e3315",
      "lines": {
        "19": "    return \"[StringChunk \" + m_string + \"]\";",
        "2": "",
        "3": "public class StringChunk extends BaseChunk {",
        "6": "",
        "7": "  public StringChunk(Model model, String string) {",
        "18": "  public String toString() {"
      },
      "id": 68414315,
      "filename": "StringChunk.java"
    },
    {
      "repo": "https://bitbucket.org/wrapman/frostwire.desktop.translations.pirate",
      "language": "Java",
      "linescount": 80,
      "location": "/lib/jars-src/daap/de/kapsi/net/daap/chunks",
      "name": "frostwire.desktop.translations.pirate",
      "url": "https://searchcode.com/codesearch/view/125739315/",
      "md5hash": "44fc803c560df06283b10c9f6f1b92c4",
      "lines": {
        "32": "public abstract class StringChunk extends AbstractChunk {",
        "35": "    ",
        "36": "    public StringChunk(int type, String name, String value) {",
        "40": "    ",
        "41": "    public StringChunk(String type, String name, String value) {",
        "31": " */"
      },
      "id": 125739315,
      "filename": "StringChunk.java"
    },
    {
      "repo": "git://github.com/grails/grails-core.git",
      "language": "Java",
      "linescount": 2949,
      "location": "/grails-encoder/src/main/groovy/org/grails/buffer",
      "name": "grails-core",
      "url": "https://searchcode.com/codesearch/view/116000143/",
      "md5hash": "e0789f981fccba6ba1dfda6aab78762b",
      "lines": {
        "704": "        if (stringChunk != null) {",
        "705": "            return stringChunk.str;",
        "262": "    private static final int SUB_BUFFERCHUNK_MIN_SIZE = Integer.getInteger(\"streamcharbuffer.subbufferchunkminsize\", 512);",
        "263": "    private static final int SUB_STRINGCHUNK_MIN_SIZE = Integer.getInteger(\"streamcharbuffer.substringchunkminsize\", 512);",
        "168": " * There can be several different type of chunks: char arrays (",
        "169": " * {@code CharBufferChunk}), String chunks ({@code StringChunk}) and other",
        "269": "    private final int maxChunkSize;",
        "270": "    private int subStringChunkMinSize = SUB_STRINGCHUNK_MIN_SIZE;",
        "178": " * <p>",
        "179": " * A StringChunk is appended to the linked list whenever a java.lang.String of a",
        "180": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "181": " * </p>",
        "91": " * java.lang.String chunks and other StreamCharBuffers as sub chunks. A",
        "92": " * StringChunk is appended to the linked list whenever a java.lang.String of a",
        "93": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "702": "    public String toString() {",
        "703": "        StringChunk stringChunk = readToSingleStringChunk(true);"
      },
      "id": 116000143,
      "filename": "StreamCharBuffer.java"
    },
    {
      "repo": "https://github.com/pa-nico/grails-core.git",
      "language": "Java",
      "linescount": 1763,
      "location": "/src/java/org/codehaus/groovy/grails/web/util",
      "name": "grails-core",
      "url": "https://searchcode.com/codesearch/view/109539448/",
      "md5hash": "931915b277f3bf768f76d0bdd4262e62",
      "lines": {
        "224": "    private static final int SUB_STRINGCHUNK_MIN_SIZE = Integer.getInteger(\"streamcharbuffer.substringchunkminsize\", 512);",
        "132": " * There can be several different type of chunks: char arrays (",
        "133": " * {@link CharBufferChunk}), String chunks ({@link StringChunk}) and other",
        "536": "    public String toString() {",
        "537": "        if (firstChunk == lastChunk && firstChunk instanceof StringChunk && allocBuffer.charsUsed() == 0 &&",
        "142": " * <p>",
        "143": " * A StringChunk is appended to the linked list whenever a java.lang.String of a",
        "144": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "145": " * </p>",
        "196": " * <tr>",
        "55": " * java.lang.String chunks and other StreamCharBuffers as sub chunks. A",
        "56": " * StringChunk is appended to the linked list whenever a java.lang.String of a",
        "57": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "58": " * </p>",
        "223": "    private static final int SUB_BUFFERCHUNK_MIN_SIZE = Integer.getInteger(\"streamcharbuffer.subbufferchunkminsize\", 512);",
        "197": " * <td>streamcharbuffer.substringchunkminsize</td>"
      },
      "id": 109539448,
      "filename": "StreamCharBuffer.java"
    },
    {
      "repo": "https://github.com/kurtharriger/grails-core.git",
      "language": "Java",
      "linescount": 1824,
      "location": "/src/java/org/codehaus/groovy/grails/web/util",
      "name": "grails-core",
      "url": "https://searchcode.com/codesearch/view/112585372/",
      "md5hash": "edf3e57262b555d88c8f0743f62a79b3",
      "lines": {
        "64": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "65": " * </p>",
        "546": "        if (firstChunk == lastChunk && firstChunk instanceof StringChunk && allocBuffer.charsUsed() == 0 &&",
        "203": " * <tr>",
        "545": "    public String toString() {",
        "232": "    private static final int SUB_BUFFERCHUNK_MIN_SIZE = Integer.getInteger(\"streamcharbuffer.subbufferchunkminsize\", 512);",
        "204": " * <td>streamcharbuffer.substringchunkminsize</td>",
        "139": " * There can be several different type of chunks: char arrays (",
        "140": " * {@link CharBufferChunk}), String chunks ({@link StringChunk}) and other",
        "149": " * <p>",
        "150": " * A StringChunk is appended to the linked list whenever a java.lang.String of a",
        "151": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "152": " * </p>",
        "233": "    private static final int SUB_STRINGCHUNK_MIN_SIZE = Integer.getInteger(\"streamcharbuffer.substringchunkminsize\", 512);",
        "62": " * java.lang.String chunks and other StreamCharBuffers as sub chunks. A",
        "63": " * StringChunk is appended to the linked list whenever a java.lang.String of a"
      },
      "id": 112585372,
      "filename": "StreamCharBuffer.java"
    },
    {
      "repo": "https://github.com/gulbrand/grails.git",
      "language": "Java",
      "linescount": 1568,
      "location": "/grails/src/java/org/codehaus/groovy/grails/web/util",
      "name": "grails",
      "url": "https://searchcode.com/codesearch/view/106823499/",
      "md5hash": "7932daa032775d3ba3ef50bb67485426",
      "lines": {
        "129": "\tprivate static final int SUB_BUFFERCHUNK_MIN_SIZE = Integer.getInteger(\"streamcharbuffer.subbufferchunkminsize\", 512);",
        "130": "\tprivate static final int SUB_STRINGCHUNK_MIN_SIZE = Integer.getInteger(\"streamcharbuffer.substringchunkminsize\", 512);",
        "136": "\tprivate final int maxChunkSize;",
        "137": "\tprivate int subStringChunkMinSize = SUB_STRINGCHUNK_MIN_SIZE;",
        "267": "",
        "268": "\tpublic int getSubStringChunkMinSize() {",
        "269": "\t\treturn subStringChunkMinSize;",
        "270": "\t}",
        "272": "\t/**",
        "273": "\t * Minimum size for a String to be added as a StringChunk instead of copying content to the char[] buffer of the current StreamCharBufferChunk",
        "275": "\t *",
        "276": "\t * @param stringChunkMinSize",
        "277": "\t */",
        "278": "\tpublic void setSubStringChunkMinSize(int stringChunkMinSize) {",
        "279": "\t\tthis.subStringChunkMinSize = stringChunkMinSize;"
      },
      "id": 106823499,
      "filename": "StreamCharBuffer.java"
    },
    {
      "repo": "https://github.com/gkamal/scalagwt-gwt.git",
      "language": "Java",
      "linescount": 256,
      "location": "/user/src/com/google/gwt/i18n/rebind",
      "name": "scalagwt-gwt",
      "url": "https://searchcode.com/codesearch/view/109249500/",
      "md5hash": "0d81f717891e5912381c25f57c5e2f7b",
      "lines": {
        "248": "    if (curChunk == null) {",
        "251": "      ((StringChunk) curChunk).append(string);",
        "84": "   */",
        "85": "  public static class StringChunk extends TemplateChunk {",
        "249": "      curChunk = new StringChunk(string);",
        "88": "    ",
        "89": "    public StringChunk() {",
        "250": "    } else {",
        "91": "    ",
        "92": "    public StringChunk(String str) {"
      },
      "id": 109249500,
      "filename": "MessageFormatParser.java"
    },
    {
      "repo": "https://github.com/marcioaug/grails-core.git",
      "language": "Java",
      "linescount": 2652,
      "location": "/grails-encoder/src/main/groovy/org/codehaus/groovy/grails/web/util",
      "name": "grails-core",
      "url": "https://searchcode.com/codesearch/view/94890520/",
      "md5hash": "68ac966a5f5c6f10e7ee7a81cecf2f6c",
      "lines": {
        "160": " * {@code CharBufferChunk}), String chunks ({@code StringChunk}) and other",
        "672": "        if (stringChunk != null) {",
        "260": "    private final int maxChunkSize;",
        "261": "    private int subStringChunkMinSize = SUB_STRINGCHUNK_MIN_SIZE;",
        "673": "            return stringChunk.str;",
        "169": " * <p>",
        "170": " * A StringChunk is appended to the linked list whenever a java.lang.String of a",
        "171": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "172": " * </p>",
        "82": " * java.lang.String chunks and other StreamCharBuffers as sub chunks. A",
        "83": " * StringChunk is appended to the linked list whenever a java.lang.String of a",
        "84": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "671": "        StringChunk stringChunk = readToSingleStringChunk(true);",
        "670": "    public String toString() {",
        "159": " * There can be several different type of chunks: char arrays ("
      },
      "id": 94890520,
      "filename": "StreamCharBuffer.java"
    },
    {
      "repo": "git://github.com/grails/grails-core.git",
      "language": "Java",
      "linescount": 2922,
      "location": "/grails-encoder/src/main/groovy/org/grails/web/util",
      "name": "grails-core",
      "url": "https://searchcode.com/codesearch/view/64328272/",
      "md5hash": "33f84b9ff2741b7ef17518d4d4f9c475",
      "lines": {
        "259": "    private static final int SUB_BUFFERCHUNK_MIN_SIZE = Integer.getInteger(\"streamcharbuffer.subbufferchunkminsize\", 512);",
        "260": "    private static final int SUB_STRINGCHUNK_MIN_SIZE = Integer.getInteger(\"streamcharbuffer.substringchunkminsize\", 512);",
        "165": " * There can be several different type of chunks: char arrays (",
        "166": " * {@code CharBufferChunk}), String chunks ({@code StringChunk}) and other",
        "266": "    private final int maxChunkSize;",
        "267": "    private int subStringChunkMinSize = SUB_STRINGCHUNK_MIN_SIZE;",
        "175": " * <p>",
        "176": " * A StringChunk is appended to the linked list whenever a java.lang.String of a",
        "177": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "178": " * </p>",
        "88": " * java.lang.String chunks and other StreamCharBuffers as sub chunks. A",
        "89": " * StringChunk is appended to the linked list whenever a java.lang.String of a",
        "90": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "699": "    public String toString() {",
        "700": "        StringChunk stringChunk = readToSingleStringChunk(true);",
        "701": "        if (stringChunk != null) {",
        "702": "            return stringChunk.str;"
      },
      "id": 64328272,
      "filename": "StreamCharBuffer.java"
    },
    {
      "repo": "https://github.com/houbie/grails-core.git",
      "language": "Java",
      "linescount": 2650,
      "location": "/grails-web/src/main/groovy/org/codehaus/groovy/grails/web/util",
      "name": "grails-core",
      "url": "https://searchcode.com/codesearch/view/67494214/",
      "md5hash": "3b034c06491f77a050609c5d150c458b",
      "lines": {
        "160": " * {@code CharBufferChunk}), String chunks ({@code StringChunk}) and other",
        "672": "        if (stringChunk != null) {",
        "260": "    private final int maxChunkSize;",
        "261": "    private int subStringChunkMinSize = SUB_STRINGCHUNK_MIN_SIZE;",
        "673": "            return stringChunk.str;",
        "169": " * <p>",
        "170": " * A StringChunk is appended to the linked list whenever a java.lang.String of a",
        "171": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "172": " * </p>",
        "82": " * java.lang.String chunks and other StreamCharBuffers as sub chunks. A",
        "83": " * StringChunk is appended to the linked list whenever a java.lang.String of a",
        "84": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "671": "        StringChunk stringChunk = readToSingleStringChunk(true);",
        "670": "    public String toString() {",
        "159": " * There can be several different type of chunks: char arrays ("
      },
      "id": 67494214,
      "filename": "StreamCharBuffer.java"
    },
    {
      "repo": "git://github.com/grails/grails-core.git",
      "language": "Java",
      "linescount": 1929,
      "location": "/grails-web/src/main/groovy/org/codehaus/groovy/grails/web/util",
      "name": "grails-core",
      "url": "https://searchcode.com/codesearch/view/565623/",
      "md5hash": "6931016bc092d14010514114cf7937b3",
      "lines": {
        "384": "    /**",
        "385": "     * Minimum size for a String to be added as a StringChunk instead of copying content to the char[] buffer of the current StreamCharBufferChunk",
        "555": "                ((StringChunk)firstChunk).isSingleBuffer()) {",
        "388": "     */",
        "389": "    public void setSubStringChunkMinSize(int size) {",
        "390": "        subStringChunkMinSize = size;",
        "391": "    }",
        "553": "    public String toString() {",
        "554": "        if (firstChunk == lastChunk && firstChunk instanceof StringChunk && allocBuffer.charsUsed() == 0 &&",
        "139": " * There can be several different type of chunks: char arrays (",
        "140": " * {@code CharBufferChunk}), String chunks ({@code StringChunk}) and other",
        "149": " * <p>",
        "150": " * A StringChunk is appended to the linked list whenever a java.lang.String of a",
        "151": " * length that exceeds the \"stringChunkMinSize\" value is written to the buffer.",
        "152": " * </p>"
      },
      "id": 565623,
      "filename": "StreamCharBuffer.java"
    },
    {
      "repo": "https://github.com/Juraldinio/druid.git",
      "language": "Java",
      "linescount": 126,
      "location": "/common/src/main/java/io/druid/timeline/partition",
      "name": "druid",
      "url": "https://searchcode.com/codesearch/view/101297843/",
      "md5hash": "9823247e6700dffd43b377909d25eea6",
      "lines": {
        "64": "    if (chunk instanceof StringPartitionChunk) {",
        "65": "      StringPartitionChunk<T> stringChunk = (StringPartitionChunk<T>) chunk;",
        "66": "",
        "67": "      return !stringChunk.isStart() && stringChunk.start.equals(end);",
        "97": "",
        "96": "      StringPartitionChunk<T> stringChunk = (StringPartitionChunk<T>) chunk;",
        "98": "      return comparator.compare(chunkNumber, stringChunk.chunkNumber);",
        "95": "    if (chunk instanceof StringPartitionChunk) {"
      },
      "id": 101297843,
      "filename": "StringPartitionChunk.java"
    },
    {
      "repo": "https://bitbucket.org/javarosa/javarosa-pending",
      "language": "Java",
      "linescount": 102,
      "location": "/core/src/org/javarosa/core/services/locale",
      "name": "javarosa-pending",
      "url": "https://searchcode.com/codesearch/view/54317255/",
      "md5hash": "b4331e01eec02a8fae3d83f8c4efc8e2",
      "lines": {
        "49": "\t\t\t\t\twhile(index != -1) {",
        "50": "\t\t\t\t\t\tint nindex = stringchunk.indexOf('\\n',index);",
        "52": "\t\t\t\t\t\t//didn't find one, we'll try that",
        "53": "\t\t\t\t\t\tif(nindex == -1) { nindex = stringchunk.indexOf('\\r',index); }",
        "54": "\t\t\t\t\t\tif(nindex == -1) {",
        "55": "\t\t\t\t\t\t\tline += stringchunk.substring(index);",
        "58": "\t\t\t\t\t\telse {",
        "59": "\t\t\t\t\t\t\tline += stringchunk.substring(index,nindex);",
        "44": "\t\t\t\t\t}",
        "45": "\t\t\t\t\tString stringchunk = String.valueOf(cbuf,offset,read);"
      },
      "id": 54317255,
      "filename": "LocalizationUtils.java"
    },
    {
      "repo": "https://bitbucket.org/commcare/javarosa",
      "language": "Java",
      "linescount": 101,
      "location": "/core/src/org/javarosa/core/services/locale",
      "name": "javarosa",
      "url": "https://searchcode.com/codesearch/view/54318012/",
      "md5hash": "657a56eba53f3d4867336f1faa9e17e0",
      "lines": {
        "49": "\t\t\t\t\twhile(index != -1) {",
        "50": "\t\t\t\t\t\tint nindex = stringchunk.indexOf('\\n',index);",
        "52": "\t\t\t\t\t\t//didn't find one, we'll try that",
        "53": "\t\t\t\t\t\tif(nindex == -1) { nindex = stringchunk.indexOf('\\r',index); }",
        "54": "\t\t\t\t\t\tif(nindex == -1) {",
        "55": "\t\t\t\t\t\t\tline += stringchunk.substring(index);",
        "58": "\t\t\t\t\t\telse {",
        "59": "\t\t\t\t\t\t\tline += stringchunk.substring(index,nindex);",
        "44": "\t\t\t\t\t}",
        "45": "\t\t\t\t\tString stringchunk = String.valueOf(cbuf,offset,read);"
      },
      "id": 54318012,
      "filename": "LocalizationUtils.java"
    },
    {
      "repo": "http://purcforms.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 99,
      "location": "/OpenRosa/src/org/openrosa/client/jr/core/services/locale",
      "name": "purcforms",
      "url": "https://searchcode.com/codesearch/view/3641772/",
      "md5hash": "9ee5cc2a647af9df79c88997d81c5417",
      "lines": {
        "49": "\t\t\t\t\t\t//didn't find one, we'll try that",
        "50": "\t\t\t\t\t\tif(nindex == -1) { nindex = stringchunk.indexOf('\\r',index); }",
        "51": "\t\t\t\t\t\tif(nindex == -1) {",
        "52": "\t\t\t\t\t\t\tline += stringchunk.substring(index);",
        "55": "\t\t\t\t\t\telse {",
        "56": "\t\t\t\t\t\t\tline += stringchunk.substring(index,nindex);",
        "41": "\t\t\t\t\t}",
        "42": "\t\t\t\t\tString stringchunk = String.valueOf(cbuf,offset,read);",
        "46": "\t\t\t\t\twhile(index != -1) {",
        "47": "\t\t\t\t\t\tint nindex = stringchunk.indexOf('\\n',index);"
      },
      "id": 3641772,
      "filename": "LocalizationUtils.java"
    },
    {
      "repo": "https://bitbucket.org/javarosa/javarosa/",
      "language": "Java",
      "linescount": 101,
      "location": "/core/src/org/javarosa/core/services/locale",
      "name": "javarosa",
      "url": "https://searchcode.com/codesearch/view/8542954/",
      "md5hash": "51c7ab7ac832c81727c09a6b9a77b6c7",
      "lines": {
        "48": "\t\t\t\t\twhile(index != -1) {",
        "49": "\t\t\t\t\t\tint nindex = stringchunk.indexOf('\\n',index);",
        "51": "\t\t\t\t\t\t//didn't find one, we'll try that",
        "52": "\t\t\t\t\t\tif(nindex == -1) { nindex = stringchunk.indexOf('\\r',index); }",
        "53": "\t\t\t\t\t\tif(nindex == -1) {",
        "54": "\t\t\t\t\t\t\tline += stringchunk.substring(index);",
        "57": "\t\t\t\t\t\telse {",
        "58": "\t\t\t\t\t\t\tline += stringchunk.substring(index,nindex);",
        "43": "\t\t\t\t\t}",
        "44": "\t\t\t\t\tString stringchunk = String.valueOf(cbuf,offset,read);"
      },
      "id": 8542954,
      "filename": "LocalizationUtils.java"
    },
    {
      "repo": "https://bitbucket.org/javarosa/javarosa/",
      "language": "Java",
      "linescount": 184,
      "location": "/core/src/org/javarosa/core/services/locale",
      "name": "javarosa",
      "url": "https://searchcode.com/codesearch/view/8542957/",
      "md5hash": "ff914cbbe75082e6f2cecc9552f82ba4",
      "lines": {
        "129": "\t\t\t\t\telse {",
        "130": "\t\t\t\t\t\tline += stringchunk.substring(index,nindex);",
        "115": "\t\t\t\t}",
        "116": "\t\t\t\tString stringchunk = String.valueOf(cbuf,offset,read);",
        "120": "\t\t\t\twhile(index != -1) {",
        "121": "\t\t\t\t\tint nindex = stringchunk.indexOf('\\n',index);",
        "123": "\t\t\t\t\t//didn't find one, we'll try that",
        "124": "\t\t\t\t\tif(nindex == -1) { nindex = stringchunk.indexOf('\\r',index); }",
        "125": "\t\t\t\t\tif(nindex == -1) {",
        "126": "\t\t\t\t\t\tline += stringchunk.substring(index);"
      },
      "id": 8542957,
      "filename": "ResourceFileDataSource.java"
    },
    {
      "repo": "https://github.com/nsanghavi/testng.git",
      "language": "Java",
      "linescount": 113,
      "location": "/src/main/java/org/testng/mustache",
      "name": "testng",
      "url": "https://searchcode.com/codesearch/view/68414296/",
      "md5hash": "6d58d4bd06ea7e40993cbde3bbbdd149",
      "lines": {
        "65": "              model.popSubModel();",
        "66": "              chunks.add(new StringChunk(model, r));",
        "56": "                model.popSubModel();",
        "57": "                chunks.add(new StringChunk(model, r));",
        "77": "      } else {",
        "78": "        chunks.add(new StringChunk(model, \"\" + template.charAt(ti)));"
      },
      "id": 68414296,
      "filename": "Mustache.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 31,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 13,
      "source": "Github",
      "id": 2
    },
    {
      "count": 6,
      "source": "Google Code",
      "id": 1
    }
  ]
}