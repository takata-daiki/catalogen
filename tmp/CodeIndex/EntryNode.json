{
  "matchterm": "EntryNode",
  "previouspage": null,
  "searchterm": "EntryNode",
  "query": "EntryNode",
  "language_filters": [
    {
      "count": 377,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 377,
  "results": [
    {
      "repo": "https://github.com/jdcasey/directory-server.git",
      "language": "Java",
      "linescount": 226,
      "location": "/xdbm-tools/src/main/java/org/apache/directory/server/core/partition/impl/btree/gui",
      "name": "directory-server",
      "url": "https://searchcode.com/codesearch/view/109206028/",
      "md5hash": "357992eb6a3c93c88b4b02c9023fe676",
      "lines": {
        "128": "                    Entry newEntry = db.lookup( ( Long ) rec.getId() );",
        "129": "                    EntryNode child = new EntryNode( ( Long ) rec.getId(), this, db, newEntry, map );",
        "108": "                            Entry newEntry = db.lookup( rec.getId() );",
        "109": "                            EntryNode child = new EntryNode( ( Long ) rec.getId(), this, db, newEntry, map, exprNode,",
        "47": " */",
        "48": "public class EntryNode implements TreeNode",
        "120": "                        Entry newEntry = db.lookup( rec.getId() );",
        "50": "    private final BTreePartition partition;",
        "51": "    private final EntryNode parent;",
        "121": "                        EntryNode child = new EntryNode( ( Long ) rec.getId(), this, db, newEntry, map, exprNode,",
        "56": "",
        "57": "    public EntryNode( Long id, EntryNode parent, BTreePartition partition, Entry entry, Map<Long, EntryNode> map )",
        "62": "",
        "63": "    public EntryNode( Long id, EntryNode parent, BTreePartition db, Entry entry, Map<Long, EntryNode> map,"
      },
      "id": 109206028,
      "filename": "EntryNode.java"
    },
    {
      "repo": "https://android.googlesource.com/platform/tools/motodev",
      "language": "Java",
      "linescount": 547,
      "location": "/src/plugins/certmanager/src/com/motorolamobility/studio/android/certmanager/ui/model",
      "name": "motodev",
      "url": "https://searchcode.com/codesearch/view/68795299/",
      "md5hash": "625560b43a3c7d9ba69239c5c34bb761",
      "lines": {
        "320": "        }",
        "321": "        EntryNode other = (EntryNode) obj;",
        "534": "                    CertificateManagerNLS.EntryNode_ErrorGettingCertificateFromEntry, getAlias()),",
        "73": "",
        "74": "    protected EntryNode()",
        "533": "            StudioLogger.error(EntryNode.class, CertificateManagerNLS.bind(",
        "211": "            StudioLogger.error(CertificateManagerNLS.bind(",
        "212": "                    CertificateManagerNLS.EntryNode_NotFoundOrTypeWrong, alias));",
        "85": "     */",
        "86": "    public EntryNode(ITreeNode keyStoreModel, String alias) throws KeyStoreManagerException",
        "535": "                    e);",
        "316": "        }",
        "317": "        if (!(obj instanceof EntryNode))",
        "126": "                String errorMsg = \"Error getting data from certificate\";",
        "127": "                StudioLogger.error(EntryNode.class, errorMsg, e);"
      },
      "id": 68795299,
      "filename": "EntryNode.java"
    },
    {
      "repo": "https://github.com/identityxx/penrose-studio.git",
      "language": "Java",
      "linescount": 448,
      "location": "/src/java/org/safehaus/penrose/studio/directory/tree",
      "name": "penrose-studio",
      "url": "https://searchcode.com/codesearch/view/138499272/",
      "md5hash": "7b025f4364e013ee88406e870b45509a",
      "lines": {
        "267": "",
        "69": "",
        "70": "    public EntryNode(String name, Image image, DN dn, Node parent) {",
        "76": "            directoryNode = (DirectoryNode)parent;",
        "266": "            if (!(node instanceof EntryNode)) continue;",
        "235": "            EntryNode entryNode = (EntryNode)node;",
        "236": "            String entryName = entryNode.getEntryName();",
        "77": "        } else if (parent instanceof EntryNode) {",
        "78": "            directoryNode = ((EntryNode)parent).getDirectoryNode();",
        "237": "            String parentName = directoryClient.getParentName(entryName);",
        "269": "            String entryName = entryNode.getEntryName();",
        "270": "            String parentName = directoryClient.getParentName(entryName);",
        "268": "            EntryNode entryNode = (EntryNode)node;",
        "265": "        for (Node node : serversView.getSelectedNodes()) {",
        "57": " */",
        "58": "public class EntryNode extends Node {"
      },
      "id": 138499272,
      "filename": "EntryNode.java"
    },
    {
      "repo": "https://github.com/endisd/penrose-studio.git",
      "language": "Java",
      "linescount": 448,
      "location": "/src/java/org/safehaus/penrose/studio/directory/tree",
      "name": "penrose-studio",
      "url": "https://searchcode.com/codesearch/view/138855178/",
      "md5hash": "7b025f4364e013ee88406e870b45509a",
      "lines": {
        "267": "",
        "69": "",
        "70": "    public EntryNode(String name, Image image, DN dn, Node parent) {",
        "76": "            directoryNode = (DirectoryNode)parent;",
        "266": "            if (!(node instanceof EntryNode)) continue;",
        "235": "            EntryNode entryNode = (EntryNode)node;",
        "236": "            String entryName = entryNode.getEntryName();",
        "77": "        } else if (parent instanceof EntryNode) {",
        "78": "            directoryNode = ((EntryNode)parent).getDirectoryNode();",
        "237": "            String parentName = directoryClient.getParentName(entryName);",
        "269": "            String entryName = entryNode.getEntryName();",
        "270": "            String parentName = directoryClient.getParentName(entryName);",
        "268": "            EntryNode entryNode = (EntryNode)node;",
        "265": "        for (Node node : serversView.getSelectedNodes()) {",
        "57": " */",
        "58": "public class EntryNode extends Node {"
      },
      "id": 138855178,
      "filename": "EntryNode.java"
    },
    {
      "repo": "https://bitbucket.org/aicas/rdt",
      "language": "Java",
      "linescount": 57,
      "location": "/translator/src/test/java/bubble/code",
      "name": "rdt",
      "url": "https://searchcode.com/codesearch/view/133405023/",
      "md5hash": "e8151f406c2eab4ec2ab6fb7a591c294",
      "lines": {
        "34": "  public static CONTINUE",
        "35": "  visitEntries(Graph graph, GraphVisitor<EntryNode> visitor)",
        "37": "  {",
        "6": "@Node",
        "7": "public class EntryNode implements NextEdge",
        "9": "  @Override",
        "10": "  public EntryNode getNextEdge()",
        "15": "  @Override",
        "16": "  public void setNextEdge(EntryNode next)",
        "52": "",
        "53": "  private EntryNode next = null;",
        "38": "    EntryNode entry = graph.getRoot();"
      },
      "id": 133405023,
      "filename": "EntryNode.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 214,
      "location": "/components/forks/poi/src/loci/poi/poifs/filesystem",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642274/",
      "md5hash": "d74a9faeb8afbeacf8184ac046144902",
      "lines": {
        "211": "    /* **********  END  implementation of Entry ********** */",
        "212": "}   // end public class EntryNode",
        "56": "",
        "57": "public abstract class EntryNode",
        "74": "",
        "75": "    protected EntryNode(final Property property, final DirectoryNode parent)"
      },
      "id": 15642274,
      "filename": "EntryNode.java"
    },
    {
      "repo": "https://github.com/ISISComputingGroup/cs-studio.git",
      "language": "Java",
      "linescount": 34,
      "location": "/products/DESY/plugins/de.desy.language.snl/src/de/desy/language/snl/parser/nodes",
      "name": "cs-studio",
      "url": "https://searchcode.com/codesearch/view/96892274/",
      "md5hash": "3c2859d23d7b2e590922c90c2c4dc40c",
      "lines": {
        "2": "",
        "3": "public class EntryNode extends AbstractSNLNode {",
        "6": "",
        "7": "\tpublic EntryNode(final String sourceId,"
      },
      "id": 96892274,
      "filename": "EntryNode.java"
    },
    {
      "repo": "https://bitbucket.org/teamninjaneer/terramenta-syndication",
      "language": "Java",
      "linescount": 51,
      "location": "/src/main/java/com/terramenta/syndication/feedreader/nodes",
      "name": "terramenta-syndication",
      "url": "https://searchcode.com/codesearch/view/131394393/",
      "md5hash": "407db1de157a07583b7a31fc842d4c32",
      "lines": {
        "25": "",
        "26": "    public EntryNode(Entry e) throws IntrospectionException {",
        "21": " */",
        "22": "public class EntryNode extends BeanNode {"
      },
      "id": 131394393,
      "filename": "EntryNode.java"
    },
    {
      "repo": "https://github.com/brosander/big-data-plugin.git",
      "language": "Java",
      "linescount": 1516,
      "location": "/src/org/pentaho/di/job/entries/hadooptransjobexecutor",
      "name": "big-data-plugin",
      "url": "https://searchcode.com/codesearch/view/71014511/",
      "md5hash": "0f074f7d440ca4c34e0bd5a5b3b6c8cb",
      "lines": {
        "1152": "    combinerRepositoryDir = XMLHandler.getTagValue(entrynode, \"combiner_trans_repo_dir\"); //$NON-NLS-1$",
        "1153": "    combinerRepositoryFile = XMLHandler.getTagValue(entrynode, \"combiner_trans_repo_file\"); //$NON-NLS-1$",
        "1154": "    String combinerTransId = XMLHandler.getTagValue(entrynode, \"combiner_trans_repo_reference\"); //$NON-NLS-1$",
        "1155": "    combinerRepositoryReference = Const.isEmpty(combinerTransId) ? null : new StringObjectId(combinerTransId);",
        "1156": "    combinerTrans = XMLHandler.getTagValue(entrynode, \"combiner_trans\"); //$NON-NLS-1$",
        "1157": "    final String combinerSingleThreaded = XMLHandler.getTagValue(entrynode, \"combiner_single_threaded\");  //$NON-NLS-1$",
        "1158": "    if (!Const.isEmpty(combinerSingleThreaded)) {",
        "1161": "    ",
        "1162": "    reduceRepositoryDir = XMLHandler.getTagValue(entrynode, \"reduce_trans_repo_dir\"); //$NON-NLS-1$",
        "1163": "    reduceRepositoryFile = XMLHandler.getTagValue(entrynode, \"reduce_trans_repo_file\"); //$NON-NLS-1$",
        "1164": "    String reduceTransId = XMLHandler.getTagValue(entrynode, \"reduce_trans_repo_reference\"); //$NON-NLS-1$",
        "1165": "    reduceRepositoryReference = Const.isEmpty(reduceTransId) ? null : new StringObjectId(reduceTransId);",
        "1141": "",
        "1142": "  public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException {",
        "1143": "    super.loadXML(entrynode, databases, slaveServers);",
        "1151": ""
      },
      "id": 71014511,
      "filename": "JobEntryHadoopTransJobExecutor.java"
    },
    {
      "repo": "https://github.com/brosander/big-data-plugin.git",
      "language": "Java",
      "linescount": 895,
      "location": "/src/org/pentaho/di/job/entries/hadoopjobexecutor",
      "name": "big-data-plugin",
      "url": "https://searchcode.com/codesearch/view/71014655/",
      "md5hash": "c2f77083865dda30a0aac68206415551",
      "lines": {
        "677": "",
        "678": "  public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException {",
        "679": "    super.loadXML(entrynode, databases, slaveServers);",
        "680": "    hadoopJobName = XMLHandler.getTagValue(entrynode, \"hadoop_job_name\");",
        "681": "    ",
        "682": "    isSimple = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"simple\"));",
        "683": "    jarUrl = XMLHandler.getTagValue(entrynode, \"jar_url\");",
        "684": "    cmdLineArgs = XMLHandler.getTagValue(entrynode, \"command_line_args\");",
        "685": "    simpleBlocking = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"simple_blocking\"));",
        "686": "    blocking = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"blocking\"));",
        "687": "    simpleLoggingInterval = XMLHandler.getTagValue(entrynode, \"simple_logging_interval\");",
        "688": "    loggingInterval = XMLHandler.getTagValue(entrynode, \"logging_interval\");",
        "689": "",
        "690": "    mapperClass = XMLHandler.getTagValue(entrynode, \"mapper_class\");",
        "691": "    combinerClass = XMLHandler.getTagValue(entrynode, \"combiner_class\");"
      },
      "id": 71014655,
      "filename": "JobEntryHadoopJobExecutor.java"
    },
    {
      "repo": "https://github.com/brosander/big-data-plugin.git",
      "language": "Java",
      "linescount": 714,
      "location": "/src/org/pentaho/amazon/hive/job",
      "name": "big-data-plugin",
      "url": "https://searchcode.com/codesearch/view/71015561/",
      "md5hash": "37e1148867c9a596febea849da067b20",
      "lines": {
        "527": "   */",
        "528": "  public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException {",
        "529": "    super.loadXML(entrynode, databases, slaveServers);",
        "530": "    hadoopJobName = XMLHandler.getTagValue(entrynode, \"hadoop_job_name\"); //$NON-NLS-1$",
        "531": "    hadoopJobFlowId = XMLHandler.getTagValue(entrynode, \"hadoop_job_flow_id\"); //$NON-NLS-1$",
        "532": "    qUrl = XMLHandler.getTagValue(entrynode, \"q_url\"); //$NON-NLS-1$",
        "533": "    accessKey = Encr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(entrynode, \"access_key\")); //$NON-NLS-1$",
        "534": "    secretKey = Encr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(entrynode, \"secret_key\")); //$NON-NLS-1$",
        "535": "    bootstrapActions = XMLHandler.getTagValue(entrynode, \"bootstrap_actions\"); //$NON-NLS-1$",
        "536": "    stagingDir = XMLHandler.getTagValue(entrynode, \"staging_dir\"); //$NON-NLS-1$",
        "537": "    numInstances = XMLHandler.getTagValue(entrynode, \"num_instances\"); //$NON-NLS-1$",
        "538": "    masterInstanceType = XMLHandler.getTagValue(entrynode, \"master_instance_type\"); //$NON-NLS-1$",
        "539": "    slaveInstanceType = XMLHandler.getTagValue(entrynode, \"slave_instance_type\"); //$NON-NLS-1$",
        "540": "    cmdLineArgs = XMLHandler.getTagValue(entrynode, \"command_line_args\"); //$NON-NLS-1$",
        "541": "    alive = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"alive\")); //$NON-NLS-1$"
      },
      "id": 71015561,
      "filename": "AmazonHiveJobExecutor.java"
    },
    {
      "repo": "https://github.com/brosander/big-data-plugin.git",
      "language": "Java",
      "linescount": 476,
      "location": "/src/org/pentaho/amazon/emr/job",
      "name": "big-data-plugin",
      "url": "https://searchcode.com/codesearch/view/71015635/",
      "md5hash": "e3d3495faf3b766a2f434a5f7caf6835",
      "lines": {
        "360": "",
        "361": "  public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException {",
        "362": "    super.loadXML(entrynode, databases, slaveServers);",
        "363": "    hadoopJobName = XMLHandler.getTagValue(entrynode, \"hadoop_job_name\");",
        "364": "    hadoopJobFlowId = XMLHandler.getTagValue(entrynode, \"hadoop_job_flow_id\");",
        "365": "    jarUrl = XMLHandler.getTagValue(entrynode, \"jar_url\");",
        "366": "    accessKey = Encr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(entrynode, \"access_key\"));",
        "367": "    secretKey = Encr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(entrynode, \"secret_key\"));",
        "368": "    stagingDir = XMLHandler.getTagValue(entrynode, \"staging_dir\");",
        "369": "    // numInstances = Integer.parseInt(XMLHandler.getTagValue(entrynode, \"num_instances\"));",
        "370": "    numInstances = XMLHandler.getTagValue(entrynode, \"num_instances\");",
        "371": "    masterInstanceType = XMLHandler.getTagValue(entrynode, \"master_instance_type\");",
        "372": "    slaveInstanceType = XMLHandler.getTagValue(entrynode, \"slave_instance_type\");",
        "373": "",
        "374": "    cmdLineArgs = XMLHandler.getTagValue(entrynode, \"command_line_args\");",
        "375": "    blocking = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"blocking\"));"
      },
      "id": 71015635,
      "filename": "AmazonElasticMapReduceJobExecutor.java"
    },
    {
      "repo": "https://github.com/rake93/graph-collections.git",
      "language": "Java",
      "linescount": 425,
      "location": "/src/main/java/org/neo4j/collections/treemap",
      "name": "graph-collections",
      "url": "https://searchcode.com/codesearch/view/74596990/",
      "md5hash": "8fe8a30150a84a1a7a8556503cb41048",
      "lines": {
        "261": "\t\t\t\t\t{",
        "262": "\t\t\t\t\t\tNode entryNode = rel.getEndNode();",
        "263": "\t\t\t\t\t\tif ( entryNode.getProperty( MAP_KEY ).equals( key ) )",
        "264": "\t\t\t\t\t\t{",
        "265": "\t\t\t\t\t\t\tObject value = entryNode.getProperty( MAP_VALUE );",
        "266": "\t\t\t\t\t\t\trel.delete();",
        "267": "\t\t\t\t\t\t\tentryNode.delete();",
        "210": "\t\t\t\t\t{",
        "211": "\t\t\t\t\t\tNode entryNode = rel.getEndNode();",
        "212": "\t\t\t\t\t\tif ( entryNode.getProperty( MAP_KEY ).equals( key ) )",
        "312": "\t\t\t\t\t{",
        "313": "\t\t\t\t\t\tNode entryNode = rel.getEndNode();",
        "314": "\t\t\t\t\t\tif ( entryNode.getProperty( MAP_KEY ).equals( key ) )",
        "315": "\t\t\t\t\t\t{",
        "316": "\t\t\t\t\t\t\ttx.success();",
        "317": "\t\t\t\t\t\t\treturn (V) entryNode.getProperty( MAP_VALUE );"
      },
      "id": 74596990,
      "filename": "BTreeMap.java"
    },
    {
      "repo": "https://github.com/brosander/big-data-plugin.git",
      "language": "Java",
      "linescount": 575,
      "location": "/src/org/pentaho/di/job/entries/pig",
      "name": "big-data-plugin",
      "url": "https://searchcode.com/codesearch/view/71014832/",
      "md5hash": "62203d526544739490596a4fc53dcdea",
      "lines": {
        "174": "   */",
        "175": "  public void loadXML(Node entrynode, List<DatabaseMeta> databases,",
        "176": "      List<SlaveServer> slaveServers, Repository repository) throws KettleXMLException {",
        "177": "    super.loadXML(entrynode, databases, slaveServers);",
        "178": "    ",
        "179": "    m_hdfsHostname = XMLHandler.getTagValue(entrynode, \"hdfs_hostname\");",
        "180": "    m_hdfsPort = XMLHandler.getTagValue(entrynode, \"hdfs_port\");",
        "181": "    m_jobTrackerHostname = XMLHandler.getTagValue(entrynode, \"jobtracker_hostname\");",
        "182": "    m_jobTrackerPort = XMLHandler.getTagValue(entrynode, \"jobtracker_port\");",
        "183": "    m_scriptFile = XMLHandler.getTagValue(entrynode, \"script_file\");",
        "184": "    m_enableBlocking = XMLHandler.getTagValue(entrynode, \"enable_blocking\").equalsIgnoreCase(\"Y\");",
        "185": "    m_localExecution = XMLHandler.getTagValue(entrynode, \"local_execution\").equalsIgnoreCase(\"Y\");    ",
        "186": "    ",
        "188": "    m_params = new HashMap<String, String>();",
        "189": "    Node paramList = XMLHandler.getSubNode(entrynode, \"script_parameters\");"
      },
      "id": 71014832,
      "filename": "JobEntryPigScriptExecutor.java"
    },
    {
      "repo": "https://bitbucket.org/seocam/kettle",
      "language": "Java",
      "linescount": 1456,
      "location": "/src/org/pentaho/di/job/entries/ftp",
      "name": "kettle",
      "url": "https://searchcode.com/codesearch/view/118421521/",
      "md5hash": "211a18adaee1c0449884484a28f92dab",
      "lines": {
        "235": "\t",
        "236": "\t  public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException",
        "239": "\t    {",
        "240": "\t      super.loadXML(entrynode, databases, slaveServers);",
        "241": "\t      \tport          = XMLHandler.getTagValue(entrynode, \"port\");",
        "242": "\t\t\tserverName          = XMLHandler.getTagValue(entrynode, \"servername\");",
        "243": "\t\t\tuserName            = XMLHandler.getTagValue(entrynode, \"username\");",
        "244": "\t\t    password = Encr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(entrynode, \"password\")); ",
        "245": "\t\t\tftpDirectory        = XMLHandler.getTagValue(entrynode, \"ftpdirectory\");",
        "246": "\t\t\ttargetDirectory     = XMLHandler.getTagValue(entrynode, \"targetdirectory\");",
        "247": "\t\t\twildcard            = XMLHandler.getTagValue(entrynode, \"wildcard\");",
        "248": "\t\t\tbinaryMode          = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"binary\") );",
        "249": "\t\t\ttimeout             = Const.toInt(XMLHandler.getTagValue(entrynode, \"timeout\"), 10000);",
        "250": "\t\t\tremove              = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"remove\") );",
        "251": "            onlyGettingNewFiles = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"only_new\") );"
      },
      "id": 118421521,
      "filename": "JobEntryFTP.java"
    },
    {
      "repo": "https://bitbucket.org/seocam/kettle",
      "language": "Java",
      "linescount": 858,
      "location": "/src/org/pentaho/di/job/entries/mssqlbulkload",
      "name": "kettle",
      "url": "https://searchcode.com/codesearch/view/118421612/",
      "md5hash": "6b2c302bde7d94c78dee3571f24df5a3",
      "lines": {
        "192": "\t\t\tfiretriggers = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"firetriggers\"));",
        "193": "\t\t\tcheckconstraints = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"checkconstraints\"));",
        "194": "\t\t\tkeepnulls = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"keepnulls\"));",
        "195": "\t\t\tkeepidentity = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"keepidentity\"));",
        "196": "\t\t\t",
        "175": "",
        "176": "\tpublic void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException",
        "179": "\t\t{",
        "180": "\t\t\tsuper.loadXML(entrynode, databases, slaveServers);",
        "181": "\t\t\tschemaname  = XMLHandler.getTagValue(entrynode, \"schemaname\");",
        "182": "\t\t\ttablename   = XMLHandler.getTagValue(entrynode, \"tablename\");",
        "183": "\t\t\tfilename    = XMLHandler.getTagValue(entrynode, \"filename\");",
        "184": "\t\t\tdatafiletype   = XMLHandler.getTagValue(entrynode, \"datafiletype\");",
        "185": "\t\t\tfieldterminator   = XMLHandler.getTagValue(entrynode, \"fieldterminator\");",
        "191": "\t\t\t"
      },
      "id": 118421612,
      "filename": "JobEntryMssqlBulkLoad.java"
    },
    {
      "repo": "https://bitbucket.org/seocam/kettle",
      "language": "Java",
      "linescount": 1219,
      "location": "/src/org/pentaho/di/job/entries/ftpsget",
      "name": "kettle",
      "url": "https://searchcode.com/codesearch/view/118421931/",
      "md5hash": "0487732260d9a5ead661988366066b24",
      "lines": {
        "224": "\t\t\tFTPSDirectory        = XMLHandler.getTagValue(entrynode, \"FTPSdirectory\");",
        "225": "\t\t\ttargetDirectory     = XMLHandler.getTagValue(entrynode, \"targetdirectory\");",
        "226": "\t\t\twildcard            = XMLHandler.getTagValue(entrynode, \"wildcard\");",
        "227": "\t\t\tbinaryMode          = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"binary\") );",
        "228": "\t\t\ttimeout             = Const.toInt(XMLHandler.getTagValue(entrynode, \"timeout\"), 10000);",
        "229": "\t\t\tremove              = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"remove\") );",
        "230": "            onlyGettingNewFiles = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"only_new\") );",
        "231": "            activeConnection    = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"active\") );",
        "232": "           ",
        "233": "            movefiles              = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"movefiles\") );",
        "214": "\t",
        "215": "  public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException",
        "218": "\t{",
        "219": "\t\tsuper.loadXML(entrynode, databases, slaveServers);",
        "220": "\t      \tport          = XMLHandler.getTagValue(entrynode, \"port\");",
        "223": "\t\t\tpassword      = Encr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(entrynode, \"password\"));"
      },
      "id": 118421931,
      "filename": "JobEntryFTPSGet.java"
    },
    {
      "repo": "https://bitbucket.org/seocam/kettle",
      "language": "Java",
      "linescount": 1395,
      "location": "/src/org/pentaho/di/job/entries/trans",
      "name": "kettle",
      "url": "https://searchcode.com/codesearch/view/118421695/",
      "md5hash": "1e277fb103f4a5afa193d411c2544c8d",
      "lines": {
        "301": "\t",
        "302": "  public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException {",
        "303": "    try {",
        "304": "      super.loadXML(entrynode, databases, slaveServers);",
        "305": "",
        "306": "      String method = XMLHandler.getTagValue(entrynode, \"specification_method\");",
        "307": "      specificationMethod = ObjectLocationSpecificationMethod.getSpecificationMethodByCode(method);",
        "308": "      String transId = XMLHandler.getTagValue(entrynode, \"trans_object_id\");",
        "309": "      transObjectId = Const.isEmpty(transId) ? null : new StringObjectId(transId);",
        "310": "      filename = XMLHandler.getTagValue(entrynode, \"filename\");",
        "311": "      transname = XMLHandler.getTagValue(entrynode, \"transname\");",
        "312": "      directory = XMLHandler.getTagValue(entrynode, \"directory\");",
        "313": "",
        "317": "      ",
        "318": "      argFromPrevious = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"arg_from_previous\"));",
        "319": "      paramsFromPrevious = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"params_from_previous\"));"
      },
      "id": 118421695,
      "filename": "JobEntryTrans.java"
    },
    {
      "repo": "https://bitbucket.org/seocam/kettle",
      "language": "Java",
      "linescount": 1285,
      "location": "/src/org/pentaho/di/job/entries/job",
      "name": "kettle",
      "url": "https://searchcode.com/codesearch/view/118421709/",
      "md5hash": "4df4d618c1202643387841a1f66f29c5",
      "lines": {
        "288": "  ",
        "289": "  public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException {",
        "290": "    try {",
        "291": "      super.loadXML(entrynode, databases, slaveServers);",
        "292": "",
        "293": "      String method = XMLHandler.getTagValue(entrynode, \"specification_method\");",
        "294": "      specificationMethod = ObjectLocationSpecificationMethod.getSpecificationMethodByCode(method);",
        "295": "      String jobId = XMLHandler.getTagValue(entrynode, \"job_object_id\");",
        "296": "      jobObjectId = Const.isEmpty(jobId) ? null : new StringObjectId(jobId);",
        "297": "      filename = XMLHandler.getTagValue(entrynode, \"filename\");",
        "298": "      jobname = XMLHandler.getTagValue(entrynode, \"jobname\");",
        "299": "      ",
        "303": "      ",
        "304": "      argFromPrevious = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"arg_from_previous\"));",
        "305": "      paramsFromPrevious = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"params_from_previous\"));"
      },
      "id": 118421709,
      "filename": "JobEntryJob.java"
    },
    {
      "repo": "https://bitbucket.org/seocam/kettle",
      "language": "Java",
      "linescount": 1217,
      "location": "/src/org/pentaho/di/job/entries/ssh2put",
      "name": "kettle",
      "url": "https://searchcode.com/codesearch/view/118421869/",
      "md5hash": "da3aa9e0bcc1bf662f1d081553979dfd",
      "lines": {
        "192": "            httpproxyhost          = XMLHandler.getTagValue(entrynode, \"httpproxyhost\");",
        "193": "            httpproxyport      = XMLHandler.getTagValue(entrynode, \"httpproxyport\");",
        "194": "            httpproxyusername            = XMLHandler.getTagValue(entrynode, \"httpproxyusername\");",
        "195": "            httpProxyPassword            = XMLHandler.getTagValue(entrynode, \"httpproxypassword\");",
        "196": "            ",
        "176": "\t",
        "177": "\tpublic void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException",
        "180": "\t\t{",
        "181": "\t\t\tsuper.loadXML(entrynode, databases, slaveServers);",
        "182": "\t\t\tserverName          = XMLHandler.getTagValue(entrynode, \"servername\");",
        "183": "\t\t\tuserName            = XMLHandler.getTagValue(entrynode, \"username\");",
        "184": "\t\t    password = Encr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(entrynode, \"password\")); ",
        "185": "\t\t\tserverPort      = XMLHandler.getTagValue(entrynode, \"serverport\");",
        "186": "\t\t\tftpDirectory        = XMLHandler.getTagValue(entrynode, \"ftpdirectory\");",
        "191": "            usehttpproxy = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"usehttpproxy\") );"
      },
      "id": 118421869,
      "filename": "JobEntrySSH2PUT.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 208,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 148,
      "source": "Github",
      "id": 2
    },
    {
      "count": 11,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 9,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 1,
      "source": "CodePlex",
      "id": 5
    }
  ]
}