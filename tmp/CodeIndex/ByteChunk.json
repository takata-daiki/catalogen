{
  "matchterm": "ByteChunk",
  "previouspage": null,
  "searchterm": "ByteChunk",
  "query": "ByteChunk",
  "language_filters": [
    {
      "count": 684,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 684,
  "results": [
    {
      "repo": "https://bitbucket.org/travisfw/baseparadigm",
      "language": "Java",
      "linescount": 174,
      "location": "/src/main/java/org/baseparadigm",
      "name": "baseparadigm",
      "url": "https://searchcode.com/codesearch/view/127473753/",
      "md5hash": "9a7fc398786ca4d280683e9dc985a490",
      "lines": {
        "133": "            return false;",
        "134": "        final ByteChunk other = (ByteChunk) obj;",
        "12": " */",
        "13": "public class ByteChunk implements Bytes {",
        "144": "",
        "145": "    public static ByteChunk concat(byte[] first, byte[] second) {",
        "147": "      System.arraycopy(second, 0, result, first.length, second.length);",
        "148": "      return new ByteChunk(result);",
        "151": "    /**",
        "152": "     * copies all your byte arrays into one new big ByteChunk",
        "25": "     * @param bytes",
        "26": "     *            the buffer containing bytes to become this {@code ByteChunk}",
        "155": "    public static ByteChunk concat(byte[]... nChunks) {",
        "154": "     */",
        "153": "     * @return a ByteChunk containing all the bytes given"
      },
      "id": 127473753,
      "filename": "ByteChunk.java"
    },
    {
      "repo": "https://github.com/Karm/mod_cluster-proxy.git",
      "language": "Java",
      "linescount": 946,
      "location": "/src/main/java/org/apache/tomcat/util/buf",
      "name": "mod_cluster-proxy",
      "url": "https://searchcode.com/codesearch/view/73995257/",
      "md5hash": "2337480ab63a66a48c9c0c302963bd8c",
      "lines": {
        "64": " */",
        "65": "public final class ByteChunk implements Cloneable, Serializable {",
        "130": "",
        "131": "\tpublic ByteChunk(int initial) {",
        "135": "\t// --------------------",
        "136": "\tpublic ByteChunk getClone() {",
        "137": "\t\ttry {",
        "128": "\tpublic ByteChunk() {",
        "398": "",
        "399": "\tpublic int substract(ByteChunk src) throws IOException {",
        "592": "\tpublic boolean equals(ByteChunk bb) {",
        "306": "",
        "307": "\tpublic void append(ByteChunk src) throws IOException {",
        "591": "",
        "138": "\t\t\treturn (ByteChunk) this.clone();",
        "127": "\t */"
      },
      "id": 73995257,
      "filename": "ByteChunk.java"
    },
    {
      "repo": "https://bitbucket.org/chittoor/tomcat7.git",
      "language": "Java",
      "linescount": 936,
      "location": "/java/org/apache/tomcat/util/buf",
      "name": "tomcat7",
      "url": "https://searchcode.com/codesearch/view/36485080/",
      "md5hash": "b26cadd2afdf6266cecf3c91cef8578b",
      "lines": {
        "128": "",
        "129": "    public ByteChunk( int initial ) {",
        "66": " */",
        "67": "public final class ByteChunk implements Cloneable, Serializable {",
        "796": "     * Returns the first instance of the given character in this ByteChunk",
        "136": "    @Deprecated",
        "137": "    public ByteChunk getClone() {",
        "138": "        try {",
        "619": "",
        "620": "    public boolean equals( ByteChunk bb ) {",
        "795": "    /**",
        "122": "    /**",
        "123": "     * Creates a new, uninitialized ByteChunk object.",
        "124": "     */",
        "125": "    public ByteChunk() {"
      },
      "id": 36485080,
      "filename": "ByteChunk.java"
    },
    {
      "repo": "git://github.com/jfarcand/Grizzly.git",
      "language": "Java",
      "linescount": 909,
      "location": "/modules/utils/src/main/java/com/sun/grizzly/util/buf",
      "name": "Grizzly",
      "url": "https://searchcode.com/codesearch/view/17452527/",
      "md5hash": "697ecce920469fec97f3268ca644abcf",
      "lines": {
        "160": "    public ByteChunk() {",
        "611": "    public boolean equals( ByteChunk bb ) {",
        "610": "",
        "163": "",
        "164": "    public ByteChunk( int initial ) {",
        "327": "",
        "168": "    //--------------------",
        "169": "    public ByteChunk getClone() {",
        "106": " */",
        "171": "            return (ByteChunk)this.clone();",
        "328": "    public void append( ByteChunk src ) throws IOException {",
        "107": "public final class ByteChunk implements Cloneable, Serializable {",
        "406": "",
        "407": "    public int substract(ByteChunk src)",
        "170": "        try {",
        "159": "     */"
      },
      "id": 17452527,
      "filename": "ByteChunk.java"
    },
    {
      "repo": "https://github.com/apache/tomcat55.git",
      "language": "Java",
      "linescount": 830,
      "location": "/connectors/util/java/org/apache/tomcat/util/buf",
      "name": "tomcat55",
      "url": "https://searchcode.com/codesearch/view/111756305/",
      "md5hash": "4e3b6ddb776a646136e55c1a2582c5ca",
      "lines": {
        "576": "",
        "577": "    public boolean equals( ByteChunk bb ) {",
        "67": " */",
        "132": "    /**",
        "133": "     * Creates a new, uninitialized ByteChunk object.",
        "134": "     */",
        "135": "    public ByteChunk() {",
        "137": "",
        "138": "    public ByteChunk( int initial ) {",
        "395": "",
        "396": "    public int substract(ByteChunk src)",
        "142": "    //--------------------",
        "143": "    public ByteChunk getClone() {",
        "144": "        try {",
        "68": "public final class ByteChunk implements Cloneable, Serializable {"
      },
      "id": 111756305,
      "filename": "ByteChunk.java"
    },
    {
      "repo": "https://github.com/kanishin/tomcat.git",
      "language": "Java",
      "linescount": 792,
      "location": "/java/org/apache/tomcat/util/buf",
      "name": "tomcat",
      "url": "https://searchcode.com/codesearch/view/69804986/",
      "md5hash": "2b07e717fba94e9900260adc7d1f4a53",
      "lines": {
        "688": "     * Returns the first instance of the given character in this ByteChunk",
        "66": " */",
        "67": "public final class ByteChunk implements Cloneable, Serializable {",
        "516": "            return equals((ByteChunk) obj);",
        "517": "        }",
        "130": "",
        "687": "    /**",
        "515": "        if (obj instanceof ByteChunk) {",
        "563": "",
        "514": "    public boolean equals(Object obj) {",
        "131": "    public ByteChunk( int initial ) {",
        "564": "    public boolean equals( ByteChunk bb ) {",
        "126": "     */",
        "124": "    /**",
        "125": "     * Creates a new, uninitialized ByteChunk object.",
        "286": "",
        "287": "    public void append( ByteChunk src )"
      },
      "id": 69804986,
      "filename": "ByteChunk.java"
    },
    {
      "repo": "https://github.com/enson16855/tomcat70.git",
      "language": "Java",
      "linescount": 936,
      "location": "/java/org/apache/tomcat/util/buf",
      "name": "tomcat70",
      "url": "https://searchcode.com/codesearch/view/96664898/",
      "md5hash": "b26cadd2afdf6266cecf3c91cef8578b",
      "lines": {
        "128": "",
        "129": "    public ByteChunk( int initial ) {",
        "66": " */",
        "67": "public final class ByteChunk implements Cloneable, Serializable {",
        "796": "     * Returns the first instance of the given character in this ByteChunk",
        "136": "    @Deprecated",
        "137": "    public ByteChunk getClone() {",
        "138": "        try {",
        "619": "",
        "620": "    public boolean equals( ByteChunk bb ) {",
        "795": "    /**",
        "122": "    /**",
        "123": "     * Creates a new, uninitialized ByteChunk object.",
        "124": "     */",
        "125": "    public ByteChunk() {"
      },
      "id": 96664898,
      "filename": "ByteChunk.java"
    },
    {
      "repo": "https://github.com/enson16855/tomcat.git",
      "language": "Java",
      "linescount": 793,
      "location": "/java/org/apache/tomcat/util/buf",
      "name": "tomcat",
      "url": "https://searchcode.com/codesearch/view/96655365/",
      "md5hash": "984d4f21427315ddbc7993fc2ee3b656",
      "lines": {
        "128": "    public ByteChunk() {",
        "288": "    public void append( ByteChunk src )",
        "67": " */",
        "68": "public final class ByteChunk implements Cloneable, Serializable {",
        "517": "            return equals((ByteChunk) obj);",
        "518": "        }",
        "516": "        if (obj instanceof ByteChunk) {",
        "688": "    /**",
        "689": "     * Returns the first instance of the given character in this ByteChunk",
        "131": "",
        "564": "",
        "565": "    public boolean equals( ByteChunk bb ) {",
        "132": "    public ByteChunk( int initial ) {",
        "127": "     */",
        "287": ""
      },
      "id": 96655365,
      "filename": "ByteChunk.java"
    },
    {
      "repo": "https://github.com/javagems/grizzly-http-webserver.git",
      "language": "Java",
      "linescount": 837,
      "location": "/src/com/sun/grizzly/util/buf",
      "name": "grizzly-http-webserver",
      "url": "https://searchcode.com/codesearch/view/106228122/",
      "md5hash": "4822e285e20bb9ade4d168638f03da68",
      "lines": {
        "386": "",
        "387": "    public int substract(ByteChunk src)",
        "137": "    /**",
        "138": "     * Creates a new, uninitialized ByteChunk object.",
        "139": "     */",
        "140": "    public ByteChunk() {",
        "589": "",
        "142": "",
        "143": "    public ByteChunk( int initial ) {",
        "307": "",
        "308": "    public void append( ByteChunk src ) throws IOException {",
        "149": "        try {",
        "150": "            return (ByteChunk)this.clone();",
        "87": " */",
        "88": "public final class ByteChunk implements Cloneable, Serializable {",
        "590": "    public boolean equals( ByteChunk bb ) {"
      },
      "id": 106228122,
      "filename": "ByteChunk.java"
    },
    {
      "repo": "https://bitbucket.org/wrapman/frostwire.desktop.translations.pirate",
      "language": "Java",
      "linescount": 26,
      "location": "/lib/jars-src/daap/de/kapsi/net/daap/chunks",
      "name": "frostwire.desktop.translations.pirate",
      "url": "https://searchcode.com/codesearch/view/125739329/",
      "md5hash": "93298a148a11d2dc87f41c45833d235d",
      "lines": {
        "21": "",
        "22": "public interface ByteChunk extends Chunk {"
      },
      "id": 125739329,
      "filename": "ByteChunk.java"
    },
    {
      "repo": "https://github.com/Karm/mod_cluster-proxy.git",
      "language": "Java",
      "linescount": 233,
      "location": "/src/main/java/org/jboss/cluster/proxy/http11",
      "name": "mod_cluster-proxy",
      "url": "https://searchcode.com/codesearch/view/73994644/",
      "md5hash": "2caca6d0351b89f0efe20991bd74e7dc",
      "lines": {
        "147": "\tpublic static final String CONNECTION = \"Connection\";",
        "197": "\tpublic static final byte[] HTTP_11_BYTES = ByteChunk.convertToBytes(HTTP_11);",
        "70": "\t */",
        "71": "\tpublic static final byte[] SERVER_BYTES = ByteChunk.convertToBytes(\"Server: Apache-Coyote/1.1\"",
        "144": "\t/* Various constant \"strings\" */",
        "145": "\tpublic static final byte[] CRLF_BYTES = ByteChunk.convertToBytes(CRLF);",
        "146": "\tpublic static final byte[] COLON_BYTES = ByteChunk.convertToBytes(\": \");",
        "19": "",
        "20": "import org.apache.tomcat.util.buf.ByteChunk;",
        "150": "\tpublic static final String KEEPALIVE = \"keep-alive\";",
        "151": "\tpublic static final byte[] KEEPALIVE_BYTES = ByteChunk.convertToBytes(KEEPALIVE);",
        "152": "\tpublic static final String CHUNKED = \"chunked\";",
        "196": "\t */",
        "157": "\tpublic static final byte[] _400_BYTES = ByteChunk.convertToBytes(\"400\");",
        "158": "\tpublic static final byte[] _404_BYTES = ByteChunk.convertToBytes(\"404\");",
        "159": ""
      },
      "id": 73994644,
      "filename": "Constants.java"
    },
    {
      "repo": "https://github.com/Karm/mod_cluster-proxy.git",
      "language": "Java",
      "linescount": 224,
      "location": "/src/main/java/org/apache/coyote/http11",
      "name": "mod_cluster-proxy",
      "url": "https://searchcode.com/codesearch/view/73996516/",
      "md5hash": "d11b01d2623e33e3e94c58adbb20d23c",
      "lines": {
        "133": "\t/* Various constant \"strings\" */",
        "134": "\tpublic static final byte[] CRLF_BYTES = ByteChunk.convertToBytes(CRLF);",
        "135": "\tpublic static final byte[] COLON_BYTES = ByteChunk.convertToBytes(\": \");",
        "136": "\tpublic static final String CONNECTION = \"Connection\";",
        "137": "\tpublic static final String CLOSE = \"close\";",
        "138": "\tpublic static final byte[] CLOSE_BYTES = ByteChunk.convertToBytes(CLOSE);",
        "139": "\tpublic static final String KEEPALIVE = \"keep-alive\";",
        "140": "\tpublic static final byte[] KEEPALIVE_BYTES = ByteChunk",
        "142": "\tpublic static final String CHUNKED = \"chunked\";",
        "143": "\tpublic static final byte[] ACK_BYTES = ByteChunk",
        "145": "\tpublic static final String TRANSFERENCODING = \"Transfer-Encoding\";",
        "146": "\tpublic static final byte[] _200_BYTES = ByteChunk.convertToBytes(\"200\");",
        "147": "\tpublic static final byte[] _400_BYTES = ByteChunk.convertToBytes(\"400\");",
        "148": "\tpublic static final byte[] _404_BYTES = ByteChunk.convertToBytes(\"404\");",
        "149": ""
      },
      "id": 73996516,
      "filename": "Constants.java"
    },
    {
      "repo": "https://github.com/Karm/mod_cluster-proxy.git",
      "language": "Java",
      "linescount": 481,
      "location": "/src/main/java/org/apache/tomcat/util/http",
      "name": "mod_cluster-proxy",
      "url": "https://searchcode.com/codesearch/view/73995448/",
      "md5hash": "f4d9ca8640f36eb2fba793712edf5aad",
      "lines": {
        "384": "            int nameEnd = ByteChunk.indexOf(bytes, nameStart, end, '=');",
        "385": "            // Workaround for a&b&c encoding",
        "386": "            int nameEnd2 = ByteChunk.indexOf(bytes, nameStart, end, '&');",
        "361": "        }",
        "362": "        ByteChunk bc = data.getByteChunk();",
        "429": "",
        "430": "    protected String urlDecode(ByteChunk bc, String enc) throws IOException {",
        "400": "                valStart = (nameEnd < end) ? nameEnd + 1 : end;",
        "401": "                valEnd = ByteChunk.indexOf(bytes, valStart, end, '&');",
        "23": "",
        "24": "import org.apache.tomcat.util.buf.ByteChunk;",
        "345": "    // if needed",
        "346": "    protected ByteChunk tmpName = new ByteChunk();",
        "347": "    protected ByteChunk tmpValue = new ByteChunk();",
        "383": "            int nameStart = pos;"
      },
      "id": 73995448,
      "filename": "Parameters.java"
    },
    {
      "repo": "https://github.com/Karm/mod_cluster-proxy.git",
      "language": "Java",
      "linescount": 776,
      "location": "/src/main/java/org/jboss/cluster/proxy/container",
      "name": "mod_cluster-proxy",
      "url": "https://searchcode.com/codesearch/view/73994739/",
      "md5hash": "00c05986ed06fa432ad36a180546e5aa",
      "lines": {
        "35": "import org.apache.coyote.http11.Constants;",
        "323": "\t\t\t\tres.setContentLength(data.length());",
        "340": "\t\t\t\tres.setContentLength(data.length());",
        "341": "\t\t\t\tByteChunk chunk = new ByteChunk();",
        "359": "\t\t\tres.setContentLength(data.length());",
        "360": "\t\t\tByteChunk chunk = new ByteChunk();",
        "324": "\t\t\t\tByteChunk chunk = new ByteChunk();",
        "404": "\t\tByteChunk chunk = new ByteChunk();",
        "403": "",
        "36": "import org.apache.tomcat.util.buf.ByteChunk;"
      },
      "id": 73994739,
      "filename": "MCMPAdapter.java"
    },
    {
      "repo": "https://github.com/Karm/mod_cluster-proxy.git",
      "language": "Java",
      "linescount": 829,
      "location": "/src/main/java/org/apache/coyote/http11",
      "name": "mod_cluster-proxy",
      "url": "https://searchcode.com/codesearch/view/73996472/",
      "md5hash": "43bb4455dca5a097d80e94a418a65c15",
      "lines": {
        "128": "\tprotected ByteChunk leftover = null;",
        "587": "\t\t\t\twrite(mb.getByteChunk());",
        "35": "import org.apache.coyote.Response;",
        "36": "import org.apache.tomcat.util.buf.ByteChunk;",
        "165": "\t\tthis.finished = false;",
        "518": "\tpublic abstract int doWrite(ByteChunk chunk, Response res) throws IOException;",
        "586": "\t\t\tcase MessageBytes.T_BYTES:",
        "127": "\t */",
        "517": "\t */",
        "783": "\t\t */",
        "784": "\t\tpublic int doWrite(ByteChunk chunk, Response res) throws IOException {",
        "474": "\t */",
        "475": "\tpublic void sendHeader(ByteChunk name, ByteChunk value) {",
        "605": "\t */",
        "606": "\tprotected void write(ByteChunk bc) {",
        "166": "\t\tthis.leftover = new ByteChunk();"
      },
      "id": 73996472,
      "filename": "AbstractInternalOutputBuffer.java"
    },
    {
      "repo": "https://bitbucket.org/chittoor/tomcat7.git",
      "language": "Java",
      "linescount": 304,
      "location": "/test/org/apache/tomcat/util/http/mapper",
      "name": "tomcat7",
      "url": "https://searchcode.com/codesearch/view/130652100/",
      "md5hash": "685145b6bd0562fbd9e9b8a09ffbd883",
      "lines": {
        "59": "",
        "101": "        // We reload the context and verify that the pages are still accessible",
        "102": "        ByteChunk res;",
        "39": "import org.apache.catalina.valves.RemoteAddrValve;",
        "40": "import org.apache.tomcat.util.buf.ByteChunk;",
        "284": "    private void doRedirectTest(String path, int expected) throws IOException {",
        "285": "        ByteChunk bc = new ByteChunk();",
        "217": "        tomcat.start();",
        "186": "        tomcat.start();",
        "187": "        ByteChunk bc = new ByteChunk();",
        "60": "        ByteChunk body = getUrl(\"http://localhost:\" + getPort());",
        "218": "        ByteChunk bc = new ByteChunk();"
      },
      "id": 130652100,
      "filename": "TestMapperWebapps.java"
    },
    {
      "repo": "https://bitbucket.org/chittoor/tomcat7.git",
      "language": "Java",
      "linescount": 153,
      "location": "/test/org/apache/tomcat/util/buf",
      "name": "tomcat7",
      "url": "https://searchcode.com/codesearch/view/36486788/",
      "md5hash": "a671c6479ab8df17eca43c4cd24dd955",
      "lines": {
        "61": "        assertEquals(0, ByteChunk.indexOf(bytes, 0, len, 'H'));",
        "35": "        String string = \"HTTP/1.1 100 Continue\\r\\n\";",
        "36": "        byte[] bytes = ByteChunk.convertToBytes(string);",
        "60": "        assertEquals(0, ByteChunk.findByte(bytes, 0, len, (byte) 'H'));",
        "45": "     * As discussed in the \"Re: r944918\" thread on dev@, {@code",
        "46": "     * ByteChunk.indexOf()} works for 0-127 ASCII chars only, and cannot find",
        "47": "     * any chars outside of the range. {@code ByteChunk.findByte()} works for",
        "48": "     * any ISO-8859-1 chars.",
        "56": "        // indexOf() does not work outside of 0-127",
        "57": "        assertEquals(5, ByteChunk.findByte(bytes, 0, len, (byte) '\\u00a0'));",
        "58": "        assertEquals(-1, ByteChunk.indexOf(bytes, 0, len, '\\u00a0'));",
        "59": "",
        "28": "/**",
        "29": " * Test cases for {@link ByteChunk}.",
        "30": " */",
        "31": "public class TestByteChunk {"
      },
      "id": 36486788,
      "filename": "TestByteChunk.java"
    },
    {
      "repo": "https://bitbucket.org/travisfw/baseparadigm",
      "language": "Java",
      "linescount": 89,
      "location": "/src/main/java/org/baseparadigm",
      "name": "baseparadigm",
      "url": "https://searchcode.com/codesearch/view/127473722/",
      "md5hash": "4009fb1278ef7944bbd7429ddf5b07be",
      "lines": {
        "66": "        backingInteger = new BigInteger(val);",
        "35": "        backingInteger = bi;",
        "36": "        bytes = new ByteChunk(backingInteger.toByteArray());",
        "40": "        backingInteger = BigInteger.valueOf(bi);",
        "41": "        bytes = new ByteChunk(backingInteger.toByteArray());",
        "78": "        backingInteger = new BigInteger(bitLength, certainty, rnd);",
        "73": "        bytes = new ByteChunk(backingInteger.toByteArray());",
        "48": "        backingInteger = new BigInteger(val);",
        "49": "        bytes = new ByteChunk(val);",
        "67": "        bytes = new ByteChunk(backingInteger.toByteArray());",
        "54": "        backingInteger = new BigInteger(signum, magnitude);",
        "55": "        bytes = new ByteChunk(backingInteger.toByteArray());",
        "72": "        backingInteger = new BigInteger(numBits, rnd);",
        "79": "        bytes = new ByteChunk(backingInteger.toByteArray());",
        "60": "        backingInteger = new BigInteger(val, radix);",
        "61": "        bytes = new ByteChunk(backingInteger.toByteArray());"
      },
      "id": 127473722,
      "filename": "CaInteger.java"
    },
    {
      "repo": "https://bitbucket.org/chittoor/tomcat7.git",
      "language": "Java",
      "linescount": 2502,
      "location": "/test/org/apache/catalina/core",
      "name": "tomcat7",
      "url": "https://searchcode.com/codesearch/view/36486909/",
      "md5hash": "33e842fab0ff0c9ceabf4deee0733b6d",
      "lines": {
        "64": "import org.apache.tomcat.util.buf.ByteChunk;",
        "2112": "        ByteChunk response = new ByteChunk();",
        "2242": "        ByteChunk body = getUrl(\"http://localhost:\" + getPort()+ uri);",
        "2241": "",
        "1321": "",
        "1322": "        ByteChunk res = new ByteChunk();",
        "1195": "",
        "1196": "        int rc = getUrl(url.toString(), new ByteChunk(), null);",
        "1742": "",
        "1743": "        ByteChunk body = new ByteChunk();",
        "1425": "",
        "1426": "        ByteChunk body = new ByteChunk();",
        "147": "        // Call the servlet once",
        "148": "        ByteChunk bc = getUrl(\"http://localhost:\" + getPort() + \"/\");",
        "2111": "",
        "63": "import org.apache.catalina.valves.TesterAccessLogValve;"
      },
      "id": 36486909,
      "filename": "TestAsyncContextImpl.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 485,
      "source": "Github",
      "id": 2
    },
    {
      "count": 161,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 36,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 2,
      "source": "Google Code",
      "id": 1
    }
  ]
}