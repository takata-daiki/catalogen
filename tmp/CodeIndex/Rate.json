{
  "matchterm": "Rate",
  "previouspage": null,
  "searchterm": "Rate",
  "query": "Rate",
  "language_filters": [
    {
      "count": 21203,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 21201,
  "results": [
    {
      "repo": "https://github.com/yujunliang/compalgo.git",
      "language": "Java",
      "linescount": 53,
      "location": "/src/test/java/functions/primitives",
      "name": "compalgo",
      "url": "https://searchcode.com/codesearch/view/111746185/",
      "md5hash": "b33668d7fd01abe5b89a8eef8728c1e8",
      "lines": {
        "8": "",
        "9": "public class Rate {",
        "12": "",
        "13": "\tpublic static final Rate ZERO = new Rate(0);",
        "14": "",
        "15": "\tpublic static Rate valueOf(double d) {",
        "16": "\t\treturn new Rate(d);",
        "17": "\t}",
        "18": "",
        "19": "\tprivate BigDecimal rate;",
        "20": "",
        "21": "\tprivate Rate(double d) {",
        "22": "\t\tif (d > 100)",
        "23": "\t\t\tthrow new RuntimeException(\"rate can't be over 100.\");",
        "24": "\t\trate = BigDecimal.valueOf(d).setScale(SCALE_OF_TWO);"
      },
      "id": 111746185,
      "filename": "Rate.java"
    },
    {
      "repo": "https://bitbucket.org/bchogan/aqwop",
      "language": "Java",
      "linescount": 125,
      "location": "/TestProcessing/src/biometric",
      "name": "aqwop",
      "url": "https://searchcode.com/codesearch/view/103184355/",
      "md5hash": "c9cf1f84352ef64893640ad7547724bb",
      "lines": {
        "33": "\t",
        "34": "\tpublic Rate(float initialRate) {",
        "35": "\t\treset(initialRate);",
        "36": "\t\tcountdown.addNotificationListener(listener, null, null);",
        "39": "\t",
        "40": "\tpublic void reset(float initialRate) {",
        "9": "",
        "10": "public abstract class Rate {",
        "43": "\t\trate = initialRate;",
        "15": "\t",
        "16": "\tprivate double rate = 0.0F;",
        "42": "\t\tbeats.clear();",
        "25": "\t\t\t// THERE's only one notification",
        "26": "\t\t\tupdateRate(false);",
        "29": "\t",
        "30": "\tpublic Rate() {"
      },
      "id": 103184355,
      "filename": "Rate.java"
    },
    {
      "repo": "https://github.com/vschlecht/Nightweb.git",
      "language": "Java",
      "linescount": 586,
      "location": "/common/java/core/net/i2p/stat",
      "name": "Nightweb",
      "url": "https://searchcode.com/codesearch/view/70830927/",
      "md5hash": "05fd851b8d31eb37d5a101b55933aa03",
      "lines": {
        "32": "    private RateSummaryListener _summaryListener;",
        "33": "    private RateStat _stat;",
        "34": "",
        "100": "",
        "101": "    /** since rate creation, how much of the time was spent doing the events? */",
        "96": "    /** since rate creation, how many events have occurred? */",
        "8": "/**",
        "9": " * Simple rate calculator for periodically sampled data points - determining an ",
        "95": "",
        "14": " */",
        "15": "public class Rate {",
        "16": "    //private final static Log _log = new Log(Rate.class);",
        "17": "    private double _currentTotalValue;",
        "90": "",
        "91": "    /** since rate creation, what was the total value acrued through all events?  */",
        "31": "    private long _lifetimeTotalEventTime;"
      },
      "id": 70830927,
      "filename": "Rate.java"
    },
    {
      "repo": "https://github.com/tavantzo/DailyXRates.git",
      "language": "Java",
      "linescount": 179,
      "location": "/DailyXRates/src/com/grgtvs/dailyxrates/db",
      "name": "DailyXRates",
      "url": "https://searchcode.com/codesearch/view/74152316/",
      "md5hash": "3666641699cd489159c1aacf7130330d",
      "lines": {
        "1": "package com.grgtvs.dailyxrates.db;",
        "2": "",
        "8": "",
        "9": "public class Rate implements Serializable {",
        "13": "    private static final long serialVersionUID = 5150332942517472898L;",
        "14": "    public static String TABLE = XRatesDataHelper.TABLE_RATE;",
        "16": "    private Currency currency;",
        "17": "    private Double currentRate = 0.00;",
        "18": "    private Double previousRate = 0.00;",
        "19": "    private Double amount = 0.00;",
        "22": "",
        "23": "    public Rate() {",
        "26": "",
        "27": "    public Rate changeBase(Rate rate) {",
        "28": "        Double c = getCurrentRate() / rate.getCurrentRate();"
      },
      "id": 74152316,
      "filename": "Rate.java"
    },
    {
      "repo": "https://github.com/handytec/project.git",
      "language": "Java",
      "linescount": 82,
      "location": "/src/data/model/src/main/java/mobi/handytec/data/model/parameter",
      "name": "project",
      "url": "https://searchcode.com/codesearch/view/83029400/",
      "md5hash": "5932e0e85de01357d76a3cd373238214",
      "lines": {
        "32": "    public Rate() {",
        "3": "import mobi.handytec.core.message.Item;",
        "4": "import mobi.handytec.data.field.parameter.RateField;",
        "7": "/**",
        "8": " * Entity model for the RATE database table.",
        "12": " */",
        "13": "public class Rate extends EntityModel {",
        "14": "",
        "15": "    public static final String ID = \"Rate\";",
        "17": "    /**",
        "18": "     * Rate Id",
        "21": "     */",
        "22": "    private Long pk_rateId;",
        "24": "    /**",
        "25": "     * Name of rate",
        "31": ""
      },
      "id": 83029400,
      "filename": "Rate.java"
    },
    {
      "repo": "https://bitbucket.org/Fantom_JAC/squilla-net",
      "language": "Java",
      "linescount": 112,
      "location": "/src/main/java/org/squilla/net/wlan",
      "name": "squilla-net",
      "url": "https://searchcode.com/codesearch/view/61601826/",
      "md5hash": "0a698859ee4e9d709a003dc75d7093f9",
      "lines": {
        "32": "    public static final int RATE_9M = 18;",
        "33": "    public static final int RATE_11M = 22;",
        "34": "    public static final int RATE_12M = 24;",
        "35": "    public static final int RATE_18M = 36;",
        "36": "    public static final int RATE_22M = 44;",
        "37": "    public static final int RATE_24M = 48;",
        "38": "    public static final int RATE_33M = 66;",
        "39": "    public static final int RATE_36M = 72;",
        "40": "    public static final int RATE_48M = 96;",
        "41": "    public static final int RATE_54M = 108;",
        "21": "/**",
        "22": " * IEEE802.15.4 Transfer Rate",
        "25": " */",
        "26": "public class Rate {",
        "27": "",
        "31": "    public static final int RATE_6M = 12;"
      },
      "id": 61601826,
      "filename": "Rate.java"
    },
    {
      "repo": "https://github.com/paulrajjey/disneydomain.git",
      "language": "Java",
      "linescount": 60,
      "location": "/domain/src/main/java/com/disney/business/domain",
      "name": "disneydomain",
      "url": "https://searchcode.com/codesearch/view/99912289/",
      "md5hash": "70dbc9d42529a998e2d3d3856cc62603",
      "lines": {
        "32": "\t\treturn rate;",
        "33": "\t}",
        "34": "\tpublic void setRate(BigDecimal rate) {",
        "35": "\t\tthis.rate = rate;",
        "36": "\t}",
        "6": "",
        "7": "public class Rate implements Serializable{",
        "15": "\tprivate Date date;",
        "16": "\tprivate BigDecimal rate;",
        "50": "\tpublic String toString() {",
        "51": "\t\treturn \"Rate [Id=\" + Id + \", day=\" + day + \", date=\" + date + \", rate=\"",
        "52": "\t\t\t\t+ rate + \", type=\" + type + \"]\";",
        "53": "\t}",
        "30": "\t}",
        "31": "\tpublic BigDecimal getRate() {"
      },
      "id": 99912289,
      "filename": "Rate.java"
    },
    {
      "repo": "https://github.com/wlan0/kafka.git",
      "language": "Java",
      "linescount": 107,
      "location": "/clients/src/main/java/org/apache/kafka/common/metrics/stats",
      "name": "kafka",
      "url": "https://searchcode.com/codesearch/view/95186953/",
      "md5hash": "6738b9557525fcd67d3bd288155f231b",
      "lines": {
        "32": "public class Rate implements MeasurableStat {",
        "36": "",
        "37": "    public Rate() {",
        "40": "",
        "41": "    public Rate(TimeUnit unit) {",
        "44": "",
        "45": "    public Rate(TimeUnit unit, SampledStat stat) {",
        "26": "/**",
        "27": " * The rate of the given quanitity. By default this is the total observed over a set of samples from a sampled statistic",
        "28": " * divided by the ellapsed time over the sample windows. Alternative {@link SampledStat} implementations can be",
        "29": " * provided, however, to record the rate of occurences (e.g. the count of values measured over the time interval) or",
        "31": " */"
      },
      "id": 95186953,
      "filename": "Rate.java"
    },
    {
      "repo": "git://github.com/twitter/commons.git",
      "language": "Java",
      "linescount": 103,
      "location": "/src/java/com/twitter/common/metrics",
      "name": "commons",
      "url": "https://searchcode.com/codesearch/view/10517347/",
      "md5hash": "c6c48fa707ca323cf536e4e464183526",
      "lines": {
        "51": "  /**",
        "38": "  /**",
        "39": "   * Creates a rate using a supplier to access values.",
        "40": "   *",
        "41": "   * @param name Name of the rate.",
        "42": "   * @param valueAccessor Supplier to access values.",
        "43": "   * @param windowLength Sliding window duration for computing rate.",
        "45": "   */",
        "46": "  public <T extends Number> Rate(String name, Supplier<T> valueAccessor,",
        "16": "/**",
        "17": " * Gauge that computes a windowed rate.",
        "18": " */",
        "19": "public class Rate extends AbstractGauge<Double> {",
        "52": "   * Creates a rate of a number.",
        "53": "   *",
        "29": "  @VisibleForTesting",
        "30": "  <T extends Number> Rate(String name, Supplier<T> valueAccessor,"
      },
      "id": 10517347,
      "filename": "Rate.java"
    },
    {
      "repo": "git://github.com/yujunliang/compalgo.git",
      "language": "Java",
      "linescount": 53,
      "location": "/src/test/java/functions/primitives",
      "name": "compalgo",
      "url": "https://searchcode.com/codesearch/view/14703147/",
      "md5hash": "33ee9cf667ef33ce503c69d86be64b0a",
      "lines": {
        "8": "",
        "9": "public class Rate {",
        "12": "",
        "13": "\tpublic static final Rate ZERO = new Rate(0);",
        "14": "",
        "15": "\tpublic static Rate valueOf(double d) {",
        "16": "\t\treturn new Rate(d);",
        "17": "\t}",
        "18": "",
        "19": "\tprivate BigDecimal rate;",
        "20": "",
        "21": "\tprivate Rate(double d) {",
        "22": "\t\tif (d > 100)",
        "23": "\t\t\tthrow new RuntimeException(\"rate can't be over 100.\");",
        "24": "\t\trate = BigDecimal.valueOf(d).setScale(SCALE_OF_TWO);"
      },
      "id": 14703147,
      "filename": "Rate.java"
    },
    {
      "repo": "https://github.com/postmaster/postmaster-java.git",
      "language": "Java",
      "linescount": 46,
      "location": "/src/main/java/io/postmaster/entity",
      "name": "postmaster-java",
      "url": "https://searchcode.com/codesearch/view/73305060/",
      "md5hash": "958a325d986f792afbb86efba31c6925",
      "lines": {
        "35": "",
        "4": "",
        "5": "public class Rate {",
        "40": "",
        "41": "\tpublic static Rate create() {",
        "42": "\t\treturn new Rate();",
        "43": "\t}",
        "17": "",
        "18": "\tpublic Rate setCharge(String charge) {",
        "36": "\tpublic Rate setService(String service) {",
        "26": "",
        "27": "\tpublic Rate setCurrency(String currency) {"
      },
      "id": 73305060,
      "filename": "Rate.java"
    },
    {
      "repo": "https://github.com/GayanM/carbon-registry.git",
      "language": "Java",
      "linescount": 72,
      "location": "/components/registry/org.wso2.carbon.registry.rest.api/src/main/java/org/wso2/carbon/registry/rest/api",
      "name": "carbon-registry",
      "url": "https://searchcode.com/codesearch/view/95547149/",
      "md5hash": "9fabb205ccc15b908997c65f250debfc",
      "lines": {
        "32": " */",
        "33": "@Path(\"/rate\")",
        "34": "public class Rate extends RegistryRestSuper {",
        "35": "",
        "36": "    private Log log = LogFactory.getLog(Rate.class);",
        "65": "        } catch (RegistryException e) {",
        "66": "            log.error(\"user doesn't have permission to rate a resource\", e);",
        "46": "    @Produces(\"application/json\")",
        "47": "    public Response rateResource(@QueryParam(\"path\") String resourcePath,",
        "60": "            }",
        "61": "            registry.rateResource(resourcePath, value);",
        "30": "/**",
        "31": " * This class to handle the rate relate REST verbs POST"
      },
      "id": 95547149,
      "filename": "Rate.java"
    },
    {
      "repo": "git://github.com/turn/ttorrent.git",
      "language": "Java",
      "linescount": 129,
      "location": "/src/main/java/com/turn/ttorrent/client/peer",
      "name": "ttorrent",
      "url": "https://searchcode.com/codesearch/view/14701354/",
      "md5hash": "34d8654f8e62fec4b71c92a94ab4d8ba",
      "lines": {
        "32": " */",
        "33": "public class Rate implements Comparable<Rate> {",
        "34": "",
        "35": "\tpublic static final Comparator<Rate> RATE_COMPARATOR =",
        "36": "\t\tnew RateComparator();",
        "37": "",
        "81": "\tpublic int compareTo(Rate other) {",
        "55": "\t/**",
        "80": "\t@Override",
        "56": "\t * Get the current rate.",
        "82": "\t\treturn RATE_COMPARATOR.compare(this, other);",
        "59": "\t * The exchange rate is the number of bytes exchanged since the last",
        "23": "/**",
        "24": " * A data exchange rate representation.",
        "58": "\t * <p>",
        "27": " * This is a utility class to keep track, and compare, of the data exchange",
        "28": " * rate (either download or upload) with a peer."
      },
      "id": 14701354,
      "filename": "Rate.java"
    },
    {
      "repo": "https://github.com/nereuschen/commons.git",
      "language": "Java",
      "linescount": 141,
      "location": "/src/java/com/twitter/common/stats",
      "name": "commons",
      "url": "https://searchcode.com/codesearch/view/65993440/",
      "md5hash": "94286bb78ad2e73d226984b7a8fd5c92",
      "lines": {
        "32": " * Function to compute a windowed per-second rate of a value.",
        "35": " */",
        "36": "public class Rate<T extends Number> extends SampledStat<Double> {",
        "135": "",
        "136": "    public Rate<T> build() {",
        "137": "      return new Rate<T>(name, inputAccessor, windowSize, scaleFactor, clock);",
        "138": "    }",
        "75": "",
        "76": "    double rate = 0;",
        "47": "",
        "48": "  private Rate(String name, Supplier<T> inputAccessor, int windowSize, double scaleFactor,",
        "81": "      double dt = newTimestamp - oldestSample.getFirst();",
        "82": "      rate = dt == 0 ? 0 : (NANOS_PER_SEC * scaleFactor * dy) / dt;",
        "87": "",
        "88": "    return rate;",
        "31": "/**"
      },
      "id": 65993440,
      "filename": "Rate.java"
    },
    {
      "repo": "https://bitbucket.org/smscoin/android_plugin",
      "language": "Java",
      "linescount": 54,
      "location": "/smscoin-android-plugin/src/com/smscoin/android/payment",
      "name": "android_plugin",
      "url": "https://searchcode.com/codesearch/view/102355896/",
      "md5hash": "ce047ce80a51c82fdccfa37ee77587f4",
      "lines": {
        "32": "     * @param rate_json",
        "34": "     */",
        "35": "    public Rate(JSONObject rate_json) {",
        "36": "        try {",
        "37": "            number = rate_json.getString(\"number\");",
        "6": "/**",
        "7": " * A class encapsulating data about the rate.",
        "40": "            special = rate_json.getString(\"special\");",
        "9": " */",
        "10": "public class Rate {",
        "39": "            currency = rate_json.getString(\"currency\");",
        "44": "            profit = rate_json.getDouble(\"profit\");",
        "43": "            usd = rate_json.getDouble(\"usd\");",
        "41": "",
        "38": "            prefix = rate_json.getString(\"prefix\");",
        "42": "            price = rate_json.getDouble(\"price\");",
        "31": "     * "
      },
      "id": 102355896,
      "filename": "Rate.java"
    },
    {
      "repo": "http://sq1-struts2.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 40,
      "location": "/labs/acme/src/autoflow",
      "name": "sq1-struts2",
      "url": "https://searchcode.com/codesearch/view/5436906/",
      "md5hash": "6a126892131c42fe0a3ef6d16babd369",
      "lines": {
        "6": "/**",
        "7": " * This action retrieves the rate from the session and",
        "8": " * calculates a insurance rate for the user.",
        "9": " */",
        "10": "public class Rate extends ActionSupport {",
        "14": "    /**",
        "15": "     * The calculated insurance rate.",
        "16": "     */",
        "17": "    private int rate;",
        "19": "    public String execute() throws Exception {",
        "20": "        rate = age.intValue() * 2;",
        "23": "",
        "24": "    public int getRate() {",
        "25": "        return rate;",
        "26": "    }"
      },
      "id": 5436906,
      "filename": "Rate.java"
    },
    {
      "repo": "git://github.com/encuestame/encuestame.git",
      "language": "Java",
      "linescount": 66,
      "location": "/encuestame-persistence/src/main/java/org/encuestame/persistence/domain",
      "name": "encuestame",
      "url": "https://searchcode.com/codesearch/view/16002274/",
      "md5hash": "a51680e0a11a068c87684e74565d11cb",
      "lines": {
        "36": "    /**",
        "37": "     * @return the rate",
        "39": "    @Column(name = \"status\" )",
        "40": "    public Boolean getRate() {",
        "41": "        return rate;",
        "42": "    }",
        "44": "    /**",
        "45": "     * @param rate the rate to set",
        "46": "     */",
        "47": "    public void setRate(Boolean rate) {",
        "48": "        this.rate = rate;",
        "49": "    }",
        "22": "/**",
        "23": " * Rate items.",
        "27": "@MappedSuperclass",
        "28": "public abstract class Rate {"
      },
      "id": 16002274,
      "filename": "Rate.java"
    },
    {
      "repo": "git://github.com/twitter/commons.git",
      "language": "Java",
      "linescount": 150,
      "location": "/src/java/com/twitter/common/stats",
      "name": "commons",
      "url": "https://searchcode.com/codesearch/view/1684035/",
      "md5hash": "276569648d0d4e91adc68b889e7d6b0a",
      "lines": {
        "34": "/**",
        "35": " * Function to compute a windowed per-second rate of a value.",
        "147": "    }",
        "38": " */",
        "39": "public class Rate<T extends Number> extends SampledStat<Double> {",
        "83": "    double rate = 0;",
        "50": "",
        "144": "",
        "145": "    public Rate<T> build() {",
        "82": "",
        "51": "  private Rate(String name, Supplier<T> inputAccessor, int windowSize, double scaleFactor,",
        "88": "      double dt = newTimestamp - oldestSample.getFirst();",
        "89": "      rate = dt == 0 ? 0 : (NANOS_PER_SEC * scaleFactor * dy) / dt;",
        "146": "      return new Rate<T>(name, inputAccessor, windowSize, scaleFactor, ticker);",
        "94": "",
        "95": "    return rate;"
      },
      "id": 1684035,
      "filename": "Rate.java"
    },
    {
      "repo": "https://bitbucket.org/theghost777/android_paymenttest",
      "language": "Java",
      "linescount": 54,
      "location": "/smscoin-android-plugin/src/com/smscoin/android/payment",
      "name": "android_paymenttest",
      "url": "https://searchcode.com/codesearch/view/59791286/",
      "md5hash": "ce047ce80a51c82fdccfa37ee77587f4",
      "lines": {
        "32": "     * @param rate_json",
        "34": "     */",
        "35": "    public Rate(JSONObject rate_json) {",
        "36": "        try {",
        "37": "            number = rate_json.getString(\"number\");",
        "6": "/**",
        "7": " * A class encapsulating data about the rate.",
        "40": "            special = rate_json.getString(\"special\");",
        "9": " */",
        "10": "public class Rate {",
        "39": "            currency = rate_json.getString(\"currency\");",
        "44": "            profit = rate_json.getDouble(\"profit\");",
        "43": "            usd = rate_json.getDouble(\"usd\");",
        "41": "",
        "38": "            prefix = rate_json.getString(\"prefix\");",
        "42": "            price = rate_json.getDouble(\"price\");",
        "31": "     * "
      },
      "id": 59791286,
      "filename": "Rate.java"
    },
    {
      "repo": "https://bitbucket.org/encuestame/encuestame.git",
      "language": "Java",
      "linescount": 66,
      "location": "/enme-persistence/enme-model/src/main/java/org/encuestame/persistence/domain",
      "name": "encuestame",
      "url": "https://searchcode.com/codesearch/view/135206714/",
      "md5hash": "a51680e0a11a068c87684e74565d11cb",
      "lines": {
        "36": "    /**",
        "37": "     * @return the rate",
        "39": "    @Column(name = \"status\" )",
        "40": "    public Boolean getRate() {",
        "41": "        return rate;",
        "42": "    }",
        "44": "    /**",
        "45": "     * @param rate the rate to set",
        "46": "     */",
        "47": "    public void setRate(Boolean rate) {",
        "48": "        this.rate = rate;",
        "49": "    }",
        "22": "/**",
        "23": " * Rate items.",
        "27": "@MappedSuperclass",
        "28": "public abstract class Rate {"
      },
      "id": 135206714,
      "filename": "Rate.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 11880,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 6725,
      "source": "Github",
      "id": 2
    },
    {
      "count": 2134,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 184,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 152,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 89,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 27,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 12,
      "source": "Google Android",
      "id": 12
    }
  ]
}