{
  "matchterm": "Module.ModuleType",
  "previouspage": null,
  "searchterm": "Module.ModuleType",
  "query": "Module.ModuleType",
  "language_filters": [
    {
      "count": 784,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 784,
  "results": [
    {
      "repo": "https://github.com/cppwfs/spring-xd.git",
      "language": "Java",
      "linescount": 69,
      "location": "/spring-xd-module/src/main/java/org/springframework/xd/module/core",
      "name": "spring-xd",
      "url": "https://searchcode.com/codesearch/view/69980257/",
      "md5hash": "654c880f7a60cc7b90f513a5604d9698",
      "lines": {
        "64": "\t * Destroy this module's application context.",
        "33": " */",
        "34": "public interface Module extends Lifecycle {",
        "38": "\t/**",
        "39": "\t * @return the generic module name or template name",
        "42": "",
        "43": "\tModuleType getType();",
        "44": "",
        "45": "\tModuleDescriptor getDescriptor();",
        "46": "",
        "47": "\tModuleDeploymentProperties getDeploymentProperties();",
        "26": "import org.springframework.xd.module.ModuleDescriptor;",
        "27": "import org.springframework.xd.module.ModuleType;",
        "28": "",
        "63": "\t/**"
      },
      "id": 69980257,
      "filename": "Module.java"
    },
    {
      "repo": "https://github.com/palvarez89/Webapp-NodeJS.git",
      "language": "Java",
      "linescount": 225,
      "location": "/WebappNode/src/org/meshpoint/anode/util",
      "name": "Webapp-NodeJS",
      "url": "https://searchcode.com/codesearch/view/74840085/",
      "md5hash": "03763296e82d0fde19322df78af6a91b",
      "lines": {
        "38": "\t/* module types */",
        "39": "\tpublic static class ModuleType {",
        "40": "\t\tpublic int type;",
        "42": "\t\tpublic Unpacker unpacker;",
        "43": "\t\tpublic ModuleType(int type, String extension, Unpacker unpacker) {",
        "76": "\t",
        "77": "\tpublic static ModuleType guessModuleType(String filename) {",
        "78": "\t\t/* guess by extension first */",
        "55": "\t",
        "56": "\tprivate static final ModuleType[] modTypes = new ModuleType[] {",
        "57": "\t\tnew ModuleType(TYPE_JS,   \".js\",     null),",
        "58": "\t\tnew ModuleType(TYPE_NODE, \".node\",   null),",
        "59": "\t\tnew ModuleType(TYPE_DIR,  \"\",        null),",
        "60": "\t\tnew ModuleType(TYPE_ZIP,  \".zip\",    new ZipExtractor()),",
        "61": "\t\tnew ModuleType(TYPE_TAR,  \".tar.gz\", new TarExtractor()),",
        "62": "\t\tnew ModuleType(TYPE_TAR,  \".tgz\",    new TarExtractor())",
        "63": "\t};"
      },
      "id": 74840085,
      "filename": "ModuleUtils.java"
    },
    {
      "repo": "https://github.com/inamori/google-go-lang-idea-plugin.git",
      "language": "Java",
      "linescount": 41,
      "location": "/src/ro/redeul/google/go/ide",
      "name": "google-go-lang-idea-plugin",
      "url": "https://searchcode.com/codesearch/view/71941624/",
      "md5hash": "ac14cd95d2bd92a4b58f01aec0af4087",
      "lines": {
        "2": "",
        "3": "import com.intellij.openapi.module.Module;",
        "4": "import com.intellij.openapi.module.ModuleConfigurationEditor;",
        "5": "import com.intellij.openapi.module.ModuleType;",
        "6": "import com.intellij.openapi.roots.ui.configuration.DefaultModuleConfigurationEditorFactory;",
        "7": "import com.intellij.openapi.roots.ui.configuration.ModuleConfigurationEditorProvider;",
        "8": "import com.intellij.openapi.roots.ui.configuration.ModuleConfigurationState;",
        "9": "",
        "18": " */",
        "19": "public class GoModuleEditorsProvider implements ModuleConfigurationEditorProvider {",
        "20": "",
        "23": "",
        "24": "        final ModuleType moduleType = ModuleType.get(module);",
        "25": "",
        "26": "        if (!(moduleType instanceof GoModuleType) &&",
        "27": "                !(moduleType instanceof GoAppEngineModuleType)) {",
        "28": "              return ModuleConfigurationEditor.EMPTY;"
      },
      "id": 71941624,
      "filename": "GoModuleEditorsProvider.java"
    },
    {
      "repo": "https://github.com/geipette/la-clojure.git",
      "language": "Java",
      "linescount": 107,
      "location": "/src/org/jetbrains/plugins/clojure/config",
      "name": "la-clojure",
      "url": "https://searchcode.com/codesearch/view/74084343/",
      "md5hash": "0a51a02291dabb5aecb19ad22afd31cb",
      "lines": {
        "100": "    @Override",
        "101": "    public String getAutodetectionPopupText(@NotNull Module module, @NotNull FacetType facetType, @NotNull String facetName, @NotNull VirtualFile[] files) {",
        "40": "",
        "41": "  public ClojureFacet createFacet(@NotNull Module module,",
        "10": "import com.intellij.openapi.module.JavaModuleType;",
        "11": "import com.intellij.openapi.module.Module;",
        "12": "import com.intellij.openapi.module.ModuleType;",
        "45": "    return new ClojureFacet(this, module, name, configuration, underlyingFacet);",
        "13": "import com.intellij.openapi.roots.ModifiableRootModel;",
        "51": "",
        "52": "  public boolean isSuitableModuleType(ModuleType moduleType) {",
        "53": "    return (moduleType instanceof JavaModuleType || \"PLUGIN_MODULE\".equals(moduleType.getId()));",
        "54": "  }",
        "9": "import com.intellij.facet.autodetecting.FacetDetectorRegistry;",
        "44": "                                 @Nullable Facet underlyingFacet) {"
      },
      "id": 74084343,
      "filename": "ClojureFacetType.java"
    },
    {
      "repo": "https://github.com/esnme/intellij-plugins.git",
      "language": "Java",
      "linescount": 117,
      "location": "/osmorc/src/org/osmorc/facet",
      "name": "intellij-plugins",
      "url": "https://searchcode.com/codesearch/view/75080548/",
      "md5hash": "0ad8ce407543197f6264fde3ba160163",
      "lines": {
        "32": "import com.intellij.openapi.module.ModuleServiceManager;",
        "33": "import com.intellij.openapi.module.ModuleType;",
        "34": "import com.intellij.openapi.roots.CompilerModuleExtension;",
        "35": "import com.intellij.openapi.startup.StartupManager;",
        "68": "    @NotNull Module module, String name,",
        "69": "    @NotNull OsmorcFacetConfiguration configuration, @Nullable Facet underlyingFacet) {",
        "70": "    completeDefaultConfiguration(configuration, module);",
        "71": "    return new OsmorcFacet(this, module, configuration, underlyingFacet, name);",
        "73": "",
        "74": "  public boolean isSuitableModuleType(ModuleType moduleType) {",
        "75": "    return moduleType instanceof JavaModuleType;",
        "76": "  }",
        "67": "  public OsmorcFacet createFacet(",
        "29": "import com.intellij.facet.FacetTypeId;",
        "30": "import com.intellij.openapi.module.JavaModuleType;",
        "31": "import com.intellij.openapi.module.Module;"
      },
      "id": 75080548,
      "filename": "OsmorcFacetType.java"
    },
    {
      "repo": "https://github.com/JoonyLi/qi4j-sdk.git",
      "language": "Java",
      "linescount": 121,
      "location": "/tools/qidea/src/main/java/org/qi4j/ide/plugin/idea/common/facet",
      "name": "qi4j-sdk",
      "url": "https://searchcode.com/codesearch/view/74616961/",
      "md5hash": "48bbaa0bb2832dec760ff75027e9f59e",
      "lines": {
        "64": "",
        "65": "    public final boolean isSuitableModuleType( ModuleType moduleType )",
        "66": "    {",
        "67": "        return moduleType instanceof JavaModuleType;",
        "24": "import com.intellij.openapi.fileTypes.StdFileTypes;",
        "25": "import com.intellij.openapi.module.JavaModuleType;",
        "56": "",
        "57": "    public final Qi4jFacet createFacet( @NotNull Module module,",
        "26": "import com.intellij.openapi.module.Module;",
        "27": "import com.intellij.openapi.module.ModuleType;",
        "28": "import com.intellij.openapi.util.Condition;",
        "61": "    {",
        "62": "        return new Qi4jFacet( this, module, name, configuration, underlyingFacet );"
      },
      "id": 74616961,
      "filename": "Qi4jFacetType.java"
    },
    {
      "repo": "https://github.com/esnme/intellij-plugins.git",
      "language": "Java",
      "linescount": 115,
      "location": "/struts2/plugin/src/com/intellij/struts2/facet",
      "name": "intellij-plugins",
      "url": "https://searchcode.com/codesearch/view/75084725/",
      "md5hash": "f382e0864a08a5337f6657b612a70b1a",
      "lines": {
        "64": "                                 @Nullable final Facet underlyingFacet) {",
        "65": "    return new StrutsFacet(this, module, name, configuration, underlyingFacet);",
        "67": "",
        "68": "  public boolean isSuitableModuleType(final ModuleType moduleType) {",
        "69": "    return moduleType instanceof JavaModuleType;",
        "70": "  }",
        "28": "import com.intellij.openapi.module.Module;",
        "61": "  public StrutsFacet createFacet(@NotNull final Module module,",
        "26": "import com.intellij.openapi.fileTypes.StdFileTypes;",
        "27": "import com.intellij.openapi.module.JavaModuleType;",
        "60": "",
        "29": "import com.intellij.openapi.module.ModuleType;",
        "30": "import com.intellij.openapi.vfs.VirtualFile;"
      },
      "id": 75084725,
      "filename": "StrutsFacetType.java"
    },
    {
      "repo": "http://mycila.googlecode.com/svn/",
      "language": "Java",
      "linescount": 244,
      "location": "/mycila-guice/tags/mycila-guice-2.0.ga/tmp/guiceyfruit/guiceyfruit-core/src/main/java/org/guiceyfruit/testing",
      "name": "mycila",
      "url": "https://searchcode.com/codesearch/view/279703/",
      "md5hash": "cfe85a12461072c0858c18821854ef08",
      "lines": {
        "100": "    Class<? extends Object> testType = test.getClass();",
        "101": "    moduleType = getModuleForTestClass(testType);",
        "104": "    synchronized (injectors) {",
        "105": "      classInjector = injectors.get(moduleType);",
        "106": "      if (classInjector == null) {",
        "107": "        classInjector = createInjector(moduleType);",
        "108": "        Preconditions.checkNotNull(classInjector, \"classInjector\");",
        "109": "        injectors.put(moduleType, classInjector);",
        "142": "",
        "143": "  protected class TestModule extends AbstractModule {",
        "80": "  public void afterClasses() throws CloseFailedException {",
        "81": "    Injector injector = injectors.get(moduleType);",
        "52": "  private Injector lastClassInjector;",
        "21": "import com.google.inject.AbstractModule;",
        "20": "",
        "53": "  private Class<? extends Module> moduleType;"
      },
      "id": 279703,
      "filename": "InjectorManager.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 178,
      "location": "/java/testFramework/src/com/intellij/testFramework",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/7378076/",
      "md5hash": "39a3ae4eb8dd1e61fe01b4f4f2a7d58c",
      "lines": {
        "54": "    myModulesToDispose.clear();",
        "49": "  protected final Collection<Module> myModulesToDispose = new ArrayList<>();",
        "50": "",
        "47": "",
        "48": "public abstract class ModuleTestCase extends IdeaTestCase {",
        "17": "",
        "18": "import com.intellij.ide.highlighter.ModuleFileType;",
        "53": "    super.setUp();",
        "22": "import com.intellij.openapi.command.WriteCommandAction;",
        "23": "import com.intellij.openapi.module.Module;",
        "24": "import com.intellij.openapi.module.ModuleManager;",
        "25": "import com.intellij.openapi.module.ModuleType;",
        "26": "import com.intellij.openapi.module.StdModuleTypes;",
        "27": "import com.intellij.openapi.module.impl.ModuleImpl;",
        "28": "import com.intellij.openapi.util.Computable;"
      },
      "id": 7378076,
      "filename": "ModuleTestCase.java"
    },
    {
      "repo": "https://github.com/ecruciani/spring-xd.git",
      "language": "Java",
      "linescount": 321,
      "location": "/spring-xd-dirt/src/test/java/org/springframework/xd/dirt/stream",
      "name": "spring-xd",
      "url": "https://searchcode.com/codesearch/view/93768023/",
      "md5hash": "0d17218223c8be5a6c191c5e5654b223",
      "lines": {
        "68": "\t\tassertEquals(ModuleType.job, job.getType());",
        "35": "import org.springframework.core.io.Resource;",
        "36": "import org.springframework.xd.dirt.module.ModuleDefinitionRepository;",
        "37": "import org.springframework.xd.dirt.module.ModuleDependencyRepository;",
        "38": "import org.springframework.xd.dirt.module.ModuleRegistry;",
        "39": "import org.springframework.xd.dirt.module.store.ZooKeeperModuleDefinitionRepository;",
        "40": "import org.springframework.xd.dirt.zookeeper.EmbeddedZooKeeper;",
        "41": "import org.springframework.xd.dirt.zookeeper.ZooKeeperConnection;",
        "42": "import org.springframework.xd.module.ModuleDefinition;",
        "43": "import org.springframework.xd.module.ModuleDescriptor;",
        "44": "import org.springframework.xd.module.ModuleType;",
        "45": "import org.springframework.xd.module.options.DefaultModuleOptionsMetadataResolver;",
        "46": "",
        "67": "\t\tassertEquals(0, job.getIndex());",
        "56": "\tpublic void setup() {",
        "57": "\t\tparser = new XDStreamParser(moduleDefinitionRepository(), new DefaultModuleOptionsMetadataResolver());"
      },
      "id": 93768023,
      "filename": "XDStreamParserTests.java"
    },
    {
      "repo": "https://github.com/ecruciani/spring-xd.git",
      "language": "Java",
      "linescount": 819,
      "location": "/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/server",
      "name": "spring-xd",
      "url": "https://searchcode.com/codesearch/view/93768610/",
      "md5hash": "2169346a8e3c4e151f2eeecf2f1c8613",
      "lines": {
        "64": "import org.springframework.xd.dirt.module.ModuleDeployer;",
        "70": "import org.springframework.xd.dirt.zookeeper.ZooKeeperUtils;",
        "71": "import org.springframework.xd.module.ModuleDefinition;",
        "72": "import org.springframework.xd.module.ModuleDeploymentProperties;",
        "73": "import org.springframework.xd.module.ModuleDescriptor;",
        "74": "import org.springframework.xd.module.ModuleType;",
        "75": "import org.springframework.xd.module.core.CompositeModule;",
        "76": "import org.springframework.xd.module.core.Module;",
        "77": "import org.springframework.xd.module.core.SimpleModule;",
        "78": "import org.springframework.xd.module.options.ModuleOptions;",
        "79": "import org.springframework.xd.module.options.ModuleOptionsMetadata;",
        "80": "import org.springframework.xd.module.options.ModuleOptionsMetadataResolver;",
        "95": "// todo: Rename ContainerServer or ModuleDeployer since it's driven by callbacks and not really a \"server\".",
        "94": " */",
        "63": "import org.springframework.xd.dirt.job.JobFactory;"
      },
      "id": 93768610,
      "filename": "ContainerRegistrar.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 376,
      "location": "/plugins/maven/src/main/java/org/jetbrains/idea/maven/importing",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/7362244/",
      "md5hash": "e4afe5450fcf93220c070f5f802ac813",
      "lines": {
        "66": "  private final MavenProjectChanges myMavenProjectChanges;",
        "67": "  private final Map<MavenProject, String> myMavenProjectToModuleName;",
        "71": "",
        "72": "  public MavenModuleImporter(Module module,",
        "105": "      final ModuleType moduleType = ModuleType.get(myModule);",
        "75": "                             @Nullable MavenProjectChanges changes,",
        "76": "                             Map<MavenProject, String> mavenProjectToModuleName,",
        "47": "",
        "48": "public class MavenModuleImporter {",
        "104": "",
        "24": "import com.intellij.openapi.externalSystem.service.project.IdeModifiableModelsProvider;",
        "25": "import com.intellij.openapi.module.Module;",
        "26": "import com.intellij.openapi.module.ModuleType;",
        "27": "import com.intellij.openapi.roots.*;",
        "60": "",
        "61": "  private final Module myModule;"
      },
      "id": 7362244,
      "filename": "MavenModuleImporter.java"
    },
    {
      "repo": "https://github.com/ecruciani/spring-xd.git",
      "language": "Java",
      "linescount": 144,
      "location": "/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/stream",
      "name": "spring-xd",
      "url": "https://searchcode.com/codesearch/view/93768825/",
      "md5hash": "a3be7effa897b92ba4d6d20c4ef52310",
      "lines": {
        "54": "\t\t\tnew ModuleType[] { processor },",
        "40": "\t// Read these vertically: either [source, processor, processor] or [processor, processor, sink]",
        "41": "\tmodule(true, new ModuleType[] { source, processor },",
        "42": "\t\t\tnew ModuleType[] { processor /* ,processsor */},",
        "43": "\t\t\tnew ModuleType[] { processor, sink }),",
        "44": "",
        "47": "\t */",
        "48": "\tjob(true, ModuleType.job, null, null),",
        "18": "",
        "19": "import static org.springframework.xd.module.ModuleType.processor;",
        "20": "import static org.springframework.xd.module.ModuleType.sink;",
        "21": "import static org.springframework.xd.module.ModuleType.source;",
        "22": "",
        "23": "import org.springframework.xd.module.ModuleType;",
        "52": "\t */",
        "53": "\tpartial_stream(false, new ModuleType[] { source },"
      },
      "id": 93768825,
      "filename": "ParsingContext.java"
    },
    {
      "repo": "https://github.com/nishkavijay/owlapi.git",
      "language": "Java",
      "linescount": 722,
      "location": "/tools/src/main/java/uk/ac/manchester/cs/owlapi/modularity",
      "name": "owlapi",
      "url": "https://searchcode.com/codesearch/view/95510450/",
      "md5hash": "70da9f16cdc0ff6657f14928f2159c53",
      "lines": {
        "256": "     * Creates a new module extractor for a given ontology, its manager, and a",
        "262": "     *        the associated ontology",
        "263": "     * @param moduleType",
        "264": "     *        the type of module this extractor will construct",
        "216": "    /** Type of module. */",
        "242": "     *        the subset of the ontology as a set of axioms",
        "243": "     * @param moduleType",
        "244": "     *        the type of module this extractor will construct",
        "246": "    public SyntacticLocalityModuleExtractor(OWLOntologyManager man,",
        "247": "            OWLOntology ont, Set<OWLAxiom> axs, ModuleType moduleType) {",
        "248": "        setModuleType(moduleType);",
        "217": "    ModuleType moduleType;",
        "218": "    /** Represents the associated ontology. */",
        "249": "        manager = man;",
        "255": "    /**"
      },
      "id": 95510450,
      "filename": "SyntacticLocalityModuleExtractor.java"
    },
    {
      "repo": "https://github.com/geipette/la-clojure.git",
      "language": "Java",
      "linescount": 103,
      "location": "/src/org/jetbrains/plugins/clojure/utils",
      "name": "la-clojure",
      "url": "https://searchcode.com/codesearch/view/74083672/",
      "md5hash": "c27baa7f461fc5cb628a9cc1d5e364fd",
      "lines": {
        "68": "",
        "69": "  public static boolean isSuitableModule(Module module) {",
        "70": "    if (module == null) return false;",
        "71": "    ModuleType type = ModuleType.get(module);",
        "72": "    return type instanceof JavaModuleType || \"PLUGIN_MODULE\".equals(type.getId());",
        "73": "  }",
        "75": "  @Nullable",
        "76": "  public static Module getModule(AnActionEvent e) {",
        "77": "    Module module = e.getData(DataKeys.MODULE);",
        "22": "import com.intellij.openapi.fileEditor.FileDocumentManager;",
        "23": "import com.intellij.openapi.module.JavaModuleType;",
        "24": "import com.intellij.openapi.module.Module;",
        "25": "import com.intellij.openapi.module.ModuleManager;",
        "26": "import com.intellij.openapi.module.ModuleType;",
        "27": "import com.intellij.openapi.project.Project;"
      },
      "id": 74083672,
      "filename": "ClojureUtils.java"
    },
    {
      "repo": "https://github.com/xbsd-nikolay/la-clojure.git",
      "language": "Java",
      "linescount": 102,
      "location": "/src/org/jetbrains/plugins/clojure/utils",
      "name": "la-clojure",
      "url": "https://searchcode.com/codesearch/view/75290028/",
      "md5hash": "a8fca6a8252e04c830dfe89e2d014501",
      "lines": {
        "67": "",
        "68": "  public static boolean isSuitableModule(Module module) {",
        "69": "    if (module == null) return false;",
        "70": "    ModuleType type = ModuleType.get(module);",
        "71": "    return type instanceof JavaModuleType || \"PLUGIN_MODULE\".equals(type.getId());",
        "72": "  }",
        "74": "  @Nullable",
        "75": "  public static Module getModule(AnActionEvent e) {",
        "76": "    Module module = e.getData(DataKeys.MODULE);",
        "22": "import com.intellij.openapi.fileEditor.FileDocumentManager;",
        "23": "import com.intellij.openapi.module.JavaModuleType;",
        "24": "import com.intellij.openapi.module.Module;",
        "25": "import com.intellij.openapi.module.ModuleManager;",
        "26": "import com.intellij.openapi.module.ModuleType;",
        "27": "import com.intellij.openapi.project.Project;"
      },
      "id": 75290028,
      "filename": "ClojureUtils.java"
    },
    {
      "repo": "https://github.com/ecruciani/spring-xd.git",
      "language": "Java",
      "linescount": 309,
      "location": "/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/stream",
      "name": "spring-xd",
      "url": "https://searchcode.com/codesearch/view/93768809/",
      "md5hash": "eca58e4aee4a86ff5f8334f1f57a50a8",
      "lines": {
        "32": "import org.springframework.xd.dirt.module.NoSuchModuleException;",
        "33": "import org.springframework.xd.dirt.plugins.ModuleConfigurationException;",
        "34": "import org.springframework.xd.dirt.stream.ParsingContext.Position;",
        "35": "import org.springframework.xd.dirt.stream.dsl.ArgumentNode;",
        "36": "import org.springframework.xd.dirt.stream.dsl.ModuleNode;",
        "40": "import org.springframework.xd.dirt.stream.dsl.StreamNode;",
        "41": "import org.springframework.xd.module.ModuleDefinition;",
        "42": "import org.springframework.xd.module.ModuleDescriptor;",
        "43": "import org.springframework.xd.module.ModuleType;",
        "44": "import org.springframework.xd.module.core.CompositeModule;",
        "45": "import org.springframework.xd.module.options.ModuleOptionsMetadata;",
        "46": "import org.springframework.xd.module.options.ModuleOptionsMetadataResolver;",
        "47": "",
        "30": "import org.springframework.xd.dirt.core.BaseDefinition;",
        "31": "import org.springframework.xd.dirt.module.ModuleDefinitionRepository;"
      },
      "id": 93768809,
      "filename": "XDStreamParser.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 183,
      "location": "/java/idea-ui/src/com/intellij/ide/util/importProject",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/7366860/",
      "md5hash": "3d3763884b62e927a8d3859594f75990",
      "lines": {
        "51": "  private List<ModuleBuilder.ModuleConfigurationUpdater> myConfigurationUpdaters = new SmartList<>();",
        "54": "  public ModuleDescriptor(final File contentRoot, final ModuleType moduleType, final Collection<? extends DetectedSourceRoot> sourceRoots) {",
        "55": "    myName = suggestModuleName(contentRoot);",
        "17": "",
        "18": "import com.intellij.ide.highlighter.ModuleFileType;",
        "19": "import com.intellij.ide.util.projectWizard.ModuleBuilder;",
        "52": "  private ModuleType myModuleType;",
        "53": "",
        "22": "import com.intellij.openapi.module.Module;",
        "23": "import com.intellij.openapi.module.ModuleType;",
        "24": "import com.intellij.openapi.roots.ModifiableRootModel;",
        "57": "    myModuleType = moduleType;",
        "56": "    myContentToSourceRoots.putValues(contentRoot, sourceRoots);",
        "59": "",
        "60": "  public ModuleDescriptor(final File contentRoot, final ModuleType moduleType,",
        "61": "                          final DetectedSourceRoot sourceRoot) {",
        "62": "    this(contentRoot, moduleType, Collections.singletonList(sourceRoot));"
      },
      "id": 7366860,
      "filename": "ModuleDescriptor.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 84,
      "location": "/java/java-impl/src/com/intellij/ide/projectView/actions",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/116150418/",
      "md5hash": "07f68f7f7a135c9ae85873a267959a3c",
      "lines": {
        "40": "    Presentation presentation = getTemplatePresentation();",
        "41": "    presentation.setIcon(AllIcons.Modules.GeneratedSourceRoot);",
        "42": "",
        "75": "    return moduleType instanceof JavaModuleType || moduleType != null && \"PLUGIN_MODULE\".equals(moduleType.getId());",
        "76": "  }",
        "73": "    ModuleType moduleType = ModuleType.get(module);",
        "72": "  private static boolean isJavaModule(Module module) {",
        "19": "import com.intellij.openapi.actionSystem.Presentation;",
        "20": "import com.intellij.openapi.module.JavaModuleType;",
        "21": "import com.intellij.openapi.module.Module;",
        "22": "import com.intellij.openapi.module.ModuleType;",
        "23": "import com.intellij.openapi.roots.ContentEntry;",
        "24": "import com.intellij.openapi.roots.SourceFolder;",
        "25": "import com.intellij.openapi.roots.ui.configuration.ModuleSourceRootEditHandler;",
        "27": "import org.jetbrains.annotations.NotNull;",
        "28": "import org.jetbrains.jps.model.java.JavaModuleSourceRootTypes;",
        "74": "    //this additional check can be removed when we get rid of PluginModuleType"
      },
      "id": 116150418,
      "filename": "MarkGeneratedSourceRootAction.java"
    },
    {
      "repo": "git://github.com/JetBrains/intellij-community.git",
      "language": "Java",
      "linescount": 217,
      "location": "/plugins/maven/src/main/java/org/jetbrains/idea/maven/importing",
      "name": "intellij-community",
      "url": "https://searchcode.com/codesearch/view/7362245/",
      "md5hash": "cd77bc74c81370551c6e3b189978a104",
      "lines": {
        "64": "        result.add(importer);",
        "65": "        moduleTypes.add(importer.getModuleType());",
        "22": "import com.intellij.openapi.module.StdModuleTypes;",
        "72": "",
        "73": "    if (moduleTypes.size() <= 1) {",
        "55": "    Set<ModuleType> moduleTypes = null;",
        "86": "        moduleType = importer.getModuleType();",
        "79": "    // If possible - return at least one importer that explicitly supports packaging of the given maven project.",
        "80": "    ModuleType moduleType = result.get(0).getModuleType();",
        "20": "import com.intellij.openapi.module.Module;",
        "21": "import com.intellij.openapi.module.ModuleType;",
        "54": "    List<MavenImporter> result = null;",
        "23": "import com.intellij.openapi.project.Project;",
        "60": "          result = new ArrayList<>();",
        "61": "          moduleTypes = new THashSet<>();",
        "85": "      if (supportedPackagings.contains(p.getPackaging())) {"
      },
      "id": 7362245,
      "filename": "MavenImporter.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 456,
      "source": "Github",
      "id": 2
    },
    {
      "count": 275,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 34,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 15,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 4,
      "source": "Unknown",
      "id": 0
    }
  ]
}