{
  "matchterm": "CipherProvider",
  "previouspage": null,
  "searchterm": "CipherProvider",
  "query": "CipherProvider",
  "language_filters": [
    {
      "count": 69,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 69,
  "results": [
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 49,
      "location": "/hbase-common/src/main/java/org/apache/hadoop/hbase/io/crypto",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94573262/",
      "md5hash": "c22c1d9557d84006598d476922796e0a",
      "lines": {
        "24": " * An CipherProvider contributes support for various cryptographic",
        "28": "@InterfaceStability.Evolving",
        "29": "public interface CipherProvider extends Configurable {",
        "23": "/**"
      },
      "id": 94573262,
      "filename": "CipherProvider.java"
    },
    {
      "repo": "git://github.com/apache/hbase.git",
      "language": "Java",
      "linescount": 49,
      "location": "/hbase-common/src/main/java/org/apache/hadoop/hbase/io/crypto",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/116069507/",
      "md5hash": "dfc6e8e767f07e8a9a3b9addbc5fcb77",
      "lines": {
        "24": " * An CipherProvider contributes support for various cryptographic",
        "28": "@InterfaceStability.Evolving",
        "29": "public interface CipherProvider extends Configurable {",
        "23": "/**"
      },
      "id": 116069507,
      "filename": "CipherProvider.java"
    },
    {
      "repo": "https://github.com/dstendardi/flume.git",
      "language": "Java",
      "linescount": 71,
      "location": "/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/encryption",
      "name": "flume",
      "url": "https://searchcode.com/codesearch/view/73815174/",
      "md5hash": "25b0449e7a8b4aeae208f3254ef94984",
      "lines": {
        "24": "",
        "25": "public abstract class CipherProvider {"
      },
      "id": 73815174,
      "filename": "CipherProvider.java"
    },
    {
      "repo": "https://bitbucket.org/meverett/mywire",
      "language": "Java",
      "linescount": 70,
      "location": "/components/security/src/main/java/org/limewire/security/certificate",
      "name": "mywire",
      "url": "https://searchcode.com/codesearch/view/119547166/",
      "md5hash": "21bfafa16bdf75d9562e887ea68725df",
      "lines": {
        "12": " */",
        "13": "public interface CipherProvider {"
      },
      "id": 119547166,
      "filename": "CipherProvider.java"
    },
    {
      "repo": "https://bitbucket.org/b_c/jose4j.git",
      "language": "Java",
      "linescount": 229,
      "location": "/src/main/java/org/jose4j/jwe",
      "name": "jose4j",
      "url": "https://searchcode.com/codesearch/view/59205321/",
      "md5hash": "e23f85c0a1fb2379218d2cf306aeaa48",
      "lines": {
        "130": "    {",
        "131": "        String cipherProvider = ContentEncryptionHelp.getCipherProvider(headers, providerContext);",
        "152": "        Key encryptionKey = new AesKey(ByteUtil.rightHalf(contentEncryptionKey));",
        "153": "        Cipher cipher = CipherUtil.getCipher(getJavaAlgorithm(), cipherProvider);",
        "90": "        Key encryptionKey = new AesKey(ByteUtil.rightHalf(key));",
        "91": "        final String cipherProvider = ContentEncryptionHelp.getCipherProvider(headers, providerContext);",
        "92": "        Cipher cipher = CipherUtil.getCipher(getJavaAlgorithm(), cipherProvider);",
        "93": ""
      },
      "id": 59205321,
      "filename": "AesCbcHmacSha2ContentEncryptionAlgorithm.java"
    },
    {
      "repo": "https://github.com/luyee/flume.git",
      "language": "Java",
      "linescount": 7637,
      "location": "/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/proto",
      "name": "flume",
      "url": "https://searchcode.com/codesearch/view/101478965/",
      "md5hash": "b4fbc9f066ae3388e5a4deb271672a68",
      "lines": {
        "2699": "              bitField0_ |= 0x00000001;",
        "2700": "              cipherProvider_ = input.readBytes();",
        "2606": "",
        "2607": "    // required string cipherProvider = 1;",
        "2608": "    /**",
        "2609": "     * <code>required string cipherProvider = 1;</code>",
        "2610": "     */",
        "2611": "    boolean hasCipherProvider();",
        "2612": "    /**",
        "2613": "     * <code>required string cipherProvider = 1;</code>",
        "2614": "     */",
        "2615": "    java.lang.String getCipherProvider();",
        "2616": "    /**",
        "2617": "     * <code>required string cipherProvider = 1;</code>",
        "2619": "    com.google.protobuf.ByteString",
        "2620": "        getCipherProviderBytes();"
      },
      "id": 101478965,
      "filename": "ProtosFactory.java"
    },
    {
      "repo": "https://github.com/luyee/flume.git",
      "language": "Java",
      "linescount": 392,
      "location": "/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file",
      "name": "flume",
      "url": "https://searchcode.com/codesearch/view/101478850/",
      "md5hash": "76adcf7cb0950ac78a8a06635661b305",
      "lines": {
        "27": "import org.apache.flume.channel.file.encryption.CipherProvider;",
        "262": "    }",
        "263": "    private CipherProvider.Decryptor getDecryptor() {",
        "264": "      CipherProvider.Decryptor decryptor = decryptors.poll();",
        "265": "      if(decryptor == null) {",
        "266": "        decryptor = CipherProviderFactory.getDecrypter(cipherProvider, key,",
        "29": "import org.apache.flume.channel.file.encryption.DecryptionFailureException;",
        "181": "        @Nullable String encryptionKeyAlias,",
        "182": "        @Nullable String encryptionCipherProvider,",
        "184": "        int fsyncInterval) throws IOException {",
        "185": "      super(file, logFileID, maxFileSize, CipherProviderFactory.",
        "186": "          getEncrypter(encryptionCipherProvider, encryptionKey),",
        "187": "          usableSpaceRefreshInterval, fsyncPerTransaction, fsyncInterval);",
        "28": "import org.apache.flume.channel.file.encryption.CipherProviderFactory;",
        "26": "import org.apache.flume.annotations.InterfaceStability;"
      },
      "id": 101478850,
      "filename": "LogFileV3.java"
    },
    {
      "repo": "https://github.com/dstendardi/flume.git",
      "language": "Java",
      "linescount": 345,
      "location": "/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file",
      "name": "flume",
      "url": "https://searchcode.com/codesearch/view/73814811/",
      "md5hash": "fd3a62bfb7d1805e4eb6307a2457874d",
      "lines": {
        "33": "import org.apache.flume.channel.file.proto.ProtosFactory;",
        "34": "import org.apache.flume.channel.file.encryption.CipherProvider;",
        "35": "import org.apache.flume.channel.file.encryption.CipherProviderFactory;",
        "36": "import org.apache.flume.channel.file.encryption.KeyProvider;",
        "170": "        @Nullable String encryptionKeyAlias,",
        "171": "        @Nullable String encryptionCipherProvider)",
        "172": "        throws IOException {",
        "173": "      super(file, logFileID, maxFileSize, CipherProviderFactory.",
        "174": "          getEncrypter(encryptionCipherProvider, encryptionKey));",
        "175": "      ProtosFactory.LogFileMetaData.Builder metaDataBuilder =",
        "178": "        Preconditions.checkNotNull(encryptionKeyAlias, \"encryptionKeyAlias\");",
        "179": "        Preconditions.checkNotNull(encryptionCipherProvider,",
        "180": "            \"encryptionCipherProvider\");",
        "181": "        ProtosFactory.LogFileEncryption.Builder logFileEncryptionBuilder =",
        "182": "            ProtosFactory.LogFileEncryption.newBuilder();",
        "183": "        logFileEncryptionBuilder.setCipherProvider(encryptionCipherProvider);"
      },
      "id": 73814811,
      "filename": "LogFileV3.java"
    },
    {
      "repo": "https://bitbucket.org/b_c/jose4j.git",
      "language": "Java",
      "linescount": 279,
      "location": "/src/main/java/org/jose4j/jca",
      "name": "jose4j",
      "url": "https://searchcode.com/codesearch/view/132800739/",
      "md5hash": "2fdfd720ae759cd493812c3bb2ec397b",
      "lines": {
        "36": " * {@link org.jose4j.jca.ProviderContext.Context#setMacProvider(String)} on the {@code Context} obtained from calling {@code getSuppliedKeyProviderContext()}.",
        "37": " * To specify the provider for decrypting a key with RSA when consuming a JWE, use {@link org.jose4j.jca.ProviderContext.Context#setCipherProvider(String)}",
        "105": "        private String keyAgreementProvider;",
        "106": "        private String cipherProvider;",
        "176": "         */",
        "177": "        public String getCipherProvider()",
        "178": "        {",
        "179": "            return select(cipherProvider);",
        "185": "         *",
        "186": "         * @param cipherProvider  the provider name",
        "187": "         */",
        "188": "        public void setCipherProvider(String cipherProvider)",
        "189": "        {",
        "190": "            this.cipherProvider = cipherProvider;"
      },
      "id": 132800739,
      "filename": "ProviderContext.java"
    },
    {
      "repo": "https://github.com/dstendardi/flume.git",
      "language": "Java",
      "linescount": 90,
      "location": "/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/encryption",
      "name": "flume",
      "url": "https://searchcode.com/codesearch/view/73815153/",
      "md5hash": "96f32b3cad7fab014aea2ab57b464b5e",
      "lines": {
        "32": "",
        "33": "  public static CipherProvider.Encryptor getEncrypter(String cipherProviderType,",
        "34": "      Key key) {",
        "35": "    if(cipherProviderType == null) {",
        "37": "    }",
        "38": "    CipherProvider provider = getProvider(cipherProviderType);",
        "40": "  }",
        "41": "  public static CipherProvider.Decryptor getDecrypter(String cipherProviderType,",
        "42": "      Key key, byte[] parameters) {",
        "43": "    if(cipherProviderType == null) {",
        "45": "    }",
        "46": "    CipherProvider provider = getProvider(cipherProviderType);",
        "28": "",
        "29": "public class CipherProviderFactory {",
        "30": "  private static final Logger logger =",
        "31": "      LoggerFactory.getLogger(CipherProviderFactory.class);"
      },
      "id": 73815153,
      "filename": "CipherProviderFactory.java"
    },
    {
      "repo": "https://bitbucket.org/meverett/mywire",
      "language": "Java",
      "linescount": 105,
      "location": "/components/security/src/test/java/org/limewire/security/certificate",
      "name": "mywire",
      "url": "https://searchcode.com/codesearch/view/119547126/",
      "md5hash": "5375090fc46d10c0754aa10893ffb47a",
      "lines": {
        "32": "    public static Test suite() {",
        "33": "        return buildTestSuite(CipherProviderTest.class);",
        "43": "",
        "44": "        byte[] ciphertext = cipherProvider.encrypt(plaintext, keyPair.getPrivate(), CipherType.RSA);",
        "45": "        assertGreaterThan(0, ciphertext.length);",
        "46": "        byte[] plaintext2 = cipherProvider.decrypt(ciphertext, keyPair.getPublic(), CipherType.RSA);",
        "15": "import org.limewire.security.LimeWireSecurityModule;",
        "16": "import org.limewire.security.certificate.CipherProvider.CipherType;",
        "17": "import org.limewire.security.certificate.CipherProvider.SignatureType;",
        "18": "import org.limewire.util.BaseTestCase;",
        "24": "",
        "25": "public class CipherProviderTest extends BaseTestCase {",
        "26": "    private CipherProvider cipherProvider;",
        "27": "",
        "28": "    public CipherProviderTest(String name) {"
      },
      "id": 119547126,
      "filename": "CipherProviderTest.java"
    },
    {
      "repo": "https://github.com/haoyuan/hbase.git",
      "language": "Java",
      "linescount": 175,
      "location": "/hbase-common/src/main/java/org/apache/hadoop/hbase/io/crypto/aes",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/94573276/",
      "md5hash": "a77d568be5868ff956fb922787f86314",
      "lines": {
        "64": "  private final String cipherMode;",
        "33": "import org.apache.hadoop.hbase.io.crypto.Cipher;",
        "34": "import org.apache.hadoop.hbase.io.crypto.CipherProvider;",
        "67": "",
        "68": "  public AES(CipherProvider provider) {",
        "165": "      if (cipherProvider != null) {",
        "166": "        return javax.crypto.Cipher.getInstance(cipherMode, cipherProvider);",
        "65": "  private final String cipherProvider;",
        "72": "    // The JCE provider, null if default",
        "73": "    cipherProvider = provider.getConf().get(CIPHER_PROVIDER_KEY);",
        "167": "      }",
        "164": "    try {"
      },
      "id": 94573276,
      "filename": "AES.java"
    },
    {
      "repo": "https://bitbucket.org/meverett/mywire",
      "language": "Java",
      "linescount": 140,
      "location": "/components/xmpp/src/main/java/org/limewire/xmpp/client/impl",
      "name": "mywire",
      "url": "https://searchcode.com/codesearch/view/119547229/",
      "md5hash": "fd7908afa0af892a2800d3cc17df4bcd",
      "lines": {
        "98": "",
        "67": "",
        "36": "",
        "37": "    private static final CipherProvider.CipherType CIPHER_TYPE = CipherProvider.CipherType.AES;",
        "12": "import org.apache.commons.codec.binary.Base64;",
        "13": "import org.limewire.security.certificate.CipherProvider;",
        "47": "",
        "48": "    private CipherProvider cipherProvider;",
        "99": "        byte[] pwdAsBytes = cipherProvider.decrypt(encryptedPassword, keySpec, CIPHER_TYPE);",
        "50": "",
        "51": "    Password(CipherProvider cipherProvider, String passwordString, boolean isEncrypted) {",
        "52": "        this.cipherProvider = cipherProvider;",
        "53": "        this.passwordString = passwordString;",
        "68": "        byte[] encrypted = cipherProvider.encrypt("
      },
      "id": 119547229,
      "filename": "Password.java"
    },
    {
      "repo": "https://bitbucket.org/meverett/mywire",
      "language": "Java",
      "linescount": 111,
      "location": "/components/promotion/src/main/java/org/limewire/promotion/containers",
      "name": "mywire",
      "url": "https://searchcode.com/codesearch/view/119549546/",
      "md5hash": "8b12ace8561d965fdc33c7abd228452a",
      "lines": {
        "96": "            byte[] wrappedBytes = payload.getBytes(KEY_WRAPPED_BYTES);",
        "97": "            if (!cipherProvider.verify(wrappedBytes, payload.getBytes(KEY_SIGNATURE), cert",
        "69": "    public void setAndSignWrappedMessage(MessageContainer wrappedMessage,",
        "70": "            CipherProvider cipherProvider, PrivateKey privateKey, String keyAlias)",
        "72": "        byte[] messagePayload = wrappedMessage.encode();",
        "73": "        byte[] signature = cipherProvider.sign(messagePayload, privateKey,",
        "13": "import org.limewire.security.certificate.CertificateVerifier;",
        "14": "import org.limewire.security.certificate.CipherProvider;",
        "15": "import org.limewire.security.certificate.KeyStoreProvider;",
        "16": "import org.limewire.security.certificate.CipherProvider.SignatureType;",
        "83": "     * ",
        "84": "     * @param cipherProvider verifies the signature",
        "88": "     */",
        "89": "    public MessageContainer getAndVerifyWrappedMessage(CipherProvider cipherProvider,"
      },
      "id": 119549546,
      "filename": "SignedMessageContainer.java"
    },
    {
      "repo": "https://bitbucket.org/meverett/mywire",
      "language": "Java",
      "linescount": 124,
      "location": "/components/activation/src/main/java/org/limewire/activation/serial",
      "name": "mywire",
      "url": "https://searchcode.com/codesearch/view/119549580/",
      "md5hash": "8d394f826cc3703b3a683ab14306d0db",
      "lines": {
        "112": "        byte[] decryptedBytes = cipherProvider.decrypt(Base32.decode(encryptedString), keySpec, CIPHER_TYPE);",
        "100": "",
        "101": "        byte[] encryptedBytes = cipherProvider.encrypt(StringUtils.toUTF8Bytes(message), keySpec, CIPHER_TYPE);",
        "40": "    private final ActivationSerializerSettings settings;",
        "41": "    private final CipherProvider cipherProvider;",
        "44": "    @Inject",
        "45": "    public ActivationSerializerImpl(ActivationSerializerSettings settings, CipherProvider cipherProvider,",
        "47": "        this.settings = settings;",
        "48": "        this.cipherProvider = cipherProvider;",
        "21": "import org.limewire.io.IOUtils;",
        "22": "import org.limewire.security.certificate.CipherProvider;",
        "23": "import org.limewire.security.certificate.CipherProvider.CipherType;",
        "24": "import org.limewire.util.Base32;",
        "111": ""
      },
      "id": 119549580,
      "filename": "ActivationSerializerImpl.java"
    },
    {
      "repo": "https://bitbucket.org/jpilliet/libcore-292",
      "language": "Java",
      "linescount": 1158,
      "location": "/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto",
      "name": "libcore-292",
      "url": "https://searchcode.com/codesearch/view/64550483/",
      "md5hash": "155fa292767f43da57c012020c490bec",
      "lines": {
        "176": "            Cipher cipher = Cipher.getInstance(\"AES\", provider.getName());",
        "177": "            Provider cipherProvider = cipher.getProvider();",
        "178": "            assertTrue(\"Cipher provider is not the same as that \"",
        "179": "                    + \"provided as parameter to getInstance()\", cipherProvider"
      },
      "id": 64550483,
      "filename": "CipherTest.java"
    },
    {
      "repo": "https://bitbucket.org/b_c/jose4j.git",
      "language": "Java",
      "linescount": 150,
      "location": "/src/main/java/org/jose4j/jwe",
      "name": "jose4j",
      "url": "https://searchcode.com/codesearch/view/132800733/",
      "md5hash": "6fd524eb65446a6cefa52583b1524b02",
      "lines": {
        "96": "",
        "97": "        String cipherProvider = providerContext.getSuppliedKeyProviderContext().getCipherProvider();",
        "98": "        byte[] cek = simpleAeadCipher.decrypt(managementKey, iv, encryptedKey, tag, null, cipherProvider);",
        "99": "        return new SecretKeySpec(cek, cekDesc.getContentEncryptionKeyAlgorithm());",
        "75": "",
        "76": "        String cipherProvider = providerContext.getSuppliedKeyProviderContext().getCipherProvider();",
        "77": "        SimpleAeadCipher.CipherOutput encrypted = simpleAeadCipher.encrypt(managementKey, iv, cek, null, cipherProvider);",
        "78": "        byte[] encryptedKey = encrypted.getCiphertext();"
      },
      "id": 132800733,
      "filename": "AesGcmKeyEncryptionAlgorithm.java"
    },
    {
      "repo": "https://bitbucket.org/b_c/jose4j.git",
      "language": "Java",
      "linescount": 112,
      "location": "/src/main/java/org/jose4j/jwe",
      "name": "jose4j",
      "url": "https://searchcode.com/codesearch/view/132800737/",
      "md5hash": "5653684300579da73c16119445069c3c",
      "lines": {
        "80": "    }",
        "56": "        byte[] iv = InitializationVectorHelp.iv(IV_BYTE_LENGTH, ivOverride, providerContext.getSecureRandom());",
        "57": "        String cipherProvider = ContentEncryptionHelp.getCipherProvider(headers, providerContext);",
        "58": "        return encrypt(plaintext, aad, contentEncryptionKey, iv, cipherProvider);",
        "59": "    }",
        "77": "        byte[] tag = contentEncParts.getAuthenticationTag();",
        "78": "        String cipherProvider = ContentEncryptionHelp.getCipherProvider(headers, providerContext);",
        "79": "        return simpleAeadCipher.decrypt(cek, iv, ciphertext, tag, aad, cipherProvider);"
      },
      "id": 132800737,
      "filename": "AesGcmContentEncryptionAlgorithm.java"
    },
    {
      "repo": "https://bitbucket.org/meverett/mywire",
      "language": "Java",
      "linescount": 88,
      "location": "/components/xmpp/src/main/java/org/limewire/xmpp/client/impl",
      "name": "mywire",
      "url": "https://searchcode.com/codesearch/view/119547219/",
      "md5hash": "98b45282e931d5911136b5325edbefa5",
      "lines": {
        "59": "        Password pwd = new Password(cipherProvider, rawPassword, false);",
        "36": "        String encryptedPassword = loadEncryptedPassword(userName);",
        "37": "        Password pwd = new Password(cipherProvider, encryptedPassword, true);",
        "9": "import org.limewire.inject.LazySingleton;",
        "10": "import org.limewire.security.certificate.CipherProvider;",
        "22": "",
        "23": "    private CipherProvider cipherProvider;",
        "25": "    @Inject",
        "26": "    public PasswordManagerImpl(CipherProvider cipherProvider) {",
        "27": "        this.cipherProvider = cipherProvider;",
        "28": "    }",
        "58": "        Preferences prefs = getPreferences();"
      },
      "id": 119547219,
      "filename": "PasswordManagerImpl.java"
    },
    {
      "repo": "https://bitbucket.org/meverett/mywire",
      "language": "Java",
      "linescount": 207,
      "location": "/components/promotion/src/main/java/org/limewire/promotion",
      "name": "mywire",
      "url": "https://searchcode.com/codesearch/view/119549525/",
      "md5hash": "e3f29db7eb72baa89eeeb0c82228be98",
      "lines": {
        "15": "import org.limewire.security.certificate.CertificateVerifier;",
        "44": "    @Inject",
        "45": "    public PromotionBinder(final CipherProvider cipherProvider, final KeyStoreProvider keyStore,",
        "46": "            final CertificateVerifier certificateVerifier) {",
        "47": "        this.cipherProvider = cipherProvider;",
        "16": "import org.limewire.security.certificate.CipherProvider;",
        "178": "            try {",
        "179": "                wrappedMessage = backingSignedMessage.getAndVerifyWrappedMessage(cipherProvider,",
        "27": "public class PromotionBinder {",
        "28": "    private CipherProvider cipherProvider;",
        "93": "        try {",
        "94": "            wrappedMessage = signedMessage.getAndVerifyWrappedMessage(cipherProvider, keyStore,"
      },
      "id": 119549525,
      "filename": "PromotionBinder.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 38,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 31,
      "source": "Github",
      "id": 2
    }
  ]
}