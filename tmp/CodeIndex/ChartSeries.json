{
  "matchterm": "ChartSeries",
  "previouspage": null,
  "searchterm": "ChartSeries",
  "query": "ChartSeries",
  "language_filters": [
    {
      "count": 87,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 87,
  "results": [
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 961,
      "location": "/src/main/java/com/extentech/formats/XLS/charts",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47125060/",
      "md5hash": "2f449a69ec7e4df13c139e056f79b785",
      "lines": {
        "896": "\t\t}catch(Exception e){",
        "769": "\t        \t\t\t\t if (seriesidx > 0 && parentChart instanceof PieChart)",
        "770": "\t        \t\t\t\t\t Logger.logWarn(\"ChartSeries.parseOOXML:  more than 1 series encountered for a Pie-style chart\");",
        "897": "\t\t\tthrow new WorkBookException(\"ChartSeries.updateSeriesMappings failed:\" + e.toString(),WorkBookException.RUNTIME_ERROR);",
        "55": "",
        "727": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLogger.logWarn(\"ChartSeries.parseOOXML: unexpected pivot value order- skipping\");",
        "788": "        } catch (Exception e) {",
        "754": "\t\t\t\t\t\t\t\t} catch (Exception e) { ",
        "499": "\t\t} catch (JSONException e) {",
        "500": "\t\t\tLogger.logErr(\"ChartSeries.getDataRangeJSON:  Error retrieving Series Information: \" + e.toString());",
        "789": "        \tLogger.logErr(\"ChartSeries.parseOOXML: Error parsing series for \" + parentChart + \":\" + e.toString());\t\t             ",
        "726": "\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (!clist[z].getVal().toString().equals(s)) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
        "755": "\t\t\t\t\t\t        \tLogger.logErr(\"ChartSeries.parseOOXML: Error adjusting pivot range for \" + parentChart + \":\" + e.toString());\t\t             ",
        "56": "public class ChartSeries implements ChartConstants, Serializable {",
        "121": "    \t    } catch (Exception e) {",
        "122": "    \t\tLogger.logWarn(\"ChartSeries.getMinMax: \" + e.toString());"
      },
      "id": 47125060,
      "filename": "ChartSeries.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 961,
      "location": "/src/main/java/com/extentech/formats/XLS/charts",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976684/",
      "md5hash": "2f449a69ec7e4df13c139e056f79b785",
      "lines": {
        "896": "\t\t}catch(Exception e){",
        "769": "\t        \t\t\t\t if (seriesidx > 0 && parentChart instanceof PieChart)",
        "770": "\t        \t\t\t\t\t Logger.logWarn(\"ChartSeries.parseOOXML:  more than 1 series encountered for a Pie-style chart\");",
        "897": "\t\t\tthrow new WorkBookException(\"ChartSeries.updateSeriesMappings failed:\" + e.toString(),WorkBookException.RUNTIME_ERROR);",
        "55": "",
        "727": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLogger.logWarn(\"ChartSeries.parseOOXML: unexpected pivot value order- skipping\");",
        "788": "        } catch (Exception e) {",
        "754": "\t\t\t\t\t\t\t\t} catch (Exception e) { ",
        "499": "\t\t} catch (JSONException e) {",
        "500": "\t\t\tLogger.logErr(\"ChartSeries.getDataRangeJSON:  Error retrieving Series Information: \" + e.toString());",
        "789": "        \tLogger.logErr(\"ChartSeries.parseOOXML: Error parsing series for \" + parentChart + \":\" + e.toString());\t\t             ",
        "726": "\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (!clist[z].getVal().toString().equals(s)) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
        "755": "\t\t\t\t\t\t        \tLogger.logErr(\"ChartSeries.parseOOXML: Error adjusting pivot range for \" + parentChart + \":\" + e.toString());\t\t             ",
        "56": "public class ChartSeries implements ChartConstants, Serializable {",
        "121": "    \t    } catch (Exception e) {",
        "122": "    \t\tLogger.logWarn(\"ChartSeries.getMinMax: \" + e.toString());"
      },
      "id": 50976684,
      "filename": "ChartSeries.java"
    },
    {
      "repo": "http://primefaces.googlecode.com/svn/primefaces/trunk/",
      "language": "Java",
      "linescount": 94,
      "location": "/src/main/java/org/primefaces/model/chart",
      "name": "primefaces",
      "url": "https://searchcode.com/codesearch/view/2686618/",
      "md5hash": "d823d222e98f7b3304b766c4f44c8037",
      "lines": {
        "33": "",
        "34": "    public ChartSeries() {}",
        "35": "",
        "36": "    public ChartSeries(String label) {",
        "23": "",
        "24": "public class ChartSeries implements Serializable {"
      },
      "id": 2686618,
      "filename": "ChartSeries.java"
    },
    {
      "repo": "https://github.com/ed2ryo/droidplanner.git",
      "language": "Java",
      "linescount": 48,
      "location": "/Android/src/org/droidplanner/android/widgets/graph",
      "name": "droidplanner",
      "url": "https://searchcode.com/codesearch/view/98479833/",
      "md5hash": "5d0a109ac3b65ab22e98cfec0342d964",
      "lines": {
        "12": "\tpublic ChartSeries(int bufferSize) {",
        "11": "",
        "4": "",
        "5": "public class ChartSeries {"
      },
      "id": 98479833,
      "filename": "ChartSeries.java"
    },
    {
      "repo": "https://bitbucket.org/nx/squashtest-tm",
      "language": "Java",
      "linescount": 134,
      "location": "/tm/tm.domain/src/main/java/org/squashtest/tm/domain/chart",
      "name": "squashtest-tm",
      "url": "https://searchcode.com/codesearch/view/122051497/",
      "md5hash": "93952590d911871246547274418792fd",
      "lines": {
        "53": " */",
        "54": "public class ChartSeries {"
      },
      "id": 122051497,
      "filename": "ChartSeries.java"
    },
    {
      "repo": "https://bitbucket.org/shihyuan/mason",
      "language": "Java",
      "linescount": 244,
      "location": "/src/sim/portrayal/inspector",
      "name": "mason",
      "url": "https://searchcode.com/codesearch/view/56877282/",
      "md5hash": "b2a839558a045d928572a7d9a8871eec",
      "lines": {
        "32": "    XYSeries chartSeries = null;",
        "128": "//      for(int i=items.numObjs-1;i>=0;i--)",
        "164": "        //(once here, once at next time through this fn), the second time is O(1).",
        "165": "        chartSeries.fireSeriesChanged();",
        "134": "        int currentTaboo = items.objs[0];",
        "129": "//              chartSeries.remove(items.objs[i]);",
        "168": "        {",
        "161": "            chartSeries.add((XYDataItem)tmpBag.objs[i], false);//no notifying just yet.",
        "170": "        for(int i=0;i<xValues.length;i++)",
        "135": "        Iterator iter = chartSeries.getItems().iterator();",
        "169": "        double[] xValues = new double[chartSeries.getItemCount()];",
        "160": "        for(int i=0;i<tmpBag.numObjs;i++)",
        "154": "            }",
        "155": "        //now we clear the chartSeries and then put back the saved objects only.",
        "156": "        chartSeries.clear();",
        "157": "        //In my test this did not cause the chart to flicker.",
        "31": "    {"
      },
      "id": 56877282,
      "filename": "TimeSeriesChartingPropertyInspector.java"
    },
    {
      "repo": "https://github.com/rjanicki/InvientCharts.git",
      "language": "Java",
      "linescount": 2714,
      "location": "/src/com/invient/vaadin/charts/widgetset/client/ui",
      "name": "InvientCharts",
      "url": "https://searchcode.com/codesearch/view/74932284/",
      "md5hash": "56eb9179ca2915820aca2be6fd99c8ad",
      "lines": {
        "642": "                        .isVisible() : true);",
        "643": "                chartSeriesOptions.setVisible(isVisible);",
        "644": "                if (chartSeriesOptions.isVisible() == true",
        "645": "                        && chartSeries.isVisible() == false) {",
        "646": "                    chartSeries.show();",
        "647": "                }",
        "648": "                if (chartSeriesOptions.isVisible() == false",
        "649": "                        && chartSeries.isVisible() == true) {",
        "650": "                    chartSeries.hide();",
        "651": "                }",
        "656": "                            + uidlSeriesToUpdate.getStringAttribute(\"name\"));",
        "657": "                    chartSeries.setDataAsPointOptions(",
        "662": "                    UIDL uidlPointsRemoved = uidlSeriesToUpdate.getChildUIDL(1);",
        "663": "                    updateSeriesData(chartSeries, uidlPointsAdded,",
        "156": "            resetRedrawChart();",
        "157": "            if (uidl.getBooleanAttribute(\"reloadChartSeries\")) {"
      },
      "id": 74932284,
      "filename": "VInvientCharts.java"
    },
    {
      "repo": "https://github.com/rjanicki/InvientCharts.git",
      "language": "Java",
      "linescount": 4057,
      "location": "/src/com/invient/vaadin/charts",
      "name": "InvientCharts",
      "url": "https://searchcode.com/codesearch/view/74932250/",
      "md5hash": "3be4622c1603d7d3110d7c375a98d850",
      "lines": {
        "160": "        // add series info received from the server.",
        "161": "        target.addAttribute(\"reloadChartSeries\", reloadChartSeries);",
        "162": "        target.startTag(\"chartDataUpdates\");",
        "163": "        if (!reloadChartSeries) {",
        "2213": "        if (series != null) {",
        "2214": "            reloadChartSeries = true;",
        "2215": "            this.chartSeries.clear();",
        "2312": "    public void removeSeries(Series seriesData) {",
        "2313": "        if (this.chartSeries.remove(seriesData)) {",
        "140": "        InvientChartsUtil.writeSeries(target, chartConfig",
        "141": "                .getGeneralChartConfig().getType(), this.chartSeries,",
        "2200": "    // *************************************************************************//",
        "2201": "    private LinkedHashSet<Series> chartSeries = new LinkedHashSet<Series>();",
        "2202": "    private boolean reloadChartSeries = false;",
        "2203": ""
      },
      "id": 74932250,
      "filename": "InvientCharts.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 1817,
      "location": "/src/main/java/com/extentech/formats/XLS/charts",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47125069/",
      "md5hash": "611c2a4d2e88ad17e376222d317186e9",
      "lines": {
        "587": "    public Series addSeries(String seriesRange, String categoryRange, String bubbleRange, String legendRange, String legendText, int nChart) {",
        "547": "    public String[] getSeries(int nChart) {",
        "548": "    \treturn chartseries.getSeries(nChart);",
        "406": "\t\treturn this.chartseries.getSeriesPtgs();",
        "588": "    \tSeries s= chartseries.addSeries(seriesRange, categoryRange, bubbleRange, legendRange, legendText, chartgroup.get(nChart), nChart);",
        "566": "    \treturn chartseries.getAllSeries(-1);",
        "556": "    public String[] getCategories(int nChart) {",
        "557": "    \treturn chartseries.getCategories(nChart);",
        "405": "\tpublic HashMap getSeriesPtgs() \t{",
        "214": "            }else if (br.getOpcode()==SERIESLIST) { // maps chart # to series #            \t",
        "215": "            \tchartseries.addSeriesMapping(nCharts-1, ((SeriesList) br).getSeriesMappings());// 1-based series #'s to \"assign\" to the overlay chart",
        "575": "    \treturn chartseries.getAllSeries(nChart);",
        "538": "\tsetMetricsDirty();",
        "539": "    \treturn chartseries.changeSeriesRange(originalrange, newrange);",
        "574": "    public Vector getAllSeries(int nChart) {",
        "565": "    public Vector getAllSeries() {"
      },
      "id": 47125069,
      "filename": "Chart.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 1817,
      "location": "/src/main/java/com/extentech/formats/XLS/charts",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976693/",
      "md5hash": "611c2a4d2e88ad17e376222d317186e9",
      "lines": {
        "587": "    public Series addSeries(String seriesRange, String categoryRange, String bubbleRange, String legendRange, String legendText, int nChart) {",
        "547": "    public String[] getSeries(int nChart) {",
        "548": "    \treturn chartseries.getSeries(nChart);",
        "406": "\t\treturn this.chartseries.getSeriesPtgs();",
        "588": "    \tSeries s= chartseries.addSeries(seriesRange, categoryRange, bubbleRange, legendRange, legendText, chartgroup.get(nChart), nChart);",
        "566": "    \treturn chartseries.getAllSeries(-1);",
        "556": "    public String[] getCategories(int nChart) {",
        "557": "    \treturn chartseries.getCategories(nChart);",
        "405": "\tpublic HashMap getSeriesPtgs() \t{",
        "214": "            }else if (br.getOpcode()==SERIESLIST) { // maps chart # to series #            \t",
        "215": "            \tchartseries.addSeriesMapping(nCharts-1, ((SeriesList) br).getSeriesMappings());// 1-based series #'s to \"assign\" to the overlay chart",
        "575": "    \treturn chartseries.getAllSeries(nChart);",
        "538": "\tsetMetricsDirty();",
        "539": "    \treturn chartseries.changeSeriesRange(originalrange, newrange);",
        "574": "    public Vector getAllSeries(int nChart) {",
        "565": "    public Vector getAllSeries() {"
      },
      "id": 50976693,
      "filename": "Chart.java"
    },
    {
      "repo": "https://bitbucket.org/romualdpogo/picod_pro_web",
      "language": "Java",
      "linescount": 170,
      "location": "/src/java/org/picod/statBeans",
      "name": "picod_pro_web",
      "url": "https://searchcode.com/codesearch/view/66841031/",
      "md5hash": "9109a50c38870f6a3f9ef09b589da79e",
      "lines": {
        "64": "        ChartSeries hommes = new ChartSeries(\"Hommes\");",
        "65": "        ChartSeries femmes = new ChartSeries(\"Femmes\");",
        "66": "        String req = \"SELECT COUNT(id_declaration) FROM declaration d WHERE YEAR(DATE) = \"+this.annee+\" and age = \";",
        "14": "import org.primefaces.model.chart.CartesianChartModel;",
        "63": "        diagrammeTranAge = new CartesianChartModel();",
        "47": "        String req = \"SELECT COUNT(id_declaration) FROM declaration d WHERE YEAR(DATE) = \"+this.annee+\" and (MONTH (date) = \";",
        "44": "        diagrammeHF = new CartesianChartModel();",
        "45": "        ChartSeries hommes = new ChartSeries(\"Hommes\");",
        "46": "        ChartSeries femmes = new ChartSeries(\"Femmes\");",
        "15": "import org.primefaces.model.chart.ChartSeries;"
      },
      "id": 66841031,
      "filename": "StatDeclarationsBean.java"
    },
    {
      "repo": "https://github.com/alorlea/primefaces-cookbook.git",
      "language": "Java",
      "linescount": 80,
      "location": "/src/main/java/org/primefaces/cookbook/controller/chapter9",
      "name": "primefaces-cookbook",
      "url": "https://searchcode.com/codesearch/view/72276212/",
      "md5hash": "06c9dad54047828b334eaac24dc23755",
      "lines": {
        "49": "    private void createModel() {",
        "50": "        ChartSeries sales = new ChartSeries();",
        "3": "import org.primefaces.model.chart.CartesianChartModel;",
        "4": "import org.primefaces.model.chart.ChartSeries;",
        "37": "",
        "38": "        ChartSeries expenses = new ChartSeries();",
        "56": "",
        "57": "        ChartSeries expenses = new ChartSeries();",
        "30": "    private void createModelWithNull() {",
        "31": "        ChartSeries sales = new ChartSeries();"
      },
      "id": 72276212,
      "filename": "LineChartController.java"
    },
    {
      "repo": "https://bitbucket.org/kbanczyk/tds-repo",
      "language": "Java",
      "linescount": 174,
      "location": "/mason/src/main/java/sim/portrayal/inspector",
      "name": "tds-repo",
      "url": "https://searchcode.com/codesearch/view/56698899/",
      "md5hash": "d88cf3b637d17fe4f894d181c48dea02",
      "lines": {
        "33": "    {",
        "34": "    XYSeries chartSeries = null;",
        "67": "            chartSeries = new XYSeries( properties.getName(index), false );",
        "66": "            {",
        "69": "            // add our series",
        "70": "            ((TimeSeriesChartGenerator)generator).addSeries(chartSeries, new SeriesChangeListener()",
        "129": "            case AGGREGATIONMETHOD_CURRENT:  // in this case the aggregateSeries is sort of worthless",
        "166": "                else chartSeries.add(sumX / n, y, false);",
        "140": "                    }",
        "141": "                chartSeries.add( maxX, y, false );",
        "151": "                    }",
        "152": "                chartSeries.add( minX, y, false );",
        "165": "                    System.err.println( \"No element????\" );",
        "130": "                chartSeries.add(time, d, false);"
      },
      "id": 56698899,
      "filename": "TimeSeriesChartingPropertyInspector.java"
    },
    {
      "repo": "https://github.com/keilw/TrakStok.git",
      "language": "Java",
      "linescount": 334,
      "location": "/TrakStok-Web/src/main/java/in/jugchennai/javamoney/trakstok/bean",
      "name": "TrakStok",
      "url": "https://searchcode.com/codesearch/view/76059115/",
      "md5hash": "d810fdc2f605b31c6232fe8960af0ea0",
      "lines": {
        "208": "        if(getAnotherCompanySymbol() != null && !getAnotherCompanySymbol().equals(\"\")){",
        "209": "            ChartSeries anotherScrip = new ChartSeries(getAnotherCompanySymbol()+\" in \"+targetCurrencyCode);",
        "180": "        }",
        "181": "        ChartSeries scrip = new ChartSeries(_symbol+\" in \"+targetCurrencyCode);",
        "38": "import org.primefaces.model.chart.CartesianChartModel;",
        "39": "import org.primefaces.model.chart.ChartSeries;",
        "202": "        }",
        "203": "        ChartSeries scrip = new ChartSeries(_symbol+\" in \"+ targetCurrencyCode);"
      },
      "id": 76059115,
      "filename": "CompanyBean.java"
    },
    {
      "repo": "https://bitbucket.org/kullervo16/perfserver",
      "language": "Java",
      "linescount": 109,
      "location": "/src/main/java/verelst/jef/perfserver/beans",
      "name": "perfserver",
      "url": "https://searchcode.com/codesearch/view/125455713/",
      "md5hash": "988156ee5d590d5d7fef0eaa3820fcfe",
      "lines": {
        "80": "            ChartSeries remainingSeries = new ChartSeries();  ",
        "68": "            // first list all available synchronisation points",
        "69": "            Map<String,ChartSeries> spToSeriesMap = new HashMap<String, ChartSeries>();",
        "72": "                    if(!spToSeriesMap.containsKey(sp.getName())) {                ",
        "73": "                        ChartSeries series = new ChartSeries();  ",
        "79": "            }",
        "14": "import org.primefaces.model.chart.CartesianChartModel;",
        "15": "import org.primefaces.model.chart.ChartSeries;"
      },
      "id": 125455713,
      "filename": "SynchPointChartBean.java"
    },
    {
      "repo": "https://bitbucket.org/dadams/ecfinalproject",
      "language": "Java",
      "linescount": 194,
      "location": "/mason/sim/portrayal/inspector",
      "name": "ecfinalproject",
      "url": "https://searchcode.com/codesearch/view/126675496/",
      "md5hash": "29be22442acc9268c865051ed9196c52",
      "lines": {
        "33": "    {",
        "34": "    XYSeries chartSeries = null;",
        "114": "        chartSeries.add(x, y, false);",
        "118": "            if (notify)     // do a notification anyway",
        "113": "        {",
        "119": "                chartSeries.fireSeriesChanged();",
        "74": "                        ",
        "75": "            chartSeries = new XYSeries( properties.getName(index), false );",
        "77": "            // add our series",
        "78": "            seriesAttributes = ((TimeSeriesChartGenerator)generator).addSeries(chartSeries, new SeriesChangeListener()"
      },
      "id": 126675496,
      "filename": "TimeSeriesChartingPropertyInspector.java"
    },
    {
      "repo": "https://bitbucket.org/chatcharin/lotcontrol.git",
      "language": "Java",
      "linescount": 673,
      "location": "/src/java/com/tct/dashboard/report",
      "name": "lotcontrol",
      "url": "https://searchcode.com/codesearch/view/66661034/",
      "md5hash": "2d7254e960048f727d20be72474d352d",
      "lines": {
        "48": "//    private ChartSeries lineseries;",
        "113": "        print(\"line id : \" + lineiid);",
        "114": "        ChartSeries boys = new ChartSeries();",
        "115": "        boys.setLabel(\"Test\");",
        "116": "//        ChartSeries lineseries = new ChartSeries();  ",
        "176": "//            LineChartSeries series1 = new LineChartSeries();  ",
        "26": "import org.primefaces.model.chart.CartesianChartModel;",
        "27": "import org.primefaces.model.chart.ChartSeries;",
        "175": "            print(\"Test10\");",
        "47": "    private List<NgPoint> ngPoints;"
      },
      "id": 66661034,
      "filename": "DefectTotalReportControl.java"
    },
    {
      "repo": "https://bitbucket.org/nx/squashtest-tm",
      "language": "Java",
      "linescount": 431,
      "location": "/tm/tm.service/src/main/java/org/squashtest/tm/service/internal/chart/engine",
      "name": "squashtest-tm",
      "url": "https://searchcode.com/codesearch/view/122050893/",
      "md5hash": "745111c75c66b17d9019dc4f3b1b47e9",
      "lines": {
        "385": "\t\t// now build the serie",
        "354": "",
        "355": "\tprivate ChartSeries makeSeries(DetailedChartQuery definition, List<Tuple> tuples){",
        "37": "import org.squashtest.tm.domain.chart.ChartDefinition;",
        "38": "import org.squashtest.tm.domain.chart.ChartSeries;",
        "391": "\t\t\tchartSeries.addSerie(measure.getLabel(), series[m]);",
        "393": "",
        "394": "\t\treturn chartSeries;",
        "396": "",
        "386": "\t\tChartSeries chartSeries = new ChartSeries();",
        "397": "\tprivate void postProcessAbsciss(List<Object[]> abscissa, ChartSeries chartSeries, DetailedChartQuery definition) {",
        "401": "\t\t}",
        "402": "\t\tchartSeries.setAbscissa(abscissa);",
        "387": "\t\tpostProcessAbsciss(abscissa, chartSeries,definition);",
        "390": "\t\t\tMeasureColumn measure = definition.getMeasures().get(m);"
      },
      "id": 122050893,
      "filename": "ChartDataFinder.java"
    },
    {
      "repo": "https://bitbucket.org/kullervo16/perfserver",
      "language": "Java",
      "linescount": 105,
      "location": "/src/main/java/verelst/jef/perfserver/beans",
      "name": "perfserver",
      "url": "https://searchcode.com/codesearch/view/125455714/",
      "md5hash": "83be7c058237b0fbf8e2119186b19b60",
      "lines": {
        "69": "  ",
        "70": "        ChartSeries avg = new ChartSeries();  ",
        "72": "                  ",
        "73": "        ChartSeries currentValue = new ChartSeries();  ",
        "13": "import org.primefaces.model.chart.CartesianChartModel;",
        "14": "import org.primefaces.model.chart.ChartSeries;"
      },
      "id": 125455714,
      "filename": "ValueAvgChartBean.java"
    },
    {
      "repo": "https://bitbucket.org/kullervo16/sqldashboard",
      "language": "Java",
      "linescount": 132,
      "location": "/src/main/java/sqldashboard/presentation/jsfbeans",
      "name": "sqldashboard",
      "url": "https://searchcode.com/codesearch/view/134314010/",
      "md5hash": "6219c3f42c8755b20109ca84cba6e362",
      "lines": {
        "80": "                ChartSeries series = new ChartSeries();  ",
        "86": "                for(String seriesName : bc.getModelNames()) {",
        "87": "                    ChartSeries series = new ChartSeries();  ",
        "15": "import org.primefaces.model.chart.ChartSeries;",
        "14": "import org.primefaces.model.chart.CartesianChartModel;",
        "79": "                // prevent an empty barchart... "
      },
      "id": 134314010,
      "filename": "BarChartBean.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 52,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 26,
      "source": "Github",
      "id": 2
    },
    {
      "count": 9,
      "source": "Google Code",
      "id": 1
    }
  ]
}