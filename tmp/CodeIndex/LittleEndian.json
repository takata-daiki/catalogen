{
  "matchterm": "LittleEndian",
  "previouspage": null,
  "searchterm": "LittleEndian",
  "query": "LittleEndian",
  "language_filters": [
    {
      "count": 850,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 850,
  "results": [
    {
      "repo": "https://bitbucket.org/kocakosm/pitaya",
      "language": "Java",
      "linescount": 188,
      "location": "/src/org/pitaya/util",
      "name": "pitaya",
      "url": "https://searchcode.com/codesearch/view/62934317/",
      "md5hash": "991e7a73794c345acbd9413624be5631",
      "lines": {
        "24": "public final class LittleEndian",
        "183": "\tprivate LittleEndian()",
        "182": "",
        "23": " */"
      },
      "id": 62934317,
      "filename": "LittleEndian.java"
    },
    {
      "repo": "https://github.com/minstrelsy/SimpleAndroidDocView.git",
      "language": "Java",
      "linescount": 827,
      "location": "/src/org/apache/poi/util",
      "name": "SimpleAndroidDocView",
      "url": "https://searchcode.com/codesearch/view/97383600/",
      "md5hash": "ccca8c6c07e92ec2aa5d2a34a5a233d7",
      "lines": {
        "32": " */",
        "33": "public class LittleEndian implements LittleEndianConsts",
        "821": "",
        "822": "    private LittleEndian()"
      },
      "id": 97383600,
      "filename": "LittleEndian.java"
    },
    {
      "repo": "https://bitbucket.org/kocakosm/pitaya",
      "language": "Java",
      "linescount": 188,
      "location": "/src/org/kocakosm/pitaya/util",
      "name": "pitaya",
      "url": "https://searchcode.com/codesearch/view/102252052/",
      "md5hash": "e81f83a4224d30f939aae29dc55a717f",
      "lines": {
        "24": "public final class LittleEndian",
        "183": "\tprivate LittleEndian()",
        "182": "",
        "23": " */"
      },
      "id": 102252052,
      "filename": "LittleEndian.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 612,
      "location": "/components/forks/poi/src/loci/poi/util",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642667/",
      "md5hash": "ae94bc3d6a3999373ac2ab47fceefd46",
      "lines": {
        "500": "    /**",
        "501": "     *  Gets the number attribute of the LittleEndian class",
        "54": "",
        "55": "public class LittleEndian",
        "56": "         implements LittleEndianConsts {",
        "57": "",
        "60": "    /**",
        "61": "     *  Constructor for the LittleEndian object",
        "62": "     */",
        "63": "    private LittleEndian() { }"
      },
      "id": 15642667,
      "filename": "LittleEndian.java"
    },
    {
      "repo": "https://code.google.com/p/fat32-lib/",
      "language": "Java",
      "linescount": 103,
      "location": "/src/main/java/de/waldheinz/fs/fat",
      "name": "fat32-lib",
      "url": "https://searchcode.com/codesearch/view/13679685/",
      "md5hash": "9490e3db06e47fc37ae0350cc7e1d73b",
      "lines": {
        "27": " */",
        "28": "final class LittleEndian {",
        "29": "",
        "30": "    private LittleEndian() { /* no instances */ }"
      },
      "id": 13679685,
      "filename": "LittleEndian.java"
    },
    {
      "repo": "git://github.com/stephenc/java-iso-tools.git",
      "language": "Java",
      "linescount": 61,
      "location": "/loop-fs-spi/src/main/java/com/github/stephenc/javaisotools/loopfs/util",
      "name": "java-iso-tools",
      "url": "https://searchcode.com/codesearch/view/16652589/",
      "md5hash": "99bd8689cabd997d32da82068392ae88",
      "lines": {
        "24": " */",
        "25": "public class LittleEndian {"
      },
      "id": 16652589,
      "filename": "LittleEndian.java"
    },
    {
      "repo": "git://github.com/joval/jOVAL.git",
      "language": "Java",
      "linescount": 284,
      "location": "/src/org/joval/io",
      "name": "jOVAL",
      "url": "https://searchcode.com/codesearch/view/17487259/",
      "md5hash": "02dbab9e09325f824836f84a24234682",
      "lines": {
        "22": " */",
        "23": "public class LittleEndian {"
      },
      "id": 17487259,
      "filename": "LittleEndian.java"
    },
    {
      "repo": "https://github.com/zhangshixi/m-toolkit.git",
      "language": "Java",
      "linescount": 173,
      "location": "/src/main/java/com/mtoolkit/dbf",
      "name": "m-toolkit",
      "url": "https://searchcode.com/codesearch/view/71408595/",
      "md5hash": "7c7f4af0ea3a58ac19072e77f0a09e73",
      "lines": {
        "64": "        day = dataInput.readByte();       /* 3 */",
        "65": "        numberOfRecords = DbfUtils.readLittleEndianInt(dataInput); /* 4-7 */",
        "66": "",
        "67": "        headerLength = DbfUtils.readLittleEndianShort(dataInput); /* 8-9 */",
        "68": "        recordLength = DbfUtils.readLittleEndianShort(dataInput); /* 10-11 */",
        "69": "",
        "70": "        reserv1 = DbfUtils.readLittleEndianShort(dataInput);      /* 12-13 */",
        "72": "        encryptionFlag = dataInput.readByte();                  /* 15 */",
        "73": "        freeRecordThread = DbfUtils.readLittleEndianInt(dataInput); /* 16-19 */",
        "77": "        languageDriver = dataInput.readByte();                    /* 29 */",
        "78": "        reserv4 = DbfUtils.readLittleEndianShort(dataInput);        /* 30-31 */",
        "112": "        //System.out.println( \"Number of records in O/S: \" + numberOfRecords);",
        "113": "        numberOfRecords = DbfUtils.littleEndian(numberOfRecords);",
        "131": "        dataOutput.writeShort(DbfUtils.littleEndian(reserv4)); /* 30-31 */",
        "130": "        dataOutput.writeByte(languageDriver); /* 29 */"
      },
      "id": 71408595,
      "filename": "DbfHeader.java"
    },
    {
      "repo": "https://github.com/JimmyET/fanfouapp-opensource.git",
      "language": "Java",
      "linescount": 140,
      "location": "/main/app/src/com/fanfou/app/opensource/ui/widget",
      "name": "fanfouapp-opensource",
      "url": "https://searchcode.com/codesearch/view/70980026/",
      "md5hash": "5c2bd6908818565e3892a76064c56dd0",
      "lines": {
        "96": "                // Get the tag and check if it is orientation.",
        "97": "                tag = Exif.pack(jpeg, offset, 2, littleEndian);",
        "100": "                    final int orientation = Exif.pack(jpeg, offset + 8, 2,",
        "101": "                            littleEndian);",
        "126": "        int step = 1;",
        "125": "            final boolean littleEndian) {",
        "81": "            }",
        "82": "            final boolean littleEndian = (tag == 0x49492A00);",
        "84": "            // Get the offset and check if it is reasonable.",
        "85": "            int count = Exif.pack(jpeg, offset + 4, 4, littleEndian) + 2;",
        "124": "    private static int pack(final byte[] bytes, int offset, int length,",
        "93": "            // Get the count and go through all the elements.",
        "94": "            count = Exif.pack(jpeg, offset - 2, 2, littleEndian);",
        "127": "        if (littleEndian) {"
      },
      "id": 70980026,
      "filename": "Exif.java"
    },
    {
      "repo": "https://github.com/msteptoe/FURI_Code.git",
      "language": "Java",
      "linescount": 626,
      "location": "/IJ_Mobile/src/loci/formats",
      "name": "FURI_Code",
      "url": "https://searchcode.com/codesearch/view/71578974/",
      "md5hash": "9be44c99daf250d4127c78c01242dc45",
      "lines": {
        "193": "    final int samplesPerPixel = coreMeta.sizeC / effSizeC;",
        "194": "    populateMetadata(store, null, series, imageName, coreMeta.littleEndian,",
        "227": "  public static void populateMetadata(MetadataStore store, String file,",
        "228": "    int series, String imageName, boolean littleEndian, String dimensionOrder,",
        "257": "    store.setPixelsID(createLSID(\"Pixels\", series), series);",
        "136": "      populateMetadata(store, r.getCurrentFile(), i, imageName,",
        "137": "        r.isLittleEndian(), r.getDimensionOrder(), pixelType, r.getSizeX(),",
        "234": "    if (imageName != null) store.setImageName(imageName, series);",
        "235": "    populatePixelsOnly(store, series, littleEndian, dimensionOrder, pixelType,",
        "258": "    store.setPixelsBinDataBigEndian(!littleEndian, series, 0);",
        "208": "  public static void populateMetadata(MetadataStore store, int series,",
        "209": "    String imageName, boolean littleEndian, String dimensionOrder,",
        "212": "  {",
        "213": "    populateMetadata(store, null, series, imageName, littleEndian,",
        "246": "      populatePixelsOnly(store, i, r.isLittleEndian(), r.getDimensionOrder(),",
        "245": ""
      },
      "id": 71578974,
      "filename": "MetadataTools.java"
    },
    {
      "repo": "https://github.com/dekod32/maclawstudios_camera.git",
      "language": "Java",
      "linescount": 135,
      "location": "/src/com/galaxyics/camera",
      "name": "maclawstudios_camera",
      "url": "https://searchcode.com/codesearch/view/75177554/",
      "md5hash": "6e17e2f82f9e106ab0cc0f3e2bfa94f4",
      "lines": {
        "97": "\t\t\t\t\t// We do not really care about type and count, do we?",
        "98": "\t\t\t\t\tint orientation = pack(jpeg, offset + 8, 2, littleEndian);",
        "123": "\t\tif (littleEndian) {",
        "79": "\t\t\t}",
        "80": "\t\t\tboolean littleEndian = (tag == 0x49492A00);",
        "82": "\t\t\t// Get the offset and check if it is reasonable.",
        "83": "\t\t\tint count = pack(jpeg, offset + 4, 4, littleEndian) + 2;",
        "120": "",
        "121": "\tprivate static int pack(byte[] bytes, int offset, int length, boolean littleEndian) {",
        "122": "\t\tint step = 1;",
        "91": "\t\t\t// Get the count and go through all the elements.",
        "92": "\t\t\tcount = pack(jpeg, offset - 2, 2, littleEndian);",
        "94": "\t\t\t\t// Get the tag and check if it is orientation.",
        "95": "\t\t\t\ttag = pack(jpeg, offset, 2, littleEndian);"
      },
      "id": 75177554,
      "filename": "Exif.java"
    },
    {
      "repo": "https://github.com/msteptoe/FURI_Code.git",
      "language": "Java",
      "linescount": 330,
      "location": "/IJ_Mobile/src/loci/formats/out",
      "name": "FURI_Code",
      "url": "https://searchcode.com/codesearch/view/71579592/",
      "md5hash": "adaaaa9d8b42adaeff0b2d21107bcbd3",
      "lines": {
        "130": "        //getColorModel() != null && (getColorModel() instanceof IndexColorModel);",
        "131": "      littleEndian = !r.getPixelsBinDataBigEndian(series, 0);",
        "70": "  private int nextSequenceNumber;",
        "71": "  private boolean littleEndian;",
        "269": "      if (interleaved) {",
        "270": "        if (littleEndian) {",
        "273": "            int pixel = DataTools.bytesToInt(stream, offset,",
        "274": "              bytesPerPixel, littleEndian);",
        "180": "    nextSequenceNumber = 0;",
        "181": "    littleEndian = false;",
        "286": "            int pixel = DataTools.bytesToInt(stream, offset, bytesPerPixel,",
        "287": "              littleEndian);"
      },
      "id": 71579592,
      "filename": "APNGWriter.java"
    },
    {
      "repo": "https://bitbucket.org/steshaw/quake2-gwt-port",
      "language": "Java",
      "linescount": 175,
      "location": "/src/com/google/gwt/typedarrays/client",
      "name": "quake2-gwt-port",
      "url": "https://searchcode.com/codesearch/view/63141464/",
      "md5hash": "09ad881b6c5b923f9d5a2bf87aa9fd82",
      "lines": {
        "39": "   */",
        "40": "  public final native double getDouble(int byteOffset, boolean littleEndian) /*-{",
        "41": "    return this.getDouble(byteOffset, littleEndian);",
        "42": "  }-*/;",
        "46": "   */",
        "47": "  public final native float getFloat(int byteOffset, boolean littleEndian) /*-{",
        "48": "    return this.getFloat(byteOffset, littleEndian);",
        "49": "  }-*/;",
        "53": "   */",
        "54": "  public final native short getInt16(int byteOffset, boolean littleEndian) /*-{",
        "55": "    return this.getInt16(byteOffset, littleEndian);",
        "56": "  }-*/;",
        "60": "   */",
        "61": "  public final native int getInt32(int byteOffset, boolean littleEndian) /*-{",
        "62": "    return this.getInt32(byteOffset, littleEndian);"
      },
      "id": 63141464,
      "filename": "DataView.java"
    },
    {
      "repo": "https://android.googlesource.com/platform/tools/external/fat32lib",
      "language": "Java",
      "linescount": 432,
      "location": "/src/main/java/de/waldheinz/fs/fat",
      "name": "fat32lib",
      "url": "https://searchcode.com/codesearch/view/68784480/",
      "md5hash": "a45f2ff8b860f5a457e80f207a435f05",
      "lines": {
        "256": "                LittleEndian.getUInt16(data, 0x18),",
        "257": "                LittleEndian.getUInt16(data, 0x16));",
        "258": "    }",
        "260": "    public void setLastModified(long lastModified) {",
        "261": "        LittleEndian.setInt16(data, 0x16,",
        "262": "                DosUtils.encodeTime(lastModified));",
        "263": "        LittleEndian.setInt16(data, 0x18,",
        "297": "    public long getLength() {",
        "298": "        return LittleEndian.getUInt32(data, OFFSET_FILE_SIZE);",
        "288": "    public boolean isDeleted() {",
        "289": "        return  (LittleEndian.getUInt8(data, 0) == ENTRY_DELETED_MAGIC);",
        "270": "        return DosUtils.decodeDateTime(",
        "271": "                LittleEndian.getUInt16(data, 0x12),",
        "275": "    public void setLastAccessed(long lastAccessed) {",
        "276": "        LittleEndian.setInt16(data, 0x12,",
        "255": "        return DosUtils.decodeDateTime("
      },
      "id": 68784480,
      "filename": "FatDirectoryEntry.java"
    },
    {
      "repo": "https://github.com/ncweiler/VIB.git",
      "language": "Java",
      "linescount": 719,
      "location": "/util",
      "name": "VIB",
      "url": "https://searchcode.com/codesearch/view/107075258/",
      "md5hash": "61bdb20338b34722f540e4a8be9b91b0",
      "lines": {
        "640": "",
        "641": "\tprivate static boolean findTag(long tagToLookFor, RandomAccessFile in, boolean littleEndian) throws IOException {",
        "674": "\t\t\t\tif (tag == tagToLookFor) {",
        "643": "\t\tint byteOrder = in.readShort();",
        "644": "\t\tint magicNumber = getShort(in, littleEndian); // 42",
        "645": "\t\tint offset = getInt(in, littleEndian);",
        "646": "\t\tif (magicNumber != 42) {",
        "673": "\t\t\t\tvalue = getValue(in, littleEndian, fieldType, count);",
        "678": "\t\t\toffset = getInt(in, littleEndian);",
        "677": "\t\t\t}",
        "664": "\t\t\tint value;",
        "665": "\t\t\tint nEntries = getShort(in, littleEndian);",
        "672": "\t\t\t\tcount = getInt(in, littleEndian);",
        "669": "\t\t\tfor (int i = 0; i < nEntries; i++) {",
        "670": "\t\t\t\ttag = getShort(in, littleEndian);",
        "671": "\t\t\t\tfieldType = getShort(in, littleEndian);"
      },
      "id": 107075258,
      "filename": "BatchOpener.java"
    },
    {
      "repo": "https://github.com/rasmuserik/lightscript-old.git",
      "language": "Java",
      "linescount": 284,
      "location": "/.attic2/external/languages/kahlua/se/krka/kahlua/vm",
      "name": "lightscript-old",
      "url": "https://searchcode.com/codesearch/view/65513426/",
      "md5hash": "99b81d85493138c7259f7ba5925ab2bb",
      "lines": {
        "128": "\t\ttmp = toInt(in.readInt(), littleEndian);",
        "129": "\t\tfor (int i = 0; i < tmp; i++) {",
        "66": "",
        "67": "\t\tint codeLen = toInt(in.readInt(), littleEndian);",
        "69": "\t\tfor (int i = 0; i < codeLen; i++) {",
        "70": "\t\t\tint op = toInt(in.readInt(), littleEndian);",
        "73": "",
        "74": "\t\tint constantsLen = toInt(in.readInt(), littleEndian);",
        "130": "\t\t\treadLuaString(in, size_t, littleEndian);",
        "47": "    ",
        "48": "\tpublic LuaPrototype(DataInputStream in, boolean littleEndian, String parentName, int size_t) throws IOException {",
        "50": "",
        "51": "\t\tname = readLuaString(in, size_t, littleEndian);",
        "88": "\t\t\t\tlong bits = in.readLong();",
        "89": "\t\t\t\tif (littleEndian) bits = rev(bits);",
        "127": "\t\t// read upvalues"
      },
      "id": 65513426,
      "filename": "LuaPrototype.java"
    },
    {
      "repo": "https://github.com/isdom/POI-Android.git",
      "language": "Java",
      "linescount": 3314,
      "location": "/ppt/scratchpad/src/org/apache/poi/hwpf/model/types",
      "name": "POI-Android",
      "url": "https://searchcode.com/codesearch/view/88635700/",
      "md5hash": "ca2600bdb7ee4b557efc7c5a14fa17cd",
      "lines": {
        "193": "        field_2_unused2                = data[ 0x1 + offset ];",
        "194": "        field_3_footnoteInfo           = LittleEndian.getShort(data, 0x2 + offset);",
        "198": "        field_7_docinfo2               = data[ 0x7 + offset ];",
        "199": "        field_8_docinfo3               = LittleEndian.getShort(data, 0x8 + offset);",
        "200": "        field_9_dxaTab                 = LittleEndian.getShort(data, 0xa + offset);",
        "201": "        field_10_wSpare                = LittleEndian.getShort(data, 0xc + offset);",
        "202": "        field_11_dxaHotz               = LittleEndian.getShort(data, 0xe + offset);",
        "203": "        field_12_cConsexHypLim         = LittleEndian.getShort(data, 0x10 + offset);",
        "204": "        field_13_wSpare2               = LittleEndian.getShort(data, 0x12 + offset);",
        "205": "        field_14_dttmCreated           = LittleEndian.getInt(data, 0x14 + offset);",
        "206": "        field_15_dttmRevised           = LittleEndian.getInt(data, 0x18 + offset);",
        "207": "        field_16_dttmLastPrint         = LittleEndian.getInt(data, 0x1c + offset);",
        "208": "        field_17_nRevision             = LittleEndian.getShort(data, 0x20 + offset);",
        "209": "        field_18_tmEdited              = LittleEndian.getInt(data, 0x22 + offset);",
        "210": "        field_19_cWords                = LittleEndian.getInt(data, 0x26 + offset);"
      },
      "id": 88635700,
      "filename": "DOPAbstractType.java"
    },
    {
      "repo": "git://github.com/apache/hbase.git",
      "language": "Java",
      "linescount": 475,
      "location": "/hbase-common/src/main/java/org/apache/hadoop/hbase/util",
      "name": "hbase",
      "url": "https://searchcode.com/codesearch/view/116069434/",
      "md5hash": "5e8071ca079ffce309e67d0eefe91eea",
      "lines": {
        "128": "    if (littleEndian) {",
        "258": "  public static long toLong(ByteBuffer buf, int offset) {",
        "259": "    if (littleEndian) {",
        "300": "    if (littleEndian) {",
        "299": "  public static int putInt(ByteBuffer buf, int offset, int val) {",
        "44": "",
        "45": "  static final boolean littleEndian = ByteOrder.nativeOrder()",
        "142": "  public static int putInt(byte[] bytes, int offset, int val) {",
        "143": "    if (littleEndian) {",
        "272": "  public static long toLong(Object ref, long offset) {",
        "273": "    if (littleEndian) {",
        "404": "  public static int putShort(ByteBuffer buf, int offset, short val) {",
        "405": "    if (littleEndian) {",
        "157": "  public static int putLong(byte[] bytes, int offset, long val) {",
        "158": "    if (littleEndian) {",
        "127": "  public static int putShort(byte[] bytes, int offset, short val) {"
      },
      "id": 116069434,
      "filename": "UnsafeAccess.java"
    },
    {
      "repo": "https://android.googlesource.com/platform/tools/external/fat32lib",
      "language": "Java",
      "linescount": 379,
      "location": "/src/main/java/de/waldheinz/fs/fat",
      "name": "fat32lib",
      "url": "https://searchcode.com/codesearch/view/68784346/",
      "md5hash": "c7999892a72372e17fbd61fef61f7d6b",
      "lines": {
        "320": "            LittleEndian.setInt8(rawData, 0, ordinal + (1 << 6));",
        "321": "        } else {",
        "322": "            LittleEndian.setInt8(rawData, 0, ordinal);",
        "324": "        ",
        "325": "        LittleEndian.setInt16(rawData, 1, unicodechar[0]);",
        "326": "        LittleEndian.setInt16(rawData, 3, unicodechar[1]);",
        "327": "        LittleEndian.setInt16(rawData, 5, unicodechar[2]);",
        "328": "        LittleEndian.setInt16(rawData, 7, unicodechar[3]);",
        "329": "        LittleEndian.setInt16(rawData, 9, unicodechar[4]);",
        "330": "        LittleEndian.setInt8(rawData, 11, 0x0f); // this is the hidden",
        "331": "                                                    // attribute tag for",
        "332": "        // lfn",
        "333": "        LittleEndian.setInt8(rawData, 12, 0); // reserved",
        "334": "        LittleEndian.setInt8(rawData, 13, checkSum); // checksum",
        "319": "        if (isLast) {"
      },
      "id": 68784346,
      "filename": "FatLfnDirectoryEntry.java"
    },
    {
      "repo": "git://github.com/joval/jOVAL.git",
      "language": "Java",
      "linescount": 336,
      "location": "/src/org/joval/scap/oval/adapter/windows",
      "name": "jOVAL",
      "url": "https://searchcode.com/codesearch/view/58086484/",
      "md5hash": "18a53545d675548d3e4958921861b853",
      "lines": {
        "292": "\t\tfor (int i=0; i < data.length; i++) {",
        "293": "\t\t    sb.append(LittleEndian.toHexString(data[i]));",
        "220": "\tprivate Entry readEntry(byte[] buff, int offset) throws Exception {",
        "142": "\t    for (int i=0; i < data.length; i++) {",
        "143": "\t\tsb.append(LittleEndian.toHexString(data[i]));",
        "221": "\t    short len\t\t= LittleEndian.getUShort(buff, offset);",
        "19": "import jsaf.intf.windows.system.IWindowsSession;",
        "20": "import jsaf.io.LittleEndian;",
        "222": "\t    short nameLen\t= LittleEndian.getUShort(buff, offset + 0x02);",
        "184": "\t\t//",
        "185": "\t\tint len\t\t= LittleEndian.getUInt(buff, 0x00);",
        "186": "\t\tint valueLen\t= LittleEndian.getUInt(buff, 0x04);",
        "187": "\t\tint endSize\t= LittleEndian.getUInt(buff, 0x08);",
        "188": "\t\tint junk\t= LittleEndian.getUInt(buff, 0x0C);",
        "189": "\t\tint version\t= LittleEndian.getUInt(buff, 0x10);",
        "190": ""
      },
      "id": 58086484,
      "filename": "LicenseAdapter.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 593,
      "source": "Github",
      "id": 2
    },
    {
      "count": 164,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 68,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 20,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 3,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 2,
      "source": "GitLab",
      "id": 13
    }
  ]
}