{
  "matchterm": "JPEG",
  "previouspage": null,
  "searchterm": "JPEG",
  "query": "JPEG",
  "language_filters": [
    {
      "count": 9313,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 9312,
  "results": [
    {
      "repo": "https://bitbucket.org/keithb/tdd",
      "language": "Java",
      "linescount": 351,
      "location": "/targets/itext/1.4.8/com/lowagie/text",
      "name": "tdd",
      "url": "https://searchcode.com/codesearch/view/120313652/",
      "md5hash": "0add6f494be914b1b855452e39f682ba",
      "lines": {
        "128": "    public Jpeg(URL url, float width, float height) throws BadElementException, IOException {",
        "1": "/*",
        "2": " * $Id: Jpeg.java,v 1.60 2006/09/14 23:10:40 xlv Exp $",
        "134": "    /**",
        "65": "",
        "75": "    ",
        "76": "    /** Acceptable Jpeg markers. */",
        "66": "public class Jpeg extends Image implements Element {",
        "81": "    ",
        "82": "    /** Unsupported Jpeg markers. */",
        "87": "    ",
        "88": "    /** Jpeg markers without additional parameters. */",
        "58": "/**",
        "59": " * An <CODE>Jpeg</CODE> is the representation of a graphic element (JPEG)",
        "135": "     * Constructs a <CODE>Jpeg</CODE>-object, using a <VAR>filename</VAR>.",
        "127": "    "
      },
      "id": 120313652,
      "filename": "Jpeg.java"
    },
    {
      "repo": "http://fb2pdf.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 428,
      "location": "/src/java/src/com/itextpdf/text",
      "name": "fb2pdf",
      "url": "https://searchcode.com/codesearch/view/2126696/",
      "md5hash": "630b248dab90734d01ffd5c864711ca1",
      "lines": {
        "128": "    public Jpeg(byte[] img) throws BadElementException, IOException {",
        "1": "/*",
        "2": " * $Id: Jpeg.java 5357 2012-08-23 14:28:59Z rafhens $",
        "70": "    ",
        "71": "    /** Acceptable Jpeg markers. */",
        "136": "     * Constructs a <CODE>Jpeg</CODE>-object from memory.",
        "135": "    /**",
        "192": "     * This method checks if the image is a valid JPEG and processes some parameters.",
        "144": "    ",
        "145": "    public Jpeg(byte[] img, float width, float height) throws BadElementException, IOException {",
        "53": "/**",
        "54": " * An <CODE>Jpeg</CODE> is the representation of a graphic element (JPEG)",
        "191": "    /**",
        "60": "",
        "61": "public class Jpeg extends Image {",
        "127": "    "
      },
      "id": 2126696,
      "filename": "Jpeg.java"
    },
    {
      "repo": "https://github.com/longkerdandy/chii2.git",
      "language": "Java",
      "linescount": 44,
      "location": "/transcoder.core/src/main/java/org/chii2/transcoder/core/dlna/catalog",
      "name": "chii2",
      "url": "https://searchcode.com/codesearch/view/112621010/",
      "md5hash": "69c9f227c26f716f77b84990bcb09a3b",
      "lines": {
        "7": "/**",
        "8": " * JPEG",
        "9": " */",
        "10": "public class JPEG extends ImageCatalog {",
        "11": "    public JPEG() {",
        "12": "        // JPEG_SM_ICO",
        "13": "        profileMap.put(DLNAProfiles.JPEG_SM_ICO, new ImageRestriction[]{",
        "14": "                new TypeRestriction(ImageType.JPEG),",
        "15": "                new SizeRestriction(48, 48)",
        "16": "        });",
        "17": "        // JPEG_LRG_ICO",
        "18": "        profileMap.put(DLNAProfiles.JPEG_LRG_ICO, new ImageRestriction[]{",
        "19": "                new TypeRestriction(ImageType.JPEG),",
        "20": "                new SizeRestriction(120, 120)",
        "21": "        });",
        "22": "        // JPEG_TN",
        "23": "        profileMap.put(DLNAProfiles.JPEG_TN, new ImageRestriction[]{"
      },
      "id": 112621010,
      "filename": "JPEG.java"
    },
    {
      "repo": "git://github.com/GregBowyer/ManagedRuntimeInitiative.git",
      "language": "Java",
      "linescount": 359,
      "location": "/MRI-J/jdk/src/share/classes/com/sun/imageio/plugins/jpeg",
      "name": "ManagedRuntimeInitiative",
      "url": "https://searchcode.com/codesearch/view/17108772/",
      "md5hash": "a2048a811754a7e01d280c775b6bc931",
      "lines": {
        "32": "",
        "39": "/**",
        "40": " * A class containing JPEG-related constants, definitions, and",
        "41": " * static methods.  This class and its constants must be public so that",
        "42": " * <code>JPEGImageWriteParam</code> can see it.",
        "43": " */",
        "44": "public class JPEG {",
        "45": "",
        "46": "    // List of all the JPEG markers (pre-JPEG2000)",
        "175": "    public static final String [] names = {\"JPEG\", \"jpeg\", \"JPG\", \"jpg\"};",
        "176": "    public static final String [] suffixes = {\"jpg\", \"jpeg\"};",
        "174": "    // Names of the formats we can read or write",
        "25": "",
        "26": "package com.sun.imageio.plugins.jpeg;",
        "29": "import javax.imageio.ImageTypeSpecifier;",
        "30": "import javax.imageio.plugins.jpeg.JPEGQTable;",
        "31": "import javax.imageio.plugins.jpeg.JPEGHuffmanTable;"
      },
      "id": 17108772,
      "filename": "JPEG.java"
    },
    {
      "repo": "https://bitbucket.org/ivertex/itext-fork",
      "language": "Java",
      "linescount": 346,
      "location": "/src/core/com/itextpdf/text",
      "name": "itext-fork",
      "url": "https://searchcode.com/codesearch/view/57657024/",
      "md5hash": "9cb23f5845500ceedbb0538cd854a19b",
      "lines": {
        "1": "/*",
        "2": " * $Id: Jpeg.java 4147 2009-12-06 21:26:09Z psoares33 $",
        "139": "    public Jpeg(byte[] img, float width, float height) throws BadElementException, IOException {",
        "69": "    ",
        "70": "    /** Acceptable Jpeg markers. */",
        "129": "    /**",
        "138": "    ",
        "75": "    ",
        "76": "    /** Unsupported Jpeg markers. */",
        "130": "     * Constructs a <CODE>Jpeg</CODE>-object from memory.",
        "52": "/**",
        "53": " * An <CODE>Jpeg</CODE> is the representation of a graphic element (JPEG)",
        "185": "    /**",
        "186": "     * This method checks if the image is a valid JPEG and processes some parameters.",
        "59": "",
        "60": "public class Jpeg extends Image {"
      },
      "id": 57657024,
      "filename": "Jpeg.java"
    },
    {
      "repo": "https://github.com/faquino/iText-4.2.0.git",
      "language": "Java",
      "linescount": 352,
      "location": "/src/core/com/lowagie/text",
      "name": "iText-4.2.0",
      "url": "https://searchcode.com/codesearch/view/70295531/",
      "md5hash": "fc2ce37e8bd0ce1a31d16e12d9cdc6c0",
      "lines": {
        "128": "    public Jpeg(byte[] img) throws BadElementException, IOException {",
        "1": "/*",
        "2": " * $Id: Jpeg.java 4074 2009-10-05 17:17:26Z psoares33 $",
        "65": "",
        "136": "     * Constructs a <CODE>Jpeg</CODE>-object from memory.",
        "75": "    ",
        "76": "    /** Acceptable Jpeg markers. */",
        "66": "public class Jpeg extends Image {",
        "144": "    ",
        "145": "    public Jpeg(byte[] img, float width, float height) throws BadElementException, IOException {",
        "191": "    /**",
        "58": "/**",
        "59": " * An <CODE>Jpeg</CODE> is the representation of a graphic element (JPEG)",
        "135": "    /**",
        "192": "     * This method checks if the image is a valid JPEG and processes some parameters.",
        "127": "    "
      },
      "id": 70295531,
      "filename": "Jpeg.java"
    },
    {
      "repo": "https://github.com/bioclipse/bioclipse.joelib.git",
      "language": "Java",
      "linescount": 89,
      "location": "/externals/net.sourceforge.joelib/src/joelib2/io/types",
      "name": "bioclipse.joelib",
      "url": "https://searchcode.com/codesearch/view/111498004/",
      "md5hash": "77134074f788a5c5ba1f45eca0545708",
      "lines": {
        "1": "///////////////////////////////////////////////////////////////////////////////",
        "2": "//  Filename: $RCSfile: JPEG.java,v $",
        "35": "",
        "36": "import com.obrador.JpegEncoder;",
        "42": " * @.author     wegnerj",
        "43": " * @.wikipedia  JPEG",
        "47": " */",
        "48": "public class JPEG extends BasicImageWriter",
        "75": "        JpegEncoder pc = new JpegEncoder(image, JPEG_QUALITY_IN_PERCENT, os);",
        "55": "",
        "56": "    //    private static Category logger = Category.getInstance(\"joelib2.io.types.JPEG\");",
        "57": "    private static final String description = \"JPEG image\";",
        "58": "    private static final String[] extensions = new String[]{\"jpg\", \"jpeg\"};",
        "59": "    private static final int JPEG_QUALITY_IN_PERCENT = 100;",
        "74": "    {"
      },
      "id": 111498004,
      "filename": "JPEG.java"
    },
    {
      "repo": "https://github.com/bioclipse/bioclipse.joelib.git",
      "language": "Java",
      "linescount": 180,
      "location": "/externals/net.sourceforge.joelib/src/com/obrador",
      "name": "bioclipse.joelib",
      "url": "https://searchcode.com/codesearch/view/111498309/",
      "md5hash": "d3a2d4214dc534a041dfed728db4f2d7",
      "lines": {
        "32": "        JpegEncoder jpg;",
        "144": "            \"Program usage: java Jpeg \\\"InputImage\\\".\\\"ext\\\" Quality [\\\"OutputFile\\\"[.jpg]]\");",
        "2": "// Visit BioElectroMech at www.obrador.com.  Email James@obrador.com.",
        "3": "// This software is based in part on the work of the Independent JPEG Group.",
        "4": "// See license.txt for details about the allowed used of this software.",
        "5": "// See IJGreadme.txt for details about the Independent JPEG Group's license.",
        "135": "    /***",
        "136": "    * Jpeg(\"Imagefile\", Quality, \"OutFileName\")",
        "137": "    * According to JAVA virtual machine, the files which can be read are jpeg, tiff and gif files",
        "138": "    ***/",
        "140": "    {",
        "141": "        System.out.println(\"JpegEncoder for Java(tm) Version 0.9\");",
        "143": "        System.out.println(",
        "112": "            image = Toolkit.getDefaultToolkit().getImage(args[0]);",
        "113": "            jpg = new JpegEncoder(image, Quality, dataOut);",
        "31": "        File outFile;"
      },
      "id": 111498309,
      "filename": "Jpeg.java"
    },
    {
      "repo": "http://libgdx.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 142,
      "location": "/extensions/gdx-image/src/com/badlogic/gdx/graphics/g2d",
      "name": "libgdx",
      "url": "https://searchcode.com/codesearch/view/10129528/",
      "md5hash": "9ebb60f83eaa37e7e13838c4e5e3ed9d",
      "lines": {
        "32": " */",
        "33": "public class Jpeg {",
        "67": "\t{",
        "68": "\t    jpeg_error_mgr pub;",
        "38": "\t/**",
        "39": "\t * Reads a jpeg from the given file, throws a GdxRuntimeException in case something went wrong.",
        "60": "\t#include \"gdx2d.h\"",
        "44": "\t\tByteBuffer pixels = read(bytes, 0, bytes.length, out);",
        "45": "\t\tif(pixels == null) throw new GdxRuntimeException(\"Couldn't load jpeg '\" + file + \"'\");",
        "49": "\t/**",
        "50": "\t * Reads a jpeg from the byte array, throws a GdxRuntimeException in case something went wrong.",
        "54": "\t\tByteBuffer pixels = read(compressedData, offset, length, out);",
        "55": "\t\tif(pixels == null) throw new GdxRuntimeException(\"Couldn't load jpeg\");",
        "27": "/**",
        "28": " * Very thin wrapper around libjpeg. Returns Pixmaps given a file or raw jpeg data in a byte array.",
        "61": "\t#include \"libjpeg/jpeglib.h\""
      },
      "id": 10129528,
      "filename": "Jpeg.java"
    },
    {
      "repo": "https://bitbucket.org/nkabir/jdk-6",
      "language": "Java",
      "linescount": 359,
      "location": "/jdk/src/share/classes/com/sun/imageio/plugins/jpeg",
      "name": "jdk-6",
      "url": "https://searchcode.com/codesearch/view/60706224/",
      "md5hash": "7e7ed0c45b9fbb45f93bf5075aa09e04",
      "lines": {
        "32": "",
        "39": "/**",
        "40": " * A class containing JPEG-related constants, definitions, and",
        "41": " * static methods.  This class and its constants must be public so that",
        "42": " * <code>JPEGImageWriteParam</code> can see it.",
        "43": " */",
        "44": "public class JPEG {",
        "45": "",
        "46": "    // List of all the JPEG markers (pre-JPEG2000)",
        "175": "    public static final String [] names = {\"JPEG\", \"jpeg\", \"JPG\", \"jpg\"};",
        "176": "    public static final String [] suffixes = {\"jpg\", \"jpeg\"};",
        "174": "    // Names of the formats we can read or write",
        "25": "",
        "26": "package com.sun.imageio.plugins.jpeg;",
        "29": "import javax.imageio.ImageTypeSpecifier;",
        "30": "import javax.imageio.plugins.jpeg.JPEGQTable;",
        "31": "import javax.imageio.plugins.jpeg.JPEGHuffmanTable;"
      },
      "id": 60706224,
      "filename": "JPEG.java"
    },
    {
      "repo": "git://github.com/dcm4che/dcm4che.git",
      "language": "Java",
      "linescount": 176,
      "location": "/dcm4che-imageio/src/main/java/org/dcm4che/imageio/codec/jpeg",
      "name": "dcm4che",
      "url": "https://searchcode.com/codesearch/view/58437044/",
      "md5hash": "3570a4f1e91297e58c38394425a0ac18",
      "lines": {
        "152": "    /** JPEG-LS parameters */",
        "149": "    // codes 0xF0 to 0xFD are reserved",
        "38": "",
        "39": "package org.dcm4che.imageio.codec.jpeg;",
        "72": "",
        "73": "    /** Reserved for JPEG extensions */",
        "151": "    public static final int SOF55 = 0xF7;",
        "44": " */",
        "45": "public class JPEG {",
        "150": "    /** JPEG-LS coding */"
      },
      "id": 58437044,
      "filename": "JPEG.java"
    },
    {
      "repo": "https://bitbucket.org/tjklemz/itextmod",
      "language": "Java",
      "linescount": 346,
      "location": "/src/com/itextpdf/text",
      "name": "itextmod",
      "url": "https://searchcode.com/codesearch/view/125285161/",
      "md5hash": "a4bd4774055a2a61632eee36b0d3db6a",
      "lines": {
        "1": "/*",
        "2": " * $Id: Jpeg.java 4784 2011-03-15 08:33:00Z blowagie $",
        "139": "    public Jpeg(byte[] img, float width, float height) throws BadElementException, IOException {",
        "69": "    ",
        "70": "    /** Acceptable Jpeg markers. */",
        "129": "    /**",
        "138": "    ",
        "75": "    ",
        "76": "    /** Unsupported Jpeg markers. */",
        "130": "     * Constructs a <CODE>Jpeg</CODE>-object from memory.",
        "52": "/**",
        "53": " * An <CODE>Jpeg</CODE> is the representation of a graphic element (JPEG)",
        "185": "    /**",
        "186": "     * This method checks if the image is a valid JPEG and processes some parameters.",
        "59": "",
        "60": "public class Jpeg extends Image {"
      },
      "id": 125285161,
      "filename": "Jpeg.java"
    },
    {
      "repo": "https://bitbucket.org/hamishm/haiku-jdk-jdk",
      "language": "Java",
      "linescount": 372,
      "location": "/src/share/classes/com/sun/imageio/plugins/jpeg",
      "name": "haiku-jdk-jdk",
      "url": "https://searchcode.com/codesearch/view/127228544/",
      "md5hash": "1c3885f816f841901639d9c7c4822663",
      "lines": {
        "32": "",
        "39": "/**",
        "40": " * A class containing JPEG-related constants, definitions, and",
        "41": " * static methods.  This class and its constants must be public so that",
        "42": " * <code>JPEGImageWriteParam</code> can see it.",
        "43": " */",
        "44": "public class JPEG {",
        "45": "",
        "46": "    // List of all the JPEG markers (pre-JPEG2000)",
        "175": "    public static final String [] names = {\"JPEG\", \"jpeg\", \"JPG\", \"jpg\"};",
        "176": "    public static final String [] suffixes = {\"jpg\", \"jpeg\"};",
        "174": "    // Names of the formats we can read or write",
        "25": "",
        "26": "package com.sun.imageio.plugins.jpeg;",
        "29": "import javax.imageio.ImageTypeSpecifier;",
        "30": "import javax.imageio.plugins.jpeg.JPEGQTable;",
        "31": "import javax.imageio.plugins.jpeg.JPEGHuffmanTable;"
      },
      "id": 127228544,
      "filename": "JPEG.java"
    },
    {
      "repo": "https://bitbucket.org/chegar/jigsaw_jigsaw_jdk",
      "language": "Java",
      "linescount": 372,
      "location": "/src/share/classes/com/sun/imageio/plugins/jpeg",
      "name": "jigsaw_jigsaw_jdk",
      "url": "https://searchcode.com/codesearch/view/129545249/",
      "md5hash": "1c3885f816f841901639d9c7c4822663",
      "lines": {
        "32": "",
        "39": "/**",
        "40": " * A class containing JPEG-related constants, definitions, and",
        "41": " * static methods.  This class and its constants must be public so that",
        "42": " * <code>JPEGImageWriteParam</code> can see it.",
        "43": " */",
        "44": "public class JPEG {",
        "45": "",
        "46": "    // List of all the JPEG markers (pre-JPEG2000)",
        "175": "    public static final String [] names = {\"JPEG\", \"jpeg\", \"JPG\", \"jpg\"};",
        "176": "    public static final String [] suffixes = {\"jpg\", \"jpeg\"};",
        "174": "    // Names of the formats we can read or write",
        "25": "",
        "26": "package com.sun.imageio.plugins.jpeg;",
        "29": "import javax.imageio.ImageTypeSpecifier;",
        "30": "import javax.imageio.plugins.jpeg.JPEGQTable;",
        "31": "import javax.imageio.plugins.jpeg.JPEGHuffmanTable;"
      },
      "id": 129545249,
      "filename": "JPEG.java"
    },
    {
      "repo": "https://bitbucket.org/chegar/jigsaw_modulefileparser",
      "language": "Java",
      "linescount": 372,
      "location": "/src/share/classes/com/sun/imageio/plugins/jpeg",
      "name": "jigsaw_modulefileparser",
      "url": "https://searchcode.com/codesearch/view/129564986/",
      "md5hash": "1c3885f816f841901639d9c7c4822663",
      "lines": {
        "32": "",
        "39": "/**",
        "40": " * A class containing JPEG-related constants, definitions, and",
        "41": " * static methods.  This class and its constants must be public so that",
        "42": " * <code>JPEGImageWriteParam</code> can see it.",
        "43": " */",
        "44": "public class JPEG {",
        "45": "",
        "46": "    // List of all the JPEG markers (pre-JPEG2000)",
        "175": "    public static final String [] names = {\"JPEG\", \"jpeg\", \"JPG\", \"jpg\"};",
        "176": "    public static final String [] suffixes = {\"jpg\", \"jpeg\"};",
        "174": "    // Names of the formats we can read or write",
        "25": "",
        "26": "package com.sun.imageio.plugins.jpeg;",
        "29": "import javax.imageio.ImageTypeSpecifier;",
        "30": "import javax.imageio.plugins.jpeg.JPEGQTable;",
        "31": "import javax.imageio.plugins.jpeg.JPEGHuffmanTable;"
      },
      "id": 129564986,
      "filename": "JPEG.java"
    },
    {
      "repo": "https://bitbucket.org/sreilly/openjdk7u-jdk",
      "language": "Java",
      "linescount": 372,
      "location": "/src/share/classes/com/sun/imageio/plugins/jpeg",
      "name": "openjdk7u-jdk",
      "url": "https://searchcode.com/codesearch/view/130313163/",
      "md5hash": "1c3885f816f841901639d9c7c4822663",
      "lines": {
        "32": "",
        "39": "/**",
        "40": " * A class containing JPEG-related constants, definitions, and",
        "41": " * static methods.  This class and its constants must be public so that",
        "42": " * <code>JPEGImageWriteParam</code> can see it.",
        "43": " */",
        "44": "public class JPEG {",
        "45": "",
        "46": "    // List of all the JPEG markers (pre-JPEG2000)",
        "175": "    public static final String [] names = {\"JPEG\", \"jpeg\", \"JPG\", \"jpg\"};",
        "176": "    public static final String [] suffixes = {\"jpg\", \"jpeg\"};",
        "174": "    // Names of the formats we can read or write",
        "25": "",
        "26": "package com.sun.imageio.plugins.jpeg;",
        "29": "import javax.imageio.ImageTypeSpecifier;",
        "30": "import javax.imageio.plugins.jpeg.JPEGQTable;",
        "31": "import javax.imageio.plugins.jpeg.JPEGHuffmanTable;"
      },
      "id": 130313163,
      "filename": "JPEG.java"
    },
    {
      "repo": "https://bitbucket.org/infinitekind/openjdk7u-jdk",
      "language": "Java",
      "linescount": 372,
      "location": "/src/share/classes/com/sun/imageio/plugins/jpeg",
      "name": "openjdk7u-jdk",
      "url": "https://searchcode.com/codesearch/view/132212376/",
      "md5hash": "1c3885f816f841901639d9c7c4822663",
      "lines": {
        "32": "",
        "39": "/**",
        "40": " * A class containing JPEG-related constants, definitions, and",
        "41": " * static methods.  This class and its constants must be public so that",
        "42": " * <code>JPEGImageWriteParam</code> can see it.",
        "43": " */",
        "44": "public class JPEG {",
        "45": "",
        "46": "    // List of all the JPEG markers (pre-JPEG2000)",
        "175": "    public static final String [] names = {\"JPEG\", \"jpeg\", \"JPG\", \"jpg\"};",
        "176": "    public static final String [] suffixes = {\"jpg\", \"jpeg\"};",
        "174": "    // Names of the formats we can read or write",
        "25": "",
        "26": "package com.sun.imageio.plugins.jpeg;",
        "29": "import javax.imageio.ImageTypeSpecifier;",
        "30": "import javax.imageio.plugins.jpeg.JPEGQTable;",
        "31": "import javax.imageio.plugins.jpeg.JPEGHuffmanTable;"
      },
      "id": 132212376,
      "filename": "JPEG.java"
    },
    {
      "repo": "https://bitbucket.org/psandoz/lambda-jdk-pipeline-patches",
      "language": "Java",
      "linescount": 372,
      "location": "/src/share/classes/com/sun/imageio/plugins/jpeg",
      "name": "lambda-jdk-pipeline-patches",
      "url": "https://searchcode.com/codesearch/view/132818905/",
      "md5hash": "1c3885f816f841901639d9c7c4822663",
      "lines": {
        "32": "",
        "39": "/**",
        "40": " * A class containing JPEG-related constants, definitions, and",
        "41": " * static methods.  This class and its constants must be public so that",
        "42": " * <code>JPEGImageWriteParam</code> can see it.",
        "43": " */",
        "44": "public class JPEG {",
        "45": "",
        "46": "    // List of all the JPEG markers (pre-JPEG2000)",
        "175": "    public static final String [] names = {\"JPEG\", \"jpeg\", \"JPG\", \"jpg\"};",
        "176": "    public static final String [] suffixes = {\"jpg\", \"jpeg\"};",
        "174": "    // Names of the formats we can read or write",
        "25": "",
        "26": "package com.sun.imageio.plugins.jpeg;",
        "29": "import javax.imageio.ImageTypeSpecifier;",
        "30": "import javax.imageio.plugins.jpeg.JPEGQTable;",
        "31": "import javax.imageio.plugins.jpeg.JPEGHuffmanTable;"
      },
      "id": 132818905,
      "filename": "JPEG.java"
    },
    {
      "repo": "https://bitbucket.org/psandoz/lambda-jdk",
      "language": "Java",
      "linescount": 372,
      "location": "/src/share/classes/com/sun/imageio/plugins/jpeg",
      "name": "lambda-jdk",
      "url": "https://searchcode.com/codesearch/view/132838101/",
      "md5hash": "1c3885f816f841901639d9c7c4822663",
      "lines": {
        "32": "",
        "39": "/**",
        "40": " * A class containing JPEG-related constants, definitions, and",
        "41": " * static methods.  This class and its constants must be public so that",
        "42": " * <code>JPEGImageWriteParam</code> can see it.",
        "43": " */",
        "44": "public class JPEG {",
        "45": "",
        "46": "    // List of all the JPEG markers (pre-JPEG2000)",
        "175": "    public static final String [] names = {\"JPEG\", \"jpeg\", \"JPG\", \"jpg\"};",
        "176": "    public static final String [] suffixes = {\"jpg\", \"jpeg\"};",
        "174": "    // Names of the formats we can read or write",
        "25": "",
        "26": "package com.sun.imageio.plugins.jpeg;",
        "29": "import javax.imageio.ImageTypeSpecifier;",
        "30": "import javax.imageio.plugins.jpeg.JPEGQTable;",
        "31": "import javax.imageio.plugins.jpeg.JPEGHuffmanTable;"
      },
      "id": 132838101,
      "filename": "JPEG.java"
    },
    {
      "repo": "https://bitbucket.org/screenconnect/openjdk8-jdk",
      "language": "Java",
      "linescount": 369,
      "location": "/src/share/classes/com/sun/imageio/plugins/jpeg",
      "name": "openjdk8-jdk",
      "url": "https://searchcode.com/codesearch/view/136817006/",
      "md5hash": "0ea11c5ad57175f99d871c5b0c6a38d9",
      "lines": {
        "171": "    // Names of the formats we can read or write",
        "36": "/**",
        "37": " * A class containing JPEG-related constants, definitions, and",
        "38": " * static methods.  This class and its constants must be public so that",
        "39": " * <code>JPEGImageWriteParam</code> can see it.",
        "40": " */",
        "41": "public class JPEG {",
        "42": "",
        "43": "    // List of all the JPEG markers (pre-JPEG2000)",
        "172": "    static final String [] names = {\"JPEG\", \"jpeg\", \"JPG\", \"jpg\"};",
        "173": "    static final String [] suffixes = {\"jpg\", \"jpeg\"};",
        "25": "",
        "26": "package com.sun.imageio.plugins.jpeg;",
        "28": "import javax.imageio.ImageTypeSpecifier;",
        "29": "import javax.imageio.plugins.jpeg.JPEGQTable;",
        "30": "import javax.imageio.plugins.jpeg.JPEGHuffmanTable;",
        "31": ""
      },
      "id": 136817006,
      "filename": "JPEG.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 4472,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 3772,
      "source": "Github",
      "id": 2
    },
    {
      "count": 950,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 74,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 18,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 14,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 7,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 4,
      "source": "Gitorious",
      "id": 10
    },
    {
      "count": 2,
      "source": "Google Android",
      "id": 12
    }
  ]
}