{
  "matchterm": "Count",
  "previouspage": null,
  "searchterm": "Count",
  "query": "Count",
  "language_filters": [
    {
      "count": 177133,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 177132,
  "results": [
    {
      "repo": "http://rncbi.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 373,
      "location": "/RNCBI-0.9/src/gov/nih/nlm/ncbi/www/soap/eutils/esearch",
      "name": "rncbi",
      "url": "https://searchcode.com/codesearch/view/12646615/",
      "md5hash": "f588a04acb7cc57024f4f9d658940539",
      "lines": {
        "1": "/**",
        "2": " * Count.java",
        "35": "\t */",
        "36": "\tpublic java.lang.String getCount() {",
        "37": "\t\treturn localCount;",
        "10": "/**",
        "11": " * Count bean class",
        "12": " */",
        "13": "public class Count implements org.apache.axis2.databinding.ADBBean {",
        "15": "\tprivate static final long serialVersionUID = -2770627096097212304L;",
        "16": "\tpublic static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(\"http://www.ncbi.nlm.nih.gov/soap/eutils/esearch\", \"Count\",",
        "26": "\t/**",
        "27": "\t * field for Count",
        "28": "\t */",
        "29": "\tprotected java.lang.String localCount;"
      },
      "id": 12646615,
      "filename": "Count.java"
    },
    {
      "repo": "https://github.com/XBigTK13X/SchoolAssignments.git",
      "language": "Java",
      "linescount": 40,
      "location": "/opsys/samples",
      "name": "SchoolAssignments",
      "url": "https://searchcode.com/codesearch/view/65614959/",
      "md5hash": "f4d07e407b5bfa5fbd4ef6d0070e93c0",
      "lines": {
        "1": "/**",
        "2": " * Count class displays integers from 1 to n",
        "6": " */",
        "7": "public class Count implements Runnable",
        "11": " /** Constructor */",
        "12": " public Count( int n )"
      },
      "id": 65614959,
      "filename": "Count.java"
    },
    {
      "repo": "https://bitbucket.org/simonpeter/classicprogramssuite.git",
      "language": "Java",
      "linescount": 18,
      "location": "/ClassicProgramsSuite/CountToTenTest",
      "name": "classicprogramssuite",
      "url": "https://searchcode.com/codesearch/view/125769478/",
      "md5hash": "705670d34b1943a08858fb346ca62c67",
      "lines": {
        "1": "/*",
        "2": " * Count.java",
        "4": "",
        "5": "public class Count {"
      },
      "id": 125769478,
      "filename": "Count.java"
    },
    {
      "repo": "git://github.com/chandlerkent/HKCD.git",
      "language": "Java",
      "linescount": 17,
      "location": "/Test/Files/Parser/FullParserTestCases/Good/FullTests",
      "name": "HKCD",
      "url": "https://searchcode.com/codesearch/view/16927911/",
      "md5hash": "9b2fd7e3f4ede5a07644ac3dae17fd65",
      "lines": {
        "1": "/* count from 0 to 9 */",
        "2": ""
      },
      "id": 16927911,
      "filename": "testcase00_01.java"
    },
    {
      "repo": "https://bitbucket.org/saltnlight5/java-tools",
      "language": "Java",
      "linescount": 209,
      "location": "/src/main/java/tool",
      "name": "java-tools",
      "url": "https://searchcode.com/codesearch/view/76412702/",
      "md5hash": "44069372213ed832ed72671f74cbe064",
      "lines": {
        "32": "\t\t\t\"\");",
        "36": "\tpublic void run(Options opts) {",
        "37": "\t\tif (opts.has(\"countStdinAsFiles\")) {",
        "11": "",
        "12": "public class Count extends CliBase {",
        "21": "\t\tsetOption(\"min\", \t           \"Find the max from all input numbers\").",
        "22": "\t\tsetOption(\"countStdinAsFiles\", \"Count line from each filename read from STDIN.\").",
        "23": "\t\tsetSummary(",
        "24": "\t\t\t\"Count number of lines from input.\\n\" +",
        "25": "\t\t\t\"\").",
        "26": "\t\tsetUsage(\"ztool Count [Options] [file ...]\\n\").",
        "27": "\t\tsetExamples(",
        "28": "\t\t\t\"  ztool Count data.txt\\n\" +",
        "29": "\t\t\t\"  ztool Sysinfo -s | ztool Count\\n\" +",
        "30": "\t\t\t\"  ztool Count *.java | ztool Cut 0 -r | ztool Count --sum\\n\" +",
        "31": "\t\t\t\"  ztool Find src -name=\\\"java$\\\" --noShowDir | ztool Count --countStdinAsFiles | ztool Cut 0 -r | ztool Count --sum\\n\" +\t\t\t\t"
      },
      "id": 76412702,
      "filename": "Count.java"
    },
    {
      "repo": "https://github.com/belong/teiid.git",
      "language": "Java",
      "linescount": 56,
      "location": "/engine/src/main/java/org/teiid/query/function/aggregate",
      "name": "teiid",
      "url": "https://searchcode.com/codesearch/view/73455393/",
      "md5hash": "fe0c7b5e642ab77d272839f8de63c9cf",
      "lines": {
        "32": " * Just a simple COUNT() implementation that counts every non-null row it sees.",
        "33": " */",
        "34": "public class Count extends AggregateFunction {",
        "35": "",
        "36": "    private int count = 0;",
        "38": "    public void reset() {",
        "39": "        count = 0;",
        "44": "    \t\tthrows TeiidComponentException, TeiidProcessingException {",
        "45": "        count++;",
        "51": "    public Object getResult(CommandContext commandContext) {",
        "52": "        return Integer.valueOf(count);",
        "31": "/**"
      },
      "id": 73455393,
      "filename": "Count.java"
    },
    {
      "repo": "https://github.com/vasia/flink.git",
      "language": "Java",
      "linescount": 102,
      "location": "/flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/windowing/helper",
      "name": "flink",
      "url": "https://searchcode.com/codesearch/view/93179117/",
      "md5hash": "fd5249ec0478c575da98f8d72d56aa0e",
      "lines": {
        "32": "\tprivate int count;",
        "33": "\tprivate int deleteOnEviction = 1;",
        "34": "\tprivate int startValue = CountTriggerPolicy.DEFAULT_START_VALUE;",
        "37": "\t * Specifies on which element a trigger or an eviction should happen (based",
        "38": "\t * on the count of the elements).",
        "39": "\t * ",
        "19": "",
        "20": "import org.apache.flink.streaming.api.windowing.policy.CountEvictionPolicy;",
        "21": "import org.apache.flink.streaming.api.windowing.policy.CountTriggerPolicy;",
        "22": "import org.apache.flink.streaming.api.windowing.policy.EvictionPolicy;",
        "25": "/**",
        "26": " * Represents a count based trigger or eviction policy. Use the",
        "27": " * {@link Count#of(int)} to get an instance.",
        "28": " */",
        "29": "@SuppressWarnings(\"rawtypes\")",
        "30": "public class Count implements WindowingHelper {",
        "31": ""
      },
      "id": 93179117,
      "filename": "Count.java"
    },
    {
      "repo": "https://bitbucket.org/Gokulnath_Haribabu/jython",
      "language": "Java",
      "linescount": 115,
      "location": "/src/org/python/modules/itertools",
      "name": "jython",
      "url": "https://searchcode.com/codesearch/view/103211243/",
      "md5hash": "621193af784752cc8c20bafd2a5b577b",
      "lines": {
        "32": "        \"  Equivalent to:\\n\" +",
        "33": "        \"\\n\" +",
        "34": "        \"      def count(firstval=0, step=1):\\n\" +",
        "39": "",
        "40": "    public count(PyType subType) {",
        "19": "",
        "20": "@ExposedType(name = \"itertools.count\", base = PyObject.class)",
        "21": "public class count extends PyObject {",
        "22": "",
        "23": "    public static final PyType TYPE = PyType.fromClass(count.class);",
        "24": "    private PyIterator iter;",
        "25": "    private int counter;",
        "29": "    public static PyString __doc__ = new PyString(",
        "30": "        \"count(start=0, step=1) --> count object\\n\\n\" +",
        "31": "        \"Return a count object whose .next() method returns consecutive values.\\n\" +"
      },
      "id": 103211243,
      "filename": "count.java"
    },
    {
      "repo": "https://github.com/cwensel/cascading.git",
      "language": "Java",
      "linescount": 92,
      "location": "/cascading-core/src/main/java/cascading/operation/aggregator",
      "name": "cascading",
      "url": "https://searchcode.com/codesearch/view/104380971/",
      "md5hash": "b9bd91d64ffbbcccf576c7c7b5516a9c",
      "lines": {
        "34": "/**",
        "35": " * Class Count is an {@link Aggregator} that calculates the number of items in the current group.",
        "36": " * </p>",
        "37": " * Note the resulting value for count is always a long. So any comparisons should be against a long value.",
        "38": " */",
        "39": "public class Count extends BaseOperation<Pair<Long[], Tuple>> implements Aggregator<Pair<Long[], Tuple>>",
        "40": "  {",
        "41": "  /** Field COUNT */",
        "42": "  public static final String FIELD_NAME = \"count\";",
        "43": "",
        "44": "  /** Constructor Count creates a new Count instance using the default field declaration of name 'count'. */",
        "45": "  public Count()",
        "46": "    {",
        "50": "  /**",
        "51": "   * Constructor Count creates a new Count instance and returns a field with the given fieldDeclaration name."
      },
      "id": 104380971,
      "filename": "Count.java"
    },
    {
      "repo": "https://github.com/nkeet/monqjfa.git",
      "language": "Java",
      "linescount": 140,
      "location": "/monq/jfa/actions",
      "name": "monqjfa",
      "url": "https://searchcode.com/codesearch/view/94934496/",
      "md5hash": "42ac9d5789fcd55bcc922009eb2b0d0c",
      "lines": {
        "34": " * <p>Whenever <code>invoke</code> is called for a",
        "35": " * successfull match, the counter is incremented by one. ",
        "36": " * The counter can be tested against a threshold with the {@link",
        "37": " * Verifier} returned by {@link #ge ge()}. Typically this verifier",
        "38": " * will be passed to an instance of {@link If}. An example is",
        "39": " * <pre>   Count cnt = new Count(\"no_of_fishes\");",
        "47": " * ",
        "48": " * <p>To add another increment then 1 to the counter, use the action",
        "53": " */",
        "54": "public class Count extends AbstractFaAction {",
        "23": "/**",
        "24": " * <p>counts matches and can then be used with {@link If} to perform",
        "25": " * conditional actions depending on whether a threshold count is",
        "26": " * reached. To retrieve and store the current count,",
        "27": " * the callback obtains a <code>Map</code> from a {@link MapProvider}"
      },
      "id": 94934496,
      "filename": "Count.java"
    },
    {
      "repo": "https://github.com/poidasmith/xlloop.git",
      "language": "Java",
      "linescount": 53,
      "location": "/org.boris.expr/java/src/org/boris/expr/function/excel",
      "name": "xlloop",
      "url": "https://searchcode.com/codesearch/view/105398918/",
      "md5hash": "0f900bc7b25fcec6784a6568283adae3",
      "lines": {
        "32": "        } else if (arg instanceof ExprArray) {",
        "33": "            int count = 0;",
        "38": "                for (int j = 0; j < cols; j++) {",
        "39": "                    count += count(arr.get(i, j), any);",
        "41": "            }",
        "42": "            return count;",
        "13": "",
        "14": "public class COUNT extends AbstractFunction",
        "16": "    public Expr evaluate(Expr[] args) throws ExprException {",
        "17": "        assertMinArgCount(args, 1);",
        "18": "        int count = 0;",
        "19": "        for (Expr a : args) {",
        "20": "            count += count(a, false);",
        "21": "        }",
        "22": "        return new ExprInteger(count);"
      },
      "id": 105398918,
      "filename": "COUNT.java"
    },
    {
      "repo": "https://github.com/sweetybanana/algorithms-course-coursera.git",
      "language": "Java",
      "linescount": 48,
      "location": "/coursera_libs/src/algo",
      "name": "algorithms-course-coursera",
      "url": "https://searchcode.com/codesearch/view/94436891/",
      "md5hash": "b7dec6093c23457a6d89421251ef2d48",
      "lines": {
        "32": "",
        "1": "/*************************************************************************",
        "2": " *  Compilation:  javac Count.java",
        "3": " *  Execution:    java Count alpha < input.txt",
        "4": " *",
        "37": "        int[] count = new int[R];",
        "33": "public class Count {",
        "9": " *",
        "10": " *  %  java Count ABCDR < abra.txt ",
        "43": "        for (int c = 0; c < R; c++)",
        "44": "            StdOut.println(alpha.toChar(c) + \" \" + count[c]);",
        "16": " *",
        "17": " *  % java Count 0123456789 < pi.txt",
        "41": "            if (alpha.contains(a.charAt(i)))",
        "36": "        int R = alpha.R();",
        "42": "                count[alpha.toIndex(a.charAt(i))]++;"
      },
      "id": 94436891,
      "filename": "Count.java"
    },
    {
      "repo": "https://github.com/davidhuizhou/Corejava.git",
      "language": "Java",
      "linescount": 50,
      "location": "/src/main/java/com/dzhou/corejava/algs4",
      "name": "Corejava",
      "url": "https://searchcode.com/codesearch/view/96205977/",
      "md5hash": "3eaa639cabe1433052350bebed663b27",
      "lines": {
        "3": "/*************************************************************************",
        "34": "",
        "35": "public class Count {",
        "4": " *  Compilation:  javac com.dzhou.corejava.algs4.Count.java",
        "5": " *  Execution:    java com.dzhou.corejava.algs4.Count alpha < input.txt",
        "6": " *",
        "39": "        int[] count = new int[R];",
        "44": "                count[alpha.toIndex(a.charAt(i))]++;",
        "11": " *",
        "12": " *  %  java com.dzhou.corejava.algs4.Count ABCDR < abra.txt",
        "45": "        for (int c = 0; c < R; c++)",
        "46": "            StdOut.println(alpha.toChar(c) + \" \" + count[c]);",
        "43": "            if (alpha.contains(a.charAt(i)))",
        "18": " *",
        "19": " *  % java com.dzhou.corejava.algs4.Count 0123456789 < pi.txt",
        "38": "        int R = alpha.R();"
      },
      "id": 96205977,
      "filename": "Count.java"
    },
    {
      "repo": "https://github.com/king821221/pig.git",
      "language": "Java",
      "linescount": 110,
      "location": "/src/org/apache/pig/builtin",
      "name": "pig",
      "url": "https://searchcode.com/codesearch/view/101041737/",
      "md5hash": "574e955ae1fba170f9264fb2382426c5",
      "lines": {
        "34": "/**",
        "35": " * Generates the count of the values of the first field of a tuple. This class is Algebraic in",
        "37": " */",
        "38": "public class COUNT extends EvalFunc<DataAtom> implements Algebraic{",
        "103": "    public Schema outputSchema(Schema input) {",
        "104": "        return new AtomSchema(\"count\" + count++);",
        "41": "    public void exec(Tuple input, DataAtom output) throws IOException {",
        "42": "        output.setValue(count(input));",
        "107": "    private static int count = 1;",
        "77": "",
        "78": "    static protected long count(Tuple input) throws IOException {",
        "84": "        else",
        "85": "            throw new IOException(\"Cannot count a \" + values.getClass().getSimpleName());",
        "59": "        public void exec(Tuple input, Tuple output) throws IOException {",
        "60": "            output.appendField(new DataAtom(count(input)));",
        "106": ""
      },
      "id": 101041737,
      "filename": "COUNT.java"
    },
    {
      "repo": "https://github.com/atlasapi/atlas.git",
      "language": "Java",
      "linescount": 106,
      "location": "/src/main/java/org/atlasapi/util/stats",
      "name": "atlas",
      "url": "https://searchcode.com/codesearch/view/109545519/",
      "md5hash": "e57e6a39514f2f1f9ae44aafb5da2b55",
      "lines": {
        "32": "\tpublic Count(T target, Comparator<? super T> comparator,  int score) {",
        "33": "\t\tthis.comparator = comparator;",
        "34": "\t\tthis.count = score;",
        "37": "",
        "38": "\tpublic Count(T target) {",
        "42": "\t@SuppressWarnings(\"unchecked\")",
        "43": "\tpublic Count(T target, int score) {",
        "45": "\t\tif (!(target instanceof Comparable<?>)) {",
        "46": "\t\t\tthrow new IllegalArgumentException(\"Count requires that targets implement Comparable or provide a suitable Comparator\");",
        "51": "\tpublic boolean equals(Object obj) {",
        "52": "\t\tif (obj instanceof Count<?>) {",
        "53": "\t\t\treturn target.equals(((Count<?>) obj).getTarget());",
        "25": " */",
        "26": "public class Count<T> implements Comparable<Count<T>> {",
        "28": "\tprivate final T target;",
        "29": "\tprivate int count;",
        "31": ""
      },
      "id": 109545519,
      "filename": "Count.java"
    },
    {
      "repo": "https://github.com/bi2one/Matji_Sandwich.git",
      "language": "Java",
      "linescount": 47,
      "location": "/android/src/com/matji/sandwich/data",
      "name": "Matji_Sandwich",
      "url": "https://searchcode.com/codesearch/view/113844583/",
      "md5hash": "705b7cc55fe22f24be800b1711e38275",
      "lines": {
        "5": "",
        "6": "public class Count extends MatjiData{",
        "7": "\tprivate int count;",
        "8": "\t",
        "9": "\tpublic Count() {",
        "10": "\t\tthis.count = 0;",
        "11": "\t}",
        "12": "\t",
        "13": "\tpublic Count(Parcel in) {",
        "16": "",
        "17": "\tpublic static final Parcelable.Creator<Count> CREATOR = new Parcelable.Creator<Count>() {",
        "18": "\t\tpublic Count createFromParcel(Parcel in) {",
        "19": "\t\t\treturn new Count(in);",
        "20": "\t\t}",
        "21": "",
        "22": "\t\tpublic Count[] newArray(int size) {",
        "23": "\t\t\treturn new Count[size];"
      },
      "id": 113844583,
      "filename": "Count.java"
    },
    {
      "repo": "https://bitbucket.org/jython/jython/",
      "language": "Java",
      "linescount": 194,
      "location": "/src/org/python/modules/itertools",
      "name": "jython",
      "url": "https://searchcode.com/codesearch/view/116546429/",
      "md5hash": "f0745c55213eea9c10f0ff098aefb122",
      "lines": {
        "34": "",
        "35": "    public static final String count_doc =",
        "36": "        \"count(start=0, step=1) --> count object\\n\\n\" +",
        "37": "        \"Return a count object whose .next() method returns consecutive values.\\n\" +",
        "38": "        \"  Equivalent to:\\n\" +",
        "39": "        \"\\n\" +",
        "40": "        \"      def count(firstval=0, step=1):\\n\" +",
        "45": "",
        "46": "    public count(PyType subType) {",
        "18": "",
        "19": "@ExposedType(name = \"itertools.count\", base = PyObject.class, doc = count.count_doc)",
        "20": "public class count extends PyIterator {",
        "21": "",
        "22": "    public static final PyType TYPE = PyType.fromClass(count.class);",
        "23": "    private PyIterator iter;",
        "24": "    private PyObject counter;"
      },
      "id": 116546429,
      "filename": "count.java"
    },
    {
      "repo": "https://github.com/newsky/cobar.git",
      "language": "Java",
      "linescount": 61,
      "location": "/server/src/main/parser/com/alibaba/cobar/parser/ast/expression/primary/function/groupby",
      "name": "cobar",
      "url": "https://searchcode.com/codesearch/view/96213597/",
      "md5hash": "e1e093d2009f587d2631ab40ef2fa0b6",
      "lines": {
        "36": "",
        "37": "    public Count(List<Expression> arguments) {",
        "38": "        super(\"COUNT\", arguments);",
        "39": "        this.distinct = true;",
        "41": "",
        "42": "    public Count(Expression arg) {",
        "43": "        super(\"COUNT\", wrapList(arg));",
        "44": "        this.distinct = false;",
        "52": "    public FunctionExpression constructFunction(List<Expression> arguments) {",
        "53": "        return new Count(arguments);",
        "29": " */",
        "30": "public class Count extends FunctionExpression {"
      },
      "id": 96213597,
      "filename": "Count.java"
    },
    {
      "repo": "https://github.com/iljsan/drools.git",
      "language": "Java",
      "linescount": 60,
      "location": "/drools-compiler/src/test/java/org/drools/compiler/integrationtests/manners",
      "name": "drools",
      "url": "https://searchcode.com/codesearch/view/100219136/",
      "md5hash": "3bb9d39246ae076a104531d96b9a6190",
      "lines": {
        "51": "",
        "39": "    public String toString() {",
        "40": "        return \"[Count value=\" + this.value + \"]\";",
        "47": "",
        "48": "        if ((object == null) || !(object instanceof Count)) {",
        "18": "",
        "19": "public class Count {",
        "52": "        return this.value == ((Count) object).value;",
        "21": "",
        "22": "    public Count() {",
        "25": "",
        "26": "    public Count(int value) {"
      },
      "id": 100219136,
      "filename": "Count.java"
    },
    {
      "repo": "https://github.com/iljsan/drools.git",
      "language": "Java",
      "linescount": 59,
      "location": "/drools-core/src/test/java/org/drools/core/examples/manners",
      "name": "drools",
      "url": "https://searchcode.com/codesearch/view/100221923/",
      "md5hash": "67bcd5daba53029038432f075a00cf52",
      "lines": {
        "51": "        return this.value == ((Count) object).value;",
        "38": "    public String toString() {",
        "39": "        return \"[Count value=\" + this.value + \"]\";",
        "50": "",
        "46": "",
        "47": "        if ( (object == null) || !(object instanceof Count) ) {",
        "18": "",
        "19": "public class Count {",
        "21": "",
        "22": "    public Count() {",
        "24": "",
        "25": "    public Count(final int value) {"
      },
      "id": 100221923,
      "filename": "Count.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 85988,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 68639,
      "source": "Github",
      "id": 2
    },
    {
      "count": 17973,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 2417,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 999,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 424,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 350,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 192,
      "source": "Gitorious",
      "id": 10
    },
    {
      "count": 151,
      "source": "Google Android",
      "id": 12
    }
  ]
}