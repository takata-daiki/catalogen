{
  "matchterm": "FormatRecord",
  "previouspage": null,
  "searchterm": "FormatRecord",
  "query": "FormatRecord",
  "language_filters": [
    {
      "count": 55,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 55,
  "results": [
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 643,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260507/",
      "md5hash": "7614bf0db6d0a93d37080814ab5e29d9",
      "lines": {
        "128": "   */",
        "129": "  protected FormatRecord(FormatRecord fr)",
        "35": " */",
        "36": "public class FormatRecord extends WritableRecordData",
        "613": "    if (!(o instanceof FormatRecord))",
        "41": "   */",
        "42": "  public static Logger logger = Logger.getLogger(FormatRecord.class);",
        "107": "  FormatRecord(String fmt, int refno)",
        "147": "   */",
        "148": "  public FormatRecord(Record t, WorkbookSettings ws, BiffType biffType)",
        "117": "   */",
        "118": "  protected FormatRecord()",
        "617": "",
        "612": "",
        "618": "    FormatRecord fr = (FormatRecord) o;",
        "106": "   */"
      },
      "id": 43260507,
      "filename": "FormatRecord.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 643,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49201035/",
      "md5hash": "7614bf0db6d0a93d37080814ab5e29d9",
      "lines": {
        "128": "   */",
        "129": "  protected FormatRecord(FormatRecord fr)",
        "35": " */",
        "36": "public class FormatRecord extends WritableRecordData",
        "613": "    if (!(o instanceof FormatRecord))",
        "41": "   */",
        "42": "  public static Logger logger = Logger.getLogger(FormatRecord.class);",
        "107": "  FormatRecord(String fmt, int refno)",
        "147": "   */",
        "148": "  public FormatRecord(Record t, WorkbookSettings ws, BiffType biffType)",
        "117": "   */",
        "118": "  protected FormatRecord()",
        "617": "",
        "612": "",
        "618": "    FormatRecord fr = (FormatRecord) o;",
        "106": "   */"
      },
      "id": 49201035,
      "filename": "FormatRecord.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 643,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374685/",
      "md5hash": "7614bf0db6d0a93d37080814ab5e29d9",
      "lines": {
        "128": "   */",
        "129": "  protected FormatRecord(FormatRecord fr)",
        "35": " */",
        "36": "public class FormatRecord extends WritableRecordData",
        "613": "    if (!(o instanceof FormatRecord))",
        "41": "   */",
        "42": "  public static Logger logger = Logger.getLogger(FormatRecord.class);",
        "107": "  FormatRecord(String fmt, int refno)",
        "147": "   */",
        "148": "  public FormatRecord(Record t, WorkbookSettings ws, BiffType biffType)",
        "117": "   */",
        "118": "  protected FormatRecord()",
        "617": "",
        "612": "",
        "618": "    FormatRecord fr = (FormatRecord) o;",
        "106": "   */"
      },
      "id": 11374685,
      "filename": "FormatRecord.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 253,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642515/",
      "md5hash": "2183c654390729bbfc3ff874de7a3701",
      "lines": {
        "66": "",
        "67": "    public FormatRecord()",
        "56": "",
        "57": "public class FormatRecord",
        "75": "",
        "76": "    public FormatRecord(RecordInputStream in)"
      },
      "id": 15642515,
      "filename": "FormatRecord.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 574,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260506/",
      "md5hash": "ba86f9e9948353c90524c43d651e4b11",
      "lines": {
        "203": "      formats.get(new Integer(xfr.getFormatRecord()));",
        "166": "",
        "167": "    if (nextCustomIndexNumber > maxFormatRecordsIndex)",
        "168": "    {",
        "169": "      nextCustomIndexNumber = maxFormatRecordsIndex;",
        "170": "      throw new NumFormatRecordsException();",
        "171": "    }",
        "46": "  /**",
        "47": "   * A hash map of FormatRecords, for random access retrieval when reading",
        "146": "  public final void addFormat(DisplayFormat fr)",
        "147": "    throws NumFormatRecordsException",
        "151": "    if (fr.isInitialized() &&",
        "152": "        fr.getFormatIndex() >= maxFormatRecordsIndex)",
        "201": "",
        "187": "   * represents a date.  First checks against the built in formats, and",
        "188": "   * then checks against the hash map of FormatRecords",
        "202": "    FormatRecord fr = (FormatRecord)"
      },
      "id": 43260506,
      "filename": "FormattingRecords.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 574,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49201034/",
      "md5hash": "ba86f9e9948353c90524c43d651e4b11",
      "lines": {
        "203": "      formats.get(new Integer(xfr.getFormatRecord()));",
        "166": "",
        "167": "    if (nextCustomIndexNumber > maxFormatRecordsIndex)",
        "168": "    {",
        "169": "      nextCustomIndexNumber = maxFormatRecordsIndex;",
        "170": "      throw new NumFormatRecordsException();",
        "171": "    }",
        "46": "  /**",
        "47": "   * A hash map of FormatRecords, for random access retrieval when reading",
        "146": "  public final void addFormat(DisplayFormat fr)",
        "147": "    throws NumFormatRecordsException",
        "151": "    if (fr.isInitialized() &&",
        "152": "        fr.getFormatIndex() >= maxFormatRecordsIndex)",
        "201": "",
        "187": "   * represents a date.  First checks against the built in formats, and",
        "188": "   * then checks against the hash map of FormatRecords",
        "202": "    FormatRecord fr = (FormatRecord)"
      },
      "id": 49201034,
      "filename": "FormattingRecords.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 232,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260269/",
      "md5hash": "5f1b8297cdcfeeee4b762dd97fff243c",
      "lines": {
        "193": "",
        "194": "        fr = new FormatRecord",
        "214": "    }",
        "198": "",
        "199": "        fr = new FormatRecord",
        "209": "        fr = new FormatRecord",
        "203": "",
        "204": "        fr = new FormatRecord",
        "208": "",
        "177": "      /*",
        "178": "        FormatRecord fr = new FormatRecord",
        "181": "",
        "182": "        fr = new FormatRecord",
        "215": "    catch (NumFormatRecordsException e)",
        "185": "",
        "186": "        fr = new FormatRecord"
      },
      "id": 43260269,
      "filename": "WritableFormattingRecords.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 232,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200797/",
      "md5hash": "5f1b8297cdcfeeee4b762dd97fff243c",
      "lines": {
        "193": "",
        "194": "        fr = new FormatRecord",
        "214": "    }",
        "198": "",
        "199": "        fr = new FormatRecord",
        "209": "        fr = new FormatRecord",
        "203": "",
        "204": "        fr = new FormatRecord",
        "208": "",
        "177": "      /*",
        "178": "        FormatRecord fr = new FormatRecord",
        "181": "",
        "182": "        fr = new FormatRecord",
        "215": "    catch (NumFormatRecordsException e)",
        "185": "",
        "186": "        fr = new FormatRecord"
      },
      "id": 49200797,
      "filename": "WritableFormattingRecords.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 1688,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260491/",
      "md5hash": "9ac200201b51feec81a95d9bea44664f",
      "lines": {
        "1222": "   * @exception NumFormatRecordsException",
        "579": "      // in this case FormattingRecords should initialize the excelFormat",
        "580": "      // field with an instance of FormatRecord",
        "581": "      Assert.verify(fmt.excelFormat instanceof FormatRecord);",
        "582": "",
        "583": "      // Format is not built in, so do a deep copy",
        "584": "      FormatRecord fr = new FormatRecord((FormatRecord) fmt.excelFormat);",
        "1225": "    throws NumFormatRecordsException",
        "586": "      // Set both format fields to be the same object, since",
        "587": "      // FormatRecord implements all the necessary interfaces",
        "1224": "  public final void initialize(int pos, FormattingRecords fr, Fonts fonts)",
        "564": "        // Format is not built in, so do a deep copy",
        "565": "        format = new FormatRecord((FormatRecord) fmt.format);",
        "631": "   */",
        "632": "  public int getFormatRecord()",
        "1221": "   * @param fonts the container for the fonts"
      },
      "id": 43260491,
      "filename": "XFRecord.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 1688,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49201019/",
      "md5hash": "9ac200201b51feec81a95d9bea44664f",
      "lines": {
        "1222": "   * @exception NumFormatRecordsException",
        "579": "      // in this case FormattingRecords should initialize the excelFormat",
        "580": "      // field with an instance of FormatRecord",
        "581": "      Assert.verify(fmt.excelFormat instanceof FormatRecord);",
        "582": "",
        "583": "      // Format is not built in, so do a deep copy",
        "584": "      FormatRecord fr = new FormatRecord((FormatRecord) fmt.excelFormat);",
        "1225": "    throws NumFormatRecordsException",
        "586": "      // Set both format fields to be the same object, since",
        "587": "      // FormatRecord implements all the necessary interfaces",
        "1224": "  public final void initialize(int pos, FormattingRecords fr, Fonts fonts)",
        "564": "        // Format is not built in, so do a deep copy",
        "565": "        format = new FormatRecord((FormatRecord) fmt.format);",
        "631": "   */",
        "632": "  public int getFormatRecord()",
        "1221": "   * @param fonts the container for the fonts"
      },
      "id": 49201019,
      "filename": "XFRecord.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 1236,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/read/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260380/",
      "md5hash": "f211fcbcd99d5395a88da8a66147af91",
      "lines": {
        "641": "        {",
        "642": "          fr = new FormatRecord(r, settings, FormatRecord.biff7);",
        "38": "import jxl.biff.Fonts;",
        "39": "import jxl.biff.FormatRecord;",
        "40": "import jxl.biff.FormattingRecords;",
        "41": "import jxl.biff.NumFormatRecordsException;",
        "647": "        }",
        "648": "        catch (NumFormatRecordsException e)",
        "670": "        }",
        "634": "      {",
        "635": "        FormatRecord fr = null;",
        "637": "        {",
        "638": "          fr = new FormatRecord(r, settings, FormatRecord.biff8);",
        "671": "        catch (NumFormatRecordsException e)"
      },
      "id": 43260380,
      "filename": "WorkbookParser.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 1236,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/read/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200908/",
      "md5hash": "f211fcbcd99d5395a88da8a66147af91",
      "lines": {
        "641": "        {",
        "642": "          fr = new FormatRecord(r, settings, FormatRecord.biff7);",
        "38": "import jxl.biff.Fonts;",
        "39": "import jxl.biff.FormatRecord;",
        "40": "import jxl.biff.FormattingRecords;",
        "41": "import jxl.biff.NumFormatRecordsException;",
        "647": "        }",
        "648": "        catch (NumFormatRecordsException e)",
        "670": "        }",
        "634": "      {",
        "635": "        FormatRecord fr = null;",
        "637": "        {",
        "638": "          fr = new FormatRecord(r, settings, FormatRecord.biff8);",
        "671": "        catch (NumFormatRecordsException e)"
      },
      "id": 49200908,
      "filename": "WorkbookParser.java"
    },
    {
      "repo": "https://github.com/gpichl/jboss-logmanager.git",
      "language": "Java",
      "linescount": 515,
      "location": "/src/main/java/org/jboss/logmanager",
      "name": "jboss-logmanager",
      "url": "https://searchcode.com/codesearch/view/73952477/",
      "md5hash": "22770d7be553c14ee433972d75b906aa",
      "lines": {
        "408": "        if (formattedMessage == null) {",
        "409": "            formatRecord();",
        "396": "        if (formattedMessage == null) {",
        "397": "            formattedMessage = formatRecord();",
        "414": "    private String formatRecord() {",
        "413": ""
      },
      "id": 73952477,
      "filename": "ExtLogRecord.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 2351,
      "location": "/components/forks/poi/src/loci/poi/hssf/model",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642358/",
      "md5hash": "2f47d8e4aa73ffbba0d056d2a6f68eee",
      "lines": {
        "672": "     * creates a new Cell-type Extneded Format Record and adds it to the end of",
        "673": "     *  ExtendedFormatRecords collection",
        "674": "     *",
        "675": "     * @return ExtendedFormatRecord that was created",
        "677": "",
        "678": "    public ExtendedFormatRecord createCellXF() {",
        "679": "        ExtendedFormatRecord xf = createExtendedFormat();",
        "654": "    /**",
        "655": "     * gets the ExtendedFormatRecord at the given 0-based index",
        "657": "     * @param index of the Extended format record (0-based)",
        "658": "     * @return ExtendedFormatRecord at the given index",
        "660": "",
        "661": "    public ExtendedFormatRecord getExFormatAt(int index) {",
        "664": "        xfptr += index;",
        "665": "        ExtendedFormatRecord retval =",
        "666": "        ( ExtendedFormatRecord ) records.get(xfptr);",
        "667": ""
      },
      "id": 15642358,
      "filename": "Workbook.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 574,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374659/",
      "md5hash": "ba86f9e9948353c90524c43d651e4b11",
      "lines": {
        "203": "      formats.get(new Integer(xfr.getFormatRecord()));",
        "166": "",
        "167": "    if (nextCustomIndexNumber > maxFormatRecordsIndex)",
        "168": "    {",
        "169": "      nextCustomIndexNumber = maxFormatRecordsIndex;",
        "170": "      throw new NumFormatRecordsException();",
        "171": "    }",
        "46": "  /**",
        "47": "   * A hash map of FormatRecords, for random access retrieval when reading",
        "146": "  public final void addFormat(DisplayFormat fr)",
        "147": "    throws NumFormatRecordsException",
        "151": "    if (fr.isInitialized() &&",
        "152": "        fr.getFormatIndex() >= maxFormatRecordsIndex)",
        "201": "",
        "187": "   * represents a date.  First checks against the built in formats, and",
        "188": "   * then checks against the hash map of FormatRecords",
        "202": "    FormatRecord fr = (FormatRecord)"
      },
      "id": 11374659,
      "filename": "FormattingRecords.java"
    },
    {
      "repo": "http://brainstream.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 574,
      "location": "/trunk/core/ReadExperimentDefinition/java/jexcelapi/src/jxl/biff",
      "name": "brainstream",
      "url": "https://searchcode.com/codesearch/view/13919843/",
      "md5hash": "e2cc9711568a884544f5861d1f8ba0e9",
      "lines": {
        "203": "      formats.get(new Integer(xfr.getFormatRecord()));",
        "166": "",
        "167": "    if (nextCustomIndexNumber > maxFormatRecordsIndex)",
        "168": "    {",
        "169": "      nextCustomIndexNumber = maxFormatRecordsIndex;",
        "170": "      throw new NumFormatRecordsException();",
        "171": "    }",
        "46": "  /**",
        "47": "   * A hash map of FormatRecords, for random access retrieval when reading",
        "146": "  public final void addFormat(DisplayFormat fr)",
        "147": "    throws NumFormatRecordsException",
        "151": "    if (fr.isInitialized() &&",
        "152": "        fr.getFormatIndex() >= maxFormatRecordsIndex)",
        "201": "",
        "187": "   * represents a date.  First checks against the built in formats, and",
        "188": "   * then checks against the hash map of FormatRecords",
        "202": "    FormatRecord fr = (FormatRecord)"
      },
      "id": 13919843,
      "filename": "FormattingRecords.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 232,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/write/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374544/",
      "md5hash": "ffe57fab70edb0547bf12f9b4af9bd80",
      "lines": {
        "193": "",
        "194": "        fr = new FormatRecord",
        "214": "    }",
        "198": "",
        "199": "        fr = new FormatRecord",
        "209": "        fr = new FormatRecord",
        "203": "",
        "204": "        fr = new FormatRecord",
        "208": "",
        "177": "      /*",
        "178": "        FormatRecord fr = new FormatRecord",
        "181": "",
        "182": "        fr = new FormatRecord",
        "215": "    catch (NumFormatRecordsException e)",
        "185": "",
        "186": "        fr = new FormatRecord"
      },
      "id": 11374544,
      "filename": "WritableFormattingRecords.java"
    },
    {
      "repo": "http://brainstream.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 232,
      "location": "/trunk/core/ReadExperimentDefinition/java/jexcelapi/src/jxl/write/biff",
      "name": "brainstream",
      "url": "https://searchcode.com/codesearch/view/13919727/",
      "md5hash": "8f61947d081c61a713761bd27a77258a",
      "lines": {
        "193": "",
        "194": "        fr = new FormatRecord",
        "214": "    }",
        "198": "",
        "199": "        fr = new FormatRecord",
        "209": "        fr = new FormatRecord",
        "203": "",
        "204": "        fr = new FormatRecord",
        "208": "",
        "177": "      /*",
        "178": "        FormatRecord fr = new FormatRecord",
        "181": "",
        "182": "        fr = new FormatRecord",
        "215": "    catch (NumFormatRecordsException e)",
        "185": "",
        "186": "        fr = new FormatRecord"
      },
      "id": 13919727,
      "filename": "WritableFormattingRecords.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1688,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374675/",
      "md5hash": "9ac200201b51feec81a95d9bea44664f",
      "lines": {
        "1222": "   * @exception NumFormatRecordsException",
        "579": "      // in this case FormattingRecords should initialize the excelFormat",
        "580": "      // field with an instance of FormatRecord",
        "581": "      Assert.verify(fmt.excelFormat instanceof FormatRecord);",
        "582": "",
        "583": "      // Format is not built in, so do a deep copy",
        "584": "      FormatRecord fr = new FormatRecord((FormatRecord) fmt.excelFormat);",
        "1225": "    throws NumFormatRecordsException",
        "586": "      // Set both format fields to be the same object, since",
        "587": "      // FormatRecord implements all the necessary interfaces",
        "1224": "  public final void initialize(int pos, FormattingRecords fr, Fonts fonts)",
        "564": "        // Format is not built in, so do a deep copy",
        "565": "        format = new FormatRecord((FormatRecord) fmt.format);",
        "631": "   */",
        "632": "  public int getFormatRecord()",
        "1221": "   * @param fonts the container for the fonts"
      },
      "id": 11374675,
      "filename": "XFRecord.java"
    },
    {
      "repo": "http://brainstream.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1688,
      "location": "/trunk/core/ReadExperimentDefinition/java/jexcelapi/src/jxl/biff",
      "name": "brainstream",
      "url": "https://searchcode.com/codesearch/view/13919859/",
      "md5hash": "3cc9cda5a8920795dab5680aef17b001",
      "lines": {
        "1222": "   * @exception NumFormatRecordsException",
        "579": "      // in this case FormattingRecords should initialize the excelFormat",
        "580": "      // field with an instance of FormatRecord",
        "581": "      Assert.verify(fmt.excelFormat instanceof FormatRecord);",
        "582": "",
        "583": "      // Format is not built in, so do a deep copy",
        "584": "      FormatRecord fr = new FormatRecord((FormatRecord) fmt.excelFormat);",
        "1225": "    throws NumFormatRecordsException",
        "586": "      // Set both format fields to be the same object, since",
        "587": "      // FormatRecord implements all the necessary interfaces",
        "1224": "  public final void initialize(int pos, FormattingRecords fr, Fonts fonts)",
        "564": "        // Format is not built in, so do a deep copy",
        "565": "        format = new FormatRecord((FormatRecord) fmt.format);",
        "631": "   */",
        "632": "  public int getFormatRecord()",
        "1221": "   * @param fonts the container for the fonts"
      },
      "id": 13919859,
      "filename": "XFRecord.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 22,
      "source": "Github",
      "id": 2
    },
    {
      "count": 17,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 16,
      "source": "Google Code",
      "id": 1
    }
  ]
}