{
  "matchterm": "BlockStore",
  "previouspage": null,
  "searchterm": "BlockStore",
  "query": "BlockStore",
  "language_filters": [
    {
      "count": 140,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 140,
  "results": [
    {
      "repo": "https://github.com/belong/teiid.git",
      "language": "Java",
      "linescount": 98,
      "location": "/engine/src/main/java/org/teiid/common/buffer/impl",
      "name": "teiid",
      "url": "https://searchcode.com/codesearch/view/73459168/",
      "md5hash": "23b0a3a54dc986e70e0e28e2c658dc74",
      "lines": {
        "40": "class BlockStore {",
        "45": "\t",
        "46": "\tpublic BlockStore(StorageManager storageManager, int blockSize, int blockCountLog, int concurrencyLevel) {",
        "39": " */"
      },
      "id": 73459168,
      "filename": "BlockStore.java"
    },
    {
      "repo": "https://github.com/patmorin/ods.git",
      "language": "Java",
      "linescount": 83,
      "location": "/java/ods",
      "name": "ods",
      "url": "https://searchcode.com/codesearch/view/113275864/",
      "md5hash": "21571f7000572395915bc4d31d158e49",
      "lines": {
        "25": "\t/**",
        "26": "\t * Initialise a BlockStore with block size b",
        "12": " */",
        "13": "class BlockStore<T> {",
        "30": "\tpublic BlockStore() {",
        "29": "\t */"
      },
      "id": 113275864,
      "filename": "BlockStore.java"
    },
    {
      "repo": "http://bitcoinj.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 56,
      "location": "/src/com/google/bitcoin/store",
      "name": "bitcoinj",
      "url": "https://searchcode.com/codesearch/view/5672904/",
      "md5hash": "3468b434a7ffe25778529320ed5b6ea7",
      "lines": {
        "32": "public interface BlockStore {",
        "37": "     */",
        "38": "    void put(StoredBlock block) throws BlockStoreException;",
        "54": "    void setChainHead(StoredBlock chainHead) throws BlockStoreException;",
        "43": "     */",
        "44": "    StoredBlock get(Sha256Hash hash) throws BlockStoreException;",
        "48": "     */",
        "49": "    StoredBlock getChainHead() throws BlockStoreException;",
        "53": "     */",
        "22": "/**",
        "23": " * An implementor of BlockStore saves StoredBlock objects to disk. Different implementations store them in",
        "24": " * different ways. An in-memory implementation (MemoryBlockStore) exists for unit testing but real apps will want to",
        "25": " * use implementations that save to disk.<p>",
        "26": " *",
        "27": " * A BlockStore is a map of hashes to StoredBlock. The hash is the double digest of the BitCoin serialization",
        "31": " */"
      },
      "id": 5672904,
      "filename": "BlockStore.java"
    },
    {
      "repo": "https://code.google.com/p/bitcoinj/",
      "language": "Java",
      "linescount": 62,
      "location": "/core/src/main/java/com/google/bitcoin/store",
      "name": "bitcoinj",
      "url": "https://searchcode.com/codesearch/view/11700263/",
      "md5hash": "5f9ed1bc1cea59c2982e73b44417c8b9",
      "lines": {
        "32": "public interface BlockStore {",
        "37": "     */",
        "38": "    void put(StoredBlock block) throws BlockStoreException;",
        "43": "     */",
        "44": "    StoredBlock get(Sha256Hash hash) throws BlockStoreException;",
        "56": "     */",
        "51": "     */",
        "52": "    StoredBlock getChainHead() throws BlockStoreException;",
        "22": "/**",
        "23": " * An implementor of BlockStore saves StoredBlock objects to disk. Different implementations store them in",
        "24": " * different ways. An in-memory implementation (MemoryBlockStore) exists for unit testing but real apps will want to",
        "57": "    void setChainHead(StoredBlock chainHead) throws BlockStoreException;",
        "26": " *",
        "27": " * A BlockStore is a map of hashes to StoredBlock. The hash is the double digest of the BitCoin serialization",
        "31": " */"
      },
      "id": 11700263,
      "filename": "BlockStore.java"
    },
    {
      "repo": "https://github.com/724150880/teiid.git",
      "language": "Java",
      "linescount": 104,
      "location": "/engine/src/main/java/org/teiid/common/buffer/impl",
      "name": "teiid",
      "url": "https://searchcode.com/codesearch/view/92347273/",
      "md5hash": "ae7f78dea26ecac5774fec229be2c55c",
      "lines": {
        "40": "class BlockStore {",
        "45": "\t",
        "46": "\tpublic BlockStore(StorageManager storageManager, int blockSize, int blockCountLog, int concurrencyLevel) {",
        "39": " */"
      },
      "id": 92347273,
      "filename": "BlockStore.java"
    },
    {
      "repo": "https://github.com/tonit/gradle.git",
      "language": "Java",
      "linescount": 69,
      "location": "/subprojects/core/src/main/groovy/org/gradle/cache/btree",
      "name": "gradle",
      "url": "https://searchcode.com/codesearch/view/114514635/",
      "md5hash": "04ca23fb05ed22800dc937595d93ebf7",
      "lines": {
        "17": "",
        "18": "public interface BlockStore {"
      },
      "id": 114514635,
      "filename": "BlockStore.java"
    },
    {
      "repo": "git://github.com/gradle/gradle.git",
      "language": "Java",
      "linescount": 69,
      "location": "/subprojects/core/src/main/groovy/org/gradle/cache/internal/btree",
      "name": "gradle",
      "url": "https://searchcode.com/codesearch/view/3036013/",
      "md5hash": "8d13b00249d2a55d5e152fe5a7c4922c",
      "lines": {
        "17": "",
        "18": "public interface BlockStore {"
      },
      "id": 3036013,
      "filename": "BlockStore.java"
    },
    {
      "repo": "https://bitbucket.org/agconnor/ariadne.git",
      "language": "Java",
      "linescount": 14,
      "location": "/src/main/java/co/recloud/ariadne/store",
      "name": "ariadne",
      "url": "https://searchcode.com/codesearch/view/44837759/",
      "md5hash": "96e3b5d2f3c7816f3efda5e1bb7b24e1",
      "lines": {
        "9": " */",
        "10": "public interface BlockStore<T> {"
      },
      "id": 44837759,
      "filename": "BlockStore.java"
    },
    {
      "repo": "https://github.com/belong/teiid.git",
      "language": "Java",
      "linescount": 1094,
      "location": "/engine/src/main/java/org/teiid/common/buffer/impl",
      "name": "teiid",
      "url": "https://searchcode.com/codesearch/view/73459105/",
      "md5hash": "33f20878934a654a9e3ea0210d54aede",
      "lines": {
        "386": "\t\t\t\tfor (int i = 0; i < sizeBasedStores.length; i++) {",
        "387": "\t\t\t\t\tBlockStore blockStore = sizeBasedStores[i];",
        "388": "\t\t\t\t\tfor (int segment = 0; segment < blockStore.stores.length; segment++) {",
        "389": "\t\t\t\t\t\tif (!shouldDefrag(blockStore, segment)) {",
        "390": "\t\t\t\t\t\t\tcontinue;",
        "423": "\t\t\t\t\t\t\t\t}",
        "424": "\t\t\t\t\t\t\t\tint bitIndex = relativeBlockToMove + (segment * blockStore.blocksInUse.getBitsPerSegment());",
        "434": "\t\t\t\t\t\t\t\t}",
        "398": "\t\t\t\t\t\t\t\tsleep = true;",
        "399": "\t\t\t\t\t\t\t\tint relativeBlockToMove = blockStore.blocksInUse.compactHighestBitSet(segment);",
        "400": "\t\t\t\t\t\t\t\tif (!shouldDefrag(blockStore, segment)) {",
        "401": "\t\t\t\t\t\t\t\t\ttruncate(blockStore, segment);",
        "402": "\t\t\t\t\t\t\t\t\tbreak;",
        "435": "\t\t\t\t\t\t\t\tint newBlock = blockStore.writeToStorageBlock(info, dis);",
        "404": "\t\t\t\t\t\t\t\t//move the block if possible",
        "405": "\t\t\t\t\t\t\t\tInputStream is = blockStore.stores[segment].createInputStream(relativeBlockToMove * blockStore.blockSize, blockStore.blockSize);"
      },
      "id": 73459105,
      "filename": "BufferFrontedFileStoreCache.java"
    },
    {
      "repo": "git://github.com/SpoutDev/Spout.git",
      "language": "Java",
      "linescount": 2222,
      "location": "/engine/src/main/java/org/spout/engine/world",
      "name": "Spout",
      "url": "https://searchcode.com/codesearch/view/116099926/",
      "md5hash": "172b138bd4ceb56dc424ac6f202f6a09",
      "lines": {
        "257": "\t */",
        "258": "\tprivate SpoutChunk(SpoutWorld world, SpoutRegion region, float x, float y, float z, PopulationState popState, ManagedHashMap extraData, AtomicBlockStore blockStore) {",
        "387": "\t\t\tblockStore.writeUnlock();",
        "386": "\t\t} finally {",
        "261": "\t\tthis.populationState = new AtomicReference<>(popState);",
        "262": "\t\tthis.blockStore = blockStore;",
        "263": "\t\tblockStore.resetDirtyArrays();",
        "264": "",
        "110": "import org.spout.api.util.map.concurrent.AtomicBlockStore;",
        "236": "\tpublic SpoutChunk(SpoutWorld world, SpoutRegion region, float x, float y, float z, AtomicBlockStore blockStore, ManagedHashMap extraData) {",
        "237": "\t\tthis(world, region, x, y, z, PopulationState.UNTOUCHED, extraData, blockStore);",
        "238": "\t}",
        "111": "import org.spout.api.util.map.concurrent.palette.AtomicPaletteBlockStore;",
        "112": "",
        "148": "\t */",
        "149": "\tprotected AtomicBlockStore blockStore;"
      },
      "id": 116099926,
      "filename": "SpoutChunk.java"
    },
    {
      "repo": "https://code.google.com/p/bitcoinj/",
      "language": "Java",
      "linescount": 449,
      "location": "/core/src/main/java/com/google/bitcoin/core",
      "name": "bitcoinj",
      "url": "https://searchcode.com/codesearch/view/58018942/",
      "md5hash": "547ee3617350d9662bb657a7995c747c",
      "lines": {
        "64": "     */",
        "65": "    public FullPrunedBlockChain(NetworkParameters params, FullPrunedBlockStore blockStore) throws BlockStoreException {",
        "34": "/**",
        "35": " * <p>A FullPrunedBlockChain works in conjunction with a {@link FullPrunedBlockStore} to verify all the rules of the",
        "66": "        this(params, new ArrayList<BlockChainListener>(), blockStore);",
        "54": "     */",
        "45": "    /** Keeps a map of block hashes to StoredBlocks. */",
        "46": "    protected final FullPrunedBlockStore blockStore;",
        "19": "import com.google.bitcoin.script.Script;",
        "20": "import com.google.bitcoin.store.BlockStoreException;",
        "21": "import com.google.bitcoin.store.FullPrunedBlockStore;",
        "22": "import org.slf4j.Logger;",
        "55": "    public FullPrunedBlockChain(NetworkParameters params, Wallet wallet, FullPrunedBlockStore blockStore) throws BlockStoreException {",
        "56": "        this(params, new ArrayList<BlockChainListener>(), blockStore);",
        "57": "        if (wallet != null)"
      },
      "id": 58018942,
      "filename": "FullPrunedBlockChain.java"
    },
    {
      "repo": "https://code.google.com/p/bitcoinj/",
      "language": "Java",
      "linescount": 967,
      "location": "/core/src/main/java/com/google/bitcoin/core",
      "name": "bitcoinj",
      "url": "https://searchcode.com/codesearch/view/58018948/",
      "md5hash": "97fce48e5af4b77de09ab02bedebe847",
      "lines": {
        "130": "    public AbstractBlockChain(NetworkParameters params, List<BlockChainListener> listeners,",
        "131": "                              BlockStore blockStore) throws BlockStoreException {",
        "132": "        this.blockStore = blockStore;",
        "133": "        chainHead = blockStore.getChainHead();",
        "134": "        log.info(\"chain head is at height {}:\\n{}\", chainHead.getHeight(), chainHead.getHeader());",
        "45": " *",
        "46": " * <p>An AbstractBlockChain implementation must be connected to a {@link BlockStore} implementation. The chain object",
        "48": " * reading the getting started guide, but briefly, fully validating block chains need fully validating stores. In",
        "49": " * the lightweight SPV mode, a {@link com.google.bitcoin.store.SPVBlockStore} is the right choice.</p>",
        "18": "",
        "19": "import com.google.bitcoin.store.BlockStore;",
        "20": "import com.google.bitcoin.store.BlockStoreException;",
        "21": "import com.google.bitcoin.utils.ListenerRegistration;",
        "182": "     */",
        "180": "    /**",
        "181": "     * Returns the {@link BlockStore} the chain was constructed with. You can use this to iterate over the chain."
      },
      "id": 58018948,
      "filename": "AbstractBlockChain.java"
    },
    {
      "repo": "https://github.com/tonit/gradle.git",
      "language": "Java",
      "linescount": 79,
      "location": "/subprojects/core/src/main/groovy/org/gradle/cache/btree",
      "name": "gradle",
      "url": "https://searchcode.com/codesearch/view/114514607/",
      "md5hash": "9e07ab9700ac349485a13aa65b286faf",
      "lines": {
        "51": "        blockStore.remove(block);",
        "50": "        assert open;",
        "40": "        open = false;",
        "41": "        blockStore.close();",
        "45": "        assert open;",
        "46": "        blockStore.clear();",
        "17": "",
        "18": "public class StateCheckBlockStore implements BlockStore {",
        "19": "    private final BlockStore blockStore;",
        "20": "    private boolean open;",
        "21": "",
        "22": "    public StateCheckBlockStore(BlockStore blockStore) {",
        "23": "        this.blockStore = blockStore;",
        "24": "    }",
        "28": "        open = true;",
        "29": "        blockStore.open(initAction, factory);"
      },
      "id": 114514607,
      "filename": "StateCheckBlockStore.java"
    },
    {
      "repo": "https://bitbucket.org/manilasomil/probmemcache.git",
      "language": "Java",
      "linescount": 177,
      "location": "/core/src/main/java/com/thimbleware/jmemcached/storage/bytebuffer",
      "name": "probmemcache",
      "url": "https://searchcode.com/codesearch/view/51633711/",
      "md5hash": "3b26cf22cd2596084049090b5dd14cd3",
      "lines": {
        "19": "",
        "148": "        blockStore.clear();",
        "147": "        }",
        "47": "                key.bytes.readerIndex(0);",
        "48": "                if (rkey.equals(key.bytes)) return new Region(rsize, rusedBlocks, rstartBlock, blockStore.get(rstartBlock, rsize), expiry, timestamp);",
        "114": "    public Region add(Key key, LocalCacheElement e) {",
        "115": "        Region region = blockStore.alloc(e.bufferSize(), e.getExpire(), System.currentTimeMillis());",
        "20": "    ByteBufferBlockStore blockStore;",
        "23": "",
        "24": "    Partition(ByteBufferBlockStore blockStore) {",
        "25": "        this.blockStore = blockStore;",
        "26": "    }"
      },
      "id": 51633711,
      "filename": "Partition.java"
    },
    {
      "repo": "https://bitbucket.org/manilasomil/probmemcache.git",
      "language": "Java",
      "linescount": 353,
      "location": "/core/src/main/java/com/thimbleware/jmemcached/storage/bytebuffer",
      "name": "probmemcache",
      "url": "https://searchcode.com/codesearch/view/51633714/",
      "md5hash": "eb5ba22753656d145e597ce220a2e5a0",
      "lines": {
        "284": "                    old = region.toValue();",
        "42": "        long capacity = 0;",
        "43": "        for (Partition byteBufferBlockStore : partitions) {",
        "44": "            capacity += byteBufferBlockStore.blockStore.getStoreSizeBytes();",
        "45": "        }",
        "50": "        long memUsed = 0;",
        "51": "        for (Partition byteBufferBlockStore : partitions) {",
        "52": "            memUsed += (byteBufferBlockStore.blockStore.getStoreSizeBytes() - byteBufferBlockStore.blockStore.getFreeBytes());",
        "22": "",
        "23": "    public BlockStorageCacheStorage(int blockStoreBuckets, int ceilingBytesParam, int blockSizeBytes, long maximumSizeBytes, int maximumItemsVal, BlockStoreFactory factory) {",
        "24": "        this.partitions = new Partition[blockStoreBuckets];",
        "25": "",
        "26": "        long bucketSizeBytes = maximumSizeBytes / blockStoreBuckets;",
        "27": "        for (int i = 0; i < blockStoreBuckets; i++) {",
        "28": "            this.partitions[i] = new Partition(factory.manufacture(bucketSizeBytes, blockSizeBytes));",
        "285": "                    partition.blockStore.free(region);"
      },
      "id": 51633714,
      "filename": "BlockStorageCacheStorage.java"
    },
    {
      "repo": "https://bitbucket.org/manilasomil/probmemcache.git",
      "language": "Java",
      "linescount": 292,
      "location": "/cli/src/main/java/com/thimbleware/jmemcached",
      "name": "probmemcache",
      "url": "https://searchcode.com/codesearch/view/51633740/",
      "md5hash": "fa276719909d3e80885f931f8b637571",
      "lines": {
        "269": "        }",
        "266": "        {",
        "267": "           BlockStoreFactory blockStoreFactory = MemoryMappedBlockStore.getFactory();",
        "268": "           storage = new BlockStorageCacheStorage(8, (int)ceiling, blockSize, maxBytes, max_size, blockStoreFactory);",
        "173": "",
        "174": "        boolean blockStore = false;",
        "175": "        if (cmdline.hasOption(\"bl\")) {",
        "176": "            blockStore = true;",
        "177": "        } else if (cmdline.hasOption(\"block-store\")) {",
        "20": "import com.thimbleware.jmemcached.storage.CacheStorage;",
        "21": "import com.thimbleware.jmemcached.storage.bytebuffer.BlockStoreFactory;",
        "22": "import com.thimbleware.jmemcached.storage.bytebuffer.ByteBufferBlockStore;",
        "23": "import org.apache.commons.cli.*;",
        "30": "import com.thimbleware.jmemcached.storage.hash.ConcurrentLinkedHashMap;",
        "31": "import com.thimbleware.jmemcached.storage.mmap.MemoryMappedBlockStore;"
      },
      "id": 51633740,
      "filename": "Main.java"
    },
    {
      "repo": "https://bitbucket.org/bigstemanalytics/probmemcache.git",
      "language": "Java",
      "linescount": 177,
      "location": "/core/src/main/java/com/thimbleware/jmemcached/storage/bytebuffer",
      "name": "probmemcache",
      "url": "https://searchcode.com/codesearch/view/51633921/",
      "md5hash": "3b26cf22cd2596084049090b5dd14cd3",
      "lines": {
        "19": "",
        "148": "        blockStore.clear();",
        "147": "        }",
        "47": "                key.bytes.readerIndex(0);",
        "48": "                if (rkey.equals(key.bytes)) return new Region(rsize, rusedBlocks, rstartBlock, blockStore.get(rstartBlock, rsize), expiry, timestamp);",
        "114": "    public Region add(Key key, LocalCacheElement e) {",
        "115": "        Region region = blockStore.alloc(e.bufferSize(), e.getExpire(), System.currentTimeMillis());",
        "20": "    ByteBufferBlockStore blockStore;",
        "23": "",
        "24": "    Partition(ByteBufferBlockStore blockStore) {",
        "25": "        this.blockStore = blockStore;",
        "26": "    }"
      },
      "id": 51633921,
      "filename": "Partition.java"
    },
    {
      "repo": "https://bitbucket.org/bigstemanalytics/probmemcache.git",
      "language": "Java",
      "linescount": 353,
      "location": "/core/src/main/java/com/thimbleware/jmemcached/storage/bytebuffer",
      "name": "probmemcache",
      "url": "https://searchcode.com/codesearch/view/51633924/",
      "md5hash": "eb5ba22753656d145e597ce220a2e5a0",
      "lines": {
        "284": "                    old = region.toValue();",
        "42": "        long capacity = 0;",
        "43": "        for (Partition byteBufferBlockStore : partitions) {",
        "44": "            capacity += byteBufferBlockStore.blockStore.getStoreSizeBytes();",
        "45": "        }",
        "50": "        long memUsed = 0;",
        "51": "        for (Partition byteBufferBlockStore : partitions) {",
        "52": "            memUsed += (byteBufferBlockStore.blockStore.getStoreSizeBytes() - byteBufferBlockStore.blockStore.getFreeBytes());",
        "22": "",
        "23": "    public BlockStorageCacheStorage(int blockStoreBuckets, int ceilingBytesParam, int blockSizeBytes, long maximumSizeBytes, int maximumItemsVal, BlockStoreFactory factory) {",
        "24": "        this.partitions = new Partition[blockStoreBuckets];",
        "25": "",
        "26": "        long bucketSizeBytes = maximumSizeBytes / blockStoreBuckets;",
        "27": "        for (int i = 0; i < blockStoreBuckets; i++) {",
        "28": "            this.partitions[i] = new Partition(factory.manufacture(bucketSizeBytes, blockSizeBytes));",
        "285": "                    partition.blockStore.free(region);"
      },
      "id": 51633924,
      "filename": "BlockStorageCacheStorage.java"
    },
    {
      "repo": "https://bitbucket.org/bigstemanalytics/probmemcache.git",
      "language": "Java",
      "linescount": 292,
      "location": "/cli/src/main/java/com/thimbleware/jmemcached",
      "name": "probmemcache",
      "url": "https://searchcode.com/codesearch/view/51633950/",
      "md5hash": "fa276719909d3e80885f931f8b637571",
      "lines": {
        "269": "        }",
        "266": "        {",
        "267": "           BlockStoreFactory blockStoreFactory = MemoryMappedBlockStore.getFactory();",
        "268": "           storage = new BlockStorageCacheStorage(8, (int)ceiling, blockSize, maxBytes, max_size, blockStoreFactory);",
        "173": "",
        "174": "        boolean blockStore = false;",
        "175": "        if (cmdline.hasOption(\"bl\")) {",
        "176": "            blockStore = true;",
        "177": "        } else if (cmdline.hasOption(\"block-store\")) {",
        "20": "import com.thimbleware.jmemcached.storage.CacheStorage;",
        "21": "import com.thimbleware.jmemcached.storage.bytebuffer.BlockStoreFactory;",
        "22": "import com.thimbleware.jmemcached.storage.bytebuffer.ByteBufferBlockStore;",
        "23": "import org.apache.commons.cli.*;",
        "30": "import com.thimbleware.jmemcached.storage.hash.ConcurrentLinkedHashMap;",
        "31": "import com.thimbleware.jmemcached.storage.mmap.MemoryMappedBlockStore;"
      },
      "id": 51633950,
      "filename": "Main.java"
    },
    {
      "repo": "https://code.google.com/p/bitcoinj/",
      "language": "Java",
      "linescount": 200,
      "location": "/core/src/main/java/com/google/bitcoin/utils",
      "name": "bitcoinj",
      "url": "https://searchcode.com/codesearch/view/58018870/",
      "md5hash": "d28d57b88d9f41a4ee742e2144a62ff5",
      "lines": {
        "167": "            pair.block = b;",
        "168": "            pair.storedBlock = blockStore.getChainHead().build(b);",
        "169": "            blockStore.put(pair.storedBlock);",
        "170": "            blockStore.setChainHead(pair.storedBlock);",
        "171": "            return pair;",
        "173": "            throw new RuntimeException(e);  // Cannot happen.",
        "174": "        } catch (BlockStoreException e) {",
        "19": "import com.google.bitcoin.core.*;",
        "20": "import com.google.bitcoin.store.BlockStore;",
        "21": "import com.google.bitcoin.store.BlockStoreException;",
        "22": "",
        "154": "    // Emulates receiving a valid block that builds on top of the chain.",
        "155": "    public static BlockPair createFakeBlock(BlockStore blockStore, long timeSeconds, Transaction... transactions) {",
        "156": "        try {",
        "157": "            Block chainHead = blockStore.getChainHead().getHeader();"
      },
      "id": 58018870,
      "filename": "TestUtils.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 76,
      "source": "Github",
      "id": 2
    },
    {
      "count": 55,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 9,
      "source": "Bitbucket",
      "id": 3
    }
  ]
}