{
  "matchterm": "DocumentNode",
  "previouspage": null,
  "searchterm": "DocumentNode",
  "query": "DocumentNode",
  "language_filters": [
    {
      "count": 350,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 350,
  "results": [
    {
      "repo": "https://github.com/andygibson/giftwrap.git",
      "language": "Java",
      "linescount": 129,
      "location": "/src/main/java/org/fluttercode/giftwrap/xml",
      "name": "giftwrap",
      "url": "https://searchcode.com/codesearch/view/111948629/",
      "md5hash": "9d361f7e7e7dbe0e5bbe6ee670b6d306",
      "lines": {
        "34": " */",
        "35": "public class DocumentNode {",
        "38": "\tprivate String content;",
        "39": "\tprivate final List<DocumentNodeAttribute> attributes = new ArrayList<DocumentNodeAttribute>();",
        "40": "\tprivate final List<DocumentNode> nodes = new ArrayList<DocumentNode>();",
        "41": "",
        "42": "\tpublic DocumentNode(String name) {",
        "45": "",
        "46": "\tpublic DocumentNode set(String name, String value) {",
        "47": "\t\tattributes.add(new DocumentNodeAttribute(name, value));",
        "48": "\t\treturn this;",
        "50": "",
        "51": "\tpublic DocumentNode node(String name) {",
        "52": "\t\tDocumentNode newNode = new DocumentNode(name);",
        "53": "\t\tnodes.add(newNode);"
      },
      "id": 111948629,
      "filename": "DocumentNode.java"
    },
    {
      "repo": "https://bitbucket.org/seanf/zanata",
      "language": "Java",
      "linescount": 202,
      "location": "/server/flies-war/src/main/java/net/openl10n/flies/webtrans/client",
      "name": "zanata",
      "url": "https://searchcode.com/codesearch/view/61133489/",
      "md5hash": "23f6d6489d3a553f3ddc2eee702b3018",
      "lines": {
        "128": "",
        "129": "   public DocumentNode(Resources resources, WebTransMessages messages, DocumentInfo doc, CachingDispatchAsync dispatcher, ClickHandler clickHandler, EventBus eventBus)",
        "87": "",
        "109": "               {",
        "110": "                  ClickEvent.fireNativeEvent(event, DocumentNode.this);",
        "49": "",
        "50": "public class DocumentNode extends Node<DocumentInfo>",
        "52": "",
        "53": "   private static DocumentNodeUiBinder uiBinder = GWT.create(DocumentNodeUiBinder.class);",
        "54": "",
        "55": "   interface DocumentNodeUiBinder extends UiBinder<Widget, DocumentNode>",
        "88": "   public DocumentNode(Resources resources, WebTransMessages messages, CachingDispatchAsync dispatcher)",
        "122": "",
        "123": "   public DocumentNode(Resources resources, WebTransMessages messages, DocumentInfo doc, CachingDispatchAsync dispatcher)"
      },
      "id": 61133489,
      "filename": "DocumentNode.java"
    },
    {
      "repo": "https://github.com/borman/phoneme-qtopia.git",
      "language": "Java",
      "linescount": 2496,
      "location": "/jsr226/perseus2/engine/src/module/com/sun/perseus/model",
      "name": "phoneme-qtopia",
      "url": "https://searchcode.com/codesearch/view/104117173/",
      "md5hash": "325eb5cfc603337d32618f68bf47ca22",
      "lines": {
        "640": "     *         <code>DocumentNode</code>.",
        "258": "     * The associated <code>UpdateListener</code> is notified of",
        "259": "     * all mutation events on this <code>DocumentNode</code> tree",
        "324": "     * This allows multiple instances of DocumentNodes to co-exist.",
        "325": "     */",
        "264": "     * The associated <code>RunnableQueue</code>, if any, is",
        "265": "     * managing updates to the <code>DocumentNode</code> and any of",
        "299": "    /**",
        "300": "     * A DocumentNode is a root container. This object provides",
        "322": "    /**",
        "272": "     * The associated <code>RunnableHandler</code> which should be ",
        "273": "     * notified when Runnable acting on this DocumentNode tree are",
        "323": "     * We use a single instance of ModelEvent per DocumentNode instance.",
        "532": "     * @return true if the DocumentNode is in the playing state.",
        "531": "    /**",
        "639": "     * @return the <code>ImageLoader</code> associated to this"
      },
      "id": 104117173,
      "filename": "DocumentNode.java"
    },
    {
      "repo": "git://github.com/borman/phoneme-qtopia.git",
      "language": "Java",
      "linescount": 2496,
      "location": "/jsr226/perseus2/engine/src/module/com/sun/perseus/model",
      "name": "phoneme-qtopia",
      "url": "https://searchcode.com/codesearch/view/14780659/",
      "md5hash": "325eb5cfc603337d32618f68bf47ca22",
      "lines": {
        "640": "     *         <code>DocumentNode</code>.",
        "258": "     * The associated <code>UpdateListener</code> is notified of",
        "259": "     * all mutation events on this <code>DocumentNode</code> tree",
        "324": "     * This allows multiple instances of DocumentNodes to co-exist.",
        "325": "     */",
        "264": "     * The associated <code>RunnableQueue</code>, if any, is",
        "265": "     * managing updates to the <code>DocumentNode</code> and any of",
        "299": "    /**",
        "300": "     * A DocumentNode is a root container. This object provides",
        "322": "    /**",
        "272": "     * The associated <code>RunnableHandler</code> which should be ",
        "273": "     * notified when Runnable acting on this DocumentNode tree are",
        "323": "     * We use a single instance of ModelEvent per DocumentNode instance.",
        "532": "     * @return true if the DocumentNode is in the playing state.",
        "531": "    /**",
        "639": "     * @return the <code>ImageLoader</code> associated to this"
      },
      "id": 14780659,
      "filename": "DocumentNode.java"
    },
    {
      "repo": "https://github.com/hendrasaputra/docrest.git",
      "language": "Java",
      "linescount": 34,
      "location": "/com/gilagi/docrest",
      "name": "docrest",
      "url": "https://searchcode.com/codesearch/view/107525211/",
      "md5hash": "9737403f2897f1aa4cd3b7695bef530a",
      "lines": {
        "2": "",
        "3": "public class DocumentNode {",
        "6": "",
        "7": "    public DocumentNode(String name) {",
        "11": "",
        "12": "    public DocumentNode(String name, String path) {"
      },
      "id": 107525211,
      "filename": "DocumentNode.java"
    },
    {
      "repo": "https://github.com/AlanHohn/pmd.git",
      "language": "Java",
      "linescount": 96,
      "location": "/pmd/src/main/java/net/sourceforge/pmd/lang/ast/xpath/saxon",
      "name": "pmd",
      "url": "https://searchcode.com/codesearch/view/95836241/",
      "md5hash": "77fb5d7f15c582c314a1f01c0b8d7f78",
      "lines": {
        "34": "    /**",
        "35": "     * Construct a DocumentNode, with the given AST Node serving as the root",
        "21": " */",
        "22": "public class DocumentNode extends AbstractNodeInfo implements DocumentInfo {",
        "41": "     */",
        "24": "    /**",
        "25": "     * The root ElementNode of the DocumentNode.",
        "42": "    public DocumentNode(Node node) {"
      },
      "id": 95836241,
      "filename": "DocumentNode.java"
    },
    {
      "repo": "https://code.google.com/p/flies/",
      "language": "Java",
      "linescount": 203,
      "location": "/server/zanata-war/src/main/java/org/zanata/webtrans/client",
      "name": "flies",
      "url": "https://searchcode.com/codesearch/view/8363683/",
      "md5hash": "9512db544dc969236f865fe09e1d89ce",
      "lines": {
        "129": "",
        "130": "   public DocumentNode(Resources resources, WebTransMessages messages, DocumentInfo doc, CachingDispatchAsync dispatcher, ClickHandler clickHandler, EventBus eventBus)",
        "110": "               {",
        "111": "                  ClickEvent.fireNativeEvent(event, DocumentNode.this);",
        "56": "   interface DocumentNodeUiBinder extends UiBinder<Widget, DocumentNode>",
        "50": "",
        "51": "public class DocumentNode extends Node<DocumentInfo>",
        "53": "",
        "54": "   private static DocumentNodeUiBinder uiBinder = GWT.create(DocumentNodeUiBinder.class);",
        "55": "",
        "88": "",
        "89": "   public DocumentNode(Resources resources, WebTransMessages messages, CachingDispatchAsync dispatcher)",
        "123": "",
        "124": "   public DocumentNode(Resources resources, WebTransMessages messages, DocumentInfo doc, CachingDispatchAsync dispatcher)"
      },
      "id": 8363683,
      "filename": "DocumentNode.java"
    },
    {
      "repo": "https://github.com/sielay/ide_core.git",
      "language": "Java",
      "linescount": 153,
      "location": "/plugins/com.aptana.ide.parsing/src/com/aptana/xml",
      "name": "ide_core",
      "url": "https://searchcode.com/codesearch/view/105734805/",
      "md5hash": "29b937333379d5ada85ec2acd7bcd8ad",
      "lines": {
        "48": "\tpublic DocumentNode()",
        "39": " */",
        "40": "public class DocumentNode extends NodeBase",
        "45": "\t/**",
        "46": "\t * DocumentNode",
        "47": "\t */"
      },
      "id": 105734805,
      "filename": "DocumentNode.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 191,
      "location": "/components/forks/poi/src/loci/poi/poifs/filesystem",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642284/",
      "md5hash": "c7b7eca7cfac945ca5b4d26b897fb7d2",
      "lines": {
        "64": "     * create a DocumentNode. This method is not public by design; it",
        "54": "",
        "70": "",
        "55": "public class DocumentNode",
        "71": "    DocumentNode(final DocumentProperty property, final DirectoryNode parent)",
        "188": "    /* **********  END  begin implementation of POIFSViewable ********** */",
        "189": "}   // end public class DocumentNode",
        "63": "    /**"
      },
      "id": 15642284,
      "filename": "DocumentNode.java"
    },
    {
      "repo": "https://bitbucket.org/ronhenkel/morre_cellml.git",
      "language": "Java",
      "linescount": 503,
      "location": "/Morre/src/de/unirostock/extractor/SBML",
      "name": "morre_cellml",
      "url": "https://searchcode.com/codesearch/view/50851112/",
      "md5hash": "344909b0186537a8abcf797a0dcb0f55",
      "lines": {
        "217": "\t\t//create SBML document",
        "69": "\t\t}",
        "70": "\t\treturn documentNode;",
        "270": "\t\t",
        "271": "\t\treturn documentNode;",
        "52": "\t\t",
        "53": "\t\tNode documentNode = null;",
        "55": "\t\ttry {",
        "56": "\t\t\tdocumentNode = extractFromSBML(stream, publication, databaseID);",
        "57": "\t\t} catch (XMLStreamException e) {",
        "58": "\t\t\tdocumentNode = null;",
        "219": "\t\tgraphDB.getReferenceNode().createRelationshipTo(documentNode, DocumentRelTypes.HAS_DOCUMENT);",
        "218": "\t\tNode documentNode = graphDB.createNode();",
        "62": "\t\t} finally {",
        "63": "\t\t\tif (documentNode!=null) {"
      },
      "id": 50851112,
      "filename": "SBMLExtractor.java"
    },
    {
      "repo": "https://bitbucket.org/pedromj/gembus",
      "language": "Java",
      "linescount": 657,
      "location": "/wstrust-api/src/main/java/net/geant/gembus/security/api/ws/trust",
      "name": "gembus",
      "url": "https://searchcode.com/codesearch/view/60337449/",
      "md5hash": "7e8d8e7bf3991333480668f023b33862",
      "lines": {
        "160": "\t\t/*",
        "156": "\t\tNode documentNode = ((DOMSource) request).getNode();",
        "554": "\t * @param documentNode",
        "157": "\t\tElement documentElement = documentNode instanceof Element ? (Element) documentNode",
        "415": "\t\t/*",
        "158": "\t\t\t\t: documentNode instanceof Document ? (Element) ((Document) documentNode)",
        "553": "\t * ",
        "568": "\t */",
        "569": "\tprivate Node findNodeByNameNS(Node documentNode, String localName,",
        "410": "\t\t */",
        "411": "\t\tNode documentNode = ((DOMSource) response).getNode();",
        "412": "\t\tElement documentElement = documentNode instanceof Element ? (Element) documentNode",
        "413": "\t\t\t\t: documentNode instanceof Document ? (Element) ((Document) documentNode)",
        "414": "\t\t\t\t\t\t.getDocumentElement() : (Element) documentNode;",
        "159": "\t\t\t\t\t\t.getDocumentElement() : (Element) documentNode;"
      },
      "id": 60337449,
      "filename": "WSTrustJAXBFactory.java"
    },
    {
      "repo": "https://bitbucket.org/gembus/gembus",
      "language": "Java",
      "linescount": 657,
      "location": "/wstrust-api/src/main/java/net/geant/gembus/security/api/ws/trust",
      "name": "gembus",
      "url": "https://searchcode.com/codesearch/view/63349093/",
      "md5hash": "7e8d8e7bf3991333480668f023b33862",
      "lines": {
        "160": "\t\t/*",
        "156": "\t\tNode documentNode = ((DOMSource) request).getNode();",
        "554": "\t * @param documentNode",
        "157": "\t\tElement documentElement = documentNode instanceof Element ? (Element) documentNode",
        "415": "\t\t/*",
        "158": "\t\t\t\t: documentNode instanceof Document ? (Element) ((Document) documentNode)",
        "553": "\t * ",
        "568": "\t */",
        "569": "\tprivate Node findNodeByNameNS(Node documentNode, String localName,",
        "410": "\t\t */",
        "411": "\t\tNode documentNode = ((DOMSource) response).getNode();",
        "412": "\t\tElement documentElement = documentNode instanceof Element ? (Element) documentNode",
        "413": "\t\t\t\t: documentNode instanceof Document ? (Element) ((Document) documentNode)",
        "414": "\t\t\t\t\t\t.getDocumentElement() : (Element) documentNode;",
        "159": "\t\t\t\t\t\t.getDocumentElement() : (Element) documentNode;"
      },
      "id": 63349093,
      "filename": "WSTrustJAXBFactory.java"
    },
    {
      "repo": "https://bitbucket.org/ronhenkel/morre_cellml.git",
      "language": "Java",
      "linescount": 366,
      "location": "/Morre/src/de/unirostock/extractor/CellML",
      "name": "morre_cellml",
      "url": "https://searchcode.com/codesearch/view/50851116/",
      "md5hash": "c556a90e6a7fb11e2e51f289409ccfa6",
      "lines": {
        "65": "\tpublic static Node extractStoreIndex(String filePath, PublicationWrapper publication, Long databaseID) throws XMLStreamException, IOException{",
        "66": "\t\tNode documentNode = null;",
        "68": "\t\ttry {",
        "69": "\t\t\tdocumentNode = extractFromCellML(filePath, publication, databaseID);",
        "74": "\t\t//in case no node was generated, generate an empty one",
        "75": "\t\tif (documentNode==null) {",
        "77": "\t\t\ttry {",
        "78": "\t\t\t\tdocumentNode = graphDB.createNode();",
        "79": "\t\t\t\tgraphDB.getReferenceNode().createRelationshipTo(documentNode, DocumentRelTypes.HAS_DOCUMENT);\t\t\t\t",
        "80": "\t\t\t\tdocumentNode.setProperty(Property.General.NODETYPE, Property.NodeType.DOCUMENT);",
        "81": "\t\t\t\ttx.success();",
        "85": "\t\t}",
        "86": "\t\treturn documentNode;",
        "91": "\t\t",
        "92": "\t\tNode documentNode = graphDB.createNode();",
        "93": "\t\tgraphDB.getReferenceNode().createRelationshipTo(documentNode, DocumentRelTypes.HAS_DOCUMENT);"
      },
      "id": 50851116,
      "filename": "CellMLExtractor.java"
    },
    {
      "repo": "https://bitbucket.org/seanf/zanata",
      "language": "Java",
      "linescount": 253,
      "location": "/server/flies-war/src/main/java/net/openl10n/flies/webtrans/client",
      "name": "zanata",
      "url": "https://searchcode.com/codesearch/view/61133491/",
      "md5hash": "8a7030a8b0697a0d0784843795714af2",
      "lines": {
        "193": "      clearSelection();",
        "194": "      DocumentNode node = nodes.get(document.getId());",
        "164": "    */",
        "165": "   private final ClickHandler documentNodeClickHandler = new ClickHandler()",
        "77": "",
        "169": "      {",
        "170": "         DocumentNode node = (DocumentNode) event.getSource();",
        "140": "         DocumentInfo doc = sortedList.get(i);",
        "141": "         DocumentNode node;",
        "78": "   private DocumentNode currentSelection;",
        "143": "         {",
        "144": "            node = new DocumentNode(resources, messages, doc, dispatcher, documentNodeClickHandler, eventBus);",
        "149": "            FolderNode folder = new FolderNode(resources, doc);",
        "150": "            node = new DocumentNode(resources, messages, doc, dispatcher, documentNodeClickHandler, eventBus);",
        "79": "",
        "221": "   {",
        "222": "      for (DocumentNode docNode : nodes.values())"
      },
      "id": 61133491,
      "filename": "DocumentListView.java"
    },
    {
      "repo": "https://bitbucket.org/ronhenkel/morre_cellml.git",
      "language": "Java",
      "linescount": 255,
      "location": "/Morre/src/de/unirostock/main",
      "name": "morre_cellml",
      "url": "https://searchcode.com/codesearch/view/50851109/",
      "md5hash": "05396e0a367658b1d48d4b35a3be4423",
      "lines": {
        "208": "\t\t\t\tNode documentNode;",
        "229": "\t\t\t    propertyMap.put(Property.General.FILENAME, filename);",
        "230": "\t\t\t\tExtractor.setExternalDocumentInformation(documentNode, propertyMap);",
        "209": "\t\t\t\ttry {",
        "140": "\t\t\t\tLong dID = Long.valueOf(System.nanoTime());",
        "141": "\t\t\t\tNode documentNode = Extractor.extractStoreIndex(file,null,dID,Property.ModelType.SBML);",
        "207": "\t\t\t\tCellMLExtractorThread cet = new CellMLExtractorThread(url, null, dID);",
        "144": "\t\t\t    propertyMap.put(Property.General.FILENAME, file.getName());",
        "145": "\t\t\t\tExtractor.setExternalDocumentInformation(documentNode, propertyMap);",
        "210": "\t\t\t\t\tdocumentNode = executor.submit(cet).get();",
        "214": "\t\t\t\t\ttry {",
        "215": "\t\t\t\t\t\tdocumentNode = graphDB.createNode();",
        "216": "\t\t\t\t\t\tgraphDB.getReferenceNode().createRelationshipTo(documentNode, DocumentRelTypes.HAS_DOCUMENT);\t\t\t\t",
        "217": "\t\t\t\t\t\tdocumentNode.setProperty(Property.General.NODETYPE, Property.NodeType.DOCUMENT);",
        "218": "\t\t\t\t\t\ttx.success();"
      },
      "id": 50851109,
      "filename": "MainExtractor.java"
    },
    {
      "repo": "https://bitbucket.org/smitdevel/delta.git",
      "language": "Java",
      "linescount": 3111,
      "location": "/source/java/ee/webmedia/alfresco/document/service",
      "name": "delta",
      "url": "https://searchcode.com/codesearch/view/50611432/",
      "md5hash": "24529a2b00521ea9f3d7e1f8aa422414",
      "lines": {
        "320": "",
        "321": "        return documentNode;",
        "323": "",
        "324": "    private NodeRef createDocumentNode(QName documentTypeId, NodeRef parentRef, Map<QName, Serializable> properties) {",
        "347": "        NodeRef document = createDocumentNode(documentTypeId, parentRef, props);",
        "306": "",
        "307": "        NodeRef document = createDocumentNode(documentTypeId, parentRef, properties);",
        "308": "",
        "309": "        final Node documentNode = getDocument(document);",
        "311": "        if (!withoutPropModifyingCallbacks) {",
        "312": "            modifyNode(documentNode, aspects, \"docConstruction\");",
        "346": "",
        "315": "        if (withoutPropModifyingCallbacks && callback != null) {",
        "316": "            callback.doWithNode(documentNode, \"docConstruction\");",
        "349": "",
        "350": "        final Node documentNode = getDocument(document);",
        "351": ""
      },
      "id": 50611432,
      "filename": "DocumentServiceImpl.java"
    },
    {
      "repo": "https://github.com/SilverTeamWork/Silverpeas-Core.git",
      "language": "Java",
      "linescount": 682,
      "location": "/lib-core/src/test-awaiting/java/org/silverpeas/attachment/repository",
      "name": "Silverpeas-Core",
      "url": "https://searchcode.com/codesearch/view/93251957/",
      "md5hash": "fc11ae113aae7257697991b4e3c15313",
      "lines": {
        "201": "      attachNode.setProperty(SLV_PROPERTY_SIZE, \"my test content\".getBytes(\"UTF-8\").length);",
        "202": "      SimpleDocument result = instance.convertNode(documentNode, language);",
        "171": "    try {",
        "172": "      Node documentNode = session.getRootNode().getNode(instanceId).addNode(",
        "173": "          SimpleDocument.ATTACHMENT_PREFIX + oldSilverpeasId, SLV_SIMPLE_DOCUMENT);",
        "174": "      documentNode.setProperty(SLV_PROPERTY_FOREIGN_KEY, foreignId);",
        "175": "      documentNode.setProperty(SLV_PROPERTY_VERSIONED, versionned);",
        "176": "      documentNode.setProperty(SLV_PROPERTY_ORDER, order);",
        "177": "      documentNode.setProperty(SLV_PROPERTY_OLD_ID, oldSilverpeasId);",
        "178": "      documentNode.setProperty(SLV_PROPERTY_INSTANCEID, instanceId);",
        "179": "      documentNode.setProperty(SLV_PROPERTY_OWNER, owner);",
        "180": "      documentNode.setProperty(SLV_PROPERTY_COMMENT, comment);",
        "181": "      documentNode.setProperty(SLV_PROPERTY_ALERT_DATE, alert);",
        "182": "      documentNode.setProperty(SLV_PROPERTY_EXPIRY_DATE, expiry);",
        "183": "      documentNode.setProperty(SLV_PROPERTY_RESERVATION_DATE, reservation);"
      },
      "id": 93251957,
      "filename": "DocumentConverterTest.java"
    },
    {
      "repo": "https://github.com/SilverTeamWork/Silverpeas-Core.git",
      "language": "Java",
      "linescount": 1389,
      "location": "/lib-core/src/main/java/org/silverpeas/attachment/repository",
      "name": "Silverpeas-Core",
      "url": "https://searchcode.com/codesearch/view/93255990/",
      "md5hash": "0bc18b69b7ed1b7efde5fbd5616b95e6",
      "lines": {
        "128": "    document.setId(documentNode.getIdentifier());",
        "129": "    document.setOldSilverpeasId(documentNode.getProperty(SLV_PROPERTY_OLD_ID).getLong());",
        "130": "    return document.getPk();",
        "161": "        versionManager.checkout(targetDocumentNode.getPath());",
        "160": "      if (!targetDocumentNode.isCheckedOut()) {",
        "159": "    if (converter.isVersionedMaster(targetDocumentNode)) {",
        "151": "    session.save();",
        "152": "    Node originDocumentNode = session.getNodeByIdentifier(document.getPk().getId());",
        "153": "    if (!originDocumentNode.getPath().equals(targetDoc.getFullJcrPath())) {",
        "154": "      session.getWorkspace().move(originDocumentNode.getPath(), targetDoc.getFullJcrPath());",
        "155": "    }",
        "156": "    VersionManager versionManager = session.getWorkspace().getVersionManager();",
        "157": "    Node targetDocumentNode = session.getNode(targetDoc.getFullJcrPath());",
        "158": "    boolean mustCheckInVersion = true;",
        "127": "    }"
      },
      "id": 93255990,
      "filename": "DocumentRepository.java"
    },
    {
      "repo": "https://github.com/borman/phoneme-qtopia.git",
      "language": "Java",
      "linescount": 553,
      "location": "/jsr226/perseus2/engine/src/module/com/sun/perseus/model",
      "name": "phoneme-qtopia",
      "url": "https://searchcode.com/codesearch/view/104116778/",
      "md5hash": "090ea38fabdbf5bba38a232c6384b4ad",
      "lines": {
        "128": "        this.documentNode = documentNode;",
        "160": "        DocumentNode documentNode = new DocumentNode();",
        "162": "        SVG svg = new SVG(documentNode);",
        "131": "            svgImageLoader = new SVGImageLoader(this, handler);",
        "132": "            documentNode.setImageLoader(svgImageLoader);",
        "133": "        } else {",
        "134": "            documentNode.setImageLoader(new DefaultImageLoader());",
        "161": "",
        "168": "",
        "167": "        documentNode.setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);",
        "166": "",
        "164": "        svg.setHeight((float) DEFAULT_HEIGHT);",
        "127": "\t\t\tfinal ExternalResourceHandler handler) {",
        "165": "        documentNode.add(svg);",
        "159": "    public static SVGImage createEmptyImage(ExternalResourceHandler handler) {"
      },
      "id": 104116778,
      "filename": "SVGImageImpl.java"
    },
    {
      "repo": "https://github.com/SilverTeamWork/Silverpeas-Core.git",
      "language": "Java",
      "linescount": 356,
      "location": "/lib-core/src/main/java/org/silverpeas/attachment/repository",
      "name": "Silverpeas-Core",
      "url": "https://searchcode.com/codesearch/view/93255996/",
      "md5hash": "567420c3c81946c6c9ac5044481af851",
      "lines": {
        "227": "",
        "228": "  public void fillNode(SimpleDocument document, Node documentNode) throws RepositoryException {",
        "229": "    fillNode(document, documentNode, false);",
        "230": "  }",
        "231": "",
        "232": "  public void fillNode(SimpleDocument document, Node documentNode, boolean skipAttachmentContent)",
        "233": "      throws RepositoryException {",
        "234": "    setDocumentNodeProperties(document, documentNode);",
        "235": "    if (!skipAttachmentContent) {",
        "236": "      Node attachmentNode = getAttachmentNode(document.getAttachment().getNodeName(), documentNode);",
        "240": "",
        "241": "  private void setDocumentNodeProperties(SimpleDocument document, Node documentNode) throws",
        "242": "      RepositoryException {",
        "243": "    addStringProperty(documentNode, SLV_PROPERTY_FOREIGN_KEY, document.getForeignId());",
        "244": "    documentNode.setProperty(SLV_PROPERTY_VERSIONED, document.isVersioned());"
      },
      "id": 93255996,
      "filename": "DocumentConverter.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 212,
      "source": "Github",
      "id": 2
    },
    {
      "count": 109,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 24,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 5,
      "source": "CodePlex",
      "id": 5
    }
  ]
}