{
  "matchterm": "ChunkHeader",
  "previouspage": null,
  "searchterm": "ChunkHeader",
  "query": "ChunkHeader",
  "language_filters": [
    {
      "count": 41,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 41,
  "results": [
    {
      "repo": "git://github.com/tulskiy/musique.git",
      "language": "Java",
      "linescount": 16,
      "location": "/dependencies/wavpack/src/main/java/com/wavpack/encoder",
      "name": "musique",
      "url": "https://searchcode.com/codesearch/view/17497367/",
      "md5hash": "4bed6b77d716c60020852286483b047b",
      "lines": {
        "1": "/*",
        "2": "** ChunkHeader.java",
        "11": "",
        "12": "class ChunkHeader {"
      },
      "id": 17497367,
      "filename": "ChunkHeader.java"
    },
    {
      "repo": "https://github.com/nhminus/jaudiotagger-androidpatch.git",
      "language": "Java",
      "linescount": 64,
      "location": "/src/org/jaudiotagger/audio/aiff",
      "name": "jaudiotagger-androidpatch",
      "url": "https://searchcode.com/codesearch/view/94008205/",
      "md5hash": "3a84b207df39d5fde3d08974afcbd019",
      "lines": {
        "16": "     */",
        "17": "    public ChunkHeader ()",
        "5": "",
        "6": "public class ChunkHeader {"
      },
      "id": 94008205,
      "filename": "ChunkHeader.java"
    },
    {
      "repo": "git://github.com/tulskiy/musique.git",
      "language": "Java",
      "linescount": 16,
      "location": "/dependencies/wavpack/src/main/java/com/wavpack/decoder",
      "name": "musique",
      "url": "https://searchcode.com/codesearch/view/17497348/",
      "md5hash": "69cfad5af2b3d6297f13f8c89689814a",
      "lines": {
        "12": "",
        "3": "/*",
        "4": "** ChunkHeader.java",
        "13": "class ChunkHeader {"
      },
      "id": 17497348,
      "filename": "ChunkHeader.java"
    },
    {
      "repo": "https://github.com/olegp/threedee.git",
      "language": "Java",
      "linescount": 220,
      "location": "/src/com/ionsquare/threedee",
      "name": "threedee",
      "url": "https://searchcode.com/codesearch/view/109941260/",
      "md5hash": "4994c75ba5710742e6ffb04347e97ad6",
      "lines": {
        "96": "    else if(chunk.type == ChunkHeader.CT_NODE) {",
        "200": "  ",
        "201": "  public ChunkHeader()",
        "172": "            ",
        "173": "      ChunkHeader header = new ChunkHeader(in);",
        "205": "  public ChunkHeader(int type, int version, int chunksize, int datasize)",
        "204": "    ",
        "213": "  public ChunkHeader(InputStream in) throws IOException",
        "87": "  {",
        "88": "    ChunkHeader chunk = new ChunkHeader(in);",
        "212": "    ",
        "187": "",
        "188": "class ChunkHeader",
        "93": "    ",
        "94": "    if(chunk.type == ChunkHeader.CT_MESH && parent != null)",
        "95": "      readMesh(in, parent);"
      },
      "id": 109941260,
      "filename": "VisualLoader.java"
    },
    {
      "repo": "http://snova.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 755,
      "location": "/arch/src/org/arch/compress/fastlz",
      "name": "snova",
      "url": "https://searchcode.com/codesearch/view/13950591/",
      "md5hash": "7dc7a6534b131b90e8d4a61e36fd628e",
      "lines": {
        "171": "    byte[] buffer = new byte[blockSize];",
        "359": "",
        "360": "  private int readChunkHeaderId(byte[] chunkHeader) {",
        "361": "    return readChunkHeaderId(chunkHeader, 0);",
        "202": "      // read chunk header. 16 bytes.",
        "203": "      int bytesRead = is.read(chunkHeader);",
        "172": "    byte[] chunkHeader = new byte[16];",
        "362": "  }",
        "216": "",
        "217": "      chunkId = readChunkHeaderId(chunkHeader);",
        "218": "      chunkOptions = readChunkHeaderOptions(chunkHeader);",
        "219": "      chunkSize = readChunkHeaderSize(chunkHeader);",
        "220": "      chunkChecksum = readChunkHeaderChecksum(chunkHeader);",
        "221": "      chunkExtra = readChunkHeaderExtra(chunkHeader);",
        "222": ""
      },
      "id": 13950591,
      "filename": "JFastLZUnpack.java"
    },
    {
      "repo": "https://github.com/kikeEsteban/AudioBrowser.git",
      "language": "Java",
      "linescount": 307,
      "location": "/app/src/main/java/github/com/kikeEsteban/audioBrowser/app/soundfile",
      "name": "AudioBrowser",
      "url": "https://searchcode.com/codesearch/view/96595254/",
      "md5hash": "6798985366d98f93099736dc99fbf5c0",
      "lines": {
        "128": "                ((0xff & chunkHeader[7]) << 24) |",
        "129": "                ((0xff & chunkHeader[6]) << 16) |",
        "130": "                ((0xff & chunkHeader[5]) << 8) |",
        "131": "                ((0xff & chunkHeader[4]));",
        "132": "",
        "133": "            if (chunkHeader[0] == 'f' &&",
        "134": "                chunkHeader[1] == 'm' &&",
        "135": "                chunkHeader[2] == 't' &&",
        "136": "                chunkHeader[3] == ' ') {",
        "137": "                if (chunkLen < 16 || chunkLen > 1024) {",
        "162": "",
        "163": "            } else if (chunkHeader[0] == 'd' &&",
        "164": "                       chunkHeader[1] == 'a' &&",
        "165": "                       chunkHeader[2] == 't' &&",
        "127": "            int chunkLen ="
      },
      "id": 96595254,
      "filename": "CheapWAV.java"
    },
    {
      "repo": "https://github.com/RaoWei/mediautilities.git",
      "language": "Java",
      "linescount": 295,
      "location": "/src/com/ringdroid/soundfile",
      "name": "mediautilities",
      "url": "https://searchcode.com/codesearch/view/97258334/",
      "md5hash": "81e9d00843e1ac2bafd8fd469846b6b3",
      "lines": {
        "128": "\t\t\t\tint chunkLen = ((0xff & chunkHeader[7]) << 24) | ((0xff & chunkHeader[6]) << 16)",
        "129": "\t\t\t\t\t\t| ((0xff & chunkHeader[5]) << 8) | ((0xff & chunkHeader[4]));",
        "130": "",
        "131": "\t\t\t\tif (chunkHeader[0] == 'f' && chunkHeader[1] == 'm' && chunkHeader[2] == 't' && chunkHeader[3] == ' ') {",
        "148": "",
        "149": "\t\t\t\t} else if (chunkHeader[0] == 'd' && chunkHeader[1] == 'a' && chunkHeader[2] == 't'",
        "150": "\t\t\t\t\t\t&& chunkHeader[3] == 'a') {",
        "151": "\t\t\t\t\tif (mChannels == 0 || mSampleRate == 0) {",
        "123": "\t\t\twhile (mOffset + 8 <= mFileSize) {",
        "124": "\t\t\t\tbyte[] chunkHeader = new byte[8];",
        "125": "\t\t\t\tstream.read(chunkHeader, 0, 8);",
        "126": "\t\t\t\tmOffset += 8;",
        "127": ""
      },
      "id": 97258334,
      "filename": "CheapWAV.java"
    },
    {
      "repo": "https://github.com/RaoWei/mediautilities.git",
      "language": "Java",
      "linescount": 121,
      "location": "/src/ac/robinson/mov",
      "name": "mediautilities",
      "url": "https://searchcode.com/codesearch/view/97258403/",
      "md5hash": "187dd2ceb1531b91da13ed4b7354abf6",
      "lines": {
        "97": "",
        "98": "\t\t\t\t} else if (chunkHeader[0] == 'd' && chunkHeader[1] == 'a' && chunkHeader[2] == 't'",
        "99": "\t\t\t\t\t\t&& chunkHeader[3] == 'a') {",
        "100": "\t\t\t\t\tif (config.numberOfChannels == 0 || config.sampleFrequency == 0) {",
        "71": "\t\t\twhile (offset + 8 <= fileSize) {",
        "72": "\t\t\t\tbyte[] chunkHeader = new byte[8];",
        "73": "\t\t\t\tinputWAVStream.read(chunkHeader, 0, 8);",
        "74": "\t\t\t\toffset += 8;",
        "75": "",
        "76": "\t\t\t\tint chunkLen = ((0xff & chunkHeader[7]) << 24) | ((0xff & chunkHeader[6]) << 16)",
        "77": "\t\t\t\t\t\t| ((0xff & chunkHeader[5]) << 8) | ((0xff & chunkHeader[4]));",
        "78": "",
        "79": "\t\t\t\tif (chunkHeader[0] == 'f' && chunkHeader[1] == 'm' && chunkHeader[2] == 't' && chunkHeader[3] == ' ') {"
      },
      "id": 97258403,
      "filename": "WAVtoPCMConverter.java"
    },
    {
      "repo": "https://bitbucket.org/chittoor/tomcat7.git",
      "language": "Java",
      "linescount": 182,
      "location": "/java/org/apache/coyote/http11/filters",
      "name": "tomcat7",
      "url": "https://searchcode.com/codesearch/view/36485046/",
      "md5hash": "74dc2858899d6e61b29d96aa233821dd",
      "lines": {
        "83": "     */",
        "115": "        }",
        "116": "        chunkHeader.setBytes(chunkLength, pos + 1, 9 - pos);",
        "117": "        buffer.doWrite(chunkHeader, res);",
        "118": "",
        "121": "        chunkHeader.setBytes(chunkLength, 8, 2);",
        "120": "",
        "84": "    protected ByteChunk chunkHeader = new ByteChunk();",
        "122": "        buffer.doWrite(chunkHeader, res);",
        "123": ""
      },
      "id": 36485046,
      "filename": "ChunkedOutputFilter.java"
    },
    {
      "repo": "git://github.com/jclouds/jclouds.git",
      "language": "Java",
      "linescount": 218,
      "location": "/apis/s3/src/main/java/org/jclouds/s3/filters",
      "name": "jclouds",
      "url": "https://searchcode.com/codesearch/view/116015360/",
      "md5hash": "252e72c49c0fdef56c065940c76dd739",
      "lines": {
        "144": "      // that plus the user's data to a payload to be written to the request stream",
        "145": "      chunkHeader.append(nonsigExtension + CHUNK_SIGNATURE_HEADER + chunkSignature);",
        "146": "      chunkHeader.append(CLRF);",
        "147": "",
        "148": "      byte[] header = chunkHeader.toString().getBytes(UTF_8);",
        "103": "      // string(IntHexBase(chunk-size)) + \";chunk-signature=\" + signature + \\r\\n + chunk-data + \\r\\n",
        "104": "      StringBuilder chunkHeader = new StringBuilder();",
        "107": "      // IntHexBase(chunk-size)",
        "108": "      chunkHeader.append(Integer.toHexString(dataToChunk.length));"
      },
      "id": 116015360,
      "filename": "ChunkedUploadPayload.java"
    },
    {
      "repo": "https://bitbucket.org/xZise/openscd",
      "language": "Java",
      "linescount": 191,
      "location": "/Tutorials/nehe-source/src/demos/nehe/lesson33",
      "name": "openscd",
      "url": "https://searchcode.com/codesearch/view/57164799/",
      "md5hash": "993b1c24e0d77c6668ec6d4ec8aa26c0",
      "lines": {
        "128": "                fTGA.read(chunkHeaderBuffer);",
        "129": "                chunkHeaderBuffer.flip();",
        "130": "                chunkheader = unsignedByteToInt(chunkHeaderBuffer.get());",
        "131": "            } catch (IOException e) {",
        "164": "                for (short counter = 0; counter < chunkheader; counter++)\t\t\t\t\t// copy the color into the image data as many times as dictated",
        "134": "",
        "135": "            if (chunkheader < 128)\t\t\t\t\t\t\t\t\t\t\t\t// If the ehader is < 128, it means the that is the number of RAW color packets minus 1",
        "136": "            {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// that follow the header",
        "137": "                chunkheader++;\t\t\t\t\t\t\t\t\t\t\t\t\t// add 1 to get number of following color values",
        "138": "                for (short counter = 0; counter < chunkheader; counter++)\t\t// Read RAW color values",
        "139": "                {",
        "161": "                chunkheader -= 127;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Subteact 127 to get rid of the ID bit",
        "163": "",
        "160": "            {",
        "127": "                ByteBuffer chunkHeaderBuffer = ByteBuffer.allocate(1);"
      },
      "id": 57164799,
      "filename": "TGALoader.java"
    },
    {
      "repo": "https://github.com/DWB-eHealth/aws-sdk-java.git",
      "language": "Java",
      "linescount": 355,
      "location": "/src/main/java/com/amazonaws/auth",
      "name": "aws-sdk-java",
      "url": "https://searchcode.com/codesearch/view/99348755/",
      "md5hash": "124ffe58ad153f875a9f9879244a2a84",
      "lines": {
        "336": "            byte[] header = chunkHeader.toString().getBytes(UTF8);",
        "335": "        try {",
        "334": "",
        "333": "        chunkHeader.append(CLRF);",
        "332": "        chunkHeader.append(nonsigExtension + CHUNK_SIGNATURE_HEADER + chunkSignature);",
        "331": "        priorChunkSignature = chunkSignature;",
        "316": "    private byte[] createSignedChunk(byte[] chunkData) {",
        "317": "        StringBuilder chunkHeader = new StringBuilder();",
        "318": "        // chunk-size",
        "319": "        chunkHeader.append(Integer.toHexString(chunkData.length));"
      },
      "id": 99348755,
      "filename": "AwsChunkedEncodingInputStream.java"
    },
    {
      "repo": "https://github.com/javagems/grizzly-http-webserver.git",
      "language": "Java",
      "linescount": 225,
      "location": "/src/com/sun/grizzly/tcp/http11/filters",
      "name": "grizzly-http-webserver",
      "url": "https://searchcode.com/codesearch/view/106227748/",
      "md5hash": "c7bcb28c79b295432126186ec1264084",
      "lines": {
        "128": "     */",
        "129": "    protected ByteChunk chunkHeader = new ByteChunk();",
        "162": "",
        "164": "",
        "165": "        chunkHeader.setBytes(chunkLength, 8, 2);",
        "166": "        buffer.doWrite(chunkHeader, res);",
        "161": "        buffer.doWrite(chunkHeader, res);",
        "160": "        chunkHeader.setBytes(chunkLength, pos + 1, 9 - pos);",
        "167": "",
        "159": "        }"
      },
      "id": 106227748,
      "filename": "ChunkedOutputFilter.java"
    },
    {
      "repo": "http://creativecomputing.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 699,
      "location": "/cc2.0/src/cc/creativecomputing/graphics/texture/format",
      "name": "creativecomputing",
      "url": "https://searchcode.com/codesearch/view/1114169/",
      "md5hash": "6c2feff111e2dd7d864ffdae745e2faf",
      "lines": {
        "544": "\t\tdo {",
        "545": "\t\t\tint chunkheader = theInputStream.read();",
        "578": "\t\t\t\tchunkheader -= 127; // Subteact 127 to get rid of the ID bit",
        "579": "\t\t\t\ttheInputStream.readFully(colorbuffer);",
        "548": "\t\t\t// RAW color packets minus 1",
        "549": "\t\t\tif (chunkheader < 128) { // that follow the header",
        "550": "\t\t\t\tchunkheader++; // add 1 to get number of following color values",
        "551": "\t\t\t\t// Read RAW color values",
        "552": "\t\t\t\tfor (short counter = 0; counter < chunkheader; counter++) {",
        "582": "\t\t\t\tfor (short counter = 0; counter < chunkheader; counter++) { // by the header",
        "577": "\t\t\t\t// chunkheader > 128 RLE data, next color reapeated chunkheader - 127 times",
        "576": "\t\t\t} else {",
        "581": "\t\t\t\t// copy the color into the image data as many times as dictated"
      },
      "id": 1114169,
      "filename": "CCTGAImage.java"
    },
    {
      "repo": "git://github.com/jenkinsci/jenkins.git",
      "language": "Java",
      "linescount": 204,
      "location": "/core/src/main/java/hudson/util",
      "name": "jenkins",
      "url": "https://searchcode.com/codesearch/view/1814160/",
      "md5hash": "2407ff302e04ae55f3a3b7ab22659f96",
      "lines": {
        "96": "            stream.write(chunkHeader, 0, chunkHeader.length);",
        "97": "            stream.write(cache, 0, cachePosition);",
        "114": "        byte chunkHeader[] = (Integer.toHexString(cachePosition + len) + \"\\r\\n\").getBytes(\"US-ASCII\");",
        "115": "        stream.write(chunkHeader, 0, chunkHeader.length);",
        "116": "        stream.write(cache, 0, cachePosition);",
        "113": "    protected void flushCacheWithAppend(byte bufferToAppend[], int off, int len) throws IOException {",
        "94": "        if (cachePosition > 0) {",
        "95": "            byte chunkHeader[] = (Integer.toHexString(cachePosition) + \"\\r\\n\").getBytes(\"US-ASCII\");"
      },
      "id": 1814160,
      "filename": "ChunkedOutputStream.java"
    },
    {
      "repo": "http://google-enterprise-connector-sharepoint.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 203,
      "location": "/projects/ApacheHttpClient/src/java/org/apache/commons/httpclient",
      "name": "google-enterprise-connector-sharepoint",
      "url": "https://searchcode.com/codesearch/view/7069019/",
      "md5hash": "c48e8a7151f36817b700387eb8ed8d3f",
      "lines": {
        "96": "        if (cachePosition > 0) {",
        "97": "            byte chunkHeader[] = EncodingUtil.getAsciiBytes(",
        "98": "                    Integer.toHexString(cachePosition) + \"\\r\\n\");",
        "99": "            stream.write(chunkHeader, 0, chunkHeader.length);",
        "116": "    protected void flushCacheWithAppend(byte bufferToAppend[], int off, int len) throws IOException {",
        "117": "        byte chunkHeader[] = EncodingUtil.getAsciiBytes(",
        "118": "                Integer.toHexString(cachePosition + len) + \"\\r\\n\");",
        "119": "        stream.write(chunkHeader, 0, chunkHeader.length);"
      },
      "id": 7069019,
      "filename": "ChunkedOutputStream.java"
    },
    {
      "repo": "https://github.com/kanishin/tomcat.git",
      "language": "Java",
      "linescount": 181,
      "location": "/java/org/apache/coyote/http11/filters",
      "name": "tomcat",
      "url": "https://searchcode.com/codesearch/view/69809916/",
      "md5hash": "edbc872302766c5402244dac5ff2ccf5",
      "lines": {
        "82": "     */",
        "115": "        chunkHeader.setBytes(chunkLength, pos + 1, 9 - pos);",
        "116": "        buffer.doWrite(chunkHeader, res);",
        "117": "",
        "119": "",
        "120": "        chunkHeader.setBytes(chunkLength, 8, 2);",
        "121": "        buffer.doWrite(chunkHeader, res);",
        "122": "",
        "83": "    protected final ByteChunk chunkHeader = new ByteChunk();",
        "114": "        }"
      },
      "id": 69809916,
      "filename": "ChunkedOutputFilter.java"
    },
    {
      "repo": "https://bitbucket.org/kejace/snakesnest",
      "language": "Java",
      "linescount": 288,
      "location": "/src-core/de/jreality/util",
      "name": "snakesnest",
      "url": "https://searchcode.com/codesearch/view/124434749/",
      "md5hash": "400b95532a0e12635785baae5e7ac808",
      "lines": {
        "224": "      do{",
        "225": "        int chunkheader = 0;",
        "226": "        chunkheader = (int)readUnsignedByte();",
        "227": "//        System.out.println(chunkheader);",
        "228": "        if(chunkheader < 128){",
        "229": "          chunkheader++;",
        "230": "          for(short counter = 0; counter < chunkheader; counter++){",
        "231": "",
        "247": "        else{",
        "248": "          chunkheader -= 127;",
        "249": "          readColorBuffer(colorbuffer);",
        "250": "          for(short counter = 0; counter < chunkheader; counter++){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// by the header"
      },
      "id": 124434749,
      "filename": "TargaFile.java"
    },
    {
      "repo": "https://github.com/bsimpson/halcyon.git",
      "language": "Java",
      "linescount": 203,
      "location": "/clients/java/src/org/apache/commons/httpclient",
      "name": "halcyon",
      "url": "https://searchcode.com/codesearch/view/137569554/",
      "md5hash": "34bf6ec5c1a95608b45091f5303604ec",
      "lines": {
        "96": "        if (cachePosition > 0) {",
        "97": "            byte chunkHeader[] = EncodingUtil.getAsciiBytes(",
        "98": "                    Integer.toHexString(cachePosition) + \"\\r\\n\");",
        "99": "            stream.write(chunkHeader, 0, chunkHeader.length);",
        "116": "    protected void flushCacheWithAppend(byte bufferToAppend[], int off, int len) throws IOException {",
        "117": "        byte chunkHeader[] = EncodingUtil.getAsciiBytes(",
        "118": "                Integer.toHexString(cachePosition + len) + \"\\r\\n\");",
        "119": "        stream.write(chunkHeader, 0, chunkHeader.length);"
      },
      "id": 137569554,
      "filename": "ChunkedOutputStream.java"
    },
    {
      "repo": "https://github.com/uggedal/halcyon.git",
      "language": "Java",
      "linescount": 203,
      "location": "/clients/java/src/org/apache/commons/httpclient",
      "name": "halcyon",
      "url": "https://searchcode.com/codesearch/view/137786039/",
      "md5hash": "34bf6ec5c1a95608b45091f5303604ec",
      "lines": {
        "96": "        if (cachePosition > 0) {",
        "97": "            byte chunkHeader[] = EncodingUtil.getAsciiBytes(",
        "98": "                    Integer.toHexString(cachePosition) + \"\\r\\n\");",
        "99": "            stream.write(chunkHeader, 0, chunkHeader.length);",
        "116": "    protected void flushCacheWithAppend(byte bufferToAppend[], int off, int len) throws IOException {",
        "117": "        byte chunkHeader[] = EncodingUtil.getAsciiBytes(",
        "118": "                Integer.toHexString(cachePosition + len) + \"\\r\\n\");",
        "119": "        stream.write(chunkHeader, 0, chunkHeader.length);"
      },
      "id": 137786039,
      "filename": "ChunkedOutputStream.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 32,
      "source": "Github",
      "id": 2
    },
    {
      "count": 5,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 4,
      "source": "Google Code",
      "id": 1
    }
  ]
}