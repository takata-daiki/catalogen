{
  "matchterm": "FormulaRecord",
  "previouspage": null,
  "searchterm": "FormulaRecord",
  "query": "FormulaRecord",
  "language_filters": [
    {
      "count": 32,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 32,
  "results": [
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 379,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260344/",
      "md5hash": "0bfc1d3098d99c2f69557fd9a1cece56",
      "lines": {
        "43": " */",
        "81": "   */",
        "44": "public class FormulaRecord extends CellValue implements FormulaData",
        "107": "   */",
        "108": "  protected FormulaRecord(int c, int r, FormulaRecord fr)",
        "48": "   */",
        "49": "  private static Logger logger = Logger.getLogger(FormulaRecord.class);",
        "82": "  public FormulaRecord(int c, int r, String f)",
        "310": "   * A dummy implementation to keep the compiler quiet.  This object needs",
        "311": "   * to be instantiated from ReadFormulaRecord",
        "122": "   */",
        "123": "  protected FormulaRecord(int c, int r, ReadFormulaRecord rfr)",
        "93": "   */",
        "94": "  public FormulaRecord(int c, int r, String f, CellFormat st)"
      },
      "id": 43260344,
      "filename": "FormulaRecord.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 379,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200872/",
      "md5hash": "0bfc1d3098d99c2f69557fd9a1cece56",
      "lines": {
        "43": " */",
        "81": "   */",
        "44": "public class FormulaRecord extends CellValue implements FormulaData",
        "107": "   */",
        "108": "  protected FormulaRecord(int c, int r, FormulaRecord fr)",
        "48": "   */",
        "49": "  private static Logger logger = Logger.getLogger(FormulaRecord.class);",
        "82": "  public FormulaRecord(int c, int r, String f)",
        "310": "   * A dummy implementation to keep the compiler quiet.  This object needs",
        "311": "   * to be instantiated from ReadFormulaRecord",
        "122": "   */",
        "123": "  protected FormulaRecord(int c, int r, ReadFormulaRecord rfr)",
        "93": "   */",
        "94": "  public FormulaRecord(int c, int r, String f, CellFormat st)"
      },
      "id": 49200872,
      "filename": "FormulaRecord.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 279,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/read/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260430/",
      "md5hash": "b5ecd8987358dd49ac181892525c9c73",
      "lines": {
        "128": "        SharedNumberFormulaRecord snfr = new SharedNumberFormulaRecord",
        "161": "      // we have a string which evaluates to null",
        "162": "      formula = new StringFormulaRecord(t, fr, es, nt, si);",
        "35": " */",
        "36": "class FormulaRecord extends CellValue",
        "166": "      // it is most assuredly a number",
        "167": "      formula = new NumberFormulaRecord(t, fr, es, nt, si);",
        "40": "   */",
        "41": "  private static Logger logger = Logger.getLogger(FormulaRecord.class);",
        "141": "      // we have a string",
        "142": "      formula = new StringFormulaRecord(t, excelFile, fr, es, nt, si, ws);",
        "149": "      // multiple values.  Thanks to Frank for spotting this",
        "150": "      formula = new BooleanFormulaRecord(t, fr, es, nt, si);",
        "156": "      // The cell is in error",
        "157": "      formula = new ErrorFormulaRecord(t, fr, es, nt, si);",
        "127": "        double value = DoubleHelper.getIEEEDouble(data, 6);"
      },
      "id": 43260430,
      "filename": "FormulaRecord.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 279,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/read/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200958/",
      "md5hash": "b5ecd8987358dd49ac181892525c9c73",
      "lines": {
        "128": "        SharedNumberFormulaRecord snfr = new SharedNumberFormulaRecord",
        "161": "      // we have a string which evaluates to null",
        "162": "      formula = new StringFormulaRecord(t, fr, es, nt, si);",
        "35": " */",
        "36": "class FormulaRecord extends CellValue",
        "166": "      // it is most assuredly a number",
        "167": "      formula = new NumberFormulaRecord(t, fr, es, nt, si);",
        "40": "   */",
        "41": "  private static Logger logger = Logger.getLogger(FormulaRecord.class);",
        "141": "      // we have a string",
        "142": "      formula = new StringFormulaRecord(t, excelFile, fr, es, nt, si, ws);",
        "149": "      // multiple values.  Thanks to Frank for spotting this",
        "150": "      formula = new BooleanFormulaRecord(t, fr, es, nt, si);",
        "156": "      // The cell is in error",
        "157": "      formula = new ErrorFormulaRecord(t, fr, es, nt, si);",
        "127": "        double value = DoubleHelper.getIEEEDouble(data, 6);"
      },
      "id": 49200958,
      "filename": "FormulaRecord.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 379,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/write/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374542/",
      "md5hash": "a34fc81c43d5a2159689125ec0bbad7c",
      "lines": {
        "43": " */",
        "81": "   */",
        "44": "public class FormulaRecord extends CellValue implements FormulaData",
        "107": "   */",
        "108": "  protected FormulaRecord(int c, int r, FormulaRecord fr)",
        "48": "   */",
        "49": "  private static Logger logger = Logger.getLogger(FormulaRecord.class);",
        "82": "  public FormulaRecord(int c, int r, String f)",
        "310": "   * A dummy implementation to keep the compiler quiet.  This object needs",
        "311": "   * to be instantiated from ReadFormulaRecord",
        "122": "   */",
        "123": "  protected FormulaRecord(int c, int r, ReadFormulaRecord rfr)",
        "93": "   */",
        "94": "  public FormulaRecord(int c, int r, String f, CellFormat st)"
      },
      "id": 11374542,
      "filename": "FormulaRecord.java"
    },
    {
      "repo": "http://brainstream.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 379,
      "location": "/trunk/core/ReadExperimentDefinition/java/jexcelapi/src/jxl/write/biff",
      "name": "brainstream",
      "url": "https://searchcode.com/codesearch/view/13919725/",
      "md5hash": "bf9bceecb25f4613b83c89f9862298b9",
      "lines": {
        "43": " */",
        "81": "   */",
        "44": "public class FormulaRecord extends CellValue implements FormulaData",
        "107": "   */",
        "108": "  protected FormulaRecord(int c, int r, FormulaRecord fr)",
        "48": "   */",
        "49": "  private static Logger logger = Logger.getLogger(FormulaRecord.class);",
        "82": "  public FormulaRecord(int c, int r, String f)",
        "310": "   * A dummy implementation to keep the compiler quiet.  This object needs",
        "311": "   * to be instantiated from ReadFormulaRecord",
        "122": "   */",
        "123": "  protected FormulaRecord(int c, int r, ReadFormulaRecord rfr)",
        "93": "   */",
        "94": "  public FormulaRecord(int c, int r, String f, CellFormat st)"
      },
      "id": 13919725,
      "filename": "FormulaRecord.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 572,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642396/",
      "md5hash": "097b310c8bca6adc7d7f77161df42564",
      "lines": {
        "64": "",
        "65": "public class FormulaRecord",
        "549": "    public Object clone() {",
        "550": "      FormulaRecord rec = new FormulaRecord();",
        "42": "/*",
        "43": " * FormulaRecord.java",
        "108": "",
        "109": "    public FormulaRecord(RecordInputStream in)",
        "92": "",
        "93": "    /** Creates new FormulaRecord */",
        "94": "",
        "95": "    public FormulaRecord()"
      },
      "id": 15642396,
      "filename": "FormulaRecord.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 279,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/read/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374404/",
      "md5hash": "b5ecd8987358dd49ac181892525c9c73",
      "lines": {
        "128": "        SharedNumberFormulaRecord snfr = new SharedNumberFormulaRecord",
        "161": "      // we have a string which evaluates to null",
        "162": "      formula = new StringFormulaRecord(t, fr, es, nt, si);",
        "35": " */",
        "36": "class FormulaRecord extends CellValue",
        "166": "      // it is most assuredly a number",
        "167": "      formula = new NumberFormulaRecord(t, fr, es, nt, si);",
        "40": "   */",
        "41": "  private static Logger logger = Logger.getLogger(FormulaRecord.class);",
        "141": "      // we have a string",
        "142": "      formula = new StringFormulaRecord(t, excelFile, fr, es, nt, si, ws);",
        "149": "      // multiple values.  Thanks to Frank for spotting this",
        "150": "      formula = new BooleanFormulaRecord(t, fr, es, nt, si);",
        "156": "      // The cell is in error",
        "157": "      formula = new ErrorFormulaRecord(t, fr, es, nt, si);",
        "127": "        double value = DoubleHelper.getIEEEDouble(data, 6);"
      },
      "id": 11374404,
      "filename": "FormulaRecord.java"
    },
    {
      "repo": "http://brainstream.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 279,
      "location": "/trunk/core/ReadExperimentDefinition/java/jexcelapi/src/jxl/read/biff",
      "name": "brainstream",
      "url": "https://searchcode.com/codesearch/view/13919582/",
      "md5hash": "89a6d79f9c059ab5760f45a52ab7d8a7",
      "lines": {
        "128": "        SharedNumberFormulaRecord snfr = new SharedNumberFormulaRecord",
        "161": "      // we have a string which evaluates to null",
        "162": "      formula = new StringFormulaRecord(t, fr, es, nt, si);",
        "35": " */",
        "36": "class FormulaRecord extends CellValue",
        "166": "      // it is most assuredly a number",
        "167": "      formula = new NumberFormulaRecord(t, fr, es, nt, si);",
        "40": "   */",
        "41": "  private static Logger logger = Logger.getLogger(FormulaRecord.class);",
        "141": "      // we have a string",
        "142": "      formula = new StringFormulaRecord(t, excelFile, fr, es, nt, si, ws);",
        "149": "      // multiple values.  Thanks to Frank for spotting this",
        "150": "      formula = new BooleanFormulaRecord(t, fr, es, nt, si);",
        "156": "      // The cell is in error",
        "157": "      formula = new ErrorFormulaRecord(t, fr, es, nt, si);",
        "127": "        double value = DoubleHelper.getIEEEDouble(data, 6);"
      },
      "id": 13919582,
      "filename": "FormulaRecord.java"
    },
    {
      "repo": "https://github.com/solsson/tika.git",
      "language": "Java",
      "linescount": 595,
      "location": "/tika-parsers/src/main/java/org/apache/tika/parser/microsoft",
      "name": "tika",
      "url": "https://searchcode.com/codesearch/view/111785559/",
      "md5hash": "6b55090236799f49ee0f5bd7d54bbbac",
      "lines": {
        "48": "import org.apache.poi.hssf.record.FormatRecord;",
        "49": "import org.apache.poi.hssf.record.FormulaRecord;",
        "261": "                hssfRequest.addListener(formatListener, SSTRecord.sid);",
        "262": "                hssfRequest.addListener(formatListener, FormulaRecord.sid);",
        "361": "",
        "362": "            case FormulaRecord.sid: // Cell value from a formula",
        "363": "                FormulaRecord formula = (FormulaRecord) record;",
        "364": "                addCell(record, new NumberCell(formula.getValue(), format));"
      },
      "id": 111785559,
      "filename": "ExcelExtractor.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 1850,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/read/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260387/",
      "md5hash": "7f91270abbfb3387b7abcd30255c0a02",
      "lines": {
        "640": "          sharedFormula = (BaseSharedFormulaRecord) fr.getFormula();",
        "641": "",
        "1218": "    boolean added = false;",
        "1219": "    SharedFormulaRecord sfr = null;",
        "1222": "    {",
        "673": "                cell = new DateFormulaRecord(nfr,",
        "639": "          BaseSharedFormulaRecord prevSharedFormula = sharedFormula;",
        "1223": "      sfr = (SharedFormulaRecord ) sharedFormulas.get(i);",
        "1216": "  private boolean addToSharedFormulas(BaseSharedFormulaRecord fr)",
        "1177": "    {",
        "1178": "      SharedFormulaRecord sfr = (SharedFormulaRecord) i.next();",
        "672": "              {",
        "669": "            {",
        "670": "              NumberFormulaRecord nfr = (NumberFormulaRecord) fr.getFormula();",
        "1215": "   */"
      },
      "id": 43260387,
      "filename": "SheetReader.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 1850,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/read/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200915/",
      "md5hash": "7f91270abbfb3387b7abcd30255c0a02",
      "lines": {
        "640": "          sharedFormula = (BaseSharedFormulaRecord) fr.getFormula();",
        "641": "",
        "1218": "    boolean added = false;",
        "1219": "    SharedFormulaRecord sfr = null;",
        "1222": "    {",
        "673": "                cell = new DateFormulaRecord(nfr,",
        "639": "          BaseSharedFormulaRecord prevSharedFormula = sharedFormula;",
        "1223": "      sfr = (SharedFormulaRecord ) sharedFormulas.get(i);",
        "1216": "  private boolean addToSharedFormulas(BaseSharedFormulaRecord fr)",
        "1177": "    {",
        "1178": "      SharedFormulaRecord sfr = (SharedFormulaRecord) i.next();",
        "672": "              {",
        "669": "            {",
        "670": "              NumberFormulaRecord nfr = (NumberFormulaRecord) fr.getFormula();",
        "1215": "   */"
      },
      "id": 49200915,
      "filename": "SheetReader.java"
    },
    {
      "repo": "https://github.com/xiezhaohui/DataViewer.git",
      "language": "Java",
      "linescount": 304,
      "location": "/ETL/src/com/util",
      "name": "DataViewer",
      "url": "https://searchcode.com/codesearch/view/68613461/",
      "md5hash": "8bd64dddea629578a6d8e6f976c7b348",
      "lines": {
        "22": "import org.apache.poi.hssf.record.BoundSheetRecord;",
        "23": "import org.apache.poi.hssf.record.FormulaRecord;",
        "168": "",
        "169": "\t\tcase FormulaRecord.sid:",
        "170": "\t\t\tFormulaRecord frec = (FormulaRecord) record;",
        "171": ""
      },
      "id": 68613461,
      "filename": "HxlsAbstract.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 220,
      "location": "/components/forks/poi/src/loci/poi/hssf/record/aggregates",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642592/",
      "md5hash": "fa845485a51e4538ffbac8c3b6be9a3c",
      "lines": {
        "128": "        return formulaRecord;",
        "148": "        return formulaRecord.isBefore( i );",
        "147": "    {",
        "137": "    {",
        "138": "        return formulaRecord.isEqual( i );",
        "142": "    {",
        "143": "        return formulaRecord.isAfter( i );",
        "51": " */",
        "52": "public class FormulaRecordAggregate",
        "153": "        return formulaRecord.getXFIndex();",
        "152": "    {",
        "57": "",
        "58": "    private FormulaRecord formulaRecord;",
        "157": "    {",
        "158": "        formulaRecord.setXFIndex( xf );",
        "127": "    {"
      },
      "id": 15642592,
      "filename": "FormulaRecordAggregate.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 282,
      "location": "/components/forks/poi/src/loci/poi/hssf/dev",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642597/",
      "md5hash": "8c0f3f19688417e8138fee787add6462",
      "lines": {
        "100": "",
        "101": "            if (record.getSid() == FormulaRecord.sid)",
        "166": "    /**",
        "103": "               if (list) {",
        "104": "                    listFormula((FormulaRecord) record);",
        "105": "               }else {",
        "106": "                    parseFormulaRecord(( FormulaRecord ) record);",
        "167": "     * Method parseFormulaRecord",
        "173": "",
        "174": "    public void parseFormulaRecord(FormulaRecord record)",
        "111": "    ",
        "112": "    private void listFormula(FormulaRecord record) {",
        "213": "    ",
        "214": "    private String composeFormula(FormulaRecord record)",
        "187": "",
        "188": "    private String formulaString(FormulaRecord record) {"
      },
      "id": 15642597,
      "filename": "FormulaViewer.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1850,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/read/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374407/",
      "md5hash": "7f91270abbfb3387b7abcd30255c0a02",
      "lines": {
        "640": "          sharedFormula = (BaseSharedFormulaRecord) fr.getFormula();",
        "641": "",
        "1218": "    boolean added = false;",
        "1219": "    SharedFormulaRecord sfr = null;",
        "1222": "    {",
        "673": "                cell = new DateFormulaRecord(nfr,",
        "639": "          BaseSharedFormulaRecord prevSharedFormula = sharedFormula;",
        "1223": "      sfr = (SharedFormulaRecord ) sharedFormulas.get(i);",
        "1216": "  private boolean addToSharedFormulas(BaseSharedFormulaRecord fr)",
        "1177": "    {",
        "1178": "      SharedFormulaRecord sfr = (SharedFormulaRecord) i.next();",
        "672": "              {",
        "669": "            {",
        "670": "              NumberFormulaRecord nfr = (NumberFormulaRecord) fr.getFormula();",
        "1215": "   */"
      },
      "id": 11374407,
      "filename": "SheetReader.java"
    },
    {
      "repo": "http://brainstream.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 1901,
      "location": "/trunk/core/ReadExperimentDefinition/java/jexcelapi/src/jxl/read/biff",
      "name": "brainstream",
      "url": "https://searchcode.com/codesearch/view/13919585/",
      "md5hash": "64420fd674275ba389b00cf0c5263661",
      "lines": {
        "640": "          BaseSharedFormulaRecord prevSharedFormula = sharedFormula;",
        "641": "          sharedFormula = (BaseSharedFormulaRecord) fr.getFormula();",
        "642": "",
        "1219": "    boolean added = false;",
        "1220": "    SharedFormulaRecord sfr = null;",
        "673": "              {",
        "639": "        {",
        "1217": "  private boolean addToSharedFormulas(BaseSharedFormulaRecord fr)",
        "1223": "    {",
        "1216": "   */",
        "674": "                cell = new DateFormulaRecord(nfr,",
        "1224": "      sfr = (SharedFormulaRecord ) sharedFormulas.get(i);",
        "1178": "    {",
        "1179": "      SharedFormulaRecord sfr = (SharedFormulaRecord) i.next();",
        "670": "            {",
        "671": "              NumberFormulaRecord nfr = (NumberFormulaRecord) fr.getFormula();"
      },
      "id": 13919585,
      "filename": "SheetReader.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 3300,
      "location": "/components/forks/poi/src/loci/poi/hssf/model",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642365/",
      "md5hash": "1e8d548d196dc1063c30d9430b35b9f5",
      "lines": {
        "384": "                Record fmAggRec = fmAgg.getFormulaRecord();",
        "385": "                if (fmAggRec != null)",
        "936": "",
        "393": "          }",
        "394": "        } else if (rec instanceof FormulaRecordAggregate) {  //Is this required now??",
        "395": "          FormulaRecordAggregate fmAgg = (FormulaRecordAggregate)rec;",
        "396": "          Record fmAggRec = fmAgg.getFormulaRecord();",
        "397": "          if (fmAggRec != null)",
        "46": "import loci.poi.hssf.record.aggregates.FormulaRecordAggregate;",
        "45": "import loci.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;",
        "945": "        }, formula);",
        "946": "        FormulaRecord rec = new FormulaRecord();",
        "937": "    //public FormulaRecord createFormula(short row, short col, String formula)",
        "938": "    public FormulaRecord createFormula(int row, short col, String formula)",
        "383": "                FormulaRecordAggregate fmAgg = (FormulaRecordAggregate)valRec;"
      },
      "id": 15642365,
      "filename": "Sheet.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 368,
      "location": "/components/forks/poi/src/loci/poi/hssf/record/aggregates",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642593/",
      "md5hash": "f3d6bf42f5d9482d498467f2cea55ab5",
      "lines": {
        "160": "                break;",
        "161": "            } else if (rec instanceof SharedFormulaRecord) {",
        "162": "            \tsharedFormulas.add(rec);",
        "163": "            } else if (rec instanceof FormulaRecord)",
        "164": "            {",
        "165": "              FormulaRecord formula = (FormulaRecord)rec;",
        "167": "                Record nextRecord = (Record) records.get(k + 1);",
        "168": "                if (nextRecord instanceof SharedFormulaRecord) {",
        "175": "                for (int i=sharedFormulas.size()-1;i>=0;i--) {",
        "176": "                \tSharedFormulaRecord shrd = (SharedFormulaRecord)sharedFormulas.get(i);",
        "177": "                \tif (shrd.isFormulaInShared(formula)) {",
        "178": "                \t\tshrd.convertSharedFormulaRecord(formula);",
        "149": "",
        "150": "        FormulaRecordAggregate lastFormulaAggregate = null;",
        "189": "            \t",
        "190": "              lastFormulaAggregate = new FormulaRecordAggregate((FormulaRecord)rec, null);"
      },
      "id": 15642593,
      "filename": "ValueRecordsAggregate.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 78,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260253/",
      "md5hash": "0d5f12d9f84ba26b81832c4bb61a7cb8",
      "lines": {
        "27": " */",
        "28": "public class Formula extends FormulaRecord implements WritableCell",
        "22": "import jxl.format.CellFormat;",
        "23": "import jxl.write.biff.FormulaRecord;"
      },
      "id": 43260253,
      "filename": "Formula.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 12,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 10,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 10,
      "source": "Github",
      "id": 2
    }
  ]
}