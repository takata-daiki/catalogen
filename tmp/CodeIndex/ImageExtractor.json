{
  "matchterm": "ImageExtractor",
  "previouspage": null,
  "searchterm": "ImageExtractor",
  "query": "ImageExtractor",
  "language_filters": [
    {
      "count": 53,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 53,
  "results": [
    {
      "repo": "https://bitbucket.org/lmame/arinside-whitelist.git",
      "language": "Java",
      "linescount": 522,
      "location": "/lib/api764sp2win/api764sp2win/JavaDriver",
      "name": "arinside-whitelist",
      "url": "https://searchcode.com/codesearch/view/43045306/",
      "md5hash": "3c7791819d190ab3f61aec45cc2ac8a9",
      "lines": {
        "32": "public class ImageExtractor extends JavaDriver {",
        "482": "                fileName = InputReader.getString(\"Input File containing the form names :\", \"\");",
        "483": "            imageExtractor.arServerUser = new ARServerUser(userName, password, locale, serverName, serverPort);",
        "484": "            imageExtractor.arServerUser.login();",
        "485": "            Calendar now = Calendar.getInstance();",
        "486": "            long startTime = now.getTimeInMillis();",
        "487": "            imageExtractor.populateImageList();",
        "488": "            imageExtractor.readSchemaNames(fileName, useApplication);",
        "457": "    public static void main(String[] args) {",
        "458": "        ImageExtractor imageExtractor = null;",
        "461": "            ",
        "462": "            imageExtractor = new ImageExtractor();",
        "45": "",
        "46": "    public ImageExtractor() {",
        "31": ""
      },
      "id": 43045306,
      "filename": "ImageExtractor.java"
    },
    {
      "repo": "http://boilerpipe.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 281,
      "location": "/boilerpipe-core/src/main/de/l3s/boilerpipe/sax",
      "name": "boilerpipe",
      "url": "https://searchcode.com/codesearch/view/4911810/",
      "md5hash": "27ac9342a5e494af758172dd001f60e8",
      "lines": {
        "32": "\tpublic static final ImageExtractor INSTANCE = new ImageExtractor();",
        "33": "\t",
        "34": "\t/**",
        "35": "\t * Returns the singleton instance of {@link ImageExtractor}.",
        "38": "\t */",
        "39": "\tpublic static ImageExtractor getInstance() {",
        "42": "",
        "43": "\tprivate ImageExtractor() {",
        "30": " */",
        "31": "public final class ImageExtractor {"
      },
      "id": 4911810,
      "filename": "ImageExtractor.java"
    },
    {
      "repo": "https://github.com/thomhastings/T-PEN.git",
      "language": "Java",
      "linescount": 38,
      "location": "/trunk/src/java/detectimages",
      "name": "T-PEN",
      "url": "https://searchcode.com/codesearch/view/73103051/",
      "md5hash": "81c5d32a67793fbf8005f3106b46dbcd",
      "lines": {
        "17": "",
        "18": "public class imageExtractor implements Callable{",
        "21": "    File imageFile;",
        "22": "public imageExtractor(String destinationDir, String destinationFileName, File imageFile)"
      },
      "id": 73103051,
      "filename": "imageExtractor.java"
    },
    {
      "repo": "https://github.com/aherbert/GDSC-SMLM.git",
      "language": "Java",
      "linescount": 189,
      "location": "/src/main/java/gdsc/smlm/utils",
      "name": "GDSC-SMLM",
      "url": "https://searchcode.com/codesearch/view/96208070/",
      "md5hash": "e3e0d5263e56eaffc427a399d61331cf",
      "lines": {
        "36": "\t */",
        "20": " */",
        "21": "public class ImageExtractor",
        "37": "\tpublic ImageExtractor(float[] data, int width, int height)"
      },
      "id": 96208070,
      "filename": "ImageExtractor.java"
    },
    {
      "repo": "https://bitbucket.org/phuqit/ajaxoid",
      "language": "Java",
      "linescount": 65,
      "location": "/image-processing/src/main/java/com/ajaxoid/imageprocessing/server",
      "name": "ajaxoid",
      "url": "https://searchcode.com/codesearch/view/125940404/",
      "md5hash": "2a556d3275e6b55d13e73dec4f0f0a69",
      "lines": {
        "25": "@Service",
        "26": "public class ImageExtractor {",
        "27": "    protected static final Logger logger = LoggerFactory.getLogger(ImageExtractor.class);",
        "28": "    public static final String FILE_SEPARATOR = \"/\";"
      },
      "id": 125940404,
      "filename": "ImageExtractor.java"
    },
    {
      "repo": "https://github.com/skyfallsin/goose.git",
      "language": "Java",
      "linescount": 48,
      "location": "/src/main/java/com/jimplush/goose/images",
      "name": "goose",
      "url": "https://searchcode.com/codesearch/view/65775940/",
      "md5hash": "55ca48a926daeb6e4269c205f1811154",
      "lines": {
        "29": " */",
        "30": "public interface ImageExtractor {"
      },
      "id": 65775940,
      "filename": "ImageExtractor.java"
    },
    {
      "repo": "https://github.com/wesleyzhao/readstream.git",
      "language": "Java",
      "linescount": 30,
      "location": "/jiminoc-goose-5823928/src/main/java/com/jimplush/goose/images",
      "name": "readstream",
      "url": "https://searchcode.com/codesearch/view/67040819/",
      "md5hash": "b5cfee3035190fd66f7248bd0cde3093",
      "lines": {
        "11": " */",
        "12": "public interface ImageExtractor {"
      },
      "id": 67040819,
      "filename": "ImageExtractor.java"
    },
    {
      "repo": "https://github.com/atlasapi/atlas.git",
      "language": "Java",
      "linescount": 13,
      "location": "/src/main/java/org/atlasapi/remotesite/btvod",
      "name": "atlas",
      "url": "https://searchcode.com/codesearch/view/109547262/",
      "md5hash": "a7456d089ae7d3c46dff33d7f03052e7",
      "lines": {
        "8": "public interface ImageExtractor {",
        "7": ""
      },
      "id": 109547262,
      "filename": "ImageExtractor.java"
    },
    {
      "repo": "https://github.com/umars/goose.git",
      "language": "Java",
      "linescount": 47,
      "location": "/src/main/java/com/jimplush/goose/images",
      "name": "goose",
      "url": "https://searchcode.com/codesearch/view/113772687/",
      "md5hash": "70b90bf1fb97ef60cbb2bdbccdb45abe",
      "lines": {
        "28": " */",
        "29": "public interface ImageExtractor {"
      },
      "id": 113772687,
      "filename": "ImageExtractor.java"
    },
    {
      "repo": "https://bitbucket.org/eug48/xmind3-releases-mirror",
      "language": "Java",
      "linescount": 705,
      "location": "/org.xmind.ui.mindmap/src/org/xmind/ui/internal/wizards",
      "name": "xmind3-releases-mirror",
      "url": "https://searchcode.com/codesearch/view/119535463/",
      "md5hash": "40b49271851d387cca6c0e9ddd0d3196",
      "lines": {
        "160": "                    releaseImageExtractor(imageExtractor);",
        "512": "",
        "598": "",
        "177": "                    origin = imageExtractor.getOrigin();",
        "599": "    protected void releaseImageExtractor(MindMapImageExtractor imageExtractor) {",
        "204": "                } finally {",
        "141": "                        .subTask(WizardMessages.ImageExportPage_GeneratePreview_CreatingSourceImage);",
        "142": "                MindMapImageExtractor imageExtractor = getImageExtractor(",
        "205": "                    releaseImageExtractor(imageExtractor);",
        "176": "                    writeImage(image, destPath, monitor);",
        "145": "                try {",
        "146": "                    image = imageExtractor.getImage();",
        "513": "    private MindMapImageExtractor imageExtractor;",
        "54": "import org.xmind.ui.mindmap.IMindMapImages;",
        "55": "import org.xmind.ui.mindmap.MindMapImageExtractor;",
        "600": "        if (imageExtractor == this.imageExtractor) {",
        "159": "                if (monitor.isCanceled()) {"
      },
      "id": 119535463,
      "filename": "ImageExportWizard.java"
    },
    {
      "repo": "https://bitbucket.org/eug48/xmind3-releases-mirror",
      "language": "Java",
      "linescount": 297,
      "location": "/org.xmind.ui.mindmap/src/org/xmind/ui/mindmap",
      "name": "xmind3-releases-mirror",
      "url": "https://searchcode.com/codesearch/view/119536149/",
      "md5hash": "1246abea7e0282bc5aa5348f9398b038",
      "lines": {
        "160": "            display = parent.getDisplay();",
        "161": "            imageExtractor = new MindMapImageExtractor(parent, sheet,",
        "163": "        } else {",
        "164": "            imageExtractor = new MindMapImageExtractor(display, sheet,",
        "166": "        }",
        "167": "        imageExtractor.setResizeStrategy(resizeStrategy, widthHint, heightHint);",
        "169": "            for (String key : properties.keySet()) {",
        "170": "                imageExtractor.setProperty(key, properties.get(key));",
        "172": "        }",
        "173": "        Integer margin = (Integer) imageExtractor",
        "177": "        }",
        "178": "        imageExtractor.setMargin(margin);",
        "179": "        imageExtractor.setProperty(IMindMapViewer.VIEWER_MARGIN, Integer",
        "157": "        ITopic centralTopic = getCentralTopic();",
        "158": "        final MindMapImageExtractor imageExtractor;"
      },
      "id": 119536149,
      "filename": "MindMapPreviewBuilder.java"
    },
    {
      "repo": "https://github.com/atlasapi/atlas.git",
      "language": "Java",
      "linescount": 516,
      "location": "/src/test/java/org/atlasapi/remotesite/btvod",
      "name": "atlas",
      "url": "https://searchcode.com/codesearch/view/109544070/",
      "md5hash": "bdc064401fe82a8076f4d64607de81ab",
      "lines": {
        "224": "        when(imageExtractor.imagesFor(Matchers.<BtVodEntry>any())).thenReturn(ImmutableSet.<Image>of());",
        "194": "",
        "195": "        when(imageExtractor.imagesFor(Matchers.<BtVodEntry>any())).thenReturn(ImmutableSet.<Image>of());",
        "264": "",
        "265": "        when(imageExtractor.imagesFor(Matchers.<BtVodEntry>any())).thenReturn(ImmutableSet.<Image>of());",
        "140": "",
        "77": "    private final BtVodContentListener contentListener = mock(BtVodContentListener.class);",
        "78": "    private final ImageExtractor imageExtractor = mock(ImageExtractor.class);",
        "141": "        when(imageExtractor.imagesFor(Matchers.<BtVodEntry>any())).thenReturn(ImmutableSet.<Image>of());",
        "497": "",
        "498": "        when(imageExtractor.imagesFor(Matchers.<BtVodEntry>any())).thenReturn(ImmutableSet.<Image>of());",
        "116": "            new TitleSanitiser(),",
        "117": "            new NoImageExtractor(),",
        "383": "        when(imageExtractor.imagesFor(Matchers.<BtVodEntry>any())).thenReturn(ImmutableSet.<Image>of());",
        "382": "",
        "223": ""
      },
      "id": 109544070,
      "filename": "BtVodItemWriterTest.java"
    },
    {
      "repo": "http://pdfrecompressor.googlecode.com/svn/",
      "language": "Java",
      "linescount": 303,
      "location": "/pdfJbIm/tags/pdfJbIm-1.0/src/main/java/cz/muni/pdfjbim",
      "name": "pdfrecompressor",
      "url": "https://searchcode.com/codesearch/view/11444734/",
      "md5hash": "c95d7e5ddd169559120cb7bc61f7d41a",
      "lines": {
        "192": "        // PdfImageProcessor handles extraction of pdf and putting recompressed images",
        "193": "        PdfImageExtractor imageExtractor = new PdfImageExtractor();",
        "194": "",
        "195": "        imageExtractor.setSilent(silent); // if stderr output shall be printed or not",
        "197": "        // image extraction",
        "198": "        imageExtractor.extractImages(pdfFile, password, pagesToProcess, binarize);",
        "200": "        // returns names of extracted images as List",
        "201": "        List<String> jbig2encInputImages = imageExtractor.getNamesOfImages();",
        "220": "        // getting informations about images that were in PDF such as size, position in PDF,...",
        "221": "        List<PdfImageInformation> pdfImagesInfo = imageExtractor.getOriginalImageInformations();"
      },
      "id": 11444734,
      "filename": "Run.java"
    },
    {
      "repo": "http://pdfrecompressor.googlecode.com/svn/",
      "language": "Java",
      "linescount": 312,
      "location": "/pdfJbIm/trunk/src/main/java/cz/muni/pdfjbim",
      "name": "pdfrecompressor",
      "url": "https://searchcode.com/codesearch/view/11444749/",
      "md5hash": "c5f4ddb116d76ccec46c6bf3713d448b",
      "lines": {
        "225": "        // getting informations about images that were in PDF such as size, position in PDF,...",
        "226": "        List<PdfImageInformation> pdfImagesInfo = imageExtractor.getOriginalImageInformations();",
        "198": "        // PdfImageProcessor handles extraction of pdf and putting recompressed images",
        "199": "        PdfImageExtractor imageExtractor = new PdfImageExtractor();",
        "201": "        // image extraction",
        "202": "        imageExtractor.extractImages(pdfFile, password, pagesToProcess, binarize);",
        "203": "//        imageExtractor.extractImagesUsingPdfObjectAccess(pdfFile, null, password, pagesToProcess, binarize);",
        "204": "",
        "205": "        // returns names of extracted images as List",
        "206": "        List<String> jbig2encInputImages = imageExtractor.getNamesOfImages();"
      },
      "id": 11444749,
      "filename": "Run.java"
    },
    {
      "repo": "https://github.com/atlasapi/atlas.git",
      "language": "Java",
      "linescount": 255,
      "location": "/src/main/java/org/atlasapi/remotesite/btvod",
      "name": "atlas",
      "url": "https://searchcode.com/codesearch/view/109547214/",
      "md5hash": "b55c7cd4e951ff5420969a10aaca75f8",
      "lines": {
        "128": "                versionsExtractor, new TitleSanitiser(),",
        "129": "                imageExtractor,",
        "35": "    private final String baseUrl;",
        "36": "    private final ImageExtractor imageExtractor;",
        "37": "    private final BrandImageExtractor brandImageExtractor;",
        "38": "    private final BrandUriExtractor brandUriExtractor;",
        "135": "            reportStatus(\"Extracting brand images\");",
        "136": "            vodData.processData(brandImageExtractor);",
        "167": "                    explicitSeries.keySet(),",
        "198": "                    imageExtractor,",
        "168": "                    imageExtractor,",
        "57": "            BtVodOldContentDeactivator oldContentDeactivator,",
        "58": "            BrandImageExtractor brandImageExtractor,",
        "59": "            String baseUrl,",
        "60": "            ImageExtractor imageExtractor,",
        "197": "                    new TitleSanitiser(),"
      },
      "id": 109547214,
      "filename": "BtVodUpdater.java"
    },
    {
      "repo": "https://github.com/andrewlin12/goose.git",
      "language": "Java",
      "linescount": 1066,
      "location": "/src/main/java/com/jimplush/goose",
      "name": "goose",
      "url": "https://searchcode.com/codesearch/view/67147496/",
      "md5hash": "c559a7e02ece05a6c1bfadbd74ed6aad",
      "lines": {
        "192": "          article.setTopImage(imageExtractor.getBestImage(doc, doc.body()));",
        "193": "          ArrayList<String> imageCandidates = new ArrayList<String>();",
        "194": "          Iterator<Element> iter = imageExtractor.getAllImages().iterator();",
        "291": "    if (imageExtractor == null) {",
        "294": "    } else {",
        "289": "  private ImageExtractor getImageExtractor(HttpClient httpClient, String urlToCrawl) {",
        "295": "      return imageExtractor;",
        "290": "",
        "288": "",
        "22": "import com.jimplush.goose.images.BestImageGuesser;",
        "23": "import com.jimplush.goose.images.ImageExtractor;",
        "90": "  private OutputFormatter outputFormatter;",
        "91": "  private ImageExtractor imageExtractor;",
        "190": "          HttpClient httpClient = HtmlFetcher.getHttpClient();",
        "191": "          imageExtractor = getImageExtractor(httpClient, urlToCrawl);"
      },
      "id": 67147496,
      "filename": "ContentExtractor.java"
    },
    {
      "repo": "https://github.com/skyfallsin/goose.git",
      "language": "Java",
      "linescount": 1015,
      "location": "/src/main/java/com/jimplush/goose",
      "name": "goose",
      "url": "https://searchcode.com/codesearch/view/65775791/",
      "md5hash": "6580d2d9c808972ab9ccfbc7c9d2fc9e",
      "lines": {
        "223": "      return imageExtractor;",
        "146": "          HttpClient httpClient = HtmlFetcher.getHttpClient();",
        "147": "          imageExtractor = getImageExtractor(httpClient, urlToCrawl);",
        "84": "",
        "85": "  private ImageExtractor imageExtractor;",
        "22": "import com.jimplush.goose.images.BestImageGuesser;",
        "23": "import com.jimplush.goose.images.ImageExtractor;",
        "216": "",
        "148": "          article.setTopImage(imageExtractor.getBestImage(doc, article.getTopNode()));",
        "217": "  private ImageExtractor getImageExtractor(HttpClient httpClient, String urlToCrawl) {",
        "219": "    if (imageExtractor == null) {",
        "218": "",
        "222": "    } else {",
        "149": ""
      },
      "id": 65775791,
      "filename": "ContentExtractor.java"
    },
    {
      "repo": "https://github.com/wesleyzhao/readstream.git",
      "language": "Java",
      "linescount": 948,
      "location": "/jiminoc-goose-5823928/src/main/java/com/jimplush/goose",
      "name": "readstream",
      "url": "https://searchcode.com/codesearch/view/67040753/",
      "md5hash": "4744af02bbd4d06f3278e7b608828c63",
      "lines": {
        "128": "          HttpClient httpClient = HtmlFetcher.getHttpClient();",
        "129": "          imageExtractor = getImageExtractor(httpClient, urlToCrawl);",
        "66": "",
        "67": "  private ImageExtractor imageExtractor;",
        "196": "    } else {",
        "5": "import com.jimplush.goose.images.BestImageGuesser;",
        "6": "import com.jimplush.goose.images.ImageExtractor;",
        "193": "    if (imageExtractor == null) {",
        "197": "      return imageExtractor;",
        "192": "",
        "130": "          article.setTopImage(imageExtractor.getBestImage(doc, article.getTopNode()));",
        "131": "",
        "190": "",
        "191": "  private ImageExtractor getImageExtractor(HttpClient httpClient, String urlToCrawl) {"
      },
      "id": 67040753,
      "filename": "ContentExtractor.java"
    },
    {
      "repo": "https://github.com/atlasapi/atlas.git",
      "language": "Java",
      "linescount": 345,
      "location": "/src/main/java/org/atlasapi/remotesite/btvod",
      "name": "atlas",
      "url": "https://searchcode.com/codesearch/view/109547268/",
      "md5hash": "8c86cf2c3bac1ceee35fa99f4f123e31",
      "lines": {
        "65": "    private final TitleSanitiser titleSanitiser;",
        "66": "    private final ImageExtractor imageExtractor;",
        "83": "            TitleSanitiser titleSanitiser,",
        "84": "            ImageExtractor imageExtractor,",
        "101": "        this.imageExtractor = checkNotNull(imageExtractor);",
        "297": "        item.setImages(imageExtractor.imagesFor(row));",
        "296": "        item.addTopicRefs(describedFieldsExtractor.topicsFrom(vodEntryAndContent));",
        "100": "        this.processedItems = Maps.newHashMap();"
      },
      "id": 109547268,
      "filename": "BtVodItemWriter.java"
    },
    {
      "repo": "https://github.com/aherbert/GDSC-SMLM.git",
      "language": "Java",
      "linescount": 1901,
      "location": "/src/main/java/gdsc/smlm/ij/plugins",
      "name": "GDSC-SMLM",
      "url": "https://searchcode.com/codesearch/view/96208772/",
      "md5hash": "bc9179c3b45ed9721c694efdb2531df6",
      "lines": {
        "560": "\t\t\t// Extract the region from each frame",
        "561": "\t\t\tImageExtractor ie = new ImageExtractor((float[]) stack.getPixels(slice), width, height);",
        "419": "\t\t\t{",
        "420": "\t\t\t\tImageExtractor ie = new ImageExtractor((float[]) stack.getPixels(slice), width, height);",
        "29": "import gdsc.smlm.results.match.BasePoint;",
        "30": "import gdsc.smlm.utils.ImageExtractor;"
      },
      "id": 96208772,
      "filename": "PSFCreator.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 36,
      "source": "Github",
      "id": 2
    },
    {
      "count": 13,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 4,
      "source": "Google Code",
      "id": 1
    }
  ]
}