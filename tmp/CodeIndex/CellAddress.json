{
  "matchterm": "CellAddress",
  "previouspage": null,
  "searchterm": "CellAddress",
  "query": "CellAddress",
  "language_filters": [
    {
      "count": 87,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 87,
  "results": [
    {
      "repo": "https://bitbucket.org/ansgarkonermann/simpleodf",
      "language": "Java",
      "linescount": 3279,
      "location": "/src/main/java/org/odftoolkit/simple/table",
      "name": "simpleodf",
      "url": "https://searchcode.com/codesearch/view/60371767/",
      "md5hash": "d51a889b5f5be5a2ffc79888c517ebfb",
      "lines": {
        "2753": "",
        "2754": "\tint getRowIndexFromCellAddress(String cellAddress) {",
        "2755": "\t\tString[] returnArray = splitCellAddress(cellAddress);",
        "2596": "\tpublic CellRange getCellRangeByPosition(String startAddress, String endAddress) {",
        "2597": "\t\treturn getCellRangeByPosition(getColIndexFromCellAddress(startAddress),",
        "2598": "\t\t\t\tgetRowIndexFromCellAddress(startAddress), getColIndexFromCellAddress(endAddress),",
        "2599": "\t\t\t\tgetRowIndexFromCellAddress(endAddress));",
        "2600": "\t}",
        "2740": "",
        "2741": "\t// TODO: can put these two method to type.CellAddress",
        "2742": "\tint getColIndexFromCellAddress(String cellAddress) {",
        "2743": "\t\tString[] returnArray = splitCellAddress(cellAddress);",
        "2744": "\t\tString colNum = returnArray[1];",
        "2715": "\tpublic Cell getCellByPosition(String address) {",
        "2716": "\t\treturn getCellByPosition(getColIndexFromCellAddress(address), getRowIndexFromCellAddress(address));"
      },
      "id": 60371767,
      "filename": "Table.java"
    },
    {
      "repo": "http://google-jobs-crawler.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 104,
      "location": "/list-automation/src/core",
      "name": "google-jobs-crawler",
      "url": "https://searchcode.com/codesearch/view/13976656/",
      "md5hash": "594f97fefede0672479b6b96601533b0",
      "lines": {
        "32": "\t\t */",
        "33": "\t\tpublic CellAddress(int row, int col) {",
        "75": "\t\t// Build list of cell addresses to be filled in",
        "76": "\t\tList<CellAddress> cellAddrs = new ArrayList<CellAddress>();",
        "78": "\t\t\tfor (int col = 1; col <= 3; ++col) {",
        "79": "\t\t\t\tcellAddrs.add(new CellAddress(row, col));",
        "83": "\t\tCellFeed batchRequest = new CellFeed();",
        "84": "\t\tfor (CellAddress cellId : cellAddrs) {",
        "23": "",
        "24": "\tprivate static class CellAddress {",
        "29": "\t\t/**",
        "30": "\t\t * Constructs a CellAddress representing the specified {@code row} and"
      },
      "id": 13976656,
      "filename": "SpreadsheetBatch.java"
    },
    {
      "repo": "https://bitbucket.org/sewe/jikesrvm",
      "language": "Java",
      "linescount": 270,
      "location": "/MMTk/harness/vmmagic/org/vmmagic/unboxed/harness",
      "name": "jikesrvm",
      "url": "https://searchcode.com/codesearch/view/58161337/",
      "md5hash": "7b4614fd21b0fb61d146e2f2fc567ed1",
      "lines": {
        "225": "      Trace.printf(\"%4d store %s: %08x -> %08x%n\", Thread.currentThread().getId(),",
        "226": "          cellAddress(index), data[index], value);",
        "213": "      Trace.printf(\"%4d  load %s = %08x%n\", Thread.currentThread().getId(),",
        "214": "          cellAddress(index), value);",
        "61": "   */",
        "62": "  private Address cellAddress(int index) {"
      },
      "id": 58161337,
      "filename": "MemoryPage.java"
    },
    {
      "repo": "https://bitbucket.org/ansgarkonermann/simpleodf",
      "language": "Java",
      "linescount": 1378,
      "location": "/src/test/java/org/odftoolkit/simple/table",
      "name": "simpleodf",
      "url": "https://searchcode.com/codesearch/view/60371705/",
      "md5hash": "9ded6f4cc634446cd020cecae20c6007",
      "lines": {
        "930": "\t\t// if the value type is \"float\", cell value need to be updated, too.",
        "931": "\t\tString cellAddress = \"A4\";",
        "932": "\t\tfcell = table.getCellByPosition(cellAddress);",
        "933": "\t\texpected = \"400.0\";",
        "939": "\t\ttable = odsdoc.getTableByName(\"Sheet1\");",
        "940": "\t\tfcell = table.getCellByPosition(cellAddress);"
      },
      "id": 60371705,
      "filename": "TableCellTest.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 574,
      "location": "/nlpsolver/src/com/sun/star/comp/Calc/NLPSolver",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45030188/",
      "md5hash": "7da302a41eb3cacea8e1ba686b5dc706",
      "lines": {
        "160": "    public CellAddress[] getVariables() {",
        "161": "        if (m_variables == null)",
        "162": "            return new CellAddress[0]; //Workaround for basic scripts; otherwise",
        "343": "",
        "207": "                this.Data = ((Number)right).doubleValue();",
        "208": "            } else if (right instanceof CellAddress) {",
        "209": "                XCell cell = getCell((CellAddress)right);",
        "210": "                if (cell.getType() == CellContentType.VALUE) {",
        "51": "import com.sun.star.sheet.XSpreadsheets;",
        "52": "import com.sun.star.table.CellAddress;",
        "150": "",
        "151": "    public CellAddress getObjective() {",
        "344": "    protected XCell getCell(CellAddress cellAddress) {",
        "345": "        return getCell(cellAddress.Column, cellAddress.Row, cellAddress.Sheet);",
        "154": "",
        "155": "    public void setObjective(CellAddress objective) {",
        "159": ""
      },
      "id": 45030188,
      "filename": "BaseNLPSolver.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 2904,
      "location": "/src/main/java/com/extentech/ExtenXLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47125162/",
      "md5hash": "c338839bc7b4eb580a924074fb02c6e2",
      "lines": {
        "2757": "     */",
        "2758": "    public ValidationHandle createValidationHandle(String cellAddress, byte valueType, byte condition, String errorBoxText, String errorBoxTitle, String promptBoxText, String promptBoxTitle, String firstCondition, String secondCondition) {",
        "2375": "     */",
        "2376": "    public List calculateAffectedCells(String CellAddress) {",
        "2759": "        Dv d = this.mysheet.createDv(cellAddress);",
        "2634": "     * ",
        "2635": "     * @param cellAddress without sheetname.  Can also be a range, such as A1:B5",
        "2733": "     */",
        "2734": "    public ValidationHandle getValidationHandle(String cellAddress){",
        "2735": "        if (this.mysheet.getDvalRec()!=null) {",
        "2736": "        \tDv d = this.mysheet.getDvalRec().getDv(cellAddress);",
        "2760": "        d.setValType(valueType);",
        "1336": "\t\t\t\t\tcopyCellHandle.setWorkSheetHandle(this);\t",
        "1337": "\t\t\t\t\t// this.cellhandles.put(copyCellHandle.getCellAddress(), copyCellHandle);",
        "2746": "     * ",
        "2747": "     * @param cellAddress without sheetname.  Can also be a range, such as A1:B5"
      },
      "id": 47125162,
      "filename": "WorkSheetHandle.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 2904,
      "location": "/src/main/java/com/extentech/ExtenXLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976786/",
      "md5hash": "c338839bc7b4eb580a924074fb02c6e2",
      "lines": {
        "2757": "     */",
        "2758": "    public ValidationHandle createValidationHandle(String cellAddress, byte valueType, byte condition, String errorBoxText, String errorBoxTitle, String promptBoxText, String promptBoxTitle, String firstCondition, String secondCondition) {",
        "2375": "     */",
        "2376": "    public List calculateAffectedCells(String CellAddress) {",
        "2759": "        Dv d = this.mysheet.createDv(cellAddress);",
        "2634": "     * ",
        "2635": "     * @param cellAddress without sheetname.  Can also be a range, such as A1:B5",
        "2733": "     */",
        "2734": "    public ValidationHandle getValidationHandle(String cellAddress){",
        "2735": "        if (this.mysheet.getDvalRec()!=null) {",
        "2736": "        \tDv d = this.mysheet.getDvalRec().getDv(cellAddress);",
        "2760": "        d.setValType(valueType);",
        "1336": "\t\t\t\t\tcopyCellHandle.setWorkSheetHandle(this);\t",
        "1337": "\t\t\t\t\t// this.cellhandles.put(copyCellHandle.getCellAddress(), copyCellHandle);",
        "2746": "     * ",
        "2747": "     * @param cellAddress without sheetname.  Can also be a range, such as A1:B5"
      },
      "id": 50976786,
      "filename": "WorkSheetHandle.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 568,
      "location": "/qadevOOo/tests/java/ifc/sheet",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45022411/",
      "md5hash": "1156311148b09fc4033574233a816338",
      "lines": {
        "555": "            XCell xCell = xCursor.getCellByPosition(0, 0);",
        "132": "        {",
        "133": "            CellAddress addr = new CellAddress();",
        "394": "",
        "395": "        mResultCells = new ArrayList<CellAddress>();",
        "556": "            XCellAddressable xCellAddr = UnoRuntime.queryInterface(",
        "557": "                XCellAddressable.class, xCell);",
        "558": "",
        "399": "            {",
        "400": "                CellAddress addr = new CellAddress();",
        "51": " * @see com.sun.star.sheet.XDataPilotTable2",
        "52": " * @see com.sun.star.table.CellAddress",
        "559": "            return xCellAddr.getCellAddress();",
        "541": "",
        "542": "    private CellAddress getLastUsedCellAddress(XSpreadsheet xSheet, int nCol, int nRow)"
      },
      "id": 45022411,
      "filename": "_XDataPilotTable2.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 197,
      "location": "/qadevOOo/tests/java/ifc/sheet",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45022383/",
      "md5hash": "c8d0de75f88248d32f0ee9f883ac6b36",
      "lines": {
        "39": "    public XSheetAuditing oObj = null;",
        "40": "    CellAddress address = null;",
        "41": "    CellAddress precedentAddress = null;",
        "42": "    CellAddress dependentAddress = null;",
        "43": "    XCell xAddress = null;",
        "49": "    public void before() {",
        "50": "        address = (CellAddress)tEnv.getObjRelation(\"XSheetAuditing.CellAddress\");",
        "51": "        precedentAddress = (CellAddress)tEnv.getObjRelation(\"XSheetAuditing.PrecedentCellAddress\");",
        "52": "        dependentAddress= (CellAddress)tEnv.getObjRelation(\"XSheetAuditing.DependentCellAddress\");",
        "53": "        if (address == null || precedentAddress == null || dependentAddress == null) {",
        "54": "            throw new StatusException(Status.failed(\"Necessary CellAddress object relations not found.\"));",
        "119": "        xPrecedentAddress.setValue(-9);",
        "120": "        String cellAddress = new String(new byte[]{(byte)(precedentAddress.Column + 65)}) + (precedentAddress.Row+1);",
        "121": "        xAddress.setFormula(\"=SQRT(\" + cellAddress + \")\");",
        "122": "        XText xText = UnoRuntime.queryInterface(XText.class, xAddress);"
      },
      "id": 45022383,
      "filename": "_XSheetAuditing.java"
    },
    {
      "repo": "https://bitbucket.org/mst/ooo340",
      "language": "Java",
      "linescount": 966,
      "location": "/odk/examples/java/ToDo",
      "name": "ooo340",
      "url": "https://searchcode.com/codesearch/view/122057013/",
      "md5hash": "d9d18a6a4c5a87166c18a7161ded998f",
      "lines": {
        "544": "                                    CellAddress celladdress = new CellAddress();",
        "545": "                                    celladdress.Sheet = 0;",
        "546": "                                    celladdress.Column = 0;",
        "547": "                                    celladdress.Row = intRowToInsert;",
        "548": "                                    ",
        "560": "                                    xcellrangemovement.moveRange(celladdress,",
        "559": "                                    // the document",
        "58": "import com.sun.star.table.XCell;",
        "59": "import com.sun.star.table.CellAddress;",
        "543": "                                    // Creating the cell address of the destination"
      },
      "id": 122057013,
      "filename": "ToDo.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 1418,
      "location": "/odk/examples/DevelopersGuide/Spreadsheet",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45029772/",
      "md5hash": "890dd79017466d694e487f6d4441582c",
      "lines": {
        "579": "            Object aCellObj = xEnum.nextElement();",
        "580": "            com.sun.star.sheet.XCellAddressable xAddr = (com.sun.star.sheet.XCellAddressable)",
        "517": "        aFormulaRange = createCellRangeAddress( xSheet, \"F33:H33\" );",
        "518": "        aColCell = createCellAddress( xSheet, \"E33\" );",
        "583": "            System.out.print( getCellAddressString( aAddr.Column, aAddr.Row ) + \" \" );",
        "584": "        }",
        "1322": "        // select output position",
        "1323": "        com.sun.star.table.CellAddress aDestAddress = createCellAddress( xSheet, \"A40\" );",
        "582": "            com.sun.star.table.CellAddress aAddr = xAddr.getCellAddress();",
        "280": "        // --- Get cell address. ---",
        "281": "        com.sun.star.sheet.XCellAddressable xCellAddr = (com.sun.star.sheet.XCellAddressable)",
        "282": "            UnoRuntime.queryInterface( com.sun.star.sheet.XCellAddressable.class, xCell );",
        "283": "        com.sun.star.table.CellAddress aAddress = xCellAddr.getCellAddress();",
        "284": "        aText = \"Address of this cell:  Column=\" + aAddress.Column;",
        "581": "                UnoRuntime.queryInterface( com.sun.star.sheet.XCellAddressable.class, aCellObj );"
      },
      "id": 45029772,
      "filename": "SpreadsheetSample.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 316,
      "location": "/qadevOOo/tests/java/ifc/sheet",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45022396/",
      "md5hash": "869d7fa3ad7d6fe3973bfd8f90026a56",
      "lines": {
        "97": "        //inserted for a bug",
        "34": "import com.sun.star.sheet.XSpreadsheet;",
        "83": "        boolean bResult = true;",
        "84": "        CellAddress aPosition = new CellAddress((short)0, 2, 2);",
        "35": "import com.sun.star.table.CellAddress;",
        "196": "            oObj.outputList(new CellAddress((short)0, 5, 5));",
        "219": "        boolean bResult = true;",
        "220": "        CellAddress CA = new CellAddress((short)0, 0, 0);",
        "98": "        CellAddress listOutputPosition = new CellAddress((short)0, 1, 1);",
        "195": ""
      },
      "id": 45022396,
      "filename": "_XNamedRanges.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 951,
      "location": "/odk/examples/java/ToDo",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45029592/",
      "md5hash": "8de7ab874abd11ded2866cde38eb5994",
      "lines": {
        "528": "                                    celladdress.Sheet = 0;",
        "529": "                                    celladdress.Column = 0;",
        "50": "import com.sun.star.table.XCell;",
        "51": "import com.sun.star.table.CellAddress;",
        "542": "                                    // the document",
        "531": "",
        "543": "                                    xcellrangemovement.moveRange(celladdress,",
        "530": "                                    celladdress.Row = intRowToInsert;",
        "526": "                                    // Creating the cell address of the destination",
        "527": "                                    CellAddress celladdress = new CellAddress();"
      },
      "id": 45029592,
      "filename": "ToDo.java"
    },
    {
      "repo": "https://bitbucket.org/openxls/openxls.git",
      "language": "Java",
      "linescount": 447,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/47124862/",
      "md5hash": "b0b3944f0c03ff477ad6d1ae477f8641",
      "lines": {
        "353": "     */",
        "354": "    public Dv getDv(String cellAddress) {",
        "355": "        if (cellAddress.indexOf(\"!\")!=-1) {",
        "356": "            cellAddress = cellAddress.substring(cellAddress.indexOf(\"!\"));",
        "357": "        }",
        "359": "            Dv d = (Dv)dvRecs.get(i);",
        "360": "            if (d.isInRange(cellAddress))return d;",
        "350": "     * ",
        "351": "     * @param cellAddress"
      },
      "id": 47124862,
      "filename": "Dval.java"
    },
    {
      "repo": "https://bitbucket.org/ghu/openxls.git",
      "language": "Java",
      "linescount": 447,
      "location": "/src/main/java/com/extentech/formats/XLS",
      "name": "openxls",
      "url": "https://searchcode.com/codesearch/view/50976486/",
      "md5hash": "b0b3944f0c03ff477ad6d1ae477f8641",
      "lines": {
        "353": "     */",
        "354": "    public Dv getDv(String cellAddress) {",
        "355": "        if (cellAddress.indexOf(\"!\")!=-1) {",
        "356": "            cellAddress = cellAddress.substring(cellAddress.indexOf(\"!\"));",
        "357": "        }",
        "359": "            Dv d = (Dv)dvRecs.get(i);",
        "360": "            if (d.isInRange(cellAddress))return d;",
        "350": "     * ",
        "351": "     * @param cellAddress"
      },
      "id": 50976486,
      "filename": "Dval.java"
    },
    {
      "repo": "https://bitbucket.org/kbanczyk/tds-repo",
      "language": "Java",
      "linescount": 299,
      "location": "/bnj/src/java/main/edu/ksu/cis/bnj/ver3/learning/data",
      "name": "tds-repo",
      "url": "https://searchcode.com/codesearch/view/56699669/",
      "md5hash": "dae4d34211596591cb0e454a2bc3df1e",
      "lines": {
        "289": "\t\t\t\t{",
        "290": "\t\t\t\t\tint v = _Data[cellAddress + k];",
        "283": "\t\t{",
        "284": "\t\t\tint cellAddress = i * _NumColumns;"
      },
      "id": 56699669,
      "filename": "DiscreteDataSourceARFF.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 413,
      "location": "/qadevOOo/tests/java/mod/_sc",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45021866/",
      "md5hash": "fff8a528639dea0f0a48094ea46b8a4f",
      "lines": {
        "244": "        // pick a cell with a formula for XSheetAuditing, a dependent cell and a precedent cell",
        "245": "        tEnv.addObjRelation(\"XSheetAuditing.CellAddress\", new CellAddress((short)0, 8, 6));",
        "246": "        tEnv.addObjRelation(\"XSheetAuditing.PrecedentCellAddress\", new CellAddress((short)0, 7, 6));",
        "247": "        tEnv.addObjRelation(\"XSheetAuditing.DependentCellAddress\", new CellAddress((short)0, 9, 6));",
        "248": "",
        "26": "import com.sun.star.sheet.XSpreadsheets;",
        "27": "import com.sun.star.table.CellAddress;"
      },
      "id": 45021866,
      "filename": "ScTableSheetObj.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 166,
      "location": "/qadevOOo/tests/java/mod/_sc",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45021887/",
      "md5hash": "2789259df319399a1ea75e253a6c2d82",
      "lines": {
        "145": "        CellRangeAddress DataArea = new CellRangeAddress((short)0, 0, 0, 2, 2);",
        "146": "        CellAddress base = new CellAddress(DataArea.Sheet,",
        "36": "import com.sun.star.sheet.XSpreadsheets;",
        "37": "import com.sun.star.table.CellAddress;",
        "151": "",
        "152": "        CellAddress listOutputPosition = new CellAddress((short)0, 1, 1);"
      },
      "id": 45021887,
      "filename": "ScNamedRangesObj.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 166,
      "location": "/qadevOOo/tests/java/mod/_sc",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45021888/",
      "md5hash": "c497cc7847b3bc52cd2116586009d64f",
      "lines": {
        "128": "        CellAddress base = new CellAddress(DataArea.Sheet,",
        "33": "import com.sun.star.sheet.XSpreadsheetDocument;",
        "34": "import com.sun.star.table.CellAddress;",
        "137": "",
        "138": "        CellAddress listOutputPosition = new CellAddress((short)0, 1, 1);",
        "127": "        CellRangeAddress DataArea = new CellRangeAddress((short)0, 0, 0, 1, 1);"
      },
      "id": 45021888,
      "filename": "ScNamedRangeObj.java"
    },
    {
      "repo": "https://bitbucket.org/markjenkins/libreoffice_ubuntu-debian-fixes.git",
      "language": "Java",
      "linescount": 121,
      "location": "/qadevOOo/tests/java/mod/_sc",
      "name": "libreoffice_ubuntu-debian-fixes",
      "url": "https://searchcode.com/codesearch/view/45021904/",
      "md5hash": "e26542d6be92ec4f4ce9942d70b2ed7a",
      "lines": {
        "35": "import com.sun.star.table.CellAddress;",
        "34": "import com.sun.star.sheet.XSpreadsheetDocument;",
        "99": "",
        "100": "        CellAddress listOutputPosition = new CellAddress((short)0, 1, 1);",
        "93": "        CellRangeAddress DataArea = new CellRangeAddress((short)0, 0, 0, 2, 2);",
        "94": "        CellAddress base = new CellAddress(DataArea.Sheet,"
      },
      "id": 45021904,
      "filename": "ScIndexEnumeration_NamedRangesEnumeration.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 82,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 3,
      "source": "Github",
      "id": 2
    },
    {
      "count": 2,
      "source": "Google Code",
      "id": 1
    }
  ]
}