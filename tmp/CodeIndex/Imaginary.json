{
  "matchterm": "Imaginary",
  "previouspage": null,
  "searchterm": "Imaginary",
  "query": "Imaginary",
  "language_filters": [
    {
      "count": 1247,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 1247,
  "results": [
    {
      "repo": "https://github.com/L5D/Math.git",
      "language": "Java",
      "linescount": 44,
      "location": "/src/main/java/org/spout/math/imaginary",
      "name": "Math",
      "url": "https://searchcode.com/codesearch/view/69017088/",
      "md5hash": "a6c04166f8536e523c47551eb327b3c5",
      "lines": {
        "32": "\tpublic Imaginary div(float a);",
        "33": "",
        "34": "\tpublic Imaginary conjugate();",
        "35": "",
        "36": "\tpublic Imaginary invert();",
        "41": "",
        "42": "\tpublic Imaginary normalize();",
        "26": " */",
        "27": "package org.spout.math.imaginary;",
        "28": "",
        "29": "public interface Imaginary {",
        "30": "\tpublic Imaginary mul(float a);",
        "31": ""
      },
      "id": 69017088,
      "filename": "Imaginary.java"
    },
    {
      "repo": "https://github.com/hgrecco/fiji.git",
      "language": "Java",
      "linescount": 41,
      "location": "/src-plugins/jep/org/nfunk/jep/function",
      "name": "fiji",
      "url": "https://searchcode.com/codesearch/view/113851781/",
      "md5hash": "5bca7be120261fcfa8b17058d1ae88f6",
      "lines": {
        "16": "{",
        "17": "\tpublic Imaginary() {",
        "14": "",
        "15": "public class Imaginary extends PostfixMathCommand"
      },
      "id": 113851781,
      "filename": "Imaginary.java"
    },
    {
      "repo": "https://github.com/mrcmatuszak/java-ift2012-grupa-a.git",
      "language": "Java",
      "linescount": 121,
      "location": "/w04-math/src/main/java/math/builder",
      "name": "java-ift2012-grupa-a",
      "url": "https://searchcode.com/codesearch/view/74281474/",
      "md5hash": "d621b707124fbc66c1be63fed1e5309e",
      "lines": {
        "41": "        //When variable index is index of 'i'",
        "42": "        //Case real+imaginary and i is on the first place in imaginary part",
        "15": "    public static ComplexNumber parse(String snumber){",
        "16": "        //Create two string variables for real and imaginary parts of a complex number",
        "17": "        String sreal=new String();",
        "18": "        String simaginary=new String();",
        "21": "        int index=0;",
        "22": "        //Create a parameter to switch from one case(imaginary+real) to another(real+another)",
        "23": "        int parameter=100;",
        "24": "        //Seach for the number of index, where we have character 'i' and imaginary part is on the second place",
        "59": "            }",
        "60": "            //multiply imaginary part by -1 if before 'i' stays '-'",
        "61": "            if (snumber.charAt(index-1)=='-'){",
        "30": "            }",
        "31": "            //Number five we have from: -(i*(-1)+realpart; five is maximum position of '-' or'+' in imaginary part;"
      },
      "id": 74281474,
      "filename": "VGComplexNumberBuilder.java"
    },
    {
      "repo": "https://github.com/msteptoe/FURI_Code.git",
      "language": "Java",
      "linescount": 173,
      "location": "/IJ_Mobile/src/net/imglib2/type/numeric/complex",
      "name": "FURI_Code",
      "url": "https://searchcode.com/codesearch/view/71588088/",
      "md5hash": "e09cee5e8abc8cd520ea98e2363d1399",
      "lines": {
        "64": "\t\tsetReal( getRealDouble() * c );",
        "65": "\t\tsetImaginary( getImaginaryDouble() * c );",
        "83": "\t\tsetReal( ( a1*c1 + b1*d1 ) / ( c1*c1 + d1*d1 ) );",
        "71": "\t\tsetReal( getRealDouble() + c.getRealDouble() );",
        "72": "\t\tsetImaginary( getImaginaryDouble() + c.getImaginaryDouble() );",
        "78": "\t\tfinal double a1 = getRealDouble();",
        "79": "\t\tfinal double b1 = getImaginaryDouble();",
        "80": "\t\tfinal double c1 = c.getRealDouble();",
        "81": "\t\tfinal double d1 = c.getImaginaryDouble();",
        "50": "\t\tsetReal( c.getRealDouble() );",
        "51": "\t\tsetImaginary( c.getImaginaryDouble() );",
        "84": "\t\tsetImaginary( ( b1*c1 - a1*d1 ) / ( c1*c1 + d1*d1 ) );",
        "57": "\t\tsetReal( getRealFloat() * c );",
        "58": "\t\tsetImaginary( getImaginaryFloat() * c );",
        "91": "\t\tfinal double a = getRealDouble();",
        "92": "\t\tfinal double b = getImaginaryDouble();"
      },
      "id": 71588088,
      "filename": "AbstractComplexType.java"
    },
    {
      "repo": "https://github.com/Wyth/platform_packages_apps_Calculator.git",
      "language": "Java",
      "linescount": 847,
      "location": "/src/com/android/calculator2",
      "name": "platform_packages_apps_Calculator",
      "url": "https://searchcode.com/codesearch/view/71966344/",
      "md5hash": "cb28cd4e5658c0aeaae4563ec88cc259",
      "lines": {
        "320": "",
        "321": "        String imaginary = \"\";",
        "322": "        for(int precision = mLineLength; precision > 6; precision--) {",
        "323": "            imaginary = tryFormattingWithPrecision(value.im, precision);",
        "324": "            if(imaginary.length() <= mLineLength) {",
        "325": "                break;",
        "328": "        String result = \"\";",
        "329": "        if(value.re != 0 && value.im > 0) result = real + \"+\" + imaginary + \"i\";",
        "330": "        else if(value.re != 0 && value.im < 0) result = real + imaginary + \"i\"; // Implicit",
        "331": "                                                                                // -",
        "332": "        else if(value.re != 0 && value.im == 0) result = real;",
        "333": "        else if(value.re == 0 && value.im != 0) result = imaginary + \"i\";"
      },
      "id": 71966344,
      "filename": "Logic.java"
    },
    {
      "repo": "https://github.com/HemantKGupta/Spring.git",
      "language": "Java",
      "linescount": 43,
      "location": "/spring_recipes/2.5/Ch06-Calculator/src/com/apress/springrecipes/calculator",
      "name": "Spring",
      "url": "https://searchcode.com/codesearch/view/72270774/",
      "md5hash": "cbd77c22727a28a86c250ee21acff0da",
      "lines": {
        "9": "    private int real;",
        "10": "    private int imaginary;",
        "12": "",
        "13": "    public Complex(int real, int imaginary) {",
        "14": "        this.real = real;",
        "15": "        this.imaginary = imaginary;",
        "17": "",
        "18": "    public int getImaginary() {",
        "19": "        return imaginary;",
        "20": "    }",
        "25": "",
        "26": "    public void setImaginary(int imaginary) {",
        "27": "        this.imaginary = imaginary;",
        "28": "    }"
      },
      "id": 72270774,
      "filename": "Complex.java"
    },
    {
      "repo": "https://bitbucket.org/iyusuf/vfswithjsch",
      "language": "Java",
      "linescount": 1857,
      "location": "/src/org/apache/commons/vfs2/provider",
      "name": "vfswithjsch",
      "url": "https://searchcode.com/codesearch/view/121926725/",
      "md5hash": "eaaf73e3cf01800192c283d71946e448",
      "lines": {
        "288": "     * Sets the last modified time of this file.  Is only called if",
        "289": "     * {@link #doGetType} does not return {@link FileType#IMAGINARY}.",
        "399": "     * {@link #doGetType} returns {@link FileType#IMAGINARY}, and the file's",
        "167": "     * Determines if this file can be written to.  Is only called if",
        "168": "     * {@link #doGetType} does not return {@link FileType#IMAGINARY}.",
        "141": "     * Determines if this file is hidden.  Is only called if {@link #doGetType}",
        "142": "     * does not return {@link FileType#IMAGINARY}.",
        "303": "     * Returns the attributes of this file.  Is only called if {@link #doGetType}",
        "304": "     * does not return {@link FileType#IMAGINARY}.",
        "275": "     * Returns the last modified time of this file.  Is only called if",
        "276": "     * {@link #doGetType} does not return {@link FileType#IMAGINARY}.",
        "398": "     * <li>{@link #doGetType} returns {@link FileType#FILE}, or",
        "154": "     * Determines if this file can be read.  Is only called if {@link #doGetType}",
        "155": "     * does not return {@link FileType#IMAGINARY}.",
        "316": "     * Sets an attribute of this file.  Is only called if {@link #doGetType}",
        "317": "     * does not return {@link FileType#IMAGINARY}."
      },
      "id": 121926725,
      "filename": "AbstractFileObject.java"
    },
    {
      "repo": "https://github.com/rwest/RMG-Java.git",
      "language": "Java",
      "linescount": 3718,
      "location": "/source/RMG/jing/chem",
      "name": "RMG-Java",
      "url": "https://searchcode.com/codesearch/view/108566618/",
      "md5hash": "7d2a8e4aaaf0e894bcd0c17001f4c8b5",
      "lines": {
        "1568": "        if (failureOverrideFlag == 1)",
        "1569": "            failureFlag = 1; // job will be considered a failure if there are imaginary frequencies or if job terminates",
        "1540": "                        failureFlag = 0;",
        "1541": "                    } else if (trimLine.endsWith(\"imaginary frequencies,\")) {// read the number of imaginary frequencies",
        "1544": "                        if (Integer.parseInt(split[3]) > 0) {",
        "1545": "                            Logger.info(\"*****Imaginary freqencies found:\");",
        "1719": "                    else if (trimLine.endsWith(\"IMAGINARY FREQUENCIES\")) {",
        "1718": "// DOES NOT INCLUDE THE 2 IMAGINARY FREQUENCIES",
        "1428": "                } else if (line.startsWith(\" ******\")) {// also look for imaginary frequencies",
        "1429": "                    if (line.contains(\"imaginary frequencies\")) {",
        "1430": "                        Logger.info(\"*****Imaginary freqencies found:\");",
        "1431": "                        failureFlag = 1;",
        "1720": "                        Logger.info(\"*****Imaginary freqencies found:\");",
        "1721": "                        failureOverrideFlag = 1;",
        "1717": "// ENERGY IS NOT MEANINGFULL. ZERO POINT ENERGY PRINTED"
      },
      "id": 108566618,
      "filename": "QMTP.java"
    },
    {
      "repo": "https://bitbucket.org/jython/jython/",
      "language": "Java",
      "linescount": 1163,
      "location": "/src/org/python/modules",
      "name": "jython",
      "url": "https://searchcode.com/codesearch/view/116546298/",
      "md5hash": "2e275050546b21c43f58d3f869cdebfc",
      "lines": {
        "323": "     * Return the arc tangent of w. There are two branch cuts. One extends from 1j along the",
        "324": "     * imaginary axis to &infin;j, continuous from the right. The other extends from -1j along the",
        "325": "     * imaginary axis to -&infin;j, continuous from the left.",
        "61": "        // the result, and fill in the imaginary part as 0",
        "400": "            // We don't need the imaginary part of 1/z. Just pi/2 with the sign of v. (If not nan.)",
        "1086": "        } else if (x == 0. && !Double.isNaN(y)) {",
        "950": "            } else if (u == 0.) {",
        "951": "                // Pure imaginary, and v is positive.",
        "696": "        double lnr = logHypot(u, v);",
        "697": "        // The imaginary part of the result is the arg. This may result in a nan.",
        "399": "            }",
        "60": "        // If neither of the above works, interpret op as a float giving the real part of",
        "861": "        } else if (x == 0.) {",
        "862": "            // Imaginary argument for sinh (or real for sin): imaginary result at this point.",
        "1087": "            // Imaginary argument for tanh (or real for tan): imaginary result at this point."
      },
      "id": 116546298,
      "filename": "cmath.java"
    },
    {
      "repo": "https://github.com/hgrecco/fiji.git",
      "language": "Java",
      "linescount": 832,
      "location": "/src-plugins/jep/org/nfunk/jep/type",
      "name": "fiji",
      "url": "https://searchcode.com/codesearch/view/113851684/",
      "md5hash": "2c88076f06d8c688efcb7a7f1159e49c",
      "lines": {
        "131": "\t/**",
        "132": "\t * Sets the imaginary component of the object",
        "69": "\t * method of the parameter to initialize the real component of the",
        "70": "\t * complex number. The imaginary component is initialized to zero.",
        "41": "\t",
        "42": "\t/** the imaginary component */",
        "219": "\t/**",
        "14": "/**",
        "15": " * Represents a complex number with double precision real and imaginary",
        "220": "\t * Returns <tt>true</tt> if either the real or imaginary component of this",
        "85": "\t/**",
        "86": "\t * Initialize the real and imaginary components to the values given",
        "59": "\t * initialized with the real component equal to the parameter, and",
        "60": "\t * the imaginary component equal to zero.",
        "190": "\t * Returns the value of this complex number as a string in the format:",
        "191": "\t * <pre>(real, imaginary)</pre>."
      },
      "id": 113851684,
      "filename": "Complex.java"
    },
    {
      "repo": "https://github.com/hgrecco/fiji.git",
      "language": "Java",
      "linescount": 273,
      "location": "/src-plugins/imagescience/imagescience/fourier",
      "name": "fiji",
      "url": "https://searchcode.com/codesearch/view/113853368/",
      "md5hash": "bf3b3213a66b857c90f511941f1238ed",
      "lines": {
        "41": "\t\t",
        "42": "\t\t@param imag the imaginary part of the complex-valued input image. The image is overwritten with the imaginary component of the inverse Fourier transform. Therefore this should be a {@link FloatImage} object.",
        "215": "\t\tif (axes.y && !FMath.power2(rdims.y)) throw new IllegalStateException(\"Real and imaginary y-size not a power of 2\");",
        "207": "\t\tmessenger.log(\"Real input image of type \"+real.type());",
        "208": "\t\tmessenger.log(\"Imaginary input image of type \"+imag.type());",
        "216": "\t\tif (axes.z && !FMath.power2(rdims.z)) throw new IllegalStateException(\"Real and imaginary z-size not a power of 2\");",
        "212": "\t\t",
        "213": "\t\tif (!rdims.equals(idims)) throw new IllegalStateException(\"Real and imaginary images have different dimensions\");",
        "214": "\t\tif (axes.x && !FMath.power2(rdims.x)) throw new IllegalStateException(\"Real and imaginary x-size not a power of 2\");",
        "23": "\t\t",
        "24": "\t\t@param imag the imaginary part of the complex-valued input image. The image is overwritten with the imaginary component of the forward Fourier transform. Therefore this should be a {@link FloatImage} object.",
        "217": "\t\tif (axes.t && !FMath.power2(rdims.t)) throw new IllegalStateException(\"Real and imaginary t-size not a power of 2\");",
        "218": "\t\tif (axes.c && !FMath.power2(rdims.c)) throw new IllegalStateException(\"Real and imaginary c-size not a power of 2\");",
        "219": "\t}"
      },
      "id": 113853368,
      "filename": "FFT.java"
    },
    {
      "repo": "https://github.com/qingmai/mandelbrot-set.git",
      "language": "Java",
      "linescount": 103,
      "location": "/src/mandelbrotset",
      "name": "mandelbrot-set",
      "url": "https://searchcode.com/codesearch/view/93480886/",
      "md5hash": "c9329ebfd1fe69bb74568bb994fe814f",
      "lines": {
        "32": "        double r = real * d;",
        "33": "        double i = imaginary * d;",
        "38": "        double r = this.real + c.real;",
        "7": "    double real;",
        "8": "    double imaginary;",
        "39": "        double i = this.imaginary + c.imaginary;",
        "12": "        real = r;",
        "13": "        imaginary = i;",
        "19": "            System.out.print(real);",
        "20": "            if (imaginary != 0) {",
        "21": "                System.out.println(\"+\" + imaginary + \"i\");",
        "22": "            } else {",
        "24": "            }",
        "25": "        } else if (imaginary != 0) {",
        "26": "            System.out.println(imaginary + \"i\");",
        "27": "        }"
      },
      "id": 93480886,
      "filename": "Complex.java"
    },
    {
      "repo": "https://github.com/nigel-lowry/orientation-correlation.git",
      "language": "Java",
      "linescount": 143,
      "location": "/src/test/java/uk/co/lemmata/image/oc",
      "name": "orientation-correlation",
      "url": "https://searchcode.com/codesearch/view/113792944/",
      "md5hash": "3009d3f2edda194a132284e5d7801940",
      "lines": {
        "64": "\tpublic void testEquals() {",
        "65": "\t\tfinal ComplexNumber complex1 = CommonsMathComplexNumberImpl.realImaginary(1.0, 1.0);",
        "66": "\t\tfinal ComplexNumber complex2 = CommonsMathComplexNumberImpl.realImaginary(1.0, 1.0);",
        "67": "\t\t",
        "39": "\tpublic void signumOfComplexNumberWithMagnitudeZeroIsIdentical() {",
        "40": "\t\tcomplexNumber = CommonsMathComplexNumberImpl.realImaginary(0.0, 0.0);",
        "73": "\t\tfinal ComplexNumber complex1 = CommonsMathComplexNumberImpl.realImaginary(1.0, 1.0);",
        "74": "\t\tfinal ComplexNumber complex2 = CommonsMathComplexNumberImpl.realImaginary(2.0, 2.0);",
        "72": "\tpublic void testNotEquals() {",
        "18": "\t\tfinal double real = 1.0;",
        "19": "\t\tfinal double imaginary = 2.0;",
        "20": "\t\t",
        "21": "\t\tcomplexNumber = CommonsMathComplexNumberImpl.realImaginary(real, imaginary);",
        "23": "\t\tassertThat(complexNumber.getReal(), is(real));",
        "24": "\t\tassertThat(complexNumber.getImaginary(), is(imaginary));"
      },
      "id": 113792944,
      "filename": "CommonsMathComplexNumberImplTest.java"
    },
    {
      "repo": "https://github.com/YianniG/BatchDistMainServer.git",
      "language": "Java",
      "linescount": 191,
      "location": "/src/org/nevec/rjm",
      "name": "BatchDistMainServer",
      "url": "https://searchcode.com/codesearch/view/93804564/",
      "md5hash": "aaeb60739c6e1f7d997fffdc8b4c2873",
      "lines": {
        "129": "        * @return the square root of the this.",
        "130": "        *   The branch is chosen such that the imaginary part of the result has the",
        "35": "        /** ctor with real and imaginary parts",
        "36": "        * @param x real part",
        "8": "",
        "9": "/** Complex numbers with BigDecimal real and imaginary components",
        "139": "                /* compute l=sqrt(re^2+im^2), then u=sqrt((l+re)/2)",
        "140": "                * and v= +- sqrt((l-re)/2 as the new real and imaginary parts.",
        "34": "",
        "174": "        * @return real and imaginary part in parenthesis, divided by a comma.",
        "173": "        /** Human-readable Fortran-type display",
        "18": "",
        "19": "        /** imaginary part",
        "131": "        *   same sign as the imaginary part of this.",
        "132": "        * @see Tim Ahrendt, <a href=\"http://dx.doi.org/10.1145/236869.236924\">Fast High-precision computation of complex square roots</a>,"
      },
      "id": 93804564,
      "filename": "BigComplex.java"
    },
    {
      "repo": "https://bitbucket.org/dmwelch/phdxnat_pipeline",
      "language": "Java",
      "linescount": 551,
      "location": "/lib/saxonB/net/sf/saxon/tree",
      "name": "phdxnat_pipeline",
      "url": "https://searchcode.com/codesearch/view/102289798/",
      "md5hash": "62f353c4916b0c5ac0ec90b223ea20f8",
      "lines": {
        "38": "    private SystemIdMap systemIdMap = new SystemIdMap();",
        "39": "    private boolean imaginary = false;",
        "316": "    /**",
        "317": "     * Get the physical root of the tree. This may be an imaginary document node: this method",
        "18": " *",
        "19": " * <p>A DocumentImpl object may either represent a real document node, or it may represent an imaginary",
        "87": "    /**",
        "88": "     * Set whether this is an imaginary document node",
        "89": "     * @param imaginary if true, this is an imaginary node - the tree is really rooted at the topmost element",
        "90": "     */",
        "91": "",
        "92": "    public void setImaginary(boolean imaginary) {",
        "93": "        this.imaginary = imaginary;",
        "318": "     * should be used only when control information held at the physical root is required",
        "319": "     * @return the document node, which may be imaginary"
      },
      "id": 102289798,
      "filename": "DocumentImpl.java"
    },
    {
      "repo": "https://github.com/mymindleaks/Mint.git",
      "language": "Java",
      "linescount": 2053,
      "location": "/src/main/java/org/mint/complex",
      "name": "Mint",
      "url": "https://searchcode.com/codesearch/view/106911961/",
      "md5hash": "4ead0e5d1859f5e28c927547d512304e",
      "lines": {
        "505": "\t * Extracts the imaginary part of a <tt>Complex</tt> as a <tt>double</tt>.",
        "388": "\t/**",
        "389": "\t * Returns <tt>true</tt> if either the real or imaginary component of this",
        "232": "\t/**",
        "137": "\t * @param im",
        "138": "\t *            Imaginary part",
        "516": "\t * ",
        "239": "\t * @param im",
        "240": "\t *            Imaginary part",
        "504": "\t/**",
        "373": "\t/**",
        "374": "\t * Returns <tt>true</tt> if either the real or imaginary component of this",
        "233": "\t * Returns a <tt>Complex</tt> from real and imaginary parts.",
        "120": "\t/**",
        "121": "\t * Constructs a <tt>Complex</tt> from real and imaginary parts.",
        "517": "\t * @return The imaginary part"
      },
      "id": 106911961,
      "filename": "Complex.java"
    },
    {
      "repo": "https://github.com/hgrecco/fiji.git",
      "language": "Java",
      "linescount": 268,
      "location": "/src-plugins/wavelets/wavelets",
      "name": "fiji",
      "url": "https://searchcode.com/codesearch/view/113853095/",
      "md5hash": "ef17974487097b7d256755f93f218ed0",
      "lines": {
        "33": "\t/**",
        "34": "\t * imaginary lowpass filter.",
        "68": "\t\t\t",
        "37": "\t/**",
        "38": "\t * imaginary highpass filter.",
        "236": "\t\t\t// Imaginary highpass filter",
        "235": "\t\t\t",
        "140": "\t\t\t",
        "77": "\t\t\t",
        "78": "\t\t\t// Imaginary highpass filter",
        "141": "\t\t\t// Imaginary highpass filter",
        "210": "\t\t\t",
        "211": "\t\t\t// imaginary lowpass filter",
        "123": "\t\t\t",
        "124": "\t\t\t// imaginary lowpass filter",
        "69": "\t\t\t// imaginary lowpass filter"
      },
      "id": 113853095,
      "filename": "ComplexWaveFilter.java"
    },
    {
      "repo": "https://bitbucket.org/supplteam/suppl.git",
      "language": "Java",
      "linescount": 198,
      "location": "/docs",
      "name": "Suppl",
      "url": "https://searchcode.com/codesearch/view/92126125/",
      "md5hash": "ce631ecea3845a91853e8184ae4535bb",
      "lines": {
        "72": "\tdouble real = ((alice.tuprolog.Number) arg1).doubleValue();",
        "73": "\tdouble imaginary = ((alice.tuprolog.Number) arg2).doubleValue();",
        "43": "    class Complex {",
        "44": "\tdouble real, imaginary;",
        "45": "",
        "46": "\tpublic Complex(double real, double imaginary) {",
        "47": "\t    this.real = real;",
        "48": "\t    this.imaginary = imaginary;",
        "81": "\t    // now test the components",
        "82": "\t    return ( real == cpx.getReal() && imaginary == cpx.getImaginary() );",
        "51": "\tpublic double getReal() { return real; }",
        "52": "\tpublic double getImaginary() { return imaginary; }",
        "55": "\t    return new Complex( this.real + other.real,",
        "56": "\t\t\t\tthis.imaginary + other.imaginary );",
        "188": "\t    engine.stdOutput(\"inside 'print_complex' \");",
        "189": "\t    engine.stdOutput(\"real: \"+ c1.getReal() + \"  imaginary: \"+ c1.getImaginary() + \"\\n\");"
      },
      "id": 92126125,
      "filename": "NewLibrary.java"
    },
    {
      "repo": "https://github.com/RichardWarburton/packed-objects-experiments.git",
      "language": "Java",
      "linescount": 26,
      "location": "/src/main/java/com/insightfullogic/packed_experiments",
      "name": "packed-objects-experiments",
      "url": "https://searchcode.com/codesearch/view/75890362/",
      "md5hash": "70c23326107ccf0e72502caf927d720a",
      "lines": {
        "17": "\tpublic double real;",
        "18": "\tpublic double imaginary;",
        "19": "",
        "20": "\tpublic ComplexNumber(final double real, final double imaginary) {",
        "21": "\t\tthis.real = real;",
        "22": "\t\tthis.imaginary = imaginary;"
      },
      "id": 75890362,
      "filename": "ComplexNumber.java"
    },
    {
      "repo": "git://github.com/JorenSix/TarsosDSP.git",
      "language": "Java",
      "linescount": 6605,
      "location": "/src/core/be/tarsos/dsp/util/fft",
      "name": "TarsosDSP",
      "url": "https://searchcode.com/codesearch/view/101739480/",
      "md5hash": "eee92def5cdba7364e08fb2297ef7b10",
      "lines": {
        "192": "     * <code>a</code>. Complex number is stored as two float values in",
        "193": "     * sequence: the real and imaginary part, i.e. the size of the input array",
        "226": "     * sequence: the real and imaginary part, i.e. the size of the input array",
        "582": "     * the same result as from <code>complexInverse</code> called with all",
        "225": "     * <code>a</code>. Complex number is stored as two float values in",
        "599": "     * the same result as from <code>complexInverse</code> called with all",
        "583": "     * imaginary part equal 0. Because the result is stored in <code>a</code>,",
        "396": "     * the same result as from <code>complexForward</code> called with all",
        "173": "     * <code>a</code>. Complex number is stored as two float values in",
        "174": "     * sequence: the real and imaginary part, i.e. the size of the input array",
        "397": "     * imaginary part equal 0. Because the result is stored in <code>a</code>,",
        "246": "     * <code>a</code>. Complex number is stored as two float values in",
        "247": "     * sequence: the real and imaginary part, i.e. the size of the input array",
        "600": "     * imaginary part equal 0. Because the result is stored in <code>a</code>,",
        "380": "     * the same result as from <code>complexForward</code> called with all",
        "381": "     * imaginary parts equal 0. Because the result is stored in <code>a</code>,"
      },
      "id": 101739480,
      "filename": "FloatFFT.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 559,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 500,
      "source": "Github",
      "id": 2
    },
    {
      "count": 168,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 15,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 3,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 1,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 1,
      "source": "Unknown",
      "id": 0
    }
  ]
}