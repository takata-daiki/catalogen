{
  "matchterm": "Polygon",
  "previouspage": null,
  "searchterm": "Polygon",
  "query": "Polygon",
  "language_filters": [
    {
      "count": 10512,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 10512,
  "results": [
    {
      "repo": "https://bitbucket.org/tari/prizm-gcc.git",
      "language": "Java",
      "linescount": 612,
      "location": "/libjava/classpath/java/awt",
      "name": "prizm-gcc",
      "url": "https://searchcode.com/codesearch/view/37948118/",
      "md5hash": "da972527262a08b02acebd1f2ed8134b",
      "lines": {
        "64": " */",
        "1": "/* Polygon.java -- class representing a polygon",
        "2": "   Copyright (C) 1999, 2002, 2004, 2005  Free Software Foundation, Inc.",
        "65": "public class Polygon implements Shape, Serializable",
        "96": "   * The bounding box of this polygon. This is lazily created and cached, so",
        "128": "  public Polygon(int[] xpoints, int[] ypoints, int npoints)",
        "140": "   * is discarded. If you are discarding a huge number of points, it may be",
        "141": "   * more efficient to just create a new Polygon.",
        "48": "/**",
        "49": " * This class represents a polygon, a closed, two-dimensional region in a",
        "50": " * coordinate space. The region is bounded by an arbitrary number of line",
        "51": " * segments, between (x,y) coordinate vertices. The polygon has even-odd",
        "137": "  /**",
        "127": "   */",
        "138": "   * Reset the polygon to be empty. The arrays are left alone, to avoid object",
        "95": "  /**"
      },
      "id": 37948118,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://bitbucket.org/bluezoo/gcc.git",
      "language": "Java",
      "linescount": 612,
      "location": "/libjava/classpath/java/awt",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/46813755/",
      "md5hash": "da972527262a08b02acebd1f2ed8134b",
      "lines": {
        "64": " */",
        "1": "/* Polygon.java -- class representing a polygon",
        "2": "   Copyright (C) 1999, 2002, 2004, 2005  Free Software Foundation, Inc.",
        "65": "public class Polygon implements Shape, Serializable",
        "96": "   * The bounding box of this polygon. This is lazily created and cached, so",
        "128": "  public Polygon(int[] xpoints, int[] ypoints, int npoints)",
        "140": "   * is discarded. If you are discarding a huge number of points, it may be",
        "141": "   * more efficient to just create a new Polygon.",
        "48": "/**",
        "49": " * This class represents a polygon, a closed, two-dimensional region in a",
        "50": " * coordinate space. The region is bounded by an arbitrary number of line",
        "51": " * segments, between (x,y) coordinate vertices. The polygon has even-odd",
        "137": "  /**",
        "127": "   */",
        "138": "   * Reset the polygon to be empty. The arrays are left alone, to avoid object",
        "95": "  /**"
      },
      "id": 46813755,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://bitbucket.org/soptnrs/polygontool.git",
      "language": "Java",
      "linescount": 855,
      "location": "/lab1/src",
      "name": "polygontool",
      "url": "https://searchcode.com/codesearch/view/47625598/",
      "md5hash": "163a050a409fab9341b2937336e9b74b",
      "lines": {
        "1": "// ****************************************************************************",
        "2": "// Polygon class.",
        "35": "public class Polygon extends Shape",
        "4": "// Comments :",
        "5": "// Subroutines to manage and draw polygons",
        "39": "    private Point selectedVertex = null;",
        "40": "    /** The list of vertices that make up this polygon. */",
        "41": "    private final ArrayList<Point> vertices = new ArrayList<Point>();",
        "34": " */",
        "18": "/**",
        "19": " * A polygon with additional drawing capabilities.",
        "20": " *",
        "21": " * NOTE: For the polygon with hole expansion, I assume a few key features.  I assume that a",
        "22": " * hole will never have vertices outside the polygon boundary.  I assume that there will be",
        "23": " * no holes within holes for the polygon.  And I enforce the condition that once you create",
        "24": " * a new hole, you can no longer edit any previous holes. I also assume that you can only move"
      },
      "id": 47625598,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://github.com/therealtakeshi/postgis.git",
      "language": "Java",
      "linescount": 71,
      "location": "/java/jdbc/src/org/postgis",
      "name": "postgis",
      "url": "https://searchcode.com/codesearch/view/96560260/",
      "md5hash": "fc9ee57d3b54ce85e633af00f5c3bb22",
      "lines": {
        "1": "/*",
        "2": " * Polygon.java",
        "35": "    public Polygon() {",
        "36": "        super(POLYGON);",
        "37": "    }",
        "38": "",
        "39": "    public Polygon(LinearRing[] rings) {",
        "40": "        super(POLYGON, rings);",
        "41": "    }",
        "42": "",
        "43": "    public Polygon(String value) throws SQLException {",
        "34": "",
        "46": "",
        "47": "    public Polygon(String value, boolean haveM) throws SQLException {",
        "48": "        super(POLYGON, value, haveM);"
      },
      "id": 96560260,
      "filename": "Polygon.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 658,
      "location": "/engine_java/000_Engine_G2D/new_g2d/com/g2d/geom",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11371514/",
      "md5hash": "02d3700f00547ff2b1167869d878a3c3",
      "lines": {
        "1": "/*",
        "2": " * @(#)Polygon.java\t1.57 06/02/24",
        "37": " */",
        "38": "public class Polygon implements Shape, java.io.Serializable {",
        "41": "     * The total number of points.  The value of <code>npoints</code>",
        "42": "     * represents the number of valid points in this <code>Polygon</code>",
        "13": "/**",
        "14": " * The <code>Polygon</code> class encapsulates a description of a ",
        "16": " * region is bounded by an arbitrary number of line segments, each of ",
        "17": " * which is one side of the polygon. Internally, a polygon",
        "19": " * coordinate pairs, where each pair defines a <i>vertex</i> of the ",
        "20": " * polygon, and two successive pairs are the endpoints of a ",
        "21": " * line that is a side of the polygon. The first and final",
        "22": " * pairs of {@code (x,y)} points are joined by a line segment ",
        "23": " * that closes the polygon.  This <code>Polygon</code> is defined with"
      },
      "id": 11371514,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://bitbucket.org/lpimports/gcc.git",
      "language": "Java",
      "linescount": 612,
      "location": "/libjava/classpath/java/awt",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/127596722/",
      "md5hash": "da972527262a08b02acebd1f2ed8134b",
      "lines": {
        "64": " */",
        "1": "/* Polygon.java -- class representing a polygon",
        "2": "   Copyright (C) 1999, 2002, 2004, 2005  Free Software Foundation, Inc.",
        "65": "public class Polygon implements Shape, Serializable",
        "96": "   * The bounding box of this polygon. This is lazily created and cached, so",
        "128": "  public Polygon(int[] xpoints, int[] ypoints, int npoints)",
        "140": "   * is discarded. If you are discarding a huge number of points, it may be",
        "141": "   * more efficient to just create a new Polygon.",
        "48": "/**",
        "49": " * This class represents a polygon, a closed, two-dimensional region in a",
        "50": " * coordinate space. The region is bounded by an arbitrary number of line",
        "51": " * segments, between (x,y) coordinate vertices. The polygon has even-odd",
        "137": "  /**",
        "127": "   */",
        "138": "   * Reset the polygon to be empty. The arrays are left alone, to avoid object",
        "95": "  /**"
      },
      "id": 127596722,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://bitbucket.org/vaporoid/gcc.git",
      "language": "Java",
      "linescount": 612,
      "location": "/libjava/classpath/java/awt",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/130225438/",
      "md5hash": "da972527262a08b02acebd1f2ed8134b",
      "lines": {
        "64": " */",
        "1": "/* Polygon.java -- class representing a polygon",
        "2": "   Copyright (C) 1999, 2002, 2004, 2005  Free Software Foundation, Inc.",
        "65": "public class Polygon implements Shape, Serializable",
        "96": "   * The bounding box of this polygon. This is lazily created and cached, so",
        "128": "  public Polygon(int[] xpoints, int[] ypoints, int npoints)",
        "140": "   * is discarded. If you are discarding a huge number of points, it may be",
        "141": "   * more efficient to just create a new Polygon.",
        "48": "/**",
        "49": " * This class represents a polygon, a closed, two-dimensional region in a",
        "50": " * coordinate space. The region is bounded by an arbitrary number of line",
        "51": " * segments, between (x,y) coordinate vertices. The polygon has even-odd",
        "137": "  /**",
        "127": "   */",
        "138": "   * Reset the polygon to be empty. The arrays are left alone, to avoid object",
        "95": "  /**"
      },
      "id": 130225438,
      "filename": "Polygon.java"
    },
    {
      "repo": "http://google-api-adwords-java.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 186,
      "location": "/src/com/google/api/adwords/v201109/cm",
      "name": "google-api-adwords-java",
      "url": "https://searchcode.com/codesearch/view/4800202/",
      "md5hash": "bbce4f0fe837780716a54f2f1424020f",
      "lines": {
        "1": "/**",
        "2": " * Polygon.java",
        "11": "/**",
        "12": " * Represents a Polygon Criterion.",
        "13": " *             ",
        "14": " *             A polygon is described by a list of at least three points,",
        "17": " * No point can be more than 400km",
        "18": " *             from the center of the polygon. The points are specified",
        "22": " *             ",
        "23": " *             <p>Please note that Polygons are deprecated. This means",
        "24": " * that Polygon targets cannot be added",
        "25": " *             through the API, though existing targets can be retrieved",
        "28": " */",
        "29": "public class Polygon  extends com.google.api.adwords.v201109.cm.Criterion  implements java.io.Serializable {",
        "30": "    /* The latitude/longitude points that define the polygon. At least"
      },
      "id": 4800202,
      "filename": "Polygon.java"
    },
    {
      "repo": "git://github.com/mbien/jake2.git",
      "language": "Java",
      "linescount": 146,
      "location": "/src/jake2/render/basic",
      "name": "jake2",
      "url": "https://searchcode.com/codesearch/view/16860739/",
      "md5hash": "f2460022848dc6d795a5a18e7b71560f",
      "lines": {
        "1": "/*",
        "2": " * Polygon.java",
        "35": "public final class Polygon extends glpoly_t {",
        "4": " *",
        "5": " * $Id: Polygon.java,v 1.2 2006-11-21 00:50:46 cawe Exp $",
        "34": " */",
        "46": "",
        "47": "    private static Polygon[] polyCache = new Polygon[MAXPOLYS];",
        "49": "        for (int i = 0; i < polyCache.length; i++) {",
        "50": "            polyCache[i] = new Polygon();",
        "67": "",
        "54": "    public static glpoly_t create(int numverts) {",
        "55": "        Polygon poly = polyCache[polyCount++];",
        "68": "    private Polygon() {",
        "30": "/**",
        "31": " * Polygon"
      },
      "id": 16860739,
      "filename": "Polygon.java"
    },
    {
      "repo": "git://github.com/mbien/jake2.git",
      "language": "Java",
      "linescount": 164,
      "location": "/src/jake2/render/fast",
      "name": "jake2",
      "url": "https://searchcode.com/codesearch/view/16860749/",
      "md5hash": "5192967b7a9697856be6ec5e6674ec64",
      "lines": {
        "1": "/*",
        "2": " * Polygon.java",
        "4": " *",
        "5": " * $Id: Polygon.java,v 1.2 2006-11-21 00:50:46 cawe Exp $",
        "38": "public final class Polygon extends glpoly_t {",
        "33": "/**",
        "34": " * Polygon",
        "78": "",
        "79": "    private Polygon() {",
        "53": "",
        "54": "    private static Polygon[] polyCache = new Polygon[MAX_POLYS];",
        "56": "        for (int i = 0; i < polyCache.length; i++) {",
        "57": "            polyCache[i] = new Polygon();",
        "61": "    static glpoly_t create(int numverts) {",
        "62": "        Polygon poly = polyCache[polyCount++];",
        "37": " */"
      },
      "id": 16860749,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://github.com/shihuaxian/libgdx.git",
      "language": "Java",
      "linescount": 282,
      "location": "/gdx/src/com/badlogic/gdx/math",
      "name": "libgdx",
      "url": "https://searchcode.com/codesearch/view/75884513/",
      "md5hash": "37a02e97eedee6231cb5e548d47ebce4",
      "lines": {
        "32": "\tpublic Polygon () {",
        "33": "\t\tthis.localVertices = new float[0];",
        "35": "",
        "36": "\t/** Constructs a new polygon from a float array of parts of vertex points. ",
        "43": "\t */",
        "44": "\tpublic Polygon (float[] vertices) {",
        "45": "\t\tif (vertices.length < 6) throw new IllegalArgumentException(\"polygons must contain at least 3 points.\");",
        "46": "\t\tthis.localVertices = vertices;",
        "48": "",
        "49": "\t/** Returns the polygon's local vertices without scaling or rotation and ",
        "18": "",
        "19": "/** Encapsulates a 2D polygon defined by it's vertices relative ",
        "20": " * to an origin point (default of 0, 0). */",
        "21": "public class Polygon {",
        "50": "\t * without being offset by the polygon position. */",
        "30": "\t",
        "31": "\t/** Constructs a new polygon with no vertices. */"
      },
      "id": 75884513,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://github.com/cyclingthealps/GWT-Maps-V3-Api.git",
      "language": "Java",
      "linescount": 306,
      "location": "/gwt-maps-api/src/main/java/com/google/gwt/maps/client/overlays",
      "name": "GWT-Maps-V3-Api",
      "url": "https://searchcode.com/codesearch/view/74857220/",
      "md5hash": "337da3866f6693346803bc045c0b6d7b",
      "lines": {
        "128": "\t * Retrieves the paths for this polygon.",
        "66": "\t/**",
        "67": "\t * Create a polygon using the passed PolygonOptions, which specify the",
        "68": "\t * polygon's path, the stroke style for the polygon's edges, and the fill",
        "69": "\t * style for the polygon's interior regions. A polygon may contain one or",
        "166": "\t */",
        "167": "\tpublic final native void setOptions(PolygonOptions options) /*-{",
        "54": " * See <a href=",
        "55": " * \"https://developers.google.com/maps/documentation/javascript/reference#Polygon\"",
        "56": " * >Polygon API Doc</a>",
        "57": " */",
        "58": "public class Polygon extends MVCObject<Polygon> {",
        "127": "\t/**",
        "62": "\t */",
        "63": "\tprotected Polygon() {"
      },
      "id": 74857220,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://github.com/Astamir/Topology.git",
      "language": "Java",
      "linescount": 780,
      "location": "/src/ru/etu/astamir/geom/common/java",
      "name": "Topology",
      "url": "https://searchcode.com/codesearch/view/76073982/",
      "md5hash": "9197469df211e07473c92fa192b64449",
      "lines": {
        "32": " */",
        "33": "public class Polygon implements Cloneable, Serializable, Drawable {",
        "66": "    public Polygon() {",
        "75": "    }",
        "68": "",
        "69": "    public static Polygon of(Point... vertices) {",
        "70": "        return new Polygon(Lists.newArrayList(vertices));",
        "65": "     */",
        "72": "",
        "73": "    public static Polygon of(Collection<Point> vertices) {",
        "74": "        return new Polygon(Lists.newArrayList(vertices));",
        "71": "    }",
        "76": "",
        "77": "    public boolean intersects(Polygon polygon) {",
        "78": "        for (Point vertex : polygon.vertices) {",
        "57": "    ",
        "58": "    public Polygon(List<Point> vertices) {"
      },
      "id": 76073982,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://github.com/msteptoe/FURI_Code.git",
      "language": "Java",
      "linescount": 176,
      "location": "/IJ_Mobile/src/ome/xml/model",
      "name": "FURI_Code",
      "url": "https://searchcode.com/codesearch/view/71584264/",
      "md5hash": "4f998614eb6c0f8aa0bd45b7ee1f224a",
      "lines": {
        "64": "\tprivate static final Logger LOGGER =",
        "1": "/*",
        "2": " * ome.xml.model.Polygon",
        "65": "\t\tLoggerFactory.getLogger(Polygon.class);",
        "161": "",
        "128": "\t// -- Polygon API methods --",
        "160": "\t\t// Creating XML block for Polygon",
        "162": "\t\tif (Polygon_element == null)",
        "54": "",
        "55": "public class Polygon extends Shape",
        "56": "{",
        "57": "\t// Base:  -- Name: Polygon -- Type: Polygon -- javaBase: AbstractOMEModelObject -- javaType: Object",
        "159": "\t{",
        "157": "",
        "158": "\tprotected Element asXMLElement(Document document, Element Polygon_element)",
        "127": ""
      },
      "id": 71584264,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://github.com/djaddison/nodebox.git",
      "language": "Java",
      "linescount": 80,
      "location": "/src/test/java/nodebox/node/polygraph",
      "name": "nodebox",
      "url": "https://searchcode.com/codesearch/view/72823080/",
      "md5hash": "3c326a804c82e926b0d24f1bd2dd2315",
      "lines": {
        "6": "/**",
        "7": " * A polygon is a list of two-dimensional points.",
        "8": " */",
        "9": "public class Polygon {",
        "12": "",
        "13": "    public static Polygon rect(float x, float y, float width, float height) {",
        "14": "        Polygon p = new Polygon();",
        "15": "        p.addPoint(new Point(x, y));",
        "57": "     * Returns a translated copy of this polygon.",
        "56": "    /**",
        "25": "",
        "26": "    public void extend(Polygon p) {",
        "60": "     * @param ty delta y value",
        "61": "     * @return of copy of this Polygon with all points translated.",
        "62": "     */"
      },
      "id": 72823080,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://github.com/flavoi/roboearth.git",
      "language": "Java",
      "linescount": 94,
      "location": "/re_comm/msg_gen/java/ros/pkg/geometry_msgs/msg",
      "name": "roboearth",
      "url": "https://searchcode.com/codesearch/view/73740734/",
      "md5hash": "05f9c2e0a883f2b970d7004b898f3b63",
      "lines": {
        "1": "/* Auto-generated by genmsg_java.py for file /opt/ros/fuerte/share/geometry_msgs/msg/Polygon.msg */",
        "2": "",
        "75": "  public boolean equals(Object o) {",
        "36": "",
        "37": "  public Polygon clone() {",
        "6": "",
        "7": "public class Polygon extends ros.communication.Message {",
        "10": "",
        "11": "  public Polygon() {",
        "76": "    if(!(o instanceof Polygon))",
        "13": "",
        "14": "  public static java.lang.String __s_getDataType() { return \"geometry_msgs/Polygon\"; }",
        "77": "      return false;",
        "39": "    c.deserialize(serialize(0));",
        "38": "    Polygon c = new Polygon();"
      },
      "id": 73740734,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://github.com/maglob/moonscapes.git",
      "language": "Java",
      "linescount": 147,
      "location": "/src/net/moonscapes/phys",
      "name": "moonscapes",
      "url": "https://searchcode.com/codesearch/view/73502491/",
      "md5hash": "1eedf3218b0362326415c669113a08c2",
      "lines": {
        "3": "/**",
        "4": " * Polygon, collection of vertices.",
        "6": " * @author Marko Aalto",
        "7": " * @version $Id: Polygon.java,v 1.2 2001/11/02 21:08:38 mka Exp $",
        "72": "        // Walk the edges of the polygon",
        "9": " */",
        "10": "public class Polygon {",
        "71": "",
        "15": "     */",
        "16": "    private Polygon() {",
        "20": "     */",
        "21": "    public Polygon(Vec2f[] vertices) {",
        "55": "    /**",
        "56": "     * @return true if point p is inside the polygon",
        "28": "     */",
        "29": "     public Polygon(Polygon poly) {"
      },
      "id": 73502491,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://bitbucket.org/erdal_karaca/gwt-openlayers-javafx-webview-port",
      "language": "Java",
      "linescount": 72,
      "location": "/gwt-openlayers-client/src/main/java/org/gwtopenmaps/openlayers/client/geometry",
      "name": "gwt-openlayers-javafx-webview-port",
      "url": "https://searchcode.com/codesearch/view/76509128/",
      "md5hash": "2995ab5f4835938b6daecfbb4de60f76",
      "lines": {
        "66": "    {",
        "67": "        return PolygonImpl.getGeodesicArea(getJSObject(),",
        "56": "        return PolygonImpl.intersects(getJSObject(), geometry.getJSObject());",
        "11": " */",
        "12": "public class Polygon extends Collection",
        "14": "",
        "15": "    public static Polygon narrowToPolygon(JSObject polygon)",
        "16": "    {",
        "17": "        return (polygon == null) ? null : new Polygon(polygon);",
        "19": "",
        "20": "    protected Polygon(JSObject element)",
        "55": "    {",
        "24": "",
        "25": "    public Polygon(LinearRing[] rings)",
        "26": "    {",
        "61": "    {",
        "62": "        return PolygonImpl.getArea(getJSObject());"
      },
      "id": 76509128,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://bitbucket.org/tskardal/gwt-openlayers",
      "language": "Java",
      "linescount": 88,
      "location": "/gwt-openlayers-client/src/main/java/org/gwtopenmaps/openlayers/client/geometry",
      "name": "gwt-openlayers",
      "url": "https://searchcode.com/codesearch/view/76513271/",
      "md5hash": "7065b88f6104410b6fe2760b3f6ae4a5",
      "lines": {
        "32": "    {",
        "33": "        return (polygon == null) ? null : new Polygon(polygon);",
        "35": "",
        "36": "    protected Polygon(JSObject element)",
        "71": "    {",
        "40": "",
        "41": "    public Polygon(LinearRing[] rings)",
        "42": "    {",
        "43": "        this(PolygonImpl.create((new JObjectArray(rings)).getJSObject()));",
        "77": "    {",
        "46": "    /**",
        "47": "     * Polygons are composed of LinearRing geometries.",
        "72": "        return PolygonImpl.intersects(getJSObject(), geometry.getJSObject());",
        "82": "    {",
        "83": "        return PolygonImpl.getGeodesicArea(getJSObject(),",
        "78": "        return PolygonImpl.getArea(getJSObject());"
      },
      "id": 76513271,
      "filename": "Polygon.java"
    },
    {
      "repo": "https://github.com/pdung/amcgala.git",
      "language": "Java",
      "linescount": 106,
      "location": "/src/main/java/amcgala/framework/shape",
      "name": "amcgala",
      "url": "https://searchcode.com/codesearch/view/80353800/",
      "md5hash": "25c2ef3a4bb8c91fd96c64dfc8d51ee6",
      "lines": {
        "101": "    public String toString() {",
        "70": "     */",
        "71": "    private Polygon() {",
        "73": "",
        "74": "    public Polygon(Vector3d v1, Vector3d v2, Vector3d v3) {",
        "79": "",
        "80": "    public Polygon(Vector3d v1, Vector3d v2, Vector3d v3, Vector3d v4) {",
        "22": "/**",
        "23": " * Polygonobjekt fuer die Koerperdarstellung im 3D Raum",
        "27": " */",
        "28": "public class Polygon extends Shape {",
        "102": "        return \"Polygon{\" + \"line 1=\" + bl1 + \", line 2=\" + bl2 + \", line 3=\""
      },
      "id": 80353800,
      "filename": "Polygon.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 6716,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 2559,
      "source": "Github",
      "id": 2
    },
    {
      "count": 1122,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 74,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 31,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 9,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 1,
      "source": "Google Android",
      "id": 12
    }
  ]
}