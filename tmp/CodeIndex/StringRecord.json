{
  "matchterm": "StringRecord",
  "previouspage": null,
  "searchterm": "StringRecord",
  "query": "StringRecord",
  "language_filters": [
    {
      "count": 110,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 110,
  "results": [
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 220,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642400/",
      "md5hash": "c8c47e5ef32c9cd0be8849a13d1f029f",
      "lines": {
        "86": "            throw new RecordFormatException(\"Not a valid StringRecord\");",
        "51": " */",
        "52": "public class StringRecord",
        "69": "     */",
        "70": "    public StringRecord(RecordInputStream in)",
        "210": "    public Object clone() {",
        "211": "        StringRecord rec = new StringRecord();",
        "60": "",
        "61": "    public StringRecord()",
        "85": "        {"
      },
      "id": 15642400,
      "filename": "StringRecord.java"
    },
    {
      "repo": "git://github.com/jOOQ/jOOQ.git",
      "language": "Java",
      "linescount": 141,
      "location": "/jOOQ-test/src/org/jooq/test/hsqldb/generatedclasses/tables/records",
      "name": "jOOQ",
      "url": "https://searchcode.com/codesearch/view/16955553/",
      "md5hash": "2978f43300f806af76d9887f713016af",
      "lines": {
        "131": "\t/**",
        "132": "\t * Create a detached, initialised StringRecord",
        "133": "\t */",
        "134": "\tpublic StringRecord(java.lang.Integer id, java.lang.String other) {",
        "9": "@java.lang.SuppressWarnings({ \"all\", \"unchecked\", \"rawtypes\" })",
        "10": "public class StringRecord extends org.jooq.impl.TableRecordImpl<org.jooq.test.hsqldb.generatedclasses.tables.records.StringRecord> implements org.jooq.Record2<java.lang.Integer, java.lang.String>, org.jooq.test.hsqldb.generatedclasses.tables.interfaces.IString {",
        "124": "\t/**",
        "125": "\t * Create a detached StringRecord",
        "126": "\t */",
        "127": "\tpublic StringRecord() {"
      },
      "id": 16955553,
      "filename": "StringRecord.java"
    },
    {
      "repo": "https://github.com/vrnithinkumar/stratosphere.git",
      "language": "Java",
      "linescount": 689,
      "location": "/stratosphere-core/src/main/java/eu/stratosphere/core/io",
      "name": "stratosphere",
      "url": "https://searchcode.com/codesearch/view/92599306/",
      "md5hash": "24fc04899d020020d14af5f26b1db6ba",
      "lines": {
        "328": "\t\tfinal StringRecord sr = (StringRecord) obj;",
        "450": "\t\t\tif (length < 0) {",
        "323": "",
        "324": "\t\tif (!(obj instanceof StringRecord)) {",
        "327": "",
        "200": "\t/** copy a text. */",
        "201": "\tpublic void set(final StringRecord other) {",
        "74": "\tpublic StringRecord() {",
        "46": " */",
        "73": "",
        "81": "\t */",
        "82": "\tpublic StringRecord(final String string) {",
        "451": "\t\t\t\tthrow new IOException(\"length of StringRecord is \" + length);",
        "86": "\t/** Construct from another text. */",
        "87": "\tpublic StringRecord(final StringRecord utf8) {",
        "47": "public class StringRecord implements IOReadableWritable {"
      },
      "id": 92599306,
      "filename": "StringRecord.java"
    },
    {
      "repo": "https://github.com/vasia/flink.git",
      "language": "Java",
      "linescount": 702,
      "location": "/flink-core/src/main/java/org/apache/flink/core/io",
      "name": "flink",
      "url": "https://searchcode.com/codesearch/view/93181896/",
      "md5hash": "f2d79d09c3588067ac8d1be939ac1a71",
      "lines": {
        "464": "\t\t\t\tthrow new IOException(\"length of StringRecord is \" + length);",
        "98": "\t/** Construct from another text. */",
        "99": "\tpublic StringRecord(final StringRecord utf8) {",
        "105": "\t */",
        "106": "\tpublic StringRecord(final byte[] utf8) {",
        "463": "\t\t\tif (length < 0) {",
        "336": "",
        "337": "\t\tif (!(obj instanceof StringRecord)) {",
        "340": "",
        "85": "",
        "86": "\tpublic StringRecord() {",
        "56": " */",
        "57": "public class StringRecord implements Value {",
        "93": "\t */",
        "94": "\tpublic StringRecord(final String string) {",
        "341": "\t\tfinal StringRecord sr = (StringRecord) obj;"
      },
      "id": 93181896,
      "filename": "StringRecord.java"
    },
    {
      "repo": "https://github.com/mrbradparks/jOOQ.git",
      "language": "Java",
      "linescount": 167,
      "location": "/jOOQ-test/src/test/java/org/jooq/test/hsqldb/generatedclasses/tables/records",
      "name": "jOOQ",
      "url": "https://searchcode.com/codesearch/view/92821099/",
      "md5hash": "029a60368c8675dda375ef34ed800fee",
      "lines": {
        "160": "\tpublic StringRecord(java.lang.Integer id, java.lang.String other) {",
        "101": "\t@Override",
        "102": "\tpublic StringRecord value1(java.lang.Integer value) {",
        "9": "@java.lang.SuppressWarnings({ \"all\", \"unchecked\", \"rawtypes\" })",
        "10": "public class StringRecord extends org.jooq.impl.TableRecordImpl<org.jooq.test.hsqldb.generatedclasses.tables.records.StringRecord> implements org.jooq.Record2<java.lang.Integer, java.lang.String>, org.jooq.test.hsqldb.generatedclasses.tables.interfaces.IString {",
        "151": "\t * Create a detached StringRecord",
        "110": "\t@Override",
        "111": "\tpublic StringRecord value2(java.lang.String value) {",
        "152": "\t */",
        "150": "\t/**",
        "119": "\t@Override",
        "120": "\tpublic StringRecord values(java.lang.Integer value1, java.lang.String value2) {",
        "153": "\tpublic StringRecord() {",
        "157": "\t/**",
        "158": "\t * Create a detached, initialised StringRecord",
        "159": "\t */"
      },
      "id": 92821099,
      "filename": "StringRecord.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 63,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/write/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374546/",
      "md5hash": "c4e588d7f337ccf7445719073d4ab948",
      "lines": {
        "40": "   */",
        "41": "  public StringRecord(String val)",
        "30": " */",
        "31": "class StringRecord extends WritableRecordData"
      },
      "id": 11374546,
      "filename": "StringRecord.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 63,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260284/",
      "md5hash": "bb74716e7b432ffd098dafac699bc6a1",
      "lines": {
        "40": "   */",
        "41": "  public StringRecord(String val)",
        "30": " */",
        "31": "class StringRecord extends WritableRecordData"
      },
      "id": 43260284,
      "filename": "StringRecord.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 63,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200812/",
      "md5hash": "bb74716e7b432ffd098dafac699bc6a1",
      "lines": {
        "40": "   */",
        "41": "  public StringRecord(String val)",
        "30": " */",
        "31": "class StringRecord extends WritableRecordData"
      },
      "id": 49200812,
      "filename": "StringRecord.java"
    },
    {
      "repo": "https://github.com/apcj/neo4j.git",
      "language": "Java",
      "linescount": 724,
      "location": "/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store",
      "name": "neo4j",
      "url": "https://searchcode.com/codesearch/view/71597221/",
      "md5hash": "09ba77af5d3cf0b5ca49399b7a38747c",
      "lines": {
        "464": "                Collection<DynamicRecord> stringRecords = stringPropertyStore.getLightRecords( record.getSingleValueLong() );",
        "465": "                for ( DynamicRecord stringRecord : stringRecords )",
        "530": "            byte[] encodedString = encodeString( string );",
        "299": "            {",
        "300": "                Collection<DynamicRecord> stringRecords = stringPropertyStore.getLightRecords( block.getSingleValueLong() );",
        "301": "                for ( DynamicRecord stringRecord : stringRecords )",
        "302": "                {",
        "303": "                    stringRecord.setType( PropertyType.STRING.intValue() );",
        "304": "                    block.addValueRecord( stringRecord );",
        "305": "                }",
        "306": "            }",
        "307": "            for ( DynamicRecord stringRecord : block.getValueRecords() )",
        "308": "                stringPropertyStore.ensureHeavy( stringRecord );",
        "309": "        }",
        "531": "            Collection<DynamicRecord> valueRecords = allocateStringRecords( encodedString );",
        "463": "            {"
      },
      "id": 71597221,
      "filename": "PropertyStore.java"
    },
    {
      "repo": "https://github.com/ruderphilipp/community.git",
      "language": "Java",
      "linescount": 717,
      "location": "/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store",
      "name": "community",
      "url": "https://searchcode.com/codesearch/view/75402992/",
      "md5hash": "153e4b6fe984674193591a0cd56ccb4c",
      "lines": {
        "320": "            {",
        "321": "                stringRecord.setType( PropertyType.STRING.intValue() );",
        "322": "                record.addValueRecord( stringRecord );",
        "323": "            }",
        "356": "                    stringRecord.setType( PropertyType.STRING.intValue() );",
        "357": "                    block.addValueRecord( stringRecord );",
        "358": "                }",
        "353": "                Collection<DynamicRecord> stringRecords = stringPropertyStore.getLightRecords( block.getSingleValueLong() );",
        "354": "                for ( DynamicRecord stringRecord : stringRecords )",
        "527": "            byte[] encodedString = encodeString( string );",
        "528": "            Collection<DynamicRecord> valueRecords = allocateStringRecords( stringBlockId, encodedString );",
        "352": "            {",
        "355": "                {",
        "504": "",
        "505": "    private Collection<DynamicRecord> allocateStringRecords( long valueBlockId, byte[] chars )"
      },
      "id": 75402992,
      "filename": "PropertyStore.java"
    },
    {
      "repo": "https://github.com/rtincar/iciql.git",
      "language": "Java",
      "linescount": 116,
      "location": "/tests/com/iciql/test",
      "name": "iciql",
      "url": "https://searchcode.com/codesearch/view/68007530/",
      "md5hash": "11ee621f68b641925207d80af78d3610",
      "lines": {
        "64": "\t\tStringRecord r2 = new StringRecord();",
        "65": "\t\tStringRecord revisedRecord = db.from(r2).where(r2.id).is(2).selectFirst();",
        "66": "\t\tassertEquals(failureMsg, newWords, revisedRecord.words);",
        "75": "\t */",
        "81": "\t\tpublic StringRecord() {",
        "42": "\t\tdb.executeUpdate(MessageFormat.format(create, \"VARCHAR(255)\"));",
        "43": "\t\tdb.insertAll(StringRecord.getList());",
        "76": "\tpublic static class StringRecord implements Iciql {",
        "80": "",
        "49": "\t\tdb.executeUpdate(MessageFormat.format(create, db.getDialect().convertSqlType(\"CLOB\")));",
        "50": "\t\tdb.insertAll(StringRecord.getList());",
        "57": "\t\tString newWords = \"I changed the words\";",
        "58": "\t\tStringRecord r = new StringRecord();",
        "59": "\t\tStringRecord originalRecord = db.from(r).where(r.id).is(2).selectFirst();",
        "60": "\t\tString oldWords = originalRecord.words;",
        "63": ""
      },
      "id": 68007530,
      "filename": "ClobTest.java"
    },
    {
      "repo": "https://github.com/dmontag/neo4j-community.git",
      "language": "Java",
      "linescount": 737,
      "location": "/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store",
      "name": "neo4j-community",
      "url": "https://searchcode.com/codesearch/view/67764588/",
      "md5hash": "a533cac375cc14ec71888f1a6b96f28e",
      "lines": {
        "539": "            Collection<DynamicRecord> valueRecords = allocateStringRecords( stringBlockId, encodedString );",
        "322": "        {",
        "323": "            Collection<DynamicRecord> stringRecords = stringPropertyStore.getLightRecords( record.getSingleValueLong() );",
        "324": "            for ( DynamicRecord stringRecord : stringRecords )",
        "325": "            {",
        "326": "                stringRecord.setType( PropertyType.STRING.intValue() );",
        "327": "                record.addValueRecord( stringRecord );",
        "360": "                {",
        "361": "                    stringRecord.setType( PropertyType.STRING.intValue() );",
        "362": "                    block.addValueRecord( stringRecord );",
        "359": "                for ( DynamicRecord stringRecord : stringRecords )",
        "328": "            }",
        "358": "                Collection<DynamicRecord> stringRecords = stringPropertyStore.getLightRecords( block.getSingleValueLong() );",
        "363": "                }",
        "538": "            byte[] encodedString = encodeString( string );"
      },
      "id": 67764588,
      "filename": "PropertyStore.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 220,
      "location": "/components/forks/poi/src/loci/poi/hssf/record/aggregates",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642592/",
      "md5hash": "fa845485a51e4538ffbac8c3b6be9a3c",
      "lines": {
        "64": "        this.stringRecord = stringRecord;",
        "130": "",
        "131": "    public StringRecord getStringRecord()",
        "132": "    {",
        "133": "        return stringRecord;",
        "199": "    public Object clone() {",
        "200": "\t\t\tStringRecord clonedString = (stringRecord == null) ? null : (StringRecord)stringRecord.clone();",
        "216": "        if(stringRecord==null) return null;",
        "217": "        return stringRecord.getString();",
        "58": "    private FormulaRecord formulaRecord;",
        "59": "    private StringRecord stringRecord;",
        "60": "    ",
        "61": "    public FormulaRecordAggregate( FormulaRecord formulaRecord, StringRecord stringRecord )",
        "218": "   }",
        "63": "        this.formulaRecord = formulaRecord;"
      },
      "id": 15642592,
      "filename": "FormulaRecordAggregate.java"
    },
    {
      "repo": "http://h2database.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 112,
      "location": "/h2/src/test/org/h2/test/jaqu",
      "name": "h2database",
      "url": "https://searchcode.com/codesearch/view/1937569/",
      "md5hash": "abdef43102aafd632a8c55778666c3d6",
      "lines": {
        "68": "     */",
        "37": "        db.executeUpdate(MessageFormat.format(create, \"VARCHAR(255)\"));",
        "38": "        db.insertAll(StringRecord.getList());",
        "73": "",
        "74": "        public StringRecord() {",
        "43": "        db.executeUpdate(MessageFormat.format(create, \"TEXT\"));",
        "44": "        db.insertAll(StringRecord.getList());",
        "50": "        String newWords = \"I changed the words\";",
        "51": "        StringRecord r = new StringRecord();",
        "52": "        StringRecord originalRecord = db.from(r).where(r.id).is(2).selectFirst();",
        "53": "        String oldWords = originalRecord.words;",
        "56": "",
        "57": "        StringRecord r2 = new StringRecord();",
        "58": "        StringRecord revisedRecord = db.from(r2).where(r2.id).is(2).selectFirst();",
        "59": "        assertEquals(failureMsg, newWords, revisedRecord.words);",
        "69": "    public static class StringRecord implements Table {"
      },
      "id": 1937569,
      "filename": "ClobTest.java"
    },
    {
      "repo": "https://github.com/xiezhaohui/DataViewer.git",
      "language": "Java",
      "linescount": 304,
      "location": "/ETL/src/com/util",
      "name": "DataViewer",
      "url": "https://searchcode.com/codesearch/view/68613461/",
      "md5hash": "8bd64dddea629578a6d8e6f976c7b348",
      "lines": {
        "192": "\t\t\t\t// String for formula",
        "193": "\t\t\t\tStringRecord srec = (StringRecord) record;",
        "196": "\t\t\t\tthisColumn = nextColumn;",
        "197": "\t\t\t\toutputNextStringRecord = false;",
        "63": "\tprivate boolean outputNextStringRecord;",
        "62": "\tprivate int nextColumn;",
        "178": "\t\t\t\t\t// This is stored in the next record",
        "179": "\t\t\t\t\toutputNextStringRecord = true;",
        "190": "\t\tcase StringRecord.sid:",
        "31": "import org.apache.poi.hssf.record.StringRecord;",
        "189": "\t\t\tbreak;",
        "30": "import org.apache.poi.hssf.record.SSTRecord;",
        "191": "\t\t\tif (outputNextStringRecord) {"
      },
      "id": 68613461,
      "filename": "HxlsAbstract.java"
    },
    {
      "repo": "git://github.com/neo4j/community.git",
      "language": "Java",
      "linescount": 764,
      "location": "/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store",
      "name": "community",
      "url": "https://searchcode.com/codesearch/view/5616537/",
      "md5hash": "ceef2e81ed4bfc31bb2d78a040b39bc0",
      "lines": {
        "561": "    private Collection<DynamicRecord> allocateStringRecords( long valueBlockId, byte[] chars )",
        "584": "            Collection<DynamicRecord> valueRecords = allocateStringRecords( stringBlockId, encodedString );",
        "583": "            byte[] encodedString = encodeString( string );",
        "560": "",
        "376": "            {",
        "373": "        {",
        "374": "            Collection<DynamicRecord> stringRecords = stringPropertyStore.getLightRecords( record.getSingleValueLong() );",
        "375": "            for ( DynamicRecord stringRecord : stringRecords )",
        "408": "            {",
        "409": "                Collection<DynamicRecord> stringRecords = stringPropertyStore.getLightRecords( block.getSingleValueLong() );",
        "410": "                for ( DynamicRecord stringRecord : stringRecords )",
        "411": "                {",
        "412": "                    stringRecord.setType( PropertyType.STRING.intValue() );",
        "413": "                    block.addValueRecord( stringRecord );",
        "414": "                }"
      },
      "id": 5616537,
      "filename": "PropertyStore.java"
    },
    {
      "repo": "https://bitbucket.org/antiguru/h2database.git",
      "language": "Java",
      "linescount": 111,
      "location": "/h2/src/test/org/h2/test/jaqu",
      "name": "h2database",
      "url": "https://searchcode.com/codesearch/view/91928010/",
      "md5hash": "6ce77d24ae8cfae1295744daf20d0390",
      "lines": {
        "68": "    public static class StringRecord implements Table {",
        "67": "     */",
        "36": "        db.executeUpdate(MessageFormat.format(create, \"VARCHAR(255)\"));",
        "37": "        db.insertAll(StringRecord.getList());",
        "72": "",
        "73": "        public StringRecord() {",
        "42": "        db.executeUpdate(MessageFormat.format(create, \"TEXT\"));",
        "43": "        db.insertAll(StringRecord.getList());",
        "49": "        String newWords = \"I changed the words\";",
        "50": "        StringRecord r = new StringRecord();",
        "51": "        StringRecord originalRecord = db.from(r).where(r.id).is(2).selectFirst();",
        "52": "        String oldWords = originalRecord.words;",
        "55": "",
        "56": "        StringRecord r2 = new StringRecord();",
        "57": "        StringRecord revisedRecord = db.from(r2).where(r2.id).is(2).selectFirst();",
        "58": "        assertEquals(failureMsg, newWords, revisedRecord.words);"
      },
      "id": 91928010,
      "filename": "ClobTest.java"
    },
    {
      "repo": "https://github.com/vrnithinkumar/stratosphere.git",
      "language": "Java",
      "linescount": 507,
      "location": "/stratosphere-core/src/main/java/eu/stratosphere/core/fs",
      "name": "stratosphere",
      "url": "https://searchcode.com/codesearch/view/92599266/",
      "md5hash": "fb57b8387fd45960b9831453c820618a",
      "lines": {
        "482": "\t\t\tout.writeBoolean(true);",
        "483": "\t\t\tStringRecord.writeString(out, uri.getScheme());",
        "484": "\t\t\tStringRecord.writeString(out, uri.getUserInfo());",
        "485": "\t\t\tStringRecord.writeString(out, uri.getHost());",
        "486": "\t\t\tout.writeInt(uri.getPort());",
        "487": "\t\t\tStringRecord.writeString(out, uri.getPath());",
        "488": "\t\t\tStringRecord.writeString(out, uri.getQuery());",
        "457": "\t\tif (isNotNull) {",
        "458": "\t\t\tfinal String scheme = StringRecord.readString(in);",
        "459": "\t\t\tfinal String userInfo = StringRecord.readString(in);",
        "460": "\t\t\tfinal String host = StringRecord.readString(in);",
        "461": "\t\t\tfinal int port = in.readInt();",
        "462": "\t\t\tfinal String path = StringRecord.readString(in);",
        "463": "\t\t\tfinal String query = StringRecord.readString(in);",
        "489": "\t\t\tStringRecord.writeString(out, uri.getFragment());",
        "490": "\t\t}"
      },
      "id": 92599266,
      "filename": "Path.java"
    },
    {
      "repo": "https://github.com/vasia/flink.git",
      "language": "Java",
      "linescount": 515,
      "location": "/flink-core/src/main/java/org/apache/flink/core/fs",
      "name": "flink",
      "url": "https://searchcode.com/codesearch/view/93181818/",
      "md5hash": "15440f2094805f905ef58c18af45587d",
      "lines": {
        "496": "\t\t}",
        "34": "import org.apache.flink.core.io.IOReadableWritable;",
        "35": "import org.apache.flink.core.io.StringRecord;",
        "488": "\t\t\tout.writeBoolean(true);",
        "489": "\t\t\tStringRecord.writeString(out, uri.getScheme());",
        "490": "\t\t\tStringRecord.writeString(out, uri.getUserInfo());",
        "491": "\t\t\tStringRecord.writeString(out, uri.getHost());",
        "492": "\t\t\tout.writeInt(uri.getPort());",
        "493": "\t\t\tStringRecord.writeString(out, uri.getPath());",
        "494": "\t\t\tStringRecord.writeString(out, uri.getQuery());",
        "463": "\t\tif (isNotNull) {",
        "464": "\t\t\tfinal String scheme = StringRecord.readString(in);",
        "465": "\t\t\tfinal String userInfo = StringRecord.readString(in);",
        "466": "\t\t\tfinal String host = StringRecord.readString(in);",
        "495": "\t\t\tStringRecord.writeString(out, uri.getFragment());"
      },
      "id": 93181818,
      "filename": "Path.java"
    },
    {
      "repo": "https://github.com/vrnithinkumar/stratosphere.git",
      "language": "Java",
      "linescount": 107,
      "location": "/stratosphere-runtime/src/test/java/eu/stratosphere/nephele/types",
      "name": "stratosphere",
      "url": "https://searchcode.com/codesearch/view/92598030/",
      "md5hash": "709a5944c6dca4b68d8a1e2a36693631",
      "lines": {
        "32": "import eu.stratosphere.core.io.StringRecord;",
        "98": "\t\ttry {",
        "99": "\t\t\tStringRecord.readString(inputMock);",
        "36": "/**",
        "37": " *         TODO: {@link StringRecord} has a lot of public methods that need to be tested.",
        "38": " */",
        "39": "public class StringRecordTest {",
        "104": "\t\tfail(\"StringRecord.readString did not throw an IOException for negative length of string\");\t\t",
        "103": "",
        "77": "",
        "78": "\t\t\tfinal String readString = StringRecord.readString(inputMock);",
        "49": "\t/**",
        "50": "\t * Tests the serialization/deserialization of the {@link StringRecord} class.",
        "52": "\t@Test",
        "53": "\tpublic void testStringRecord() {",
        "54": "",
        "31": ""
      },
      "id": 92598030,
      "filename": "StringRecordTest.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 99,
      "source": "Github",
      "id": 2
    },
    {
      "count": 7,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 4,
      "source": "Google Code",
      "id": 1
    }
  ]
}