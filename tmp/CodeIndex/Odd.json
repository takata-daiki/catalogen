{
  "matchterm": "Odd",
  "previouspage": null,
  "searchterm": "Odd",
  "query": "Odd",
  "language_filters": [
    {
      "count": 9246,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 9245,
  "results": [
    {
      "repo": "https://bitbucket.org/btingle/archiviststoolkit",
      "language": "Java",
      "linescount": 275,
      "location": "/src/org/archiviststoolkit/structure/EAD",
      "name": "archiviststoolkit",
      "url": "https://searchcode.com/codesearch/view/56687045/",
      "md5hash": "d7bb8f64c85fd2cc223a98e53c3f6ef4",
      "lines": {
        "68": "        @XmlElement(name = \"list\", namespace = \"urn:isbn:1-931666-22-9\", type = org.archiviststoolkit.structure.EAD.List.class),",
        "69": "        @XmlElement(name = \"odd\", namespace = \"urn:isbn:1-931666-22-9\", type = Odd.class),",
        "38": " *           &lt;element name=\"daogrp\" type=\"{urn:isbn:1-931666-22-9}daogrp\"/>",
        "39": " *           &lt;element name=\"odd\" type=\"{urn:isbn:1-931666-22-9}odd\"/>",
        "140": "     * {@link org.archiviststoolkit.structure.EAD.List }",
        "141": "     * {@link Odd }",
        "24": "/**",
        "52": "@XmlAccessorType(XmlAccessType.FIELD)",
        "53": "@XmlType(name = \"odd\", namespace = \"urn:isbn:1-931666-22-9\", propOrder = {",
        "57": "public class Odd {",
        "56": "})",
        "25": " * <p>Java class for odd complex type.",
        "29": " * <pre>",
        "30": " * &lt;complexType name=\"odd\">"
      },
      "id": 56687045,
      "filename": "Odd.java"
    },
    {
      "repo": "http://google-refine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 70,
      "location": "/main/src/com/google/refine/expr/functions/math",
      "name": "google-refine",
      "url": "https://searchcode.com/codesearch/view/2366143/",
      "md5hash": "1381b90fe5ac548d4fcbdc895eb7503f",
      "lines": {
        "49": "        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {",
        "50": "            return Odd.roundUpToOdd(((Number) args[0]).doubleValue());",
        "54": "",
        "55": "    public static double roundUpToOdd(double d){",
        "44": "",
        "45": "public class Odd implements Function {"
      },
      "id": 2366143,
      "filename": "Odd.java"
    },
    {
      "repo": "https://github.com/blankwavearcade/codeeval.git",
      "language": "Java",
      "linescount": 11,
      "location": "/Odd",
      "name": "codeeval",
      "url": "https://searchcode.com/codesearch/view/92667721/",
      "md5hash": "8f5baefd56e67cff03c6e6f598a5d31d",
      "lines": {
        "1": "class Odd{ ",
        "2": "  public static void main (String[] args) {"
      },
      "id": 92667721,
      "filename": "Odd.java"
    },
    {
      "repo": "https://github.com/poidasmith/xlloop.git",
      "language": "Java",
      "linescount": 19,
      "location": "/org.boris.expr/java/src/org/boris/expr/function/excel",
      "name": "xlloop",
      "url": "https://searchcode.com/codesearch/view/105399322/",
      "md5hash": "0657d9215c4244b4a9aae7c4b5515ada",
      "lines": {
        "5": "",
        "6": "public class ODD extends DoubleInOutFunction"
      },
      "id": 105399322,
      "filename": "ODD.java"
    },
    {
      "repo": "https://github.com/sd-/ChestShop-3.git",
      "language": "Java",
      "linescount": 24,
      "location": "/com/Acrobot/ChestShop/Items",
      "name": "ChestShop-3",
      "url": "https://searchcode.com/codesearch/view/68005046/",
      "md5hash": "d4392ee5484677cda612e2f0383f7226",
      "lines": {
        "17": "        try {",
        "2": "",
        "3": "import info.somethingodd.bukkit.OddItem.OddItem;",
        "8": " */",
        "9": "public class Odd {",
        "18": "            return OddItem.getItemStack(name);"
      },
      "id": 68005046,
      "filename": "Odd.java"
    },
    {
      "repo": "https://bitbucket.org/wikier/google-refine",
      "language": "Java",
      "linescount": 70,
      "location": "/main/src/com/google/refine/expr/functions/math",
      "name": "google-refine",
      "url": "https://searchcode.com/codesearch/view/130338975/",
      "md5hash": "1381b90fe5ac548d4fcbdc895eb7503f",
      "lines": {
        "49": "        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {",
        "50": "            return Odd.roundUpToOdd(((Number) args[0]).doubleValue());",
        "54": "",
        "55": "    public static double roundUpToOdd(double d){",
        "44": "",
        "45": "public class Odd implements Function {"
      },
      "id": 130338975,
      "filename": "Odd.java"
    },
    {
      "repo": "https://github.com/MIT-Mobile/MIT-Mobile-for-Android.git",
      "language": "Java",
      "linescount": 138,
      "location": "/src/com/google/zxing/oned",
      "name": "MIT-Mobile-for-Android",
      "url": "https://searchcode.com/codesearch/view/109997876/",
      "md5hash": "de740228d458d3ce66d8127964d2abc1",
      "lines": {
        "34": "  // if the barcode is 5 123456 789012 then the value of the first digit is",
        "35": "  // signified by using odd for '1', even for '2', even for '3', odd for '4',",
        "36": "  // odd for '5', and even for '6'. See http://en.wikipedia.org/wiki/EAN-13",
        "37": "  //",
        "39": "  //    Digit   0     1     2     3     4     5",
        "40": "  //       0    Odd   Odd   Odd   Odd   Odd   Odd",
        "41": "  //       1    Odd   Odd   Even  Odd   Even  Even",
        "42": "  //       2    Odd   Odd   Even  Even  Odd   Even",
        "43": "  //       3    Odd   Odd   Even  Even  Even  Odd",
        "44": "  //       4    Odd   Even  Odd   Odd   Even  Even",
        "45": "  //       5    Odd   Even  Even  Odd   Odd   Even",
        "46": "  //       6    Odd   Even  Even  Even  Odd   Odd",
        "47": "  //       7    Odd   Even  Odd   Even  Odd   Even",
        "48": "  //       8    Odd   Even  Odd   Even  Even  Odd",
        "49": "  //       9    Odd   Even  Even  Odd   Even  Odd"
      },
      "id": 109997876,
      "filename": "EAN13Reader.java"
    },
    {
      "repo": "https://github.com/eemi2010/ext4j.git",
      "language": "Java",
      "linescount": 292,
      "location": "/gwt4ext/src/com/ait/ext4j/client/chart/axis",
      "name": "ext4j",
      "url": "https://searchcode.com/codesearch/view/72954841/",
      "md5hash": "a3bab48a2ccb712c965072f2ceee42b4",
      "lines": {
        "128": "     * with { odd, even } properties where each property contains a sprite style",
        "132": "     */",
        "133": "    public void setGrid(String oddStroke) {",
        "134": "        SpriteConfig odd = new SpriteConfig();",
        "135": "        odd.setFill(oddStroke);",
        "136": "        setGrid(new GridConfig(odd));",
        "73": "     * <p>",
        "74": "     * You can set specific options for the grid configuration for odd and/or",
        "75": "     * even lines/rows. Since the rows being drawn are rectangle sprites, you",
        "144": "     * <p>",
        "145": "     * You can set specific options for the grid configuration for odd and/or",
        "146": "     * even lines/rows. Since the rows being drawn are rectangle sprites, you",
        "147": "     * can set to an odd or even property all styles that apply to",
        "137": "    }",
        "127": "     * The possible values for a grid option are then true, false, or an object"
      },
      "id": 72954841,
      "filename": "AbstractAxis.java"
    },
    {
      "repo": "https://github.com/mdavid/IKVM.NET-cvs-clone.git",
      "language": "Java",
      "linescount": 2661,
      "location": "/classpath/ikvm/internal",
      "name": "IKVM.NET-cvs-clone",
      "url": "https://searchcode.com/codesearch/view/109334984/",
      "md5hash": "95056b6baabc22621a053b59992f2262",
      "lines": {
        "2326": "        /* determine if y is an odd int when x < 0",
        "2503": "",
        "2504": "        s = one; /* s (sign of result -ve**odd) = -1 else = 1 */",
        "2505": "        if ((((hx >> 31) + 1) | (yisint - 1)) == 0) {",
        "2506": "            s = -one; /* (-ve)**(odd int) */",
        "2327": "         * yisint = 0        ... y is not an integer",
        "2258": "     *        12. +0 ** (-anything except 0, NAN)               is +INF",
        "2256": "     *        10. +0 ** (+anything except 0, NAN)               is +0",
        "2257": "     *        11. -0 ** (+anything except 0, NAN, odd integer)  is +0",
        "562": "        m -= 1023L; /* unbias exponent */",
        "563": "        if ((m & 1) != 0) { /* odd m, double x to make it even */",
        "2325": "",
        "1558": "",
        "1559": "        /* break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly */",
        "2328": "         * yisint = 1        ... y is an odd int"
      },
      "id": 109334984,
      "filename": "JMath.java"
    },
    {
      "repo": "https://bitbucket.org/xiaoqiangnk/openjdk-mips",
      "language": "Java",
      "linescount": 3203,
      "location": "/jdk/src/share/classes/java/math",
      "name": "openjdk-mips",
      "url": "https://searchcode.com/codesearch/view/118244220/",
      "md5hash": "c84c74ab8baa9da9a86f768d29c00670",
      "lines": {
        "1568": "            result = base.oddModPow(exponent, m);",
        "1569": "        } else {",
        "1570": "            /*",
        "1571": "             * Even modulus.  Tear it into an \"odd part\" (m1) and power of two",
        "773": "     * Computes Jacobi(p,n).",
        "774": "     * Assumes n positive, odd, n>=3.",
        "1575": "",
        "1576": "            // Tear m apart into odd part (m1) and power of 2 (m2)",
        "1588": "                             base2.oddModPow(exponent, m1));",
        "1587": "            BigInteger a1 = (m1.equals(ONE) ? ZERO :",
        "818": "                return j;",
        "659": "",
        "660": "            // Ensure an odd number",
        "819": "            // Now both u and p are odd, so use quadratic reciprocity",
        "1566": "        BigInteger result;",
        "1567": "        if (m.testBit(0)) { // odd modulus"
      },
      "id": 118244220,
      "filename": "BigInteger.java"
    },
    {
      "repo": "https://bitbucket.org/weijun/jdk8-tl-jdk",
      "language": "Java",
      "linescount": 3468,
      "location": "/src/share/classes/java/math",
      "name": "jdk8-tl-jdk",
      "url": "https://searchcode.com/codesearch/view/123104727/",
      "md5hash": "c74ceab6ce20f2983980ff211d76510f",
      "lines": {
        "1792": "     */",
        "1793": "    private BigInteger oddModPow(BigInteger y, BigInteger z) {",
        "580": "            if (bitLength > 2)",
        "581": "                temp[magLen-1] |= 1;  // Make odd if bitlen > 2",
        "1812": "     * We precompute a table of odd powers of n, up to 2^k, and can then",
        "818": "            // Now both u and p are odd, so use quadratic reciprocity",
        "751": "     * The following assumptions are made:",
        "752": "     * This BigInteger is a positive, odd number.",
        "817": "                return j;",
        "658": "",
        "659": "            // Ensure an odd number",
        "1748": "        BigInteger result;",
        "1749": "        if (m.testBit(0)) { // odd modulus",
        "1750": "            result = base.oddModPow(exponent, m);",
        "1811": "     * the better, except that a 0 (no multiplies) can be appended directly.",
        "772": "     * Computes Jacobi(p,n).",
        "773": "     * Assumes n positive, odd, n>=3."
      },
      "id": 123104727,
      "filename": "BigInteger.java"
    },
    {
      "repo": "https://github.com/videmantay/gwtquery.git",
      "language": "Java",
      "linescount": 2424,
      "location": "/gwtquery-core/src/test/java/com/google/gwt/query/client",
      "name": "gwtquery",
      "url": "https://searchcode.com/codesearch/view/72505398/",
      "md5hash": "1c5e3a40dc05492d1f26465b045ee184",
      "lines": {
        "131": "    NodeList<Element> nThChildEven();",
        "132": "    @Selector(\"p:nth-child(odd)\")",
        "133": "    NodeList<Element> nThChildOdd();",
        "134": "    @Selector(\"p:only-child\")",
        "266": "    assertArrayContains(sel.nThChildEven().getLength(), 159);",
        "267": "    assertArrayContains(sel.nThChildOdd().getLength(), 165);",
        "528": "    assertArrayContains(selEng.select(\"p:nth-child(even)\", e).getLength(), 159);",
        "529": "    assertArrayContains(selEng.select(\"p:nth-child(odd)\", e).getLength(), 165);",
        "406": "",
        "407": "  public void testOddEvenNthChild(){",
        "409": "\t  $(e).append(",
        "410": "\t            \"<div id='parent'><div id='first' class='evenClass'>branchA target</div><div id='second' class='oddClass'>branchA target</div><div id='third'  class='evenClass'>branchA target</div><div id='fourth' class='oddClass'>branchA target</div></div>\");",
        "411": "",
        "412": "\t  GQuery odd = $(\"#parent > div:odd\",e);",
        "413": "\t  assertEquals(2, odd.size());"
      },
      "id": 72505398,
      "filename": "GQuerySelectorsTestGwt.java"
    },
    {
      "repo": "https://github.com/TomConerly/Competition-Programming.git",
      "language": "Java",
      "linescount": 142,
      "location": "/ACM/CTUOpen/y2009",
      "name": "Competition-Programming",
      "url": "https://searchcode.com/codesearch/view/112917518/",
      "md5hash": "03efcdaf6fd5437b7da43b2480b5b2c0",
      "lines": {
        "128": "\tstatic boolean[] odd;",
        "4": "/* CTU Open 2009",
        "5": " * Problem O: Odd Opportunities",
        "6": " * Type: Graph Theory",
        "7": " * Solution: Seperate into connected components. If odd # of odd verticies we failed. Now arbitrarily pair them, and find a path between all pairs.",
        "8": " * Assuming no overlap this would be a solution. If there is an edge used an even # of times, simply remove it because there are odd verticies",
        "9": " * on both end points that can be mapped to each other instead of using the edge. If it is used an odd # of times all but one use will be removed.",
        "10": " * ",
        "109": "\t\tvis[at] = true;",
        "45": "\t\t\t\t{",
        "46": "\t\t\t\t\todd[i] = s.charAt(i)=='o';",
        "47": "\t\t\t\t\tif(odd[i])",
        "48": "\t\t\t\t\t\tc++;",
        "110": "\t\tif(odd[at] && U[at] == false)",
        "127": "\tstatic int[] count;"
      },
      "id": 112917518,
      "filename": "O.java"
    },
    {
      "repo": "https://github.com/PAmoto/android_libcore.git",
      "language": "Java",
      "linescount": 1850,
      "location": "/luni/src/test/java/libcore/java/security",
      "name": "android_libcore",
      "url": "https://searchcode.com/codesearch/view/71739943/",
      "md5hash": "ba14f9e2942ed2a93ac15b897ad9bad0",
      "lines": {
        "512": "            // test odd inputs",
        "1505": "",
        "546": "",
        "547": "            // test odd inputs",
        "964": "",
        "965": "            // test odd inputs",
        "1706": "            // test odd inputs",
        "777": "",
        "778": "            // test odd inputs",
        "589": "",
        "590": "            // test odd inputs",
        "1506": "            // test odd inputs",
        "1705": "",
        "412": "",
        "413": "            // test odd inputs",
        "511": ""
      },
      "id": 71739943,
      "filename": "KeyStoreTest.java"
    },
    {
      "repo": "https://github.com/tkyashiro/android_opencv_test.git",
      "language": "Java",
      "linescount": 9011,
      "location": "/OpenCV-2.3.1/src/org/opencv/imgproc",
      "name": "android_opencv_test",
      "url": "https://searchcode.com/codesearch/view/73716368/",
      "md5hash": "332e91225cafaae03bd29967b4c5c67c",
      "lines": {
        "5527": " * @param ksize Aperture size. It should be odd (ksize mod 2 = 1) and positive.",
        "406": " * @param ksize Gaussian kernel size. \"ksize.width\" and \"ksize.height\" can",
        "5526": " *",
        "969": " * @param ksize Aperture size used to compute the second-derivative filters. See",
        "970": " * \"getDerivKernels\" for details. The size must be positive and odd.",
        "375": " * differ but they both must be positive and odd. Or, they can be zero's and",
        "1007": " * @param ksize Aperture size used to compute the second-derivative filters. See",
        "1008": " * \"getDerivKernels\" for details. The size must be positive and odd.",
        "5491": " *",
        "436": " * @param ksize Gaussian kernel size. \"ksize.width\" and \"ksize.height\" can",
        "437": " * differ but they both must be positive and odd. Or, they can be zero's and",
        "374": " * @param ksize Gaussian kernel size. \"ksize.width\" and \"ksize.height\" can",
        "407": " * differ but they both must be positive and odd. Or, they can be zero's and",
        "5492": " * @param ksize Aperture size. It should be odd (ksize mod 2 = 1) and positive.",
        "1078": " * \"getDerivKernels\" for details. The size must be positive and odd.",
        "1077": " * @param ksize Aperture size used to compute the second-derivative filters. See"
      },
      "id": 73716368,
      "filename": "Imgproc.java"
    },
    {
      "repo": "https://github.com/lun4rsoft/JJ25-Main.git",
      "language": "Java",
      "linescount": 175,
      "location": "/Eclipse/JJ25-Main/src/info/lun4rsoft/jj25/zlib",
      "name": "JJ25-Main",
      "url": "https://searchcode.com/codesearch/view/75505585/",
      "md5hash": "5ec781b115ebee19e9ababf0dbc288ea",
      "lines": {
        "96": "    // put operator for two zero bits in even",
        "97": "    gf2_matrix_square(even, odd);",
        "98": "",
        "99": "    // put operator for four zero bits in odd",
        "100": "    gf2_matrix_square(odd, even);",
        "101": "",
        "105": "      // apply zeros operator for this bit of len2",
        "106": "      gf2_matrix_square(even, odd);",
        "114": "",
        "81": "    long[] even = new long[GF2_DIM];",
        "82": "    long[] odd = new long[GF2_DIM];",
        "115": "      // another iteration of the loop with odd and even swapped",
        "116": "      gf2_matrix_square(odd, even);",
        "117": "      if ((len2 & 1)!=0)",
        "118": "        crc1 = gf2_matrix_times(odd, crc1);"
      },
      "id": 75505585,
      "filename": "CRC32.java"
    },
    {
      "repo": "git://github.com/SpoutDev/Spout.git",
      "language": "Java",
      "linescount": 345,
      "location": "/api/src/main/java/org/spout/api/util/map/concurrent",
      "name": "Spout",
      "url": "https://searchcode.com/codesearch/view/116098907/",
      "md5hash": "94f752d6c8522138de621e9ba35f6e87",
      "lines": {
        "175": "\t\t\tint newPacked = ShortPairHashed.key(even, odd);",
        "165": "\t\t\t\teven = newValue;",
        "166": "\t\t\t\todd = ShortPairHashed.key2(oldPacked);",
        "136": "\t * @param even the new value for the element at (index)",
        "137": "\t * @param odd the new value for the element at (index + 1)",
        "138": "\t */",
        "139": "\tpublic final void set(int index, short even, short odd) {",
        "174": "\t\t\t}",
        "109": "\t\tboolean success = false;",
        "142": "\t\t}",
        "143": "\t\tbackingArray.set(index >> 1, ShortPairHashed.key(even, odd));",
        "110": "\t\tshort odd = 0;",
        "169": "\t\t\t\teven = ShortPairHashed.key1(oldPacked);",
        "155": "\t\tboolean success = false;",
        "156": "\t\tshort odd = 0;",
        "170": "\t\t\t\todd = newValue;"
      },
      "id": 116098907,
      "filename": "AtomicShortArray.java"
    },
    {
      "repo": "https://bitbucket.org/keithb/tdd",
      "language": "Java",
      "linescount": 179,
      "location": "/targets/itext/1.4.8/com/lowagie/tools/plugins",
      "name": "tdd",
      "url": "https://searchcode.com/codesearch/view/120313622/",
      "md5hash": "8c6b175baa64227072249c4630870ac5",
      "lines": {
        "139": "\t\t\todd.close();",
        "69": "/**",
        "70": " * Knits two TIFF files, one with the even pages and another with the odd pages, together.",
        "103": "\t\t\tFile odd_file = (File)getValue(\"odd\");",
        "104": "\t\t\tif (getValue(\"even\") == null) throw new InstantiationException(\"You need to choose a sourcefile for the even pages\");",
        "138": "\t\t\t}",
        "107": "\t\t\tFile pdf_file = (File)getValue(\"destfile\");",
        "108": "\t\t\tRandomAccessFileOrArray odd = new RandomAccessFileOrArray(odd_file.getAbsolutePath());",
        "109": "\t\t\tRandomAccessFileOrArray even = new RandomAccessFileOrArray(even_file.getAbsolutePath());",
        "110": "\t\t\tImage img = TiffImage.getTiffImage(odd, 1);",
        "81": "\t\tmenuoptions = MENU_EXECUTE | MENU_EXECUTE_SHOW;",
        "82": "\t\targuments.add(new FileArgument(this, \"odd\", \"The tiff file with the odd pages\", false, new ImageFilter(false, false, false, false, false, true)));",
        "116": "\t\t\tPdfContentByte cb = writer.getDirectContent();",
        "117": "\t\t\tint count = Math.max(TiffImage.getNumberOfPages(odd), TiffImage",
        "102": "\t\t\tif (getValue(\"odd\") == null) throw new InstantiationException(\"You need to choose a sourcefile for the odd pages\");",
        "101": "\t\ttry {"
      },
      "id": 120313622,
      "filename": "KnitTiff.java"
    },
    {
      "repo": "https://bitbucket.org/keithb/tdd",
      "language": "Java",
      "linescount": 317,
      "location": "/targets/itext/1.4.8/com/lowagie/text/pdf",
      "name": "tdd",
      "url": "https://searchcode.com/codesearch/view/120313756/",
      "md5hash": "135ba46022eb9ea005ff1dd3930c9878",
      "lines": {
        "288": "                    if (parse.odd || parse.even) {",
        "257": "            sair = parse.getAttributes();",
        "258": "            if (parse.low == -1 && parse.high == -1 && !parse.even && !parse.odd)",
        "299": "                    if (parse.odd || parse.even) {",
        "165": "    private void otherProc() {",
        "166": "        if (other.equals(\"odd\") || other.equals(\"o\")) {",
        "167": "            odd = true;",
        "168": "            even = false;",
        "266": "            ",
        "267": "            //System.out.println(\"low=\"+parse.low+\",high=\"+parse.high+\",odd=\"+parse.odd+\",even=\"+parse.even+\",inverse=\"+parse.inverse);",
        "300": "                        ++inc;",
        "278": "                        continue;",
        "279": "                    if (parse.odd && (n & 1) == 0)",
        "298": "                else {",
        "287": "                    inc = -1;"
      },
      "id": 120313756,
      "filename": "SequenceList.java"
    },
    {
      "repo": "https://bitbucket.org/netbeans/main_contrib",
      "language": "Java",
      "linescount": 1026,
      "location": "/cnd.make2netbeans/src/org/netbeans/modules/cnd/make2netbeans/impl",
      "name": "main_contrib",
      "url": "https://searchcode.com/codesearch/view/122817895/",
      "md5hash": "03401681bcaa46fd229e2b93cc7e315e",
      "lines": {
        "96": "        // when odd ')', '}' or ',' appears, stops",
        "149": "     * @param int mode contains bitmask which indicates should we",
        "130": "        state = DEFAULT;",
        "131": "        // when odd '=' appears, stops",
        "102": "        state = DEFAULT;",
        "103": "        // when odd ',' appears, stops",
        "232": "                                        // odd '}' or ')' not allowed",
        "266": "                                    if (vars.size() == 1) {",
        "231": "                                    if (vars.size() == 1) {",
        "109": "        state = DEFAULT;",
        "110": "        // when odd ')', '}' appears, stops",
        "116": "        state = SKIP_WS;",
        "117": "        // when odd ')', '}' appears, stops",
        "150": "     *                 stop when odd chars appear",
        "267": "                                        // odd '=' not allowed",
        "95": "        state = SKIP_WS;"
      },
      "id": 122817895,
      "filename": "Eval.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 5200,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 2943,
      "source": "Github",
      "id": 2
    },
    {
      "count": 922,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 107,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 30,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 22,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 12,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 8,
      "source": "Google Android",
      "id": 12
    },
    {
      "count": 2,
      "source": "Gitorious",
      "id": 10
    }
  ]
}