{
  "matchterm": "Record",
  "previouspage": null,
  "searchterm": "Record",
  "query": "Record",
  "language_filters": [
    {
      "count": 115910,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 115910,
  "results": [
    {
      "repo": "https://bitbucket.org/tari/prizm-gcc.git",
      "language": "Java",
      "linescount": 199,
      "location": "/libjava/classpath/gnu/javax/net/ssl/provider",
      "name": "prizm-gcc",
      "url": "https://searchcode.com/codesearch/view/37949252/",
      "md5hash": "c542c8ae21b5fe93fa2e7b59de63dc16",
      "lines": {
        "1": "/* Record.java -- A single SSL Record.",
        "2": "   Copyright (C) 2006  Free Software Foundation, Inc.",
        "195": "    out.print (\"} Record;\");",
        "62": "",
        "63": "  public Record (final ByteBuffer buffer)",
        "58": " */",
        "59": "public class Record",
        "194": "    out.println (\"  };\");",
        "46": "/**",
        "47": " * A SSL/TLS record structure. An SSL record is defined to be:"
      },
      "id": 37949252,
      "filename": "Record.java"
    },
    {
      "repo": "https://bitbucket.org/bluezoo/gcc.git",
      "language": "Java",
      "linescount": 199,
      "location": "/libjava/classpath/gnu/javax/net/ssl/provider",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/46814889/",
      "md5hash": "c542c8ae21b5fe93fa2e7b59de63dc16",
      "lines": {
        "1": "/* Record.java -- A single SSL Record.",
        "2": "   Copyright (C) 2006  Free Software Foundation, Inc.",
        "195": "    out.print (\"} Record;\");",
        "62": "",
        "63": "  public Record (final ByteBuffer buffer)",
        "58": " */",
        "59": "public class Record",
        "194": "    out.println (\"  };\");",
        "46": "/**",
        "47": " * A SSL/TLS record structure. An SSL record is defined to be:"
      },
      "id": 46814889,
      "filename": "Record.java"
    },
    {
      "repo": "https://github.com/tony-mowers/touch4j.git",
      "language": "Java",
      "linescount": 37,
      "location": "/src/com/emitrom/touch4j/client/data",
      "name": "touch4j",
      "url": "https://searchcode.com/codesearch/view/70646256/",
      "md5hash": "cfbd5522524cd0ce2f1a9c35cc22b9b3",
      "lines": {
        "1": "/**************************************************************************",
        "2": " * Record.java is part of Touch4j 4.0. Copyright 2012 Emitrom LLC",
        "26": "@Deprecated",
        "27": "public class Record extends JavaScriptObject {",
        "28": "",
        "29": "    protected Record() {"
      },
      "id": 70646256,
      "filename": "Record.java"
    },
    {
      "repo": "https://bitbucket.org/lpimports/gcc.git",
      "language": "Java",
      "linescount": 199,
      "location": "/libjava/classpath/gnu/javax/net/ssl/provider",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/127593389/",
      "md5hash": "c542c8ae21b5fe93fa2e7b59de63dc16",
      "lines": {
        "1": "/* Record.java -- A single SSL Record.",
        "2": "   Copyright (C) 2006  Free Software Foundation, Inc.",
        "195": "    out.print (\"} Record;\");",
        "62": "",
        "63": "  public Record (final ByteBuffer buffer)",
        "58": " */",
        "59": "public class Record",
        "194": "    out.println (\"  };\");",
        "46": "/**",
        "47": " * A SSL/TLS record structure. An SSL record is defined to be:"
      },
      "id": 127593389,
      "filename": "Record.java"
    },
    {
      "repo": "https://bitbucket.org/vaporoid/gcc.git",
      "language": "Java",
      "linescount": 199,
      "location": "/libjava/classpath/gnu/javax/net/ssl/provider",
      "name": "gcc",
      "url": "https://searchcode.com/codesearch/view/130223051/",
      "md5hash": "c542c8ae21b5fe93fa2e7b59de63dc16",
      "lines": {
        "1": "/* Record.java -- A single SSL Record.",
        "2": "   Copyright (C) 2006  Free Software Foundation, Inc.",
        "195": "    out.print (\"} Record;\");",
        "62": "",
        "63": "  public Record (final ByteBuffer buffer)",
        "58": " */",
        "59": "public class Record",
        "194": "    out.println (\"  };\");",
        "46": "/**",
        "47": " * A SSL/TLS record structure. An SSL record is defined to be:"
      },
      "id": 130223051,
      "filename": "Record.java"
    },
    {
      "repo": "https://bitbucket.org/zandomatter/scratchpad.git",
      "language": "Java",
      "linescount": 41,
      "location": "/Lang/Java/OOP/OOPLab5/Ex6.8",
      "name": "scratchpad",
      "url": "https://searchcode.com/codesearch/view/36617369/",
      "md5hash": "11f2462b6c5614e740adc78915be7d20",
      "lines": {
        "1": "/**",
        "2": " * Record details of a diary appointment."
      },
      "id": 36617369,
      "filename": "Appointment.java"
    },
    {
      "repo": "https://bitbucket.org/robinrob/java.git",
      "language": "Java",
      "linescount": 41,
      "location": "/practise/diary-testing",
      "name": "java",
      "url": "https://searchcode.com/codesearch/view/49571031/",
      "md5hash": "33c9437bb5aefaef33b7e7f4f47de0a8",
      "lines": {
        "1": "/**",
        "2": " * Record details of a diary appointment."
      },
      "id": 49571031,
      "filename": "Appointment.java"
    },
    {
      "repo": "https://bitbucket.org/robinrob/java.git",
      "language": "Java",
      "linescount": 41,
      "location": "/practice/diary-testing-junit-v1",
      "name": "java",
      "url": "https://searchcode.com/codesearch/view/136096665/",
      "md5hash": "44fe749e1d5d8b5e7e85f3d562ed0fb8",
      "lines": {
        "1": "/**",
        "2": " * Record details of a diary appointment."
      },
      "id": 136096665,
      "filename": "Appointment.java"
    },
    {
      "repo": "https://bitbucket.org/robinrob/java.git",
      "language": "Java",
      "linescount": 41,
      "location": "/practice/diary-testing",
      "name": "java",
      "url": "https://searchcode.com/codesearch/view/136096916/",
      "md5hash": "33c9437bb5aefaef33b7e7f4f47de0a8",
      "lines": {
        "1": "/**",
        "2": " * Record details of a diary appointment."
      },
      "id": 136096916,
      "filename": "Appointment.java"
    },
    {
      "repo": "https://bitbucket.org/robinrob/java.git",
      "language": "Java",
      "linescount": 41,
      "location": "/practice/diary-testing-junit-v2",
      "name": "java",
      "url": "https://searchcode.com/codesearch/view/136096933/",
      "md5hash": "44fe749e1d5d8b5e7e85f3d562ed0fb8",
      "lines": {
        "1": "/**",
        "2": " * Record details of a diary appointment."
      },
      "id": 136096933,
      "filename": "Appointment.java"
    },
    {
      "repo": "https://github.com/evelyne24/hacked.io.git",
      "language": "Java",
      "linescount": 440,
      "location": "/HueGame/src/main/java/org/ndeftools",
      "name": "hacked.io",
      "url": "https://searchcode.com/codesearch/view/75920485/",
      "md5hash": "b713e19333876aa5eb73889fc624d737",
      "lines": {
        "32": "import org.ndeftools.wellknown.TextRecord;",
        "33": "import org.ndeftools.wellknown.UriRecord;",
        "34": "import org.ndeftools.wellknown.handover.AlternativeCarrierRecord;",
        "35": "import org.ndeftools.wellknown.handover.CollisionResolutionRecord;",
        "36": "import org.ndeftools.wellknown.handover.ErrorRecord;",
        "37": "import org.ndeftools.wellknown.handover.HandoverCarrierRecord;",
        "38": "import org.ndeftools.wellknown.handover.HandoverRequestRecord;",
        "39": "import org.ndeftools.wellknown.handover.HandoverSelectRecord;",
        "23": "",
        "24": "import org.ndeftools.externaltype.ExternalTypeRecord;",
        "25": "import org.ndeftools.wellknown.ActionRecord;",
        "26": "import org.ndeftools.wellknown.GcActionRecord;",
        "27": "import org.ndeftools.wellknown.GcDataRecord;",
        "28": "import org.ndeftools.wellknown.GcTargetRecord;",
        "31": "import org.ndeftools.wellknown.SmartPosterRecord;"
      },
      "id": 75920485,
      "filename": "Record.java"
    },
    {
      "repo": "https://github.com/percyliang/fig.git",
      "language": "Java",
      "linescount": 137,
      "location": "/src/main/java/fig/record",
      "name": "fig",
      "url": "https://searchcode.com/codesearch/view/74750233/",
      "md5hash": "d0cb124981cd52add8ddf178f188ed25",
      "lines": {
        "1": "package fig.record;",
        "2": "",
        "75": "    // Able to handle many different type of objects",
        "7": "/**",
        "8": " * Record is a static class for instrumenting the state of an execution.",
        "9": " * The calls record the state of variables at certain points of program execution.",
        "10": " * The calls can be grouped hierarchically as well.",
        "11": " * Basic usage:",
        "12": " *   init(record file to output to)",
        "77": "      ((Recordable)o).record(arg);",
        "76": "    if(o instanceof Recordable)",
        "17": " * Caching feature (not fully supported):",
        "18": " *   Recordable objects can be cached, so when they are added a second time,",
        "20": " *",
        "21": " * The record file encodes a tree, where each node of the tree",
        "25": " */",
        "26": "public class Record {"
      },
      "id": 74750233,
      "filename": "Record.java"
    },
    {
      "repo": "https://github.com/kotatsu52/NDK_Practice5.git",
      "language": "Java",
      "linescount": 367,
      "location": "/src/my/kotatsu/ndk_practice5",
      "name": "NDK_Practice5",
      "url": "https://searchcode.com/codesearch/view/74893869/",
      "md5hash": "d57fd23df31edcf12ac1feea299c1ee3",
      "lines": {
        "64": "//    \tAUDIO_BS_STE  = AudioRecord.getMinBufferSize(AUDIO_FS, AudioFormat.CHANNEL_CONFIGURATION_STEREO, AudioFormat.ENCODING_PCM_16BIT);",
        "37": "\tprivate TextView debug,button_tx;",
        "6": "import android.app.Activity;",
        "7": "import android.media.MediaRecorder;",
        "15": "import android.media.AudioFormat;",
        "16": "import android.media.AudioRecord;",
        "20": "",
        "21": "public class Record extends Activity implements OnClickListener {",
        "24": "\tprivate final int maxDurationInMs = 15000;",
        "25": "\tprivate final String userid = \"record\";",
        "38": "\tprivate long record_time = 0;",
        "28": "\tprivate long epoch;",
        "29": "\tprivate AudioRecord record;",
        "62": "",
        "63": "        AUDIO_BS_MONO = AudioRecord.getMinBufferSize(AUDIO_FS, AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT);"
      },
      "id": 74893869,
      "filename": "Record.java"
    },
    {
      "repo": "https://github.com/SunghanKim/extraction-framework.git",
      "language": "Java",
      "linescount": 84,
      "location": "/live/src/main/java/org/dbpedia/extraction/live/record",
      "name": "extraction-framework",
      "url": "https://searchcode.com/codesearch/view/75918424/",
      "md5hash": "59ba63a168ed130956518cf2f111bc7c",
      "lines": {
        "1": "package org.dbpedia.extraction.live.record;",
        "2": "",
        "3": "/**",
        "4": " * A records consists of metadata and content.",
        "8": " */",
        "9": "public class Record",
        "10": "\timplements IRecord",
        "11": "{",
        "12": "\tprivate RecordMetadata metadata;",
        "13": "\tprivate RecordContent  content;",
        "14": "\t",
        "15": "\tpublic Record(RecordMetadata metadata)",
        "19": "\t",
        "20": "\tpublic Record(RecordMetadata metadata, RecordContent content)",
        "25": "\t",
        "26": "\tpublic RecordMetadata getMetadata()"
      },
      "id": 75918424,
      "filename": "Record.java"
    },
    {
      "repo": "https://github.com/apcj/neo4j.git",
      "language": "Java",
      "linescount": 76,
      "location": "/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store",
      "name": "neo4j",
      "url": "https://searchcode.com/codesearch/view/71597642/",
      "md5hash": "e4eb2b723c256eded27e41636b6814d7",
      "lines": {
        "64": "     * ",
        "65": "     * @return The int value for this record type",
        "54": "     * ",
        "55": "     * @return The byte value for this record type",
        "45": "",
        "46": "    Record( byte byteValue, int intValue )",
        "52": "    /**",
        "53": "     * Returns a byte value representation for this record type.",
        "22": "/**",
        "23": " * Various constants used in records for different stores.",
        "24": " */",
        "25": "public enum Record",
        "62": "    /**",
        "63": "     * Returns a int value representation for this record type."
      },
      "id": 71597642,
      "filename": "Record.java"
    },
    {
      "repo": "https://github.com/zejie/nutz.git",
      "language": "Java",
      "linescount": 228,
      "location": "/src/org/nutz/dao/entity",
      "name": "nutz",
      "url": "https://searchcode.com/codesearch/view/73837802/",
      "md5hash": "1c20021ca8ab7027801934b741d16737",
      "lines": {
        "32": "    public static Record create(ResultSet rs) {",
        "33": "        try {",
        "34": "            Record re = new Record();",
        "83": "     */",
        "84": "    public Record set(String name, Object value) {",
        "69": "",
        "70": "    public Record() {",
        "24": " */",
        "25": "public class Record implements Map<String, Object>, java.io.Serializable {",
        "31": ""
      },
      "id": 73837802,
      "filename": "Record.java"
    },
    {
      "repo": "https://github.com/ShayMatasaro/arquillian-showcase.git",
      "language": "Java",
      "linescount": 69,
      "location": "/jpa-lite/src/main/java/com/acme/jpa",
      "name": "arquillian-showcase",
      "url": "https://searchcode.com/codesearch/view/74959009/",
      "md5hash": "fd6d0e0d6402b245bdb5e305a4da5367",
      "lines": {
        "65": "    public String toString() {",
        "66": "        return \"Record@\" + hashCode() + \"[id = \" + id + \"; name = \" + name + \"]\";",
        "14": "@Entity",
        "46": "",
        "47": "    @OneToMany(mappedBy = \"record\", cascade = CascadeType.ALL)",
        "16": "public class Record implements Serializable {",
        "17": "    private static final long serialVersionUID = 1L;",
        "21": "",
        "22": "    public Record() {",
        "24": "",
        "25": "    public Record(String name) {",
        "15": "@Table(name = \"RECORD\")",
        "60": "        lineItems.add(e);",
        "61": "        e.setRecord(this);"
      },
      "id": 74959009,
      "filename": "Record.java"
    },
    {
      "repo": "https://github.com/hdr33265/LMS.git",
      "language": "Java",
      "linescount": 71,
      "location": "/src/studio/hdr/lms/model",
      "name": "LMS",
      "url": "https://searchcode.com/codesearch/view/71810457/",
      "md5hash": "5ca8d7127be00a5a6f04d39341f3d2ea",
      "lines": {
        "33": "\t\tthis.book = book;",
        "34": "\t\tthis.recordDate = recordDate;",
        "5": "/**",
        "6": " * Record entity. @author MyEclipse Persistence Tools",
        "8": "",
        "9": "public class Record implements java.io.Serializable {",
        "12": "",
        "13": "\tprivate Long recordId;",
        "15": "\tprivate Book book;",
        "16": "\tprivate Date recordDate;",
        "20": "\t/** default constructor */",
        "21": "\tpublic Record() {",
        "24": "\t/** minimal constructor */",
        "25": "\tpublic Record(User user, Book book) {",
        "30": "\t/** full constructor */",
        "31": "\tpublic Record(User user, Book book, Date recordDate) {"
      },
      "id": 71810457,
      "filename": "Record.java"
    },
    {
      "repo": "https://github.com/Melandro/bonita-engine.git",
      "language": "Java",
      "linescount": 68,
      "location": "/services/bonita-recorder/bonita-recorder-model/src/main/java/org/bonitasoft/engine/recorder/model",
      "name": "bonita-engine",
      "url": "https://searchcode.com/codesearch/view/76155905/",
      "md5hash": "2620571c7905e598fa1f9de8ce9894d6",
      "lines": {
        "34": "        return \"Record [entity=\" + entity + \"]\";",
        "33": "    public String toString() {",
        "18": "",
        "19": "public abstract class Record {",
        "22": "",
        "23": "    public Record(final PersistentObject entity) {",
        "56": "        final Record other = (Record) obj;",
        "55": "        }",
        "13": " **/",
        "14": "package org.bonitasoft.engine.recorder.model;"
      },
      "id": 76155905,
      "filename": "Record.java"
    },
    {
      "repo": "https://github.com/universalwebdesign/completeui.git",
      "language": "Java",
      "linescount": 197,
      "location": "/server/src/server/java/nitobi-jsf-project/nitobi-server-lib/src/main/java/eba/gethandler",
      "name": "completeui",
      "url": "https://searchcode.com/codesearch/view/111030708/",
      "md5hash": "f5d65b6c39ed8946fc2efa667bc34345",
      "lines": {
        "32": "     */",
        "33": "    public Record(String[] fieldDefinitions, String id) ",
        "35": "    {",
        "36": "        \tif ( (fieldDefinitions==null) || !(fieldDefinitions[0].equals(\"_recordID\")) )",
        "37": "        \t{",
        "13": " * savehandler.SaveHandler class and represents a EBA: Grid data",
        "14": " * record.",
        "15": " * @author Nitobi",
        "16": " * @deprecated Use com.nitobi.server.tools.Record",
        "17": " */",
        "18": "public class Record ",
        "26": "    /**",
        "27": "     * Creates a new Record. A Record represents a row in the EBA:Grid.",
        "28": "     * @param fieldDefinitions The fields a Record contains. Field names must exactly correspond to the EBA Grid's",
        "29": "     *                         attribute xdatafld in one of the ColumnDefinition tags in order to be renderd to that column in the Grid.",
        "30": "     * @param id               The unique key of the Record. This usually is the primary key of the record received by the database."
      },
      "id": 111030708,
      "filename": "Record.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 76659,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 26988,
      "source": "Github",
      "id": 2
    },
    {
      "count": 9124,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 1390,
      "source": "CodePlex",
      "id": 5
    },
    {
      "count": 791,
      "source": "GitLab",
      "id": 13
    },
    {
      "count": 698,
      "source": "Sourceforge",
      "id": 4
    },
    {
      "count": 160,
      "source": "Unknown",
      "id": 0
    },
    {
      "count": 54,
      "source": "Gitorious",
      "id": 10
    },
    {
      "count": 46,
      "source": "Google Android",
      "id": 12
    }
  ]
}