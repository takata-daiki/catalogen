{
  "matchterm": "org.apache.poi.openxml4j.util.Nullable",
  "previouspage": null,
  "searchterm": "org.apache.poi.openxml4j.util.Nullable",
  "query": "org.apache.poi.openxml4j.util.Nullable",
  "language_filters": [
    {
      "count": 3,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 3,
  "results": [
    {
      "repo": "https://github.com/minstrelsy/POI-Android.git",
      "language": "Java",
      "linescount": 1489,
      "location": "/pptx/src/org/apache/poi/openxml4j/opc",
      "name": "POI-Android",
      "url": "https://searchcode.com/codesearch/view/97406292/",
      "md5hash": "47fc882bc196bd395e952d6ada656cd9",
      "lines": {
        "32": "import java.util.Date;",
        "1": "/* ====================================================================",
        "2": "   Licensed to the Apache Software Foundation (ASF) under one or more",
        "4": "   this work for additional information regarding copyright ownership.",
        "5": "   The ASF licenses this file to You under the Apache License, Version 2.0",
        "38": "",
        "39": "import org.apache.poi.openxml4j.exceptions.InvalidFormatException;",
        "8": "",
        "9": "       http://www.apache.org/licenses/LICENSE-2.0",
        "42": "import org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException;",
        "43": "import org.apache.poi.openxml4j.exceptions.PartAlreadyExistsException;",
        "17": "",
        "18": "package org.apache.poi.openxml4j.opc;",
        "41": "import org.apache.poi.openxml4j.exceptions.OpenXML4JException;",
        "40": "import org.apache.poi.openxml4j.exceptions.InvalidOperationException;",
        "30": "import java.net.URISyntaxException;",
        "31": "import java.util.ArrayList;"
      },
      "id": 97406292,
      "filename": "OPCPackage.java"
    },
    {
      "repo": "https://github.com/solsson/tika.git",
      "language": "Java",
      "linescount": 148,
      "location": "/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml",
      "name": "tika",
      "url": "https://searchcode.com/codesearch/view/111785575/",
      "md5hash": "2a9aaf9e0c1f1ffdb93195ff06ef1121",
      "lines": {
        "8": " *",
        "9": " *     http://www.apache.org/licenses/LICENSE-2.0",
        "16": " */",
        "17": "package org.apache.tika.parser.microsoft.ooxml;",
        "18": "",
        "20": "",
        "21": "import org.apache.poi.POIXMLTextExtractor;",
        "22": "import org.apache.poi.POIXMLProperties.CoreProperties;",
        "23": "import org.apache.poi.POIXMLProperties.ExtendedProperties;",
        "24": "import org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart;",
        "25": "import org.apache.poi.openxml4j.util.Nullable;",
        "26": "import org.apache.tika.exception.TikaException;",
        "27": "import org.apache.tika.metadata.Metadata;",
        "28": "import org.apache.tika.metadata.PagedText;",
        "29": "import org.apache.tika.metadata.Property;"
      },
      "id": 111785575,
      "filename": "MetadataExtractor.java"
    },
    {
      "repo": "https://bitbucket.org/krabuzin/mp_jobs",
      "language": "Java",
      "linescount": 2080,
      "location": "/workspace/.JETEmitters/src/org/talend/designer/codegen/translators/file/input",
      "name": "mp_jobs",
      "url": "https://searchcode.com/codesearch/view/128910886/",
      "md5hash": "75ba1544ce93e33d510ca361547ce6b5",
      "lines": {
        "1": "package org.talend.designer.codegen.translators.file.input;",
        "2": "",
        "3": "import org.talend.core.model.process.INode;",
        "4": "import org.talend.core.model.process.ElementParameterParser;",
        "5": "import org.talend.core.model.metadata.IMetadataTable;",
        "6": "import org.talend.core.model.metadata.IMetadataColumn;",
        "7": "import org.talend.core.model.process.IConnection;",
        "8": "import org.talend.core.model.process.IConnectionCategory;",
        "9": "import org.talend.designer.codegen.config.CodeGeneratorArgument;",
        "10": "import java.util.List;",
        "11": "import java.util.Map;",
        "12": "import org.talend.core.model.metadata.types.JavaTypesManager;",
        "13": "import org.talend.core.model.metadata.types.JavaType;",
        "14": "",
        "27": "  protected final String TEXT_1 = \"\\t\";",
        "28": "  protected final String TEXT_2 = NL + NL + \"\\t\\t\\tclass RegexUtil_\";",
        "29": "  protected final String TEXT_3 = \" {\" + NL + \"\\t\\t\\t\\t\" + NL + \"\\t\\t    \\tpublic java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName, boolean useRegex) {\" + NL + \"\\t\\t\\t        \" + NL + \"\\t\\t\\t        java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();\" + NL + \"\\t\\t\\t        \" + NL + \"\\t\\t\\t        if(useRegex){//this part process the regex issue\" + NL + \"\\t\\t\\t        \\t\" + NL + \"\\t\\t\\t\\t        jxl.Sheet[] sheets = workbook.getSheets();\" + NL + \"\\t\\t\\t\\t        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);\" + NL + \"\\t\\t\\t\\t        for (int i = 0; i < sheets.length; i++) {\" + NL + \"\\t\\t\\t\\t            String sheetName = sheets[i].getName();\" + NL + \"\\t\\t\\t\\t            java.util.regex.Matcher matcher = pattern.matcher(sheetName);\" + NL + \"\\t\\t\\t\\t            if (matcher.matches()) {\" + NL + \"\\t\\t\\t\\t            \\tjxl.Sheet sheet = workbook.getSheet(sheetName);\" + NL + \"\\t\\t\\t\\t            \\tif(sheet != null){\" + NL + \"\\t\\t\\t\\t                \\tlist.add(sheet);\" + NL + \"\\t\\t\\t\\t                }\\t\" + NL + \"\\t\\t\\t\\t            }\" + NL + \"\\t\\t\\t\\t        }\" + NL + \"\\t\\t\\t\\t        \" + NL + \"\\t\\t\\t        }else{\\t\" + NL + \"\\t\\t\\t        \\tjxl.Sheet sheet = workbook.getSheet(oneSheetName);\" + NL + \"\\t\\t            \\tif(sheet != null){\" + NL + \"\\t\\t                \\tlist.add(sheet);\" + NL + \"\\t\\t                }\" + NL + \"\\t\\t\\t        \\t\" + NL + \"\\t\\t\\t        }\" + NL + \"\\t\\t\\t        \" + NL + \"\\t\\t\\t        return list;\" + NL + \"\\t\\t\\t    }\" + NL + \"\\t\\t    \\t\" + NL + \"\\t\\t\\t    public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {\" + NL + \"\\t\\t\\t    \\tjava.util.List<jxl.Sheet> list =  new java.util.ArrayList<jxl.Sheet>();\" + NL + \"\\t\\t\\t    \\tjxl.Sheet sheet = workbook.getSheet(index);\" + NL + \"\\t            \\tif(sheet != null){\" + NL + \"\\t                \\tlist.add(sheet);\" + NL + \"\\t                }\" + NL + \"\\t\\t\\t    \\treturn list;\" + NL + \"\\t\\t\\t    }\" + NL + \"\\t\\t\\t    \" + NL + \"\\t\\t\\t}\" + NL + \"\\t\\t\\t\" + NL + \"\\t\\t\\t\" + NL + \"\\t\\tRegexUtil_\";"
      },
      "id": 128910886,
      "filename": "TFileInputExcelBeginJava.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 2,
      "source": "Github",
      "id": 2
    },
    {
      "count": 1,
      "source": "Bitbucket",
      "id": 3
    }
  ]
}