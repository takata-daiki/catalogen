{
  "matchterm": "RowRecord",
  "previouspage": null,
  "searchterm": "RowRecord",
  "query": "RowRecord",
  "language_filters": [
    {
      "count": 65,
      "id": 23,
      "language": "Java"
    }
  ],
  "total": 65,
  "results": [
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 506,
      "location": "/components/forks/poi/src/loci/poi/hssf/record",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642448/",
      "md5hash": "e20024a2a3d58e395cd362f6ec951727",
      "lines": {
        "96": "    public RowRecord(RecordInputStream in)",
        "480": "        if (!(obj instanceof RowRecord))",
        "483": "        }",
        "484": "        RowRecord loc = ( RowRecord ) obj;",
        "460": "    {",
        "461": "        RowRecord loc = ( RowRecord ) obj;",
        "494": "      RowRecord rec = new RowRecord();",
        "493": "    public Object clone() {",
        "86": "",
        "87": "    public RowRecord()",
        "56": "",
        "57": "public class RowRecord",
        "95": "",
        "479": "    {"
      },
      "id": 15642448,
      "filename": "RowRecord.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 739,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260297/",
      "md5hash": "b28fe35d6069b52989f8c6bc611583be",
      "lines": {
        "48": "  private static final Logger logger = Logger.getLogger(RowRecord.class);",
        "134": "   */",
        "135": "  public RowRecord(int rn, WritableSheet ws)",
        "42": " */",
        "43": "class RowRecord extends WritableRecordData",
        "47": "   */"
      },
      "id": 43260297,
      "filename": "RowRecord.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 192,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/read/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260399/",
      "md5hash": "966cfe394778535bfcd5d14103a81d10",
      "lines": {
        "81": "   */",
        "34": "   */",
        "35": "  private static Logger logger = Logger.getLogger(RowRecord.class);",
        "82": "  RowRecord(Record t)",
        "29": " */",
        "30": "public class RowRecord extends RecordData"
      },
      "id": 43260399,
      "filename": "RowRecord.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 739,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200825/",
      "md5hash": "b28fe35d6069b52989f8c6bc611583be",
      "lines": {
        "48": "  private static final Logger logger = Logger.getLogger(RowRecord.class);",
        "134": "   */",
        "135": "  public RowRecord(int rn, WritableSheet ws)",
        "42": " */",
        "43": "class RowRecord extends WritableRecordData",
        "47": "   */"
      },
      "id": 49200825,
      "filename": "RowRecord.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 192,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/read/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200927/",
      "md5hash": "966cfe394778535bfcd5d14103a81d10",
      "lines": {
        "81": "   */",
        "34": "   */",
        "35": "  private static Logger logger = Logger.getLogger(RowRecord.class);",
        "82": "  RowRecord(Record t)",
        "29": " */",
        "30": "public class RowRecord extends RecordData"
      },
      "id": 49200927,
      "filename": "RowRecord.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 192,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/read/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374431/",
      "md5hash": "08a42d892e113e4588c76d82482f6647",
      "lines": {
        "81": "   */",
        "34": "   */",
        "35": "  private static Logger logger = Logger.getLogger(RowRecord.class);",
        "82": "  RowRecord(Record t)",
        "29": " */",
        "30": "public class RowRecord extends RecordData"
      },
      "id": 11374431,
      "filename": "RowRecord.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 739,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/write/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374584/",
      "md5hash": "cb4bd42eacf00c97386bb772d0b493bf",
      "lines": {
        "48": "  private static final Logger logger = Logger.getLogger(RowRecord.class);",
        "134": "   */",
        "135": "  public RowRecord(int rn, WritableSheet ws)",
        "42": " */",
        "43": "class RowRecord extends WritableRecordData",
        "47": "   */"
      },
      "id": 11374584,
      "filename": "RowRecord.java"
    },
    {
      "repo": "http://brainstream.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 192,
      "location": "/trunk/core/ReadExperimentDefinition/java/jexcelapi/src/jxl/read/biff",
      "name": "brainstream",
      "url": "https://searchcode.com/codesearch/view/13919612/",
      "md5hash": "695df764e7dde5076e5e7cba7a77923f",
      "lines": {
        "81": "   */",
        "34": "   */",
        "35": "  private static Logger logger = Logger.getLogger(RowRecord.class);",
        "82": "  RowRecord(Record t)",
        "29": " */",
        "30": "public class RowRecord extends RecordData"
      },
      "id": 13919612,
      "filename": "RowRecord.java"
    },
    {
      "repo": "http://brainstream.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 739,
      "location": "/trunk/core/ReadExperimentDefinition/java/jexcelapi/src/jxl/write/biff",
      "name": "brainstream",
      "url": "https://searchcode.com/codesearch/view/13919767/",
      "md5hash": "9a45c7408c5a577d587b35082651d320",
      "lines": {
        "48": "  private static final Logger logger = Logger.getLogger(RowRecord.class);",
        "134": "   */",
        "135": "  public RowRecord(int rn, WritableSheet ws)",
        "42": " */",
        "43": "class RowRecord extends WritableRecordData",
        "47": "   */"
      },
      "id": 13919767,
      "filename": "RowRecord.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 2567,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260267/",
      "md5hash": "94346665312f1de078b1178fe96b915c",
      "lines": {
        "928": "    RowRecord[] oldRows = rows;",
        "929": "",
        "930": "    rows = new RowRecord[oldRows.length];",
        "323": "    outputFile = of;",
        "324": "    rows = new RowRecord[0];",
        "1094": "    {",
        "1062": "    int row = cell.getRow();",
        "1063": "    RowRecord rowrec = getRowRecord(row);",
        "1096": "      rows = new RowRecord[Math.max(oldRows.length + rowGrowSize, row+1)];",
        "1097": "      System.arraycopy(oldRows, 0, rows, 0, oldRows.length);",
        "1095": "      RowRecord[] oldRows = rows;",
        "1100": "",
        "1101": "    RowRecord rowrec = rows[row];",
        "1082": "   */",
        "1083": "  RowRecord getRowRecord(int row) throws RowsExceededException",
        "927": "    // Create a new array to hold the new rows.  Grow it if need be"
      },
      "id": 43260267,
      "filename": "WritableSheetImpl.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 2567,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200795/",
      "md5hash": "94346665312f1de078b1178fe96b915c",
      "lines": {
        "928": "    RowRecord[] oldRows = rows;",
        "929": "",
        "930": "    rows = new RowRecord[oldRows.length];",
        "323": "    outputFile = of;",
        "324": "    rows = new RowRecord[0];",
        "1094": "    {",
        "1062": "    int row = cell.getRow();",
        "1063": "    RowRecord rowrec = getRowRecord(row);",
        "1096": "      rows = new RowRecord[Math.max(oldRows.length + rowGrowSize, row+1)];",
        "1097": "      System.arraycopy(oldRows, 0, rows, 0, oldRows.length);",
        "1095": "      RowRecord[] oldRows = rows;",
        "1100": "",
        "1101": "    RowRecord rowrec = rows[row];",
        "1082": "   */",
        "1083": "  RowRecord getRowRecord(int row) throws RowsExceededException",
        "927": "    // Create a new array to hold the new rows.  Grow it if need be"
      },
      "id": 49200795,
      "filename": "WritableSheetImpl.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 1224,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/read/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260388/",
      "md5hash": "33e93a49ca07c89cc287d0dc9d046366",
      "lines": {
        "290": "    columnInfosInitialized = false;",
        "291": "    rowRecordsInitialized = false;",
        "836": "   */",
        "808": "   */",
        "809": "  public RowRecord[] getRowProperties()",
        "810": "  {",
        "811": "    RowRecord[] rp = new RowRecord[rowProperties.size()];",
        "813": "    {",
        "814": "      rp[i] = (RowRecord) rowProperties.get(i);",
        "179": "  /**",
        "180": "   * Indicates whether the rowRecords array has been initialized",
        "181": "   */",
        "182": "  private boolean rowRecordsInitialized;",
        "835": "   * @return the RowRecord for the specified row",
        "834": "   * @param r the row"
      },
      "id": 43260388,
      "filename": "SheetImpl.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 1224,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/read/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200916/",
      "md5hash": "33e93a49ca07c89cc287d0dc9d046366",
      "lines": {
        "290": "    columnInfosInitialized = false;",
        "291": "    rowRecordsInitialized = false;",
        "836": "   */",
        "808": "   */",
        "809": "  public RowRecord[] getRowProperties()",
        "810": "  {",
        "811": "    RowRecord[] rp = new RowRecord[rowProperties.size()];",
        "813": "    {",
        "814": "      rp[i] = (RowRecord) rowProperties.get(i);",
        "179": "  /**",
        "180": "   * Indicates whether the rowRecords array has been initialized",
        "181": "   */",
        "182": "  private boolean rowRecordsInitialized;",
        "835": "   * @return the RowRecord for the specified row",
        "834": "   * @param r the row"
      },
      "id": 49200916,
      "filename": "SheetImpl.java"
    },
    {
      "repo": "https://bitbucket.org/openesb/openesb-components.git",
      "language": "Java",
      "linescount": 1089,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/43260287/",
      "md5hash": "ad86f1c2070d28ba1714383f43bfc685",
      "lines": {
        "576": "        jxl.read.biff.RowRecord rowrec = rowprops[i];",
        "575": "        XFRecord format = null;",
        "569": "    {",
        "573": "      {",
        "436": "    {",
        "437": "      RowRecord[] copyRows = fromWritableSheet.rows;",
        "438": "      RowRecord row = null;",
        "439": "      for (int i = 0; i < copyRows.length ; i++)",
        "248": "    {",
        "249": "      jxl.read.biff.RowRecord[] rowprops  = fromSheet.getRowProperties();",
        "570": "      jxl.read.biff.RowRecord[] rowprops  = fromSheet.getRowProperties();",
        "574": "        RowRecord rr = toSheet.getRowRecord(rowprops[i].getRowNumber());",
        "252": "      {",
        "253": "        RowRecord rr = toSheet.getRowRecord(rowprops[i].getRowNumber());",
        "446": "        {",
        "447": "          RowRecord rr = getRowRecord(i);"
      },
      "id": 43260287,
      "filename": "SheetCopier.java"
    },
    {
      "repo": "https://bitbucket.org/brasseld/openesb-components.git",
      "language": "Java",
      "linescount": 1089,
      "location": "/ojc-core/component-common/axiondb/external/src/jxl/write/biff",
      "name": "openesb-components",
      "url": "https://searchcode.com/codesearch/view/49200815/",
      "md5hash": "ad86f1c2070d28ba1714383f43bfc685",
      "lines": {
        "576": "        jxl.read.biff.RowRecord rowrec = rowprops[i];",
        "575": "        XFRecord format = null;",
        "569": "    {",
        "573": "      {",
        "436": "    {",
        "437": "      RowRecord[] copyRows = fromWritableSheet.rows;",
        "438": "      RowRecord row = null;",
        "439": "      for (int i = 0; i < copyRows.length ; i++)",
        "248": "    {",
        "249": "      jxl.read.biff.RowRecord[] rowprops  = fromSheet.getRowProperties();",
        "570": "      jxl.read.biff.RowRecord[] rowprops  = fromSheet.getRowProperties();",
        "574": "        RowRecord rr = toSheet.getRowRecord(rowprops[i].getRowNumber());",
        "252": "      {",
        "253": "        RowRecord rr = toSheet.getRowRecord(rowprops[i].getRowNumber());",
        "446": "        {",
        "447": "          RowRecord rr = getRowRecord(i);"
      },
      "id": 49200815,
      "filename": "SheetCopier.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 3300,
      "location": "/components/forks/poi/src/loci/poi/hssf/model",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642365/",
      "md5hash": "1e8d548d196dc1063c30d9430b35b9f5",
      "lines": {
        "512": "        {",
        "513": "            rows = new RowRecordsAggregate();",
        "809": "        if (tmpRec instanceof RowRecordsAggregate)",
        "803": "      //Calculate the size of the records from the end of the BOF",
        "804": "      //and up to the RowRecordsAggregate...",
        "776": "//            if (LittleEndian.getUShort(data2, 2) != record.getRecordSize() - 4",
        "777": "//                    && record instanceof RowRecordsAggregate == false",
        "754": "            //writing out the blocked row information. This includes the DBCell references",
        "46": "import loci.poi.hssf.record.aggregates.FormulaRecordAggregate;",
        "47": "import loci.poi.hssf.record.aggregates.RowRecordsAggregate;",
        "808": "        Record tmpRec = (( Record ) records.get(j));",
        "370": "        //To cater for these artificial Record types",
        "371": "        if (rec instanceof RowRecordsAggregate) {",
        "372": "          RowRecordsAggregate rrAgg = (RowRecordsAggregate)rec;",
        "755": "            if (record instanceof RowRecordsAggregate) {",
        "756": "              pos += ((RowRecordsAggregate)record).serialize(pos, data, cells);   // rec.length;"
      },
      "id": 15642365,
      "filename": "Sheet.java"
    },
    {
      "repo": "https://github.com/scooter/scooter.git",
      "language": "Java",
      "linescount": 674,
      "location": "/source/src/com/scooterframework/orm/activerecord",
      "name": "scooter",
      "url": "https://searchcode.com/codesearch/view/109376041/",
      "md5hash": "8d1c72c82ac4d867b74154fe663d5455",
      "lines": {
        "648": "    class RecordData {",
        "649": "        private ActiveRecord rowRecord;",
        "652": "        RecordData(ActiveRecord recordHome, RowData rowData) {",
        "653": "            rowRecord = (ActiveRecord)findOrCreateRecord(recordHome.getClass(), rowData);",
        "670": "            return rowRecord;",
        "669": "        ActiveRecord getRecord() {"
      },
      "id": 109376041,
      "filename": "IncludeHelper.java"
    },
    {
      "repo": "git://github.com/openmicroscopy/bioformats.git",
      "language": "Java",
      "linescount": 489,
      "location": "/components/forks/poi/src/loci/poi/hssf/record/aggregates",
      "name": "bioformats",
      "url": "https://searchcode.com/codesearch/view/15642594/",
      "md5hash": "e2636fd1db0e4f81da83b828da4e76a6",
      "lines": {
        "161": "      for (int i=0; i<=startIndex;i++) {",
        "162": "        row = (RowRecord)rowIter.next();",
        "69": "",
        "70": "    public RowRecordsAggregate()",
        "297": "    {",
        "298": "        RowRecordsAggregate rec = new RowRecordsAggregate();",
        "175": "      RowRecord row = null;",
        "46": "import loci.poi.hssf.record.RecordInputStream;",
        "47": "import loci.poi.hssf.record.RowRecord;",
        "176": "      for (int i=0; i<=endIndex;i++) {",
        "177": "        row = (RowRecord)rowIter.next();",
        "174": "      Iterator rowIter = records.values().iterator();",
        "59": "",
        "60": "public class RowRecordsAggregate",
        "158": "      Iterator rowIter = records.values().iterator();",
        "159": "      RowRecord row = null;"
      },
      "id": 15642594,
      "filename": "RowRecordsAggregate.java"
    },
    {
      "repo": "http://cellengine.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 2650,
      "location": "/engine_java/000_Engine_Core/lib/jexcelapi_2_6_9_1.4/jexcelapi/src/jxl/write/biff",
      "name": "cellengine",
      "url": "https://searchcode.com/codesearch/view/11374549/",
      "md5hash": "9f286e5e90f3fae376d47f89b7deff12",
      "lines": {
        "1184": "    RowRecord rowrec = rows[row];",
        "1187": "    {",
        "1188": "      rowrec = new RowRecord(row, this);",
        "1445": "  {",
        "326": "    outputFile = of;",
        "327": "    rows = new RowRecord[0];",
        "1165": "   */",
        "1166": "  RowRecord getRowRecord(int row) throws RowsExceededException",
        "1200": "   */",
        "1201": "  RowRecord getRowInfo(int r)",
        "1446": "    RowRecord rowrec = getRowRecord(row);",
        "1177": "    {",
        "1178": "      RowRecord[] oldRows = rows;",
        "1179": "      rows = new RowRecord[Math.max(oldRows.length + rowGrowSize, row+1)];",
        "1180": "      System.arraycopy(oldRows, 0, rows, 0, oldRows.length);",
        "1183": ""
      },
      "id": 11374549,
      "filename": "WritableSheetImpl.java"
    },
    {
      "repo": "http://brainstream.googlecode.com/svn/trunk/",
      "language": "Java",
      "linescount": 2650,
      "location": "/trunk/core/ReadExperimentDefinition/java/jexcelapi/src/jxl/write/biff",
      "name": "brainstream",
      "url": "https://searchcode.com/codesearch/view/13919732/",
      "md5hash": "bd6bc164c6d1709ba683d42e991f8998",
      "lines": {
        "1184": "    RowRecord rowrec = rows[row];",
        "1187": "    {",
        "1188": "      rowrec = new RowRecord(row, this);",
        "1445": "  {",
        "326": "    outputFile = of;",
        "327": "    rows = new RowRecord[0];",
        "1165": "   */",
        "1166": "  RowRecord getRowRecord(int row) throws RowsExceededException",
        "1200": "   */",
        "1201": "  RowRecord getRowInfo(int r)",
        "1446": "    RowRecord rowrec = getRowRecord(row);",
        "1177": "    {",
        "1178": "      RowRecord[] oldRows = rows;",
        "1179": "      rows = new RowRecord[Math.max(oldRows.length + rowGrowSize, row+1)];",
        "1180": "      System.arraycopy(oldRows, 0, rows, 0, oldRows.length);",
        "1183": ""
      },
      "id": 13919732,
      "filename": "WritableSheetImpl.java"
    }
  ],
  "page": 0,
  "nextpage": 1,
  "source_filters": [
    {
      "count": 26,
      "source": "Bitbucket",
      "id": 3
    },
    {
      "count": 26,
      "source": "Google Code",
      "id": 1
    },
    {
      "count": 13,
      "source": "Github",
      "id": 2
    }
  ]
}