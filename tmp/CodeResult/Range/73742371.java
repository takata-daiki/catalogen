/* Auto-generated by genmsg_java.py for file /opt/ros/fuerte/share/sensor_msgs/msg/Range.msg */

package ros.pkg.sensor_msgs.msg;

import java.nio.ByteBuffer;

public class Range extends ros.communication.Message {
  static public final short ULTRASOUND = 0;
  static public final short INFRARED = 1;

  public ros.pkg.std_msgs.msg.Header header = new ros.pkg.std_msgs.msg.Header();
  public short radiation_type;
  public float field_of_view;
  public float min_range;
  public float max_range;
  public float range;

  public Range() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/Range"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "c005c34273dc426c67a020a87bc24148"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# Single range reading from an active ranger that emits energy and reports\n" +
"# one range reading that is valid along an arc at the distance measured. \n" +
"# This message is not appropriate for fixed-range obstacle detectors, \n" +
"# such as the Sharp GP2D15. This message is also not appropriate for laser \n" +
"# scanners. See the LaserScan message if you are working with a laser scanner.\n" +
"\n" +
"Header header    	# timestamp in the header is the time the ranger\n" +
"		 	# returned the distance reading\n" +
"\n" +
"# Radiation type enums\n" +
"# If you want a value added to this list, send an email to the ros-users list\n" +
"uint8 ULTRASOUND=0\n" +
"uint8 INFRARED=1\n" +
"\n" +
"uint8 radiation_type    # the type of radiation used by the sensor\n" +
"		 	# (sound, IR, etc) [enum]\n" +
"\n" +
"float32 field_of_view   # the size of the arc that the distance reading is\n" +
"		 	# valid for [rad]\n" +
"		 	# the object causing the range reading may have\n" +
"		 	# been anywhere within -field_of_view/2 and\n" +
"		 	# field_of_view/2 at the measured range. \n" +
"                        # 0 angle corresponds to the x-axis of the sensor.\n" +
"\n" +
"float32 min_range       # minimum range value [m]\n" +
"float32 max_range       # maximum range value [m]\n" +
"\n" +
"float32 range           # range data [m]\n" +
"		 	# (Note: values < range_min or > range_max\n" +
"		 	# should be discarded)\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public Range clone() {
    Range c = new Range();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += 1; // radiation_type
    __l += 4; // field_of_view
    __l += 4; // min_range
    __l += 4; // max_range
    __l += 4; // range
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    bb.put((byte)radiation_type);
    bb.putFloat(field_of_view);
    bb.putFloat(min_range);
    bb.putFloat(max_range);
    bb.putFloat(range);
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);
    radiation_type = (short)(bb.get() & 0xff);
    field_of_view = bb.getFloat();
    min_range = bb.getFloat();
    max_range = bb.getFloat();
    range = bb.getFloat();
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof Range))
      return false;
    Range other = (Range) o;
    return
      header.equals(other.header) &&
      radiation_type == other.radiation_type &&
      field_of_view == other.field_of_view &&
      min_range == other.min_range &&
      max_range == other.max_range &&
      range == other.range &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + this.radiation_type;
    result = prime * result + Float.floatToIntBits(this.field_of_view);
    result = prime * result + Float.floatToIntBits(this.min_range);
    result = prime * result + Float.floatToIntBits(this.max_range);
    result = prime * result + Float.floatToIntBits(this.range);
    return result;
  }
} // class Range

