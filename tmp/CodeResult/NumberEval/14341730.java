/* Generated By:JJTree: Do not edit this line. ASTVar.java */

package repast.simphony.data.logging.formula;

import net.sf.cglib.reflect.FastClass;
import net.sf.cglib.reflect.FastMethod;
import repast.simphony.data.array.DoubleArray;
import repast.simphony.data.array.IllegalFormulaException;
import repast.simphony.util.ClassUtilities;
import simphony.util.messages.MessageCenter;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class ASTVar extends SimpleNode {

  private static MessageCenter msg = MessageCenter.getMessageCenter(ASTVar.class);
  private static Set<Class> pNumberSet = new HashSet<Class>();

  static {
    pNumberSet.add(int.class);
    pNumberSet.add(double.class);
    pNumberSet.add(float.class);
    pNumberSet.add(long.class);
    pNumberSet.add(byte.class);
    pNumberSet.add(short.class);
  }

  private static interface Evaluator {
    public static final Object[] ARGS = new Object[0];

    public double eval(Object obj) throws InvocationTargetException;
  }

  private static class NumberEval implements Evaluator {

    private FastMethod method;


    public NumberEval(FastMethod method) {
      this.method = method;
    }

    public double eval(Object obj) throws InvocationTargetException {
      return ((Number) method.invoke(obj, ARGS)).doubleValue();
    }
  }

  private static class BooleanEval implements Evaluator {

    private FastMethod method;

    public BooleanEval(FastMethod method) {
      this.method = method;
    }

    public double eval(Object obj) throws InvocationTargetException {
      return method.invoke(obj, ARGS).equals(Boolean.TRUE) ? 1.0 : 0.0;
    }
  }

  private String name;
  private int arraySize = 16;
  private Evaluator evaluator;

  public ASTVar(int id) {
    super(id);
  }

  public ASTVar(Parser p, int id) {
    super(p, id);
  }


  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Initializes this Node.
   *
   * @param agentClasses the agent types
   */
  @Override
  public void init(List<Class> agentClasses) {
    Method method = null;
    for (Class clazz : agentClasses) {
      method = ClassUtilities.findMethod(clazz, name);
    }

    if (method == null) throw new IllegalFormulaException("Unable to find method '" + name + "' in an agent class");
    Class retVal = method.getReturnType();
    if (pNumberSet.contains(retVal) || Number.class.isAssignableFrom(retVal)) {
      evaluator = new NumberEval(FastClass.create(method.getDeclaringClass()).getMethod(method));
    } else if (retVal.equals(Boolean.class) || retVal.equals(boolean.class)) {
      evaluator = new BooleanEval(FastClass.create(method.getDeclaringClass()).getMethod(method));
    } else {
      throw new IllegalFormulaException("Method '" + name + "' must return a numeric or boolean value");
    }
  }

  /**
   * Evaluates this Node and returns a DoubleArray as a result.
   *
   * @param source an iterable over objects from which data can be collected
   * @return the result of the evaulation.
   */
  @Override
  public DoubleArray evaluate(Iterable source) {
    DoubleArray array = new DoubleArray(arraySize);
    try {
      for (Object obj : source) {
        array.add(evaluator.eval(obj));
      }
    } catch (InvocationTargetException ex) {
      msg.error("Error calling method during formula evaluation", ex);
    }

    arraySize = array.size();
    return array;
  }
}
