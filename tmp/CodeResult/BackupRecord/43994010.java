package com.android.server.am;

import android.annotation.MiuiHook;
import android.annotation.MiuiHook.MiuiHookType;
import android.app.ActivityManager;
import android.app.ActivityManager.MemoryInfo;
import android.app.ActivityManager.ProcessErrorStateInfo;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.ActivityManager.RunningServiceInfo;
import android.app.ActivityManager.TaskThumbnails;
import android.app.ActivityManagerNative;
import android.app.ActivityThread;
import android.app.AlertDialog;
import android.app.AppGlobals;
import android.app.ApplicationErrorReport;
import android.app.ApplicationErrorReport.AnrInfo;
import android.app.ApplicationErrorReport.CrashInfo;
import android.app.Dialog;
import android.app.IActivityController;
import android.app.IActivityManager.ContentProviderHolder;
import android.app.IActivityManager.WaitResult;
import android.app.IApplicationThread;
import android.app.IInstrumentationWatcher;
import android.app.IProcessObserver;
import android.app.IServiceConnection;
import android.app.MiuiThemeHelper;
import android.app.PendingIntent;
import android.app.backup.IBackupManager;
import android.app.backup.IBackupManager.Stub;
import android.content.ActivityNotFoundException;
import android.content.BroadcastReceiver;
import android.content.ClipData;
import android.content.ClipData.Item;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IContentProvider;
import android.content.IIntentReceiver;
import android.content.IIntentReceiver.Stub;
import android.content.IIntentSender;
import android.content.Intent;
import android.content.Intent.FilterComparison;
import android.content.IntentFilter;
import android.content.IntentSender;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.ComponentInfo;
import android.content.pm.ConfigurationInfo;
import android.content.pm.IPackageManager;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.PathPermission;
import android.content.pm.ProviderInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.content.pm.UserInfo;
import android.content.res.CompatibilityInfo;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.net.ProxyProperties;
import android.net.Uri;
import android.os.Binder;
import android.os.Build;
import android.os.Bundle;
import android.os.Debug;
import android.os.Debug.MemoryInfo;
import android.os.DropBoxManager;
import android.os.FileObserver;
import android.os.FileUtils;
import android.os.Handler;
import android.os.IBinder;
import android.os.IBinder.DeathRecipient;
import android.os.IPermissionController.Stub;
import android.os.Message;
import android.os.ParcelFileDescriptor;
import android.os.PatternMatcher;
import android.os.Process;
import android.os.RemoteCallbackList;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.os.StrictMode.ViolationInfo;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.UserId;
import android.provider.Settings.Secure;
import android.provider.Settings.System;
import android.util.EventLog;
import android.util.Log;
import android.util.Pair;
import android.util.PrintWriterPrinter;
import android.util.Slog;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.util.TimeUtils;
import android.view.IApplicationToken.Stub;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import com.android.internal.os.BatteryStatsImpl;
import com.android.internal.os.BatteryStatsImpl.BatteryCallback;
import com.android.internal.os.BatteryStatsImpl.Uid.Pkg.Serv;
import com.android.internal.os.BatteryStatsImpl.Uid.Proc;
import com.android.internal.os.ProcessStats;
import com.android.internal.os.ProcessStats.Stats;
import com.android.server.AttributeCache;
import com.android.server.IntentResolver;
import com.android.server.ProcessMap;
import com.android.server.Watchdog;
import com.android.server.Watchdog.Monitor;
import com.android.server.wm.WindowManagerService;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;
import miui.provider.ExtraSettings.Secure;

public final class ActivityManagerService extends ActivityManagerNative
    implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback
{
    static final long APP_SWITCH_DELAY_TIME = 5000L;
    static final long BATTERY_STATS_TIME = 1800000L;
    static final int BROADCAST_BG_TIMEOUT = 60000;
    static final int BROADCAST_FG_TIMEOUT = 10000;
    static final int CANCEL_HEAVY_NOTIFICATION_MSG = 25;
    static final int CHECK_EXCESSIVE_WAKE_LOCKS_MSG = 27;
    static final int CLEAR_DNS_CACHE = 28;
    static final int CPU_MIN_CHECK_DURATION = 300000;
    static final boolean DEBUG = false;
    static final boolean DEBUG_BACKGROUND_BROADCAST = false;
    static final boolean DEBUG_BACKUP = false;
    static final boolean DEBUG_BROADCAST = false;
    static final boolean DEBUG_BROADCAST_LIGHT = false;
    static final boolean DEBUG_CONFIGURATION = false;
    static final boolean DEBUG_MU = false;
    static final boolean DEBUG_OOM_ADJ = false;
    static final boolean DEBUG_PAUSE = false;
    static final boolean DEBUG_POWER = false;
    static final boolean DEBUG_POWER_QUICK = false;
    static final boolean DEBUG_PROCESSES = false;
    static final boolean DEBUG_PROCESS_OBSERVERS = false;
    static final boolean DEBUG_PROVIDER = false;
    static final boolean DEBUG_RESULTS = false;
    static final boolean DEBUG_SERVICE = false;
    static final boolean DEBUG_SERVICE_EXECUTING = false;
    static final boolean DEBUG_SWITCH = false;
    static final boolean DEBUG_TASKS = false;
    static final boolean DEBUG_TRANSITION = false;
    static final boolean DEBUG_URI_PERMISSION = false;
    static final boolean DEBUG_USER_LEAVING = false;
    static final boolean DEBUG_VISBILITY = false;
    static final int DISPATCH_PROCESSES_CHANGED = 31;
    static final int DISPATCH_PROCESS_DIED = 32;
    static final int DO_PENDING_ACTIVITY_LAUNCHES_MSG = 21;
    static final long[] DUMP_MEM_BUCKETS;
    static final int[] DUMP_MEM_OOM_ADJ;
    static final String[] DUMP_MEM_OOM_LABEL = arrayOfString;
    static final String[] EMPTY_STRING_ARRAY;
    static final int FINALIZE_PENDING_INTENT_MSG = 23;
    static final int FIRST_ACTIVITY_STACK_MSG = 100;
    static final int FIRST_BROADCAST_QUEUE_MSG = 200;
    static final int FIRST_COMPAT_MODE_MSG = 300;
    static final int GC_BACKGROUND_PROCESSES_MSG = 5;
    static final int GC_MIN_INTERVAL = 60000;
    static final int GC_TIMEOUT = 5000;
    static final int IM_FEELING_LUCKY_MSG = 15;
    static final int INSTRUMENTATION_KEY_DISPATCHING_TIMEOUT = 60000;
    static final boolean IS_USER_BUILD = false;
    static final int KEY_DISPATCHING_TIMEOUT = 5000;
    static final int KILL_APPLICATION_MSG = 22;
    static final int LAST_DONE_VERSION = 10000;
    private static final int MAX_DUP_SUPPRESSED_STACKS = 5000;
    static final int MAX_RECENT_TASKS = 20;
    static final int MAX_SERVICE_INACTIVITY = 1800000;
    static final long MONITOR_CPU_MAX_TIME = 268435455L;
    static final long MONITOR_CPU_MIN_TIME = 5000L;
    static final boolean MONITOR_CPU_USAGE = true;
    static final boolean MONITOR_THREAD_CPU_USAGE = false;
    static final int MY_PID = 0;
    static final int POST_HEAVY_NOTIFICATION_MSG = 24;
    static final int POWER_CHECK_DELAY = 900000;
    static final int PROC_START_TIMEOUT = 10000;
    static final int PROC_START_TIMEOUT_MSG = 20;
    static final int PROC_START_TIMEOUT_WITH_WRAPPER = 300000;
    static final int REPORT_MEM_USAGE = 33;
    static final int SERVICE_MIN_RESTART_TIME_BETWEEN = 10000;
    static final int SERVICE_RESET_RUN_DURATION = 60000;
    static final int SERVICE_RESTART_DURATION = 5000;
    static final int SERVICE_RESTART_DURATION_FACTOR = 4;
    static final int SERVICE_TIMEOUT = 20000;
    static final int SERVICE_TIMEOUT_MSG = 12;
    static final boolean SHOW_ACTIVITY_START_TIME = true;
    static final int SHOW_COMPAT_MODE_DIALOG_MSG = 30;
    static final int SHOW_ERROR_MSG = 1;
    static final int SHOW_FACTORY_ERROR_MSG = 3;
    static final int SHOW_NOT_RESPONDING_MSG = 2;
    static final int SHOW_STRICT_MODE_VIOLATION_MSG = 26;
    static final int SHOW_UID_ERROR_MSG = 14;
    static final int STOCK_PM_FLAGS = 1024;
    private static final String SYSTEM_DEBUGGABLE = "ro.debuggable";
    static final String TAG = "ActivityManager";
    static final String TAG_MU = "ActivityManagerServiceMU";
    static final int UPDATE_CONFIGURATION_MSG = 4;
    static final int UPDATE_HTTP_PROXY = 29;
    static final int UPDATE_TIME_ZONE = 13;
    private static final String USER_DATA_DIR = "/data/user/";
    static final boolean VALIDATE_TOKENS = false;
    static final int WAIT_FOR_DEBUGGER_MSG = 6;
    static final int WAKE_LOCK_MIN_CHECK_DURATION = 300000;
    static final boolean localLOGV;
    static ActivityManagerService mSelf;
    static ActivityThread mSystemThread;
    private static ThreadLocal<Identity> sCallerIdentity;
    final int GL_ES_VERSION;
    ProcessChangeItem[] mActiveProcessChanges = new ProcessChangeItem[5];
    int mAdjSeq = 0;
    private final HashSet<Integer> mAlreadyLoggedViolatedStacks = new HashSet();
    boolean mAlwaysFinishActivities = false;
    HashMap<String, IBinder> mAppBindArgs;
    long mAppSwitchesAllowedTime;
    boolean mAutoStopProfiler = false;
    final ArrayList<ProcessChangeItem> mAvailProcessChanges = new ArrayList();
    String mBackupAppName = null;
    BackupRecord mBackupTarget = null;
    final ProcessMap<Long> mBadProcesses = new ProcessMap();
    final BatteryStatsService mBatteryStatsService;
    BroadcastQueue mBgBroadcastQueue;
    boolean mBooted = false;
    boolean mBooting = false;
    final BroadcastQueue[] mBroadcastQueues = new BroadcastQueue[2];
    final ArrayList mCancelledThumbnails = new ArrayList();
    boolean mCheckedForSetup;
    CompatModeDialog mCompatModeDialog;
    final CompatModePackages mCompatModePackages;
    Configuration mConfiguration = new Configuration();
    int mConfigurationSeq = 0;
    Context mContext;
    IActivityController mController = null;
    CoreSettingsObserver mCoreSettingsObserver;
    int mCurTask = 1;
    private int mCurrentUserId;
    String mDebugApp = null;
    boolean mDebugTransient = false;
    boolean mDidAppSwitch;
    boolean mDidDexOpt;
    boolean mDidUpdate = false;
    int mFactoryTest;
    BroadcastQueue mFgBroadcastQueue;
    ActivityRecord mFocusedActivity = null;
    final SparseArray<ForegroundToken> mForegroundProcesses = new SparseArray();
    private final SparseArray<HashMap<Uri, UriPermission>> mGrantedUriPermissions = new SparseArray();
    final Handler mHandler = new Handler()
    {
        // ERROR //
        @MiuiHook(MiuiHook.MiuiHookType.CHANGE_CODE)
        public void handleMessage(Message paramAnonymousMessage)
        {
            // Byte code:
            //     0: aload_1
            //     1: getfield 35	android/os/Message:what	I
            //     4: tableswitch	default:+148 -> 152, 1:+149->153, 2:+340->344, 3:+752->756, 4:+792->796, 5:+816->820, 6:+846->850, 7:+148->152, 8:+148->152, 9:+148->152, 10:+148->152, 11:+148->152, 12:+958->962, 13:+1035->1039, 14:+1472->1476, 15:+1604->1608, 16:+148->152, 17:+148->152, 18:+148->152, 19:+148->152, 20:+1635->1639, 21:+1736->1740, 22:+1767->1771, 23:+1844->1848, 24:+1857->1861, 25:+2101->2105, 26:+559->563, 27:+2143->2147, 28:+1161->1165, 29:+1287->1291, 30:+2194->2198, 31:+2293->2297, 32:+2303->2307, 33:+2329->2333
            //     153: aload_1
            //     154: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     157: checkcast 41	java/util/HashMap
            //     160: astore 99
            //     162: aload_0
            //     163: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     166: astore 100
            //     168: aload 100
            //     170: monitorenter
            //     171: aload 99
            //     173: ldc 43
            //     175: invokevirtual 47	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
            //     178: checkcast 49	com/android/server/am/ProcessRecord
            //     181: astore 102
            //     183: aload 102
            //     185: ifnull +51 -> 236
            //     188: aload 102
            //     190: getfield 53	com/android/server/am/ProcessRecord:crashDialog	Landroid/app/Dialog;
            //     193: ifnull +43 -> 236
            //     196: ldc 55
            //     198: new 57	java/lang/StringBuilder
            //     201: dup
            //     202: invokespecial 58	java/lang/StringBuilder:<init>	()V
            //     205: ldc 60
            //     207: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     210: aload 102
            //     212: invokevirtual 67	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
            //     215: invokevirtual 71	java/lang/StringBuilder:toString	()Ljava/lang/String;
            //     218: invokestatic 77	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
            //     221: pop
            //     222: aload 100
            //     224: monitorexit
            //     225: goto -73 -> 152
            //     228: astore 101
            //     230: aload 100
            //     232: monitorexit
            //     233: aload 101
            //     235: athrow
            //     236: aload 99
            //     238: ldc 79
            //     240: invokevirtual 47	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
            //     243: checkcast 81	com/android/server/am/AppErrorResult
            //     246: astore 103
            //     248: aload_0
            //     249: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     252: invokestatic 85	com/android/server/am/ActivityManagerService:access$000	(Lcom/android/server/am/ActivityManagerService;)Z
            //     255: ifeq +80 -> 335
            //     258: aload_0
            //     259: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     262: getfield 89	com/android/server/am/ActivityManagerService:mSleeping	Z
            //     265: ifne +70 -> 335
            //     268: aload_0
            //     269: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     272: getfield 92	com/android/server/am/ActivityManagerService:mShuttingDown	Z
            //     275: ifne +60 -> 335
            //     278: aload_0
            //     279: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     282: aload 99
            //     284: invokestatic 98	com/android/server/am/ActivityManagerService$Injector:showAppCrashDialog	(Lcom/android/server/am/ActivityManagerService;Ljava/util/HashMap;)Z
            //     287: ifne +35 -> 322
            //     290: new 100	com/android/server/am/AppErrorDialog
            //     293: dup
            //     294: aload_0
            //     295: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     298: getfield 104	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
            //     301: aload 103
            //     303: aload 102
            //     305: invokespecial 107	com/android/server/am/AppErrorDialog:<init>	(Landroid/content/Context;Lcom/android/server/am/AppErrorResult;Lcom/android/server/am/ProcessRecord;)V
            //     308: astore 104
            //     310: aload 104
            //     312: invokevirtual 112	android/app/AlertDialog:show	()V
            //     315: aload 102
            //     317: aload 104
            //     319: putfield 53	com/android/server/am/ProcessRecord:crashDialog	Landroid/app/Dialog;
            //     322: aload 100
            //     324: monitorexit
            //     325: aload_0
            //     326: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     329: invokevirtual 115	com/android/server/am/ActivityManagerService:ensureBootCompleted	()V
            //     332: goto -180 -> 152
            //     335: aload 103
            //     337: iconst_0
            //     338: invokevirtual 119	com/android/server/am/AppErrorResult:set	(I)V
            //     341: goto -19 -> 322
            //     344: aload_0
            //     345: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     348: astore 90
            //     350: aload 90
            //     352: monitorenter
            //     353: aload_1
            //     354: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     357: checkcast 41	java/util/HashMap
            //     360: astore 92
            //     362: aload 92
            //     364: ldc 43
            //     366: invokevirtual 47	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
            //     369: checkcast 49	com/android/server/am/ProcessRecord
            //     372: astore 93
            //     374: aload 93
            //     376: ifnull +51 -> 427
            //     379: aload 93
            //     381: getfield 122	com/android/server/am/ProcessRecord:anrDialog	Landroid/app/Dialog;
            //     384: ifnull +43 -> 427
            //     387: ldc 55
            //     389: new 57	java/lang/StringBuilder
            //     392: dup
            //     393: invokespecial 58	java/lang/StringBuilder:<init>	()V
            //     396: ldc 124
            //     398: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     401: aload 93
            //     403: invokevirtual 67	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
            //     406: invokevirtual 71	java/lang/StringBuilder:toString	()Ljava/lang/String;
            //     409: invokestatic 77	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
            //     412: pop
            //     413: aload 90
            //     415: monitorexit
            //     416: goto -264 -> 152
            //     419: astore 91
            //     421: aload 90
            //     423: monitorexit
            //     424: aload 91
            //     426: athrow
            //     427: new 126	android/content/Intent
            //     430: dup
            //     431: ldc 128
            //     433: invokespecial 131	android/content/Intent:<init>	(Ljava/lang/String;)V
            //     436: astore 94
            //     438: aload_0
            //     439: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     442: getfield 134	com/android/server/am/ActivityManagerService:mProcessesReady	Z
            //     445: ifne +11 -> 456
            //     448: aload 94
            //     450: ldc 135
            //     452: invokevirtual 139	android/content/Intent:addFlags	(I)Landroid/content/Intent;
            //     455: pop
            //     456: aload_0
            //     457: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     460: aconst_null
            //     461: aconst_null
            //     462: aload 94
            //     464: aconst_null
            //     465: aconst_null
            //     466: iconst_0
            //     467: aconst_null
            //     468: aconst_null
            //     469: aconst_null
            //     470: iconst_0
            //     471: iconst_0
            //     472: getstatic 142	com/android/server/am/ActivityManagerService:MY_PID	I
            //     475: sipush 1000
            //     478: iconst_0
            //     479: invokestatic 146	com/android/server/am/ActivityManagerService:access$100	(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;ZZIII)I
            //     482: pop
            //     483: aload_0
            //     484: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     487: invokestatic 85	com/android/server/am/ActivityManagerService:access$000	(Lcom/android/server/am/ActivityManagerService;)Z
            //     490: ifeq +60 -> 550
            //     493: new 148	com/android/server/am/AppNotRespondingDialog
            //     496: dup
            //     497: aload_0
            //     498: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     501: aload_0
            //     502: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     505: getfield 104	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
            //     508: aload 93
            //     510: aload 92
            //     512: ldc 150
            //     514: invokevirtual 47	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
            //     517: checkcast 152	com/android/server/am/ActivityRecord
            //     520: invokespecial 155	com/android/server/am/AppNotRespondingDialog:<init>	(Lcom/android/server/am/ActivityManagerService;Landroid/content/Context;Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ActivityRecord;)V
            //     523: astore 96
            //     525: aload 96
            //     527: invokevirtual 112	android/app/AlertDialog:show	()V
            //     530: aload 93
            //     532: aload 96
            //     534: putfield 122	com/android/server/am/ProcessRecord:anrDialog	Landroid/app/Dialog;
            //     537: aload 90
            //     539: monitorexit
            //     540: aload_0
            //     541: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     544: invokevirtual 115	com/android/server/am/ActivityManagerService:ensureBootCompleted	()V
            //     547: goto -395 -> 152
            //     550: aload_0
            //     551: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     554: aload 93
            //     556: aconst_null
            //     557: invokevirtual 159	com/android/server/am/ActivityManagerService:killAppAtUsersRequest	(Lcom/android/server/am/ProcessRecord;Landroid/app/Dialog;)V
            //     560: goto -23 -> 537
            //     563: aload_1
            //     564: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     567: checkcast 41	java/util/HashMap
            //     570: astore 82
            //     572: aload_0
            //     573: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     576: astore 83
            //     578: aload 83
            //     580: monitorenter
            //     581: aload 82
            //     583: ldc 43
            //     585: invokevirtual 47	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
            //     588: checkcast 49	com/android/server/am/ProcessRecord
            //     591: astore 85
            //     593: aload 85
            //     595: ifnonnull +25 -> 620
            //     598: ldc 55
            //     600: ldc 161
            //     602: invokestatic 77	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
            //     605: pop
            //     606: aload 83
            //     608: monitorexit
            //     609: goto -457 -> 152
            //     612: astore 84
            //     614: aload 83
            //     616: monitorexit
            //     617: aload 84
            //     619: athrow
            //     620: aload 85
            //     622: getfield 53	com/android/server/am/ProcessRecord:crashDialog	Landroid/app/Dialog;
            //     625: ifnull +35 -> 660
            //     628: ldc 55
            //     630: new 57	java/lang/StringBuilder
            //     633: dup
            //     634: invokespecial 58	java/lang/StringBuilder:<init>	()V
            //     637: ldc 163
            //     639: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     642: aload 85
            //     644: invokevirtual 67	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
            //     647: invokevirtual 71	java/lang/StringBuilder:toString	()Ljava/lang/String;
            //     650: invokestatic 77	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
            //     653: pop
            //     654: aload 83
            //     656: monitorexit
            //     657: goto -505 -> 152
            //     660: aload 82
            //     662: ldc 79
            //     664: invokevirtual 47	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
            //     667: checkcast 81	com/android/server/am/AppErrorResult
            //     670: astore 86
            //     672: aload_0
            //     673: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     676: invokestatic 85	com/android/server/am/ActivityManagerService:access$000	(Lcom/android/server/am/ActivityManagerService;)Z
            //     679: ifeq +68 -> 747
            //     682: aload_0
            //     683: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     686: getfield 89	com/android/server/am/ActivityManagerService:mSleeping	Z
            //     689: ifne +58 -> 747
            //     692: aload_0
            //     693: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     696: getfield 92	com/android/server/am/ActivityManagerService:mShuttingDown	Z
            //     699: ifne +48 -> 747
            //     702: new 165	com/android/server/am/StrictModeViolationDialog
            //     705: dup
            //     706: aload_0
            //     707: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     710: getfield 104	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
            //     713: aload 86
            //     715: aload 85
            //     717: invokespecial 166	com/android/server/am/StrictModeViolationDialog:<init>	(Landroid/content/Context;Lcom/android/server/am/AppErrorResult;Lcom/android/server/am/ProcessRecord;)V
            //     720: astore 87
            //     722: aload 87
            //     724: invokevirtual 112	android/app/AlertDialog:show	()V
            //     727: aload 85
            //     729: aload 87
            //     731: putfield 53	com/android/server/am/ProcessRecord:crashDialog	Landroid/app/Dialog;
            //     734: aload 83
            //     736: monitorexit
            //     737: aload_0
            //     738: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     741: invokevirtual 115	com/android/server/am/ActivityManagerService:ensureBootCompleted	()V
            //     744: goto -592 -> 152
            //     747: aload 86
            //     749: iconst_0
            //     750: invokevirtual 119	com/android/server/am/AppErrorResult:set	(I)V
            //     753: goto -19 -> 734
            //     756: new 168	com/android/server/am/FactoryErrorDialog
            //     759: dup
            //     760: aload_0
            //     761: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     764: getfield 104	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
            //     767: aload_1
            //     768: invokevirtual 172	android/os/Message:getData	()Landroid/os/Bundle;
            //     771: ldc 174
            //     773: invokevirtual 180	android/os/Bundle:getCharSequence	(Ljava/lang/String;)Ljava/lang/CharSequence;
            //     776: invokespecial 183	com/android/server/am/FactoryErrorDialog:<init>	(Landroid/content/Context;Ljava/lang/CharSequence;)V
            //     779: astore 81
            //     781: aload 81
            //     783: invokevirtual 112	android/app/AlertDialog:show	()V
            //     786: aload_0
            //     787: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     790: invokevirtual 115	com/android/server/am/ActivityManagerService:ensureBootCompleted	()V
            //     793: goto -641 -> 152
            //     796: aload_0
            //     797: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     800: getfield 104	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
            //     803: invokevirtual 189	android/content/Context:getContentResolver	()Landroid/content/ContentResolver;
            //     806: aload_1
            //     807: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     810: checkcast 191	android/content/res/Configuration
            //     813: invokestatic 197	android/provider/Settings$System:putConfiguration	(Landroid/content/ContentResolver;Landroid/content/res/Configuration;)Z
            //     816: pop
            //     817: goto -665 -> 152
            //     820: aload_0
            //     821: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     824: astore 78
            //     826: aload 78
            //     828: monitorenter
            //     829: aload_0
            //     830: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     833: invokevirtual 200	com/android/server/am/ActivityManagerService:performAppGcsIfAppropriateLocked	()V
            //     836: aload 78
            //     838: monitorexit
            //     839: goto -687 -> 152
            //     842: astore 79
            //     844: aload 78
            //     846: monitorexit
            //     847: aload 79
            //     849: athrow
            //     850: aload_0
            //     851: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     854: astore 74
            //     856: aload 74
            //     858: monitorenter
            //     859: aload_1
            //     860: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     863: checkcast 49	com/android/server/am/ProcessRecord
            //     866: astore 76
            //     868: aload_1
            //     869: getfield 203	android/os/Message:arg1	I
            //     872: ifeq +65 -> 937
            //     875: aload 76
            //     877: getfield 206	com/android/server/am/ProcessRecord:waitedForDebugger	Z
            //     880: ifne +43 -> 923
            //     883: new 208	com/android/server/am/AppWaitingForDebuggerDialog
            //     886: dup
            //     887: aload_0
            //     888: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     891: aload_0
            //     892: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     895: getfield 104	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
            //     898: aload 76
            //     900: invokespecial 211	com/android/server/am/AppWaitingForDebuggerDialog:<init>	(Lcom/android/server/am/ActivityManagerService;Landroid/content/Context;Lcom/android/server/am/ProcessRecord;)V
            //     903: astore 77
            //     905: aload 76
            //     907: aload 77
            //     909: putfield 214	com/android/server/am/ProcessRecord:waitDialog	Landroid/app/Dialog;
            //     912: aload 76
            //     914: iconst_1
            //     915: putfield 206	com/android/server/am/ProcessRecord:waitedForDebugger	Z
            //     918: aload 77
            //     920: invokevirtual 112	android/app/AlertDialog:show	()V
            //     923: aload 74
            //     925: monitorexit
            //     926: goto -774 -> 152
            //     929: astore 75
            //     931: aload 74
            //     933: monitorexit
            //     934: aload 75
            //     936: athrow
            //     937: aload 76
            //     939: getfield 214	com/android/server/am/ProcessRecord:waitDialog	Landroid/app/Dialog;
            //     942: ifnull -19 -> 923
            //     945: aload 76
            //     947: getfield 214	com/android/server/am/ProcessRecord:waitDialog	Landroid/app/Dialog;
            //     950: invokevirtual 219	android/app/Dialog:dismiss	()V
            //     953: aload 76
            //     955: aconst_null
            //     956: putfield 214	com/android/server/am/ProcessRecord:waitDialog	Landroid/app/Dialog;
            //     959: goto -36 -> 923
            //     962: aload_0
            //     963: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     966: getfield 222	com/android/server/am/ActivityManagerService:mDidDexOpt	Z
            //     969: ifeq +53 -> 1022
            //     972: aload_0
            //     973: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     976: iconst_0
            //     977: putfield 222	com/android/server/am/ActivityManagerService:mDidDexOpt	Z
            //     980: aload_0
            //     981: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     984: getfield 226	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
            //     987: bipush 12
            //     989: invokevirtual 230	android/os/Handler:obtainMessage	(I)Landroid/os/Message;
            //     992: astore 72
            //     994: aload 72
            //     996: aload_1
            //     997: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     1000: putfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     1003: aload_0
            //     1004: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1007: getfield 226	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
            //     1010: aload 72
            //     1012: ldc2_w 231
            //     1015: invokevirtual 236	android/os/Handler:sendMessageDelayed	(Landroid/os/Message;J)Z
            //     1018: pop
            //     1019: goto -867 -> 152
            //     1022: aload_0
            //     1023: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1026: aload_1
            //     1027: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     1030: checkcast 49	com/android/server/am/ProcessRecord
            //     1033: invokevirtual 240	com/android/server/am/ActivityManagerService:serviceTimeout	(Lcom/android/server/am/ProcessRecord;)V
            //     1036: goto -884 -> 152
            //     1039: aload_0
            //     1040: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1043: astore 65
            //     1045: aload 65
            //     1047: monitorenter
            //     1048: bipush 255
            //     1050: aload_0
            //     1051: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1054: getfield 244	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
            //     1057: invokevirtual 250	java/util/ArrayList:size	()I
            //     1060: iadd
            //     1061: istore 67
            //     1063: iload 67
            //     1065: iflt +94 -> 1159
            //     1068: aload_0
            //     1069: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1072: getfield 244	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
            //     1075: iload 67
            //     1077: invokevirtual 253	java/util/ArrayList:get	(I)Ljava/lang/Object;
            //     1080: checkcast 49	com/android/server/am/ProcessRecord
            //     1083: astore 68
            //     1085: aload 68
            //     1087: getfield 257	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
            //     1090: astore 69
            //     1092: aload 69
            //     1094: ifnull +13 -> 1107
            //     1097: aload 68
            //     1099: getfield 257	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
            //     1102: invokeinterface 262 1 0
            //     1107: iinc 67 255
            //     1110: goto -47 -> 1063
            //     1113: astore 70
            //     1115: ldc 55
            //     1117: new 57	java/lang/StringBuilder
            //     1120: dup
            //     1121: invokespecial 58	java/lang/StringBuilder:<init>	()V
            //     1124: ldc_w 264
            //     1127: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     1130: aload 68
            //     1132: getfield 268	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
            //     1135: getfield 274	android/content/pm/ApplicationInfo:processName	Ljava/lang/String;
            //     1138: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     1141: invokevirtual 71	java/lang/StringBuilder:toString	()Ljava/lang/String;
            //     1144: invokestatic 277	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
            //     1147: pop
            //     1148: goto -41 -> 1107
            //     1151: astore 66
            //     1153: aload 65
            //     1155: monitorexit
            //     1156: aload 66
            //     1158: athrow
            //     1159: aload 65
            //     1161: monitorexit
            //     1162: goto -1010 -> 152
            //     1165: aload_0
            //     1166: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1169: astore 58
            //     1171: aload 58
            //     1173: monitorenter
            //     1174: bipush 255
            //     1176: aload_0
            //     1177: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1180: getfield 244	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
            //     1183: invokevirtual 250	java/util/ArrayList:size	()I
            //     1186: iadd
            //     1187: istore 60
            //     1189: iload 60
            //     1191: iflt +94 -> 1285
            //     1194: aload_0
            //     1195: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1198: getfield 244	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
            //     1201: iload 60
            //     1203: invokevirtual 253	java/util/ArrayList:get	(I)Ljava/lang/Object;
            //     1206: checkcast 49	com/android/server/am/ProcessRecord
            //     1209: astore 61
            //     1211: aload 61
            //     1213: getfield 257	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
            //     1216: astore 62
            //     1218: aload 62
            //     1220: ifnull +13 -> 1233
            //     1223: aload 61
            //     1225: getfield 257	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
            //     1228: invokeinterface 280 1 0
            //     1233: iinc 60 255
            //     1236: goto -47 -> 1189
            //     1239: astore 63
            //     1241: ldc 55
            //     1243: new 57	java/lang/StringBuilder
            //     1246: dup
            //     1247: invokespecial 58	java/lang/StringBuilder:<init>	()V
            //     1250: ldc_w 282
            //     1253: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     1256: aload 61
            //     1258: getfield 268	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
            //     1261: getfield 274	android/content/pm/ApplicationInfo:processName	Ljava/lang/String;
            //     1264: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     1267: invokevirtual 71	java/lang/StringBuilder:toString	()Ljava/lang/String;
            //     1270: invokestatic 277	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
            //     1273: pop
            //     1274: goto -41 -> 1233
            //     1277: astore 59
            //     1279: aload 58
            //     1281: monitorexit
            //     1282: aload 59
            //     1284: athrow
            //     1285: aload 58
            //     1287: monitorexit
            //     1288: goto -1136 -> 152
            //     1291: aload_1
            //     1292: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     1295: checkcast 284	android/net/ProxyProperties
            //     1298: astore 47
            //     1300: ldc_w 286
            //     1303: astore 48
            //     1305: ldc_w 286
            //     1308: astore 49
            //     1310: ldc_w 286
            //     1313: astore 50
            //     1315: aload 47
            //     1317: ifnull +27 -> 1344
            //     1320: aload 47
            //     1322: invokevirtual 289	android/net/ProxyProperties:getHost	()Ljava/lang/String;
            //     1325: astore 48
            //     1327: aload 47
            //     1329: invokevirtual 292	android/net/ProxyProperties:getPort	()I
            //     1332: invokestatic 297	java/lang/Integer:toString	(I)Ljava/lang/String;
            //     1335: astore 49
            //     1337: aload 47
            //     1339: invokevirtual 300	android/net/ProxyProperties:getExclusionList	()Ljava/lang/String;
            //     1342: astore 50
            //     1344: aload_0
            //     1345: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1348: astore 51
            //     1350: aload 51
            //     1352: monitorenter
            //     1353: bipush 255
            //     1355: aload_0
            //     1356: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1359: getfield 244	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
            //     1362: invokevirtual 250	java/util/ArrayList:size	()I
            //     1365: iadd
            //     1366: istore 53
            //     1368: iload 53
            //     1370: iflt +100 -> 1470
            //     1373: aload_0
            //     1374: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1377: getfield 244	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
            //     1380: iload 53
            //     1382: invokevirtual 253	java/util/ArrayList:get	(I)Ljava/lang/Object;
            //     1385: checkcast 49	com/android/server/am/ProcessRecord
            //     1388: astore 54
            //     1390: aload 54
            //     1392: getfield 257	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
            //     1395: astore 55
            //     1397: aload 55
            //     1399: ifnull +19 -> 1418
            //     1402: aload 54
            //     1404: getfield 257	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
            //     1407: aload 48
            //     1409: aload 49
            //     1411: aload 50
            //     1413: invokeinterface 304 4 0
            //     1418: iinc 53 255
            //     1421: goto -53 -> 1368
            //     1424: astore 56
            //     1426: ldc 55
            //     1428: new 57	java/lang/StringBuilder
            //     1431: dup
            //     1432: invokespecial 58	java/lang/StringBuilder:<init>	()V
            //     1435: ldc_w 306
            //     1438: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     1441: aload 54
            //     1443: getfield 268	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
            //     1446: getfield 274	android/content/pm/ApplicationInfo:processName	Ljava/lang/String;
            //     1449: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     1452: invokevirtual 71	java/lang/StringBuilder:toString	()Ljava/lang/String;
            //     1455: invokestatic 277	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
            //     1458: pop
            //     1459: goto -41 -> 1418
            //     1462: astore 52
            //     1464: aload 51
            //     1466: monitorexit
            //     1467: aload 52
            //     1469: athrow
            //     1470: aload 51
            //     1472: monitorexit
            //     1473: goto -1321 -> 152
            //     1476: ldc 55
            //     1478: new 57	java/lang/StringBuilder
            //     1481: dup
            //     1482: invokespecial 58	java/lang/StringBuilder:<init>	()V
            //     1485: ldc_w 308
            //     1488: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     1491: ldc_w 310
            //     1494: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     1497: ldc_w 312
            //     1500: invokevirtual 64	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
            //     1503: invokevirtual 71	java/lang/StringBuilder:toString	()Ljava/lang/String;
            //     1506: invokestatic 315	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
            //     1509: pop
            //     1510: aload_0
            //     1511: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1514: invokestatic 85	com/android/server/am/ActivityManagerService:access$000	(Lcom/android/server/am/ActivityManagerService;)Z
            //     1517: ifeq -1365 -> 152
            //     1520: new 317	com/android/server/am/BaseErrorDialog
            //     1523: dup
            //     1524: aload_0
            //     1525: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1528: getfield 104	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
            //     1531: invokespecial 320	com/android/server/am/BaseErrorDialog:<init>	(Landroid/content/Context;)V
            //     1534: astore 46
            //     1536: aload 46
            //     1538: invokevirtual 324	com/android/server/am/BaseErrorDialog:getWindow	()Landroid/view/Window;
            //     1541: sipush 2010
            //     1544: invokevirtual 329	android/view/Window:setType	(I)V
            //     1547: aload 46
            //     1549: iconst_0
            //     1550: invokevirtual 333	android/app/AlertDialog:setCancelable	(Z)V
            //     1553: aload 46
            //     1555: ldc_w 308
            //     1558: invokevirtual 337	android/app/AlertDialog:setTitle	(Ljava/lang/CharSequence;)V
            //     1561: aload 46
            //     1563: ldc_w 312
            //     1566: invokevirtual 340	android/app/AlertDialog:setMessage	(Ljava/lang/CharSequence;)V
            //     1569: aload 46
            //     1571: bipush 255
            //     1573: ldc_w 342
            //     1576: aload_0
            //     1577: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1580: getfield 226	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
            //     1583: bipush 15
            //     1585: invokevirtual 230	android/os/Handler:obtainMessage	(I)Landroid/os/Message;
            //     1588: invokevirtual 346	android/app/AlertDialog:setButton	(ILjava/lang/CharSequence;Landroid/os/Message;)V
            //     1591: aload_0
            //     1592: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1595: aload 46
            //     1597: putfield 350	com/android/server/am/ActivityManagerService:mUidAlert	Landroid/app/AlertDialog;
            //     1600: aload 46
            //     1602: invokevirtual 112	android/app/AlertDialog:show	()V
            //     1605: goto -1453 -> 152
            //     1608: aload_0
            //     1609: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1612: getfield 350	com/android/server/am/ActivityManagerService:mUidAlert	Landroid/app/AlertDialog;
            //     1615: ifnull -1463 -> 152
            //     1618: aload_0
            //     1619: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1622: getfield 350	com/android/server/am/ActivityManagerService:mUidAlert	Landroid/app/AlertDialog;
            //     1625: invokevirtual 351	android/app/AlertDialog:dismiss	()V
            //     1628: aload_0
            //     1629: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1632: aconst_null
            //     1633: putfield 350	com/android/server/am/ActivityManagerService:mUidAlert	Landroid/app/AlertDialog;
            //     1636: goto -1484 -> 152
            //     1639: aload_0
            //     1640: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1643: getfield 222	com/android/server/am/ActivityManagerService:mDidDexOpt	Z
            //     1646: ifeq +53 -> 1699
            //     1649: aload_0
            //     1650: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1653: iconst_0
            //     1654: putfield 222	com/android/server/am/ActivityManagerService:mDidDexOpt	Z
            //     1657: aload_0
            //     1658: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1661: getfield 226	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
            //     1664: bipush 20
            //     1666: invokevirtual 230	android/os/Handler:obtainMessage	(I)Landroid/os/Message;
            //     1669: astore 43
            //     1671: aload 43
            //     1673: aload_1
            //     1674: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     1677: putfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     1680: aload_0
            //     1681: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1684: getfield 226	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
            //     1687: aload 43
            //     1689: ldc2_w 352
            //     1692: invokevirtual 236	android/os/Handler:sendMessageDelayed	(Landroid/os/Message;J)Z
            //     1695: pop
            //     1696: goto -1544 -> 152
            //     1699: aload_1
            //     1700: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     1703: checkcast 49	com/android/server/am/ProcessRecord
            //     1706: astore 40
            //     1708: aload_0
            //     1709: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1712: astore 41
            //     1714: aload 41
            //     1716: monitorenter
            //     1717: aload_0
            //     1718: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1721: aload 40
            //     1723: invokestatic 357	com/android/server/am/ActivityManagerService:access$200	(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;)V
            //     1726: aload 41
            //     1728: monitorexit
            //     1729: goto -1577 -> 152
            //     1732: astore 42
            //     1734: aload 41
            //     1736: monitorexit
            //     1737: aload 42
            //     1739: athrow
            //     1740: aload_0
            //     1741: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1744: astore 38
            //     1746: aload 38
            //     1748: monitorenter
            //     1749: aload_0
            //     1750: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1753: iconst_1
            //     1754: invokevirtual 360	com/android/server/am/ActivityManagerService:doPendingActivityLaunchesLocked	(Z)V
            //     1757: aload 38
            //     1759: monitorexit
            //     1760: goto -1608 -> 152
            //     1763: astore 39
            //     1765: aload 38
            //     1767: monitorexit
            //     1768: aload 39
            //     1770: athrow
            //     1771: aload_0
            //     1772: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1775: astore 32
            //     1777: aload 32
            //     1779: monitorenter
            //     1780: aload_1
            //     1781: getfield 203	android/os/Message:arg1	I
            //     1784: istore 34
            //     1786: aload_1
            //     1787: getfield 363	android/os/Message:arg2	I
            //     1790: iconst_1
            //     1791: if_icmpne +51 -> 1842
            //     1794: iconst_1
            //     1795: istore 35
            //     1797: aload_1
            //     1798: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     1801: checkcast 365	java/lang/String
            //     1804: astore 36
            //     1806: aload_0
            //     1807: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1810: aload 36
            //     1812: iload 34
            //     1814: iload 35
            //     1816: iconst_0
            //     1817: iconst_1
            //     1818: iconst_0
            //     1819: iload 34
            //     1821: invokestatic 371	android/os/UserId:getUserId	(I)I
            //     1824: invokestatic 375	com/android/server/am/ActivityManagerService:access$300	(Lcom/android/server/am/ActivityManagerService;Ljava/lang/String;IZZZZI)Z
            //     1827: pop
            //     1828: aload 32
            //     1830: monitorexit
            //     1831: goto -1679 -> 152
            //     1834: astore 33
            //     1836: aload 32
            //     1838: monitorexit
            //     1839: aload 33
            //     1841: athrow
            //     1842: iconst_0
            //     1843: istore 35
            //     1845: goto -48 -> 1797
            //     1848: aload_1
            //     1849: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     1852: checkcast 377	com/android/server/am/PendingIntentRecord
            //     1855: invokevirtual 380	com/android/server/am/PendingIntentRecord:completeFinalize	()V
            //     1858: goto -1706 -> 152
            //     1861: invokestatic 386	android/app/NotificationManager:getService	()Landroid/app/INotificationManager;
            //     1864: astore 19
            //     1866: aload 19
            //     1868: ifnull -1716 -> 152
            //     1871: aload_1
            //     1872: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     1875: checkcast 152	com/android/server/am/ActivityRecord
            //     1878: astore 20
            //     1880: aload 20
            //     1882: getfield 389	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
            //     1885: astore 21
            //     1887: aload 21
            //     1889: ifnull -1737 -> 152
            //     1892: aload_0
            //     1893: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1896: getfield 104	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
            //     1899: aload 21
            //     1901: getfield 268	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
            //     1904: getfield 392	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
            //     1907: iconst_0
            //     1908: invokevirtual 396	android/content/Context:createPackageContext	(Ljava/lang/String;I)Landroid/content/Context;
            //     1911: astore 24
            //     1913: aload_0
            //     1914: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     1917: getfield 104	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
            //     1920: astore 25
            //     1922: iconst_1
            //     1923: anewarray 398	java/lang/Object
            //     1926: astore 26
            //     1928: aload 26
            //     1930: iconst_0
            //     1931: aload 24
            //     1933: invokevirtual 402	android/content/Context:getApplicationInfo	()Landroid/content/pm/ApplicationInfo;
            //     1936: aload 24
            //     1938: invokevirtual 406	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
            //     1941: invokevirtual 410	android/content/pm/ApplicationInfo:loadLabel	(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;
            //     1944: aastore
            //     1945: aload 25
            //     1947: ldc_w 411
            //     1950: aload 26
            //     1952: invokevirtual 415	android/content/Context:getString	(I[Ljava/lang/Object;)Ljava/lang/String;
            //     1955: astore 27
            //     1957: new 417	android/app/Notification
            //     1960: dup
            //     1961: invokespecial 418	android/app/Notification:<init>	()V
            //     1964: astore 28
            //     1966: aload 28
            //     1968: ldc_w 419
            //     1971: putfield 422	android/app/Notification:icon	I
            //     1974: aload 28
            //     1976: lconst_0
            //     1977: putfield 426	android/app/Notification:when	J
            //     1980: aload 28
            //     1982: iconst_2
            //     1983: putfield 429	android/app/Notification:flags	I
            //     1986: aload 28
            //     1988: aload 27
            //     1990: putfield 433	android/app/Notification:tickerText	Ljava/lang/CharSequence;
            //     1993: aload 28
            //     1995: iconst_0
            //     1996: putfield 436	android/app/Notification:defaults	I
            //     1999: aload 28
            //     2001: aconst_null
            //     2002: putfield 440	android/app/Notification:sound	Landroid/net/Uri;
            //     2005: aload 28
            //     2007: aconst_null
            //     2008: putfield 444	android/app/Notification:vibrate	[J
            //     2011: aload 28
            //     2013: aload 24
            //     2015: aload 27
            //     2017: aload_0
            //     2018: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2021: getfield 104	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
            //     2024: ldc_w 445
            //     2027: invokevirtual 449	android/content/Context:getText	(I)Ljava/lang/CharSequence;
            //     2030: aload_0
            //     2031: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2034: getfield 104	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
            //     2037: iconst_0
            //     2038: aload 20
            //     2040: getfield 453	com/android/server/am/ActivityRecord:intent	Landroid/content/Intent;
            //     2043: ldc_w 454
            //     2046: invokestatic 460	android/app/PendingIntent:getActivity	(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;
            //     2049: invokevirtual 464	android/app/Notification:setLatestEventInfo	(Landroid/content/Context;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/app/PendingIntent;)V
            //     2052: aload 19
            //     2054: ldc_w 466
            //     2057: ldc_w 411
            //     2060: aload 28
            //     2062: iconst_1
            //     2063: newarray int
            //     2065: invokeinterface 472 5 0
            //     2070: goto -1918 -> 152
            //     2073: astore 30
            //     2075: ldc 55
            //     2077: ldc_w 474
            //     2080: aload 30
            //     2082: invokestatic 477	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
            //     2085: pop
            //     2086: goto -1934 -> 152
            //     2089: astore 22
            //     2091: ldc 55
            //     2093: ldc_w 479
            //     2096: aload 22
            //     2098: invokestatic 477	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
            //     2101: pop
            //     2102: goto -1950 -> 152
            //     2105: invokestatic 386	android/app/NotificationManager:getService	()Landroid/app/INotificationManager;
            //     2108: astore 15
            //     2110: aload 15
            //     2112: ifnull -1960 -> 152
            //     2115: aload 15
            //     2117: ldc_w 466
            //     2120: ldc_w 411
            //     2123: invokeinterface 483 3 0
            //     2128: goto -1976 -> 152
            //     2131: astore 17
            //     2133: ldc 55
            //     2135: ldc_w 485
            //     2138: aload 17
            //     2140: invokestatic 477	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
            //     2143: pop
            //     2144: goto -1992 -> 152
            //     2147: aload_0
            //     2148: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2151: astore 12
            //     2153: aload 12
            //     2155: monitorenter
            //     2156: aload_0
            //     2157: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2160: iconst_1
            //     2161: invokevirtual 488	com/android/server/am/ActivityManagerService:checkExcessivePowerUsageLocked	(Z)V
            //     2164: aload_0
            //     2165: bipush 27
            //     2167: invokevirtual 491	com/android/server/am/ActivityManagerService$2:removeMessages	(I)V
            //     2170: aload_0
            //     2171: aload_0
            //     2172: bipush 27
            //     2174: invokevirtual 492	com/android/server/am/ActivityManagerService$2:obtainMessage	(I)Landroid/os/Message;
            //     2177: ldc2_w 493
            //     2180: invokevirtual 495	com/android/server/am/ActivityManagerService$2:sendMessageDelayed	(Landroid/os/Message;J)Z
            //     2183: pop
            //     2184: aload 12
            //     2186: monitorexit
            //     2187: goto -2035 -> 152
            //     2190: astore 13
            //     2192: aload 12
            //     2194: monitorexit
            //     2195: aload 13
            //     2197: athrow
            //     2198: aload_0
            //     2199: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2202: astore 9
            //     2204: aload 9
            //     2206: monitorenter
            //     2207: aload_1
            //     2208: getfield 39	android/os/Message:obj	Ljava/lang/Object;
            //     2211: checkcast 152	com/android/server/am/ActivityRecord
            //     2214: astore 11
            //     2216: aload_0
            //     2217: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2220: getfield 499	com/android/server/am/ActivityManagerService:mCompatModeDialog	Lcom/android/server/am/CompatModeDialog;
            //     2223: ifnull +206 -> 2429
            //     2226: aload_0
            //     2227: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2230: getfield 499	com/android/server/am/ActivityManagerService:mCompatModeDialog	Lcom/android/server/am/CompatModeDialog;
            //     2233: getfield 504	com/android/server/am/CompatModeDialog:mAppInfo	Landroid/content/pm/ApplicationInfo;
            //     2236: getfield 392	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
            //     2239: aload 11
            //     2241: getfield 507	com/android/server/am/ActivityRecord:info	Landroid/content/pm/ActivityInfo;
            //     2244: getfield 512	android/content/pm/ActivityInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
            //     2247: getfield 392	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
            //     2250: invokevirtual 516	java/lang/String:equals	(Ljava/lang/Object;)Z
            //     2253: ifeq +17 -> 2270
            //     2256: aload 9
            //     2258: monitorexit
            //     2259: goto -2107 -> 152
            //     2262: astore 10
            //     2264: aload 9
            //     2266: monitorexit
            //     2267: aload 10
            //     2269: athrow
            //     2270: aload_0
            //     2271: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2274: getfield 499	com/android/server/am/ActivityManagerService:mCompatModeDialog	Lcom/android/server/am/CompatModeDialog;
            //     2277: invokevirtual 517	com/android/server/am/CompatModeDialog:dismiss	()V
            //     2280: aload_0
            //     2281: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2284: aconst_null
            //     2285: putfield 499	com/android/server/am/ActivityManagerService:mCompatModeDialog	Lcom/android/server/am/CompatModeDialog;
            //     2288: goto +141 -> 2429
            //     2291: aload 9
            //     2293: monitorexit
            //     2294: goto -2142 -> 152
            //     2297: aload_0
            //     2298: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2301: invokestatic 520	com/android/server/am/ActivityManagerService:access$400	(Lcom/android/server/am/ActivityManagerService;)V
            //     2304: goto -2152 -> 152
            //     2307: aload_1
            //     2308: getfield 203	android/os/Message:arg1	I
            //     2311: istore 7
            //     2313: aload_1
            //     2314: getfield 363	android/os/Message:arg2	I
            //     2317: istore 8
            //     2319: aload_0
            //     2320: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2323: iload 7
            //     2325: iload 8
            //     2327: invokestatic 524	com/android/server/am/ActivityManagerService:access$500	(Lcom/android/server/am/ActivityManagerService;II)V
            //     2330: goto -2178 -> 152
            //     2333: ldc_w 526
            //     2336: ldc_w 528
            //     2339: ldc_w 530
            //     2342: invokestatic 535	android/os/SystemProperties:get	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
            //     2345: invokevirtual 516	java/lang/String:equals	(Ljava/lang/Object;)Z
            //     2348: ifeq -2196 -> 152
            //     2351: aload_0
            //     2352: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2355: astore_2
            //     2356: aload_2
            //     2357: monitorenter
            //     2358: invokestatic 541	android/os/SystemClock:uptimeMillis	()J
            //     2361: lstore 4
            //     2363: lload 4
            //     2365: ldc2_w 542
            //     2368: aload_0
            //     2369: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2372: getfield 546	com/android/server/am/ActivityManagerService:mLastMemUsageReportTime	J
            //     2375: ladd
            //     2376: lcmp
            //     2377: ifge +13 -> 2390
            //     2380: aload_2
            //     2381: monitorexit
            //     2382: goto -2230 -> 152
            //     2385: astore_3
            //     2386: aload_2
            //     2387: monitorexit
            //     2388: aload_3
            //     2389: athrow
            //     2390: aload_0
            //     2391: getfield 14	com/android/server/am/ActivityManagerService$2:this$0	Lcom/android/server/am/ActivityManagerService;
            //     2394: lload 4
            //     2396: putfield 546	com/android/server/am/ActivityManagerService:mLastMemUsageReportTime	J
            //     2399: aload_2
            //     2400: monitorexit
            //     2401: new 6	com/android/server/am/ActivityManagerService$2$1
            //     2404: dup
            //     2405: aload_0
            //     2406: invokespecial 549	com/android/server/am/ActivityManagerService$2$1:<init>	(Lcom/android/server/am/ActivityManagerService$2;)V
            //     2409: astore 6
            //     2411: aload 6
            //     2413: invokevirtual 554	java/lang/Thread:start	()V
            //     2416: goto -2264 -> 152
            //     2419: astore 16
            //     2421: goto -2269 -> 152
            //     2424: astore 29
            //     2426: goto -2274 -> 152
            //     2429: aload 11
            //     2431: ifnull -140 -> 2291
            //     2434: goto -143 -> 2291
            //
            // Exception table:
            //     from	to	target	type
            //     171	233	228	finally
            //     236	325	228	finally
            //     335	341	228	finally
            //     353	424	419	finally
            //     427	540	419	finally
            //     550	560	419	finally
            //     581	617	612	finally
            //     620	737	612	finally
            //     747	753	612	finally
            //     829	847	842	finally
            //     859	934	929	finally
            //     937	959	929	finally
            //     1097	1107	1113	android/os/RemoteException
            //     1048	1092	1151	finally
            //     1097	1107	1151	finally
            //     1115	1156	1151	finally
            //     1159	1162	1151	finally
            //     1223	1233	1239	android/os/RemoteException
            //     1174	1218	1277	finally
            //     1223	1233	1277	finally
            //     1241	1282	1277	finally
            //     1285	1288	1277	finally
            //     1402	1418	1424	android/os/RemoteException
            //     1353	1397	1462	finally
            //     1402	1418	1462	finally
            //     1426	1467	1462	finally
            //     1470	1473	1462	finally
            //     1717	1737	1732	finally
            //     1749	1768	1763	finally
            //     1780	1839	1834	finally
            //     2052	2070	2073	java/lang/RuntimeException
            //     1892	2052	2089	android/content/pm/PackageManager$NameNotFoundException
            //     2052	2070	2089	android/content/pm/PackageManager$NameNotFoundException
            //     2075	2086	2089	android/content/pm/PackageManager$NameNotFoundException
            //     2115	2128	2131	java/lang/RuntimeException
            //     2156	2195	2190	finally
            //     2207	2267	2262	finally
            //     2270	2294	2262	finally
            //     2358	2388	2385	finally
            //     2390	2401	2385	finally
            //     2115	2128	2419	android/os/RemoteException
            //     2052	2070	2424	android/os/RemoteException
        }
    };
    private final boolean mHeadless;
    ProcessRecord mHeavyWeightProcess = null;
    ProcessRecord mHomeProcess;
    final HashMap<PendingIntentRecord.Key, WeakReference<PendingIntentRecord>> mIntentSenderRecords = new HashMap();
    final SparseArray<ProcessRecord> mIsolatedProcesses = new SparseArray();
    final AtomicLong mLastCpuTime = new AtomicLong(0L);
    long mLastMemUsageReportTime = 0L;
    long mLastPowerCheckRealtime;
    long mLastPowerCheckUptime;
    long mLastWriteTime = 0L;
    boolean mLaunchWarningShown = false;
    final ArrayList<ContentProviderRecord> mLaunchingProviders = new ArrayList();
    boolean mLockScreenShown = false;
    private SparseIntArray mLoggedInUsers = new SparseIntArray(5);
    final ArrayList<ProcessRecord> mLruProcesses = new ArrayList();
    int mLruSeq = 0;
    public ActivityStack mMainStack;
    int mNewNumServiceProcs = 0;
    int mNextIsolatedProcessUid = 0;
    int mNumServiceProcs = 0;
    boolean mOnBattery = false;
    String mOpenGlTraceApp = null;
    String mOrigDebugApp = null;
    boolean mOrigWaitForDebugger = false;
    final ArrayList<PendingActivityLaunch> mPendingActivityLaunches = new ArrayList();
    final ArrayList<ProcessChangeItem> mPendingProcessChanges = new ArrayList();
    final HashSet mPendingResultRecords = new HashSet();
    final ArrayList<ServiceRecord> mPendingServices = new ArrayList();
    final ArrayList mPendingThumbnails = new ArrayList();
    final ArrayList<ProcessRecord> mPersistentStartingProcesses = new ArrayList();
    final SparseArray<ProcessRecord> mPidsSelfLocked = new SparseArray();
    ProcessRecord mPreviousProcess;
    long mPreviousProcessVisibleTime;
    int[] mProcDeaths = new int[20];
    final ProcessMap<Long> mProcessCrashTimes = new ProcessMap();
    int mProcessLimit = 15;
    int mProcessLimitOverride = -1;
    final ProcessList mProcessList = new ProcessList();
    final ProcessMap<ProcessRecord> mProcessNames = new ProcessMap();
    final RemoteCallbackList<IProcessObserver> mProcessObservers = new RemoteCallbackList();
    final ProcessStats mProcessStats = new ProcessStats(false);
    final AtomicBoolean mProcessStatsMutexFree = new AtomicBoolean(true);
    final Thread mProcessStatsThread;
    final ArrayList<ProcessRecord> mProcessesOnHold = new ArrayList();
    boolean mProcessesReady = false;
    final ArrayList<ProcessRecord> mProcessesToGc = new ArrayList();
    String mProfileApp = null;
    ParcelFileDescriptor mProfileFd;
    String mProfileFile;
    ProcessRecord mProfileProc = null;
    int mProfileType = 0;
    final ProviderMap mProviderMap = new ProviderMap();
    final IntentResolver<BroadcastFilter, BroadcastFilter> mReceiverResolver = new IntentResolver()
    {
        protected boolean allowFilterResult(BroadcastFilter paramAnonymousBroadcastFilter, List<BroadcastFilter> paramAnonymousList)
        {
            IBinder localIBinder = paramAnonymousBroadcastFilter.receiverList.receiver.asBinder();
            int i = -1 + paramAnonymousList.size();
            if (i >= 0)
                if (((BroadcastFilter)paramAnonymousList.get(i)).receiverList.receiver.asBinder() != localIBinder);
            for (boolean bool = false; ; bool = true)
            {
                return bool;
                i--;
                break;
            }
        }

        protected String packageForFilter(BroadcastFilter paramAnonymousBroadcastFilter)
        {
            return paramAnonymousBroadcastFilter.packageName;
        }
    };
    final ArrayList<TaskRecord> mRecentTasks = new ArrayList();
    final HashMap mRegisteredReceivers = new HashMap();
    final ArrayList<ProcessRecord> mRemovedProcesses = new ArrayList();
    Runnable mRequestPssCallback;
    final ArrayList<ProcessRecord> mRequestPssList = new ArrayList();
    final ArrayList<ServiceRecord> mRestartingServices = new ArrayList();
    final HashMap<IBinder, ArrayList<ConnectionRecord>> mServiceConnections = new HashMap();
    final ServiceMap mServiceMap = new ServiceMap();
    private boolean mShowDialogs = true;
    boolean mShuttingDown = false;
    boolean mSleeping = false;
    boolean mStartRunning = false;
    final HashMap<String, ArrayList<Intent>> mStickyBroadcasts = new HashMap();
    final ArrayList<ServiceRecord> mStoppingServices = new ArrayList();
    private final StringBuilder mStrictModeBuffer = new StringBuilder();
    final StringBuilder mStringBuilder = new StringBuilder(256);
    boolean mSystemReady = false;
    String mTopAction;
    ComponentName mTopComponent;
    String mTopData;
    AlertDialog mUidAlert;
    final UsageStatsService mUsageStatsService;
    boolean mWaitForDebugger = false;
    boolean mWaitingUpdate = false;
    boolean mWentToSleep = false;
    WindowManagerService mWindowManager;

    static
    {
        EMPTY_STRING_ARRAY = new String[0];
        sCallerIdentity = new ThreadLocal();
        long[] arrayOfLong = new long[23];
        arrayOfLong[0] = 5120L;
        arrayOfLong[1] = 7168L;
        arrayOfLong[2] = 10240L;
        arrayOfLong[3] = 15360L;
        arrayOfLong[4] = 20480L;
        arrayOfLong[5] = 30720L;
        arrayOfLong[6] = 40960L;
        arrayOfLong[7] = 81920L;
        arrayOfLong[8] = 122880L;
        arrayOfLong[9] = 163840L;
        arrayOfLong[10] = 204800L;
        arrayOfLong[11] = 256000L;
        arrayOfLong[12] = 307200L;
        arrayOfLong[13] = 358400L;
        arrayOfLong[14] = 409600L;
        arrayOfLong[15] = 512000L;
        arrayOfLong[16] = 614400L;
        arrayOfLong[17] = 819200L;
        arrayOfLong[18] = 1048576L;
        arrayOfLong[19] = 2097152L;
        arrayOfLong[20] = 5242880L;
        arrayOfLong[21] = 10485760L;
        arrayOfLong[22] = 20971520L;
        DUMP_MEM_BUCKETS = arrayOfLong;
        int[] arrayOfInt = new int[12];
        arrayOfInt[0] = -16;
        arrayOfInt[1] = -12;
        arrayOfInt[2] = 0;
        arrayOfInt[3] = 1;
        arrayOfInt[4] = 2;
        arrayOfInt[5] = 3;
        arrayOfInt[6] = 4;
        arrayOfInt[7] = 5;
        arrayOfInt[8] = 6;
        arrayOfInt[9] = 7;
        arrayOfInt[10] = 8;
        arrayOfInt[11] = 15;
        DUMP_MEM_OOM_ADJ = arrayOfInt;
        String[] arrayOfString = new String[12];
        arrayOfString[0] = "System";
        arrayOfString[1] = "Persistent";
        arrayOfString[2] = "Foreground";
        arrayOfString[3] = "Visible";
        arrayOfString[4] = "Perceptible";
        arrayOfString[5] = "Heavy Weight";
        arrayOfString[6] = "Backup";
        arrayOfString[7] = "A Services";
        arrayOfString[8] = "Home";
        arrayOfString[9] = "Previous";
        arrayOfString[10] = "B Services";
        arrayOfString[11] = "Background";
    }

    @MiuiHook(MiuiHook.MiuiHookType.CHANGE_CODE)
    private ActivityManagerService()
    {
        Slog.i("ActivityManager", "Memory class: " + ActivityManager.staticGetMemoryClass());
        this.mFgBroadcastQueue = new BroadcastQueue(this, "foreground", 10000L);
        this.mBgBroadcastQueue = new BroadcastQueue(this, "background", 60000L);
        this.mBroadcastQueues[0] = this.mFgBroadcastQueue;
        this.mBroadcastQueues[1] = this.mBgBroadcastQueue;
        File localFile1 = android.os.Environment.getDataDirectory();
        File localFile2 = new File(localFile1, "system");
        localFile2.mkdirs();
        miui.os.Environment.init(localFile2, localFile1);
        this.mBatteryStatsService = new BatteryStatsService(new File(localFile2, "batterystats.bin").toString());
        this.mBatteryStatsService.getActiveStatistics().readLocked();
        this.mBatteryStatsService.getActiveStatistics().writeAsyncLocked();
        this.mOnBattery = this.mBatteryStatsService.getActiveStatistics().getIsOnBattery();
        this.mBatteryStatsService.getActiveStatistics().setCallback(this);
        this.mUsageStatsService = new UsageStatsService(new File(localFile2, "usagestats").toString());
        this.mHeadless = "1".equals(SystemProperties.get("ro.config.headless", "0"));
        this.GL_ES_VERSION = SystemProperties.getInt("ro.opengles.version", 0);
        this.mConfiguration.setToDefaults();
        this.mConfiguration.locale = Locale.getDefault();
        this.mConfiguration.seq = 1;
        this.mConfigurationSeq = 1;
        this.mProcessStats.init();
        this.mCompatModePackages = new CompatModePackages(this, localFile2);
        Watchdog.getInstance().addMonitor(this);
        this.mProcessStatsThread = new Thread("ProcessStats")
        {
            public void run()
            {
                try
                {
                }
                catch (Exception localException)
                {
                    try
                    {
                        while (true)
                        {
                            long l1 = SystemClock.uptimeMillis();
                            long l2 = 268435455L + ActivityManagerService.this.mLastCpuTime.get() - l1;
                            long l3 = 1800000L + ActivityManagerService.this.mLastWriteTime - l1;
                            if (l3 < l2)
                                l2 = l3;
                            if (l2 > 0L)
                            {
                                ActivityManagerService.this.mProcessStatsMutexFree.set(true);
                                wait(l2);
                            }
                            ActivityManagerService.this.updateCpuStatsNow();
                            continue;
                            localException = localException;
                            Slog.e("ActivityManager", "Unexpected exception collecting process stats", localException);
                        }
                    }
                    finally
                    {
                    }
                }
                catch (InterruptedException localInterruptedException)
                {
                    label80: break label80;
                }
            }
        };
        this.mProcessStatsThread.start();
    }

    // ERROR //
    private void appendDropBoxProcessHeaders(ProcessRecord paramProcessRecord, String paramString, StringBuilder paramStringBuilder)
    {
        // Byte code:
        //     0: aload_1
        //     1: ifnonnull +22 -> 23
        //     4: aload_3
        //     5: ldc_w 978
        //     8: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     11: aload_2
        //     12: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     15: ldc_w 980
        //     18: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     21: pop
        //     22: return
        //     23: aload_0
        //     24: monitorenter
        //     25: aload_3
        //     26: ldc_w 978
        //     29: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     32: aload_2
        //     33: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     36: ldc_w 980
        //     39: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     42: pop
        //     43: aload_1
        //     44: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     47: getfield 991	android/content/pm/ApplicationInfo:flags	I
        //     50: istore 6
        //     52: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     55: astore 7
        //     57: aload_3
        //     58: ldc_w 999
        //     61: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     64: iload 6
        //     66: bipush 16
        //     68: invokestatic 1004	java/lang/Integer:toString	(II)Ljava/lang/String;
        //     71: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     74: ldc_w 980
        //     77: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     80: pop
        //     81: aload_1
        //     82: getfield 1007	com/android/server/am/ProcessRecord:pkgList	Ljava/util/HashSet;
        //     85: invokevirtual 1011	java/util/HashSet:iterator	()Ljava/util/Iterator;
        //     88: astore 9
        //     90: aload 9
        //     92: invokeinterface 1016 1 0
        //     97: ifeq +144 -> 241
        //     100: aload 9
        //     102: invokeinterface 1020 1 0
        //     107: checkcast 428	java/lang/String
        //     110: astore 10
        //     112: aload_3
        //     113: ldc_w 1022
        //     116: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     119: aload 10
        //     121: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     124: pop
        //     125: aload 7
        //     127: aload 10
        //     129: iconst_0
        //     130: iconst_0
        //     131: invokeinterface 1028 4 0
        //     136: astore 15
        //     138: aload 15
        //     140: ifnull +49 -> 189
        //     143: aload_3
        //     144: ldc_w 1030
        //     147: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     150: aload 15
        //     152: getfield 1035	android/content/pm/PackageInfo:versionCode	I
        //     155: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     158: pop
        //     159: aload 15
        //     161: getfield 1038	android/content/pm/PackageInfo:versionName	Ljava/lang/String;
        //     164: ifnull +25 -> 189
        //     167: aload_3
        //     168: ldc_w 1040
        //     171: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     174: aload 15
        //     176: getfield 1038	android/content/pm/PackageInfo:versionName	Ljava/lang/String;
        //     179: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     182: ldc_w 1042
        //     185: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     188: pop
        //     189: aload_3
        //     190: ldc_w 980
        //     193: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     196: pop
        //     197: goto -107 -> 90
        //     200: astore 4
        //     202: aload_0
        //     203: monitorexit
        //     204: aload 4
        //     206: athrow
        //     207: astore 12
        //     209: ldc 221
        //     211: new 598	java/lang/StringBuilder
        //     214: dup
        //     215: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     218: ldc_w 1044
        //     221: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     224: aload 10
        //     226: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     229: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     232: aload 12
        //     234: invokestatic 1048	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     237: pop
        //     238: goto -49 -> 189
        //     241: aload_0
        //     242: monitorexit
        //     243: goto -221 -> 22
        //
        // Exception table:
        //     from	to	target	type
        //     25	125	200	finally
        //     125	189	200	finally
        //     189	204	200	finally
        //     209	243	200	finally
        //     125	189	207	android/os/RemoteException
    }

    static final void appendMemBucket(StringBuilder paramStringBuilder, long paramLong, String paramString, boolean paramBoolean)
    {
        int i = paramString.lastIndexOf('.');
        int j;
        int k;
        if (i >= 0)
        {
            j = i + 1;
            k = paramString.length();
        }
        for (int m = 0; ; m++)
        {
            if (m >= DUMP_MEM_BUCKETS.length)
                break label111;
            if (DUMP_MEM_BUCKETS[m] >= paramLong)
            {
                paramStringBuilder.append(DUMP_MEM_BUCKETS[m] / 1024L);
                if (paramBoolean);
                for (String str2 = "MB."; ; str2 = "MB ")
                {
                    paramStringBuilder.append(str2);
                    paramStringBuilder.append(paramString, j, k);
                    return;
                    j = 0;
                    break;
                }
            }
        }
        label111: paramStringBuilder.append(paramLong / 1024L);
        if (paramBoolean);
        for (String str1 = "MB."; ; str1 = "MB ")
        {
            paramStringBuilder.append(str1);
            paramStringBuilder.append(paramString, j, k);
            break;
        }
    }

    private int applyUserId(int paramInt1, int paramInt2)
    {
        return UserId.getUid(paramInt2, paramInt1);
    }

    // ERROR //
    private final boolean attachApplicationLocked(IApplicationThread paramIApplicationThread, int paramInt)
    {
        // Byte code:
        //     0: iload_2
        //     1: getstatic 442	com/android/server/am/ActivityManagerService:MY_PID	I
        //     4: if_icmpeq +114 -> 118
        //     7: iload_2
        //     8: iflt +110 -> 118
        //     11: aload_0
        //     12: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     15: astore 56
        //     17: aload 56
        //     19: monitorenter
        //     20: aload_0
        //     21: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     24: iload_2
        //     25: invokevirtual 1083	android/util/SparseArray:get	(I)Ljava/lang/Object;
        //     28: checkcast 982	com/android/server/am/ProcessRecord
        //     31: astore_3
        //     32: aload 56
        //     34: monitorexit
        //     35: aload_3
        //     36: ifnonnull +101 -> 137
        //     39: ldc 221
        //     41: new 598	java/lang/StringBuilder
        //     44: dup
        //     45: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     48: ldc_w 1085
        //     51: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     54: iload_2
        //     55: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     58: ldc_w 1087
        //     61: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     64: aload_1
        //     65: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     68: ldc_w 1092
        //     71: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     74: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     77: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     80: pop
        //     81: sipush 30033
        //     84: iload_2
        //     85: invokestatic 1100	android/util/EventLog:writeEvent	(II)I
        //     88: pop
        //     89: iload_2
        //     90: ifle +33 -> 123
        //     93: iload_2
        //     94: getstatic 442	com/android/server/am/ActivityManagerService:MY_PID	I
        //     97: if_icmpeq +26 -> 123
        //     100: iload_2
        //     101: invokestatic 1103	android/os/Process:killProcessQuiet	(I)V
        //     104: iconst_0
        //     105: istore 7
        //     107: iload 7
        //     109: ireturn
        //     110: astore 57
        //     112: aload 56
        //     114: monitorexit
        //     115: aload 57
        //     117: athrow
        //     118: aconst_null
        //     119: astore_3
        //     120: goto -85 -> 35
        //     123: aload_1
        //     124: invokeinterface 1108 1 0
        //     129: goto -25 -> 104
        //     132: astore 55
        //     134: goto -30 -> 104
        //     137: aload_3
        //     138: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     141: ifnull +10 -> 151
        //     144: aload_0
        //     145: aload_3
        //     146: iconst_1
        //     147: iconst_1
        //     148: invokespecial 1116	com/android/server/am/ActivityManagerService:handleAppDiedLocked	(Lcom/android/server/am/ProcessRecord;ZZ)V
        //     151: aload_3
        //     152: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     155: astore 4
        //     157: new 74	com/android/server/am/ActivityManagerService$AppDeathRecipient
        //     160: dup
        //     161: aload_0
        //     162: aload_3
        //     163: iload_2
        //     164: aload_1
        //     165: invokespecial 1122	com/android/server/am/ActivityManagerService$AppDeathRecipient:<init>	(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;ILandroid/app/IApplicationThread;)V
        //     168: astore 5
        //     170: aload_1
        //     171: invokeinterface 1126 1 0
        //     176: aload 5
        //     178: iconst_0
        //     179: invokeinterface 1132 3 0
        //     184: aload_3
        //     185: aload 5
        //     187: putfield 1136	com/android/server/am/ProcessRecord:deathRecipient	Landroid/os/IBinder$DeathRecipient;
        //     190: iconst_2
        //     191: anewarray 1138	java/lang/Object
        //     194: astore 8
        //     196: aload 8
        //     198: iconst_0
        //     199: aload_3
        //     200: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     203: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     206: aastore
        //     207: aload 8
        //     209: iconst_1
        //     210: aload_3
        //     211: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     214: aastore
        //     215: sipush 30010
        //     218: aload 8
        //     220: invokestatic 1148	android/util/EventLog:writeEvent	(I[Ljava/lang/Object;)I
        //     223: pop
        //     224: aload_3
        //     225: aload_1
        //     226: putfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     229: aload_3
        //     230: bipush 156
        //     232: putfield 1151	com/android/server/am/ProcessRecord:setAdj	I
        //     235: aload_3
        //     236: bipush 156
        //     238: putfield 1154	com/android/server/am/ProcessRecord:curAdj	I
        //     241: aload_3
        //     242: bipush 255
        //     244: putfield 1157	com/android/server/am/ProcessRecord:curSchedGroup	I
        //     247: aload_3
        //     248: iconst_0
        //     249: putfield 1160	com/android/server/am/ProcessRecord:setSchedGroup	I
        //     252: aload_3
        //     253: aconst_null
        //     254: putfield 1164	com/android/server/am/ProcessRecord:forcingToForeground	Landroid/os/IBinder;
        //     257: aload_3
        //     258: iconst_0
        //     259: putfield 1167	com/android/server/am/ProcessRecord:foregroundServices	Z
        //     262: aload_3
        //     263: iconst_0
        //     264: putfield 1170	com/android/server/am/ProcessRecord:hasShownUi	Z
        //     267: aload_3
        //     268: iconst_0
        //     269: putfield 1173	com/android/server/am/ProcessRecord:debugging	Z
        //     272: aload_0
        //     273: getfield 755	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
        //     276: bipush 20
        //     278: aload_3
        //     279: invokevirtual 1179	android/os/Handler:removeMessages	(ILjava/lang/Object;)V
        //     282: aload_0
        //     283: getfield 654	com/android/server/am/ActivityManagerService:mProcessesReady	Z
        //     286: ifne +14 -> 300
        //     289: aload_0
        //     290: aload_3
        //     291: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     294: invokevirtual 1183	com/android/server/am/ActivityManagerService:isAllowedWhileBooting	(Landroid/content/pm/ApplicationInfo;)Z
        //     297: ifeq +694 -> 991
        //     300: iconst_1
        //     301: istore 10
        //     303: iload 10
        //     305: ifeq +692 -> 997
        //     308: aload_0
        //     309: aload_3
        //     310: invokespecial 1187	com/android/server/am/ActivityManagerService:generateApplicationProvidersLocked	(Lcom/android/server/am/ProcessRecord;)Ljava/util/List;
        //     313: astore 11
        //     315: iload 10
        //     317: ifne +29 -> 346
        //     320: ldc 221
        //     322: new 598	java/lang/StringBuilder
        //     325: dup
        //     326: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     329: ldc_w 1189
        //     332: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     335: aload_3
        //     336: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     339: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     342: invokestatic 784	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //     345: pop
        //     346: iconst_0
        //     347: istore 12
        //     349: aload_0
        //     350: getfield 688	com/android/server/am/ActivityManagerService:mDebugApp	Ljava/lang/String;
        //     353: ifnull +53 -> 406
        //     356: aload_0
        //     357: getfield 688	com/android/server/am/ActivityManagerService:mDebugApp	Ljava/lang/String;
        //     360: aload 4
        //     362: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     365: ifeq +41 -> 406
        //     368: aload_0
        //     369: getfield 690	com/android/server/am/ActivityManagerService:mWaitForDebugger	Z
        //     372: ifeq +631 -> 1003
        //     375: iconst_2
        //     376: istore 12
        //     378: aload_3
        //     379: iconst_1
        //     380: putfield 1173	com/android/server/am/ProcessRecord:debugging	Z
        //     383: aload_0
        //     384: getfield 692	com/android/server/am/ActivityManagerService:mDebugTransient	Z
        //     387: ifeq +19 -> 406
        //     390: aload_0
        //     391: aload_0
        //     392: getfield 694	com/android/server/am/ActivityManagerService:mOrigDebugApp	Ljava/lang/String;
        //     395: putfield 688	com/android/server/am/ActivityManagerService:mDebugApp	Ljava/lang/String;
        //     398: aload_0
        //     399: aload_0
        //     400: getfield 696	com/android/server/am/ActivityManagerService:mOrigWaitForDebugger	Z
        //     403: putfield 690	com/android/server/am/ActivityManagerService:mWaitForDebugger	Z
        //     406: aload_3
        //     407: getfield 1192	com/android/server/am/ProcessRecord:instrumentationProfileFile	Ljava/lang/String;
        //     410: astore 15
        //     412: aconst_null
        //     413: astore 16
        //     415: iconst_0
        //     416: istore 17
        //     418: aload_0
        //     419: getfield 702	com/android/server/am/ActivityManagerService:mProfileApp	Ljava/lang/String;
        //     422: ifnull +38 -> 460
        //     425: aload_0
        //     426: getfield 702	com/android/server/am/ActivityManagerService:mProfileApp	Ljava/lang/String;
        //     429: aload 4
        //     431: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     434: ifeq +26 -> 460
        //     437: aload_0
        //     438: aload_3
        //     439: putfield 704	com/android/server/am/ActivityManagerService:mProfileProc	Lcom/android/server/am/ProcessRecord;
        //     442: aload_0
        //     443: getfield 1194	com/android/server/am/ActivityManagerService:mProfileFile	Ljava/lang/String;
        //     446: astore 15
        //     448: aload_0
        //     449: getfield 1196	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
        //     452: astore 16
        //     454: aload_0
        //     455: getfield 708	com/android/server/am/ActivityManagerService:mAutoStopProfiler	Z
        //     458: istore 17
        //     460: iconst_0
        //     461: istore 18
        //     463: aload_0
        //     464: getfield 710	com/android/server/am/ActivityManagerService:mOpenGlTraceApp	Ljava/lang/String;
        //     467: ifnull +23 -> 490
        //     470: aload_0
        //     471: getfield 710	com/android/server/am/ActivityManagerService:mOpenGlTraceApp	Ljava/lang/String;
        //     474: aload 4
        //     476: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     479: ifeq +11 -> 490
        //     482: iconst_1
        //     483: istore 18
        //     485: aload_0
        //     486: aconst_null
        //     487: putfield 710	com/android/server/am/ActivityManagerService:mOpenGlTraceApp	Ljava/lang/String;
        //     490: iconst_0
        //     491: istore 19
        //     493: aload_0
        //     494: getfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     497: ifnull +51 -> 548
        //     500: aload_0
        //     501: getfield 623	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
        //     504: aload 4
        //     506: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     509: ifeq +39 -> 548
        //     512: aload_0
        //     513: getfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     516: getfield 1201	com/android/server/am/BackupRecord:backupMode	I
        //     519: iconst_2
        //     520: if_icmpeq +867 -> 1387
        //     523: aload_0
        //     524: getfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     527: getfield 1201	com/android/server/am/BackupRecord:backupMode	I
        //     530: iconst_3
        //     531: if_icmpeq +856 -> 1387
        //     534: aload_0
        //     535: getfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     538: getfield 1201	com/android/server/am/BackupRecord:backupMode	I
        //     541: iconst_1
        //     542: if_icmpne +467 -> 1009
        //     545: goto +842 -> 1387
        //     548: aload_3
        //     549: getfield 1204	com/android/server/am/ProcessRecord:instrumentationInfo	Landroid/content/pm/ApplicationInfo;
        //     552: ifnull +463 -> 1015
        //     555: aload_3
        //     556: getfield 1204	com/android/server/am/ProcessRecord:instrumentationInfo	Landroid/content/pm/ApplicationInfo;
        //     559: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     562: astore 20
        //     564: aload_0
        //     565: aload 20
        //     567: invokevirtual 1210	com/android/server/am/ActivityManagerService:ensurePackageDexOpt	(Ljava/lang/String;)V
        //     570: aload_3
        //     571: getfield 1213	com/android/server/am/ProcessRecord:instrumentationClass	Landroid/content/ComponentName;
        //     574: ifnull +14 -> 588
        //     577: aload_0
        //     578: aload_3
        //     579: getfield 1213	com/android/server/am/ProcessRecord:instrumentationClass	Landroid/content/ComponentName;
        //     582: invokevirtual 1218	android/content/ComponentName:getPackageName	()Ljava/lang/String;
        //     585: invokevirtual 1210	com/android/server/am/ActivityManagerService:ensurePackageDexOpt	(Ljava/lang/String;)V
        //     588: aload_3
        //     589: getfield 1204	com/android/server/am/ProcessRecord:instrumentationInfo	Landroid/content/pm/ApplicationInfo;
        //     592: ifnull +435 -> 1027
        //     595: aload_3
        //     596: getfield 1204	com/android/server/am/ProcessRecord:instrumentationInfo	Landroid/content/pm/ApplicationInfo;
        //     599: astore 21
        //     601: aload_0
        //     602: aload 21
        //     604: invokevirtual 1222	com/android/server/am/ActivityManagerService:compatibilityInfoForPackageLocked	(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/CompatibilityInfo;
        //     607: astore 22
        //     609: aload_3
        //     610: aload 22
        //     612: putfield 1226	com/android/server/am/ProcessRecord:compat	Landroid/content/res/CompatibilityInfo;
        //     615: aload 16
        //     617: ifnull +10 -> 627
        //     620: aload 16
        //     622: invokevirtual 1232	android/os/ParcelFileDescriptor:dup	()Landroid/os/ParcelFileDescriptor;
        //     625: astore 16
        //     627: aload_3
        //     628: getfield 1213	com/android/server/am/ProcessRecord:instrumentationClass	Landroid/content/ComponentName;
        //     631: astore 23
        //     633: aload_3
        //     634: getfield 1236	com/android/server/am/ProcessRecord:instrumentationArguments	Landroid/os/Bundle;
        //     637: astore 24
        //     639: aload_3
        //     640: getfield 1240	com/android/server/am/ProcessRecord:instrumentationWatcher	Landroid/app/IInstrumentationWatcher;
        //     643: astore 25
        //     645: iload 19
        //     647: ifne +746 -> 1393
        //     650: iload 10
        //     652: ifne +384 -> 1036
        //     655: goto +738 -> 1393
        //     658: aload_3
        //     659: getfield 1243	com/android/server/am/ProcessRecord:persistent	Z
        //     662: istore 27
        //     664: new 640	android/content/res/Configuration
        //     667: dup
        //     668: aload_0
        //     669: getfield 643	com/android/server/am/ActivityManagerService:mConfiguration	Landroid/content/res/Configuration;
        //     672: invokespecial 1246	android/content/res/Configuration:<init>	(Landroid/content/res/Configuration;)V
        //     675: astore 28
        //     677: aload_1
        //     678: aload 4
        //     680: aload 21
        //     682: aload 11
        //     684: aload 23
        //     686: aload 15
        //     688: aload 16
        //     690: iload 17
        //     692: aload 24
        //     694: aload 25
        //     696: iload 12
        //     698: iload 18
        //     700: iload 26
        //     702: iload 27
        //     704: aload 28
        //     706: aload_3
        //     707: getfield 1226	com/android/server/am/ProcessRecord:compat	Landroid/content/res/CompatibilityInfo;
        //     710: aload_0
        //     711: invokespecial 1250	com/android/server/am/ActivityManagerService:getCommonServicesLocked	()Ljava/util/HashMap;
        //     714: aload_0
        //     715: getfield 1252	com/android/server/am/ActivityManagerService:mCoreSettingsObserver	Lcom/android/server/am/CoreSettingsObserver;
        //     718: invokevirtual 1258	com/android/server/am/CoreSettingsObserver:getCoreSettingsLocked	()Landroid/os/Bundle;
        //     721: invokeinterface 1262 18 0
        //     726: aload_0
        //     727: aload_3
        //     728: iconst_0
        //     729: iconst_1
        //     730: invokevirtual 1265	com/android/server/am/ActivityManagerService:updateLruProcessLocked	(Lcom/android/server/am/ProcessRecord;ZZ)V
        //     733: invokestatic 1271	android/os/SystemClock:uptimeMillis	()J
        //     736: lstore 29
        //     738: aload_3
        //     739: lload 29
        //     741: putfield 1274	com/android/server/am/ProcessRecord:lastLowMemory	J
        //     744: aload_3
        //     745: lload 29
        //     747: putfield 1277	com/android/server/am/ProcessRecord:lastRequestedGc	J
        //     750: aload_0
        //     751: getfield 578	com/android/server/am/ActivityManagerService:mPersistentStartingProcesses	Ljava/util/ArrayList;
        //     754: aload_3
        //     755: invokevirtual 1280	java/util/ArrayList:remove	(Ljava/lang/Object;)Z
        //     758: pop
        //     759: aload_0
        //     760: getfield 576	com/android/server/am/ActivityManagerService:mProcessesOnHold	Ljava/util/ArrayList;
        //     763: aload_3
        //     764: invokevirtual 1280	java/util/ArrayList:remove	(Ljava/lang/Object;)Z
        //     767: pop
        //     768: iconst_0
        //     769: istore 33
        //     771: iconst_0
        //     772: istore 34
        //     774: aload_0
        //     775: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     778: aconst_null
        //     779: invokevirtual 1288	com/android/server/am/ActivityStack:topRunningActivityLocked	(Lcom/android/server/am/ActivityRecord;)Lcom/android/server/am/ActivityRecord;
        //     782: astore 35
        //     784: aload 35
        //     786: ifnull +81 -> 867
        //     789: iload 10
        //     791: ifeq +76 -> 867
        //     794: aload 35
        //     796: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     799: ifnonnull +351 -> 1150
        //     802: aload_3
        //     803: getfield 1296	com/android/server/am/ProcessRecord:uid	I
        //     806: aload 35
        //     808: getfield 1299	com/android/server/am/ActivityRecord:info	Landroid/content/pm/ActivityInfo;
        //     811: getfield 1304	android/content/pm/ActivityInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     814: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     817: if_icmpne +333 -> 1150
        //     820: aload 4
        //     822: aload 35
        //     824: getfield 1306	com/android/server/am/ActivityRecord:processName	Ljava/lang/String;
        //     827: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     830: ifeq +320 -> 1150
        //     833: aload_0
        //     834: getfield 872	com/android/server/am/ActivityManagerService:mHeadless	Z
        //     837: ifeq +242 -> 1079
        //     840: ldc 221
        //     842: new 598	java/lang/StringBuilder
        //     845: dup
        //     846: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     849: ldc_w 1308
        //     852: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     855: aload 35
        //     857: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     860: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     863: invokestatic 1310	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
        //     866: pop
        //     867: iload 33
        //     869: ifne +360 -> 1229
        //     872: aload_0
        //     873: getfield 617	com/android/server/am/ActivityManagerService:mPendingServices	Ljava/util/ArrayList;
        //     876: invokevirtual 1313	java/util/ArrayList:size	()I
        //     879: ifle +350 -> 1229
        //     882: aconst_null
        //     883: astore 40
        //     885: iconst_0
        //     886: istore 41
        //     888: aload_0
        //     889: getfield 617	com/android/server/am/ActivityManagerService:mPendingServices	Ljava/util/ArrayList;
        //     892: invokevirtual 1313	java/util/ArrayList:size	()I
        //     895: istore 44
        //     897: iload 41
        //     899: iload 44
        //     901: if_icmpge +328 -> 1229
        //     904: aload_0
        //     905: getfield 617	com/android/server/am/ActivityManagerService:mPendingServices	Ljava/util/ArrayList;
        //     908: iload 41
        //     910: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     913: checkcast 1316	com/android/server/am/ServiceRecord
        //     916: astore 40
        //     918: aload 40
        //     920: getfield 1319	com/android/server/am/ServiceRecord:isolatedProc	Lcom/android/server/am/ProcessRecord;
        //     923: astore 45
        //     925: aload_3
        //     926: aload 45
        //     928: if_acmpeq +238 -> 1166
        //     931: aload_3
        //     932: getfield 1296	com/android/server/am/ProcessRecord:uid	I
        //     935: aload 40
        //     937: getfield 1322	com/android/server/am/ServiceRecord:appInfo	Landroid/content/pm/ApplicationInfo;
        //     940: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     943: if_icmpne +20 -> 963
        //     946: aload 4
        //     948: aload 40
        //     950: getfield 1323	com/android/server/am/ServiceRecord:processName	Ljava/lang/String;
        //     953: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     956: istore 47
        //     958: iload 47
        //     960: ifne +206 -> 1166
        //     963: iinc 41 1
        //     966: goto -78 -> 888
        //     969: astore 6
        //     971: aload_3
        //     972: invokevirtual 1326	com/android/server/am/ProcessRecord:resetPackageList	()V
        //     975: aload_0
        //     976: aload_3
        //     977: ldc_w 1328
        //     980: aload 4
        //     982: invokespecial 1332	com/android/server/am/ActivityManagerService:startProcessLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;)V
        //     985: iconst_0
        //     986: istore 7
        //     988: goto -881 -> 107
        //     991: iconst_0
        //     992: istore 10
        //     994: goto -691 -> 303
        //     997: aconst_null
        //     998: astore 11
        //     1000: goto -685 -> 315
        //     1003: iconst_1
        //     1004: istore 12
        //     1006: goto -628 -> 378
        //     1009: iconst_0
        //     1010: istore 19
        //     1012: goto -464 -> 548
        //     1015: aload_3
        //     1016: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     1019: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     1022: astore 20
        //     1024: goto -460 -> 564
        //     1027: aload_3
        //     1028: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     1031: astore 21
        //     1033: goto -432 -> 601
        //     1036: iconst_0
        //     1037: istore 26
        //     1039: goto -381 -> 658
        //     1042: astore 13
        //     1044: ldc 221
        //     1046: ldc_w 1334
        //     1049: aload 13
        //     1051: invokestatic 1336	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     1054: pop
        //     1055: aload_3
        //     1056: invokevirtual 1326	com/android/server/am/ProcessRecord:resetPackageList	()V
        //     1059: aload_3
        //     1060: invokevirtual 1339	com/android/server/am/ProcessRecord:unlinkDeathRecipient	()V
        //     1063: aload_0
        //     1064: aload_3
        //     1065: ldc_w 1341
        //     1068: aload 4
        //     1070: invokespecial 1332	com/android/server/am/ActivityManagerService:startProcessLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;)V
        //     1073: iconst_0
        //     1074: istore 7
        //     1076: goto -969 -> 107
        //     1079: aload_0
        //     1080: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     1083: aload 35
        //     1085: aload_3
        //     1086: iconst_1
        //     1087: iconst_1
        //     1088: invokevirtual 1345	com/android/server/am/ActivityStack:realStartActivityLocked	(Lcom/android/server/am/ActivityRecord;Lcom/android/server/am/ProcessRecord;ZZ)Z
        //     1091: istore 50
        //     1093: iload 50
        //     1095: ifeq -228 -> 867
        //     1098: iconst_1
        //     1099: istore 34
        //     1101: goto -234 -> 867
        //     1104: astore 48
        //     1106: ldc 221
        //     1108: new 598	java/lang/StringBuilder
        //     1111: dup
        //     1112: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     1115: ldc_w 1347
        //     1118: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1121: aload 35
        //     1123: getfield 1351	com/android/server/am/ActivityRecord:intent	Landroid/content/Intent;
        //     1126: invokevirtual 1357	android/content/Intent:getComponent	()Landroid/content/ComponentName;
        //     1129: invokevirtual 1360	android/content/ComponentName:flattenToShortString	()Ljava/lang/String;
        //     1132: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1135: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     1138: aload 48
        //     1140: invokestatic 1336	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     1143: pop
        //     1144: iconst_1
        //     1145: istore 33
        //     1147: goto -280 -> 867
        //     1150: aload_0
        //     1151: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     1154: aload 35
        //     1156: aconst_null
        //     1157: aload 4
        //     1159: iconst_0
        //     1160: invokevirtual 1364	com/android/server/am/ActivityStack:ensureActivitiesVisibleLocked	(Lcom/android/server/am/ActivityRecord;Lcom/android/server/am/ActivityRecord;Ljava/lang/String;I)V
        //     1163: goto -296 -> 867
        //     1166: aload_0
        //     1167: getfield 617	com/android/server/am/ActivityManagerService:mPendingServices	Ljava/util/ArrayList;
        //     1170: iload 41
        //     1172: invokevirtual 1366	java/util/ArrayList:remove	(I)Ljava/lang/Object;
        //     1175: pop
        //     1176: iinc 41 255
        //     1179: aload_0
        //     1180: aload 40
        //     1182: aload_3
        //     1183: invokespecial 1370	com/android/server/am/ActivityManagerService:realStartServiceLocked	(Lcom/android/server/am/ServiceRecord;Lcom/android/server/am/ProcessRecord;)V
        //     1186: iconst_1
        //     1187: istore 34
        //     1189: goto -226 -> 963
        //     1192: astore 42
        //     1194: ldc 221
        //     1196: new 598	java/lang/StringBuilder
        //     1199: dup
        //     1200: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     1203: ldc_w 1372
        //     1206: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1209: aload 40
        //     1211: getfield 1375	com/android/server/am/ServiceRecord:shortName	Ljava/lang/String;
        //     1214: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1217: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     1220: aload 42
        //     1222: invokestatic 1336	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     1225: pop
        //     1226: iconst_1
        //     1227: istore 33
        //     1229: iload 33
        //     1231: ifne +22 -> 1253
        //     1234: aload_0
        //     1235: iload_2
        //     1236: invokevirtual 1379	com/android/server/am/ActivityManagerService:isPendingBroadcastProcessLocked	(I)Z
        //     1239: ifeq +14 -> 1253
        //     1242: aload_0
        //     1243: aload_3
        //     1244: invokevirtual 1383	com/android/server/am/ActivityManagerService:sendPendingBroadcastsLocked	(Lcom/android/server/am/ProcessRecord;)Z
        //     1247: istore 39
        //     1249: iload 39
        //     1251: istore 34
        //     1253: iload 33
        //     1255: ifne +72 -> 1327
        //     1258: aload_0
        //     1259: getfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     1262: ifnull +65 -> 1327
        //     1265: aload_0
        //     1266: getfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     1269: getfield 1384	com/android/server/am/BackupRecord:appInfo	Landroid/content/pm/ApplicationInfo;
        //     1272: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     1275: aload_3
        //     1276: getfield 1296	com/android/server/am/ProcessRecord:uid	I
        //     1279: if_icmpne +48 -> 1327
        //     1282: aload_0
        //     1283: aload_0
        //     1284: getfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     1287: getfield 1384	com/android/server/am/BackupRecord:appInfo	Landroid/content/pm/ApplicationInfo;
        //     1290: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     1293: invokevirtual 1210	com/android/server/am/ActivityManagerService:ensurePackageDexOpt	(Ljava/lang/String;)V
        //     1296: aload_1
        //     1297: aload_0
        //     1298: getfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     1301: getfield 1384	com/android/server/am/BackupRecord:appInfo	Landroid/content/pm/ApplicationInfo;
        //     1304: aload_0
        //     1305: aload_0
        //     1306: getfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     1309: getfield 1384	com/android/server/am/BackupRecord:appInfo	Landroid/content/pm/ApplicationInfo;
        //     1312: invokevirtual 1222	com/android/server/am/ActivityManagerService:compatibilityInfoForPackageLocked	(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/CompatibilityInfo;
        //     1315: aload_0
        //     1316: getfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     1319: getfield 1201	com/android/server/am/BackupRecord:backupMode	I
        //     1322: invokeinterface 1388 4 0
        //     1327: iload 33
        //     1329: ifeq +43 -> 1372
        //     1332: aload_0
        //     1333: aload_3
        //     1334: iconst_0
        //     1335: iconst_1
        //     1336: invokespecial 1116	com/android/server/am/ActivityManagerService:handleAppDiedLocked	(Lcom/android/server/am/ProcessRecord;ZZ)V
        //     1339: iconst_0
        //     1340: istore 7
        //     1342: goto -1235 -> 107
        //     1345: astore 38
        //     1347: iconst_1
        //     1348: istore 33
        //     1350: goto -97 -> 1253
        //     1353: astore 36
        //     1355: ldc 221
        //     1357: ldc_w 1390
        //     1360: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     1363: pop
        //     1364: aload 36
        //     1366: invokevirtual 1393	java/lang/Exception:printStackTrace	()V
        //     1369: goto -42 -> 1327
        //     1372: iload 34
        //     1374: ifne +7 -> 1381
        //     1377: aload_0
        //     1378: invokevirtual 1396	com/android/server/am/ActivityManagerService:updateOomAdjLocked	()V
        //     1381: iconst_1
        //     1382: istore 7
        //     1384: goto -1277 -> 107
        //     1387: iconst_1
        //     1388: istore 19
        //     1390: goto -842 -> 548
        //     1393: iconst_1
        //     1394: istore 26
        //     1396: goto -738 -> 658
        //
        // Exception table:
        //     from	to	target	type
        //     20	35	110	finally
        //     112	115	110	finally
        //     123	129	132	java/lang/Exception
        //     157	190	969	android/os/RemoteException
        //     349	750	1042	java/lang/Exception
        //     1015	1033	1042	java/lang/Exception
        //     833	867	1104	java/lang/Exception
        //     1079	1093	1104	java/lang/Exception
        //     888	958	1192	java/lang/Exception
        //     1166	1186	1192	java/lang/Exception
        //     1242	1249	1345	java/lang/Exception
        //     1296	1327	1353	java/lang/Exception
    }

    private final void bringDownServiceLocked(ServiceRecord paramServiceRecord, boolean paramBoolean)
    {
        if ((!paramBoolean) && (paramServiceRecord.startRequested));
        while (true)
        {
            return;
            if (paramServiceRecord.connections.size() > 0)
            {
                if (!paramBoolean)
                {
                    Iterator localIterator3 = paramServiceRecord.connections.values().iterator();
                    label97: 
                    while (true)
                    {
                        if (!localIterator3.hasNext())
                            break label99;
                        ArrayList localArrayList2 = (ArrayList)localIterator3.next();
                        for (int n = 0; ; n++)
                        {
                            if (n >= localArrayList2.size())
                                break label97;
                            if ((0x1 & ((ConnectionRecord)localArrayList2.get(n)).flags) != 0)
                                break;
                        }
                    }
                }
                label99: Iterator localIterator2 = paramServiceRecord.connections.values().iterator();
                if (localIterator2.hasNext())
                {
                    ArrayList localArrayList1 = (ArrayList)localIterator2.next();
                    int m = 0;
                    while (m < localArrayList1.size())
                    {
                        ConnectionRecord localConnectionRecord = (ConnectionRecord)localArrayList1.get(m);
                        localConnectionRecord.serviceDead = true;
                        try
                        {
                            localConnectionRecord.conn.connected(paramServiceRecord.name, null);
                            m++;
                        }
                        catch (Exception localException3)
                        {
                            while (true)
                                Slog.w("ActivityManager", "Failure disconnecting service " + paramServiceRecord.name + " to connection " + ((ConnectionRecord)localArrayList1.get(m)).conn.asBinder() + " (in " + ((ConnectionRecord)localArrayList1.get(m)).binding.client.processName + ")", localException3);
                        }
                    }
                }
            }
            if ((paramServiceRecord.bindings.size() > 0) && (paramServiceRecord.app != null) && (paramServiceRecord.app.thread != null))
            {
                Iterator localIterator1 = paramServiceRecord.bindings.values().iterator();
                while (localIterator1.hasNext())
                {
                    IntentBindRecord localIntentBindRecord = (IntentBindRecord)localIterator1.next();
                    if ((paramServiceRecord.app != null) && (paramServiceRecord.app.thread != null) && (localIntentBindRecord.hasBound))
                        try
                        {
                            bumpServiceExecutingLocked(paramServiceRecord, "bring down unbind");
                            updateOomAdjLocked(paramServiceRecord.app);
                            localIntentBindRecord.hasBound = false;
                            paramServiceRecord.app.thread.scheduleUnbindService(paramServiceRecord, localIntentBindRecord.intent.getIntent());
                        }
                        catch (Exception localException2)
                        {
                            Slog.w("ActivityManager", "Exception when unbinding service " + paramServiceRecord.shortName, localException2);
                            serviceDoneExecutingLocked(paramServiceRecord, true);
                        }
                }
            }
            Object[] arrayOfObject = new Object[3];
            arrayOfObject[0] = Integer.valueOf(System.identityHashCode(paramServiceRecord));
            arrayOfObject[1] = paramServiceRecord.shortName;
            if (paramServiceRecord.app != null);
            for (int i = paramServiceRecord.app.pid; ; i = -1)
            {
                arrayOfObject[2] = Integer.valueOf(i);
                EventLog.writeEvent(30031, arrayOfObject);
                this.mServiceMap.removeServiceByName(paramServiceRecord.name, paramServiceRecord.userId);
                this.mServiceMap.removeServiceByIntent(paramServiceRecord.intent, paramServiceRecord.userId);
                paramServiceRecord.totalRestartCount = 0;
                unscheduleServiceRestartLocked(paramServiceRecord);
                int j = this.mPendingServices.size();
                for (int k = 0; k < j; k++)
                    if (this.mPendingServices.get(k) == paramServiceRecord)
                    {
                        this.mPendingServices.remove(k);
                        k--;
                        j--;
                    }
            }
            paramServiceRecord.cancelNotification();
            paramServiceRecord.isForeground = false;
            paramServiceRecord.foregroundId = 0;
            paramServiceRecord.foregroundNoti = null;
            paramServiceRecord.clearDeliveredStartsLocked();
            paramServiceRecord.pendingStarts.clear();
            if (paramServiceRecord.app != null)
                synchronized (paramServiceRecord.stats.getBatteryStats())
                {
                    paramServiceRecord.stats.stopLaunchedLocked();
                    paramServiceRecord.app.services.remove(paramServiceRecord);
                    if (paramServiceRecord.app.thread == null);
                }
            try
            {
                bumpServiceExecutingLocked(paramServiceRecord, "stop");
                this.mStoppingServices.add(paramServiceRecord);
                updateOomAdjLocked(paramServiceRecord.app);
                paramServiceRecord.app.thread.scheduleStopService(paramServiceRecord);
                updateServiceForegroundLocked(paramServiceRecord.app, false);
                if (paramServiceRecord.bindings.size() > 0)
                    paramServiceRecord.bindings.clear();
                if (!(paramServiceRecord.restarter instanceof ServiceRestarter))
                    continue;
                ((ServiceRestarter)paramServiceRecord.restarter).setService(null);
                continue;
                localObject = finally;
                throw localObject;
            }
            catch (Exception localException1)
            {
                while (true)
                {
                    Slog.w("ActivityManager", "Exception when stopping service " + paramServiceRecord.shortName, localException1);
                    serviceDoneExecutingLocked(paramServiceRecord, true);
                }
            }
        }
    }

    private final boolean bringUpServiceLocked(ServiceRecord paramServiceRecord, int paramInt, boolean paramBoolean)
    {
        boolean bool2;
        if ((paramServiceRecord.app != null) && (paramServiceRecord.app.thread != null))
        {
            sendServiceArgsLocked(paramServiceRecord, false);
            bool2 = true;
        }
        while (true)
        {
            return bool2;
            if ((!paramBoolean) && (paramServiceRecord.restartDelay > 0L))
            {
                bool2 = true;
                continue;
            }
            this.mRestartingServices.remove(paramServiceRecord);
            try
            {
                AppGlobals.getPackageManager().setPackageStoppedState(paramServiceRecord.packageName, false, paramServiceRecord.userId);
                label74: if ((0x2 & paramServiceRecord.serviceInfo.flags) != 0)
                {
                    bool1 = true;
                    str = paramServiceRecord.processName;
                    if (bool1)
                        break label354;
                    localProcessRecord1 = getProcessRecordLocked(str, paramServiceRecord.appInfo.uid);
                    if ((localProcessRecord1 == null) || (localProcessRecord1.thread == null))
                        break label238;
                }
            }
            catch (IllegalArgumentException localIllegalArgumentException)
            {
                boolean bool1;
                String str;
                ProcessRecord localProcessRecord1;
                try
                {
                    while (true)
                    {
                        localProcessRecord1.addPackage(paramServiceRecord.appInfo.packageName);
                        realStartServiceLocked(paramServiceRecord, localProcessRecord1);
                        bool2 = true;
                        break;
                        localIllegalArgumentException = localIllegalArgumentException;
                        Slog.w("ActivityManager", "Failed trying to unstop package " + paramServiceRecord.packageName + ": " + localIllegalArgumentException);
                    }
                    bool1 = false;
                }
                catch (RemoteException localRemoteException2)
                {
                    Slog.w("ActivityManager", "Exception when starting service " + paramServiceRecord.shortName, localRemoteException2);
                }
                while (true)
                    if (localProcessRecord1 == null)
                    {
                        ProcessRecord localProcessRecord2 = startProcessLocked(str, paramServiceRecord.appInfo, true, paramInt, "service", paramServiceRecord.name, false, bool1);
                        if (localProcessRecord2 == null)
                        {
                            Slog.w("ActivityManager", "Unable to launch app " + paramServiceRecord.appInfo.packageName + "/" + paramServiceRecord.appInfo.uid + " for service " + paramServiceRecord.intent.getIntent() + ": process is bad");
                            bringDownServiceLocked(paramServiceRecord, true);
                            bool2 = false;
                            break;
                            label354: localProcessRecord1 = paramServiceRecord.isolatedProc;
                            continue;
                        }
                        if (bool1)
                            paramServiceRecord.isolatedProc = localProcessRecord2;
                    }
                if (!this.mPendingServices.contains(paramServiceRecord))
                    this.mPendingServices.add(paramServiceRecord);
                bool2 = true;
            }
            catch (RemoteException localRemoteException1)
            {
                label238: break label74;
            }
        }
    }

    private final int broadcastIntentLocked(ProcessRecord paramProcessRecord, String paramString1, Intent paramIntent, String paramString2, IIntentReceiver paramIIntentReceiver, int paramInt1, String paramString3, Bundle paramBundle, String paramString4, boolean paramBoolean1, boolean paramBoolean2, int paramInt2, int paramInt3, int paramInt4)
    {
        Intent localIntent1 = new Intent(paramIntent);
        localIntent1.addFlags(16);
        if ((paramIIntentReceiver != null) && (!paramBoolean1))
            Slog.w("ActivityManager", "Broadcast " + localIntent1 + " not ordered but result callback requested!");
        boolean bool = "android.intent.action.UID_REMOVED".equals(localIntent1.getAction());
        int i12;
        if (("android.intent.action.PACKAGE_REMOVED".equals(localIntent1.getAction())) || ("android.intent.action.PACKAGE_CHANGED".equals(localIntent1.getAction())) || ("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE".equals(localIntent1.getAction())) || (bool))
            if (checkComponentPermission("android.permission.BROADCAST_PACKAGE_REMOVED", paramInt2, paramInt3, -1, true) == 0)
                if (bool)
                {
                    Bundle localBundle = localIntent1.getExtras();
                    if (localBundle != null)
                    {
                        i12 = localBundle.getInt("android.intent.extra.UID");
                        if (i12 < 0);
                    }
                }
        label745: int m;
        while (true)
        {
            synchronized (this.mBatteryStatsService.getActiveStatistics())
            {
                ???.removeUidStatsLocked(i12);
                if ("android.intent.action.TIMEZONE_CHANGED".equals(localIntent1.getAction()))
                    this.mHandler.sendEmptyMessage(13);
                if ("android.intent.action.CLEAR_DNS_CACHE".equals(localIntent1.getAction()))
                    this.mHandler.sendEmptyMessage(28);
                if ("android.intent.action.PROXY_CHANGE".equals(localIntent1.getAction()))
                {
                    ProxyProperties localProxyProperties = (ProxyProperties)localIntent1.getParcelableExtra("proxy");
                    this.mHandler.sendMessage(this.mHandler.obtainMessage(29, localProxyProperties));
                }
                if ((paramInt3 != 1000) && (paramInt3 != 1001) && (paramInt3 != 2000) && (paramInt3 != 0))
                    break label745;
                if (!paramBoolean2)
                    break label1054;
                if (checkPermission("android.permission.BROADCAST_STICKY", paramInt2, paramInt3) == 0)
                    break label857;
                String str6 = "Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=" + paramInt2 + ", uid=" + paramInt3 + " requires " + "android.permission.BROADCAST_STICKY";
                Slog.w("ActivityManager", str6);
                throw new SecurityException(str6);
                i12 = -1;
            }
            if ("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE".equals(localIntent1.getAction()))
            {
                String[] arrayOfString4 = localIntent1.getStringArrayExtra("android.intent.extra.changed_package_list");
                if ((arrayOfString4 != null) && (arrayOfString4.length > 0))
                {
                    int i10 = arrayOfString4.length;
                    for (int i11 = 0; i11 < i10; i11++)
                        forceStopPackageLocked(arrayOfString4[i11], -1, false, true, true, false, paramInt4);
                    sendPackageBroadcastLocked(1, arrayOfString4);
                }
            }
            else
            {
                Uri localUri1 = localIntent1.getData();
                if (localUri1 != null)
                {
                    String str2 = localUri1.getSchemeSpecificPart();
                    if (str2 != null)
                    {
                        if (!localIntent1.getBooleanExtra("android.intent.extra.DONT_KILL_APP", false))
                            forceStopPackageLocked(str2, localIntent1.getIntExtra("android.intent.extra.UID", -1), false, true, true, false, paramInt4);
                        if ("android.intent.action.PACKAGE_REMOVED".equals(localIntent1.getAction()))
                        {
                            String[] arrayOfString1 = new String[1];
                            arrayOfString1[0] = str2;
                            sendPackageBroadcastLocked(0, arrayOfString1);
                            continue;
                            String str1 = "Permission Denial: " + localIntent1.getAction() + " broadcast from " + paramString1 + " (pid=" + paramInt2 + ", uid=" + paramInt3 + ")" + " requires " + "android.permission.BROADCAST_PACKAGE_REMOVED";
                            Slog.w("ActivityManager", str1);
                            throw new SecurityException(str1);
                            if ("android.intent.action.PACKAGE_ADDED".equals(localIntent1.getAction()))
                            {
                                Uri localUri3 = localIntent1.getData();
                                if (localUri3 != null)
                                {
                                    String str8 = localUri3.getSchemeSpecificPart();
                                    if (str8 != null)
                                    {
                                        this.mCompatModePackages.handlePackageAddedLocked(str8, localIntent1.getBooleanExtra("android.intent.extra.REPLACING", false));
                                        continue;
                                        if ((paramProcessRecord == null) || (!paramProcessRecord.persistent))
                                            try
                                            {
                                                if (AppGlobals.getPackageManager().isProtectedBroadcast(localIntent1.getAction()))
                                                {
                                                    String str7 = "Permission Denial: not allowed to send broadcast " + localIntent1.getAction() + " from pid=" + paramInt2 + ", uid=" + paramInt3;
                                                    Slog.w("ActivityManager", str7);
                                                    throw new SecurityException(str7);
                                                }
                                            }
                                            catch (RemoteException localRemoteException3)
                                            {
                                                Slog.w("ActivityManager", "Remote exception", localRemoteException3);
                                                m = 0;
                                            }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        while (true)
        {
            return m;
            label857: if (paramString4 != null)
            {
                Slog.w("ActivityManager", "Can't broadcast sticky intent " + localIntent1 + " and enforce permission " + paramString4);
                m = -1;
                continue;
            }
            if (localIntent1.getComponent() != null)
                throw new SecurityException("Sticky broadcasts can't target a specific component");
            ArrayList localArrayList2 = (ArrayList)this.mStickyBroadcasts.get(localIntent1.getAction());
            if (localArrayList2 == null)
            {
                localArrayList2 = new ArrayList();
                this.mStickyBroadcasts.put(localIntent1.getAction(), localArrayList2);
            }
            int i8 = localArrayList2.size();
            int i9 = 0;
            label1054: Object localObject1;
            Object localObject2;
            if (i9 < i8)
            {
                if (localIntent1.filterEquals((Intent)localArrayList2.get(i9)))
                {
                    Intent localIntent3 = new Intent(localIntent1);
                    localArrayList2.set(i9, localIntent3);
                }
            }
            else
            {
                if (i9 >= i8)
                {
                    Intent localIntent2 = new Intent(localIntent1);
                    localArrayList2.add(localIntent2);
                }
                localObject1 = null;
                localObject2 = null;
            }
            try
            {
                ActivityInfo localActivityInfo;
                ArrayList localArrayList1;
                if (localIntent1.getComponent() != null)
                {
                    localActivityInfo = AppGlobals.getPackageManager().getReceiverInfo(localIntent1.getComponent(), 1024, paramInt4);
                    if (localActivityInfo != null)
                        localArrayList1 = new ArrayList();
                }
                label1154: int i;
                int j;
                int k;
                while (true)
                {
                    String[] arrayOfString2;
                    int i4;
                    try
                    {
                        ResolveInfo localResolveInfo2 = new ResolveInfo();
                        if (isSingleton(localActivityInfo.processName, localActivityInfo.applicationInfo))
                        {
                            localResolveInfo2.activityInfo = getActivityInfoForUser(localActivityInfo, 0);
                            localArrayList1.add(localResolveInfo2);
                            localObject1 = localArrayList1;
                            if ((0x20000000 & localIntent1.getFlags()) == 0)
                                break label1561;
                            i = 1;
                            if (localObject2 == null)
                                break label1567;
                            j = ((List)localObject2).size();
                            if ((!paramBoolean1) && (j > 0))
                            {
                                BroadcastQueue localBroadcastQueue2 = broadcastQueueForIntent(localIntent1);
                                BroadcastRecord localBroadcastRecord2 = new BroadcastRecord(localBroadcastQueue2, localIntent1, paramProcessRecord, paramString1, paramInt2, paramInt3, paramString4, (List)localObject2, paramIIntentReceiver, paramInt1, paramString3, paramBundle, paramBoolean1, paramBoolean2, false);
                                if ((i == 0) || (!localBroadcastQueue2.replaceParallelBroadcastLocked(localBroadcastRecord2)))
                                    break label1573;
                                i7 = 1;
                                if (i7 == 0)
                                {
                                    localBroadcastQueue2.enqueueParallelBroadcastLocked(localBroadcastRecord2);
                                    localBroadcastQueue2.scheduleBroadcastsLocked();
                                }
                                localObject2 = null;
                                j = 0;
                            }
                            k = 0;
                            if (localObject1 == null)
                                break label1741;
                            arrayOfString2 = null;
                            if ((!"android.intent.action.PACKAGE_ADDED".equals(localIntent1.getAction())) && (!"android.intent.action.PACKAGE_RESTARTED".equals(localIntent1.getAction())) && (!"android.intent.action.PACKAGE_DATA_CLEARED".equals(localIntent1.getAction())))
                                break label1579;
                            Uri localUri2 = localIntent1.getData();
                            if (localUri2 != null)
                            {
                                String str5 = localUri2.getSchemeSpecificPart();
                                if (str5 != null)
                                {
                                    arrayOfString2 = new String[1];
                                    arrayOfString2[0] = str5;
                                }
                            }
                            if ((arrayOfString2 == null) || (arrayOfString2.length <= 0))
                                break label1612;
                            String[] arrayOfString3 = arrayOfString2;
                            int i3 = arrayOfString3.length;
                            i4 = 0;
                            if (i4 >= i3)
                                break label1612;
                            String str4 = arrayOfString3[i4];
                            if (str4 == null)
                                break label1606;
                            int i5 = ((List)localObject1).size();
                            int i6 = 0;
                            if (i6 >= i5)
                                break label1606;
                            if (((ResolveInfo)((List)localObject1).get(i6)).activityInfo.packageName.equals(str4))
                            {
                                ((List)localObject1).remove(i6);
                                i6--;
                                i5--;
                            }
                            i6++;
                            continue;
                            i9++;
                            break;
                        }
                        localResolveInfo2.activityInfo = getActivityInfoForUser(localActivityInfo, paramInt4);
                        continue;
                    }
                    catch (RemoteException localRemoteException2)
                    {
                        localObject1 = localArrayList1;
                        continue;
                    }
                    if ((0x40000000 & localIntent1.getFlags()) == 0)
                        localObject1 = AppGlobals.getPackageManager().queryIntentReceivers(localIntent1, paramString2, 1024, paramInt4);
                    List localList2 = this.mReceiverResolver.queryIntent(localIntent1, paramString2, false, paramInt4);
                    localObject2 = localList2;
                    continue;
                    label1561: i = 0;
                    continue;
                    label1567: j = 0;
                    continue;
                    label1573: int i7 = 0;
                    continue;
                    label1579: if ("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE".equals(localIntent1.getAction()))
                    {
                        arrayOfString2 = localIntent1.getStringArrayExtra("android.intent.extra.changed_package_list");
                        continue;
                        label1606: i4++;
                    }
                }
                label1612: int i1;
                int i2;
                ResolveInfo localResolveInfo1;
                BroadcastFilter localBroadcastFilter;
                if (localObject1 != null)
                {
                    i1 = ((List)localObject1).size();
                    i2 = 0;
                    localResolveInfo1 = null;
                    localBroadcastFilter = null;
                }
                while (true)
                {
                    if ((i2 >= i1) || (k >= j))
                        break label1741;
                    if (localResolveInfo1 == null)
                        localResolveInfo1 = (ResolveInfo)((List)localObject1).get(i2);
                    if (localBroadcastFilter == null)
                        localBroadcastFilter = (BroadcastFilter)((List)localObject2).get(k);
                    if (localBroadcastFilter.getPriority() >= localResolveInfo1.priority)
                    {
                        ((List)localObject1).add(i2, localBroadcastFilter);
                        k++;
                        localBroadcastFilter = null;
                        i2++;
                        i1++;
                        continue;
                        i1 = 0;
                        break;
                    }
                    i2++;
                    localResolveInfo1 = null;
                }
                label1741: 
                while (k < j)
                {
                    if (localObject1 == null)
                        localObject1 = new ArrayList();
                    Object localObject3 = ((List)localObject2).get(k);
                    ((List)localObject1).add(localObject3);
                    k++;
                }
                BroadcastQueue localBroadcastQueue1;
                BroadcastRecord localBroadcastRecord1;
                if (((localObject1 != null) && (((List)localObject1).size() > 0)) || (paramIIntentReceiver != null))
                {
                    localBroadcastQueue1 = broadcastQueueForIntent(localIntent1);
                    List localList1 = getRunningAppProcesses();
                    String str3 = localIntent1.getAction();
                    ExtraActivityManagerService.adjustMediaButtonReceivers((List)localObject1, localList1, str3);
                    localBroadcastRecord1 = new BroadcastRecord(localBroadcastQueue1, localIntent1, paramProcessRecord, paramString1, paramInt2, paramInt3, paramString4, (List)localObject1, paramIIntentReceiver, paramInt1, paramString3, paramBundle, paramBoolean1, paramBoolean2, false);
                    if ((i == 0) || (!localBroadcastQueue1.replaceOrderedBroadcastLocked(localBroadcastRecord1)))
                        break label1916;
                }
                label1916: for (int n = 1; ; n = 0)
                {
                    if (n == 0)
                    {
                        localBroadcastQueue1.enqueueOrderedBroadcastLocked(localBroadcastRecord1);
                        localBroadcastQueue1.scheduleBroadcastsLocked();
                    }
                    m = 0;
                    break;
                }
            }
            catch (RemoteException localRemoteException1)
            {
                break label1154;
            }
        }
    }

    private static String buildOomTag(String paramString1, String paramString2, int paramInt1, int paramInt2)
    {
        if (paramInt1 == paramInt2)
            if (paramString2 != null);
        while (true)
        {
            return paramString1;
            paramString1 = paramString1 + "    ";
            continue;
            paramString1 = paramString1 + "+" + Integer.toString(paramInt1 - paramInt2);
        }
    }

    private final void bumpServiceExecutingLocked(ServiceRecord paramServiceRecord, String paramString)
    {
        long l = SystemClock.uptimeMillis();
        if ((paramServiceRecord.executeNesting == 0) && (paramServiceRecord.app != null))
        {
            if (paramServiceRecord.app.executingServices.size() == 0)
            {
                Message localMessage = this.mHandler.obtainMessage(12);
                localMessage.obj = paramServiceRecord.app;
                this.mHandler.sendMessageAtTime(localMessage, 20000L + l);
            }
            paramServiceRecord.app.executingServices.add(paramServiceRecord);
        }
        paramServiceRecord.executeNesting = (1 + paramServiceRecord.executeNesting);
        paramServiceRecord.executingStart = l;
    }

    private final boolean canGcNowLocked()
    {
        int i = 0;
        for (BroadcastQueue localBroadcastQueue : this.mBroadcastQueues)
            if ((localBroadcastQueue.mParallelBroadcasts.size() != 0) || (localBroadcastQueue.mOrderedBroadcasts.size() != 0))
                i = 1;
        if ((i == 0) && ((this.mSleeping) || ((this.mMainStack.mResumedActivity != null) && (this.mMainStack.mResumedActivity.idle))));
        for (boolean bool = true; ; bool = false)
            return bool;
    }

    private final String checkContentProviderPermissionLocked(ProviderInfo paramProviderInfo, ProcessRecord paramProcessRecord)
    {
        String str = null;
        int i;
        int j;
        if (paramProcessRecord != null)
        {
            i = paramProcessRecord.pid;
            if (paramProcessRecord == null)
                break label58;
            j = paramProcessRecord.uid;
            label22: if (checkComponentPermission(paramProviderInfo.readPermission, i, j, paramProviderInfo.applicationInfo.uid, paramProviderInfo.exported) != 0)
                break label66;
        }
        while (true)
        {
            return str;
            i = Binder.getCallingPid();
            break;
            label58: j = Binder.getCallingUid();
            break label22;
            label66: if (checkComponentPermission(paramProviderInfo.writePermission, i, j, paramProviderInfo.applicationInfo.uid, paramProviderInfo.exported) != 0)
            {
                PathPermission[] arrayOfPathPermission = paramProviderInfo.pathPermissions;
                if (arrayOfPathPermission != null)
                {
                    int k = arrayOfPathPermission.length;
                    while (true)
                        if (k > 0)
                        {
                            k--;
                            PathPermission localPathPermission = arrayOfPathPermission[k];
                            if (checkComponentPermission(localPathPermission.getReadPermission(), i, j, paramProviderInfo.applicationInfo.uid, paramProviderInfo.exported) == 0)
                                break;
                            if (checkComponentPermission(localPathPermission.getWritePermission(), i, j, paramProviderInfo.applicationInfo.uid, paramProviderInfo.exported) == 0)
                                break;
                        }
                }
                HashMap localHashMap = (HashMap)this.mGrantedUriPermissions.get(j);
                if (localHashMap == null)
                    break label255;
                Iterator localIterator = localHashMap.entrySet().iterator();
                do
                    if (!localIterator.hasNext())
                        break;
                while (!((Uri)((Map.Entry)localIterator.next()).getKey()).getAuthority().equals(paramProviderInfo.authority));
            }
        }
        label255: if (!paramProviderInfo.exported)
        {
            StringBuilder localStringBuilder2 = new StringBuilder().append("Permission Denial: opening provider ").append(paramProviderInfo.name).append(" from ");
            if (paramProcessRecord != null);
            while (true)
            {
                str = paramProcessRecord + " (pid=" + i + ", uid=" + j + ") that is not exported from uid " + paramProviderInfo.applicationInfo.uid;
                Slog.w("ActivityManager", str);
                break;
                paramProcessRecord = "(null)";
            }
        }
        StringBuilder localStringBuilder1 = new StringBuilder().append("Permission Denial: opening provider ").append(paramProviderInfo.name).append(" from ");
        if (paramProcessRecord != null);
        while (true)
        {
            str = paramProcessRecord + " (pid=" + i + ", uid=" + j + ") requires " + paramProviderInfo.readPermission + " or " + paramProviderInfo.writePermission;
            break;
            paramProcessRecord = "(null)";
        }
    }

    private final boolean checkHoldingPermissionsLocked(IPackageManager paramIPackageManager, ProviderInfo paramProviderInfo, Uri paramUri, int paramInt1, int paramInt2)
    {
        if (paramProviderInfo.applicationInfo.uid == paramInt1);
        for (boolean bool = true; ; bool = false)
        {
            return bool;
            if (paramProviderInfo.exported)
                break;
        }
        int i;
        label41: int j;
        if ((paramInt2 & 0x1) == 0)
        {
            i = 1;
            if ((paramInt2 & 0x2) != 0)
                break label255;
            j = 1;
            label51: if (i != 0);
        }
        while (true)
        {
            int n;
            try
            {
                if ((paramProviderInfo.readPermission != null) && (paramIPackageManager.checkUidPermission(paramProviderInfo.readPermission, paramInt1) == 0))
                    i = 1;
                if ((j == 0) && (paramProviderInfo.writePermission != null) && (paramIPackageManager.checkUidPermission(paramProviderInfo.writePermission, paramInt1) == 0))
                    j = 1;
                if (paramProviderInfo.readPermission == null)
                {
                    k = 1;
                    if (paramProviderInfo.writePermission != null)
                        continue;
                    m = 1;
                    PathPermission[] arrayOfPathPermission = paramProviderInfo.pathPermissions;
                    if (arrayOfPathPermission == null)
                        continue;
                    String str1 = paramUri.getPath();
                    n = arrayOfPathPermission.length;
                    break label331;
                    n--;
                    PathPermission localPathPermission = arrayOfPathPermission[n];
                    if (!localPathPermission.match(str1))
                        break label331;
                    if (i == 0)
                    {
                        String str3 = localPathPermission.getReadPermission();
                        if (str3 != null)
                        {
                            if (paramIPackageManager.checkUidPermission(str3, paramInt1) != 0)
                                continue;
                            i = 1;
                        }
                    }
                    if (j != 0)
                        break label331;
                    String str2 = localPathPermission.getWritePermission();
                    if (str2 == null)
                        break label331;
                    int i1 = paramIPackageManager.checkUidPermission(str2, paramInt1);
                    if (i1 != 0)
                        continue;
                    j = 1;
                    break label331;
                    i = 0;
                    break label41;
                    label255: j = 0;
                    break label51;
                }
                int k = 0;
                continue;
                int m = 0;
                continue;
                k = 0;
                continue;
                m = 0;
                break label331;
                if (k != 0)
                    i = 1;
                if (m != 0)
                    j = 1;
                if ((i == 0) || (j == 0))
                    break label325;
                bool = true;
            }
            catch (RemoteException localRemoteException)
            {
                bool = false;
            }
            break;
            label325: bool = false;
            break;
            label331: if (n > 0)
                if (i != 0)
                    if (j != 0);
        }
    }

    private final boolean checkUriPermissionLocked(Uri paramUri, int paramInt1, int paramInt2)
    {
        boolean bool = true;
        if (paramInt1 == 0);
        while (true)
        {
            return bool;
            HashMap localHashMap = (HashMap)this.mGrantedUriPermissions.get(paramInt1);
            if (localHashMap == null)
            {
                bool = false;
            }
            else
            {
                UriPermission localUriPermission = (UriPermission)localHashMap.get(paramUri);
                if (localUriPermission == null)
                    bool = false;
                else if ((paramInt2 & localUriPermission.modeFlags) != paramInt2)
                    bool = false;
            }
        }
    }

    private void checkValidCaller(int paramInt1, int paramInt2)
    {
        if ((UserId.getUserId(paramInt1) == paramInt2) || (paramInt1 == 1000) || (paramInt1 == 0))
            return;
        throw new SecurityException("Caller uid=" + paramInt1 + " is not privileged to communicate with user=" + paramInt2);
    }

    private final void cleanUpApplicationRecordLocked(ProcessRecord paramProcessRecord, boolean paramBoolean1, boolean paramBoolean2, int paramInt)
    {
        if (paramInt >= 0)
            this.mLruProcesses.remove(paramInt);
        this.mProcessesToGc.remove(paramProcessRecord);
        if (paramProcessRecord.crashDialog != null)
        {
            paramProcessRecord.crashDialog.dismiss();
            paramProcessRecord.crashDialog = null;
        }
        if (paramProcessRecord.anrDialog != null)
        {
            paramProcessRecord.anrDialog.dismiss();
            paramProcessRecord.anrDialog = null;
        }
        if (paramProcessRecord.waitDialog != null)
        {
            paramProcessRecord.waitDialog.dismiss();
            paramProcessRecord.waitDialog = null;
        }
        paramProcessRecord.crashing = false;
        paramProcessRecord.notResponding = false;
        paramProcessRecord.resetPackageList();
        paramProcessRecord.unlinkDeathRecipient();
        paramProcessRecord.thread = null;
        paramProcessRecord.forcingToForeground = null;
        paramProcessRecord.foregroundServices = false;
        paramProcessRecord.foregroundActivities = false;
        paramProcessRecord.hasShownUi = false;
        paramProcessRecord.hasAboveClient = false;
        killServicesLocked(paramProcessRecord, paramBoolean2);
        int i = 0;
        if (!paramProcessRecord.pubProviders.isEmpty())
        {
            Iterator localIterator2 = paramProcessRecord.pubProviders.values().iterator();
            if (localIterator2.hasNext())
            {
                ContentProviderRecord localContentProviderRecord = (ContentProviderRecord)localIterator2.next();
                if ((paramProcessRecord.bad) || (!paramBoolean2));
                for (boolean bool = true; ; bool = false)
                {
                    if ((removeDyingProviderLocked(paramProcessRecord, localContentProviderRecord, bool)) || (bool))
                        i = 1;
                    localContentProviderRecord.provider = null;
                    localContentProviderRecord.proc = null;
                    break;
                }
            }
            paramProcessRecord.pubProviders.clear();
        }
        if (checkAppInLaunchingProvidersLocked(paramProcessRecord, false))
            i = 1;
        if (!paramProcessRecord.conProviders.isEmpty())
        {
            for (int k = 0; k < paramProcessRecord.conProviders.size(); k++)
            {
                ContentProviderConnection localContentProviderConnection = (ContentProviderConnection)paramProcessRecord.conProviders.get(k);
                localContentProviderConnection.provider.connections.remove(localContentProviderConnection);
            }
            paramProcessRecord.conProviders.clear();
        }
        skipCurrentReceiverLocked(paramProcessRecord);
        if (paramProcessRecord.receivers.size() > 0)
        {
            Iterator localIterator1 = paramProcessRecord.receivers.iterator();
            while (localIterator1.hasNext())
                removeReceiverLocked((ReceiverList)localIterator1.next());
            paramProcessRecord.receivers.clear();
        }
        if ((this.mBackupTarget != null) && (paramProcessRecord.pid == this.mBackupTarget.app.pid));
        try
        {
            IBackupManager.Stub.asInterface(ServiceManager.getService("backup")).agentDisconnected(paramProcessRecord.info.packageName);
            label427: for (int j = -1 + this.mPendingProcessChanges.size(); j >= 0; j--)
            {
                ProcessChangeItem localProcessChangeItem = (ProcessChangeItem)this.mPendingProcessChanges.get(j);
                if (localProcessChangeItem.pid == paramProcessRecord.pid)
                {
                    this.mPendingProcessChanges.remove(j);
                    this.mAvailProcessChanges.add(localProcessChangeItem);
                }
            }
            this.mHandler.obtainMessage(32, paramProcessRecord.pid, paramProcessRecord.info.uid, null).sendToTarget();
            if (paramBoolean1);
            while (true)
            {
                return;
                if ((!paramProcessRecord.persistent) || (paramProcessRecord.isolated))
                {
                    this.mProcessNames.remove(paramProcessRecord.processName, paramProcessRecord.uid);
                    this.mIsolatedProcesses.remove(paramProcessRecord.uid);
                    if (this.mHeavyWeightProcess == paramProcessRecord)
                    {
                        this.mHeavyWeightProcess = null;
                        this.mHandler.sendEmptyMessage(25);
                    }
                }
                while (true)
                {
                    this.mProcessesOnHold.remove(paramProcessRecord);
                    if (paramProcessRecord == this.mHomeProcess)
                        this.mHomeProcess = null;
                    if (paramProcessRecord == this.mPreviousProcess)
                        this.mPreviousProcess = null;
                    if ((i == 0) || (paramProcessRecord.isolated))
                        break label700;
                    this.mProcessNames.put(paramProcessRecord.processName, paramProcessRecord.uid, paramProcessRecord);
                    startProcessLocked(paramProcessRecord, "restart", paramProcessRecord.processName);
                    break;
                    if ((!paramProcessRecord.removed) && (this.mPersistentStartingProcesses.indexOf(paramProcessRecord) < 0))
                    {
                        this.mPersistentStartingProcesses.add(paramProcessRecord);
                        i = 1;
                    }
                }
                label700: if ((paramProcessRecord.pid <= 0) || (paramProcessRecord.pid == MY_PID))
                    continue;
                synchronized (this.mPidsSelfLocked)
                {
                    this.mPidsSelfLocked.remove(paramProcessRecord.pid);
                    this.mHandler.removeMessages(20, paramProcessRecord);
                    paramProcessRecord.setPid(0);
                }
            }
        }
        catch (RemoteException localRemoteException)
        {
            break label427;
        }
    }

    private void cleanUpRemovedTaskLocked(TaskRecord paramTaskRecord, int paramInt)
    {
        int i;
        Intent localIntent1;
        label21: Intent localIntent2;
        ComponentName localComponentName;
        if ((paramInt & 0x1) != 0)
        {
            i = 1;
            if (paramTaskRecord.intent == null)
                break label76;
            localIntent1 = paramTaskRecord.intent;
            localIntent2 = new Intent(localIntent1);
            localComponentName = localIntent2.getComponent();
            if (localComponentName != null)
                break label85;
            Slog.w("ActivityManager", "Now component for base intent of task: " + paramTaskRecord);
        }
        label76: label85: label255: 
        do
        {
            return;
            i = 0;
            break;
            localIntent1 = paramTaskRecord.affinityIntent;
            break label21;
            ArrayList localArrayList1 = new ArrayList();
            Iterator localIterator1 = this.mServiceMap.getAllServices(paramTaskRecord.userId).iterator();
            while (localIterator1.hasNext())
            {
                ServiceRecord localServiceRecord2 = (ServiceRecord)localIterator1.next();
                if (localServiceRecord2.packageName.equals(localComponentName.getPackageName()))
                    localArrayList1.add(localServiceRecord2);
            }
            int j = 0;
            if (j < localArrayList1.size())
            {
                ServiceRecord localServiceRecord1 = (ServiceRecord)localArrayList1.get(j);
                if (localServiceRecord1.startRequested)
                {
                    if ((0x1 & localServiceRecord1.serviceInfo.flags) == 0)
                        break label255;
                    Slog.i("ActivityManager", "Stopping service " + localServiceRecord1.shortName + ": remove task");
                    stopServiceLocked(localServiceRecord1);
                }
                while (true)
                {
                    j++;
                    break;
                    localServiceRecord1.pendingStarts.add(new ServiceRecord.StartItem(localServiceRecord1, true, localServiceRecord1.makeNextStartId(), localIntent2, null));
                    if ((localServiceRecord1.app != null) && (localServiceRecord1.app.thread != null))
                        sendServiceArgsLocked(localServiceRecord1, false);
                }
            }
        }
        while (i == 0);
        String str = localComponentName.getPackageName();
        ArrayList localArrayList2 = new ArrayList();
        Iterator localIterator2 = this.mProcessNames.getMap().values().iterator();
        if (localIterator2.hasNext())
        {
            SparseArray localSparseArray = (SparseArray)localIterator2.next();
            int m = 0;
            label373: ProcessRecord localProcessRecord2;
            if (m < localSparseArray.size())
            {
                localProcessRecord2 = (ProcessRecord)localSparseArray.valueAt(m);
                if (localProcessRecord2.userId == paramTaskRecord.userId)
                    break label413;
            }
            while (true)
            {
                m++;
                break label373;
                break;
                label413: if (localProcessRecord2.pkgList.contains(str))
                    localArrayList2.add(localProcessRecord2);
            }
        }
        int k = 0;
        label440: ProcessRecord localProcessRecord1;
        if (k < localArrayList2.size())
        {
            localProcessRecord1 = (ProcessRecord)localArrayList2.get(k);
            if (localProcessRecord1.setSchedGroup != 0)
                break label581;
            Slog.i("ActivityManager", "Killing " + localProcessRecord1.toShortString() + ": remove task");
            Object[] arrayOfObject = new Object[4];
            arrayOfObject[0] = Integer.valueOf(localProcessRecord1.pid);
            arrayOfObject[1] = localProcessRecord1.processName;
            arrayOfObject[2] = Integer.valueOf(localProcessRecord1.setAdj);
            arrayOfObject[3] = "remove task";
            EventLog.writeEvent(30023, arrayOfObject);
            localProcessRecord1.killedBackground = true;
            Process.killProcessQuiet(localProcessRecord1.pid);
        }
        while (true)
        {
            k++;
            break label440;
            break;
            label581: localProcessRecord1.waitingToKill = "remove task";
        }
    }

    private void clearProfilerLocked()
    {
        if (this.mProfileFd != null);
        try
        {
            this.mProfileFd.close();
            label14: this.mProfileApp = null;
            this.mProfileProc = null;
            this.mProfileFile = null;
            this.mProfileType = 0;
            this.mAutoStopProfiler = false;
            return;
        }
        catch (IOException localIOException)
        {
            break label14;
        }
    }

    private void comeOutOfSleepIfNeededLocked()
    {
        if ((!this.mWentToSleep) && (!this.mLockScreenShown) && (this.mSleeping))
        {
            this.mSleeping = false;
            this.mMainStack.awakeFromSleepingLocked();
            this.mMainStack.resumeTopActivityLocked(null);
        }
    }

    private final int computeOomAdjLocked(ProcessRecord paramProcessRecord1, int paramInt, ProcessRecord paramProcessRecord2, boolean paramBoolean1, boolean paramBoolean2)
    {
        int i4;
        if (this.mAdjSeq == paramProcessRecord1.adjSeq)
        {
            if ((!paramBoolean1) && (paramProcessRecord1.hidden))
            {
                paramProcessRecord1.nonStoppingAdj = paramInt;
                paramProcessRecord1.curRawAdj = paramInt;
                paramProcessRecord1.curAdj = paramInt;
            }
            i4 = paramProcessRecord1.curRawAdj;
        }
        while (true)
        {
            return i4;
            if (paramProcessRecord1.thread != null)
                break;
            paramProcessRecord1.adjSeq = this.mAdjSeq;
            paramProcessRecord1.curSchedGroup = 0;
            i4 = 15;
            paramProcessRecord1.curAdj = i4;
        }
        paramProcessRecord1.adjTypeCode = 0;
        paramProcessRecord1.adjSource = null;
        paramProcessRecord1.adjTarget = null;
        paramProcessRecord1.empty = false;
        paramProcessRecord1.hidden = false;
        int i = paramProcessRecord1.activities.size();
        if (paramProcessRecord1.maxAdj <= 0)
        {
            paramProcessRecord1.adjType = "fixed";
            paramProcessRecord1.adjSeq = this.mAdjSeq;
            int i20 = paramProcessRecord1.maxAdj;
            paramProcessRecord1.nonStoppingAdj = i20;
            paramProcessRecord1.curRawAdj = i20;
            paramProcessRecord1.foregroundActivities = false;
            paramProcessRecord1.keeping = true;
            paramProcessRecord1.curSchedGroup = -1;
            paramProcessRecord1.systemNoUi = true;
            if (paramProcessRecord1 == paramProcessRecord2)
                paramProcessRecord1.systemNoUi = false;
            label245: 
            while (true)
            {
                i4 = paramProcessRecord1.maxAdj;
                paramProcessRecord1.curAdj = i4;
                break;
                if (i > 0)
                    for (int i21 = 0; ; i21++)
                    {
                        if (i21 >= i)
                            break label245;
                        if (((ActivityRecord)paramProcessRecord1.activities.get(i21)).visible)
                        {
                            paramProcessRecord1.systemNoUi = false;
                            break;
                        }
                    }
            }
        }
        paramProcessRecord1.keeping = false;
        paramProcessRecord1.systemNoUi = false;
        boolean bool1 = false;
        int j = 0;
        int k;
        int m;
        int n;
        int i19;
        ActivityRecord localActivityRecord2;
        label397: long l;
        label610: ServiceRecord localServiceRecord;
        if (Injector.isForegroudApp(this, paramProcessRecord1, paramProcessRecord2))
        {
            k = 0;
            m = -1;
            paramProcessRecord1.adjType = "top-activity";
            bool1 = true;
            j = 1;
            n = 0;
            if ((!bool1) && (i > 0))
            {
                i19 = 0;
                if (i19 < i)
                {
                    localActivityRecord2 = (ActivityRecord)paramProcessRecord1.activities.get(i19);
                    if (!localActivityRecord2.visible)
                        break label943;
                    if (k > 1)
                    {
                        k = 1;
                        paramProcessRecord1.adjType = "visible";
                    }
                    m = -1;
                    paramProcessRecord1.hidden = false;
                    bool1 = true;
                }
            }
            if (k > 2)
            {
                if (!paramProcessRecord1.foregroundServices)
                    break label1020;
                k = 2;
                paramProcessRecord1.hidden = false;
                paramProcessRecord1.adjType = "foreground-service";
                m = -1;
            }
            if (paramProcessRecord1.foregroundServices)
                j = 1;
            if ((k > 3) && (paramProcessRecord1 == this.mHeavyWeightProcess))
            {
                k = 3;
                m = 0;
                paramProcessRecord1.hidden = false;
                paramProcessRecord1.adjType = "heavy";
            }
            if ((k > 6) && (paramProcessRecord1 == this.mHomeProcess))
            {
                k = 6;
                m = 0;
                paramProcessRecord1.hidden = false;
                paramProcessRecord1.adjType = "home";
            }
            if ((k > 7) && (paramProcessRecord1 == this.mPreviousProcess) && (paramProcessRecord1.activities.size() > 0))
            {
                k = 7;
                m = 0;
                paramProcessRecord1.hidden = false;
                paramProcessRecord1.adjType = "previous";
            }
            paramProcessRecord1.adjSeq = this.mAdjSeq;
            paramProcessRecord1.nonStoppingAdj = k;
            paramProcessRecord1.curRawAdj = k;
            if ((this.mBackupTarget != null) && (paramProcessRecord1 == this.mBackupTarget.app) && (k > 4))
            {
                k = 4;
                paramProcessRecord1.adjType = "backup";
                paramProcessRecord1.hidden = false;
            }
            if ((paramProcessRecord1.services.size() == 0) || ((k <= 0) && (m != 0)))
                break label1612;
            l = SystemClock.uptimeMillis();
            Iterator localIterator2 = paramProcessRecord1.services.iterator();
            break label714;
            if ((!localIterator2.hasNext()) || (k <= 0))
                break label1591;
            localServiceRecord = (ServiceRecord)localIterator2.next();
            if (localServiceRecord.startRequested)
            {
                if ((!paramProcessRecord1.hasShownUi) || (paramProcessRecord1 == this.mHomeProcess))
                    break label1057;
                if (k > 5)
                    paramProcessRecord1.adjType = "started-bg-ui-services";
            }
        }
        label714: ConnectionRecord localConnectionRecord;
        while (true)
        {
            paramProcessRecord1.keeping = true;
            if ((localServiceRecord.connections.size() <= 0) || ((k <= 0) && (m != 0)))
                break label610;
            Iterator localIterator3 = localServiceRecord.connections.values().iterator();
            if ((!localIterator3.hasNext()) || (k <= 0))
                break label610;
            ArrayList localArrayList = (ArrayList)localIterator3.next();
            for (int i15 = 0; ; i15++)
            {
                int i16 = localArrayList.size();
                if ((i15 >= i16) || (k <= 0))
                    break;
                localConnectionRecord = (ConnectionRecord)localArrayList.get(i15);
                if (localConnectionRecord.binding.client != paramProcessRecord1)
                    break label1109;
            }
            if (paramProcessRecord1.instrumentationClass != null)
            {
                k = 0;
                m = -1;
                paramProcessRecord1.adjType = "instrumentation";
                j = 1;
                break;
            }
            BroadcastQueue localBroadcastQueue = isReceivingBroadcast(paramProcessRecord1);
            if (localBroadcastQueue != null)
            {
                k = 0;
                if (localBroadcastQueue == this.mFgBroadcastQueue);
                for (m = -1; ; m = 0)
                {
                    paramProcessRecord1.adjType = "broadcast";
                    break;
                }
            }
            if (paramProcessRecord1.executingServices.size() > 0)
            {
                k = 0;
                m = -1;
                paramProcessRecord1.adjType = "exec-service";
                break;
            }
            if (i > 0)
            {
                k = paramInt;
                m = 0;
                paramProcessRecord1.hidden = true;
                paramProcessRecord1.adjType = "bg-activities";
                break;
            }
            k = paramInt;
            m = 0;
            paramProcessRecord1.hidden = true;
            paramProcessRecord1.empty = true;
            paramProcessRecord1.adjType = "bg-empty";
            break;
            label943: if ((localActivityRecord2.state == ActivityStack.ActivityState.PAUSING) || (localActivityRecord2.state == ActivityStack.ActivityState.PAUSED))
            {
                if (k > 2)
                {
                    k = 2;
                    paramProcessRecord1.adjType = "pausing";
                }
                paramProcessRecord1.hidden = false;
                bool1 = true;
            }
            while (true)
            {
                i19++;
                break;
                if (localActivityRecord2.state == ActivityStack.ActivityState.STOPPING)
                {
                    paramProcessRecord1.hidden = false;
                    bool1 = true;
                    n = 1;
                }
            }
            label1020: if (paramProcessRecord1.forcingToForeground == null)
                break label397;
            k = 2;
            paramProcessRecord1.hidden = false;
            paramProcessRecord1.adjType = "force-foreground";
            paramProcessRecord1.adjSource = paramProcessRecord1.forcingToForeground;
            m = -1;
            break label397;
            label1057: if ((l < 1800000L + localServiceRecord.lastActivity) && (k > 5))
            {
                k = 5;
                paramProcessRecord1.adjType = "started-services";
                paramProcessRecord1.hidden = false;
            }
            if (k > 5)
                paramProcessRecord1.adjType = "started-bg-services";
        }
        label1109: ProcessRecord localProcessRecord2;
        int i17;
        label1162: int i18;
        String str;
        if ((0x20 & localConnectionRecord.flags) == 0)
        {
            localProcessRecord2 = localConnectionRecord.binding.client;
            i17 = paramInt;
            if (i17 > localProcessRecord2.hiddenAdj)
            {
                if (localProcessRecord2.hiddenAdj < 1)
                    break label1442;
                i17 = localProcessRecord2.hiddenAdj;
            }
            i18 = computeOomAdjLocked(localProcessRecord2, i17, paramProcessRecord2, true, paramBoolean2);
            str = null;
            if ((0x10 & localConnectionRecord.flags) != 0)
            {
                if ((!paramProcessRecord1.hasShownUi) || (paramProcessRecord1 == this.mHomeProcess))
                    break label1448;
                if (k > i18)
                    str = "bound-bg-ui-services";
                paramProcessRecord1.hidden = false;
                i18 = k;
            }
        }
        while (true)
        {
            if (k > i18)
            {
                if ((!paramProcessRecord1.hasShownUi) || (paramProcessRecord1 == this.mHomeProcess) || (i18 <= 2))
                    break label1482;
                str = "bound-bg-ui-services";
            }
            if (str != null)
            {
                paramProcessRecord1.adjType = str;
                paramProcessRecord1.adjTypeCode = 2;
                paramProcessRecord1.adjSource = localConnectionRecord.binding.client;
                paramProcessRecord1.adjSourceOom = i18;
                paramProcessRecord1.adjTarget = localServiceRecord.name;
            }
            if (((0x4 & localConnectionRecord.flags) == 0) && (localProcessRecord2.curSchedGroup == -1))
                m = -1;
            if ((0x80 & localConnectionRecord.flags) == 0)
                break;
            ActivityRecord localActivityRecord1 = localConnectionRecord.activity;
            if ((localActivityRecord1 == null) || (k <= 0) || ((!localActivityRecord1.visible) && (localActivityRecord1.state != ActivityStack.ActivityState.RESUMED) && (localActivityRecord1.state != ActivityStack.ActivityState.PAUSING)))
                break;
            k = 0;
            if ((0x4 & localConnectionRecord.flags) == 0)
                m = -1;
            paramProcessRecord1.hidden = false;
            paramProcessRecord1.adjType = "service";
            paramProcessRecord1.adjTypeCode = 2;
            paramProcessRecord1.adjSource = localActivityRecord1;
            paramProcessRecord1.adjSourceOom = 0;
            paramProcessRecord1.adjTarget = localServiceRecord.name;
            break;
            label1442: i17 = 1;
            break label1162;
            label1448: if (l >= 1800000L + localServiceRecord.lastActivity)
            {
                if (k > i18)
                    str = "bound-bg-services";
                i18 = k;
            }
        }
        label1482: if ((0x48 & localConnectionRecord.flags) != 0)
            k = i18;
        while (true)
        {
            if (!localProcessRecord2.hidden)
                paramProcessRecord1.hidden = false;
            if (localProcessRecord2.keeping)
                paramProcessRecord1.keeping = true;
            str = "service";
            break;
            if (((0x40000000 & localConnectionRecord.flags) != 0) && (i18 < 2) && (k > 2))
            {
                k = 2;
            }
            else if (i18 > 1)
            {
                k = i18;
            }
            else
            {
                paramProcessRecord1.pendingUiClean = true;
                if (k > 1)
                    k = 1;
            }
        }
        label1591: if (k > paramInt)
        {
            k = paramInt;
            paramProcessRecord1.hidden = false;
            paramProcessRecord1.adjType = "bg-services";
        }
        label1612: if ((paramProcessRecord1.pubProviders.size() != 0) && ((k > 0) || (m == 0)))
        {
            Iterator localIterator1 = paramProcessRecord1.pubProviders.values().iterator();
            while ((localIterator1.hasNext()) && ((k > 0) || (m == 0)))
            {
                ContentProviderRecord localContentProviderRecord = (ContentProviderRecord)localIterator1.next();
                int i12 = -1 + localContentProviderRecord.connections.size();
                while ((i12 >= 0) && ((k > 0) || (m == 0)))
                {
                    ProcessRecord localProcessRecord1 = ((ContentProviderConnection)localContentProviderRecord.connections.get(i12)).client;
                    if (localProcessRecord1 == paramProcessRecord1)
                    {
                        i12--;
                    }
                    else
                    {
                        int i13 = paramInt;
                        if (i13 > localProcessRecord1.hiddenAdj)
                            if (localProcessRecord1.hiddenAdj <= 0)
                                break label1882;
                        int i14;
                        label1882: for (i13 = localProcessRecord1.hiddenAdj; ; i13 = 0)
                        {
                            i14 = computeOomAdjLocked(localProcessRecord1, i13, paramProcessRecord2, true, paramBoolean2);
                            if (k > i14)
                            {
                                if ((!paramProcessRecord1.hasShownUi) || (paramProcessRecord1 == this.mHomeProcess) || (i14 <= 2))
                                    break label1888;
                                paramProcessRecord1.adjType = "bg-ui-provider";
                                if (!localProcessRecord1.hidden)
                                    paramProcessRecord1.hidden = false;
                                if (localProcessRecord1.keeping)
                                    paramProcessRecord1.keeping = true;
                                paramProcessRecord1.adjTypeCode = 1;
                                paramProcessRecord1.adjSource = localProcessRecord1;
                                paramProcessRecord1.adjSourceOom = i14;
                                paramProcessRecord1.adjTarget = localContentProviderRecord.name;
                            }
                            if (localProcessRecord1.curSchedGroup != -1)
                                break;
                            m = -1;
                            break;
                        }
                        label1888: if (i14 > 0);
                        for (k = i14; ; k = 0)
                        {
                            paramProcessRecord1.adjType = "provider";
                            break;
                        }
                    }
                }
                if ((localContentProviderRecord.hasExternalProcessHandles()) && (k > 0))
                {
                    k = 0;
                    m = -1;
                    paramProcessRecord1.hidden = false;
                    paramProcessRecord1.keeping = true;
                    paramProcessRecord1.adjType = "provider";
                    paramProcessRecord1.adjTarget = localContentProviderRecord.name;
                }
            }
        }
        boolean bool4;
        label1989: label2016: int i1;
        label2101: label2156: int i3;
        label2172: int i5;
        label2223: int i8;
        if (k == 5)
            if (paramBoolean2)
            {
                if (this.mNewNumServiceProcs > this.mNumServiceProcs / 3)
                {
                    bool4 = true;
                    paramProcessRecord1.serviceb = bool4;
                    this.mNewNumServiceProcs = (1 + this.mNewNumServiceProcs);
                }
            }
            else
            {
                if (paramProcessRecord1.serviceb)
                    k = 8;
                paramProcessRecord1.nonStoppingAdj = k;
                if ((n != 0) && (k > 2))
                {
                    k = 2;
                    paramProcessRecord1.adjType = "stopping";
                }
                paramProcessRecord1.curRawAdj = k;
                if (k > paramProcessRecord1.maxAdj)
                {
                    k = paramProcessRecord1.maxAdj;
                    if (paramProcessRecord1.maxAdj <= 2)
                        m = -1;
                }
                if (k < ProcessList.HIDDEN_APP_MIN_ADJ)
                    paramProcessRecord1.keeping = true;
                if ((paramProcessRecord1.hasAboveClient) && (k >= 0))
                    break label2418;
                i1 = paramProcessRecord1.memImportance;
                if ((i1 != 0) && (k == paramProcessRecord1.curAdj))
                {
                    int i11 = paramProcessRecord1.curSchedGroup;
                    if (m == i11);
                }
                else
                {
                    paramProcessRecord1.curAdj = k;
                    paramProcessRecord1.curSchedGroup = m;
                    if (j != 0)
                        break label2471;
                    i1 = 400;
                }
                int i2 = paramProcessRecord1.memImportance;
                if (i1 == i2)
                    break label2592;
                i3 = 2;
                boolean bool2 = paramProcessRecord1.foregroundActivities;
                if (bool1 != bool2)
                    i3 |= 1;
                if (i3 != 0)
                {
                    paramProcessRecord1.memImportance = i1;
                    paramProcessRecord1.foregroundActivities = bool1;
                    i5 = -1 + this.mPendingProcessChanges.size();
                    localProcessChangeItem = null;
                    if (i5 >= 0)
                    {
                        localProcessChangeItem = (ProcessChangeItem)this.mPendingProcessChanges.get(i5);
                        if (localProcessChangeItem.pid != paramProcessRecord1.pid)
                            break label2598;
                    }
                    if (i5 < 0)
                    {
                        i8 = this.mAvailProcessChanges.size();
                        if (i8 <= 0)
                            break label2604;
                    }
                }
            }
        label2471: label2604: for (ProcessChangeItem localProcessChangeItem = (ProcessChangeItem)this.mAvailProcessChanges.remove(i8 - 1); ; localProcessChangeItem = new ProcessChangeItem())
        {
            localProcessChangeItem.changes = 0;
            int i9 = paramProcessRecord1.pid;
            localProcessChangeItem.pid = i9;
            int i10 = paramProcessRecord1.info.uid;
            localProcessChangeItem.uid = i10;
            if (this.mPendingProcessChanges.size() == 0)
                this.mHandler.obtainMessage(31).sendToTarget();
            this.mPendingProcessChanges.add(localProcessChangeItem);
            int i6 = i3 | localProcessChangeItem.changes;
            localProcessChangeItem.changes = i6;
            int i7 = i1;
            localProcessChangeItem.importance = i7;
            boolean bool3 = bool1;
            localProcessChangeItem.foregroundActivities = bool3;
            i4 = paramProcessRecord1.curRawAdj;
            break;
            bool4 = false;
            break label1989;
            paramProcessRecord1.serviceb = false;
            break label2016;
            label2418: if (k < 1)
            {
                k = 1;
                break label2101;
            }
            if (k < 2)
            {
                k = 2;
                break label2101;
            }
            if (k < ProcessList.HIDDEN_APP_MIN_ADJ)
            {
                k = ProcessList.HIDDEN_APP_MIN_ADJ;
                break label2101;
            }
            if (k >= 15)
                break label2101;
            k++;
            break label2101;
            if (k >= ProcessList.HIDDEN_APP_MIN_ADJ)
            {
                i1 = 400;
                break label2156;
            }
            if (k >= 8)
            {
                i1 = 300;
                break label2156;
            }
            if (k >= 6)
            {
                i1 = 400;
                break label2156;
            }
            if (k >= 5)
            {
                i1 = 300;
                break label2156;
            }
            if (k >= 3)
            {
                i1 = 170;
                break label2156;
            }
            if (k >= 2)
            {
                i1 = 130;
                break label2156;
            }
            if (k >= 1)
            {
                i1 = 200;
                break label2156;
            }
            if (k >= 0)
            {
                i1 = 100;
                break label2156;
            }
            i1 = 50;
            break label2156;
            i3 = 0;
            break label2172;
            i5--;
            break label2223;
        }
    }

    @MiuiHook(MiuiHook.MiuiHookType.CHANGE_CODE)
    private void crashApplication(ProcessRecord paramProcessRecord, ApplicationErrorReport.CrashInfo paramCrashInfo)
    {
        long l1 = System.currentTimeMillis();
        String str1 = paramCrashInfo.exceptionClassName;
        String str2 = paramCrashInfo.exceptionMessage;
        String str3 = paramCrashInfo.stackTrace;
        AppErrorResult localAppErrorResult;
        if ((str1 != null) && (str2 != null))
        {
            str2 = str1 + ": " + str2;
            localAppErrorResult = new AppErrorResult();
        }
        while (true)
        {
            label92: long l2;
            try
            {
                while (true)
                {
                    IActivityController localIActivityController = this.mController;
                    if (localIActivityController != null)
                    {
                        if (paramProcessRecord != null);
                        try
                        {
                            String str4 = paramProcessRecord.processName;
                            if (paramProcessRecord != null);
                            int j;
                            for (int k = paramProcessRecord.pid; ; k = j)
                            {
                                if (this.mController.appCrashed(str4, k, str1, str2, l1, paramCrashInfo.stackTrace))
                                    break label205;
                                Slog.w("ActivityManager", "Force-killing crashed app " + str4 + " at watcher's request");
                                Process.killProcess(k);
                                return;
                                if (str1 == null)
                                    break;
                                str2 = str1;
                                break;
                                str4 = null;
                                break label92;
                                j = Binder.getCallingPid();
                            }
                        }
                        catch (RemoteException localRemoteException)
                        {
                            this.mController = null;
                        }
                    }
                }
                label205: l2 = Binder.clearCallingIdentity();
                if ((paramProcessRecord != null) && (paramProcessRecord.instrumentationClass != null))
                {
                    Slog.w("ActivityManager", "Error in app " + paramProcessRecord.processName + " running instrumentation " + paramProcessRecord.instrumentationClass + ":");
                    if (str1 != null)
                        Slog.w("ActivityManager", "    " + str1);
                    if (str2 != null)
                        Slog.w("ActivityManager", "    " + str2);
                    Bundle localBundle = new Bundle();
                    localBundle.putString("shortMsg", str1);
                    localBundle.putString("longMsg", str2);
                    finishInstrumentationLocked(paramProcessRecord, 0, localBundle);
                    Binder.restoreCallingIdentity(l2);
                    continue;
                }
            }
            finally
            {
            }
            if ((paramProcessRecord == null) || (!makeAppCrashingLocked(paramProcessRecord, str1, str2, str3)))
            {
                Binder.restoreCallingIdentity(l2);
                continue;
            }
            Message localMessage = Message.obtain();
            localMessage.what = 1;
            HashMap localHashMap = new HashMap();
            localHashMap.put("result", localAppErrorResult);
            localHashMap.put("app", paramProcessRecord);
            localHashMap.put("crash", paramCrashInfo);
            localMessage.obj = localHashMap;
            this.mHandler.sendMessage(localMessage);
            Binder.restoreCallingIdentity(l2);
            int i = localAppErrorResult.get();
            Intent localIntent = null;
            if (paramProcessRecord != null);
            try
            {
                if (!paramProcessRecord.isolated)
                    this.mProcessCrashTimes.put(paramProcessRecord.info.processName, paramProcessRecord.uid, Long.valueOf(SystemClock.uptimeMillis()));
                if (i == 1)
                    localIntent = createAppErrorIntentLocked(paramProcessRecord, l1, paramCrashInfo);
                if (localIntent == null)
                    continue;
                try
                {
                    this.mContext.startActivity(localIntent);
                }
                catch (ActivityNotFoundException localActivityNotFoundException)
                {
                    Slog.w("ActivityManager", "bug report receiver dissappeared", localActivityNotFoundException);
                }
            }
            finally
            {
            }
        }
    }

    private ApplicationErrorReport createAppErrorReportLocked(ProcessRecord paramProcessRecord, long paramLong, ApplicationErrorReport.CrashInfo paramCrashInfo)
    {
        ApplicationErrorReport localApplicationErrorReport = null;
        if (paramProcessRecord.errorReportReceiver == null);
        while (true)
        {
            return localApplicationErrorReport;
            if ((paramProcessRecord.crashing) || (paramProcessRecord.notResponding))
            {
                localApplicationErrorReport = new ApplicationErrorReport();
                localApplicationErrorReport.packageName = paramProcessRecord.info.packageName;
                localApplicationErrorReport.installerPackageName = paramProcessRecord.errorReportReceiver.getPackageName();
                localApplicationErrorReport.processName = paramProcessRecord.processName;
                localApplicationErrorReport.time = paramLong;
                if ((0x1 & paramProcessRecord.info.flags) != 0);
                for (boolean bool = true; ; bool = false)
                {
                    localApplicationErrorReport.systemApp = bool;
                    if (!paramProcessRecord.crashing)
                        break label126;
                    localApplicationErrorReport.type = 1;
                    localApplicationErrorReport.crashInfo = paramCrashInfo;
                    break;
                }
                label126: if (paramProcessRecord.notResponding)
                {
                    localApplicationErrorReport.type = 2;
                    localApplicationErrorReport.anrInfo = new ApplicationErrorReport.AnrInfo();
                    localApplicationErrorReport.anrInfo.activity = paramProcessRecord.notRespondingReport.tag;
                    localApplicationErrorReport.anrInfo.cause = paramProcessRecord.notRespondingReport.shortMsg;
                    localApplicationErrorReport.anrInfo.info = paramProcessRecord.notRespondingReport.longMsg;
                }
            }
        }
    }

    private void dispatchProcessDied(int paramInt1, int paramInt2)
    {
        int i = this.mProcessObservers.beginBroadcast();
        while (i > 0)
        {
            i--;
            IProcessObserver localIProcessObserver = (IProcessObserver)this.mProcessObservers.getBroadcastItem(i);
            if (localIProcessObserver != null)
                try
                {
                    localIProcessObserver.onProcessDied(paramInt1, paramInt2);
                }
                catch (RemoteException localRemoteException)
                {
                }
        }
        this.mProcessObservers.finishBroadcast();
    }

    // ERROR //
    private void dispatchProcessesChanged()
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_0
        //     3: getfield 719	com/android/server/am/ActivityManagerService:mPendingProcessChanges	Ljava/util/ArrayList;
        //     6: invokevirtual 1313	java/util/ArrayList:size	()I
        //     9: istore_2
        //     10: aload_0
        //     11: getfield 717	com/android/server/am/ActivityManagerService:mActiveProcessChanges	[Lcom/android/server/am/ActivityManagerService$ProcessChangeItem;
        //     14: arraylength
        //     15: iload_2
        //     16: if_icmpge +11 -> 27
        //     19: aload_0
        //     20: iload_2
        //     21: anewarray 77	com/android/server/am/ActivityManagerService$ProcessChangeItem
        //     24: putfield 717	com/android/server/am/ActivityManagerService:mActiveProcessChanges	[Lcom/android/server/am/ActivityManagerService$ProcessChangeItem;
        //     27: aload_0
        //     28: getfield 719	com/android/server/am/ActivityManagerService:mPendingProcessChanges	Ljava/util/ArrayList;
        //     31: aload_0
        //     32: getfield 717	com/android/server/am/ActivityManagerService:mActiveProcessChanges	[Lcom/android/server/am/ActivityManagerService$ProcessChangeItem;
        //     35: invokevirtual 2532	java/util/ArrayList:toArray	([Ljava/lang/Object;)[Ljava/lang/Object;
        //     38: pop
        //     39: aload_0
        //     40: getfield 721	com/android/server/am/ActivityManagerService:mAvailProcessChanges	Ljava/util/ArrayList;
        //     43: aload_0
        //     44: getfield 719	com/android/server/am/ActivityManagerService:mPendingProcessChanges	Ljava/util/ArrayList;
        //     47: invokevirtual 2536	java/util/ArrayList:addAll	(Ljava/util/Collection;)Z
        //     50: pop
        //     51: aload_0
        //     52: getfield 719	com/android/server/am/ActivityManagerService:mPendingProcessChanges	Ljava/util/ArrayList;
        //     55: invokevirtual 1529	java/util/ArrayList:clear	()V
        //     58: aload_0
        //     59: monitorexit
        //     60: aload_0
        //     61: getfield 715	com/android/server/am/ActivityManagerService:mProcessObservers	Landroid/os/RemoteCallbackList;
        //     64: invokevirtual 2516	android/os/RemoteCallbackList:beginBroadcast	()I
        //     67: istore 5
        //     69: iload 5
        //     71: ifle +118 -> 189
        //     74: iinc 5 255
        //     77: aload_0
        //     78: getfield 715	com/android/server/am/ActivityManagerService:mProcessObservers	Landroid/os/RemoteCallbackList;
        //     81: iload 5
        //     83: invokevirtual 2520	android/os/RemoteCallbackList:getBroadcastItem	(I)Landroid/os/IInterface;
        //     86: checkcast 2522	android/app/IProcessObserver
        //     89: astore 6
        //     91: aload 6
        //     93: ifnull -24 -> 69
        //     96: iconst_0
        //     97: istore 7
        //     99: iload 7
        //     101: iload_2
        //     102: if_icmpge -33 -> 69
        //     105: aload_0
        //     106: getfield 717	com/android/server/am/ActivityManagerService:mActiveProcessChanges	[Lcom/android/server/am/ActivityManagerService$ProcessChangeItem;
        //     109: iload 7
        //     111: aaload
        //     112: astore 9
        //     114: iconst_1
        //     115: aload 9
        //     117: getfield 2358	com/android/server/am/ActivityManagerService$ProcessChangeItem:changes	I
        //     120: iand
        //     121: ifeq +25 -> 146
        //     124: aload 6
        //     126: aload 9
        //     128: getfield 2112	com/android/server/am/ActivityManagerService$ProcessChangeItem:pid	I
        //     131: aload 9
        //     133: getfield 2359	com/android/server/am/ActivityManagerService$ProcessChangeItem:uid	I
        //     136: aload 9
        //     138: getfield 2363	com/android/server/am/ActivityManagerService$ProcessChangeItem:foregroundActivities	Z
        //     141: invokeinterface 2540 4 0
        //     146: iconst_2
        //     147: aload 9
        //     149: getfield 2358	com/android/server/am/ActivityManagerService$ProcessChangeItem:changes	I
        //     152: iand
        //     153: ifeq +25 -> 178
        //     156: aload 6
        //     158: aload 9
        //     160: getfield 2112	com/android/server/am/ActivityManagerService$ProcessChangeItem:pid	I
        //     163: aload 9
        //     165: getfield 2359	com/android/server/am/ActivityManagerService$ProcessChangeItem:uid	I
        //     168: aload 9
        //     170: getfield 2362	com/android/server/am/ActivityManagerService$ProcessChangeItem:importance	I
        //     173: invokeinterface 2544 4 0
        //     178: iinc 7 1
        //     181: goto -82 -> 99
        //     184: astore_1
        //     185: aload_0
        //     186: monitorexit
        //     187: aload_1
        //     188: athrow
        //     189: aload_0
        //     190: getfield 715	com/android/server/am/ActivityManagerService:mProcessObservers	Landroid/os/RemoteCallbackList;
        //     193: invokevirtual 2528	android/os/RemoteCallbackList:finishBroadcast	()V
        //     196: return
        //     197: astore 8
        //     199: goto -130 -> 69
        //
        // Exception table:
        //     from	to	target	type
        //     2	60	184	finally
        //     185	187	184	finally
        //     105	178	197	android/os/RemoteException
    }

    // ERROR //
    private void dumpActivity(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, ActivityRecord paramActivityRecord, String[] paramArrayOfString, boolean paramBoolean)
    {
        // Byte code:
        //     0: new 598	java/lang/StringBuilder
        //     3: dup
        //     4: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     7: aload_1
        //     8: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     11: ldc_w 1873
        //     14: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     17: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     20: astore 7
        //     22: aload_0
        //     23: monitorenter
        //     24: aload_3
        //     25: aload_1
        //     26: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     29: aload_3
        //     30: ldc_w 2553
        //     33: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     36: aload_3
        //     37: aload 4
        //     39: getfield 2556	com/android/server/am/ActivityRecord:shortComponentName	Ljava/lang/String;
        //     42: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     45: aload_3
        //     46: ldc_w 2558
        //     49: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     52: aload_3
        //     53: aload 4
        //     55: invokestatic 1488	java/lang/System:identityHashCode	(Ljava/lang/Object;)I
        //     58: invokestatic 2561	java/lang/Integer:toHexString	(I)Ljava/lang/String;
        //     61: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     64: aload_3
        //     65: ldc_w 2563
        //     68: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     71: aload 4
        //     73: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     76: ifnull +104 -> 180
        //     79: aload_3
        //     80: aload 4
        //     82: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     85: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     88: invokevirtual 2566	java/io/PrintWriter:println	(I)V
        //     91: iload 6
        //     93: ifeq +11 -> 104
        //     96: aload 4
        //     98: aload_3
        //     99: aload 7
        //     101: invokevirtual 2570	com/android/server/am/ActivityRecord:dump	(Ljava/io/PrintWriter;Ljava/lang/String;)V
        //     104: aload_0
        //     105: monitorexit
        //     106: aload 4
        //     108: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     111: ifnull +68 -> 179
        //     114: aload 4
        //     116: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     119: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     122: ifnull +57 -> 179
        //     125: aload_3
        //     126: invokevirtual 2573	java/io/PrintWriter:flush	()V
        //     129: new 2575	com/android/server/am/TransferPipe
        //     132: dup
        //     133: invokespecial 2576	com/android/server/am/TransferPipe:<init>	()V
        //     136: astore 9
        //     138: aload 4
        //     140: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     143: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     146: aload 9
        //     148: invokevirtual 2579	com/android/server/am/TransferPipe:getWriteFd	()Landroid/os/ParcelFileDescriptor;
        //     151: invokevirtual 2583	android/os/ParcelFileDescriptor:getFileDescriptor	()Ljava/io/FileDescriptor;
        //     154: aload 4
        //     156: getfield 2587	com/android/server/am/ActivityRecord:appToken	Landroid/view/IApplicationToken$Stub;
        //     159: aload 7
        //     161: aload 5
        //     163: invokeinterface 2590 5 0
        //     168: aload 9
        //     170: aload_2
        //     171: invokevirtual 2594	com/android/server/am/TransferPipe:go	(Ljava/io/FileDescriptor;)V
        //     174: aload 9
        //     176: invokevirtual 2597	com/android/server/am/TransferPipe:kill	()V
        //     179: return
        //     180: aload_3
        //     181: ldc_w 2599
        //     184: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     187: goto -96 -> 91
        //     190: astore 8
        //     192: aload_0
        //     193: monitorexit
        //     194: aload 8
        //     196: athrow
        //     197: astore 10
        //     199: aload 9
        //     201: invokevirtual 2597	com/android/server/am/TransferPipe:kill	()V
        //     204: aload 10
        //     206: athrow
        //     207: astore 12
        //     209: aload_3
        //     210: new 598	java/lang/StringBuilder
        //     213: dup
        //     214: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     217: aload 7
        //     219: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     222: ldc_w 2603
        //     225: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     228: aload 12
        //     230: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     233: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     236: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     239: goto -60 -> 179
        //     242: astore 11
        //     244: aload_3
        //     245: new 598	java/lang/StringBuilder
        //     248: dup
        //     249: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     252: aload 7
        //     254: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     257: ldc_w 2605
        //     260: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     263: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     266: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     269: goto -90 -> 179
        //
        // Exception table:
        //     from	to	target	type
        //     24	106	190	finally
        //     180	194	190	finally
        //     138	174	197	finally
        //     129	138	207	java/io/IOException
        //     174	179	207	java/io/IOException
        //     199	207	207	java/io/IOException
        //     129	138	242	android/os/RemoteException
        //     174	179	242	android/os/RemoteException
        //     199	207	242	android/os/RemoteException
    }

    // ERROR //
    private static final void dumpHistoryList(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, List paramList, String paramString1, String paramString2, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, String paramString3)
    {
        // Byte code:
        //     0: aconst_null
        //     1: astore 9
        //     3: iconst_0
        //     4: istore 10
        //     6: new 598	java/lang/StringBuilder
        //     9: dup
        //     10: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     13: aload_3
        //     14: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     17: ldc_w 2609
        //     20: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     23: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     26: astore 11
        //     28: iconst_0
        //     29: anewarray 428	java/lang/String
        //     32: astore 12
        //     34: bipush 255
        //     36: aload_2
        //     37: invokeinterface 1801 1 0
        //     42: iadd
        //     43: istore 13
        //     45: iload 13
        //     47: iflt +490 -> 537
        //     50: aload_2
        //     51: iload 13
        //     53: invokeinterface 1826 2 0
        //     58: checkcast 1290	com/android/server/am/ActivityRecord
        //     61: astore 14
        //     63: aload 8
        //     65: ifnull +22 -> 87
        //     68: aload 8
        //     70: aload 14
        //     72: getfield 2610	com/android/server/am/ActivityRecord:packageName	Ljava/lang/String;
        //     75: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     78: ifne +9 -> 87
        //     81: iinc 13 255
        //     84: goto -39 -> 45
        //     87: iload 6
        //     89: ifne +262 -> 351
        //     92: iload 5
        //     94: ifne +11 -> 105
        //     97: aload 14
        //     99: invokevirtual 2613	com/android/server/am/ActivityRecord:isInHistory	()Z
        //     102: ifne +249 -> 351
        //     105: iconst_1
        //     106: istore 15
        //     108: iload 10
        //     110: ifeq +13 -> 123
        //     113: aload_1
        //     114: ldc_w 2558
        //     117: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     120: iconst_0
        //     121: istore 10
        //     123: aload 9
        //     125: aload 14
        //     127: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     130: if_acmpeq +68 -> 198
        //     133: aload 14
        //     135: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     138: astore 9
        //     140: aload_1
        //     141: aload_3
        //     142: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     145: iload 15
        //     147: ifeq +210 -> 357
        //     150: ldc_w 2619
        //     153: astore 21
        //     155: aload_1
        //     156: aload 21
        //     158: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     161: aload_1
        //     162: aload 9
        //     164: invokevirtual 2622	java/io/PrintWriter:println	(Ljava/lang/Object;)V
        //     167: iload 15
        //     169: ifeq +196 -> 365
        //     172: aload 9
        //     174: aload_1
        //     175: new 598	java/lang/StringBuilder
        //     178: dup
        //     179: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     182: aload_3
        //     183: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     186: ldc_w 1873
        //     189: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     192: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     195: invokevirtual 2623	com/android/server/am/TaskRecord:dump	(Ljava/io/PrintWriter;Ljava/lang/String;)V
        //     198: aload_1
        //     199: aload_3
        //     200: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     203: iload 15
        //     205: ifeq +200 -> 405
        //     208: ldc_w 2625
        //     211: astore 16
        //     213: aload_1
        //     214: aload 16
        //     216: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     219: aload_1
        //     220: aload 4
        //     222: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     225: aload_1
        //     226: ldc_w 2627
        //     229: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     232: aload_1
        //     233: iload 13
        //     235: invokevirtual 2629	java/io/PrintWriter:print	(I)V
        //     238: aload_1
        //     239: ldc_w 1602
        //     242: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     245: aload_1
        //     246: aload 14
        //     248: invokevirtual 2622	java/io/PrintWriter:println	(Ljava/lang/Object;)V
        //     251: iload 15
        //     253: ifeq +160 -> 413
        //     256: aload 14
        //     258: aload_1
        //     259: aload 11
        //     261: invokevirtual 2570	com/android/server/am/ActivityRecord:dump	(Ljava/io/PrintWriter;Ljava/lang/String;)V
        //     264: iload 7
        //     266: ifeq -185 -> 81
        //     269: aload 14
        //     271: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     274: ifnull -193 -> 81
        //     277: aload 14
        //     279: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     282: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     285: ifnull -204 -> 81
        //     288: aload_1
        //     289: invokevirtual 2573	java/io/PrintWriter:flush	()V
        //     292: new 2575	com/android/server/am/TransferPipe
        //     295: dup
        //     296: invokespecial 2576	com/android/server/am/TransferPipe:<init>	()V
        //     299: astore 17
        //     301: aload 14
        //     303: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     306: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     309: aload 17
        //     311: invokevirtual 2579	com/android/server/am/TransferPipe:getWriteFd	()Landroid/os/ParcelFileDescriptor;
        //     314: invokevirtual 2583	android/os/ParcelFileDescriptor:getFileDescriptor	()Ljava/io/FileDescriptor;
        //     317: aload 14
        //     319: getfield 2587	com/android/server/am/ActivityRecord:appToken	Landroid/view/IApplicationToken$Stub;
        //     322: aload 11
        //     324: aload 12
        //     326: invokeinterface 2590 5 0
        //     331: aload 17
        //     333: aload_0
        //     334: ldc2_w 2630
        //     337: invokevirtual 2634	com/android/server/am/TransferPipe:go	(Ljava/io/FileDescriptor;J)V
        //     340: aload 17
        //     342: invokevirtual 2597	com/android/server/am/TransferPipe:kill	()V
        //     345: iconst_1
        //     346: istore 10
        //     348: goto -267 -> 81
        //     351: iconst_0
        //     352: istore 15
        //     354: goto -246 -> 108
        //     357: ldc_w 1873
        //     360: astore 21
        //     362: goto -207 -> 155
        //     365: iload 5
        //     367: ifeq -169 -> 198
        //     370: aload 9
        //     372: getfield 2149	com/android/server/am/TaskRecord:intent	Landroid/content/Intent;
        //     375: ifnull -177 -> 198
        //     378: aload_1
        //     379: aload_3
        //     380: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     383: aload_1
        //     384: ldc_w 1873
        //     387: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     390: aload_1
        //     391: aload 9
        //     393: getfield 2149	com/android/server/am/TaskRecord:intent	Landroid/content/Intent;
        //     396: invokevirtual 2637	android/content/Intent:toInsecureStringWithClip	()Ljava/lang/String;
        //     399: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     402: goto -204 -> 198
        //     405: ldc_w 2639
        //     408: astore 16
        //     410: goto -197 -> 213
        //     413: iload 5
        //     415: ifeq -151 -> 264
        //     418: aload_1
        //     419: aload 11
        //     421: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     424: aload_1
        //     425: aload 14
        //     427: getfield 1351	com/android/server/am/ActivityRecord:intent	Landroid/content/Intent;
        //     430: invokevirtual 2642	android/content/Intent:toInsecureString	()Ljava/lang/String;
        //     433: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     436: aload 14
        //     438: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     441: ifnull -177 -> 264
        //     444: aload_1
        //     445: aload 11
        //     447: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     450: aload_1
        //     451: aload 14
        //     453: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     456: invokevirtual 2622	java/io/PrintWriter:println	(Ljava/lang/Object;)V
        //     459: goto -195 -> 264
        //     462: astore 18
        //     464: aload 17
        //     466: invokevirtual 2597	com/android/server/am/TransferPipe:kill	()V
        //     469: aload 18
        //     471: athrow
        //     472: astore 20
        //     474: aload_1
        //     475: new 598	java/lang/StringBuilder
        //     478: dup
        //     479: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     482: aload 11
        //     484: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     487: ldc_w 2603
        //     490: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     493: aload 20
        //     495: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     498: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     501: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     504: goto -159 -> 345
        //     507: astore 19
        //     509: aload_1
        //     510: new 598	java/lang/StringBuilder
        //     513: dup
        //     514: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     517: aload 11
        //     519: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     522: ldc_w 2605
        //     525: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     528: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     531: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     534: goto -189 -> 345
        //     537: return
        //
        // Exception table:
        //     from	to	target	type
        //     301	340	462	finally
        //     292	301	472	java/io/IOException
        //     340	345	472	java/io/IOException
        //     464	472	472	java/io/IOException
        //     292	301	507	android/os/RemoteException
        //     340	345	507	android/os/RemoteException
        //     464	472	507	android/os/RemoteException
    }

    static final void dumpMemItems(PrintWriter paramPrintWriter, String paramString, ArrayList<MemItem> paramArrayList, boolean paramBoolean)
    {
        if (paramBoolean)
            Collections.sort(paramArrayList, new Comparator()
            {
                public int compare(ActivityManagerService.MemItem paramAnonymousMemItem1, ActivityManagerService.MemItem paramAnonymousMemItem2)
                {
                    int i;
                    if (paramAnonymousMemItem1.pss < paramAnonymousMemItem2.pss)
                        i = 1;
                    while (true)
                    {
                        return i;
                        if (paramAnonymousMemItem1.pss > paramAnonymousMemItem2.pss)
                            i = -1;
                        else
                            i = 0;
                    }
                }
            });
        for (int i = 0; i < paramArrayList.size(); i++)
        {
            MemItem localMemItem = (MemItem)paramArrayList.get(i);
            paramPrintWriter.print(paramString);
            Object[] arrayOfObject = new Object[1];
            arrayOfObject[0] = Long.valueOf(localMemItem.pss);
            paramPrintWriter.printf("%7d kB: ", arrayOfObject);
            paramPrintWriter.println(localMemItem.label);
            if (localMemItem.subitems != null)
                dumpMemItems(paramPrintWriter, paramString + "                     ", localMemItem.subitems, true);
        }
    }

    private static final int dumpProcessList(PrintWriter paramPrintWriter, ActivityManagerService paramActivityManagerService, List paramList, String paramString1, String paramString2, String paramString3, String paramString4)
    {
        int i = 0;
        int j = -1 + paramList.size();
        while (j >= 0)
        {
            ProcessRecord localProcessRecord = (ProcessRecord)paramList.get(j);
            if ((paramString4 != null) && (!paramString4.equals(localProcessRecord.info.packageName)))
            {
                j--;
            }
            else
            {
                Object[] arrayOfObject = new Object[4];
                arrayOfObject[0] = paramString1;
                if (localProcessRecord.persistent);
                for (String str = paramString3; ; str = paramString2)
                {
                    arrayOfObject[1] = str;
                    arrayOfObject[2] = Integer.valueOf(j);
                    arrayOfObject[3] = localProcessRecord.toString();
                    paramPrintWriter.println(String.format("%s%s #%2d: %s", arrayOfObject));
                    if (!localProcessRecord.persistent)
                        break;
                    i++;
                    break;
                }
            }
        }
        return i;
    }

    private static final boolean dumpProcessOomList(PrintWriter paramPrintWriter, ActivityManagerService paramActivityManagerService, List<ProcessRecord> paramList, String paramString1, String paramString2, String paramString3, boolean paramBoolean, String paramString4)
    {
        ArrayList localArrayList = new ArrayList(paramList.size());
        int i = 0;
        if (i < paramList.size())
        {
            ProcessRecord localProcessRecord2 = (ProcessRecord)paramList.get(i);
            if ((paramString4 != null) && (!paramString4.equals(localProcessRecord2.info.packageName)));
            while (true)
            {
                i++;
                break;
                localArrayList.add(new Pair(paramList.get(i), Integer.valueOf(i)));
            }
        }
        if (localArrayList.size() <= 0);
        for (boolean bool = false; ; bool = true)
        {
            return bool;
            Collections.sort(localArrayList, new Comparator()
            {
                public int compare(Pair<ProcessRecord, Integer> paramAnonymousPair1, Pair<ProcessRecord, Integer> paramAnonymousPair2)
                {
                    int i = -1;
                    int j;
                    if (((ProcessRecord)paramAnonymousPair1.first).setAdj != ((ProcessRecord)paramAnonymousPair2.first).setAdj)
                        if (((ProcessRecord)paramAnonymousPair1.first).setAdj > ((ProcessRecord)paramAnonymousPair2.first).setAdj)
                            j = i;
                    while (true)
                    {
                        return j;
                        j = 1;
                        continue;
                        if (((Integer)paramAnonymousPair1.second).intValue() != ((Integer)paramAnonymousPair2.second).intValue())
                        {
                            if (((Integer)paramAnonymousPair1.second).intValue() > ((Integer)paramAnonymousPair2.second).intValue());
                            while (true)
                            {
                                j = i;
                                break;
                                i = 1;
                            }
                        }
                        j = 0;
                    }
                }
            });
            long l1 = SystemClock.elapsedRealtime();
            long l2 = l1 - paramActivityManagerService.mLastPowerCheckRealtime;
            long l3 = SystemClock.uptimeMillis() - paramActivityManagerService.mLastPowerCheckUptime;
            int j = -1 + localArrayList.size();
            while (j >= 0)
            {
                ProcessRecord localProcessRecord1 = (ProcessRecord)((Pair)localArrayList.get(j)).first;
                String str1;
                label211: String str2;
                label250: String str3;
                label263: String str4;
                if (localProcessRecord1.setAdj >= ProcessList.HIDDEN_APP_MIN_ADJ)
                {
                    str1 = buildOomTag("bak", "    ", localProcessRecord1.setAdj, ProcessList.HIDDEN_APP_MIN_ADJ);
                    switch (localProcessRecord1.setSchedGroup)
                    {
                    default:
                        str2 = Integer.toString(localProcessRecord1.setSchedGroup);
                        if (localProcessRecord1.foregroundActivities)
                        {
                            str3 = "A";
                            Object[] arrayOfObject = new Object[9];
                            arrayOfObject[0] = paramString1;
                            if (!localProcessRecord1.persistent)
                                break label1265;
                            str4 = paramString3;
                            label287: arrayOfObject[1] = str4;
                            arrayOfObject[2] = Integer.valueOf(-1 + paramList.size() - ((Integer)((Pair)localArrayList.get(j)).second).intValue());
                            arrayOfObject[3] = str1;
                            arrayOfObject[4] = str2;
                            arrayOfObject[5] = str3;
                            arrayOfObject[6] = Integer.valueOf(localProcessRecord1.trimMemoryLevel);
                            arrayOfObject[7] = localProcessRecord1.toShortString();
                            arrayOfObject[8] = localProcessRecord1.adjType;
                            paramPrintWriter.println(String.format("%s%s #%2d: adj=%s/%s%s trm=%2d %s (%s)", arrayOfObject));
                            if ((localProcessRecord1.adjSource != null) || (localProcessRecord1.adjTarget != null))
                            {
                                paramPrintWriter.print(paramString1);
                                paramPrintWriter.print("        ");
                                if (!(localProcessRecord1.adjTarget instanceof ComponentName))
                                    break label1272;
                                paramPrintWriter.print(((ComponentName)localProcessRecord1.adjTarget).flattenToShortString());
                                label446: paramPrintWriter.print("<=");
                                if (!(localProcessRecord1.adjSource instanceof ProcessRecord))
                                    break label1305;
                                paramPrintWriter.print("Proc{");
                                paramPrintWriter.print(((ProcessRecord)localProcessRecord1.adjSource).toShortString());
                                paramPrintWriter.println("}");
                            }
                            label493: if (paramBoolean)
                            {
                                paramPrintWriter.print(paramString1);
                                paramPrintWriter.print("        ");
                                paramPrintWriter.print("oom: max=");
                                paramPrintWriter.print(localProcessRecord1.maxAdj);
                                paramPrintWriter.print(" hidden=");
                                paramPrintWriter.print(localProcessRecord1.hiddenAdj);
                                paramPrintWriter.print(" curRaw=");
                                paramPrintWriter.print(localProcessRecord1.curRawAdj);
                                paramPrintWriter.print(" setRaw=");
                                paramPrintWriter.print(localProcessRecord1.setRawAdj);
                                paramPrintWriter.print(" cur=");
                                paramPrintWriter.print(localProcessRecord1.curAdj);
                                paramPrintWriter.print(" set=");
                                paramPrintWriter.println(localProcessRecord1.setAdj);
                                paramPrintWriter.print(paramString1);
                                paramPrintWriter.print("        ");
                                paramPrintWriter.print("keeping=");
                                paramPrintWriter.print(localProcessRecord1.keeping);
                                paramPrintWriter.print(" hidden=");
                                paramPrintWriter.print(localProcessRecord1.hidden);
                                paramPrintWriter.print(" empty=");
                                paramPrintWriter.print(localProcessRecord1.empty);
                                paramPrintWriter.print(" hasAboveClient=");
                                paramPrintWriter.println(localProcessRecord1.hasAboveClient);
                                if ((!localProcessRecord1.keeping) && (localProcessRecord1.lastWakeTime == 0L))
                                    break;
                            }
                        }
                        break;
                    case 0:
                    case -1:
                    }
                }
                synchronized (paramActivityManagerService.mBatteryStatsService.getActiveStatistics())
                {
                    long l5 = ???.getProcessWakeTime(localProcessRecord1.info.uid, localProcessRecord1.pid, l1);
                    long l6 = l5 - localProcessRecord1.lastWakeTime;
                    paramPrintWriter.print(paramString1);
                    paramPrintWriter.print("        ");
                    paramPrintWriter.print("keep awake over ");
                    TimeUtils.formatDuration(l2, paramPrintWriter);
                    paramPrintWriter.print(" used ");
                    TimeUtils.formatDuration(l6, paramPrintWriter);
                    paramPrintWriter.print(" (");
                    paramPrintWriter.print(100L * l6 / l2);
                    paramPrintWriter.println("%)");
                    if (localProcessRecord1.lastCpuTime != 0L)
                    {
                        long l4 = localProcessRecord1.curCpuTime - localProcessRecord1.lastCpuTime;
                        paramPrintWriter.print(paramString1);
                        paramPrintWriter.print("        ");
                        paramPrintWriter.print("run cpu over ");
                        TimeUtils.formatDuration(l3, paramPrintWriter);
                        paramPrintWriter.print(" used ");
                        TimeUtils.formatDuration(l4, paramPrintWriter);
                        paramPrintWriter.print(" (");
                        paramPrintWriter.print(100L * l4 / l3);
                        paramPrintWriter.println("%)");
                    }
                    j--;
                    continue;
                    if (localProcessRecord1.setAdj >= 8)
                    {
                        str1 = buildOomTag("svcb ", null, localProcessRecord1.setAdj, 8);
                        break label211;
                    }
                    if (localProcessRecord1.setAdj >= 7)
                    {
                        str1 = buildOomTag("prev ", null, localProcessRecord1.setAdj, 7);
                        break label211;
                    }
                    if (localProcessRecord1.setAdj >= 6)
                    {
                        str1 = buildOomTag("home ", null, localProcessRecord1.setAdj, 6);
                        break label211;
                    }
                    if (localProcessRecord1.setAdj >= 5)
                    {
                        str1 = buildOomTag("svc    ", null, localProcessRecord1.setAdj, 5);
                        break label211;
                    }
                    if (localProcessRecord1.setAdj >= 4)
                    {
                        str1 = buildOomTag("bkup ", null, localProcessRecord1.setAdj, 4);
                        break label211;
                    }
                    if (localProcessRecord1.setAdj >= 3)
                    {
                        str1 = buildOomTag("hvy    ", null, localProcessRecord1.setAdj, 3);
                        break label211;
                    }
                    if (localProcessRecord1.setAdj >= 2)
                    {
                        str1 = buildOomTag("prcp ", null, localProcessRecord1.setAdj, 2);
                        break label211;
                    }
                    if (localProcessRecord1.setAdj >= 1)
                    {
                        str1 = buildOomTag("vis    ", null, localProcessRecord1.setAdj, 1);
                        break label211;
                    }
                    if (localProcessRecord1.setAdj >= 0)
                    {
                        str1 = buildOomTag("fore ", null, localProcessRecord1.setAdj, 0);
                        break label211;
                    }
                    if (localProcessRecord1.setAdj >= -12)
                    {
                        str1 = buildOomTag("pers ", null, localProcessRecord1.setAdj, -12);
                        break label211;
                    }
                    if (localProcessRecord1.setAdj >= -16)
                    {
                        str1 = buildOomTag("sys    ", null, localProcessRecord1.setAdj, -16);
                        break label211;
                    }
                    str1 = Integer.toString(localProcessRecord1.setAdj);
                    break label211;
                    str2 = "B";
                    break label250;
                    str2 = "F";
                    break label250;
                    if (localProcessRecord1.foregroundServices)
                    {
                        str3 = "S";
                        break label263;
                    }
                    str3 = " ";
                    break label263;
                    label1265: str4 = paramString2;
                    break label287;
                    label1272: if (localProcessRecord1.adjTarget != null)
                    {
                        paramPrintWriter.print(localProcessRecord1.adjTarget.toString());
                        break label446;
                    }
                    paramPrintWriter.print("{null}");
                    break label446;
                    label1305: if (localProcessRecord1.adjSource != null)
                    {
                        paramPrintWriter.println(localProcessRecord1.adjSource.toString());
                        break label493;
                    }
                    paramPrintWriter.println("{null}");
                }
            }
        }
    }

    // ERROR //
    private void dumpService(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, ServiceRecord paramServiceRecord, String[] paramArrayOfString, boolean paramBoolean)
    {
        // Byte code:
        //     0: new 598	java/lang/StringBuilder
        //     3: dup
        //     4: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     7: aload_1
        //     8: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     11: ldc_w 1873
        //     14: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     17: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     20: astore 7
        //     22: aload_0
        //     23: monitorenter
        //     24: aload_3
        //     25: aload_1
        //     26: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     29: aload_3
        //     30: ldc_w 2812
        //     33: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     36: aload_3
        //     37: aload 4
        //     39: getfield 1375	com/android/server/am/ServiceRecord:shortName	Ljava/lang/String;
        //     42: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     45: aload_3
        //     46: ldc_w 2558
        //     49: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     52: aload_3
        //     53: aload 4
        //     55: invokestatic 1488	java/lang/System:identityHashCode	(Ljava/lang/Object;)I
        //     58: invokestatic 2561	java/lang/Integer:toHexString	(I)Ljava/lang/String;
        //     61: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     64: aload_3
        //     65: ldc_w 2563
        //     68: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     71: aload 4
        //     73: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     76: ifnull +136 -> 212
        //     79: aload_3
        //     80: aload 4
        //     82: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     85: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     88: invokevirtual 2566	java/io/PrintWriter:println	(I)V
        //     91: iload 6
        //     93: ifeq +11 -> 104
        //     96: aload 4
        //     98: aload_3
        //     99: aload 7
        //     101: invokevirtual 2813	com/android/server/am/ServiceRecord:dump	(Ljava/io/PrintWriter;Ljava/lang/String;)V
        //     104: aload_0
        //     105: monitorexit
        //     106: aload 4
        //     108: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     111: ifnull +100 -> 211
        //     114: aload 4
        //     116: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     119: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     122: ifnull +89 -> 211
        //     125: aload_3
        //     126: aload_1
        //     127: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     130: aload_3
        //     131: ldc_w 2815
        //     134: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     137: aload_3
        //     138: invokevirtual 2573	java/io/PrintWriter:flush	()V
        //     141: new 2575	com/android/server/am/TransferPipe
        //     144: dup
        //     145: invokespecial 2576	com/android/server/am/TransferPipe:<init>	()V
        //     148: astore 9
        //     150: aload 4
        //     152: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     155: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     158: aload 9
        //     160: invokevirtual 2579	com/android/server/am/TransferPipe:getWriteFd	()Landroid/os/ParcelFileDescriptor;
        //     163: invokevirtual 2583	android/os/ParcelFileDescriptor:getFileDescriptor	()Ljava/io/FileDescriptor;
        //     166: aload 4
        //     168: aload 5
        //     170: invokeinterface 2818 4 0
        //     175: aload 9
        //     177: new 598	java/lang/StringBuilder
        //     180: dup
        //     181: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     184: aload_1
        //     185: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     188: ldc_w 2639
        //     191: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     194: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     197: invokevirtual 2821	com/android/server/am/TransferPipe:setBufferPrefix	(Ljava/lang/String;)V
        //     200: aload 9
        //     202: aload_2
        //     203: invokevirtual 2594	com/android/server/am/TransferPipe:go	(Ljava/io/FileDescriptor;)V
        //     206: aload 9
        //     208: invokevirtual 2597	com/android/server/am/TransferPipe:kill	()V
        //     211: return
        //     212: aload_3
        //     213: ldc_w 2599
        //     216: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     219: goto -128 -> 91
        //     222: astore 8
        //     224: aload_0
        //     225: monitorexit
        //     226: aload 8
        //     228: athrow
        //     229: astore 10
        //     231: aload 9
        //     233: invokevirtual 2597	com/android/server/am/TransferPipe:kill	()V
        //     236: aload 10
        //     238: athrow
        //     239: astore 12
        //     241: aload_3
        //     242: new 598	java/lang/StringBuilder
        //     245: dup
        //     246: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     249: aload_1
        //     250: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     253: ldc_w 2823
        //     256: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     259: aload 12
        //     261: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     264: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     267: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     270: goto -59 -> 211
        //     273: astore 11
        //     275: aload_3
        //     276: new 598	java/lang/StringBuilder
        //     279: dup
        //     280: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     283: aload_1
        //     284: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     287: ldc_w 2825
        //     290: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     293: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     296: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     299: goto -88 -> 211
        //
        // Exception table:
        //     from	to	target	type
        //     24	106	222	finally
        //     212	226	222	finally
        //     150	206	229	finally
        //     141	150	239	java/io/IOException
        //     206	211	239	java/io/IOException
        //     231	239	239	java/io/IOException
        //     141	150	273	android/os/RemoteException
        //     206	211	273	android/os/RemoteException
        //     231	239	273	android/os/RemoteException
    }

    public static File dumpStackTraces(boolean paramBoolean, ArrayList<Integer> paramArrayList, ProcessStats paramProcessStats, SparseArray<Boolean> paramSparseArray, String[] paramArrayOfString)
    {
        String str = SystemProperties.get("dalvik.vm.stack-trace-file", null);
        File localFile1;
        if ((str == null) || (str.length() == 0))
            localFile1 = null;
        while (true)
        {
            return localFile1;
            localFile1 = new File(str);
            try
            {
                File localFile2 = localFile1.getParentFile();
                if (!localFile2.exists())
                    localFile1.mkdirs();
                FileUtils.setPermissions(localFile2.getPath(), 509, -1, -1);
                if ((paramBoolean) && (localFile1.exists()))
                    localFile1.delete();
                localFile1.createNewFile();
                FileUtils.setPermissions(localFile1.getPath(), 438, -1, -1);
                dumpStackTraces(str, paramArrayList, paramProcessStats, paramSparseArray, paramArrayOfString);
            }
            catch (IOException localIOException)
            {
                Slog.w("ActivityManager", "Unable to prepare ANR traces file: " + str, localIOException);
                localFile1 = null;
            }
        }
    }

    // ERROR //
    private static void dumpStackTraces(String paramString, ArrayList<Integer> paramArrayList, ProcessStats paramProcessStats, SparseArray<Boolean> paramSparseArray, String[] paramArrayOfString)
    {
        // Byte code:
        //     0: new 26	com/android/server/am/ActivityManagerService$4
        //     3: dup
        //     4: aload_0
        //     5: bipush 8
        //     7: invokespecial 2858	com/android/server/am/ActivityManagerService$4:<init>	(Ljava/lang/String;I)V
        //     10: astore 5
        //     12: aload 5
        //     14: invokevirtual 2863	android/os/FileObserver:startWatching	()V
        //     17: aload_1
        //     18: ifnull +73 -> 91
        //     21: aload_1
        //     22: invokevirtual 1313	java/util/ArrayList:size	()I
        //     25: istore 22
        //     27: iconst_0
        //     28: istore 23
        //     30: iload 23
        //     32: iload 22
        //     34: if_icmpge +57 -> 91
        //     37: aload 5
        //     39: monitorenter
        //     40: aload_1
        //     41: iload 23
        //     43: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     46: checkcast 1001	java/lang/Integer
        //     49: invokevirtual 2710	java/lang/Integer:intValue	()I
        //     52: iconst_3
        //     53: invokestatic 2866	android/os/Process:sendSignal	(II)V
        //     56: aload 5
        //     58: ldc2_w 2867
        //     61: invokevirtual 2871	java/lang/Object:wait	(J)V
        //     64: aload 5
        //     66: monitorexit
        //     67: iinc 23 1
        //     70: goto -40 -> 30
        //     73: astore 24
        //     75: aload 5
        //     77: monitorexit
        //     78: aload 24
        //     80: athrow
        //     81: astore 20
        //     83: ldc 221
        //     85: aload 20
        //     87: invokestatic 2877	android/util/Log:wtf	(Ljava/lang/String;Ljava/lang/Throwable;)I
        //     90: pop
        //     91: aload_2
        //     92: ifnull +153 -> 245
        //     95: aload_2
        //     96: invokevirtual 898	com/android/internal/os/ProcessStats:init	()V
        //     99: invokestatic 2880	java/lang/System:gc	()V
        //     102: aload_2
        //     103: invokevirtual 2883	com/android/internal/os/ProcessStats:update	()V
        //     106: aload_2
        //     107: monitorenter
        //     108: aload_2
        //     109: ldc2_w 2884
        //     112: invokevirtual 2871	java/lang/Object:wait	(J)V
        //     115: aload_2
        //     116: monitorexit
        //     117: aload_2
        //     118: invokevirtual 2883	com/android/internal/os/ProcessStats:update	()V
        //     121: aload_2
        //     122: invokevirtual 2888	com/android/internal/os/ProcessStats:countWorkingStats	()I
        //     125: istore 11
        //     127: iconst_0
        //     128: istore 12
        //     130: iconst_0
        //     131: istore 13
        //     133: iload 13
        //     135: iload 11
        //     137: if_icmpge +108 -> 245
        //     140: iload 12
        //     142: iconst_5
        //     143: if_icmpge +102 -> 245
        //     146: aload_2
        //     147: iload 13
        //     149: invokevirtual 2892	com/android/internal/os/ProcessStats:getWorkingStats	(I)Lcom/android/internal/os/ProcessStats$Stats;
        //     152: astore 14
        //     154: aload_3
        //     155: aload 14
        //     157: getfield 2895	com/android/internal/os/ProcessStats$Stats:pid	I
        //     160: invokevirtual 2898	android/util/SparseArray:indexOfKey	(I)I
        //     163: istore 15
        //     165: iload 15
        //     167: iflt +29 -> 196
        //     170: iinc 12 1
        //     173: aload 5
        //     175: monitorenter
        //     176: aload 14
        //     178: getfield 2895	com/android/internal/os/ProcessStats$Stats:pid	I
        //     181: iconst_3
        //     182: invokestatic 2866	android/os/Process:sendSignal	(II)V
        //     185: aload 5
        //     187: ldc2_w 2867
        //     190: invokevirtual 2871	java/lang/Object:wait	(J)V
        //     193: aload 5
        //     195: monitorexit
        //     196: iinc 13 1
        //     199: goto -66 -> 133
        //     202: astore 19
        //     204: aload_2
        //     205: monitorexit
        //     206: aload 19
        //     208: athrow
        //     209: astore 10
        //     211: goto -94 -> 117
        //     214: astore 18
        //     216: aload 5
        //     218: monitorexit
        //     219: aload 18
        //     221: athrow
        //     222: astore 16
        //     224: ldc 221
        //     226: aload 16
        //     228: invokestatic 2877	android/util/Log:wtf	(Ljava/lang/String;Ljava/lang/Throwable;)I
        //     231: pop
        //     232: goto -36 -> 196
        //     235: astore 6
        //     237: aload 5
        //     239: invokevirtual 2901	android/os/FileObserver:stopWatching	()V
        //     242: aload 6
        //     244: athrow
        //     245: aload 5
        //     247: invokevirtual 2901	android/os/FileObserver:stopWatching	()V
        //     250: aload 4
        //     252: ifnull +45 -> 297
        //     255: aload 4
        //     257: invokestatic 2905	android/os/Process:getPidsForCommands	([Ljava/lang/String;)[I
        //     260: astore 7
        //     262: aload 7
        //     264: ifnull +33 -> 297
        //     267: aload 7
        //     269: arraylength
        //     270: istore 8
        //     272: iconst_0
        //     273: istore 9
        //     275: iload 9
        //     277: iload 8
        //     279: if_icmpge +18 -> 297
        //     282: aload 7
        //     284: iload 9
        //     286: iaload
        //     287: aload_0
        //     288: invokestatic 2911	android/os/Debug:dumpNativeBacktraceToFile	(ILjava/lang/String;)V
        //     291: iinc 9 1
        //     294: goto -19 -> 275
        //     297: return
        //
        // Exception table:
        //     from	to	target	type
        //     40	78	73	finally
        //     21	40	81	java/lang/InterruptedException
        //     78	81	81	java/lang/InterruptedException
        //     108	117	202	finally
        //     204	206	202	finally
        //     106	108	209	java/lang/InterruptedException
        //     206	209	209	java/lang/InterruptedException
        //     176	196	214	finally
        //     216	219	214	finally
        //     173	176	222	java/lang/InterruptedException
        //     219	222	222	java/lang/InterruptedException
        //     12	17	235	finally
        //     21	40	235	finally
        //     78	81	235	finally
        //     83	106	235	finally
        //     106	108	235	finally
        //     117	165	235	finally
        //     173	176	235	finally
        //     206	209	235	finally
        //     219	222	235	finally
        //     224	232	235	finally
    }

    private void fillInProcMemInfo(ProcessRecord paramProcessRecord, ActivityManager.RunningAppProcessInfo paramRunningAppProcessInfo)
    {
        paramRunningAppProcessInfo.pid = paramProcessRecord.pid;
        paramRunningAppProcessInfo.uid = paramProcessRecord.info.uid;
        if (this.mHeavyWeightProcess == paramProcessRecord)
            paramRunningAppProcessInfo.flags = (0x1 | paramRunningAppProcessInfo.flags);
        if (paramProcessRecord.persistent)
            paramRunningAppProcessInfo.flags = (0x2 | paramRunningAppProcessInfo.flags);
        paramRunningAppProcessInfo.lastTrimLevel = paramProcessRecord.trimMemoryLevel;
        paramRunningAppProcessInfo.importance = oomAdjToImportance(paramProcessRecord.curAdj, paramRunningAppProcessInfo);
        paramRunningAppProcessInfo.importanceReasonCode = paramProcessRecord.adjTypeCode;
    }

    private final int findAffinityTaskTopLocked(int paramInt, String paramString)
    {
        TaskRecord localTaskRecord1 = ((ActivityRecord)this.mMainStack.mHistory.get(paramInt)).task;
        TaskRecord localTaskRecord2 = localTaskRecord1;
        int i = paramInt - 1;
        int m;
        if (i >= 0)
        {
            ActivityRecord localActivityRecord2 = (ActivityRecord)this.mMainStack.mHistory.get(i);
            if (localActivityRecord2.task != localTaskRecord2)
            {
                localTaskRecord2 = localActivityRecord2.task;
                if (paramString.equals(localTaskRecord2.affinity))
                    m = i;
            }
        }
        while (true)
        {
            return m;
            i--;
            break;
            int j = this.mMainStack.mHistory.size();
            TaskRecord localTaskRecord3 = localTaskRecord1;
            for (int k = paramInt + 1; ; k++)
            {
                if (k >= j)
                    break label176;
                ActivityRecord localActivityRecord1 = (ActivityRecord)this.mMainStack.mHistory.get(k);
                if (localActivityRecord1.task != localTaskRecord3)
                {
                    if (paramString.equals(localTaskRecord3.affinity))
                    {
                        m = k;
                        break;
                    }
                    localTaskRecord3 = localActivityRecord1.task;
                }
            }
            label176: if (paramString.equals(((ActivityRecord)this.mMainStack.mHistory.get(j - 1)).task.affinity))
                m = j - 1;
            else
                m = -1;
        }
    }

    // ERROR //
    private ProcessRecord findAppProcess(IBinder paramIBinder, String paramString)
    {
        // Byte code:
        //     0: aload_1
        //     1: ifnonnull +9 -> 10
        //     4: aconst_null
        //     5: astore 6
        //     7: aload 6
        //     9: areturn
        //     10: aload_0
        //     11: monitorenter
        //     12: aload_0
        //     13: getfield 557	com/android/server/am/ActivityManagerService:mProcessNames	Lcom/android/server/ProcessMap;
        //     16: invokevirtual 2177	com/android/server/ProcessMap:getMap	()Ljava/util/HashMap;
        //     19: invokevirtual 1409	java/util/HashMap:values	()Ljava/util/Collection;
        //     22: invokeinterface 1412 1 0
        //     27: astore 4
        //     29: aload 4
        //     31: invokeinterface 1016 1 0
        //     36: ifeq +82 -> 118
        //     39: aload 4
        //     41: invokeinterface 1020 1 0
        //     46: checkcast 559	android/util/SparseArray
        //     49: astore 7
        //     51: aload 7
        //     53: invokevirtual 2178	android/util/SparseArray:size	()I
        //     56: istore 8
        //     58: iconst_0
        //     59: istore 9
        //     61: iload 9
        //     63: iload 8
        //     65: if_icmpge -36 -> 29
        //     68: aload 7
        //     70: iload 9
        //     72: invokevirtual 2181	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
        //     75: checkcast 982	com/android/server/am/ProcessRecord
        //     78: astore 6
        //     80: aload 6
        //     82: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     85: ifnull +27 -> 112
        //     88: aload 6
        //     90: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     93: invokeinterface 1126 1 0
        //     98: aload_1
        //     99: if_acmpne +13 -> 112
        //     102: aload_0
        //     103: monitorexit
        //     104: goto -97 -> 7
        //     107: astore_3
        //     108: aload_0
        //     109: monitorexit
        //     110: aload_3
        //     111: athrow
        //     112: iinc 9 1
        //     115: goto -54 -> 61
        //     118: ldc 221
        //     120: new 598	java/lang/StringBuilder
        //     123: dup
        //     124: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     127: ldc_w 2941
        //     130: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     133: aload_2
        //     134: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     137: ldc_w 1751
        //     140: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     143: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     146: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     149: ldc_w 2943
        //     152: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     155: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     158: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     161: ldc_w 1602
        //     164: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     167: aload_1
        //     168: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     171: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     174: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     177: pop
        //     178: aload_0
        //     179: monitorexit
        //     180: aconst_null
        //     181: astore 6
        //     183: goto -176 -> 7
        //
        // Exception table:
        //     from	to	target	type
        //     12	110	107	finally
        //     118	180	107	finally
    }

    private ServiceLookupResult findServiceLocked(Intent paramIntent, String paramString, int paramInt)
    {
        Object localObject = null;
        if (paramIntent.getComponent() != null)
            localObject = this.mServiceMap.getServiceByName(paramIntent.getComponent(), paramInt);
        if (localObject == null)
        {
            Intent.FilterComparison localFilterComparison = new Intent.FilterComparison(paramIntent);
            localObject = this.mServiceMap.getServiceByIntent(localFilterComparison, paramInt);
        }
        if (localObject == null);
        while (true)
        {
            ServiceInfo localServiceInfo;
            ServiceLookupResult localServiceLookupResult;
            try
            {
                ResolveInfo localResolveInfo = AppGlobals.getPackageManager().resolveService(paramIntent, paramString, 0, paramInt);
                if (localResolveInfo != null)
                {
                    localServiceInfo = localResolveInfo.serviceInfo;
                    break label399;
                    ComponentName localComponentName = new ComponentName(localServiceInfo.applicationInfo.packageName, localServiceInfo.name);
                    ServiceRecord localServiceRecord = this.mServiceMap.getServiceByName(localComponentName, Binder.getOrigCallingUser());
                    localObject = localServiceRecord;
                    if (localObject != null)
                    {
                        int i = Binder.getCallingPid();
                        int j = Binder.getCallingUid();
                        if (checkComponentPermission(((ServiceRecord)localObject).permission, i, j, ((ServiceRecord)localObject).appInfo.uid, ((ServiceRecord)localObject).exported) != 0)
                        {
                            if (!((ServiceRecord)localObject).exported)
                            {
                                Slog.w("ActivityManager", "Permission Denial: Accessing service " + ((ServiceRecord)localObject).name + " from pid=" + i + ", uid=" + j + " that is not exported from uid " + ((ServiceRecord)localObject).appInfo.uid);
                                localServiceLookupResult = new ServiceLookupResult(null, "not exported from uid " + ((ServiceRecord)localObject).appInfo.uid);
                            }
                            else
                            {
                                Slog.w("ActivityManager", "Permission Denial: Accessing service " + ((ServiceRecord)localObject).name + " from pid=" + i + ", uid=" + j + " requires " + ((ServiceRecord)localObject).permission);
                                localServiceLookupResult = new ServiceLookupResult(null, ((ServiceRecord)localObject).permission);
                            }
                        }
                        else
                            localServiceLookupResult = new ServiceLookupResult((ServiceRecord)localObject, null);
                    }
                    else
                    {
                        localServiceLookupResult = null;
                    }
                }
            }
            catch (RemoteException localRemoteException)
            {
                continue;
            }
            label399: 
            while (localServiceInfo == null)
            {
                localServiceLookupResult = null;
                return localServiceLookupResult;
                localServiceInfo = null;
            }
        }
    }

    private final ServiceRecord findServiceLocked(ComponentName paramComponentName, IBinder paramIBinder)
    {
        ServiceRecord localServiceRecord = this.mServiceMap.getServiceByName(paramComponentName, Binder.getOrigCallingUser());
        if (localServiceRecord == paramIBinder);
        while (true)
        {
            return localServiceRecord;
            localServiceRecord = null;
        }
    }

    private final boolean finishReceiverLocked(IBinder paramIBinder, int paramInt, String paramString, Bundle paramBundle, boolean paramBoolean1, boolean paramBoolean2)
    {
        BroadcastRecord localBroadcastRecord = broadcastRecordForReceiverLocked(paramIBinder);
        if (localBroadcastRecord == null)
            Slog.w("ActivityManager", "finishReceiver called but not found on queue");
        for (boolean bool = false; ; bool = localBroadcastRecord.queue.finishReceiverLocked(localBroadcastRecord, paramInt, paramString, paramBundle, paramBoolean1, paramBoolean2))
            return bool;
    }

    private void forceStopPackageLocked(String paramString, int paramInt)
    {
        forceStopPackageLocked(paramString, paramInt, false, false, true, false, UserId.getUserId(paramInt));
        Intent localIntent = new Intent("android.intent.action.PACKAGE_RESTARTED", Uri.fromParts("package", paramString, null));
        if (!this.mProcessesReady)
            localIntent.addFlags(1073741824);
        localIntent.putExtra("android.intent.extra.UID", paramInt);
        broadcastIntentLocked(null, null, localIntent, null, null, 0, null, null, null, false, false, MY_PID, 1000, UserId.getUserId(paramInt));
    }

    private final boolean forceStopPackageLocked(String paramString, int paramInt1, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4, int paramInt2)
    {
        if (paramInt1 < 0);
        try
        {
            int i1 = AppGlobals.getPackageManager().getPackageUid(paramString, paramInt2);
            paramInt1 = i1;
            label20: if (paramBoolean3)
            {
                Slog.i("ActivityManager", "Force stopping package " + paramString + " uid=" + paramInt1);
                Iterator localIterator3 = this.mProcessCrashTimes.getMap().values().iterator();
                while (localIterator3.hasNext())
                    if (((SparseArray)localIterator3.next()).get(paramInt1) != null)
                        localIterator3.remove();
            }
            boolean bool1 = killPackageProcessesLocked(paramString, paramInt1, -100, paramBoolean1, false, paramBoolean3, paramBoolean4, "force stop");
            TaskRecord localTaskRecord = null;
            int i = 0;
            ActivityRecord localActivityRecord;
            boolean bool3;
            boolean bool2;
            while (true)
                if (i < this.mMainStack.mHistory.size())
                {
                    localActivityRecord = (ActivityRecord)this.mMainStack.mHistory.get(i);
                    bool3 = localActivityRecord.packageName.equals(paramString);
                    if ((localActivityRecord.userId == paramInt2) && ((bool3) || (localActivityRecord.task == localTaskRecord)) && ((localActivityRecord.app == null) || (paramBoolean4) || (!localActivityRecord.app.persistent)))
                    {
                        if (paramBoolean3)
                            break;
                        if (!localActivityRecord.finishing);
                    }
                    else
                    {
                        i++;
                        continue;
                    }
                    bool2 = true;
                }
            while (true)
            {
                return bool2;
                bool1 = true;
                Slog.i("ActivityManager", "    Force finishing activity " + localActivityRecord);
                if (bool3)
                {
                    if (localActivityRecord.app != null)
                        localActivityRecord.app.removed = true;
                    localActivityRecord.app = null;
                }
                localTaskRecord = localActivityRecord.task;
                if (!localActivityRecord.stack.finishActivityLocked(localActivityRecord, i, 0, null, "force-stop", true))
                    break;
                i--;
                break;
                ArrayList localArrayList1 = new ArrayList();
                Iterator localIterator1 = this.mServiceMap.getAllServices(paramInt2).iterator();
                while (true)
                {
                    if (!localIterator1.hasNext())
                        break label513;
                    ServiceRecord localServiceRecord = (ServiceRecord)localIterator1.next();
                    if ((localServiceRecord.packageName.equals(paramString)) && ((localServiceRecord.app == null) || (paramBoolean4) || (!localServiceRecord.app.persistent)))
                    {
                        if (!paramBoolean3)
                        {
                            bool2 = true;
                            break;
                        }
                        bool1 = true;
                        Slog.i("ActivityManager", "    Force stopping service " + localServiceRecord);
                        if (localServiceRecord.app != null)
                            localServiceRecord.app.removed = true;
                        localServiceRecord.app = null;
                        localServiceRecord.isolatedProc = null;
                        localArrayList1.add(localServiceRecord);
                    }
                }
                label513: int j = localArrayList1.size();
                for (int k = 0; k < j; k++)
                    bringDownServiceLocked((ServiceRecord)localArrayList1.get(k), true);
                ArrayList localArrayList2 = new ArrayList();
                Iterator localIterator2 = this.mProviderMap.getProvidersByClass(paramInt2).values().iterator();
                while (true)
                {
                    if (!localIterator2.hasNext())
                        break label665;
                    ContentProviderRecord localContentProviderRecord = (ContentProviderRecord)localIterator2.next();
                    if ((localContentProviderRecord.info.packageName.equals(paramString)) && ((localContentProviderRecord.proc == null) || (paramBoolean4) || (!localContentProviderRecord.proc.persistent)))
                    {
                        if (!paramBoolean3)
                        {
                            bool2 = true;
                            break;
                        }
                        bool1 = true;
                        localArrayList2.add(localContentProviderRecord);
                    }
                }
                label665: int m = localArrayList2.size();
                for (int n = 0; n < m; n++)
                    removeDyingProviderLocked(null, (ContentProviderRecord)localArrayList2.get(n), true);
                if (paramBoolean3)
                {
                    if (paramBoolean2)
                    {
                        AttributeCache localAttributeCache = AttributeCache.instance();
                        if (localAttributeCache != null)
                            localAttributeCache.removePackage(paramString);
                    }
                    if (this.mBooted)
                    {
                        this.mMainStack.resumeTopActivityLocked(null);
                        this.mMainStack.scheduleIdleLocked();
                    }
                }
                bool2 = bool1;
            }
        }
        catch (RemoteException localRemoteException)
        {
            break label20;
        }
    }

    private final List<ProviderInfo> generateApplicationProvidersLocked(ProcessRecord paramProcessRecord)
    {
        Object localObject = null;
        try
        {
            List localList = AppGlobals.getPackageManager().queryContentProviders(paramProcessRecord.processName, paramProcessRecord.uid, 3072);
            localObject = localList;
            label26: int i = paramProcessRecord.userId;
            if (localObject != null)
            {
                int j = localObject.size();
                for (int k = 0; k < j; k++)
                {
                    ProviderInfo localProviderInfo = (ProviderInfo)localObject.get(k);
                    ComponentName localComponentName = new ComponentName(localProviderInfo.packageName, localProviderInfo.name);
                    ContentProviderRecord localContentProviderRecord = this.mProviderMap.getProviderByClass(localComponentName, i);
                    if (localContentProviderRecord == null)
                    {
                        localContentProviderRecord = new ContentProviderRecord(this, localProviderInfo, paramProcessRecord.info, localComponentName);
                        this.mProviderMap.putProviderByClass(localComponentName, localContentProviderRecord);
                    }
                    paramProcessRecord.pubProviders.put(localProviderInfo.name, localContentProviderRecord);
                    paramProcessRecord.addPackage(localProviderInfo.applicationInfo.packageName);
                    ensurePackageDexOpt(localProviderInfo.applicationInfo.packageName);
                }
            }
            return localObject;
        }
        catch (RemoteException localRemoteException)
        {
            break label26;
        }
    }

    private ActivityManager.ProcessErrorStateInfo generateProcessError(ProcessRecord paramProcessRecord, int paramInt, String paramString1, String paramString2, String paramString3, String paramString4)
    {
        ActivityManager.ProcessErrorStateInfo localProcessErrorStateInfo = new ActivityManager.ProcessErrorStateInfo();
        localProcessErrorStateInfo.condition = paramInt;
        localProcessErrorStateInfo.processName = paramProcessRecord.processName;
        localProcessErrorStateInfo.pid = paramProcessRecord.pid;
        localProcessErrorStateInfo.uid = paramProcessRecord.info.uid;
        localProcessErrorStateInfo.tag = paramString1;
        localProcessErrorStateInfo.shortMsg = paramString2;
        localProcessErrorStateInfo.longMsg = paramString3;
        localProcessErrorStateInfo.stackTrace = paramString4;
        return localProcessErrorStateInfo;
    }

    private ApplicationInfo getAppInfoForUser(ApplicationInfo paramApplicationInfo, int paramInt)
    {
        ApplicationInfo localApplicationInfo;
        if (paramApplicationInfo == null)
            localApplicationInfo = null;
        while (true)
        {
            return localApplicationInfo;
            localApplicationInfo = new ApplicationInfo(paramApplicationInfo);
            localApplicationInfo.uid = applyUserId(paramApplicationInfo.uid, paramInt);
            localApplicationInfo.dataDir = ("/data/user/" + paramInt + "/" + paramApplicationInfo.packageName);
        }
    }

    private static File getCalledPreBootReceiversFile()
    {
        return new File(new File(android.os.Environment.getDataDirectory(), "system"), "called_pre_boots.dat");
    }

    private ActivityRecord getCallingRecordLocked(IBinder paramIBinder)
    {
        ActivityRecord localActivityRecord1 = this.mMainStack.isInStackLocked(paramIBinder);
        if (localActivityRecord1 == null);
        for (ActivityRecord localActivityRecord2 = null; ; localActivityRecord2 = localActivityRecord1.resultTo)
            return localActivityRecord2;
    }

    private HashMap<String, IBinder> getCommonServicesLocked()
    {
        if (this.mAppBindArgs == null)
        {
            this.mAppBindArgs = new HashMap();
            this.mAppBindArgs.put("package", ServiceManager.getService("package"));
            this.mAppBindArgs.put("window", ServiceManager.getService("window"));
            this.mAppBindArgs.put("alarm", ServiceManager.getService("alarm"));
        }
        return this.mAppBindArgs;
    }

    private IActivityManager.ContentProviderHolder getContentProviderExternalUnchecked(String paramString, IBinder paramIBinder)
    {
        return getContentProviderImpl(null, paramString, paramIBinder, true);
    }

    // ERROR //
    private final IActivityManager.ContentProviderHolder getContentProviderImpl(IApplicationThread paramIApplicationThread, String paramString, IBinder paramIBinder, boolean paramBoolean)
    {
        // Byte code:
        //     0: aconst_null
        //     1: astore 5
        //     3: aconst_null
        //     4: astore 6
        //     6: aload_0
        //     7: monitorenter
        //     8: aconst_null
        //     9: astore 7
        //     11: aload_1
        //     12: ifnull +72 -> 84
        //     15: aload_0
        //     16: aload_1
        //     17: invokevirtual 3117	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
        //     20: astore 7
        //     22: aload 7
        //     24: ifnonnull +60 -> 84
        //     27: new 1701	java/lang/SecurityException
        //     30: dup
        //     31: new 598	java/lang/StringBuilder
        //     34: dup
        //     35: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     38: ldc_w 3119
        //     41: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     44: aload_1
        //     45: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     48: ldc_w 1736
        //     51: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     54: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     57: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     60: ldc_w 3121
        //     63: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     66: aload_2
        //     67: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     70: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     73: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     76: athrow
        //     77: astore 20
        //     79: aload_0
        //     80: monitorexit
        //     81: aload 20
        //     83: athrow
        //     84: aload 7
        //     86: ifnull +74 -> 160
        //     89: aload 7
        //     91: getfield 1296	com/android/server/am/ProcessRecord:uid	I
        //     94: istore 8
        //     96: iload 8
        //     98: invokestatic 2005	android/os/UserId:getUserId	(I)I
        //     101: istore 9
        //     103: aload_0
        //     104: getfield 634	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
        //     107: aload_2
        //     108: iload 9
        //     110: invokevirtual 3125	com/android/server/am/ProviderMap:getProviderByName	(Ljava/lang/String;I)Lcom/android/server/am/ContentProviderRecord;
        //     113: astore 10
        //     115: aload 10
        //     117: ifnull +1185 -> 1302
        //     120: iconst_1
        //     121: istore 11
        //     123: iload 11
        //     125: ifeq +263 -> 388
        //     128: aload 10
        //     130: getfield 3043	com/android/server/am/ContentProviderRecord:info	Landroid/content/pm/ProviderInfo;
        //     133: astore 6
        //     135: aload_0
        //     136: aload 6
        //     138: aload 7
        //     140: invokespecial 3127	com/android/server/am/ActivityManagerService:checkContentProviderPermissionLocked	(Landroid/content/pm/ProviderInfo;Lcom/android/server/am/ProcessRecord;)Ljava/lang/String;
        //     143: astore 44
        //     145: aload 44
        //     147: ifnull +21 -> 168
        //     150: new 1701	java/lang/SecurityException
        //     153: dup
        //     154: aload 44
        //     156: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     159: athrow
        //     160: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     163: istore 8
        //     165: goto -69 -> 96
        //     168: aload 7
        //     170: ifnull +32 -> 202
        //     173: aload 10
        //     175: aload 7
        //     177: invokevirtual 3130	com/android/server/am/ContentProviderRecord:canRunHere	(Lcom/android/server/am/ProcessRecord;)Z
        //     180: ifeq +22 -> 202
        //     183: aload 10
        //     185: aconst_null
        //     186: invokevirtual 3134	com/android/server/am/ContentProviderRecord:newHolder	(Lcom/android/server/am/ContentProviderConnection;)Landroid/app/IActivityManager$ContentProviderHolder;
        //     189: astore 14
        //     191: aload 14
        //     193: aconst_null
        //     194: putfield 3137	android/app/IActivityManager$ContentProviderHolder:provider	Landroid/content/IContentProvider;
        //     197: aload_0
        //     198: monitorexit
        //     199: goto +1109 -> 1308
        //     202: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     205: lstore 45
        //     207: aload_0
        //     208: aload 7
        //     210: aload 10
        //     212: aload_3
        //     213: iload 4
        //     215: invokevirtual 3141	com/android/server/am/ActivityManagerService:incProviderCountLocked	(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ContentProviderRecord;Landroid/os/IBinder;Z)Lcom/android/server/am/ContentProviderConnection;
        //     218: astore 5
        //     220: aload 5
        //     222: ifnull +46 -> 268
        //     225: aload 5
        //     227: getfield 3144	com/android/server/am/ContentProviderConnection:stableCount	I
        //     230: aload 5
        //     232: getfield 3147	com/android/server/am/ContentProviderConnection:unstableCount	I
        //     235: iadd
        //     236: iconst_1
        //     237: if_icmpne +31 -> 268
        //     240: aload 10
        //     242: getfield 2063	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
        //     245: ifnull +23 -> 268
        //     248: aload 7
        //     250: getfield 1151	com/android/server/am/ProcessRecord:setAdj	I
        //     253: iconst_2
        //     254: if_icmpgt +14 -> 268
        //     257: aload_0
        //     258: aload 10
        //     260: getfield 2063	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
        //     263: iconst_0
        //     264: iconst_1
        //     265: invokevirtual 1265	com/android/server/am/ActivityManagerService:updateLruProcessLocked	(Lcom/android/server/am/ProcessRecord;ZZ)V
        //     268: aload 10
        //     270: getfield 2063	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
        //     273: ifnull +110 -> 383
        //     276: aload_0
        //     277: aload 10
        //     279: getfield 2063	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
        //     282: invokespecial 1464	com/android/server/am/ActivityManagerService:updateOomAdjLocked	(Lcom/android/server/am/ProcessRecord;)Z
        //     285: ifne +98 -> 383
        //     288: ldc 221
        //     290: new 598	java/lang/StringBuilder
        //     293: dup
        //     294: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     297: ldc_w 3149
        //     300: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     303: aload 10
        //     305: getfield 2340	com/android/server/am/ContentProviderRecord:name	Landroid/content/ComponentName;
        //     308: invokevirtual 1360	android/content/ComponentName:flattenToShortString	()Ljava/lang/String;
        //     311: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     314: ldc_w 3151
        //     317: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     320: aload 7
        //     322: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     325: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     328: invokestatic 784	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //     331: pop
        //     332: aload_0
        //     333: aload 5
        //     335: aload 10
        //     337: aload_3
        //     338: iload 4
        //     340: invokevirtual 3155	com/android/server/am/ActivityManagerService:decProviderCountLocked	(Lcom/android/server/am/ContentProviderConnection;Lcom/android/server/am/ContentProviderRecord;Landroid/os/IBinder;Z)Z
        //     343: istore 48
        //     345: aload_0
        //     346: aload 10
        //     348: getfield 2063	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
        //     351: aload 10
        //     353: getfield 2063	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
        //     356: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     359: aload 10
        //     361: getfield 2063	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
        //     364: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     367: invokevirtual 3159	com/android/server/am/ActivityManagerService:appDiedLocked	(Lcom/android/server/am/ProcessRecord;ILandroid/app/IApplicationThread;)V
        //     370: iload 48
        //     372: ifne +939 -> 1311
        //     375: aconst_null
        //     376: astore 14
        //     378: aload_0
        //     379: monitorexit
        //     380: goto +928 -> 1308
        //     383: lload 45
        //     385: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     388: iload 11
        //     390: ifne +654 -> 1044
        //     393: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     396: aload_2
        //     397: sipush 3072
        //     400: iload 9
        //     402: invokeinterface 3163 4 0
        //     407: astore 43
        //     409: aload 43
        //     411: astore 6
        //     413: aload 6
        //     415: ifnonnull +11 -> 426
        //     418: aconst_null
        //     419: astore 14
        //     421: aload_0
        //     422: monitorexit
        //     423: goto +885 -> 1308
        //     426: aload_0
        //     427: aload 6
        //     429: getfield 3164	android/content/pm/ProviderInfo:processName	Ljava/lang/String;
        //     432: aload 6
        //     434: getfield 1925	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     437: invokevirtual 1786	com/android/server/am/ActivityManagerService:isSingleton	(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;)Z
        //     440: ifeq +6 -> 446
        //     443: iconst_0
        //     444: istore 9
        //     446: aload_0
        //     447: aload 6
        //     449: getfield 1925	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     452: iload 9
        //     454: invokespecial 3166	com/android/server/am/ActivityManagerService:getAppInfoForUser	(Landroid/content/pm/ApplicationInfo;I)Landroid/content/pm/ApplicationInfo;
        //     457: astore 22
        //     459: aload 6
        //     461: aload 22
        //     463: putfield 1925	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     466: aload_0
        //     467: aload 6
        //     469: aload 7
        //     471: invokespecial 3127	com/android/server/am/ActivityManagerService:checkContentProviderPermissionLocked	(Landroid/content/pm/ProviderInfo;Lcom/android/server/am/ProcessRecord;)Ljava/lang/String;
        //     474: astore 23
        //     476: aload 23
        //     478: ifnull +13 -> 491
        //     481: new 1701	java/lang/SecurityException
        //     484: dup
        //     485: aload 23
        //     487: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     490: athrow
        //     491: aload_0
        //     492: getfield 654	com/android/server/am/ActivityManagerService:mProcessesReady	Z
        //     495: ifne +42 -> 537
        //     498: aload_0
        //     499: getfield 662	com/android/server/am/ActivityManagerService:mDidUpdate	Z
        //     502: ifne +35 -> 537
        //     505: aload_0
        //     506: getfield 660	com/android/server/am/ActivityManagerService:mWaitingUpdate	Z
        //     509: ifne +28 -> 537
        //     512: aload 6
        //     514: getfield 3164	android/content/pm/ProviderInfo:processName	Ljava/lang/String;
        //     517: ldc_w 809
        //     520: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     523: ifne +14 -> 537
        //     526: new 1572	java/lang/IllegalArgumentException
        //     529: dup
        //     530: ldc_w 3168
        //     533: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     536: athrow
        //     537: new 1215	android/content/ComponentName
        //     540: dup
        //     541: aload 6
        //     543: getfield 1829	android/content/pm/ComponentInfo:packageName	Ljava/lang/String;
        //     546: aload 6
        //     548: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     551: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     554: astore 24
        //     556: aload_0
        //     557: getfield 634	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
        //     560: aload 24
        //     562: iload 9
        //     564: invokevirtual 3063	com/android/server/am/ProviderMap:getProviderByClass	(Landroid/content/ComponentName;I)Lcom/android/server/am/ContentProviderRecord;
        //     567: astore 25
        //     569: aload 25
        //     571: astore 10
        //     573: aload 10
        //     575: ifnonnull +77 -> 652
        //     578: iconst_1
        //     579: istore 26
        //     581: iload 26
        //     583: ifeq +105 -> 688
        //     586: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     589: aload 6
        //     591: getfield 1925	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     594: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     597: sipush 1024
        //     600: iload 9
        //     602: invokeinterface 3173 4 0
        //     607: astore 39
        //     609: aload 39
        //     611: ifnonnull +47 -> 658
        //     614: ldc 221
        //     616: new 598	java/lang/StringBuilder
        //     619: dup
        //     620: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     623: ldc_w 3175
        //     626: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     629: aload 6
        //     631: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     634: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     637: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     640: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     643: pop
        //     644: aconst_null
        //     645: astore 14
        //     647: aload_0
        //     648: monitorexit
        //     649: goto +659 -> 1308
        //     652: iconst_0
        //     653: istore 26
        //     655: goto -74 -> 581
        //     658: aload_0
        //     659: aload 39
        //     661: iload 9
        //     663: invokespecial 3166	com/android/server/am/ActivityManagerService:getAppInfoForUser	(Landroid/content/pm/ApplicationInfo;I)Landroid/content/pm/ApplicationInfo;
        //     666: astore 40
        //     668: new 2049	com/android/server/am/ContentProviderRecord
        //     671: dup
        //     672: aload_0
        //     673: aload 6
        //     675: aload 40
        //     677: aload 24
        //     679: invokespecial 3066	com/android/server/am/ContentProviderRecord:<init>	(Lcom/android/server/am/ActivityManagerService;Landroid/content/pm/ProviderInfo;Landroid/content/pm/ApplicationInfo;Landroid/content/ComponentName;)V
        //     682: astore 41
        //     684: aload 41
        //     686: astore 10
        //     688: aload 7
        //     690: ifnull +26 -> 716
        //     693: aload 10
        //     695: aload 7
        //     697: invokevirtual 3130	com/android/server/am/ContentProviderRecord:canRunHere	(Lcom/android/server/am/ProcessRecord;)Z
        //     700: ifeq +16 -> 716
        //     703: aload 10
        //     705: aconst_null
        //     706: invokevirtual 3134	com/android/server/am/ContentProviderRecord:newHolder	(Lcom/android/server/am/ContentProviderConnection;)Landroid/app/IActivityManager$ContentProviderHolder;
        //     709: astore 14
        //     711: aload_0
        //     712: monitorexit
        //     713: goto +595 -> 1308
        //     716: aload_0
        //     717: getfield 636	com/android/server/am/ActivityManagerService:mLaunchingProviders	Ljava/util/ArrayList;
        //     720: invokevirtual 1313	java/util/ArrayList:size	()I
        //     723: istore 27
        //     725: iconst_0
        //     726: istore 28
        //     728: iload 28
        //     730: iload 27
        //     732: if_icmpge +17 -> 749
        //     735: aload_0
        //     736: getfield 636	com/android/server/am/ActivityManagerService:mLaunchingProviders	Ljava/util/ArrayList;
        //     739: iload 28
        //     741: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     744: aload 10
        //     746: if_acmpne +161 -> 907
        //     749: iload 28
        //     751: iload 27
        //     753: if_icmplt +241 -> 994
        //     756: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     759: lstore 29
        //     761: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     764: aload 10
        //     766: getfield 3176	com/android/server/am/ContentProviderRecord:appInfo	Landroid/content/pm/ApplicationInfo;
        //     769: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     772: iconst_0
        //     773: iload 9
        //     775: invokeinterface 1583 4 0
        //     780: aload_0
        //     781: aload 6
        //     783: getfield 3164	android/content/pm/ProviderInfo:processName	Ljava/lang/String;
        //     786: aload 10
        //     788: getfield 3176	com/android/server/am/ContentProviderRecord:appInfo	Landroid/content/pm/ApplicationInfo;
        //     791: iconst_0
        //     792: iconst_0
        //     793: ldc_w 3178
        //     796: new 1215	android/content/ComponentName
        //     799: dup
        //     800: aload 6
        //     802: getfield 1925	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     805: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     808: aload 6
        //     810: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     813: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     816: iconst_0
        //     817: iconst_0
        //     818: invokevirtual 1609	com/android/server/am/ActivityManagerService:startProcessLocked	(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;ZILjava/lang/String;Landroid/content/ComponentName;ZZ)Lcom/android/server/am/ProcessRecord;
        //     821: astore 33
        //     823: aload 33
        //     825: ifnonnull +147 -> 972
        //     828: ldc 221
        //     830: new 598	java/lang/StringBuilder
        //     833: dup
        //     834: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     837: ldc_w 1611
        //     840: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     843: aload 6
        //     845: getfield 1925	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     848: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     851: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     854: ldc_w 1613
        //     857: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     860: aload 6
        //     862: getfield 1925	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     865: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     868: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     871: ldc_w 3180
        //     874: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     877: aload_2
        //     878: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     881: ldc_w 1617
        //     884: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     887: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     890: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     893: pop
        //     894: aconst_null
        //     895: astore 14
        //     897: lload 29
        //     899: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     902: aload_0
        //     903: monitorexit
        //     904: goto +404 -> 1308
        //     907: iinc 28 1
        //     910: goto -182 -> 728
        //     913: astore 36
        //     915: ldc 221
        //     917: new 598	java/lang/StringBuilder
        //     920: dup
        //     921: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     924: ldc_w 1600
        //     927: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     930: aload 10
        //     932: getfield 3176	com/android/server/am/ContentProviderRecord:appInfo	Landroid/content/pm/ApplicationInfo;
        //     935: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     938: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     941: ldc_w 1602
        //     944: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     947: aload 36
        //     949: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     952: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     955: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     958: pop
        //     959: goto -179 -> 780
        //     962: astore 32
        //     964: lload 29
        //     966: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     969: aload 32
        //     971: athrow
        //     972: aload 10
        //     974: aload 33
        //     976: putfield 3183	com/android/server/am/ContentProviderRecord:launchingApp	Lcom/android/server/am/ProcessRecord;
        //     979: aload_0
        //     980: getfield 636	com/android/server/am/ActivityManagerService:mLaunchingProviders	Ljava/util/ArrayList;
        //     983: aload 10
        //     985: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     988: pop
        //     989: lload 29
        //     991: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     994: iload 26
        //     996: ifeq +14 -> 1010
        //     999: aload_0
        //     1000: getfield 634	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
        //     1003: aload 24
        //     1005: aload 10
        //     1007: invokevirtual 3070	com/android/server/am/ProviderMap:putProviderByClass	(Landroid/content/ComponentName;Lcom/android/server/am/ContentProviderRecord;)V
        //     1010: aload_0
        //     1011: getfield 634	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
        //     1014: aload_2
        //     1015: aload 10
        //     1017: invokevirtual 3187	com/android/server/am/ProviderMap:putProviderByName	(Ljava/lang/String;Lcom/android/server/am/ContentProviderRecord;)V
        //     1020: aload_0
        //     1021: aload 7
        //     1023: aload 10
        //     1025: aload_3
        //     1026: iload 4
        //     1028: invokevirtual 3141	com/android/server/am/ActivityManagerService:incProviderCountLocked	(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ContentProviderRecord;Landroid/os/IBinder;Z)Lcom/android/server/am/ContentProviderConnection;
        //     1031: astore 5
        //     1033: aload 5
        //     1035: ifnull +9 -> 1044
        //     1038: aload 5
        //     1040: iconst_1
        //     1041: putfield 3190	com/android/server/am/ContentProviderConnection:waiting	Z
        //     1044: aload_0
        //     1045: monitorexit
        //     1046: aload 10
        //     1048: monitorenter
        //     1049: aload 10
        //     1051: getfield 2060	com/android/server/am/ContentProviderRecord:provider	Landroid/content/IContentProvider;
        //     1054: ifnonnull +187 -> 1241
        //     1057: aload 10
        //     1059: getfield 3183	com/android/server/am/ContentProviderRecord:launchingApp	Lcom/android/server/am/ProcessRecord;
        //     1062: ifnonnull +133 -> 1195
        //     1065: ldc 221
        //     1067: new 598	java/lang/StringBuilder
        //     1070: dup
        //     1071: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     1074: ldc_w 1611
        //     1077: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1080: aload 6
        //     1082: getfield 1925	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     1085: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     1088: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1091: ldc_w 1613
        //     1094: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1097: aload 6
        //     1099: getfield 1925	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     1102: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     1105: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     1108: ldc_w 3180
        //     1111: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1114: aload_2
        //     1115: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1118: ldc_w 3192
        //     1121: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1124: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     1127: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     1130: pop
        //     1131: iconst_3
        //     1132: anewarray 1138	java/lang/Object
        //     1135: astore 18
        //     1137: aload 18
        //     1139: iconst_0
        //     1140: aload 6
        //     1142: getfield 1925	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     1145: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     1148: aastore
        //     1149: aload 18
        //     1151: iconst_1
        //     1152: aload 6
        //     1154: getfield 1925	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     1157: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     1160: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     1163: aastore
        //     1164: aload 18
        //     1166: iconst_2
        //     1167: aload_2
        //     1168: aastore
        //     1169: sipush 30036
        //     1172: aload 18
        //     1174: invokestatic 1148	android/util/EventLog:writeEvent	(I[Ljava/lang/Object;)I
        //     1177: pop
        //     1178: aconst_null
        //     1179: astore 14
        //     1181: aload 10
        //     1183: monitorexit
        //     1184: goto +124 -> 1308
        //     1187: astore 12
        //     1189: aload 10
        //     1191: monitorexit
        //     1192: aload 12
        //     1194: athrow
        //     1195: aload 5
        //     1197: ifnull +9 -> 1206
        //     1200: aload 5
        //     1202: iconst_1
        //     1203: putfield 3190	com/android/server/am/ContentProviderConnection:waiting	Z
        //     1206: aload 10
        //     1208: invokevirtual 3194	java/lang/Object:wait	()V
        //     1211: aload 5
        //     1213: ifnull -164 -> 1049
        //     1216: aload 5
        //     1218: iconst_0
        //     1219: putfield 3190	com/android/server/am/ContentProviderConnection:waiting	Z
        //     1222: goto -173 -> 1049
        //     1225: astore 16
        //     1227: aload 5
        //     1229: ifnull +9 -> 1238
        //     1232: aload 5
        //     1234: iconst_0
        //     1235: putfield 3190	com/android/server/am/ContentProviderConnection:waiting	Z
        //     1238: aload 16
        //     1240: athrow
        //     1241: aload 10
        //     1243: monitorexit
        //     1244: aload 10
        //     1246: ifnull +19 -> 1265
        //     1249: aload 10
        //     1251: aload 5
        //     1253: invokevirtual 3134	com/android/server/am/ContentProviderRecord:newHolder	(Lcom/android/server/am/ContentProviderConnection;)Landroid/app/IActivityManager$ContentProviderHolder;
        //     1256: astore 13
        //     1258: aload 13
        //     1260: astore 14
        //     1262: goto +46 -> 1308
        //     1265: aconst_null
        //     1266: astore 13
        //     1268: goto -10 -> 1258
        //     1271: astore 15
        //     1273: aload 5
        //     1275: ifnull -226 -> 1049
        //     1278: aload 5
        //     1280: iconst_0
        //     1281: putfield 3190	com/android/server/am/ContentProviderConnection:waiting	Z
        //     1284: goto -235 -> 1049
        //     1287: astore 31
        //     1289: goto -509 -> 780
        //     1292: astore 38
        //     1294: goto -606 -> 688
        //     1297: astore 21
        //     1299: goto -886 -> 413
        //     1302: iconst_0
        //     1303: istore 11
        //     1305: goto -1182 -> 123
        //     1308: aload 14
        //     1310: areturn
        //     1311: iconst_0
        //     1312: istore 11
        //     1314: aconst_null
        //     1315: astore 5
        //     1317: goto -934 -> 383
        //
        // Exception table:
        //     from	to	target	type
        //     15	81	77	finally
        //     89	388	77	finally
        //     393	409	77	finally
        //     421	569	77	finally
        //     586	644	77	finally
        //     647	649	77	finally
        //     658	684	77	finally
        //     693	761	77	finally
        //     897	904	77	finally
        //     964	972	77	finally
        //     989	1046	77	finally
        //     761	780	913	java/lang/IllegalArgumentException
        //     761	780	962	finally
        //     780	894	962	finally
        //     915	959	962	finally
        //     972	989	962	finally
        //     1049	1192	1187	finally
        //     1216	1244	1187	finally
        //     1278	1284	1187	finally
        //     1200	1211	1225	finally
        //     1200	1211	1271	java/lang/InterruptedException
        //     761	780	1287	android/os/RemoteException
        //     586	644	1292	android/os/RemoteException
        //     658	684	1292	android/os/RemoteException
        //     393	409	1297	android/os/RemoteException
    }

    private final int getLRURecordIndexForAppLocked(IApplicationThread paramIApplicationThread)
    {
        IBinder localIBinder = paramIApplicationThread.asBinder();
        int i = -1 + this.mLruProcesses.size();
        if (i >= 0)
        {
            ProcessRecord localProcessRecord = (ProcessRecord)this.mLruProcesses.get(i);
            if ((localProcessRecord.thread == null) || (localProcessRecord.thread.asBinder() != localIBinder));
        }
        while (true)
        {
            return i;
            i--;
            break;
            i = -1;
        }
    }

    private final List getStickiesLocked(String paramString, IntentFilter paramIntentFilter, List paramList)
    {
        ContentResolver localContentResolver = this.mContext.getContentResolver();
        ArrayList localArrayList = (ArrayList)this.mStickyBroadcasts.get(paramString);
        if (localArrayList == null);
        for (List localList = paramList; ; localList = paramList)
        {
            return localList;
            int i = localArrayList.size();
            for (int j = 0; j < i; j++)
            {
                Intent localIntent = (Intent)localArrayList.get(j);
                if (paramIntentFilter.match(localContentResolver, localIntent, true, "ActivityManager") >= 0)
                {
                    if (paramList == null)
                        paramList = new ArrayList();
                    paramList.add(localIntent);
                }
            }
        }
    }

    private boolean handleAppCrashLocked(ProcessRecord paramProcessRecord)
    {
        boolean bool;
        if (this.mHeadless)
        {
            Log.e("ActivityManager", "handleAppCrashLocked: " + paramProcessRecord.processName);
            bool = false;
        }
        while (true)
        {
            return bool;
            long l = SystemClock.uptimeMillis();
            Long localLong;
            if (!paramProcessRecord.isolated)
                localLong = (Long)this.mProcessCrashTimes.get(paramProcessRecord.info.processName, paramProcessRecord.uid);
            while (true)
                if ((localLong != null) && (l < 60000L + localLong.longValue()))
                {
                    Slog.w("ActivityManager", "Process " + paramProcessRecord.info.processName + " has crashed too many times: killing!");
                    Object[] arrayOfObject1 = new Object[2];
                    arrayOfObject1[0] = paramProcessRecord.info.processName;
                    arrayOfObject1[1] = Integer.valueOf(paramProcessRecord.uid);
                    EventLog.writeEvent(30032, arrayOfObject1);
                    int k = -1 + this.mMainStack.mHistory.size();
                    while (true)
                        if (k >= 0)
                        {
                            ActivityRecord localActivityRecord4 = (ActivityRecord)this.mMainStack.mHistory.get(k);
                            if (localActivityRecord4.app == paramProcessRecord)
                            {
                                Slog.w("ActivityManager", "    Force finishing activity " + localActivityRecord4.intent.getComponent().flattenToShortString());
                                localActivityRecord4.stack.finishActivityLocked(localActivityRecord4, k, 0, null, "crashed");
                            }
                            k--;
                            continue;
                            localLong = null;
                            break;
                        }
                    if (!paramProcessRecord.persistent)
                    {
                        Object[] arrayOfObject2 = new Object[2];
                        arrayOfObject2[0] = Integer.valueOf(paramProcessRecord.uid);
                        arrayOfObject2[1] = paramProcessRecord.info.processName;
                        EventLog.writeEvent(30015, arrayOfObject2);
                        if (!paramProcessRecord.isolated)
                        {
                            this.mBadProcesses.put(paramProcessRecord.info.processName, paramProcessRecord.uid, Long.valueOf(l));
                            this.mProcessCrashTimes.remove(paramProcessRecord.info.processName, paramProcessRecord.uid);
                        }
                        paramProcessRecord.bad = true;
                        paramProcessRecord.removed = true;
                        removeProcessLocked(paramProcessRecord, false, false, "crash");
                        this.mMainStack.resumeTopActivityLocked(null);
                        bool = false;
                        break;
                    }
                    this.mMainStack.resumeTopActivityLocked(null);
                }
            while (paramProcessRecord.services.size() != 0)
            {
                Iterator localIterator2 = paramProcessRecord.services.iterator();
                while (localIterator2.hasNext())
                {
                    ServiceRecord localServiceRecord = (ServiceRecord)localIterator2.next();
                    localServiceRecord.crashCount = (1 + localServiceRecord.crashCount);
                }
                ActivityRecord localActivityRecord1 = this.mMainStack.topRunningActivityLocked(null);
                if ((localActivityRecord1 != null) && (localActivityRecord1.app == paramProcessRecord))
                {
                    Slog.w("ActivityManager", "    Force finishing activity " + localActivityRecord1.intent.getComponent().flattenToShortString());
                    int i = this.mMainStack.indexOfActivityLocked(localActivityRecord1);
                    localActivityRecord1.stack.finishActivityLocked(localActivityRecord1, i, 0, null, "crashed");
                    int j = i - 1;
                    if (j >= 0)
                    {
                        ActivityRecord localActivityRecord2 = (ActivityRecord)this.mMainStack.mHistory.get(j);
                        if (((localActivityRecord2.state == ActivityStack.ActivityState.RESUMED) || (localActivityRecord2.state == ActivityStack.ActivityState.PAUSING) || (localActivityRecord2.state == ActivityStack.ActivityState.PAUSED)) && ((!localActivityRecord2.isHomeActivity) || (this.mHomeProcess != localActivityRecord2.app)))
                        {
                            Slog.w("ActivityManager", "    Force finishing activity " + localActivityRecord2.intent.getComponent().flattenToShortString());
                            localActivityRecord2.stack.finishActivityLocked(localActivityRecord2, j, 0, null, "crashed");
                        }
                    }
                }
            }
            if ((paramProcessRecord == this.mHomeProcess) && (this.mHomeProcess.activities.size() > 0) && ((0x1 & this.mHomeProcess.info.flags) == 0))
            {
                Iterator localIterator1 = this.mHomeProcess.activities.iterator();
                while (localIterator1.hasNext())
                {
                    ActivityRecord localActivityRecord3 = (ActivityRecord)localIterator1.next();
                    if (localActivityRecord3.isHomeActivity)
                    {
                        Log.i("ActivityManager", "Clearing package preferred activities from " + localActivityRecord3.packageName);
                        try
                        {
                            ActivityThread.getPackageManager().clearPackagePreferredActivities(localActivityRecord3.packageName);
                        }
                        catch (RemoteException localRemoteException)
                        {
                        }
                    }
                }
            }
            if (!paramProcessRecord.isolated)
                this.mProcessCrashTimes.put(paramProcessRecord.info.processName, paramProcessRecord.uid, Long.valueOf(l));
            bool = true;
        }
    }

    private final void handleAppDiedLocked(ProcessRecord paramProcessRecord, boolean paramBoolean1, boolean paramBoolean2)
    {
        cleanUpApplicationRecordLocked(paramProcessRecord, paramBoolean1, paramBoolean2, -1);
        if (!paramBoolean1)
            this.mLruProcesses.remove(paramProcessRecord);
        if (this.mProfileProc == paramProcessRecord)
            clearProfilerLocked();
        if ((this.mMainStack.mPausingActivity != null) && (this.mMainStack.mPausingActivity.app == paramProcessRecord))
            this.mMainStack.mPausingActivity = null;
        if ((this.mMainStack.mLastPausedActivity != null) && (this.mMainStack.mLastPausedActivity.app == paramProcessRecord))
            this.mMainStack.mLastPausedActivity = null;
        this.mMainStack.removeHistoryRecordsForAppLocked(paramProcessRecord);
        int i = 0;
        int j = this.mMainStack.mHistory.size();
        if (j > 0)
        {
            j--;
            ActivityRecord localActivityRecord = (ActivityRecord)this.mMainStack.mHistory.get(j);
            if (localActivityRecord.app == paramProcessRecord)
            {
                if (((localActivityRecord.haveState) || (localActivityRecord.stateNotNeeded)) && (!localActivityRecord.finishing))
                    break label302;
                if (!localActivityRecord.finishing)
                {
                    Slog.w("ActivityManager", "Force removing " + localActivityRecord + ": app died, no saved state");
                    Object[] arrayOfObject = new Object[4];
                    arrayOfObject[0] = Integer.valueOf(System.identityHashCode(localActivityRecord));
                    arrayOfObject[1] = Integer.valueOf(localActivityRecord.task.taskId);
                    arrayOfObject[2] = localActivityRecord.shortComponentName;
                    arrayOfObject[3] = "proc died without state saved";
                    EventLog.writeEvent(30001, arrayOfObject);
                }
                this.mMainStack.removeActivityFromHistoryLocked(localActivityRecord);
            }
            while (true)
            {
                localActivityRecord.stack.cleanUpActivityLocked(localActivityRecord, true, true);
                break;
                label302: if (localActivityRecord.visible)
                    i = 1;
                localActivityRecord.app = null;
                localActivityRecord.nowVisible = false;
                if (!localActivityRecord.haveState)
                    localActivityRecord.icicle = null;
            }
        }
        paramProcessRecord.activities.clear();
        if (paramProcessRecord.instrumentationClass != null)
        {
            Slog.w("ActivityManager", "Crash of app " + paramProcessRecord.processName + " running instrumentation " + paramProcessRecord.instrumentationClass);
            Bundle localBundle = new Bundle();
            localBundle.putString("shortMsg", "Process crashed.");
            finishInstrumentationLocked(paramProcessRecord, 0, localBundle);
        }
        if ((!paramBoolean1) && (!this.mMainStack.resumeTopActivityLocked(null)) && (i != 0))
            this.mMainStack.ensureActivitiesVisibleLocked(null, 0);
    }

    public static final void installSystemProviders()
    {
        while (true)
        {
            int i;
            synchronized (mSelf)
            {
                ProcessRecord localProcessRecord = (ProcessRecord)mSelf.mProcessNames.get("system", 1000);
                List localList = mSelf.generateApplicationProvidersLocked(localProcessRecord);
                if (localList != null)
                {
                    i = -1 + localList.size();
                    if (i >= 0)
                    {
                        ProviderInfo localProviderInfo = (ProviderInfo)localList.get(i);
                        if ((0x1 & localProviderInfo.applicationInfo.flags) != 0)
                            break label171;
                        Slog.w("ActivityManager", "Not installing system proc provider " + localProviderInfo.name + ": not system .apk");
                        localList.remove(i);
                        break label171;
                    }
                }
                if (localList != null)
                    mSystemThread.installSystemProviders(localList);
                mSelf.mCoreSettingsObserver = new CoreSettingsObserver(mSelf);
                mSelf.mUsageStatsService.monitorPackages();
                return;
            }
            label171: i--;
        }
    }

    // ERROR //
    private BroadcastQueue isReceivingBroadcast(ProcessRecord paramProcessRecord)
    {
        // Byte code:
        //     0: aload_1
        //     1: getfield 3319	com/android/server/am/ProcessRecord:curReceiver	Lcom/android/server/am/BroadcastRecord;
        //     4: astore_2
        //     5: aload_2
        //     6: ifnull +12 -> 18
        //     9: aload_2
        //     10: getfield 2990	com/android/server/am/BroadcastRecord:queue	Lcom/android/server/am/BroadcastQueue;
        //     13: astore 7
        //     15: aload 7
        //     17: areturn
        //     18: aload_0
        //     19: monitorenter
        //     20: aload_0
        //     21: getfield 543	com/android/server/am/ActivityManagerService:mBroadcastQueues	[Lcom/android/server/am/BroadcastQueue;
        //     24: astore 4
        //     26: aload 4
        //     28: arraylength
        //     29: istore 5
        //     31: iconst_0
        //     32: istore 6
        //     34: iload 6
        //     36: iload 5
        //     38: if_icmpge +47 -> 85
        //     41: aload 4
        //     43: iload 6
        //     45: aaload
        //     46: astore 7
        //     48: aload 7
        //     50: getfield 3322	com/android/server/am/BroadcastQueue:mPendingBroadcast	Lcom/android/server/am/BroadcastRecord;
        //     53: astore 8
        //     55: aload 8
        //     57: ifnull +22 -> 79
        //     60: aload 8
        //     62: getfield 3325	com/android/server/am/BroadcastRecord:curApp	Lcom/android/server/am/ProcessRecord;
        //     65: aload_1
        //     66: if_acmpne +13 -> 79
        //     69: aload_0
        //     70: monitorexit
        //     71: goto -56 -> 15
        //     74: astore_3
        //     75: aload_0
        //     76: monitorexit
        //     77: aload_3
        //     78: athrow
        //     79: iinc 6 1
        //     82: goto -48 -> 34
        //     85: aload_0
        //     86: monitorexit
        //     87: aconst_null
        //     88: astore 7
        //     90: goto -75 -> 15
        //
        // Exception table:
        //     from	to	target	type
        //     20	77	74	finally
        //     85	87	74	finally
    }

    private final boolean killPackageProcessesLocked(String paramString1, int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4, String paramString2)
    {
        ArrayList localArrayList = new ArrayList();
        String str = paramString1 + ":";
        Iterator localIterator = this.mProcessNames.getMap().values().iterator();
        label80: ProcessRecord localProcessRecord;
        label118: boolean bool;
        if (localIterator.hasNext())
        {
            SparseArray localSparseArray = (SparseArray)localIterator.next();
            int k = localSparseArray.size();
            int m = 0;
            if (m < k)
            {
                localProcessRecord = (ProcessRecord)localSparseArray.valueAt(m);
                if ((!localProcessRecord.persistent) || (paramBoolean4))
                    break label118;
            }
            label142: 
            do
                while (true)
                {
                    m++;
                    break label80;
                    break;
                    if (!localProcessRecord.removed)
                        break label142;
                    if (paramBoolean3)
                        localArrayList.add(localProcessRecord);
                }
            while (((paramInt1 <= 0) || (paramInt1 == 1000) || (localProcessRecord.info.uid != paramInt1)) && (((!localProcessRecord.processName.equals(paramString1)) && (!localProcessRecord.processName.startsWith(str))) || (paramInt1 >= 0) || (localProcessRecord.setAdj < paramInt2)));
            if (!paramBoolean3)
                bool = true;
        }
        while (true)
        {
            return bool;
            localProcessRecord.removed = true;
            localArrayList.add(localProcessRecord);
            break;
            int i = localArrayList.size();
            for (int j = 0; j < i; j++)
                removeProcessLocked((ProcessRecord)localArrayList.get(j), paramBoolean1, paramBoolean2, paramString2);
            if (i > 0)
                bool = true;
            else
                bool = false;
        }
    }

    private boolean killProcessesBelowAdj(int paramInt, String paramString)
    {
        if (Binder.getCallingUid() != 1000)
            throw new SecurityException("killProcessesBelowAdj() only available to system");
        boolean bool = false;
        while (true)
        {
            int j;
            synchronized (this.mPidsSelfLocked)
            {
                int i = this.mPidsSelfLocked.size();
                j = 0;
                if (j < i)
                {
                    int k = this.mPidsSelfLocked.keyAt(j);
                    ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.valueAt(j);
                    if (localProcessRecord == null)
                        continue;
                    int m = localProcessRecord.setAdj;
                    if ((m <= paramInt) || (localProcessRecord.killedBackground))
                        continue;
                    Slog.w("ActivityManager", "Killing " + localProcessRecord + " (adj " + m + "): " + paramString);
                    Object[] arrayOfObject = new Object[4];
                    arrayOfObject[0] = Integer.valueOf(localProcessRecord.pid);
                    arrayOfObject[1] = localProcessRecord.processName;
                    arrayOfObject[2] = Integer.valueOf(m);
                    arrayOfObject[3] = paramString;
                    EventLog.writeEvent(30023, arrayOfObject);
                    bool = true;
                    localProcessRecord.killedBackground = true;
                    Process.killProcessQuiet(k);
                }
            }
        }
    }

    private final void killServicesLocked(ProcessRecord paramProcessRecord, boolean paramBoolean)
    {
        if (paramProcessRecord.connections.size() > 0)
        {
            Iterator localIterator3 = paramProcessRecord.connections.iterator();
            while (localIterator3.hasNext())
                removeConnectionLocked((ConnectionRecord)localIterator3.next(), paramProcessRecord, null);
        }
        paramProcessRecord.connections.clear();
        if (paramProcessRecord.services.size() != 0)
        {
            Iterator localIterator1 = paramProcessRecord.services.iterator();
            while (localIterator1.hasNext())
            {
                ServiceRecord localServiceRecord = (ServiceRecord)localIterator1.next();
                int j;
                while (true)
                {
                    synchronized (localServiceRecord.stats.getBatteryStats())
                    {
                        localServiceRecord.stats.stopLaunchedLocked();
                        localServiceRecord.app = null;
                        localServiceRecord.isolatedProc = null;
                        localServiceRecord.executeNesting = 0;
                        if ((!this.mStoppingServices.remove(localServiceRecord)) || (localServiceRecord.bindings.size() > 0))
                        {
                            j = 1;
                            if (j == 0)
                                break;
                            Iterator localIterator2 = localServiceRecord.bindings.values().iterator();
                            if (!localIterator2.hasNext())
                                break;
                            IntentBindRecord localIntentBindRecord = (IntentBindRecord)localIterator2.next();
                            localIntentBindRecord.binder = null;
                            localIntentBindRecord.hasBound = false;
                            localIntentBindRecord.received = false;
                            localIntentBindRecord.requested = false;
                        }
                    }
                    j = 0;
                }
                if ((localServiceRecord.crashCount >= 2) && ((0x8 & localServiceRecord.serviceInfo.applicationInfo.flags) == 0))
                {
                    Slog.w("ActivityManager", "Service crashed " + localServiceRecord.crashCount + " times, stopping: " + localServiceRecord);
                    Object[] arrayOfObject = new Object[3];
                    arrayOfObject[0] = Integer.valueOf(localServiceRecord.crashCount);
                    arrayOfObject[1] = localServiceRecord.shortName;
                    arrayOfObject[2] = Integer.valueOf(paramProcessRecord.pid);
                    EventLog.writeEvent(30034, arrayOfObject);
                    bringDownServiceLocked(localServiceRecord, true);
                }
                else if (!paramBoolean)
                {
                    bringDownServiceLocked(localServiceRecord, true);
                }
                else
                {
                    boolean bool = scheduleServiceRestartLocked(localServiceRecord, true);
                    if ((localServiceRecord.startRequested) && ((localServiceRecord.stopIfKilled) || (bool)) && (localServiceRecord.pendingStarts.size() == 0))
                    {
                        localServiceRecord.startRequested = false;
                        if (j == 0)
                            bringDownServiceLocked(localServiceRecord, true);
                    }
                }
            }
            if (!paramBoolean)
                paramProcessRecord.services.clear();
        }
        int i = this.mStoppingServices.size();
        while (i > 0)
        {
            i--;
            if (((ServiceRecord)this.mStoppingServices.get(i)).app == paramProcessRecord)
                this.mStoppingServices.remove(i);
        }
        paramProcessRecord.executingServices.clear();
    }

    private void logStrictModeViolationToDropBox(ProcessRecord paramProcessRecord, StrictMode.ViolationInfo paramViolationInfo)
    {
        if (paramViolationInfo == null);
        while (true)
        {
            return;
            boolean bool;
            String str1;
            label34: final String str2;
            label43: final DropBoxManager localDropBoxManager;
            if ((paramProcessRecord == null) || ((0x81 & paramProcessRecord.info.flags) != 0))
            {
                bool = true;
                if (paramProcessRecord == null)
                {
                    str1 = "unknown";
                    if (!bool)
                        break label394;
                    str2 = "system_app_strictmode";
                    localDropBoxManager = (DropBoxManager)this.mContext.getSystemService("dropbox");
                    if ((localDropBoxManager == null) || (!localDropBoxManager.isTagEnabled(str2)))
                        continue;
                    if (!bool)
                        break label402;
                }
            }
            else
            {
                label83: int i;
                synchronized (this.mStrictModeBuffer)
                {
                    if (???.length() == 0);
                    for (i = 1; ; i = 0)
                    {
                        appendDropBoxProcessHeaders(paramProcessRecord, str1, ???);
                        ???.append("Build: ").append(Build.FINGERPRINT).append("\n");
                        ???.append("System-App: ").append(bool).append("\n");
                        ???.append("Uptime-Millis: ").append(paramViolationInfo.violationUptimeMillis).append("\n");
                        if (paramViolationInfo.violationNumThisLoop != 0)
                            ???.append("Loop-Violation-Number: ").append(paramViolationInfo.violationNumThisLoop).append("\n");
                        if (paramViolationInfo.numAnimationsRunning != 0)
                            ???.append("Animations-Running: ").append(paramViolationInfo.numAnimationsRunning).append("\n");
                        if (paramViolationInfo.broadcastIntentAction != null)
                            ???.append("Broadcast-Intent-Action: ").append(paramViolationInfo.broadcastIntentAction).append("\n");
                        if (paramViolationInfo.durationMillis != -1)
                            ???.append("Duration-Millis: ").append(paramViolationInfo.durationMillis).append("\n");
                        if (paramViolationInfo.numInstances != -1L)
                            ???.append("Instance-Count: ").append(paramViolationInfo.numInstances).append("\n");
                        if (paramViolationInfo.tags == null)
                            break label423;
                        for (String str3 : paramViolationInfo.tags)
                            ???.append("Span-Tag: ").append(str3).append("\n");
                        bool = false;
                        break;
                        str1 = paramProcessRecord.processName;
                        break label34;
                        label394: str2 = "data_app_strictmode";
                        break label43;
                        label402: ??? = new StringBuilder(1024);
                        break label83;
                    }
                    label423: ???.append("\n");
                    if ((paramViolationInfo.crashInfo != null) && (paramViolationInfo.crashInfo.stackTrace != null))
                        ???.append(paramViolationInfo.crashInfo.stackTrace);
                    ???.append("\n");
                    if (???.length() > 65536)
                    {
                        j = 1;
                        if ((bool) && (j == 0))
                            break label552;
                        new Thread("Error dump: " + str2)
                        {
                            public void run()
                            {
                                synchronized (localStringBuilder)
                                {
                                    String str = localStringBuilder.toString();
                                    localStringBuilder.delete(0, localStringBuilder.length());
                                    localStringBuilder.trimToSize();
                                    if (str.length() != 0)
                                        localDropBoxManager.addText(str2, str);
                                    return;
                                }
                            }
                        }
                        .start();
                        continue;
                    }
                    int j = 0;
                }
                label552: if (i != 0)
                    new Thread("Error dump: " + str2)
                    {
                        public void run()
                        {
                            try
                            {
                                Thread.sleep(5000L);
                                label6: synchronized (ActivityManagerService.this.mStrictModeBuffer)
                                {
                                    String str = ActivityManagerService.this.mStrictModeBuffer.toString();
                                    if (str.length() != 0)
                                    {
                                        ActivityManagerService.this.mStrictModeBuffer.delete(0, ActivityManagerService.this.mStrictModeBuffer.length());
                                        ActivityManagerService.this.mStrictModeBuffer.trimToSize();
                                        localDropBoxManager.addText(str2, str);
                                    }
                                }
                            }
                            catch (InterruptedException localInterruptedException)
                            {
                                break label6;
                            }
                        }
                    }
                    .start();
            }
        }
    }

    // ERROR //
    @MiuiHook(MiuiHook.MiuiHookType.CHANGE_CODE)
    public static final Context main(int paramInt)
    {
        // Byte code:
        //     0: new 71	com/android/server/am/ActivityManagerService$AThread
        //     3: dup
        //     4: invokespecial 3451	com/android/server/am/ActivityManagerService$AThread:<init>	()V
        //     7: astore_1
        //     8: aload_1
        //     9: invokevirtual 3452	com/android/server/am/ActivityManagerService$AThread:start	()V
        //     12: aload_1
        //     13: monitorenter
        //     14: aload_1
        //     15: getfield 3455	com/android/server/am/ActivityManagerService$AThread:mService	Lcom/android/server/am/ActivityManagerService;
        //     18: astore_3
        //     19: aload_3
        //     20: ifnonnull +15 -> 35
        //     23: aload_1
        //     24: invokevirtual 3194	java/lang/Object:wait	()V
        //     27: goto -13 -> 14
        //     30: astore 8
        //     32: goto -18 -> 14
        //     35: aload_1
        //     36: monitorexit
        //     37: aload_1
        //     38: getfield 3455	com/android/server/am/ActivityManagerService$AThread:mService	Lcom/android/server/am/ActivityManagerService;
        //     41: astore 4
        //     43: aload 4
        //     45: putstatic 3302	com/android/server/am/ActivityManagerService:mSelf	Lcom/android/server/am/ActivityManagerService;
        //     48: invokestatic 3459	android/app/ActivityThread:systemMain	()Landroid/app/ActivityThread;
        //     51: astore 5
        //     53: aload 5
        //     55: putstatic 3308	com/android/server/am/ActivityManagerService:mSystemThread	Landroid/app/ActivityThread;
        //     58: aload 5
        //     60: invokevirtual 3463	android/app/ActivityThread:getSystemContext	()Landroid/app/ContextImpl;
        //     63: astore 6
        //     65: aload 6
        //     67: ldc_w 3464
        //     70: invokevirtual 3467	android/content/Context:setTheme	(I)V
        //     73: aload 4
        //     75: aload 6
        //     77: putfield 2453	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
        //     80: aload 4
        //     82: iload_0
        //     83: putfield 3469	com/android/server/am/ActivityManagerService:mFactoryTest	I
        //     86: aload 4
        //     88: new 1284	com/android/server/am/ActivityStack
        //     91: dup
        //     92: aload 4
        //     94: aload 6
        //     96: iconst_1
        //     97: invokespecial 3472	com/android/server/am/ActivityStack:<init>	(Lcom/android/server/am/ActivityManagerService;Landroid/content/Context;Z)V
        //     100: putfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     103: aload 4
        //     105: getfield 832	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
        //     108: aload 6
        //     110: invokevirtual 3476	com/android/server/am/BatteryStatsService:publish	(Landroid/content/Context;)V
        //     113: aload 4
        //     115: getfield 858	com/android/server/am/ActivityManagerService:mUsageStatsService	Lcom/android/server/am/UsageStatsService;
        //     118: aload 6
        //     120: invokevirtual 3477	com/android/server/am/UsageStatsService:publish	(Landroid/content/Context;)V
        //     123: aload_1
        //     124: monitorenter
        //     125: aload_1
        //     126: iconst_1
        //     127: putfield 3480	com/android/server/am/ActivityManagerService$AThread:mReady	Z
        //     130: aload_1
        //     131: invokevirtual 3483	java/lang/Object:notifyAll	()V
        //     134: aload_1
        //     135: monitorexit
        //     136: aload 4
        //     138: aconst_null
        //     139: aconst_null
        //     140: aconst_null
        //     141: aconst_null
        //     142: invokevirtual 3487	com/android/server/am/ActivityManagerService:startRunning	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
        //     145: aload 6
        //     147: areturn
        //     148: astore_2
        //     149: aload_1
        //     150: monitorexit
        //     151: aload_2
        //     152: athrow
        //     153: astore 7
        //     155: aload_1
        //     156: monitorexit
        //     157: aload 7
        //     159: athrow
        //
        // Exception table:
        //     from	to	target	type
        //     23	27	30	java/lang/InterruptedException
        //     14	19	148	finally
        //     23	27	148	finally
        //     35	37	148	finally
        //     149	151	148	finally
        //     125	136	153	finally
        //     155	157	153	finally
    }

    private boolean makeAppCrashingLocked(ProcessRecord paramProcessRecord, String paramString1, String paramString2, String paramString3)
    {
        paramProcessRecord.crashing = true;
        paramProcessRecord.crashingReport = generateProcessError(paramProcessRecord, 1, null, paramString1, paramString2, paramString3);
        startAppProblemLocked(paramProcessRecord);
        paramProcessRecord.stopFreezingAllLocked();
        return handleAppCrashLocked(paramProcessRecord);
    }

    private void makeAppNotRespondingLocked(ProcessRecord paramProcessRecord, String paramString1, String paramString2, String paramString3)
    {
        paramProcessRecord.notResponding = true;
        paramProcessRecord.notRespondingReport = generateProcessError(paramProcessRecord, 2, paramString1, paramString2, paramString3, null);
        startAppProblemLocked(paramProcessRecord);
        paramProcessRecord.stopFreezingAllLocked();
    }

    private final void moveTaskBackwardsLocked(int paramInt)
    {
        Slog.e("ActivityManager", "moveTaskBackwards not yet implemented!");
    }

    // ERROR //
    private void onUserRemoved(Intent paramIntent)
    {
        // Byte code:
        //     0: aload_1
        //     1: ldc_w 3507
        //     4: bipush 255
        //     6: invokevirtual 1730	android/content/Intent:getIntExtra	(Ljava/lang/String;I)I
        //     9: istore_2
        //     10: iload_2
        //     11: iconst_1
        //     12: if_icmpge +4 -> 16
        //     15: return
        //     16: new 536	java/util/ArrayList
        //     19: dup
        //     20: invokespecial 537	java/util/ArrayList:<init>	()V
        //     23: astore_3
        //     24: aload_0
        //     25: monitorenter
        //     26: aload_0
        //     27: getfield 557	com/android/server/am/ActivityManagerService:mProcessNames	Lcom/android/server/ProcessMap;
        //     30: invokevirtual 2177	com/android/server/ProcessMap:getMap	()Ljava/util/HashMap;
        //     33: invokevirtual 1955	java/util/HashMap:entrySet	()Ljava/util/Set;
        //     36: invokeinterface 1958 1 0
        //     41: astore 5
        //     43: aload 5
        //     45: invokeinterface 1016 1 0
        //     50: ifeq +86 -> 136
        //     53: aload 5
        //     55: invokeinterface 1020 1 0
        //     60: checkcast 1960	java/util/Map$Entry
        //     63: astore 9
        //     65: aload 9
        //     67: invokeinterface 3510 1 0
        //     72: checkcast 559	android/util/SparseArray
        //     75: astore 10
        //     77: iconst_0
        //     78: istore 11
        //     80: iload 11
        //     82: aload 10
        //     84: invokevirtual 2178	android/util/SparseArray:size	()I
        //     87: if_icmpge -44 -> 43
        //     90: aload 10
        //     92: iload 11
        //     94: invokevirtual 3335	android/util/SparseArray:keyAt	(I)I
        //     97: invokestatic 2005	android/os/UserId:getUserId	(I)I
        //     100: iload_2
        //     101: if_icmpne +107 -> 208
        //     104: aload_3
        //     105: new 2684	android/util/Pair
        //     108: dup
        //     109: aload 9
        //     111: invokeinterface 1963 1 0
        //     116: aload 10
        //     118: iload 11
        //     120: invokevirtual 3335	android/util/SparseArray:keyAt	(I)I
        //     123: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     126: invokespecial 2687	android/util/Pair:<init>	(Ljava/lang/Object;Ljava/lang/Object;)V
        //     129: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     132: pop
        //     133: goto +75 -> 208
        //     136: aload_3
        //     137: invokevirtual 3241	java/util/ArrayList:iterator	()Ljava/util/Iterator;
        //     140: astore 6
        //     142: aload 6
        //     144: invokeinterface 1016 1 0
        //     149: ifeq +54 -> 203
        //     152: aload 6
        //     154: invokeinterface 1020 1 0
        //     159: checkcast 2684	android/util/Pair
        //     162: astore 7
        //     164: aload_0
        //     165: aload 7
        //     167: getfield 2698	android/util/Pair:first	Ljava/lang/Object;
        //     170: checkcast 428	java/lang/String
        //     173: aload 7
        //     175: getfield 2707	android/util/Pair:second	Ljava/lang/Object;
        //     178: checkcast 1001	java/lang/Integer
        //     181: invokevirtual 2710	java/lang/Integer:intValue	()I
        //     184: iconst_0
        //     185: iconst_0
        //     186: iconst_1
        //     187: iconst_1
        //     188: iload_2
        //     189: invokespecial 949	com/android/server/am/ActivityManagerService:forceStopPackageLocked	(Ljava/lang/String;IZZZZI)Z
        //     192: pop
        //     193: goto -51 -> 142
        //     196: astore 4
        //     198: aload_0
        //     199: monitorexit
        //     200: aload 4
        //     202: athrow
        //     203: aload_0
        //     204: monitorexit
        //     205: goto -190 -> 15
        //     208: iinc 11 1
        //     211: goto -131 -> 80
        //
        // Exception table:
        //     from	to	target	type
        //     26	200	196	finally
        //     203	205	196	finally
    }

    static int oomAdjToImportance(int paramInt, ActivityManager.RunningAppProcessInfo paramRunningAppProcessInfo)
    {
        int i = 400;
        if (paramInt >= ProcessList.HIDDEN_APP_MIN_ADJ)
            if (paramRunningAppProcessInfo != null)
                paramRunningAppProcessInfo.lru = (1 + (paramInt - ProcessList.HIDDEN_APP_MIN_ADJ));
        while (true)
        {
            return i;
            if (paramInt >= 8)
                i = 300;
            else if (paramInt >= 6)
            {
                if (paramRunningAppProcessInfo != null)
                    paramRunningAppProcessInfo.lru = 0;
            }
            else if (paramInt >= 5)
                i = 300;
            else if (paramInt >= 3)
                i = 170;
            else if (paramInt >= 2)
                i = 130;
            else if (paramInt >= 1)
                i = 200;
            else
                i = 100;
        }
    }

    private static String processClass(ProcessRecord paramProcessRecord)
    {
        String str;
        if ((paramProcessRecord == null) || (paramProcessRecord.pid == MY_PID))
            str = "system_server";
        while (true)
        {
            return str;
            if ((0x1 & paramProcessRecord.info.flags) != 0)
                str = "system_app";
            else
                str = "data_app";
        }
    }

    private final void processStartTimedOutLocked(ProcessRecord paramProcessRecord)
    {
        int i = paramProcessRecord.pid;
        int j = 0;
        synchronized (this.mPidsSelfLocked)
        {
            ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(i);
            if ((localProcessRecord != null) && (localProcessRecord.thread == null))
            {
                this.mPidsSelfLocked.remove(i);
                j = 1;
            }
            if (j == 0)
                break label451;
            Slog.w("ActivityManager", "Process " + paramProcessRecord + " failed to attach");
            Object[] arrayOfObject1 = new Object[3];
            arrayOfObject1[0] = Integer.valueOf(i);
            arrayOfObject1[1] = Integer.valueOf(paramProcessRecord.uid);
            arrayOfObject1[2] = paramProcessRecord.processName;
            EventLog.writeEvent(30037, arrayOfObject1);
            this.mProcessNames.remove(paramProcessRecord.processName, paramProcessRecord.uid);
            this.mIsolatedProcesses.remove(paramProcessRecord.uid);
            if (this.mHeavyWeightProcess == paramProcessRecord)
            {
                this.mHeavyWeightProcess = null;
                this.mHandler.sendEmptyMessage(25);
            }
            checkAppInLaunchingProvidersLocked(paramProcessRecord, true);
            int k = 0;
            if (k < this.mPendingServices.size())
            {
                ServiceRecord localServiceRecord = (ServiceRecord)this.mPendingServices.get(k);
                if (((paramProcessRecord.uid == localServiceRecord.appInfo.uid) && (paramProcessRecord.processName.equals(localServiceRecord.processName))) || (localServiceRecord.isolatedProc == paramProcessRecord))
                {
                    Slog.w("ActivityManager", "Forcing bringing down service: " + localServiceRecord);
                    localServiceRecord.isolatedProc = null;
                    this.mPendingServices.remove(k);
                    k--;
                    bringDownServiceLocked(localServiceRecord, true);
                }
                k++;
            }
        }
        Object[] arrayOfObject2 = new Object[4];
        arrayOfObject2[0] = Integer.valueOf(i);
        arrayOfObject2[1] = paramProcessRecord.processName;
        arrayOfObject2[2] = Integer.valueOf(paramProcessRecord.setAdj);
        arrayOfObject2[3] = "start timeout";
        EventLog.writeEvent(30023, arrayOfObject2);
        Process.killProcessQuiet(i);
        if ((this.mBackupTarget != null) && (this.mBackupTarget.app.pid == i))
            Slog.w("ActivityManager", "Unattached app died before backup, skipping");
        try
        {
            IBackupManager.Stub.asInterface(ServiceManager.getService("backup")).agentDisconnected(paramProcessRecord.info.packageName);
            label428: if (isPendingBroadcastProcessLocked(i))
            {
                Slog.w("ActivityManager", "Unattached app died before broadcast acknowledged, skipping");
                skipPendingBroadcastLocked(i);
            }
            while (true)
            {
                return;
                label451: Slog.w("ActivityManager", "Spurious process start timeout - pid not known for " + paramProcessRecord);
            }
        }
        catch (RemoteException localRemoteException)
        {
            break label428;
        }
    }

    // ERROR //
    private static ArrayList<ComponentName> readLastDonePreBootReceivers()
    {
        // Byte code:
        //     0: new 536	java/util/ArrayList
        //     3: dup
        //     4: invokespecial 537	java/util/ArrayList:<init>	()V
        //     7: astore_0
        //     8: invokestatic 3542	com/android/server/am/ActivityManagerService:getCalledPreBootReceiversFile	()Ljava/io/File;
        //     11: astore_1
        //     12: aconst_null
        //     13: astore_2
        //     14: new 3544	java/io/FileInputStream
        //     17: dup
        //     18: aload_1
        //     19: invokespecial 3547	java/io/FileInputStream:<init>	(Ljava/io/File;)V
        //     22: astore_3
        //     23: new 3549	java/io/DataInputStream
        //     26: dup
        //     27: new 3551	java/io/BufferedInputStream
        //     30: dup
        //     31: aload_3
        //     32: sipush 2048
        //     35: invokespecial 3554	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;I)V
        //     38: invokespecial 3557	java/io/DataInputStream:<init>	(Ljava/io/InputStream;)V
        //     41: astore 4
        //     43: aload 4
        //     45: invokevirtual 3560	java/io/DataInputStream:readInt	()I
        //     48: sipush 10000
        //     51: if_icmpne +111 -> 162
        //     54: aload 4
        //     56: invokevirtual 3563	java/io/DataInputStream:readUTF	()Ljava/lang/String;
        //     59: astore 12
        //     61: aload 4
        //     63: invokevirtual 3563	java/io/DataInputStream:readUTF	()Ljava/lang/String;
        //     66: astore 13
        //     68: aload 4
        //     70: invokevirtual 3563	java/io/DataInputStream:readUTF	()Ljava/lang/String;
        //     73: astore 14
        //     75: getstatic 3568	android/os/Build$VERSION:RELEASE	Ljava/lang/String;
        //     78: aload 12
        //     80: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     83: ifeq +79 -> 162
        //     86: getstatic 3571	android/os/Build$VERSION:CODENAME	Ljava/lang/String;
        //     89: aload 13
        //     91: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     94: ifeq +68 -> 162
        //     97: getstatic 3574	android/os/Build$VERSION:INCREMENTAL	Ljava/lang/String;
        //     100: aload 14
        //     102: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     105: ifeq +57 -> 162
        //     108: aload 4
        //     110: invokevirtual 3560	java/io/DataInputStream:readInt	()I
        //     113: istore 15
        //     115: iload 15
        //     117: ifle +45 -> 162
        //     120: iinc 15 255
        //     123: aload_0
        //     124: new 1215	android/content/ComponentName
        //     127: dup
        //     128: aload 4
        //     130: invokevirtual 3563	java/io/DataInputStream:readUTF	()Ljava/lang/String;
        //     133: aload 4
        //     135: invokevirtual 3563	java/io/DataInputStream:readUTF	()Ljava/lang/String;
        //     138: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     141: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     144: pop
        //     145: goto -30 -> 115
        //     148: astore 10
        //     150: aload_3
        //     151: astore_2
        //     152: aload_2
        //     153: ifnull +7 -> 160
        //     156: aload_2
        //     157: invokevirtual 3575	java/io/FileInputStream:close	()V
        //     160: aload_0
        //     161: areturn
        //     162: aload_3
        //     163: ifnull +7 -> 170
        //     166: aload_3
        //     167: invokevirtual 3575	java/io/FileInputStream:close	()V
        //     170: goto -10 -> 160
        //     173: astore 5
        //     175: ldc 221
        //     177: ldc_w 3577
        //     180: aload 5
        //     182: invokestatic 1336	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     185: pop
        //     186: aload_2
        //     187: ifnull -27 -> 160
        //     190: aload_2
        //     191: invokevirtual 3575	java/io/FileInputStream:close	()V
        //     194: goto -34 -> 160
        //     197: astore 9
        //     199: goto -39 -> 160
        //     202: astore 6
        //     204: aload_2
        //     205: ifnull +7 -> 212
        //     208: aload_2
        //     209: invokevirtual 3575	java/io/FileInputStream:close	()V
        //     212: aload 6
        //     214: athrow
        //     215: astore 7
        //     217: goto -5 -> 212
        //     220: astore 11
        //     222: goto -52 -> 170
        //     225: astore 6
        //     227: aload_3
        //     228: astore_2
        //     229: goto -25 -> 204
        //     232: astore 5
        //     234: aload_3
        //     235: astore_2
        //     236: goto -61 -> 175
        //     239: astore 17
        //     241: goto -89 -> 152
        //
        // Exception table:
        //     from	to	target	type
        //     23	145	148	java/io/FileNotFoundException
        //     14	23	173	java/io/IOException
        //     156	160	197	java/io/IOException
        //     190	194	197	java/io/IOException
        //     14	23	202	finally
        //     175	186	202	finally
        //     208	212	215	java/io/IOException
        //     166	170	220	java/io/IOException
        //     23	145	225	finally
        //     23	145	232	java/io/IOException
        //     14	23	239	java/io/FileNotFoundException
    }

    private final void realStartServiceLocked(ServiceRecord paramServiceRecord, ProcessRecord paramProcessRecord)
        throws RemoteException
    {
        if (paramProcessRecord.thread == null)
            throw new RemoteException();
        paramServiceRecord.app = paramProcessRecord;
        long l = SystemClock.uptimeMillis();
        paramServiceRecord.lastActivity = l;
        paramServiceRecord.restartTime = l;
        paramProcessRecord.services.add(paramServiceRecord);
        bumpServiceExecutingLocked(paramServiceRecord, "create");
        updateLruProcessLocked(paramProcessRecord, true, true);
        try
        {
            this.mStringBuilder.setLength(0);
            paramServiceRecord.intent.getIntent().toShortString(this.mStringBuilder, true, false, true, false);
            Object[] arrayOfObject = new Object[4];
            arrayOfObject[0] = Integer.valueOf(System.identityHashCode(paramServiceRecord));
            arrayOfObject[1] = paramServiceRecord.shortName;
            arrayOfObject[2] = this.mStringBuilder.toString();
            arrayOfObject[3] = Integer.valueOf(paramServiceRecord.app.pid);
            EventLog.writeEvent(30030, arrayOfObject);
            synchronized (paramServiceRecord.stats.getBatteryStats())
            {
                paramServiceRecord.stats.startLaunchedLocked();
                ensurePackageDexOpt(paramServiceRecord.serviceInfo.packageName);
                paramProcessRecord.thread.scheduleCreateService(paramServiceRecord, paramServiceRecord.serviceInfo, compatibilityInfoForPackageLocked(paramServiceRecord.serviceInfo.applicationInfo));
                paramServiceRecord.postNotification();
                if (1 == 0)
                {
                    paramProcessRecord.services.remove(paramServiceRecord);
                    scheduleServiceRestartLocked(paramServiceRecord, false);
                }
                requestServiceBindingsLocked(paramServiceRecord);
                if ((paramServiceRecord.startRequested) && (paramServiceRecord.callStart) && (paramServiceRecord.pendingStarts.size() == 0))
                    paramServiceRecord.pendingStarts.add(new ServiceRecord.StartItem(paramServiceRecord, false, paramServiceRecord.makeNextStartId(), null, null));
                sendServiceArgsLocked(paramServiceRecord, true);
                return;
            }
        }
        finally
        {
            if (0 == 0)
            {
                paramProcessRecord.services.remove(paramServiceRecord);
                scheduleServiceRestartLocked(paramServiceRecord, false);
            }
        }
    }

    // ERROR //
    private void removeContentProviderExternalUnchecked(String paramString, IBinder paramIBinder)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_0
        //     3: getfield 634	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
        //     6: aload_1
        //     7: invokestatic 2965	android/os/Binder:getOrigCallingUser	()I
        //     10: invokevirtual 3125	com/android/server/am/ProviderMap:getProviderByName	(Ljava/lang/String;I)Lcom/android/server/am/ContentProviderRecord;
        //     13: astore 4
        //     15: aload 4
        //     17: ifnonnull +8 -> 25
        //     20: aload_0
        //     21: monitorexit
        //     22: goto +155 -> 177
        //     25: new 1215	android/content/ComponentName
        //     28: dup
        //     29: aload 4
        //     31: getfield 3043	com/android/server/am/ContentProviderRecord:info	Landroid/content/pm/ProviderInfo;
        //     34: getfield 1829	android/content/pm/ComponentInfo:packageName	Ljava/lang/String;
        //     37: aload 4
        //     39: getfield 3043	com/android/server/am/ContentProviderRecord:info	Landroid/content/pm/ProviderInfo;
        //     42: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     45: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     48: astore 5
        //     50: aload_0
        //     51: getfield 634	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
        //     54: aload 5
        //     56: invokestatic 2965	android/os/Binder:getOrigCallingUser	()I
        //     59: invokevirtual 3063	com/android/server/am/ProviderMap:getProviderByClass	(Landroid/content/ComponentName;I)Lcom/android/server/am/ContentProviderRecord;
        //     62: astore 6
        //     64: aload 6
        //     66: invokevirtual 2344	com/android/server/am/ContentProviderRecord:hasExternalProcessHandles	()Z
        //     69: ifeq +72 -> 141
        //     72: aload 6
        //     74: aload_2
        //     75: invokevirtual 3611	com/android/server/am/ContentProviderRecord:removeExternalProcessHandleLocked	(Landroid/os/IBinder;)Z
        //     78: ifeq +17 -> 95
        //     81: aload_0
        //     82: invokevirtual 1396	com/android/server/am/ActivityManagerService:updateOomAdjLocked	()V
        //     85: aload_0
        //     86: monitorexit
        //     87: goto +90 -> 177
        //     90: astore_3
        //     91: aload_0
        //     92: monitorexit
        //     93: aload_3
        //     94: athrow
        //     95: ldc 221
        //     97: new 598	java/lang/StringBuilder
        //     100: dup
        //     101: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     104: ldc_w 3613
        //     107: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     110: aload 6
        //     112: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     115: ldc_w 3615
        //     118: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     121: aload_2
        //     122: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     125: ldc_w 3617
        //     128: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     131: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     134: invokestatic 1310	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
        //     137: pop
        //     138: goto -53 -> 85
        //     141: ldc 221
        //     143: new 598	java/lang/StringBuilder
        //     146: dup
        //     147: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     150: ldc_w 3619
        //     153: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     156: aload 6
        //     158: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     161: ldc_w 3621
        //     164: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     167: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     170: invokestatic 1310	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
        //     173: pop
        //     174: goto -89 -> 85
        //     177: return
        //
        // Exception table:
        //     from	to	target	type
        //     2	93	90	finally
        //     95	174	90	finally
    }

    private final boolean removeDyingProviderLocked(ProcessRecord paramProcessRecord, ContentProviderRecord paramContentProviderRecord, boolean paramBoolean)
    {
        boolean bool = this.mLaunchingProviders.contains(paramContentProviderRecord);
        if ((!bool) || (paramBoolean))
            try
            {
                paramContentProviderRecord.launchingApp = null;
                paramContentProviderRecord.notifyAll();
                this.mProviderMap.removeProviderByClass(paramContentProviderRecord.name, UserId.getUserId(paramContentProviderRecord.uid));
                String[] arrayOfString = paramContentProviderRecord.info.authority.split(";");
                for (int i = 0; i < arrayOfString.length; i++)
                    this.mProviderMap.removeProviderByName(arrayOfString[i], UserId.getUserId(paramContentProviderRecord.uid));
            }
            finally
            {
            }
        int j = 0;
        ContentProviderConnection localContentProviderConnection;
        if (j < paramContentProviderRecord.connections.size())
        {
            localContentProviderConnection = (ContentProviderConnection)paramContentProviderRecord.connections.get(j);
            if ((!localContentProviderConnection.waiting) || (!bool) || (paramBoolean));
        }
        while (true)
        {
            j++;
            break;
            ProcessRecord localProcessRecord = localContentProviderConnection.client;
            localContentProviderConnection.dead = true;
            if (localContentProviderConnection.stableCount > 0)
            {
                if ((localProcessRecord.persistent) || (localProcessRecord.thread == null) || (localProcessRecord.pid == 0) || (localProcessRecord.pid == MY_PID))
                    continue;
                StringBuilder localStringBuilder = new StringBuilder().append("Kill ").append(localProcessRecord.processName).append(" (pid ").append(localProcessRecord.pid).append("): provider ").append(paramContentProviderRecord.info.name).append(" in dying process ");
                if (paramProcessRecord != null);
                for (String str = paramProcessRecord.processName; ; str = "??")
                {
                    Slog.i("ActivityManager", str);
                    Object[] arrayOfObject = new Object[4];
                    arrayOfObject[0] = Integer.valueOf(localProcessRecord.pid);
                    arrayOfObject[1] = localProcessRecord.processName;
                    arrayOfObject[2] = Integer.valueOf(localProcessRecord.setAdj);
                    arrayOfObject[3] = ("dying provider " + paramContentProviderRecord.name.toShortString());
                    EventLog.writeEvent(30023, arrayOfObject);
                    Process.killProcessQuiet(localProcessRecord.pid);
                    break;
                }
            }
            if ((localProcessRecord.thread == null) || (localContentProviderConnection.provider.provider == null))
                continue;
            try
            {
                localProcessRecord.thread.unstableProviderDied(localContentProviderConnection.provider.provider.asBinder());
                label440: paramContentProviderRecord.connections.remove(j);
                localContentProviderConnection.client.conProviders.remove(localContentProviderConnection);
                continue;
                if ((bool) && (paramBoolean))
                    this.mLaunchingProviders.remove(paramContentProviderRecord);
                return bool;
            }
            catch (RemoteException localRemoteException)
            {
                break label440;
            }
        }
    }

    private final boolean removeProcessLocked(ProcessRecord paramProcessRecord, boolean paramBoolean1, boolean paramBoolean2, String paramString)
    {
        String str = paramProcessRecord.processName;
        int i = paramProcessRecord.uid;
        this.mProcessNames.remove(str, i);
        this.mIsolatedProcesses.remove(paramProcessRecord.uid);
        if (this.mHeavyWeightProcess == paramProcessRecord)
        {
            this.mHeavyWeightProcess = null;
            this.mHandler.sendEmptyMessage(25);
        }
        boolean bool = false;
        int j;
        if ((paramProcessRecord.pid > 0) && (paramProcessRecord.pid != MY_PID))
            j = paramProcessRecord.pid;
        while (true)
        {
            synchronized (this.mPidsSelfLocked)
            {
                this.mPidsSelfLocked.remove(j);
                this.mHandler.removeMessages(20, paramProcessRecord);
                Slog.i("ActivityManager", "Killing proc " + paramProcessRecord.toShortString() + ": " + paramString);
                handleAppDiedLocked(paramProcessRecord, true, paramBoolean2);
                this.mLruProcesses.remove(paramProcessRecord);
                Process.killProcessQuiet(j);
                if ((paramProcessRecord.persistent) && (!paramProcessRecord.isolated))
                {
                    if (!paramBoolean1)
                        addAppLocked(paramProcessRecord.info, false);
                }
                else
                    return bool;
            }
            bool = true;
            continue;
            this.mRemovedProcesses.add(paramProcessRecord);
        }
    }

    private void reportStartInstrumentationFailure(IInstrumentationWatcher paramIInstrumentationWatcher, ComponentName paramComponentName, String paramString)
    {
        Slog.w("ActivityManager", paramString);
        if (paramIInstrumentationWatcher != null);
        try
        {
            Bundle localBundle = new Bundle();
            localBundle.putString("id", "ActivityManagerService");
            localBundle.putString("Error", paramString);
            paramIInstrumentationWatcher.instrumentationStatus(paramComponentName, -1, localBundle);
            return;
        }
        catch (RemoteException localRemoteException)
        {
            while (true)
                Slog.w("ActivityManager", localRemoteException);
        }
    }

    private final boolean requestServiceBindingLocked(ServiceRecord paramServiceRecord, IntentBindRecord paramIntentBindRecord, boolean paramBoolean)
    {
        boolean bool = false;
        if ((paramServiceRecord.app == null) || (paramServiceRecord.app.thread == null));
        while (true)
        {
            return bool;
            if (((!paramIntentBindRecord.requested) || (paramBoolean)) && (paramIntentBindRecord.apps.size() > 0));
            try
            {
                bumpServiceExecutingLocked(paramServiceRecord, "bind");
                paramServiceRecord.app.thread.scheduleBindService(paramServiceRecord, paramIntentBindRecord.intent.getIntent(), paramBoolean);
                if (!paramBoolean)
                    paramIntentBindRecord.requested = true;
                paramIntentBindRecord.hasBound = true;
                paramIntentBindRecord.doRebind = false;
                bool = true;
            }
            catch (RemoteException localRemoteException)
            {
            }
        }
    }

    private final void requestServiceBindingsLocked(ServiceRecord paramServiceRecord)
    {
        Iterator localIterator = paramServiceRecord.bindings.values().iterator();
        while ((localIterator.hasNext()) && (requestServiceBindingLocked(paramServiceRecord, (IntentBindRecord)localIterator.next(), false)));
    }

    private final ActivityRecord resumedAppLocked()
    {
        ActivityRecord localActivityRecord = this.mMainStack.mResumedActivity;
        if ((localActivityRecord == null) || (localActivityRecord.app == null))
        {
            localActivityRecord = this.mMainStack.mPausingActivity;
            if ((localActivityRecord == null) || (localActivityRecord.app == null))
                localActivityRecord = this.mMainStack.topRunningActivityLocked(null);
        }
        return localActivityRecord;
    }

    private ServiceLookupResult retrieveServiceLocked(Intent paramIntent, String paramString, int paramInt1, int paramInt2, int paramInt3)
    {
        Object localObject1 = null;
        if (paramIntent.getComponent() != null)
            localObject1 = this.mServiceMap.getServiceByName(paramIntent.getComponent(), paramInt3);
        if (localObject1 == null)
        {
            Intent.FilterComparison localFilterComparison1 = new Intent.FilterComparison(paramIntent);
            localObject1 = this.mServiceMap.getServiceByIntent(localFilterComparison1, paramInt3);
        }
        if (localObject1 == null);
        while (true)
        {
            ServiceLookupResult localServiceLookupResult;
            try
            {
                ResolveInfo localResolveInfo = AppGlobals.getPackageManager().resolveService(paramIntent, paramString, 1024, paramInt3);
                if (localResolveInfo == null)
                    break label695;
                localServiceInfo = localResolveInfo.serviceInfo;
                if (localServiceInfo == null)
                {
                    Slog.w("ActivityManager", "Unable to start service " + paramIntent + ": not found");
                    localServiceLookupResult = null;
                }
                else
                {
                    if (paramInt3 > 0)
                    {
                        if (isSingleton(localServiceInfo.processName, localServiceInfo.applicationInfo))
                            paramInt3 = 0;
                        localServiceInfo.applicationInfo = getAppInfoForUser(localServiceInfo.applicationInfo, paramInt3);
                    }
                    ComponentName localComponentName = new ComponentName(localServiceInfo.applicationInfo.packageName, localServiceInfo.name);
                    localServiceRecord = this.mServiceMap.getServiceByName(localComponentName, paramInt3);
                    if (localServiceRecord == null)
                    {
                        try
                        {
                            Intent.FilterComparison localFilterComparison2 = new Intent.FilterComparison(paramIntent.cloneFilter());
                            ServiceRestarter localServiceRestarter = new ServiceRestarter(null);
                            synchronized (this.mBatteryStatsService.getActiveStatistics())
                            {
                                BatteryStatsImpl.Uid.Pkg.Serv localServ = ???.getServiceStatsLocked(localServiceInfo.applicationInfo.uid, localServiceInfo.packageName, localServiceInfo.name);
                                localObject1 = new ServiceRecord(this, localServ, localComponentName, localFilterComparison2, localServiceInfo, localServiceRestarter);
                                localServiceRestarter.setService((ServiceRecord)localObject1);
                                this.mServiceMap.putServiceByName(localComponentName, UserId.getUserId(((ServiceRecord)localObject1).appInfo.uid), (ServiceRecord)localObject1);
                                this.mServiceMap.putServiceByIntent(localFilterComparison2, UserId.getUserId(((ServiceRecord)localObject1).appInfo.uid), (ServiceRecord)localObject1);
                                int i = this.mPendingServices.size();
                                int j = 0;
                                if (j < i)
                                {
                                    if (((ServiceRecord)this.mPendingServices.get(j)).name.equals(localComponentName))
                                    {
                                        this.mPendingServices.remove(j);
                                        j--;
                                        i--;
                                    }
                                    j++;
                                }
                            }
                        }
                        catch (RemoteException localRemoteException2)
                        {
                            localObject1 = localServiceRecord;
                        }
                        if (localObject1 != null)
                        {
                            if (checkComponentPermission(((ServiceRecord)localObject1).permission, paramInt1, paramInt2, ((ServiceRecord)localObject1).appInfo.uid, ((ServiceRecord)localObject1).exported) != 0)
                            {
                                if (!((ServiceRecord)localObject1).exported)
                                {
                                    Slog.w("ActivityManager", "Permission Denial: Accessing service " + ((ServiceRecord)localObject1).name + " from pid=" + paramInt1 + ", uid=" + paramInt2 + " that is not exported from uid " + ((ServiceRecord)localObject1).appInfo.uid);
                                    localServiceLookupResult = new ServiceLookupResult(null, "not exported from uid " + ((ServiceRecord)localObject1).appInfo.uid);
                                }
                                else
                                {
                                    Slog.w("ActivityManager", "Permission Denial: Accessing service " + ((ServiceRecord)localObject1).name + " from pid=" + paramInt1 + ", uid=" + paramInt2 + " requires " + ((ServiceRecord)localObject1).permission);
                                    localServiceLookupResult = new ServiceLookupResult(null, ((ServiceRecord)localObject1).permission);
                                }
                            }
                            else
                                localServiceLookupResult = new ServiceLookupResult((ServiceRecord)localObject1, null);
                        }
                        else
                            localServiceLookupResult = null;
                    }
                }
            }
            catch (RemoteException localRemoteException1)
            {
                ServiceRecord localServiceRecord;
                continue;
                localObject1 = localServiceRecord;
                continue;
            }
            return localServiceLookupResult;
            label695: ServiceInfo localServiceInfo = null;
        }
    }

    private void retrieveSettings()
    {
        ContentResolver localContentResolver = this.mContext.getContentResolver();
        String str = Settings.System.getString(localContentResolver, "debug_app");
        boolean bool1;
        if (Settings.System.getInt(localContentResolver, "wait_for_debugger", 0) != 0)
        {
            bool1 = true;
            if (Settings.System.getInt(localContentResolver, "always_finish_activities", 0) == 0)
                break label111;
        }
        label111: for (boolean bool2 = true; ; bool2 = false)
        {
            Configuration localConfiguration = new Configuration();
            Settings.System.getConfiguration(localContentResolver, localConfiguration);
            try
            {
                this.mOrigDebugApp = str;
                this.mDebugApp = str;
                this.mOrigWaitForDebugger = bool1;
                this.mWaitForDebugger = bool1;
                this.mAlwaysFinishActivities = bool2;
                updateConfigurationLocked(localConfiguration, null, false, true);
                return;
            }
            finally
            {
                localObject = finally;
                throw localObject;
            }
            bool1 = false;
            break;
        }
    }

    private void revokeUriPermissionLocked(int paramInt1, Uri paramUri, int paramInt2)
    {
        int i = paramInt2 & 0x3;
        if (i == 0)
            return;
        IPackageManager localIPackageManager = AppGlobals.getPackageManager();
        String str = paramUri.getAuthority();
        Object localObject = null;
        int j = UserId.getUserId(paramInt1);
        ContentProviderRecord localContentProviderRecord = this.mProviderMap.getProviderByName(str, j);
        if (localContentProviderRecord != null)
            localObject = localContentProviderRecord.info;
        while (true)
            while (true)
            {
                if (localObject == null)
                {
                    Slog.w("ActivityManager", "No content provider found for permission revoke: " + paramUri.toSafeString());
                    break;
                }
                try
                {
                    ProviderInfo localProviderInfo = localIPackageManager.resolveContentProvider(str, 2048, j);
                    localObject = localProviderInfo;
                    continue;
                    if (!checkHoldingPermissionsLocked(localIPackageManager, (ProviderInfo)localObject, paramUri, paramInt1, i))
                        throw new SecurityException("Uid " + paramInt1 + " does not have permission to uri " + paramUri);
                    List localList1 = paramUri.getPathSegments();
                    if (localList1 == null)
                        break;
                    int k = localList1.size();
                    int m = this.mGrantedUriPermissions.size();
                    for (int n = 0; n < m; n++)
                    {
                        HashMap localHashMap = (HashMap)this.mGrantedUriPermissions.valueAt(n);
                        Iterator localIterator = localHashMap.values().iterator();
                        while (localIterator.hasNext())
                        {
                            UriPermission localUriPermission = (UriPermission)localIterator.next();
                            Uri localUri = localUriPermission.uri;
                            if (str.equals(localUri.getAuthority()))
                            {
                                List localList2 = localUri.getPathSegments();
                                if ((localList2 != null) && (localList2.size() >= k))
                                {
                                    for (int i1 = 0; ; i1++)
                                    {
                                        if (i1 >= k)
                                            break label343;
                                        if (!((String)localList1.get(i1)).equals(localList2.get(i1)))
                                            break;
                                    }
                                    label343: localUriPermission.clearModes(i);
                                    if (localUriPermission.modeFlags == 0)
                                        localIterator.remove();
                                }
                            }
                        }
                        if (localHashMap.size() == 0)
                        {
                            this.mGrantedUriPermissions.remove(this.mGrantedUriPermissions.keyAt(n));
                            m--;
                            n--;
                        }
                    }
                }
                catch (RemoteException localRemoteException)
                {
                }
            }
    }

    private void saveLocaleLocked(Locale paramLocale, boolean paramBoolean1, boolean paramBoolean2)
    {
        if (paramBoolean1)
        {
            SystemProperties.set("user.language", paramLocale.getLanguage());
            SystemProperties.set("user.region", paramLocale.getCountry());
        }
        if (paramBoolean2)
        {
            SystemProperties.set("persist.sys.language", paramLocale.getLanguage());
            SystemProperties.set("persist.sys.country", paramLocale.getCountry());
            SystemProperties.set("persist.sys.localevar", paramLocale.getVariant());
        }
    }

    private static boolean scanArgs(String[] paramArrayOfString, String paramString)
    {
        int j;
        if (paramArrayOfString != null)
        {
            int i = paramArrayOfString.length;
            j = 0;
            if (j < i)
                if (!paramString.equals(paramArrayOfString[j]));
        }
        for (boolean bool = true; ; bool = false)
        {
            return bool;
            j++;
            break;
        }
    }

    private final boolean scheduleServiceRestartLocked(ServiceRecord paramServiceRecord, boolean paramBoolean)
    {
        boolean bool = false;
        long l1 = SystemClock.uptimeMillis();
        long l2 = 5000L;
        long l3 = 60000L;
        if ((0x8 & paramServiceRecord.serviceInfo.applicationInfo.flags) != 0)
            l2 /= 4L;
        int i = paramServiceRecord.deliveredStarts.size();
        if (i > 0)
        {
            int m = i - 1;
            if (m >= 0)
            {
                ServiceRecord.StartItem localStartItem = (ServiceRecord.StartItem)paramServiceRecord.deliveredStarts.get(m);
                localStartItem.removeUriPermissionsLocked();
                if (localStartItem.intent == null);
                while (true)
                {
                    m--;
                    break;
                    if ((!paramBoolean) || ((localStartItem.deliveryCount < 3) && (localStartItem.doneExecutingCount < 6)))
                    {
                        paramServiceRecord.pendingStarts.add(0, localStartItem);
                        long l4 = 2L * (SystemClock.uptimeMillis() - localStartItem.deliveredTime);
                        if (l2 < l4)
                            l2 = l4;
                        if (l3 < l4)
                            l3 = l4;
                    }
                    else
                    {
                        Slog.w("ActivityManager", "Canceling start item " + localStartItem.intent + " in service " + paramServiceRecord.name);
                        bool = true;
                    }
                }
            }
            paramServiceRecord.deliveredStarts.clear();
        }
        paramServiceRecord.totalRestartCount = (1 + paramServiceRecord.totalRestartCount);
        label275: int j;
        if (paramServiceRecord.restartDelay == 0L)
        {
            paramServiceRecord.restartCount = (1 + paramServiceRecord.restartCount);
            paramServiceRecord.restartDelay = l2;
            paramServiceRecord.nextRestartTime = (l1 + paramServiceRecord.restartDelay);
            j = 0;
        }
        for (int k = -1 + this.mRestartingServices.size(); ; k--)
            if (k >= 0)
            {
                ServiceRecord localServiceRecord = (ServiceRecord)this.mRestartingServices.get(k);
                if ((localServiceRecord != paramServiceRecord) && (paramServiceRecord.nextRestartTime >= localServiceRecord.nextRestartTime - 10000L) && (paramServiceRecord.nextRestartTime < 10000L + localServiceRecord.nextRestartTime))
                {
                    paramServiceRecord.nextRestartTime = (10000L + localServiceRecord.nextRestartTime);
                    paramServiceRecord.restartDelay = (paramServiceRecord.nextRestartTime - l1);
                    j = 1;
                }
            }
            else
            {
                if (j != 0)
                    break label275;
                if (!this.mRestartingServices.contains(paramServiceRecord))
                    this.mRestartingServices.add(paramServiceRecord);
                paramServiceRecord.cancelNotification();
                this.mHandler.removeCallbacks(paramServiceRecord.restarter);
                this.mHandler.postAtTime(paramServiceRecord.restarter, paramServiceRecord.nextRestartTime);
                paramServiceRecord.nextRestartTime = (SystemClock.uptimeMillis() + paramServiceRecord.restartDelay);
                Slog.w("ActivityManager", "Scheduling restart of crashed service " + paramServiceRecord.shortName + " in " + paramServiceRecord.restartDelay + "ms");
                Object[] arrayOfObject = new Object[2];
                arrayOfObject[0] = paramServiceRecord.shortName;
                arrayOfObject[1] = Long.valueOf(paramServiceRecord.restartDelay);
                EventLog.writeEvent(30035, arrayOfObject);
                return bool;
                if (l1 > l3 + paramServiceRecord.restartTime)
                {
                    paramServiceRecord.restartCount = 1;
                    paramServiceRecord.restartDelay = l2;
                    break;
                }
                if ((0x8 & paramServiceRecord.serviceInfo.applicationInfo.flags) != 0)
                {
                    paramServiceRecord.restartDelay += l2 / 2L;
                    break;
                }
                paramServiceRecord.restartDelay = (4L * paramServiceRecord.restartDelay);
                if (paramServiceRecord.restartDelay >= l2)
                    break;
                paramServiceRecord.restartDelay = l2;
                break;
            }
    }

    public static ActivityManagerService self()
    {
        return mSelf;
    }

    private final void sendPackageBroadcastLocked(int paramInt, String[] paramArrayOfString)
    {
        int i = -1 + this.mLruProcesses.size();
        while (true)
        {
            ProcessRecord localProcessRecord;
            if (i >= 0)
            {
                localProcessRecord = (ProcessRecord)this.mLruProcesses.get(i);
                if (localProcessRecord.thread == null);
            }
            try
            {
                localProcessRecord.thread.dispatchPackageBroadcast(paramInt, paramArrayOfString);
                label48: i--;
                continue;
                return;
            }
            catch (RemoteException localRemoteException)
            {
                break label48;
            }
        }
    }

    private final void sendServiceArgsLocked(ServiceRecord paramServiceRecord, boolean paramBoolean)
    {
        int i = paramServiceRecord.pendingStarts.size();
        if (i == 0);
        while (true)
        {
            return;
            label13: if (paramServiceRecord.pendingStarts.size() > 0)
                try
                {
                    ServiceRecord.StartItem localStartItem = (ServiceRecord.StartItem)paramServiceRecord.pendingStarts.remove(0);
                    if ((localStartItem.intent == null) && (i > 1))
                        break label13;
                    localStartItem.deliveredTime = SystemClock.uptimeMillis();
                    paramServiceRecord.deliveredStarts.add(localStartItem);
                    localStartItem.deliveryCount = (1 + localStartItem.deliveryCount);
                    if (localStartItem.neededGrants != null)
                        grantUriPermissionUncheckedFromIntentLocked(localStartItem.neededGrants, localStartItem.getUriPermissionsLocked());
                    bumpServiceExecutingLocked(paramServiceRecord, "start");
                    if (!paramBoolean)
                    {
                        paramBoolean = true;
                        updateOomAdjLocked(paramServiceRecord.app);
                    }
                    int j = 0;
                    if (localStartItem.deliveryCount > 1)
                        j = 0x0 | 0x2;
                    if (localStartItem.doneExecutingCount > 0)
                        j |= 1;
                    paramServiceRecord.app.thread.scheduleServiceArgs(paramServiceRecord, localStartItem.taskRemoved, localStartItem.id, j, localStartItem.intent);
                }
                catch (RemoteException localRemoteException)
                {
                    continue;
                }
                catch (Exception localException)
                {
                    Slog.w("ActivityManager", "Unexpected exception", localException);
                }
        }
    }

    public static void setSystemProcess()
    {
        try
        {
            ActivityManagerService localActivityManagerService1 = mSelf;
            ServiceManager.addService("activity", localActivityManagerService1, true);
            ServiceManager.addService("meminfo", new MemBinder(localActivityManagerService1));
            ServiceManager.addService("gfxinfo", new GraphicsBinder(localActivityManagerService1));
            ServiceManager.addService("dbinfo", new DbBinder(localActivityManagerService1));
            ServiceManager.addService("cpuinfo", new CpuBinder(localActivityManagerService1));
            ServiceManager.addService("permission", new PermissionController(localActivityManagerService1));
            ApplicationInfo localApplicationInfo = mSelf.mContext.getPackageManager().getApplicationInfo("android", 1024);
            mSystemThread.installSystemApplicationInfo(localApplicationInfo);
            synchronized (mSelf)
            {
                ProcessRecord localProcessRecord = mSelf.newProcessRecordLocked(mSystemThread.getApplicationThread(), localApplicationInfo, localApplicationInfo.processName, false);
                localProcessRecord.persistent = true;
                localProcessRecord.pid = MY_PID;
                localProcessRecord.maxAdj = -16;
                mSelf.mProcessNames.put(localProcessRecord.processName, localProcessRecord.uid, localProcessRecord);
                synchronized (mSelf.mPidsSelfLocked)
                {
                    mSelf.mPidsSelfLocked.put(localProcessRecord.pid, localProcessRecord);
                    mSelf.updateLruProcessLocked(localProcessRecord, true, true);
                    return;
                }
            }
        }
        catch (PackageManager.NameNotFoundException localNameNotFoundException)
        {
            throw new RuntimeException("Unable to find android system package", localNameNotFoundException);
        }
    }

    private static final boolean shouldShowDialogs(Configuration paramConfiguration)
    {
        int i = 1;
        if ((paramConfiguration.keyboard != i) || (paramConfiguration.touchscreen != i));
        while (true)
        {
            return i;
            int j = 0;
        }
    }

    // ERROR //
    private final void startProcessLocked(ProcessRecord paramProcessRecord, String paramString1, String paramString2)
    {
        // Byte code:
        //     0: aload_1
        //     1: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     4: ifle +51 -> 55
        //     7: aload_1
        //     8: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     11: getstatic 442	com/android/server/am/ActivityManagerService:MY_PID	I
        //     14: if_icmpeq +41 -> 55
        //     17: aload_0
        //     18: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     21: astore 46
        //     23: aload 46
        //     25: monitorenter
        //     26: aload_0
        //     27: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     30: aload_1
        //     31: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     34: invokevirtual 2126	android/util/SparseArray:remove	(I)V
        //     37: aload_0
        //     38: getfield 755	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
        //     41: bipush 20
        //     43: aload_1
        //     44: invokevirtual 1179	android/os/Handler:removeMessages	(ILjava/lang/Object;)V
        //     47: aload 46
        //     49: monitorexit
        //     50: aload_1
        //     51: iconst_0
        //     52: putfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     55: aload_0
        //     56: getfield 576	com/android/server/am/ActivityManagerService:mProcessesOnHold	Ljava/util/ArrayList;
        //     59: aload_1
        //     60: invokevirtual 1280	java/util/ArrayList:remove	(Ljava/lang/Object;)Z
        //     63: pop
        //     64: aload_0
        //     65: invokevirtual 3935	com/android/server/am/ActivityManagerService:updateCpuStats	()V
        //     68: aload_0
        //     69: getfield 686	com/android/server/am/ActivityManagerService:mProcDeaths	[I
        //     72: iconst_0
        //     73: aload_0
        //     74: getfield 686	com/android/server/am/ActivityManagerService:mProcDeaths	[I
        //     77: iconst_1
        //     78: bipush 255
        //     80: aload_0
        //     81: getfield 686	com/android/server/am/ActivityManagerService:mProcDeaths	[I
        //     84: arraylength
        //     85: iadd
        //     86: invokestatic 3939	java/lang/System:arraycopy	(Ljava/lang/Object;ILjava/lang/Object;II)V
        //     89: aload_0
        //     90: getfield 686	com/android/server/am/ActivityManagerService:mProcDeaths	[I
        //     93: iconst_0
        //     94: iconst_0
        //     95: iastore
        //     96: aload_1
        //     97: getfield 1296	com/android/server/am/ProcessRecord:uid	I
        //     100: istore 7
        //     102: aconst_null
        //     103: astore 8
        //     105: aload_1
        //     106: getfield 2121	com/android/server/am/ProcessRecord:isolated	Z
        //     109: istore 9
        //     111: iload 9
        //     113: ifne +26 -> 139
        //     116: aload_0
        //     117: getfield 2453	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
        //     120: invokevirtual 3897	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
        //     123: aload_1
        //     124: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     127: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     130: invokevirtual 3943	android/content/pm/PackageManager:getPackageGids	(Ljava/lang/String;)[I
        //     133: astore 45
        //     135: aload 45
        //     137: astore 8
        //     139: aload_0
        //     140: getfield 3469	com/android/server/am/ActivityManagerService:mFactoryTest	I
        //     143: ifeq +62 -> 205
        //     146: aload_0
        //     147: getfield 3469	com/android/server/am/ActivityManagerService:mFactoryTest	I
        //     150: iconst_1
        //     151: if_icmpne +30 -> 181
        //     154: aload_0
        //     155: getfield 3945	com/android/server/am/ActivityManagerService:mTopComponent	Landroid/content/ComponentName;
        //     158: ifnull +23 -> 181
        //     161: aload_1
        //     162: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     165: aload_0
        //     166: getfield 3945	com/android/server/am/ActivityManagerService:mTopComponent	Landroid/content/ComponentName;
        //     169: invokevirtual 1218	android/content/ComponentName:getPackageName	()Ljava/lang/String;
        //     172: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     175: ifeq +6 -> 181
        //     178: iconst_0
        //     179: istore 7
        //     181: aload_0
        //     182: getfield 3469	com/android/server/am/ActivityManagerService:mFactoryTest	I
        //     185: iconst_2
        //     186: if_icmpne +19 -> 205
        //     189: bipush 16
        //     191: aload_1
        //     192: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     195: getfield 991	android/content/pm/ApplicationInfo:flags	I
        //     198: iand
        //     199: ifeq +6 -> 205
        //     202: iconst_0
        //     203: istore 7
        //     205: iconst_0
        //     206: istore 10
        //     208: iconst_2
        //     209: aload_1
        //     210: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     213: getfield 991	android/content/pm/ApplicationInfo:flags	I
        //     216: iand
        //     217: ifeq +10 -> 227
        //     220: iconst_2
        //     221: iconst_0
        //     222: iconst_1
        //     223: ior
        //     224: ior
        //     225: istore 10
        //     227: sipush 16384
        //     230: aload_1
        //     231: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     234: getfield 991	android/content/pm/ApplicationInfo:flags	I
        //     237: iand
        //     238: ifne +591 -> 829
        //     241: getstatic 3950	dalvik/system/Zygote:systemInSafeMode	Z
        //     244: iconst_1
        //     245: if_icmpne +6 -> 251
        //     248: goto +581 -> 829
        //     251: ldc_w 860
        //     254: ldc_w 3952
        //     257: invokestatic 3955	android/os/SystemProperties:get	(Ljava/lang/String;)Ljava/lang/String;
        //     260: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     263: ifeq +9 -> 272
        //     266: iload 10
        //     268: iconst_2
        //     269: ior
        //     270: istore 10
        //     272: ldc_w 860
        //     275: ldc_w 3957
        //     278: invokestatic 3955	android/os/SystemProperties:get	(Ljava/lang/String;)Ljava/lang/String;
        //     281: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     284: ifeq +10 -> 294
        //     287: iload 10
        //     289: bipush 16
        //     291: ior
        //     292: istore 10
        //     294: ldc_w 860
        //     297: ldc_w 3959
        //     300: invokestatic 3955	android/os/SystemProperties:get	(Ljava/lang/String;)Ljava/lang/String;
        //     303: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     306: ifeq +9 -> 315
        //     309: iload 10
        //     311: iconst_4
        //     312: ior
        //     313: istore 10
        //     315: aload_1
        //     316: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     319: astore 11
        //     321: aload_1
        //     322: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     325: getfield 3962	android/content/pm/ApplicationInfo:targetSdkVersion	I
        //     328: istore 12
        //     330: ldc_w 3964
        //     333: aload 11
        //     335: iload 7
        //     337: iload 7
        //     339: aload 8
        //     341: iload 10
        //     343: iload 12
        //     345: aconst_null
        //     346: invokestatic 3967	android/os/Process:start	(Ljava/lang/String;Ljava/lang/String;II[III[Ljava/lang/String;)Landroid/os/Process$ProcessStartResult;
        //     349: astore 13
        //     351: aload_1
        //     352: getfield 3971	com/android/server/am/ProcessRecord:batteryStats	Lcom/android/internal/os/BatteryStatsImpl$Uid$Proc;
        //     355: invokevirtual 3974	com/android/internal/os/BatteryStatsImpl$Uid$Proc:getBatteryStats	()Lcom/android/internal/os/BatteryStatsImpl;
        //     358: astore 14
        //     360: aload 14
        //     362: monitorenter
        //     363: aload 14
        //     365: invokevirtual 3977	com/android/internal/os/BatteryStatsImpl:isOnBattery	()Z
        //     368: ifeq +10 -> 378
        //     371: aload_1
        //     372: getfield 3971	com/android/server/am/ProcessRecord:batteryStats	Lcom/android/internal/os/BatteryStatsImpl$Uid$Proc;
        //     375: invokevirtual 3980	com/android/internal/os/BatteryStatsImpl$Uid$Proc:incStartsLocked	()V
        //     378: aload 14
        //     380: monitorexit
        //     381: iconst_5
        //     382: anewarray 1138	java/lang/Object
        //     385: astore 16
        //     387: aload 16
        //     389: iconst_0
        //     390: aload 13
        //     392: getfield 3983	android/os/Process$ProcessStartResult:pid	I
        //     395: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     398: aastore
        //     399: aload 16
        //     401: iconst_1
        //     402: iload 7
        //     404: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     407: aastore
        //     408: aload 16
        //     410: iconst_2
        //     411: aload_1
        //     412: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     415: aastore
        //     416: aload 16
        //     418: iconst_3
        //     419: aload_2
        //     420: aastore
        //     421: aload_3
        //     422: ifnull +417 -> 839
        //     425: aload_3
        //     426: astore 17
        //     428: aload 16
        //     430: iconst_4
        //     431: aload 17
        //     433: aastore
        //     434: sipush 30014
        //     437: aload 16
        //     439: invokestatic 1148	android/util/EventLog:writeEvent	(I[Ljava/lang/Object;)I
        //     442: pop
        //     443: aload_1
        //     444: getfield 1243	com/android/server/am/ProcessRecord:persistent	Z
        //     447: ifeq +18 -> 465
        //     450: invokestatic 911	com/android/server/Watchdog:getInstance	()Lcom/android/server/Watchdog;
        //     453: aload_1
        //     454: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     457: aload 13
        //     459: getfield 3983	android/os/Process$ProcessStartResult:pid	I
        //     462: invokevirtual 3986	com/android/server/Watchdog:processStarted	(Ljava/lang/String;I)V
        //     465: aload_0
        //     466: getfield 650	com/android/server/am/ActivityManagerService:mStringBuilder	Ljava/lang/StringBuilder;
        //     469: astore 19
        //     471: aload 19
        //     473: iconst_0
        //     474: invokevirtual 3586	java/lang/StringBuilder:setLength	(I)V
        //     477: aload 19
        //     479: ldc_w 3988
        //     482: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     485: pop
        //     486: aload 19
        //     488: aload_1
        //     489: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     492: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     495: pop
        //     496: aload 19
        //     498: ldc_w 3990
        //     501: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     504: pop
        //     505: aload 19
        //     507: aload_2
        //     508: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     511: pop
        //     512: aload_3
        //     513: ifnull +19 -> 532
        //     516: aload 19
        //     518: ldc_w 2558
        //     521: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     524: pop
        //     525: aload 19
        //     527: aload_3
        //     528: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     531: pop
        //     532: aload 19
        //     534: ldc_w 3992
        //     537: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     540: pop
        //     541: aload 19
        //     543: aload 13
        //     545: getfield 3983	android/os/Process$ProcessStartResult:pid	I
        //     548: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     551: pop
        //     552: aload 19
        //     554: ldc_w 2943
        //     557: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     560: pop
        //     561: aload 19
        //     563: iload 7
        //     565: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     568: pop
        //     569: aload 19
        //     571: ldc_w 3994
        //     574: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     577: pop
        //     578: aload 8
        //     580: ifnull +116 -> 696
        //     583: iconst_0
        //     584: istore 38
        //     586: iload 38
        //     588: aload 8
        //     590: arraylength
        //     591: if_icmpge +105 -> 696
        //     594: iload 38
        //     596: ifeq +12 -> 608
        //     599: aload 19
        //     601: ldc_w 3996
        //     604: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     607: pop
        //     608: aload 19
        //     610: aload 8
        //     612: iload 38
        //     614: iaload
        //     615: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     618: pop
        //     619: iinc 38 1
        //     622: goto -36 -> 586
        //     625: astore 47
        //     627: aload 46
        //     629: monitorexit
        //     630: aload 47
        //     632: athrow
        //     633: astore 43
        //     635: ldc 221
        //     637: ldc_w 3998
        //     640: aload 43
        //     642: invokestatic 1336	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     645: pop
        //     646: goto -507 -> 139
        //     649: astore 5
        //     651: aload_1
        //     652: iconst_0
        //     653: putfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     656: ldc 221
        //     658: new 598	java/lang/StringBuilder
        //     661: dup
        //     662: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     665: ldc_w 4000
        //     668: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     671: aload_1
        //     672: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     675: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     678: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     681: aload 5
        //     683: invokestatic 1048	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     686: pop
        //     687: return
        //     688: astore 15
        //     690: aload 14
        //     692: monitorexit
        //     693: aload 15
        //     695: athrow
        //     696: aload 19
        //     698: ldc_w 2721
        //     701: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     704: pop
        //     705: ldc 221
        //     707: aload 19
        //     709: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     712: invokestatic 784	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //     715: pop
        //     716: aload_1
        //     717: aload 13
        //     719: getfield 3983	android/os/Process$ProcessStartResult:pid	I
        //     722: putfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     725: aload_1
        //     726: aload 13
        //     728: getfield 4003	android/os/Process$ProcessStartResult:usingWrapper	Z
        //     731: putfield 4004	com/android/server/am/ProcessRecord:usingWrapper	Z
        //     734: aload_1
        //     735: iconst_0
        //     736: putfield 2138	com/android/server/am/ProcessRecord:removed	Z
        //     739: aload_0
        //     740: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     743: astore 31
        //     745: aload 31
        //     747: monitorenter
        //     748: aload_0
        //     749: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     752: aload 13
        //     754: getfield 3983	android/os/Process$ProcessStartResult:pid	I
        //     757: aload_1
        //     758: invokevirtual 3917	android/util/SparseArray:put	(ILjava/lang/Object;)V
        //     761: aload_0
        //     762: getfield 755	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
        //     765: bipush 20
        //     767: invokevirtual 1888	android/os/Handler:obtainMessage	(I)Landroid/os/Message;
        //     770: astore 33
        //     772: aload 33
        //     774: aload_1
        //     775: putfield 1894	android/os/Message:obj	Ljava/lang/Object;
        //     778: aload_0
        //     779: getfield 755	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
        //     782: astore 34
        //     784: aload 13
        //     786: getfield 4003	android/os/Process$ProcessStartResult:usingWrapper	Z
        //     789: ifeq +32 -> 821
        //     792: ldc2_w 4005
        //     795: lstore 35
        //     797: aload 34
        //     799: aload 33
        //     801: lload 35
        //     803: invokevirtual 4009	android/os/Handler:sendMessageDelayed	(Landroid/os/Message;J)Z
        //     806: pop
        //     807: aload 31
        //     809: monitorexit
        //     810: goto -123 -> 687
        //     813: astore 32
        //     815: aload 31
        //     817: monitorexit
        //     818: aload 32
        //     820: athrow
        //     821: ldc2_w 787
        //     824: lstore 35
        //     826: goto -29 -> 797
        //     829: iload 10
        //     831: bipush 8
        //     833: ior
        //     834: istore 10
        //     836: goto -585 -> 251
        //     839: ldc_w 4011
        //     842: astore 17
        //     844: goto -416 -> 428
        //
        // Exception table:
        //     from	to	target	type
        //     26	50	625	finally
        //     627	630	625	finally
        //     116	135	633	android/content/pm/PackageManager$NameNotFoundException
        //     96	111	649	java/lang/RuntimeException
        //     116	135	649	java/lang/RuntimeException
        //     139	363	649	java/lang/RuntimeException
        //     381	619	649	java/lang/RuntimeException
        //     635	646	649	java/lang/RuntimeException
        //     693	748	649	java/lang/RuntimeException
        //     818	821	649	java/lang/RuntimeException
        //     363	381	688	finally
        //     690	693	688	finally
        //     748	818	813	finally
    }

    private void stopProfilerLocked(ProcessRecord paramProcessRecord, String paramString, int paramInt)
    {
        if ((paramProcessRecord == null) || (paramProcessRecord == this.mProfileProc))
        {
            paramProcessRecord = this.mProfileProc;
            paramString = this.mProfileFile;
            paramInt = this.mProfileType;
            clearProfilerLocked();
        }
        if (paramProcessRecord == null);
        while (true)
        {
            return;
            try
            {
                paramProcessRecord.thread.profilerControl(false, paramString, null, paramInt);
            }
            catch (RemoteException localRemoteException)
            {
            }
        }
        throw new IllegalStateException("Process disappeared");
    }

    private void stopServiceLocked(ServiceRecord paramServiceRecord)
    {
        synchronized (paramServiceRecord.stats.getBatteryStats())
        {
            paramServiceRecord.stats.stopRunningLocked();
            paramServiceRecord.startRequested = false;
            paramServiceRecord.callStart = false;
            bringDownServiceLocked(paramServiceRecord, false);
            return;
        }
    }

    private TaskRecord taskForIdLocked(int paramInt)
    {
        int i = this.mRecentTasks.size();
        int j = 0;
        TaskRecord localTaskRecord;
        if (j < i)
        {
            localTaskRecord = (TaskRecord)this.mRecentTasks.get(j);
            if (localTaskRecord.taskId != paramInt);
        }
        while (true)
        {
            return localTaskRecord;
            j++;
            break;
            localTaskRecord = null;
        }
    }

    private final boolean unscheduleServiceRestartLocked(ServiceRecord paramServiceRecord)
    {
        if (paramServiceRecord.restartDelay == 0L);
        for (boolean bool = false; ; bool = true)
        {
            return bool;
            paramServiceRecord.resetRestartCounter();
            this.mRestartingServices.remove(paramServiceRecord);
            this.mHandler.removeCallbacks(paramServiceRecord.restarter);
        }
    }

    private void updateEventDispatchingLocked()
    {
        WindowManagerService localWindowManagerService = this.mWindowManager;
        if ((this.mBooted) && (!this.mWentToSleep) && (!this.mShuttingDown));
        for (boolean bool = true; ; bool = false)
        {
            localWindowManagerService.setEventDispatching(bool);
            return;
        }
    }

    private final void updateLruProcessInternalLocked(ProcessRecord paramProcessRecord, boolean paramBoolean1, boolean paramBoolean2, int paramInt)
    {
        int i = this.mLruProcesses.indexOf(paramProcessRecord);
        if (i >= 0)
            this.mLruProcesses.remove(i);
        int j = -1 + this.mLruProcesses.size();
        int k = 0;
        paramProcessRecord.lruSeq = this.mLruSeq;
        if (paramBoolean2)
            paramProcessRecord.lastActivityTime = SystemClock.uptimeMillis();
        if (paramProcessRecord.activities.size() > 0)
            paramProcessRecord.lruWeight = paramProcessRecord.lastActivityTime;
        while (true)
        {
            if (j >= 0)
            {
                ProcessRecord localProcessRecord = (ProcessRecord)this.mLruProcesses.get(j);
                if ((k > 0) && (localProcessRecord.setAdj >= ProcessList.HIDDEN_APP_MIN_ADJ))
                    k--;
                if ((localProcessRecord.lruWeight <= paramProcessRecord.lruWeight) || (j < paramInt))
                    this.mLruProcesses.add(j + 1, paramProcessRecord);
            }
            else
            {
                if (j < 0)
                    this.mLruProcesses.add(0, paramProcessRecord);
                if (paramProcessRecord.connections.size() <= 0)
                    break;
                Iterator localIterator = paramProcessRecord.connections.iterator();
                while (localIterator.hasNext())
                {
                    ConnectionRecord localConnectionRecord = (ConnectionRecord)localIterator.next();
                    if ((localConnectionRecord.binding != null) && (localConnectionRecord.binding.service != null) && (localConnectionRecord.binding.service.app != null) && (localConnectionRecord.binding.service.app.lruSeq != this.mLruSeq))
                        updateLruProcessInternalLocked(localConnectionRecord.binding.service.app, paramBoolean1, paramBoolean2, j + 1);
                }
                if (paramProcessRecord.pubProviders.size() > 0)
                {
                    paramProcessRecord.lruWeight = (paramProcessRecord.lastActivityTime - 15000L);
                    k = 2;
                    continue;
                }
                paramProcessRecord.lruWeight = (paramProcessRecord.lastActivityTime - 120000L);
                k = 2;
                continue;
            }
            j--;
        }
        for (int m = -1 + paramProcessRecord.conProviders.size(); m >= 0; m--)
        {
            ContentProviderRecord localContentProviderRecord = ((ContentProviderConnection)paramProcessRecord.conProviders.get(m)).provider;
            if ((localContentProviderRecord.proc != null) && (localContentProviderRecord.proc.lruSeq != this.mLruSeq))
                updateLruProcessInternalLocked(localContentProviderRecord.proc, paramBoolean1, paramBoolean2, j + 1);
        }
        if (paramBoolean1)
            updateOomAdjLocked();
    }

    private final boolean updateOomAdjLocked(ProcessRecord paramProcessRecord)
    {
        ActivityRecord localActivityRecord = resumedAppLocked();
        ProcessRecord localProcessRecord;
        int j;
        label38: boolean bool;
        if (localActivityRecord != null)
        {
            localProcessRecord = localActivityRecord.app;
            int i = paramProcessRecord.curAdj;
            if ((i < ProcessList.HIDDEN_APP_MIN_ADJ) || (i > 15))
                break label102;
            j = 1;
            this.mAdjSeq = (1 + this.mAdjSeq);
            bool = updateOomAdjLocked(paramProcessRecord, paramProcessRecord.hiddenAdj, localProcessRecord, false);
            if ((paramProcessRecord.curAdj < ProcessList.HIDDEN_APP_MIN_ADJ) || (paramProcessRecord.curAdj > 15))
                break label108;
        }
        label102: label108: for (int k = 1; ; k = 0)
        {
            if (k != j)
                updateOomAdjLocked();
            return bool;
            localProcessRecord = null;
            break;
            j = 0;
            break label38;
        }
    }

    private final boolean updateOomAdjLocked(ProcessRecord paramProcessRecord1, int paramInt, ProcessRecord paramProcessRecord2, boolean paramBoolean)
    {
        paramProcessRecord1.hiddenAdj = paramInt;
        boolean bool2;
        if (paramProcessRecord1.thread == null)
            bool2 = false;
        while (true)
        {
            return bool2;
            boolean bool1 = paramProcessRecord1.keeping;
            bool2 = true;
            computeOomAdjLocked(paramProcessRecord1, paramInt, paramProcessRecord2, false, paramBoolean);
            if ((paramProcessRecord1.curRawAdj == paramProcessRecord1.setRawAdj) || ((bool1) && (!paramProcessRecord1.keeping)));
            while (true)
            {
                synchronized (this.mBatteryStatsService.getActiveStatistics())
                {
                    paramProcessRecord1.lastWakeTime = ???.getProcessWakeTime(paramProcessRecord1.info.uid, paramProcessRecord1.pid, SystemClock.elapsedRealtime());
                    paramProcessRecord1.lastCpuTime = paramProcessRecord1.curCpuTime;
                    paramProcessRecord1.setRawAdj = paramProcessRecord1.curRawAdj;
                    if (paramProcessRecord1.curAdj != paramProcessRecord1.setAdj)
                    {
                        if (Process.setOomAdj(paramProcessRecord1.pid, paramProcessRecord1.curAdj))
                            paramProcessRecord1.setAdj = paramProcessRecord1.curAdj;
                    }
                    else
                    {
                        if (paramProcessRecord1.setSchedGroup == paramProcessRecord1.curSchedGroup)
                            break;
                        paramProcessRecord1.setSchedGroup = paramProcessRecord1.curSchedGroup;
                        if ((paramProcessRecord1.waitingToKill == null) || (paramProcessRecord1.setSchedGroup != 0))
                            break label347;
                        Slog.i("ActivityManager", "Killing " + paramProcessRecord1.toShortString() + ": " + paramProcessRecord1.waitingToKill);
                        Object[] arrayOfObject = new Object[4];
                        arrayOfObject[0] = Integer.valueOf(paramProcessRecord1.pid);
                        arrayOfObject[1] = paramProcessRecord1.processName;
                        arrayOfObject[2] = Integer.valueOf(paramProcessRecord1.setAdj);
                        arrayOfObject[3] = paramProcessRecord1.waitingToKill;
                        EventLog.writeEvent(30023, arrayOfObject);
                        paramProcessRecord1.killedBackground = true;
                        Process.killProcessQuiet(paramProcessRecord1.pid);
                        bool2 = false;
                    }
                }
                bool2 = false;
                Slog.w("ActivityManager", "Failed setting oom adj of " + paramProcessRecord1 + " to " + paramProcessRecord1.curAdj);
            }
            label347: long l = Binder.clearCallingIdentity();
            try
            {
                Process.setProcessGroup(paramProcessRecord1.pid, paramProcessRecord1.curSchedGroup);
                Binder.restoreCallingIdentity(l);
            }
            catch (Exception localException)
            {
                while (true)
                {
                    Slog.w("ActivityManager", "Failed setting process group of " + paramProcessRecord1.pid + " to " + paramProcessRecord1.curSchedGroup);
                    localException.printStackTrace();
                }
            }
            finally
            {
                Binder.restoreCallingIdentity(l);
            }
        }
    }

    private boolean userExists(int paramInt)
    {
        boolean bool = false;
        try
        {
            UserInfo localUserInfo = AppGlobals.getPackageManager().getUser(paramInt);
            if (localUserInfo != null)
                bool = true;
            label20: return bool;
        }
        catch (RemoteException localRemoteException)
        {
            break label20;
        }
    }

    // ERROR //
    private static void writeLastDonePreBootReceivers(ArrayList<ComponentName> paramArrayList)
    {
        // Byte code:
        //     0: invokestatic 3542	com/android/server/am/ActivityManagerService:getCalledPreBootReceiversFile	()Ljava/io/File;
        //     3: astore_1
        //     4: aconst_null
        //     5: astore_2
        //     6: aconst_null
        //     7: astore_3
        //     8: ldc 221
        //     10: ldc_w 4082
        //     13: invokestatic 784	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //     16: pop
        //     17: new 4084	java/io/FileOutputStream
        //     20: dup
        //     21: aload_1
        //     22: invokespecial 4085	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
        //     25: astore 13
        //     27: new 4087	java/io/DataOutputStream
        //     30: dup
        //     31: new 4089	java/io/BufferedOutputStream
        //     34: dup
        //     35: aload 13
        //     37: sipush 2048
        //     40: invokespecial 4092	java/io/BufferedOutputStream:<init>	(Ljava/io/OutputStream;I)V
        //     43: invokespecial 4095	java/io/DataOutputStream:<init>	(Ljava/io/OutputStream;)V
        //     46: astore 14
        //     48: aload 14
        //     50: sipush 10000
        //     53: invokevirtual 4098	java/io/DataOutputStream:writeInt	(I)V
        //     56: aload 14
        //     58: getstatic 3568	android/os/Build$VERSION:RELEASE	Ljava/lang/String;
        //     61: invokevirtual 4101	java/io/DataOutputStream:writeUTF	(Ljava/lang/String;)V
        //     64: aload 14
        //     66: getstatic 3571	android/os/Build$VERSION:CODENAME	Ljava/lang/String;
        //     69: invokevirtual 4101	java/io/DataOutputStream:writeUTF	(Ljava/lang/String;)V
        //     72: aload 14
        //     74: getstatic 3574	android/os/Build$VERSION:INCREMENTAL	Ljava/lang/String;
        //     77: invokevirtual 4101	java/io/DataOutputStream:writeUTF	(Ljava/lang/String;)V
        //     80: aload 14
        //     82: aload_0
        //     83: invokevirtual 1313	java/util/ArrayList:size	()I
        //     86: invokevirtual 4098	java/io/DataOutputStream:writeInt	(I)V
        //     89: iconst_0
        //     90: istore 15
        //     92: iload 15
        //     94: aload_0
        //     95: invokevirtual 1313	java/util/ArrayList:size	()I
        //     98: if_icmpge +43 -> 141
        //     101: aload 14
        //     103: aload_0
        //     104: iload 15
        //     106: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     109: checkcast 1215	android/content/ComponentName
        //     112: invokevirtual 1218	android/content/ComponentName:getPackageName	()Ljava/lang/String;
        //     115: invokevirtual 4101	java/io/DataOutputStream:writeUTF	(Ljava/lang/String;)V
        //     118: aload 14
        //     120: aload_0
        //     121: iload 15
        //     123: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     126: checkcast 1215	android/content/ComponentName
        //     129: invokevirtual 4104	android/content/ComponentName:getClassName	()Ljava/lang/String;
        //     132: invokevirtual 4101	java/io/DataOutputStream:writeUTF	(Ljava/lang/String;)V
        //     135: iinc 15 1
        //     138: goto -46 -> 92
        //     141: aload 13
        //     143: invokestatic 4108	android/os/FileUtils:sync	(Ljava/io/FileOutputStream;)Z
        //     146: pop
        //     147: aload 14
        //     149: ifnull +8 -> 157
        //     152: aload 14
        //     154: invokevirtual 4109	java/io/DataOutputStream:close	()V
        //     157: return
        //     158: astore 7
        //     160: ldc 221
        //     162: ldc_w 4111
        //     165: aload 7
        //     167: invokestatic 1336	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     170: pop
        //     171: aload_1
        //     172: invokevirtual 2846	java/io/File:delete	()Z
        //     175: pop
        //     176: aload_2
        //     177: invokestatic 4108	android/os/FileUtils:sync	(Ljava/io/FileOutputStream;)Z
        //     180: pop
        //     181: aload_3
        //     182: ifnull -25 -> 157
        //     185: aload_3
        //     186: invokevirtual 4109	java/io/DataOutputStream:close	()V
        //     189: goto -32 -> 157
        //     192: astore 11
        //     194: aload 11
        //     196: invokevirtual 4112	java/io/IOException:printStackTrace	()V
        //     199: goto -42 -> 157
        //     202: astore 4
        //     204: aload_2
        //     205: invokestatic 4108	android/os/FileUtils:sync	(Ljava/io/FileOutputStream;)Z
        //     208: pop
        //     209: aload_3
        //     210: ifnull +7 -> 217
        //     213: aload_3
        //     214: invokevirtual 4109	java/io/DataOutputStream:close	()V
        //     217: aload 4
        //     219: athrow
        //     220: astore 6
        //     222: aload 6
        //     224: invokevirtual 4112	java/io/IOException:printStackTrace	()V
        //     227: goto -10 -> 217
        //     230: astore 17
        //     232: aload 17
        //     234: invokevirtual 4112	java/io/IOException:printStackTrace	()V
        //     237: goto -80 -> 157
        //     240: astore 4
        //     242: aload 13
        //     244: astore_2
        //     245: goto -41 -> 204
        //     248: astore 4
        //     250: aload 14
        //     252: astore_3
        //     253: aload 13
        //     255: astore_2
        //     256: goto -52 -> 204
        //     259: astore 7
        //     261: aload 13
        //     263: astore_2
        //     264: goto -104 -> 160
        //     267: astore 7
        //     269: aload 14
        //     271: astore_3
        //     272: aload 13
        //     274: astore_2
        //     275: goto -115 -> 160
        //
        // Exception table:
        //     from	to	target	type
        //     8	27	158	java/io/IOException
        //     185	189	192	java/io/IOException
        //     8	27	202	finally
        //     160	176	202	finally
        //     213	217	220	java/io/IOException
        //     152	157	230	java/io/IOException
        //     27	48	240	finally
        //     48	135	248	finally
        //     27	48	259	java/io/IOException
        //     48	135	267	java/io/IOException
    }

    public final void activityDestroyed(IBinder paramIBinder)
    {
        this.mMainStack.activityDestroyed(paramIBinder);
    }

    // ERROR //
    public final void activityIdle(IBinder paramIBinder, Configuration paramConfiguration, boolean paramBoolean)
    {
        // Byte code:
        //     0: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     3: lstore 4
        //     5: aload_0
        //     6: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     9: aload_1
        //     10: iconst_0
        //     11: aload_2
        //     12: invokevirtual 4121	com/android/server/am/ActivityStack:activityIdleInternal	(Landroid/os/IBinder;ZLandroid/content/res/Configuration;)Lcom/android/server/am/ActivityRecord;
        //     15: astore 6
        //     17: iload_3
        //     18: ifeq +41 -> 59
        //     21: aload_0
        //     22: monitorenter
        //     23: aload_0
        //     24: getfield 704	com/android/server/am/ActivityManagerService:mProfileProc	Lcom/android/server/am/ProcessRecord;
        //     27: aload 6
        //     29: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     32: if_acmpne +25 -> 57
        //     35: aload_0
        //     36: getfield 1196	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
        //     39: astore 8
        //     41: aload 8
        //     43: ifnull +14 -> 57
        //     46: aload_0
        //     47: getfield 1196	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
        //     50: invokevirtual 2202	android/os/ParcelFileDescriptor:close	()V
        //     53: aload_0
        //     54: invokespecial 3254	com/android/server/am/ActivityManagerService:clearProfilerLocked	()V
        //     57: aload_0
        //     58: monitorexit
        //     59: lload 4
        //     61: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     64: return
        //     65: astore 7
        //     67: aload_0
        //     68: monitorexit
        //     69: aload 7
        //     71: athrow
        //     72: astore 9
        //     74: goto -21 -> 53
        //
        // Exception table:
        //     from	to	target	type
        //     23	41	65	finally
        //     46	53	65	finally
        //     53	59	65	finally
        //     67	69	65	finally
        //     46	53	72	java/io/IOException
    }

    public final void activityPaused(IBinder paramIBinder)
    {
        long l = Binder.clearCallingIdentity();
        this.mMainStack.activityPaused(paramIBinder, false);
        Binder.restoreCallingIdentity(l);
    }

    public final void activitySlept(IBinder paramIBinder)
    {
        long l = Binder.clearCallingIdentity();
        try
        {
            ActivityRecord localActivityRecord = this.mMainStack.isInStackLocked(paramIBinder);
            if (localActivityRecord != null)
                this.mMainStack.activitySleptLocked(localActivityRecord);
            Binder.restoreCallingIdentity(l);
            return;
        }
        finally
        {
        }
    }

    public final void activityStopped(IBinder paramIBinder, Bundle paramBundle, Bitmap paramBitmap, CharSequence paramCharSequence)
    {
        if ((paramBundle != null) && (paramBundle.hasFileDescriptors()))
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        long l = Binder.clearCallingIdentity();
        try
        {
            ActivityRecord localActivityRecord = this.mMainStack.isInStackLocked(paramIBinder);
            if (localActivityRecord != null)
                localActivityRecord.stack.activityStoppedLocked(localActivityRecord, paramBundle, paramBitmap, paramCharSequence);
            if (localActivityRecord != null)
                sendPendingThumbnail(localActivityRecord, null, null, null, false);
            trimApplications();
            Binder.restoreCallingIdentity(l);
            return;
        }
        finally
        {
        }
    }

    final ProcessRecord addAppLocked(ApplicationInfo paramApplicationInfo, boolean paramBoolean)
    {
        ProcessRecord localProcessRecord;
        if (!paramBoolean)
            localProcessRecord = getProcessRecordLocked(paramApplicationInfo.processName, paramApplicationInfo.uid);
        while (true)
        {
            if (localProcessRecord == null)
            {
                localProcessRecord = newProcessRecordLocked(null, paramApplicationInfo, null, paramBoolean);
                this.mProcessNames.put(paramApplicationInfo.processName, localProcessRecord.uid, localProcessRecord);
                if (paramBoolean)
                    this.mIsolatedProcesses.put(localProcessRecord.uid, localProcessRecord);
                updateLruProcessLocked(localProcessRecord, true, true);
            }
            try
            {
                AppGlobals.getPackageManager().setPackageStoppedState(paramApplicationInfo.packageName, false, UserId.getUserId(localProcessRecord.uid));
                label90: if ((0x9 & paramApplicationInfo.flags) == 9)
                {
                    localProcessRecord.persistent = true;
                    localProcessRecord.maxAdj = -12;
                }
                if ((localProcessRecord.thread == null) && (this.mPersistentStartingProcesses.indexOf(localProcessRecord) < 0))
                {
                    this.mPersistentStartingProcesses.add(localProcessRecord);
                    startProcessLocked(localProcessRecord, "added application", localProcessRecord.processName);
                }
                return localProcessRecord;
                localProcessRecord = null;
            }
            catch (IllegalArgumentException localIllegalArgumentException)
            {
                while (true)
                    Slog.w("ActivityManager", "Failed trying to unstop package " + paramApplicationInfo.packageName + ": " + localIllegalArgumentException);
            }
            catch (RemoteException localRemoteException)
            {
                break label90;
            }
        }
    }

    public void addErrorToDropBox(String paramString1, ProcessRecord paramProcessRecord, String paramString2, ActivityRecord paramActivityRecord1, ActivityRecord paramActivityRecord2, String paramString3, final String paramString4, final File paramFile, final ApplicationErrorReport.CrashInfo paramCrashInfo)
    {
        final String str = processClass(paramProcessRecord) + "_" + paramString1;
        final DropBoxManager localDropBoxManager = (DropBoxManager)this.mContext.getSystemService("dropbox");
        if ((localDropBoxManager == null) || (!localDropBoxManager.isTagEnabled(str)));
        while (true)
        {
            return;
            final StringBuilder localStringBuilder = new StringBuilder(1024);
            appendDropBoxProcessHeaders(paramProcessRecord, paramString2, localStringBuilder);
            if (paramActivityRecord1 != null)
                localStringBuilder.append("Activity: ").append(paramActivityRecord1.shortComponentName).append("\n");
            if ((paramActivityRecord2 != null) && (paramActivityRecord2.app != null) && (paramActivityRecord2.app.pid != paramProcessRecord.pid))
                localStringBuilder.append("Parent-Process: ").append(paramActivityRecord2.app.processName).append("\n");
            if ((paramActivityRecord2 != null) && (paramActivityRecord2 != paramActivityRecord1))
                localStringBuilder.append("Parent-Activity: ").append(paramActivityRecord2.shortComponentName).append("\n");
            if (paramString3 != null)
                localStringBuilder.append("Subject: ").append(paramString3).append("\n");
            localStringBuilder.append("Build: ").append(Build.FINGERPRINT).append("\n");
            if (Debug.isDebuggerConnected())
                localStringBuilder.append("Debugger: Connected\n");
            localStringBuilder.append("\n");
            Thread local12 = new Thread("Error dump: " + str)
            {
                // ERROR //
                public void run()
                {
                    // Byte code:
                    //     0: aload_0
                    //     1: getfield 28	com/android/server/am/ActivityManagerService$12:val$report	Ljava/lang/String;
                    //     4: ifnull +15 -> 19
                    //     7: aload_0
                    //     8: getfield 30	com/android/server/am/ActivityManagerService$12:val$sb	Ljava/lang/StringBuilder;
                    //     11: aload_0
                    //     12: getfield 28	com/android/server/am/ActivityManagerService$12:val$report	Ljava/lang/String;
                    //     15: invokevirtual 51	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
                    //     18: pop
                    //     19: aload_0
                    //     20: getfield 32	com/android/server/am/ActivityManagerService$12:val$logFile	Ljava/io/File;
                    //     23: ifnull +22 -> 45
                    //     26: aload_0
                    //     27: getfield 30	com/android/server/am/ActivityManagerService$12:val$sb	Ljava/lang/StringBuilder;
                    //     30: aload_0
                    //     31: getfield 32	com/android/server/am/ActivityManagerService$12:val$logFile	Ljava/io/File;
                    //     34: ldc 52
                    //     36: ldc 54
                    //     38: invokestatic 60	android/os/FileUtils:readTextFile	(Ljava/io/File;ILjava/lang/String;)Ljava/lang/String;
                    //     41: invokevirtual 51	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
                    //     44: pop
                    //     45: aload_0
                    //     46: getfield 34	com/android/server/am/ActivityManagerService$12:val$crashInfo	Landroid/app/ApplicationErrorReport$CrashInfo;
                    //     49: ifnull +28 -> 77
                    //     52: aload_0
                    //     53: getfield 34	com/android/server/am/ActivityManagerService$12:val$crashInfo	Landroid/app/ApplicationErrorReport$CrashInfo;
                    //     56: getfield 65	android/app/ApplicationErrorReport$CrashInfo:stackTrace	Ljava/lang/String;
                    //     59: ifnull +18 -> 77
                    //     62: aload_0
                    //     63: getfield 30	com/android/server/am/ActivityManagerService$12:val$sb	Ljava/lang/StringBuilder;
                    //     66: aload_0
                    //     67: getfield 34	com/android/server/am/ActivityManagerService$12:val$crashInfo	Landroid/app/ApplicationErrorReport$CrashInfo;
                    //     70: getfield 65	android/app/ApplicationErrorReport$CrashInfo:stackTrace	Ljava/lang/String;
                    //     73: invokevirtual 51	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
                    //     76: pop
                    //     77: new 47	java/lang/StringBuilder
                    //     80: dup
                    //     81: invokespecial 67	java/lang/StringBuilder:<init>	()V
                    //     84: ldc 69
                    //     86: invokevirtual 51	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
                    //     89: aload_0
                    //     90: getfield 36	com/android/server/am/ActivityManagerService$12:val$dropboxTag	Ljava/lang/String;
                    //     93: invokevirtual 51	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
                    //     96: invokevirtual 73	java/lang/StringBuilder:toString	()Ljava/lang/String;
                    //     99: astore_1
                    //     100: aload_0
                    //     101: getfield 26	com/android/server/am/ActivityManagerService$12:this$0	Lcom/android/server/am/ActivityManagerService;
                    //     104: getfield 77	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
                    //     107: invokevirtual 83	android/content/Context:getContentResolver	()Landroid/content/ContentResolver;
                    //     110: aload_1
                    //     111: iconst_0
                    //     112: invokestatic 89	android/provider/Settings$Secure:getInt	(Landroid/content/ContentResolver;Ljava/lang/String;I)I
                    //     115: istore_2
                    //     116: iload_2
                    //     117: ifle +207 -> 324
                    //     120: aload_0
                    //     121: getfield 30	com/android/server/am/ActivityManagerService$12:val$sb	Ljava/lang/StringBuilder;
                    //     124: ldc 91
                    //     126: invokevirtual 51	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
                    //     129: pop
                    //     130: aconst_null
                    //     131: astore 4
                    //     133: bipush 11
                    //     135: anewarray 93	java/lang/String
                    //     138: astore 10
                    //     140: aload 10
                    //     142: iconst_0
                    //     143: ldc 95
                    //     145: aastore
                    //     146: aload 10
                    //     148: iconst_1
                    //     149: ldc 97
                    //     151: aastore
                    //     152: aload 10
                    //     154: iconst_2
                    //     155: ldc 99
                    //     157: aastore
                    //     158: aload 10
                    //     160: iconst_3
                    //     161: ldc 101
                    //     163: aastore
                    //     164: aload 10
                    //     166: iconst_4
                    //     167: ldc 103
                    //     169: aastore
                    //     170: aload 10
                    //     172: iconst_5
                    //     173: ldc 101
                    //     175: aastore
                    //     176: aload 10
                    //     178: bipush 6
                    //     180: ldc 105
                    //     182: aastore
                    //     183: aload 10
                    //     185: bipush 7
                    //     187: ldc 101
                    //     189: aastore
                    //     190: aload 10
                    //     192: bipush 8
                    //     194: ldc 107
                    //     196: aastore
                    //     197: aload 10
                    //     199: bipush 9
                    //     201: ldc 109
                    //     203: aastore
                    //     204: aload 10
                    //     206: bipush 10
                    //     208: iload_2
                    //     209: invokestatic 113	java/lang/String:valueOf	(I)Ljava/lang/String;
                    //     212: aastore
                    //     213: new 115	java/lang/ProcessBuilder
                    //     216: dup
                    //     217: aload 10
                    //     219: invokespecial 118	java/lang/ProcessBuilder:<init>	([Ljava/lang/String;)V
                    //     222: iconst_1
                    //     223: invokevirtual 122	java/lang/ProcessBuilder:redirectErrorStream	(Z)Ljava/lang/ProcessBuilder;
                    //     226: invokevirtual 126	java/lang/ProcessBuilder:start	()Ljava/lang/Process;
                    //     229: astore 11
                    //     231: aload 11
                    //     233: invokevirtual 132	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
                    //     236: invokevirtual 137	java/io/OutputStream:close	()V
                    //     239: aload 11
                    //     241: invokevirtual 141	java/lang/Process:getErrorStream	()Ljava/io/InputStream;
                    //     244: invokevirtual 144	java/io/InputStream:close	()V
                    //     247: new 146	java/io/InputStreamReader
                    //     250: dup
                    //     251: aload 11
                    //     253: invokevirtual 149	java/lang/Process:getInputStream	()Ljava/io/InputStream;
                    //     256: invokespecial 152	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
                    //     259: astore 14
                    //     261: sipush 8192
                    //     264: newarray char
                    //     266: astore 15
                    //     268: aload 14
                    //     270: aload 15
                    //     272: invokevirtual 156	java/io/InputStreamReader:read	([C)I
                    //     275: istore 16
                    //     277: iload 16
                    //     279: ifle +124 -> 403
                    //     282: aload_0
                    //     283: getfield 30	com/android/server/am/ActivityManagerService$12:val$sb	Ljava/lang/StringBuilder;
                    //     286: aload 15
                    //     288: iconst_0
                    //     289: iload 16
                    //     291: invokevirtual 159	java/lang/StringBuilder:append	([CII)Ljava/lang/StringBuilder;
                    //     294: pop
                    //     295: goto -27 -> 268
                    //     298: astore 5
                    //     300: aload 14
                    //     302: astore 4
                    //     304: ldc 161
                    //     306: ldc 163
                    //     308: aload 5
                    //     310: invokestatic 169	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
                    //     313: pop
                    //     314: aload 4
                    //     316: ifnull +8 -> 324
                    //     319: aload 4
                    //     321: invokevirtual 170	java/io/InputStreamReader:close	()V
                    //     324: aload_0
                    //     325: getfield 38	com/android/server/am/ActivityManagerService$12:val$dbox	Landroid/os/DropBoxManager;
                    //     328: aload_0
                    //     329: getfield 36	com/android/server/am/ActivityManagerService$12:val$dropboxTag	Ljava/lang/String;
                    //     332: aload_0
                    //     333: getfield 30	com/android/server/am/ActivityManagerService$12:val$sb	Ljava/lang/StringBuilder;
                    //     336: invokevirtual 73	java/lang/StringBuilder:toString	()Ljava/lang/String;
                    //     339: invokevirtual 176	android/os/DropBoxManager:addText	(Ljava/lang/String;Ljava/lang/String;)V
                    //     342: return
                    //     343: astore 19
                    //     345: ldc 161
                    //     347: new 47	java/lang/StringBuilder
                    //     350: dup
                    //     351: invokespecial 67	java/lang/StringBuilder:<init>	()V
                    //     354: ldc 178
                    //     356: invokevirtual 51	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
                    //     359: aload_0
                    //     360: getfield 32	com/android/server/am/ActivityManagerService$12:val$logFile	Ljava/io/File;
                    //     363: invokevirtual 181	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
                    //     366: invokevirtual 73	java/lang/StringBuilder:toString	()Ljava/lang/String;
                    //     369: aload 19
                    //     371: invokestatic 169	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
                    //     374: pop
                    //     375: goto -330 -> 45
                    //     378: astore 6
                    //     380: aload 4
                    //     382: ifnull +8 -> 390
                    //     385: aload 4
                    //     387: invokevirtual 170	java/io/InputStreamReader:close	()V
                    //     390: aload 6
                    //     392: athrow
                    //     393: astore 7
                    //     395: goto -5 -> 390
                    //     398: astore 9
                    //     400: goto -76 -> 324
                    //     403: aload 14
                    //     405: ifnull -81 -> 324
                    //     408: aload 14
                    //     410: invokevirtual 170	java/io/InputStreamReader:close	()V
                    //     413: goto -89 -> 324
                    //     416: astore 6
                    //     418: aload 14
                    //     420: astore 4
                    //     422: goto -42 -> 380
                    //     425: astore 5
                    //     427: goto -123 -> 304
                    //     430: astore 13
                    //     432: goto -185 -> 247
                    //     435: astore 12
                    //     437: goto -198 -> 239
                    //
                    // Exception table:
                    //     from	to	target	type
                    //     261	295	298	java/io/IOException
                    //     26	45	343	java/io/IOException
                    //     133	231	378	finally
                    //     231	239	378	finally
                    //     239	247	378	finally
                    //     247	261	378	finally
                    //     304	314	378	finally
                    //     385	390	393	java/io/IOException
                    //     319	324	398	java/io/IOException
                    //     408	413	398	java/io/IOException
                    //     261	295	416	finally
                    //     133	231	425	java/io/IOException
                    //     247	261	425	java/io/IOException
                    //     239	247	430	java/io/IOException
                    //     231	239	435	java/io/IOException
                }
            };
            if (paramProcessRecord == null)
                local12.run();
            else
                local12.start();
        }
    }

    final void addProcessToGcListLocked(ProcessRecord paramProcessRecord)
    {
        int i = 0;
        for (int j = -1 + this.mProcessesToGc.size(); ; j--)
            if (j >= 0)
            {
                if (((ProcessRecord)this.mProcessesToGc.get(j)).lastRequestedGc < paramProcessRecord.lastRequestedGc)
                {
                    i = 1;
                    this.mProcessesToGc.add(j + 1, paramProcessRecord);
                }
            }
            else
            {
                if (i == 0)
                    this.mProcessesToGc.add(0, paramProcessRecord);
                return;
            }
    }

    final void addRecentTaskLocked(TaskRecord paramTaskRecord)
    {
        int i = this.mRecentTasks.size();
        if ((i > 0) && (this.mRecentTasks.get(0) == paramTaskRecord));
        while (true)
        {
            return;
            for (int j = 0; j < i; j++)
            {
                TaskRecord localTaskRecord = (TaskRecord)this.mRecentTasks.get(j);
                if ((paramTaskRecord.userId == localTaskRecord.userId) && (((paramTaskRecord.affinity != null) && (paramTaskRecord.affinity.equals(localTaskRecord.affinity))) || ((paramTaskRecord.intent != null) && (paramTaskRecord.intent.filterEquals(localTaskRecord.intent)))))
                {
                    this.mRecentTasks.remove(j);
                    j--;
                    i--;
                    if (paramTaskRecord.intent == null)
                        paramTaskRecord = localTaskRecord;
                }
            }
            if (i >= 20)
                this.mRecentTasks.remove(i - 1);
            this.mRecentTasks.add(0, paramTaskRecord);
        }
    }

    final void appDiedLocked(ProcessRecord paramProcessRecord, int paramInt, IApplicationThread paramIApplicationThread)
    {
        int[] arrayOfInt = this.mProcDeaths;
        arrayOfInt[0] = (1 + arrayOfInt[0]);
        while (true)
        {
            int k;
            ProcessRecord localProcessRecord1;
            synchronized (this.mBatteryStatsService.getActiveStatistics())
            {
                ???.noteProcessDiedLocked(paramProcessRecord.info.uid, paramInt);
                if ((paramProcessRecord.pid != paramInt) || (paramProcessRecord.thread == null) || (paramProcessRecord.thread.asBinder() != paramIApplicationThread.asBinder()))
                    break label423;
                if (!paramProcessRecord.killedBackground)
                    Slog.i("ActivityManager", "Process " + paramProcessRecord.processName + " (pid " + paramInt + ") has died.");
                Object[] arrayOfObject2 = new Object[2];
                arrayOfObject2[0] = Integer.valueOf(paramProcessRecord.pid);
                arrayOfObject2[1] = paramProcessRecord.processName;
                EventLog.writeEvent(30011, arrayOfObject2);
                if (paramProcessRecord.instrumentationClass == null)
                {
                    i = 1;
                    handleAppDiedLocked(paramProcessRecord, false, true);
                    if (i == 0)
                        break label422;
                    int j = 0;
                    k = -1 + this.mLruProcesses.size();
                    if (k >= 0)
                    {
                        ProcessRecord localProcessRecord2 = (ProcessRecord)this.mLruProcesses.get(k);
                        if ((localProcessRecord2.thread == null) || (localProcessRecord2.setAdj < ProcessList.HIDDEN_APP_MIN_ADJ))
                            break label389;
                        j = 1;
                    }
                    if (j != 0)
                        break label422;
                    EventLog.writeEvent(30017, this.mLruProcesses.size());
                    long l = SystemClock.uptimeMillis();
                    int m = -1 + this.mLruProcesses.size();
                    if (m < 0)
                        break;
                    localProcessRecord1 = (ProcessRecord)this.mLruProcesses.get(m);
                    if ((localProcessRecord1 != paramProcessRecord) && (localProcessRecord1.thread != null) && (60000L + localProcessRecord1.lastLowMemory <= l))
                    {
                        if (localProcessRecord1.setAdj > 3)
                            break label395;
                        localProcessRecord1.lastRequestedGc = 0L;
                        localProcessRecord1.reportLowMemory = true;
                        localProcessRecord1.lastLowMemory = l;
                        this.mProcessesToGc.remove(localProcessRecord1);
                        addProcessToGcListLocked(localProcessRecord1);
                    }
                    m--;
                }
            }
            int i = 0;
            continue;
            label389: k--;
            continue;
            label395: localProcessRecord1.lastRequestedGc = localProcessRecord1.lastLowMemory;
        }
        this.mHandler.sendEmptyMessage(33);
        scheduleAppGcsLocked();
        while (true)
        {
            label422: return;
            label423: if (paramProcessRecord.pid != paramInt)
            {
                Slog.i("ActivityManager", "Process " + paramProcessRecord.processName + " (pid " + paramInt + ") has died and restarted (pid " + paramProcessRecord.pid + ").");
                Object[] arrayOfObject1 = new Object[2];
                arrayOfObject1[0] = Integer.valueOf(paramProcessRecord.pid);
                arrayOfObject1[1] = paramProcessRecord.processName;
                EventLog.writeEvent(30011, arrayOfObject1);
            }
        }
    }

    // ERROR //
    final void appNotResponding(ProcessRecord paramProcessRecord, ActivityRecord paramActivityRecord1, ActivityRecord paramActivityRecord2, String paramString)
    {
        // Byte code:
        //     0: new 536	java/util/ArrayList
        //     3: dup
        //     4: iconst_5
        //     5: invokespecial 2682	java/util/ArrayList:<init>	(I)V
        //     8: astore 5
        //     10: new 559	android/util/SparseArray
        //     13: dup
        //     14: bipush 20
        //     16: invokespecial 4197	android/util/SparseArray:<init>	(I)V
        //     19: astore 6
        //     21: aload_0
        //     22: getfield 700	com/android/server/am/ActivityManagerService:mController	Landroid/app/IActivityController;
        //     25: ifnull +42 -> 67
        //     28: aload_0
        //     29: getfield 700	com/android/server/am/ActivityManagerService:mController	Landroid/app/IActivityController;
        //     32: aload_1
        //     33: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     36: aload_1
        //     37: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     40: aload 4
        //     42: invokeinterface 4201 4 0
        //     47: ifge +20 -> 67
        //     50: aload_1
        //     51: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     54: getstatic 442	com/android/server/am/ActivityManagerService:MY_PID	I
        //     57: if_icmpeq +10 -> 67
        //     60: aload_1
        //     61: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     64: invokestatic 2398	android/os/Process:killProcess	(I)V
        //     67: invokestatic 1271	android/os/SystemClock:uptimeMillis	()J
        //     70: lstore 7
        //     72: aload_0
        //     73: invokevirtual 4204	com/android/server/am/ActivityManagerService:updateCpuStatsNow	()V
        //     76: aload_0
        //     77: monitorenter
        //     78: aload_0
        //     79: getfield 674	com/android/server/am/ActivityManagerService:mShuttingDown	Z
        //     82: ifeq +53 -> 135
        //     85: ldc 221
        //     87: new 598	java/lang/StringBuilder
        //     90: dup
        //     91: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     94: ldc_w 4206
        //     97: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     100: aload_1
        //     101: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     104: ldc_w 2558
        //     107: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     110: aload 4
        //     112: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     115: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     118: invokestatic 784	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //     121: pop
        //     122: aload_0
        //     123: monitorexit
        //     124: return
        //     125: astore 53
        //     127: aload_0
        //     128: aconst_null
        //     129: putfield 700	com/android/server/am/ActivityManagerService:mController	Landroid/app/IActivityController;
        //     132: goto -65 -> 67
        //     135: aload_1
        //     136: getfield 2032	com/android/server/am/ProcessRecord:notResponding	Z
        //     139: ifeq +52 -> 191
        //     142: ldc 221
        //     144: new 598	java/lang/StringBuilder
        //     147: dup
        //     148: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     151: ldc_w 4208
        //     154: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     157: aload_1
        //     158: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     161: ldc_w 2558
        //     164: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     167: aload 4
        //     169: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     172: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     175: invokestatic 784	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //     178: pop
        //     179: aload_0
        //     180: monitorexit
        //     181: goto -57 -> 124
        //     184: astore 9
        //     186: aload_0
        //     187: monitorexit
        //     188: aload 9
        //     190: athrow
        //     191: aload_1
        //     192: getfield 2029	com/android/server/am/ProcessRecord:crashing	Z
        //     195: ifeq +45 -> 240
        //     198: ldc 221
        //     200: new 598	java/lang/StringBuilder
        //     203: dup
        //     204: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     207: ldc_w 4210
        //     210: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     213: aload_1
        //     214: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     217: ldc_w 2558
        //     220: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     223: aload 4
        //     225: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     228: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     231: invokestatic 784	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //     234: pop
        //     235: aload_0
        //     236: monitorexit
        //     237: goto -113 -> 124
        //     240: aload_1
        //     241: iconst_1
        //     242: putfield 2032	com/android/server/am/ProcessRecord:notResponding	Z
        //     245: iconst_4
        //     246: anewarray 1138	java/lang/Object
        //     249: astore 10
        //     251: aload 10
        //     253: iconst_0
        //     254: aload_1
        //     255: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     258: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     261: aastore
        //     262: aload 10
        //     264: iconst_1
        //     265: aload_1
        //     266: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     269: aastore
        //     270: aload 10
        //     272: iconst_2
        //     273: aload_1
        //     274: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     277: getfield 991	android/content/pm/ApplicationInfo:flags	I
        //     280: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     283: aastore
        //     284: aload 10
        //     286: iconst_3
        //     287: aload 4
        //     289: aastore
        //     290: sipush 30008
        //     293: aload 10
        //     295: invokestatic 1148	android/util/EventLog:writeEvent	(I[Ljava/lang/Object;)I
        //     298: pop
        //     299: aload 5
        //     301: aload_1
        //     302: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     305: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     308: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     311: pop
        //     312: aload_1
        //     313: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     316: istore 13
        //     318: aload_3
        //     319: ifnull +29 -> 348
        //     322: aload_3
        //     323: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     326: ifnull +22 -> 348
        //     329: aload_3
        //     330: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     333: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     336: ifle +12 -> 348
        //     339: aload_3
        //     340: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     343: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     346: istore 13
        //     348: aload_1
        //     349: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     352: istore 14
        //     354: iload 13
        //     356: iload 14
        //     358: if_icmpeq +14 -> 372
        //     361: aload 5
        //     363: iload 13
        //     365: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     368: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     371: pop
        //     372: getstatic 442	com/android/server/am/ActivityManagerService:MY_PID	I
        //     375: aload_1
        //     376: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     379: if_icmpeq +23 -> 402
        //     382: getstatic 442	com/android/server/am/ActivityManagerService:MY_PID	I
        //     385: iload 13
        //     387: if_icmpeq +15 -> 402
        //     390: aload 5
        //     392: getstatic 442	com/android/server/am/ActivityManagerService:MY_PID	I
        //     395: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     398: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     401: pop
        //     402: bipush 255
        //     404: aload_0
        //     405: getfield 582	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
        //     408: invokevirtual 1313	java/util/ArrayList:size	()I
        //     411: iadd
        //     412: istore 15
        //     414: iload 15
        //     416: iflt +101 -> 517
        //     419: aload_0
        //     420: getfield 582	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
        //     423: iload 15
        //     425: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     428: checkcast 982	com/android/server/am/ProcessRecord
        //     431: astore 45
        //     433: aload 45
        //     435: ifnull +695 -> 1130
        //     438: aload 45
        //     440: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     443: ifnull +687 -> 1130
        //     446: aload 45
        //     448: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     451: istore 46
        //     453: iload 46
        //     455: ifle +675 -> 1130
        //     458: iload 46
        //     460: aload_1
        //     461: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     464: if_icmpeq +666 -> 1130
        //     467: iload 46
        //     469: iload 13
        //     471: if_icmpeq +659 -> 1130
        //     474: iload 46
        //     476: getstatic 442	com/android/server/am/ActivityManagerService:MY_PID	I
        //     479: if_icmpeq +651 -> 1130
        //     482: aload 45
        //     484: getfield 1243	com/android/server/am/ProcessRecord:persistent	Z
        //     487: ifeq +17 -> 504
        //     490: aload 5
        //     492: iload 46
        //     494: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     497: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     500: pop
        //     501: goto +629 -> 1130
        //     504: aload 6
        //     506: iload 46
        //     508: getstatic 4216	java/lang/Boolean:TRUE	Ljava/lang/Boolean;
        //     511: invokevirtual 3917	android/util/SparseArray:put	(ILjava/lang/Object;)V
        //     514: goto +616 -> 1130
        //     517: aload_0
        //     518: monitorexit
        //     519: new 598	java/lang/StringBuilder
        //     522: dup
        //     523: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     526: astore 16
        //     528: aload 16
        //     530: iconst_0
        //     531: invokevirtual 3586	java/lang/StringBuilder:setLength	(I)V
        //     534: aload 16
        //     536: ldc_w 4218
        //     539: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     542: aload_1
        //     543: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     546: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     549: pop
        //     550: aload_2
        //     551: ifnull +32 -> 583
        //     554: aload_2
        //     555: getfield 2556	com/android/server/am/ActivityRecord:shortComponentName	Ljava/lang/String;
        //     558: ifnull +25 -> 583
        //     561: aload 16
        //     563: ldc_w 1040
        //     566: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     569: aload_2
        //     570: getfield 2556	com/android/server/am/ActivityRecord:shortComponentName	Ljava/lang/String;
        //     573: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     576: ldc_w 1042
        //     579: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     582: pop
        //     583: aload 16
        //     585: ldc_w 980
        //     588: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     591: pop
        //     592: aload 4
        //     594: ifnull +23 -> 617
        //     597: aload 16
        //     599: ldc_w 4220
        //     602: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     605: aload 4
        //     607: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     610: ldc_w 980
        //     613: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     616: pop
        //     617: aload_3
        //     618: ifnull +30 -> 648
        //     621: aload_3
        //     622: aload_2
        //     623: if_acmpeq +25 -> 648
        //     626: aload 16
        //     628: ldc_w 4222
        //     631: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     634: aload_3
        //     635: getfield 2556	com/android/server/am/ActivityRecord:shortComponentName	Ljava/lang/String;
        //     638: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     641: ldc_w 980
        //     644: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     647: pop
        //     648: new 725	com/android/internal/os/ProcessStats
        //     651: dup
        //     652: iconst_1
        //     653: invokespecial 728	com/android/internal/os/ProcessStats:<init>	(Z)V
        //     656: astore 19
        //     658: iconst_1
        //     659: aload 5
        //     661: aload 19
        //     663: aload 6
        //     665: aconst_null
        //     666: invokestatic 4224	com/android/server/am/ActivityManagerService:dumpStackTraces	(ZLjava/util/ArrayList;Lcom/android/internal/os/ProcessStats;Landroid/util/SparseArray;[Ljava/lang/String;)Ljava/io/File;
        //     669: astore 20
        //     671: aload_0
        //     672: invokevirtual 4204	com/android/server/am/ActivityManagerService:updateCpuStatsNow	()V
        //     675: aload_0
        //     676: getfield 922	com/android/server/am/ActivityManagerService:mProcessStatsThread	Ljava/lang/Thread;
        //     679: astore 21
        //     681: aload 21
        //     683: monitorenter
        //     684: aload_0
        //     685: getfield 730	com/android/server/am/ActivityManagerService:mProcessStats	Lcom/android/internal/os/ProcessStats;
        //     688: lload 7
        //     690: invokevirtual 4228	com/android/internal/os/ProcessStats:printCurrentState	(J)Ljava/lang/String;
        //     693: astore 23
        //     695: aload 21
        //     697: monitorexit
        //     698: aload 16
        //     700: aload 19
        //     702: invokevirtual 4231	com/android/internal/os/ProcessStats:printCurrentLoad	()Ljava/lang/String;
        //     705: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     708: pop
        //     709: aload 16
        //     711: aload 23
        //     713: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     716: pop
        //     717: aload 16
        //     719: aload 19
        //     721: lload 7
        //     723: invokevirtual 4228	com/android/internal/os/ProcessStats:printCurrentState	(J)Ljava/lang/String;
        //     726: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     729: pop
        //     730: ldc 221
        //     732: aload 16
        //     734: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     737: invokestatic 1310	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
        //     740: pop
        //     741: aload 20
        //     743: ifnonnull +11 -> 754
        //     746: aload_1
        //     747: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     750: iconst_3
        //     751: invokestatic 2866	android/os/Process:sendSignal	(II)V
        //     754: aload_0
        //     755: ldc_w 4233
        //     758: aload_1
        //     759: aload_1
        //     760: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     763: aload_2
        //     764: aload_3
        //     765: aload 4
        //     767: aload 23
        //     769: aload 20
        //     771: aconst_null
        //     772: invokevirtual 4235	com/android/server/am/ActivityManagerService:addErrorToDropBox	(Ljava/lang/String;Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Lcom/android/server/am/ActivityRecord;Lcom/android/server/am/ActivityRecord;Ljava/lang/String;Ljava/lang/String;Ljava/io/File;Landroid/app/ApplicationErrorReport$CrashInfo;)V
        //     775: aload_0
        //     776: getfield 700	com/android/server/am/ActivityManagerService:mController	Landroid/app/IActivityController;
        //     779: ifnull +64 -> 843
        //     782: aload_0
        //     783: getfield 700	com/android/server/am/ActivityManagerService:mController	Landroid/app/IActivityController;
        //     786: aload_1
        //     787: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     790: aload_1
        //     791: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     794: aload 16
        //     796: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     799: invokeinterface 4237 4 0
        //     804: istore 41
        //     806: iload 41
        //     808: ifeq +35 -> 843
        //     811: iload 41
        //     813: ifge -689 -> 124
        //     816: aload_1
        //     817: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     820: getstatic 442	com/android/server/am/ActivityManagerService:MY_PID	I
        //     823: if_icmpeq -699 -> 124
        //     826: aload_1
        //     827: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     830: invokestatic 2398	android/os/Process:killProcess	(I)V
        //     833: goto -709 -> 124
        //     836: astore 40
        //     838: aload_0
        //     839: aconst_null
        //     840: putfield 700	com/android/server/am/ActivityManagerService:mController	Landroid/app/IActivityController;
        //     843: aload_0
        //     844: getfield 2453	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
        //     847: invokevirtual 3202	android/content/Context:getContentResolver	()Landroid/content/ContentResolver;
        //     850: ldc_w 4239
        //     853: iconst_0
        //     854: invokestatic 4242	android/provider/Settings$Secure:getInt	(Landroid/content/ContentResolver;Ljava/lang/String;I)I
        //     857: ifeq +141 -> 998
        //     860: iconst_1
        //     861: istore 28
        //     863: aload_0
        //     864: monitorenter
        //     865: iload 28
        //     867: ifne +137 -> 1004
        //     870: aload_1
        //     871: invokevirtual 4245	com/android/server/am/ProcessRecord:isInterestingToUserLocked	()Z
        //     874: ifne +130 -> 1004
        //     877: aload_1
        //     878: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     881: getstatic 442	com/android/server/am/ActivityManagerService:MY_PID	I
        //     884: if_icmpeq +120 -> 1004
        //     887: ldc 221
        //     889: new 598	java/lang/StringBuilder
        //     892: dup
        //     893: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     896: ldc_w 2185
        //     899: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     902: aload_1
        //     903: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     906: ldc_w 4247
        //     909: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     912: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     915: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     918: pop
        //     919: iconst_4
        //     920: anewarray 1138	java/lang/Object
        //     923: astore 38
        //     925: aload 38
        //     927: iconst_0
        //     928: aload_1
        //     929: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     932: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     935: aastore
        //     936: aload 38
        //     938: iconst_1
        //     939: aload_1
        //     940: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     943: aastore
        //     944: aload 38
        //     946: iconst_2
        //     947: aload_1
        //     948: getfield 1151	com/android/server/am/ProcessRecord:setAdj	I
        //     951: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     954: aastore
        //     955: aload 38
        //     957: iconst_3
        //     958: ldc_w 4249
        //     961: aastore
        //     962: sipush 30023
        //     965: aload 38
        //     967: invokestatic 1148	android/util/EventLog:writeEvent	(I[Ljava/lang/Object;)I
        //     970: pop
        //     971: aload_1
        //     972: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     975: invokestatic 1103	android/os/Process:killProcessQuiet	(I)V
        //     978: aload_0
        //     979: monitorexit
        //     980: goto -856 -> 124
        //     983: astore 35
        //     985: aload_0
        //     986: monitorexit
        //     987: aload 35
        //     989: athrow
        //     990: astore 22
        //     992: aload 21
        //     994: monitorexit
        //     995: aload 22
        //     997: athrow
        //     998: iconst_0
        //     999: istore 28
        //     1001: goto -138 -> 863
        //     1004: aload_2
        //     1005: ifnull +131 -> 1136
        //     1008: aload_2
        //     1009: getfield 2556	com/android/server/am/ActivityRecord:shortComponentName	Ljava/lang/String;
        //     1012: astore 29
        //     1014: aload 4
        //     1016: ifnull +106 -> 1122
        //     1019: new 598	java/lang/StringBuilder
        //     1022: dup
        //     1023: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     1026: ldc_w 4251
        //     1029: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1032: aload 4
        //     1034: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     1037: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     1040: astore 30
        //     1042: aload_0
        //     1043: aload_1
        //     1044: aload 29
        //     1046: aload 30
        //     1048: aload 16
        //     1050: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     1053: invokespecial 4253	com/android/server/am/ActivityManagerService:makeAppNotRespondingLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
        //     1056: invokestatic 2431	android/os/Message:obtain	()Landroid/os/Message;
        //     1059: astore 31
        //     1061: new 591	java/util/HashMap
        //     1064: dup
        //     1065: invokespecial 592	java/util/HashMap:<init>	()V
        //     1068: astore 32
        //     1070: aload 31
        //     1072: iconst_2
        //     1073: putfield 2434	android/os/Message:what	I
        //     1076: aload 31
        //     1078: aload 32
        //     1080: putfield 1894	android/os/Message:obj	Ljava/lang/Object;
        //     1083: aload 32
        //     1085: ldc_w 2437
        //     1088: aload_1
        //     1089: invokevirtual 1766	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //     1092: pop
        //     1093: aload_2
        //     1094: ifnull +13 -> 1107
        //     1097: aload 32
        //     1099: ldc_w 3874
        //     1102: aload_2
        //     1103: invokevirtual 1766	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //     1106: pop
        //     1107: aload_0
        //     1108: getfield 755	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
        //     1111: aload 31
        //     1113: invokevirtual 1687	android/os/Handler:sendMessage	(Landroid/os/Message;)Z
        //     1116: pop
        //     1117: aload_0
        //     1118: monitorexit
        //     1119: goto -995 -> 124
        //     1122: ldc_w 4255
        //     1125: astore 30
        //     1127: goto -85 -> 1042
        //     1130: iinc 15 255
        //     1133: goto -719 -> 414
        //     1136: aconst_null
        //     1137: astore 29
        //     1139: goto -125 -> 1014
        //
        // Exception table:
        //     from	to	target	type
        //     28	67	125	android/os/RemoteException
        //     78	124	184	finally
        //     135	188	184	finally
        //     191	519	184	finally
        //     782	833	836	android/os/RemoteException
        //     870	987	983	finally
        //     1008	1127	983	finally
        //     684	698	990	finally
        //     992	995	990	finally
    }

    public final void attachApplication(IApplicationThread paramIApplicationThread)
    {
        try
        {
            int i = Binder.getCallingPid();
            long l = Binder.clearCallingIdentity();
            attachApplicationLocked(paramIApplicationThread, i);
            Binder.restoreCallingIdentity(l);
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public void backupAgentCreated(String paramString, IBinder paramIBinder)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_1
        //     3: aload_0
        //     4: getfield 623	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
        //     7: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     10: ifne +40 -> 50
        //     13: ldc 221
        //     15: new 598	java/lang/StringBuilder
        //     18: dup
        //     19: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     22: ldc_w 4262
        //     25: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     28: aload_1
        //     29: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     32: ldc_w 4264
        //     35: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     38: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     41: invokestatic 1310	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
        //     44: pop
        //     45: aload_0
        //     46: monitorexit
        //     47: goto +73 -> 120
        //     50: aload_0
        //     51: monitorexit
        //     52: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     55: lstore 4
        //     57: ldc_w 2094
        //     60: invokestatic 2100	android/os/ServiceManager:getService	(Ljava/lang/String;)Landroid/os/IBinder;
        //     63: invokestatic 2106	android/app/backup/IBackupManager$Stub:asInterface	(Landroid/os/IBinder;)Landroid/app/backup/IBackupManager;
        //     66: aload_1
        //     67: aload_2
        //     68: invokeinterface 4267 3 0
        //     73: lload 4
        //     75: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     78: goto +42 -> 120
        //     81: astore_3
        //     82: aload_0
        //     83: monitorexit
        //     84: aload_3
        //     85: athrow
        //     86: astore 8
        //     88: ldc 221
        //     90: ldc_w 4269
        //     93: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     96: pop
        //     97: aload 8
        //     99: invokevirtual 1393	java/lang/Exception:printStackTrace	()V
        //     102: goto -29 -> 73
        //     105: astore 7
        //     107: lload 4
        //     109: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     112: aload 7
        //     114: athrow
        //     115: astore 6
        //     117: goto -44 -> 73
        //     120: return
        //
        // Exception table:
        //     from	to	target	type
        //     2	52	81	finally
        //     82	84	81	finally
        //     57	73	86	java/lang/Exception
        //     57	73	105	finally
        //     88	102	105	finally
        //     57	73	115	android/os/RemoteException
    }

    public void batteryNeedsCpuUpdate()
    {
        updateCpuStatsNow();
    }

    public void batteryPowerChanged(boolean paramBoolean)
    {
        updateCpuStatsNow();
        try
        {
            synchronized (this.mPidsSelfLocked)
            {
                this.mOnBattery = paramBoolean;
                return;
            }
        }
        finally
        {
        }
    }

    // ERROR //
    public boolean bindBackupAgent(ApplicationInfo paramApplicationInfo, int paramInt)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 4275
        //     4: ldc_w 4277
        //     7: invokevirtual 4280	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
        //     10: aload_0
        //     11: monitorenter
        //     12: aload_0
        //     13: getfield 832	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
        //     16: invokevirtual 836	com/android/server/am/BatteryStatsService:getActiveStatistics	()Lcom/android/internal/os/BatteryStatsImpl;
        //     19: astore 4
        //     21: aload 4
        //     23: monitorenter
        //     24: aload 4
        //     26: aload_1
        //     27: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     30: aload_1
        //     31: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     34: aload_1
        //     35: getfield 4281	android/content/pm/ApplicationInfo:name	Ljava/lang/String;
        //     38: invokevirtual 3712	com/android/internal/os/BatteryStatsImpl:getServiceStatsLocked	(ILjava/lang/String;Ljava/lang/String;)Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;
        //     41: astore 6
        //     43: aload 4
        //     45: monitorexit
        //     46: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     49: aload_1
        //     50: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     53: iconst_0
        //     54: aload_1
        //     55: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     58: invokestatic 2005	android/os/UserId:getUserId	(I)I
        //     61: invokeinterface 1583 4 0
        //     66: new 1198	com/android/server/am/BackupRecord
        //     69: dup
        //     70: aload 6
        //     72: aload_1
        //     73: iload_2
        //     74: invokespecial 4284	com/android/server/am/BackupRecord:<init>	(Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;Landroid/content/pm/ApplicationInfo;I)V
        //     77: astore 8
        //     79: iload_2
        //     80: ifne +138 -> 218
        //     83: new 1215	android/content/ComponentName
        //     86: dup
        //     87: aload_1
        //     88: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     91: aload_1
        //     92: getfield 4287	android/content/pm/ApplicationInfo:backupAgentName	Ljava/lang/String;
        //     95: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     98: astore 9
        //     100: aload_0
        //     101: aload_1
        //     102: getfield 2442	android/content/pm/ApplicationInfo:processName	Ljava/lang/String;
        //     105: aload_1
        //     106: iconst_0
        //     107: iconst_0
        //     108: ldc_w 2094
        //     111: aload 9
        //     113: iconst_0
        //     114: iconst_0
        //     115: invokevirtual 1609	com/android/server/am/ActivityManagerService:startProcessLocked	(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;ZILjava/lang/String;Landroid/content/ComponentName;ZZ)Lcom/android/server/am/ProcessRecord;
        //     118: astore 10
        //     120: aload 10
        //     122: ifnonnull +114 -> 236
        //     125: ldc 221
        //     127: new 598	java/lang/StringBuilder
        //     130: dup
        //     131: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     134: ldc_w 4289
        //     137: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     140: aload 8
        //     142: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     145: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     148: invokestatic 1310	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
        //     151: pop
        //     152: iconst_0
        //     153: istore 13
        //     155: aload_0
        //     156: monitorexit
        //     157: iload 13
        //     159: ireturn
        //     160: astore 5
        //     162: aload 4
        //     164: monitorexit
        //     165: aload 5
        //     167: athrow
        //     168: astore_3
        //     169: aload_0
        //     170: monitorexit
        //     171: aload_3
        //     172: athrow
        //     173: astore 16
        //     175: ldc 221
        //     177: new 598	java/lang/StringBuilder
        //     180: dup
        //     181: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     184: ldc_w 1600
        //     187: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     190: aload_1
        //     191: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     194: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     197: ldc_w 1602
        //     200: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     203: aload 16
        //     205: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     208: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     211: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     214: pop
        //     215: goto -149 -> 66
        //     218: new 1215	android/content/ComponentName
        //     221: dup
        //     222: ldc_w 3899
        //     225: ldc_w 4291
        //     228: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     231: astore 9
        //     233: goto -133 -> 100
        //     236: aload 8
        //     238: aload 10
        //     240: putfield 2092	com/android/server/am/BackupRecord:app	Lcom/android/server/am/ProcessRecord;
        //     243: aload_0
        //     244: aload 8
        //     246: putfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     249: aload_0
        //     250: aload_1
        //     251: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     254: putfield 623	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
        //     257: aload_0
        //     258: aload 10
        //     260: invokespecial 1464	com/android/server/am/ActivityManagerService:updateOomAdjLocked	(Lcom/android/server/am/ProcessRecord;)Z
        //     263: pop
        //     264: aload 10
        //     266: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     269: astore 12
        //     271: aload 12
        //     273: ifnull +20 -> 293
        //     276: aload 10
        //     278: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     281: aload_1
        //     282: aload_0
        //     283: aload_1
        //     284: invokevirtual 1222	com/android/server/am/ActivityManagerService:compatibilityInfoForPackageLocked	(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/CompatibilityInfo;
        //     287: iload_2
        //     288: invokeinterface 1388 4 0
        //     293: aload_0
        //     294: monitorexit
        //     295: iconst_1
        //     296: istore 13
        //     298: goto -141 -> 157
        //     301: astore 14
        //     303: goto -10 -> 293
        //     306: astore 7
        //     308: goto -242 -> 66
        //
        // Exception table:
        //     from	to	target	type
        //     24	46	160	finally
        //     162	165	160	finally
        //     12	24	168	finally
        //     46	66	168	finally
        //     66	157	168	finally
        //     165	171	168	finally
        //     175	271	168	finally
        //     276	293	168	finally
        //     293	295	168	finally
        //     46	66	173	java/lang/IllegalArgumentException
        //     276	293	301	android/os/RemoteException
        //     46	66	306	android/os/RemoteException
    }

    // ERROR //
    public int bindService(IApplicationThread paramIApplicationThread, IBinder paramIBinder, Intent paramIntent, String paramString, IServiceConnection paramIServiceConnection, int paramInt1, int paramInt2)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 4294
        //     4: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     7: aload_3
        //     8: ifnull +22 -> 30
        //     11: aload_3
        //     12: invokevirtual 4298	android/content/Intent:hasFileDescriptors	()Z
        //     15: iconst_1
        //     16: if_icmpne +14 -> 30
        //     19: new 1572	java/lang/IllegalArgumentException
        //     22: dup
        //     23: ldc_w 4300
        //     26: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     29: athrow
        //     30: aload_0
        //     31: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     34: iload 7
        //     36: invokespecial 4302	com/android/server/am/ActivityManagerService:checkValidCaller	(II)V
        //     39: aload_0
        //     40: monitorenter
        //     41: aload_0
        //     42: aload_1
        //     43: invokevirtual 3117	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
        //     46: astore 9
        //     48: aload 9
        //     50: ifnonnull +60 -> 110
        //     53: new 1701	java/lang/SecurityException
        //     56: dup
        //     57: new 598	java/lang/StringBuilder
        //     60: dup
        //     61: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     64: ldc_w 3119
        //     67: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     70: aload_1
        //     71: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     74: ldc_w 1736
        //     77: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     80: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     83: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     86: ldc_w 4304
        //     89: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     92: aload_3
        //     93: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     96: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     99: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     102: athrow
        //     103: astore 8
        //     105: aload_0
        //     106: monitorexit
        //     107: aload 8
        //     109: athrow
        //     110: aconst_null
        //     111: astore 10
        //     113: aload_2
        //     114: ifnull +52 -> 166
        //     117: aload_0
        //     118: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     121: aload_2
        //     122: invokevirtual 3098	com/android/server/am/ActivityStack:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
        //     125: astore 10
        //     127: aload 10
        //     129: ifnonnull +37 -> 166
        //     132: ldc 221
        //     134: new 598	java/lang/StringBuilder
        //     137: dup
        //     138: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     141: ldc_w 4306
        //     144: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     147: aload_2
        //     148: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     151: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     154: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     157: pop
        //     158: iconst_0
        //     159: istore 32
        //     161: aload_0
        //     162: monitorexit
        //     163: goto +673 -> 836
        //     166: iconst_0
        //     167: istore 11
        //     169: aconst_null
        //     170: astore 12
        //     172: aload 9
        //     174: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     177: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     180: istore 13
        //     182: iload 13
        //     184: sipush 1000
        //     187: if_icmpne +40 -> 227
        //     190: aload_3
        //     191: ldc_w 4308
        //     194: invokevirtual 1677	android/content/Intent:getParcelableExtra	(Ljava/lang/String;)Landroid/os/Parcelable;
        //     197: checkcast 4310	android/app/PendingIntent
        //     200: astore 12
        //     202: aload 12
        //     204: ifnull +23 -> 227
        //     207: aload_3
        //     208: ldc_w 4312
        //     211: iconst_0
        //     212: invokevirtual 1730	android/content/Intent:getIntExtra	(Ljava/lang/String;I)I
        //     215: istore 11
        //     217: iload 11
        //     219: ifeq +8 -> 227
        //     222: aload_3
        //     223: invokevirtual 3705	android/content/Intent:cloneFilter	()Landroid/content/Intent;
        //     226: astore_3
        //     227: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     230: istore 14
        //     232: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     235: istore 15
        //     237: aload_0
        //     238: aload_3
        //     239: aload 4
        //     241: iload 14
        //     243: iload 15
        //     245: iload 7
        //     247: invokespecial 4314	com/android/server/am/ActivityManagerService:retrieveServiceLocked	(Landroid/content/Intent;Ljava/lang/String;III)Lcom/android/server/am/ActivityManagerService$ServiceLookupResult;
        //     250: astore 16
        //     252: aload 16
        //     254: ifnonnull +11 -> 265
        //     257: iconst_0
        //     258: istore 32
        //     260: aload_0
        //     261: monitorexit
        //     262: goto +574 -> 836
        //     265: aload 16
        //     267: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     270: ifnonnull +12 -> 282
        //     273: bipush 255
        //     275: istore 32
        //     277: aload_0
        //     278: monitorexit
        //     279: goto +557 -> 836
        //     282: aload_0
        //     283: aload 16
        //     285: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     288: getfield 1323	com/android/server/am/ServiceRecord:processName	Ljava/lang/String;
        //     291: aload 16
        //     293: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     296: getfield 1322	com/android/server/am/ServiceRecord:appInfo	Landroid/content/pm/ApplicationInfo;
        //     299: invokevirtual 1786	com/android/server/am/ActivityManagerService:isSingleton	(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;)Z
        //     302: ifeq +27 -> 329
        //     305: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     308: istore 39
        //     310: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     313: istore 40
        //     315: aload_0
        //     316: aload_3
        //     317: aload 4
        //     319: iload 39
        //     321: iload 40
        //     323: iconst_0
        //     324: invokespecial 4314	com/android/server/am/ActivityManagerService:retrieveServiceLocked	(Landroid/content/Intent;Ljava/lang/String;III)Lcom/android/server/am/ActivityManagerService$ServiceLookupResult;
        //     327: astore 16
        //     329: aload 16
        //     331: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     334: astore 17
        //     336: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     339: lstore 18
        //     341: aload_0
        //     342: aload 17
        //     344: invokespecial 1507	com/android/server/am/ActivityManagerService:unscheduleServiceRestartLocked	(Lcom/android/server/am/ServiceRecord;)Z
        //     347: ifeq +3 -> 350
        //     350: aload 17
        //     352: aload_3
        //     353: aload 9
        //     355: invokevirtual 4321	com/android/server/am/ServiceRecord:retrieveAppBindingLocked	(Landroid/content/Intent;Lcom/android/server/am/ProcessRecord;)Lcom/android/server/am/AppBindRecord;
        //     358: astore 20
        //     360: new 1414	com/android/server/am/ConnectionRecord
        //     363: dup
        //     364: aload 20
        //     366: aload 10
        //     368: aload 5
        //     370: iload 6
        //     372: iload 11
        //     374: aload 12
        //     376: invokespecial 4324	com/android/server/am/ConnectionRecord:<init>	(Lcom/android/server/am/AppBindRecord;Lcom/android/server/am/ActivityRecord;Landroid/app/IServiceConnection;IILandroid/app/PendingIntent;)V
        //     379: astore 21
        //     381: aload 5
        //     383: invokeinterface 1436 1 0
        //     388: astore 22
        //     390: aload 17
        //     392: getfield 1404	com/android/server/am/ServiceRecord:connections	Ljava/util/HashMap;
        //     395: aload 22
        //     397: invokevirtual 1762	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
        //     400: checkcast 536	java/util/ArrayList
        //     403: astore 23
        //     405: aload 23
        //     407: ifnonnull +25 -> 432
        //     410: new 536	java/util/ArrayList
        //     413: dup
        //     414: invokespecial 537	java/util/ArrayList:<init>	()V
        //     417: astore 23
        //     419: aload 17
        //     421: getfield 1404	com/android/server/am/ServiceRecord:connections	Ljava/util/HashMap;
        //     424: aload 22
        //     426: aload 23
        //     428: invokevirtual 1766	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //     431: pop
        //     432: aload 23
        //     434: aload 21
        //     436: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     439: pop
        //     440: aload 20
        //     442: getfield 4325	com/android/server/am/AppBindRecord:connections	Ljava/util/HashSet;
        //     445: aload 21
        //     447: invokevirtual 1901	java/util/HashSet:add	(Ljava/lang/Object;)Z
        //     450: pop
        //     451: aload 10
        //     453: ifnull +34 -> 487
        //     456: aload 10
        //     458: getfield 4326	com/android/server/am/ActivityRecord:connections	Ljava/util/HashSet;
        //     461: ifnonnull +15 -> 476
        //     464: aload 10
        //     466: new 586	java/util/HashSet
        //     469: dup
        //     470: invokespecial 587	java/util/HashSet:<init>	()V
        //     473: putfield 4326	com/android/server/am/ActivityRecord:connections	Ljava/util/HashSet;
        //     476: aload 10
        //     478: getfield 4326	com/android/server/am/ActivityRecord:connections	Ljava/util/HashSet;
        //     481: aload 21
        //     483: invokevirtual 1901	java/util/HashSet:add	(Ljava/lang/Object;)Z
        //     486: pop
        //     487: aload 20
        //     489: getfield 1447	com/android/server/am/AppBindRecord:client	Lcom/android/server/am/ProcessRecord;
        //     492: getfield 3341	com/android/server/am/ProcessRecord:connections	Ljava/util/HashSet;
        //     495: aload 21
        //     497: invokevirtual 1901	java/util/HashSet:add	(Ljava/lang/Object;)Z
        //     500: pop
        //     501: bipush 8
        //     503: aload 21
        //     505: getfield 1415	com/android/server/am/ConnectionRecord:flags	I
        //     508: iand
        //     509: ifeq +12 -> 521
        //     512: aload 20
        //     514: getfield 1447	com/android/server/am/AppBindRecord:client	Lcom/android/server/am/ProcessRecord;
        //     517: iconst_1
        //     518: putfield 2038	com/android/server/am/ProcessRecord:hasAboveClient	Z
        //     521: aload_0
        //     522: getfield 615	com/android/server/am/ActivityManagerService:mServiceConnections	Ljava/util/HashMap;
        //     525: aload 22
        //     527: invokevirtual 1762	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
        //     530: checkcast 536	java/util/ArrayList
        //     533: astore 28
        //     535: aload 28
        //     537: ifnonnull +24 -> 561
        //     540: new 536	java/util/ArrayList
        //     543: dup
        //     544: invokespecial 537	java/util/ArrayList:<init>	()V
        //     547: astore 28
        //     549: aload_0
        //     550: getfield 615	com/android/server/am/ActivityManagerService:mServiceConnections	Ljava/util/HashMap;
        //     553: aload 22
        //     555: aload 28
        //     557: invokevirtual 1766	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //     560: pop
        //     561: aload 28
        //     563: aload 21
        //     565: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     568: pop
        //     569: iload 6
        //     571: iconst_1
        //     572: iand
        //     573: ifeq +33 -> 606
        //     576: aload 17
        //     578: invokestatic 1271	android/os/SystemClock:uptimeMillis	()J
        //     581: putfield 2309	com/android/server/am/ServiceRecord:lastActivity	J
        //     584: aload_0
        //     585: aload 17
        //     587: aload_3
        //     588: invokevirtual 1800	android/content/Intent:getFlags	()I
        //     591: iconst_0
        //     592: invokespecial 4328	com/android/server/am/ActivityManagerService:bringUpServiceLocked	(Lcom/android/server/am/ServiceRecord;IZ)Z
        //     595: ifne +11 -> 606
        //     598: iconst_0
        //     599: istore 32
        //     601: aload_0
        //     602: monitorexit
        //     603: goto +233 -> 836
        //     606: aload 17
        //     608: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     611: ifnull +13 -> 624
        //     614: aload_0
        //     615: aload 17
        //     617: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     620: invokespecial 1464	com/android/server/am/ActivityManagerService:updateOomAdjLocked	(Lcom/android/server/am/ProcessRecord;)Z
        //     623: pop
        //     624: aload 17
        //     626: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     629: ifnull +175 -> 804
        //     632: aload 20
        //     634: getfield 4331	com/android/server/am/AppBindRecord:intent	Lcom/android/server/am/IntentBindRecord;
        //     637: getfield 3351	com/android/server/am/IntentBindRecord:received	Z
        //     640: istore 33
        //     642: iload 33
        //     644: ifeq +160 -> 804
        //     647: aload 21
        //     649: getfield 1422	com/android/server/am/ConnectionRecord:conn	Landroid/app/IServiceConnection;
        //     652: aload 17
        //     654: getfield 1425	com/android/server/am/ServiceRecord:name	Landroid/content/ComponentName;
        //     657: aload 20
        //     659: getfield 4331	com/android/server/am/AppBindRecord:intent	Lcom/android/server/am/IntentBindRecord;
        //     662: getfield 3348	com/android/server/am/IntentBindRecord:binder	Landroid/os/IBinder;
        //     665: invokeinterface 1431 3 0
        //     670: aload 20
        //     672: getfield 4331	com/android/server/am/AppBindRecord:intent	Lcom/android/server/am/IntentBindRecord;
        //     675: getfield 3682	com/android/server/am/IntentBindRecord:apps	Ljava/util/HashMap;
        //     678: invokevirtual 1405	java/util/HashMap:size	()I
        //     681: iconst_1
        //     682: if_icmpne +27 -> 709
        //     685: aload 20
        //     687: getfield 4331	com/android/server/am/AppBindRecord:intent	Lcom/android/server/am/IntentBindRecord;
        //     690: getfield 3691	com/android/server/am/IntentBindRecord:doRebind	Z
        //     693: ifeq +16 -> 709
        //     696: aload_0
        //     697: aload 17
        //     699: aload 20
        //     701: getfield 4331	com/android/server/am/AppBindRecord:intent	Lcom/android/server/am/IntentBindRecord;
        //     704: iconst_1
        //     705: invokespecial 3693	com/android/server/am/ActivityManagerService:requestServiceBindingLocked	(Lcom/android/server/am/ServiceRecord;Lcom/android/server/am/IntentBindRecord;Z)Z
        //     708: pop
        //     709: lload 18
        //     711: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     714: aload_0
        //     715: monitorexit
        //     716: iconst_1
        //     717: istore 32
        //     719: goto +117 -> 836
        //     722: astore 34
        //     724: ldc 221
        //     726: new 598	java/lang/StringBuilder
        //     729: dup
        //     730: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     733: ldc_w 4333
        //     736: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     739: aload 17
        //     741: getfield 1375	com/android/server/am/ServiceRecord:shortName	Ljava/lang/String;
        //     744: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     747: ldc_w 1435
        //     750: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     753: aload 21
        //     755: getfield 1422	com/android/server/am/ConnectionRecord:conn	Landroid/app/IServiceConnection;
        //     758: invokeinterface 1436 1 0
        //     763: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     766: ldc_w 1438
        //     769: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     772: aload 21
        //     774: getfield 1442	com/android/server/am/ConnectionRecord:binding	Lcom/android/server/am/AppBindRecord;
        //     777: getfield 1447	com/android/server/am/AppBindRecord:client	Lcom/android/server/am/ProcessRecord;
        //     780: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     783: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     786: ldc_w 1042
        //     789: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     792: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     795: aload 34
        //     797: invokestatic 1336	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     800: pop
        //     801: goto -131 -> 670
        //     804: aload 20
        //     806: getfield 4331	com/android/server/am/AppBindRecord:intent	Lcom/android/server/am/IntentBindRecord;
        //     809: getfield 3354	com/android/server/am/IntentBindRecord:requested	Z
        //     812: ifne -103 -> 709
        //     815: aload_0
        //     816: aload 17
        //     818: aload 20
        //     820: getfield 4331	com/android/server/am/AppBindRecord:intent	Lcom/android/server/am/IntentBindRecord;
        //     823: iconst_0
        //     824: invokespecial 3693	com/android/server/am/ActivityManagerService:requestServiceBindingLocked	(Lcom/android/server/am/ServiceRecord;Lcom/android/server/am/IntentBindRecord;Z)Z
        //     827: pop
        //     828: goto -119 -> 709
        //     831: astore 41
        //     833: goto -631 -> 202
        //     836: iload 32
        //     838: ireturn
        //
        // Exception table:
        //     from	to	target	type
        //     41	107	103	finally
        //     117	182	103	finally
        //     190	202	103	finally
        //     207	642	103	finally
        //     647	670	103	finally
        //     670	828	103	finally
        //     647	670	722	java/lang/Exception
        //     190	202	831	java/lang/RuntimeException
    }

    public final int broadcastIntent(IApplicationThread paramIApplicationThread, Intent paramIntent, String paramString1, IIntentReceiver paramIIntentReceiver, int paramInt1, String paramString2, Bundle paramBundle, String paramString3, boolean paramBoolean1, boolean paramBoolean2, int paramInt2)
    {
        enforceNotIsolatedCaller("broadcastIntent");
        while (true)
        {
            try
            {
                Intent localIntent = verifyBroadcastLocked(paramIntent);
                ProcessRecord localProcessRecord = getRecordForAppLocked(paramIApplicationThread);
                int i = Binder.getCallingPid();
                int j = Binder.getCallingUid();
                long l = Binder.clearCallingIdentity();
                if (localProcessRecord != null)
                {
                    str = localProcessRecord.info.packageName;
                    int k = broadcastIntentLocked(localProcessRecord, str, localIntent, paramString1, paramIIntentReceiver, paramInt1, paramString2, paramBundle, paramString3, paramBoolean1, paramBoolean2, i, j, paramInt2);
                    Binder.restoreCallingIdentity(l);
                    return k;
                }
            }
            finally
            {
                localObject = finally;
                throw localObject;
            }
            String str = null;
        }
    }

    int broadcastIntentInPackage(String paramString1, int paramInt1, Intent paramIntent, String paramString2, IIntentReceiver paramIIntentReceiver, int paramInt2, String paramString3, Bundle paramBundle, String paramString4, boolean paramBoolean1, boolean paramBoolean2, int paramInt3)
    {
        try
        {
            Intent localIntent = verifyBroadcastLocked(paramIntent);
            long l = Binder.clearCallingIdentity();
            int i = broadcastIntentLocked(null, paramString1, localIntent, paramString2, paramIIntentReceiver, paramInt2, paramString3, paramBundle, paramString4, paramBoolean1, paramBoolean2, -1, paramInt1, paramInt3);
            Binder.restoreCallingIdentity(l);
            return i;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    BroadcastQueue broadcastQueueForIntent(Intent paramIntent)
    {
        int i;
        if ((0x10000000 & paramIntent.getFlags()) != 0)
        {
            i = 1;
            if (i == 0)
                break label29;
        }
        label29: for (BroadcastQueue localBroadcastQueue = this.mFgBroadcastQueue; ; localBroadcastQueue = this.mBgBroadcastQueue)
        {
            return localBroadcastQueue;
            i = 0;
            break;
        }
    }

    BroadcastRecord broadcastRecordForReceiverLocked(IBinder paramIBinder)
    {
        BroadcastQueue[] arrayOfBroadcastQueue = this.mBroadcastQueues;
        int i = arrayOfBroadcastQueue.length;
        int j = 0;
        BroadcastRecord localBroadcastRecord;
        if (j < i)
        {
            localBroadcastRecord = arrayOfBroadcastQueue[j].getMatchingOrderedReceiver(paramIBinder);
            if (localBroadcastRecord == null);
        }
        while (true)
        {
            return localBroadcastRecord;
            j++;
            break;
            localBroadcastRecord = null;
        }
    }

    public void cancelIntentSender(IIntentSender paramIIntentSender)
    {
        if (!(paramIIntentSender instanceof PendingIntentRecord));
        while (true)
        {
            return;
            PendingIntentRecord localPendingIntentRecord;
            try
            {
                localPendingIntentRecord = (PendingIntentRecord)paramIIntentSender;
                try
                {
                    if (!UserId.isSameApp(AppGlobals.getPackageManager().getPackageUid(localPendingIntentRecord.key.packageName, UserId.getCallingUserId()), Binder.getCallingUid()))
                    {
                        String str = "Permission Denial: cancelIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " is not allowed to cancel packges " + localPendingIntentRecord.key.packageName;
                        Slog.w("ActivityManager", str);
                        throw new SecurityException(str);
                    }
                }
                catch (RemoteException localRemoteException)
                {
                    throw new SecurityException(localRemoteException);
                }
            }
            finally
            {
            }
            cancelIntentSenderLocked(localPendingIntentRecord, true);
        }
    }

    void cancelIntentSenderLocked(PendingIntentRecord paramPendingIntentRecord, boolean paramBoolean)
    {
        paramPendingIntentRecord.canceled = true;
        this.mIntentSenderRecords.remove(paramPendingIntentRecord.key);
        if ((paramBoolean) && (paramPendingIntentRecord.key.activity != null))
            paramPendingIntentRecord.key.activity.pendingResults.remove(paramPendingIntentRecord.ref);
    }

    boolean checkAppInLaunchingProvidersLocked(ProcessRecord paramProcessRecord, boolean paramBoolean)
    {
        int i = this.mLaunchingProviders.size();
        boolean bool = false;
        int j = 0;
        if (j < i)
        {
            ContentProviderRecord localContentProviderRecord = (ContentProviderRecord)this.mLaunchingProviders.get(j);
            if (localContentProviderRecord.launchingApp == paramProcessRecord)
            {
                if ((paramBoolean) || (paramProcessRecord.bad))
                    break label63;
                bool = true;
            }
            while (true)
            {
                j++;
                break;
                label63: removeDyingProviderLocked(paramProcessRecord, localContentProviderRecord, true);
                i = this.mLaunchingProviders.size();
            }
        }
        return bool;
    }

    boolean checkAppSwitchAllowedLocked(int paramInt1, int paramInt2, String paramString)
    {
        boolean bool = true;
        if (this.mAppSwitchesAllowedTime < SystemClock.uptimeMillis());
        while (true)
        {
            return bool;
            if (checkComponentPermission("android.permission.STOP_APP_SWITCHES", paramInt1, paramInt2, -1, bool) != 0)
            {
                Slog.w("ActivityManager", paramString + " request from " + paramInt2 + " stopped");
                bool = false;
            }
        }
    }

    int checkCallingPermission(String paramString)
    {
        return checkPermission(paramString, Binder.getCallingPid(), UserId.getAppId(Binder.getCallingUid()));
    }

    int checkComponentPermission(String paramString, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean)
    {
        Identity localIdentity = (Identity)sCallerIdentity.get();
        if (localIdentity != null)
        {
            Slog.d("ActivityManager", "checkComponentPermission() adjusting {pid,uid} to {" + localIdentity.pid + "," + localIdentity.uid + "}");
            paramInt2 = localIdentity.uid;
            paramInt1 = localIdentity.pid;
        }
        if (paramInt1 == MY_PID);
        for (int i = 0; ; i = ActivityManager.checkComponentPermission(paramString, paramInt2, paramInt3, paramBoolean))
            return i;
    }

    // ERROR //
    final void checkExcessivePowerUsageLocked(boolean paramBoolean)
    {
        // Byte code:
        //     0: aload_0
        //     1: invokevirtual 4204	com/android/server/am/ActivityManagerService:updateCpuStatsNow	()V
        //     4: aload_0
        //     5: getfield 832	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
        //     8: invokevirtual 836	com/android/server/am/BatteryStatsService:getActiveStatistics	()Lcom/android/internal/os/BatteryStatsImpl;
        //     11: astore_2
        //     12: iload_1
        //     13: istore_3
        //     14: iload_1
        //     15: istore 4
        //     17: aload_0
        //     18: getfield 2693	com/android/server/am/ActivityManagerService:mLastPowerCheckRealtime	J
        //     21: lconst_0
        //     22: lcmp
        //     23: ifne +5 -> 28
        //     26: iconst_0
        //     27: istore_3
        //     28: aload_0
        //     29: getfield 2695	com/android/server/am/ActivityManagerService:mLastPowerCheckUptime	J
        //     32: lconst_0
        //     33: lcmp
        //     34: ifne +6 -> 40
        //     37: iconst_0
        //     38: istore 4
        //     40: aload_2
        //     41: invokevirtual 4419	com/android/internal/os/BatteryStatsImpl:isScreenOn	()Z
        //     44: ifeq +5 -> 49
        //     47: iconst_0
        //     48: istore_3
        //     49: invokestatic 2691	android/os/SystemClock:elapsedRealtime	()J
        //     52: lstore 5
        //     54: lload 5
        //     56: aload_0
        //     57: getfield 2693	com/android/server/am/ActivityManagerService:mLastPowerCheckRealtime	J
        //     60: lsub
        //     61: lstore 7
        //     63: invokestatic 1271	android/os/SystemClock:uptimeMillis	()J
        //     66: lstore 9
        //     68: lload 9
        //     70: aload_0
        //     71: getfield 2695	com/android/server/am/ActivityManagerService:mLastPowerCheckUptime	J
        //     74: lsub
        //     75: lstore 11
        //     77: aload_0
        //     78: lload 5
        //     80: putfield 2693	com/android/server/am/ActivityManagerService:mLastPowerCheckRealtime	J
        //     83: aload_0
        //     84: lload 9
        //     86: putfield 2695	com/android/server/am/ActivityManagerService:mLastPowerCheckUptime	J
        //     89: lload 7
        //     91: ldc2_w 4005
        //     94: lcmp
        //     95: ifge +5 -> 100
        //     98: iconst_0
        //     99: istore_3
        //     100: lload 11
        //     102: ldc2_w 4005
        //     105: lcmp
        //     106: ifge +6 -> 112
        //     109: iconst_0
        //     110: istore 4
        //     112: aload_0
        //     113: getfield 582	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
        //     116: invokevirtual 1313	java/util/ArrayList:size	()I
        //     119: istore 13
        //     121: iload 13
        //     123: ifle +486 -> 609
        //     126: iinc 13 255
        //     129: aload_0
        //     130: getfield 582	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
        //     133: iload 13
        //     135: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     138: checkcast 982	com/android/server/am/ProcessRecord
        //     141: astore 14
        //     143: aload 14
        //     145: getfield 2250	com/android/server/am/ProcessRecord:keeping	Z
        //     148: ifne -27 -> 121
        //     151: aload_2
        //     152: monitorenter
        //     153: aload_2
        //     154: aload 14
        //     156: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     159: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     162: aload 14
        //     164: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     167: lload 5
        //     169: invokevirtual 2753	com/android/internal/os/BatteryStatsImpl:getProcessWakeTime	(IIJ)J
        //     172: lstore 16
        //     174: aload_2
        //     175: monitorexit
        //     176: lload 16
        //     178: aload 14
        //     180: getfield 2749	com/android/server/am/ProcessRecord:lastWakeTime	J
        //     183: lsub
        //     184: lstore 18
        //     186: aload 14
        //     188: getfield 2775	com/android/server/am/ProcessRecord:curCpuTime	J
        //     191: aload 14
        //     193: getfield 2772	com/android/server/am/ProcessRecord:lastCpuTime	J
        //     196: lsub
        //     197: lstore 20
        //     199: iload_3
        //     200: ifeq +197 -> 397
        //     203: lload 7
        //     205: lconst_0
        //     206: lcmp
        //     207: ifle +190 -> 397
        //     210: ldc2_w 2764
        //     213: lload 18
        //     215: lmul
        //     216: lload 7
        //     218: ldiv
        //     219: ldc2_w 4420
        //     222: lcmp
        //     223: iflt +174 -> 397
        //     226: aload_2
        //     227: monitorenter
        //     228: aload_2
        //     229: aload 14
        //     231: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     234: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     237: aload 14
        //     239: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     242: lload 7
        //     244: lload 18
        //     246: invokevirtual 4425	com/android/internal/os/BatteryStatsImpl:reportExcessiveWakeLocked	(ILjava/lang/String;JJ)V
        //     249: aload_2
        //     250: monitorexit
        //     251: ldc 221
        //     253: new 598	java/lang/StringBuilder
        //     256: dup
        //     257: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     260: ldc_w 4427
        //     263: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     266: aload 14
        //     268: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     271: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     274: ldc_w 3640
        //     277: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     280: aload 14
        //     282: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     285: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     288: ldc_w 4429
        //     291: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     294: lload 18
        //     296: invokevirtual 1062	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
        //     299: ldc_w 4431
        //     302: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     305: lload 7
        //     307: invokevirtual 1062	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
        //     310: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     313: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     316: pop
        //     317: iconst_4
        //     318: anewarray 1138	java/lang/Object
        //     321: astore 28
        //     323: aload 28
        //     325: iconst_0
        //     326: aload 14
        //     328: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     331: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     334: aastore
        //     335: aload 28
        //     337: iconst_1
        //     338: aload 14
        //     340: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     343: aastore
        //     344: aload 28
        //     346: iconst_2
        //     347: aload 14
        //     349: getfield 1151	com/android/server/am/ProcessRecord:setAdj	I
        //     352: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     355: aastore
        //     356: aload 28
        //     358: iconst_3
        //     359: ldc_w 4433
        //     362: aastore
        //     363: sipush 30023
        //     366: aload 28
        //     368: invokestatic 1148	android/util/EventLog:writeEvent	(I[Ljava/lang/Object;)I
        //     371: pop
        //     372: aload 14
        //     374: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     377: invokestatic 1103	android/os/Process:killProcessQuiet	(I)V
        //     380: goto -259 -> 121
        //     383: astore 15
        //     385: aload_2
        //     386: monitorexit
        //     387: aload 15
        //     389: athrow
        //     390: astore 26
        //     392: aload_2
        //     393: monitorexit
        //     394: aload 26
        //     396: athrow
        //     397: iload 4
        //     399: ifeq +190 -> 589
        //     402: lload 11
        //     404: lconst_0
        //     405: lcmp
        //     406: ifle +183 -> 589
        //     409: ldc2_w 2764
        //     412: lload 20
        //     414: lmul
        //     415: lload 11
        //     417: ldiv
        //     418: ldc2_w 4420
        //     421: lcmp
        //     422: iflt +167 -> 589
        //     425: aload_2
        //     426: monitorenter
        //     427: aload_2
        //     428: aload 14
        //     430: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     433: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     436: aload 14
        //     438: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     441: lload 11
        //     443: lload 20
        //     445: invokevirtual 4436	com/android/internal/os/BatteryStatsImpl:reportExcessiveCpuLocked	(ILjava/lang/String;JJ)V
        //     448: aload_2
        //     449: monitorexit
        //     450: ldc 221
        //     452: new 598	java/lang/StringBuilder
        //     455: dup
        //     456: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     459: ldc_w 4438
        //     462: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     465: aload 14
        //     467: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     470: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     473: ldc_w 3640
        //     476: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     479: aload 14
        //     481: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     484: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     487: ldc_w 4440
        //     490: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     493: lload 20
        //     495: invokevirtual 1062	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
        //     498: ldc_w 4431
        //     501: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     504: lload 11
        //     506: invokevirtual 1062	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
        //     509: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     512: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     515: pop
        //     516: iconst_4
        //     517: anewarray 1138	java/lang/Object
        //     520: astore 24
        //     522: aload 24
        //     524: iconst_0
        //     525: aload 14
        //     527: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     530: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     533: aastore
        //     534: aload 24
        //     536: iconst_1
        //     537: aload 14
        //     539: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     542: aastore
        //     543: aload 24
        //     545: iconst_2
        //     546: aload 14
        //     548: getfield 1151	com/android/server/am/ProcessRecord:setAdj	I
        //     551: invokestatic 1145	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //     554: aastore
        //     555: aload 24
        //     557: iconst_3
        //     558: ldc_w 4442
        //     561: aastore
        //     562: sipush 30023
        //     565: aload 24
        //     567: invokestatic 1148	android/util/EventLog:writeEvent	(I[Ljava/lang/Object;)I
        //     570: pop
        //     571: aload 14
        //     573: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     576: invokestatic 1103	android/os/Process:killProcessQuiet	(I)V
        //     579: goto -458 -> 121
        //     582: astore 22
        //     584: aload_2
        //     585: monitorexit
        //     586: aload 22
        //     588: athrow
        //     589: aload 14
        //     591: lload 16
        //     593: putfield 2749	com/android/server/am/ProcessRecord:lastWakeTime	J
        //     596: aload 14
        //     598: aload 14
        //     600: getfield 2775	com/android/server/am/ProcessRecord:curCpuTime	J
        //     603: putfield 2772	com/android/server/am/ProcessRecord:lastCpuTime	J
        //     606: goto -485 -> 121
        //     609: return
        //
        // Exception table:
        //     from	to	target	type
        //     153	176	383	finally
        //     385	387	383	finally
        //     228	251	390	finally
        //     392	394	390	finally
        //     427	450	582	finally
        //     584	586	582	finally
    }

    public int checkGrantUriPermission(int paramInt1, String paramString, Uri paramUri, int paramInt2)
    {
        enforceNotIsolatedCaller("checkGrantUriPermission");
        try
        {
            int i = checkGrantUriPermissionLocked(paramInt1, paramString, paramUri, paramInt2, -1);
            return i;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    NeededUriGrants checkGrantUriPermissionFromIntentLocked(int paramInt1, String paramString, Intent paramIntent, int paramInt2, NeededUriGrants paramNeededUriGrants)
    {
        if (paramString == null)
            throw new NullPointerException("targetPkg");
        NeededUriGrants localNeededUriGrants1;
        if (paramIntent == null)
            localNeededUriGrants1 = null;
        while (true)
        {
            return localNeededUriGrants1;
            Uri localUri1 = paramIntent.getData();
            ClipData localClipData = paramIntent.getClipData();
            if ((localUri1 == null) && (localClipData == null))
            {
                localNeededUriGrants1 = null;
            }
            else
            {
                int n;
                if (localUri1 != null)
                {
                    if (paramNeededUriGrants == null)
                        break label219;
                    n = paramNeededUriGrants.targetUid;
                    int i1 = checkGrantUriPermissionLocked(paramInt1, paramString, localUri1, paramInt2, n);
                    if (i1 > 0)
                    {
                        if (paramNeededUriGrants == null)
                            paramNeededUriGrants = new NeededUriGrants(paramString, i1, paramInt2);
                        paramNeededUriGrants.add(localUri1);
                    }
                }
                if (localClipData != null)
                {
                    int i = 0;
                    label124: int j = localClipData.getItemCount();
                    if (i < j)
                    {
                        Uri localUri2 = localClipData.getItemAt(i).getUri();
                        int k;
                        if (localUri2 != null)
                            if (paramNeededUriGrants != null)
                            {
                                k = paramNeededUriGrants.targetUid;
                                label167: int m = checkGrantUriPermissionLocked(paramInt1, paramString, localUri2, paramInt2, k);
                                if (m > 0)
                                {
                                    if (paramNeededUriGrants == null)
                                        paramNeededUriGrants = new NeededUriGrants(paramString, m, paramInt2);
                                    paramNeededUriGrants.add(localUri2);
                                }
                            }
                        while (true)
                        {
                            i++;
                            break label124;
                            label219: n = -1;
                            break;
                            k = -1;
                            break label167;
                            Intent localIntent = localClipData.getItemAt(i).getIntent();
                            if (localIntent != null)
                            {
                                NeededUriGrants localNeededUriGrants2 = checkGrantUriPermissionFromIntentLocked(paramInt1, paramString, localIntent, paramInt2, paramNeededUriGrants);
                                if (localNeededUriGrants2 != null)
                                    paramNeededUriGrants = localNeededUriGrants2;
                            }
                        }
                    }
                }
                localNeededUriGrants1 = paramNeededUriGrants;
            }
        }
    }

    int checkGrantUriPermissionLocked(int paramInt1, String paramString, Uri paramUri, int paramInt2, int paramInt3)
    {
        int i = paramInt2 & 0x3;
        if (i == 0);
        IPackageManager localIPackageManager;
        for (int j = -1; ; j = -1)
        {
            return j;
            if (paramString != null);
            localIPackageManager = AppGlobals.getPackageManager();
            if ("content".equals(paramUri.getScheme()))
                break;
        }
        String str = paramUri.getAuthority();
        Object localObject = null;
        ContentProviderRecord localContentProviderRecord = this.mProviderMap.getProviderByName(str, UserId.getUserId(paramInt1));
        if (localContentProviderRecord != null)
            localObject = localContentProviderRecord.info;
        while (true)
            while (true)
            {
                if (localObject == null)
                {
                    Slog.w("ActivityManager", "No content provider found for permission check: " + paramUri.toSafeString());
                    j = -1;
                    break;
                }
                try
                {
                    while (true)
                    {
                        ProviderInfo localProviderInfo = localIPackageManager.resolveContentProvider(str, 2048, UserId.getUserId(paramInt1));
                        localObject = localProviderInfo;
                        break;
                        j = paramInt3;
                        if ((j >= 0) || (paramString == null))
                            break label201;
                        try
                        {
                            int i1 = localIPackageManager.getPackageUid(paramString, UserId.getUserId(paramInt1));
                            j = i1;
                            if (j >= 0)
                                break label201;
                            j = -1;
                        }
                        catch (RemoteException localRemoteException2)
                        {
                            j = -1;
                        }
                    }
                    break;
                    label201: if (j >= 0)
                    {
                        if (!checkHoldingPermissionsLocked(localIPackageManager, (ProviderInfo)localObject, paramUri, j, i))
                            break label284;
                        j = -1;
                        break;
                    }
                    boolean bool = ((ProviderInfo)localObject).exported;
                    if (((i & 0x1) != 0) && (((ProviderInfo)localObject).readPermission != null))
                        bool = false;
                    if (((i & 0x2) != 0) && (((ProviderInfo)localObject).writePermission != null))
                        bool = false;
                    if (bool)
                    {
                        j = -1;
                        break;
                    }
                    label284: if (!((ProviderInfo)localObject).grantUriPermissions)
                        throw new SecurityException("Provider " + ((ComponentInfo)localObject).packageName + "/" + ((ComponentInfo)localObject).name + " does not allow granting of Uri permissions (uri " + paramUri + ")");
                    if (((ProviderInfo)localObject).uriPermissionPatterns != null)
                    {
                        int k = ((ProviderInfo)localObject).uriPermissionPatterns.length;
                        int m = 0;
                        for (int n = 0; ; n++)
                            if (n < k)
                            {
                                if ((localObject.uriPermissionPatterns[n] != null) && (localObject.uriPermissionPatterns[n].match(paramUri.getPath())))
                                    m = 1;
                            }
                            else
                            {
                                if (m != 0)
                                    break;
                                throw new SecurityException("Provider " + ((ComponentInfo)localObject).packageName + "/" + ((ComponentInfo)localObject).name + " does not allow granting of permission to path of Uri " + paramUri);
                            }
                    }
                    if ((paramInt1 == Process.myUid()) || (checkHoldingPermissionsLocked(localIPackageManager, (ProviderInfo)localObject, paramUri, paramInt1, i)) || (checkUriPermissionLocked(paramUri, paramInt1, i)))
                        break;
                    throw new SecurityException("Uid " + paramInt1 + " does not have permission to uri " + paramUri);
                }
                catch (RemoteException localRemoteException1)
                {
                }
            }
    }

    public int checkPermission(String paramString, int paramInt1, int paramInt2)
    {
        int i = -1;
        if (paramString == null);
        while (true)
        {
            return i;
            i = checkComponentPermission(paramString, paramInt1, UserId.getAppId(paramInt2), i, true);
        }
    }

    public int checkUriPermission(Uri paramUri, int paramInt1, int paramInt2, int paramInt3)
    {
        int i = 0;
        enforceNotIsolatedCaller("checkUriPermission");
        Identity localIdentity = (Identity)sCallerIdentity.get();
        if (localIdentity != null)
        {
            paramInt2 = localIdentity.uid;
            paramInt1 = localIdentity.pid;
        }
        int j = UserId.getAppId(paramInt2);
        if (paramInt1 == MY_PID)
            return i;
        while (true)
        {
            try
            {
                if (checkUriPermissionLocked(paramUri, j, paramInt3))
                    break;
            }
            finally
            {
                localObject = finally;
                throw localObject;
            }
            i = -1;
        }
    }

    // ERROR //
    public boolean clearApplicationUserData(String paramString, android.content.pm.IPackageDataObserver paramIPackageDataObserver, int paramInt)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 4518
        //     4: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     7: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     10: istore 4
        //     12: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     15: istore 5
        //     17: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     20: lstore 6
        //     22: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     25: astore 9
        //     27: bipush 255
        //     29: istore 10
        //     31: aload_0
        //     32: monitorenter
        //     33: aload 9
        //     35: aload_1
        //     36: iload_3
        //     37: invokeinterface 3009 3 0
        //     42: istore 19
        //     44: iload 19
        //     46: istore 10
        //     48: iload 10
        //     50: bipush 255
        //     52: if_icmpne +42 -> 94
        //     55: ldc 221
        //     57: new 598	java/lang/StringBuilder
        //     60: dup
        //     61: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     64: ldc_w 4520
        //     67: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     70: aload_1
        //     71: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     74: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     77: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     80: pop
        //     81: iconst_0
        //     82: istore 14
        //     84: aload_0
        //     85: monitorexit
        //     86: lload 6
        //     88: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     91: iload 14
        //     93: ireturn
        //     94: iload 4
        //     96: iload 10
        //     98: if_icmpeq +20 -> 118
        //     101: aload_0
        //     102: ldc_w 4522
        //     105: iload 5
        //     107: iload 4
        //     109: bipush 255
        //     111: iconst_1
        //     112: invokevirtual 1649	com/android/server/am/ActivityManagerService:checkComponentPermission	(Ljava/lang/String;IIIZ)I
        //     115: ifne +86 -> 201
        //     118: aload_0
        //     119: aload_1
        //     120: iload 10
        //     122: invokespecial 4524	com/android/server/am/ActivityManagerService:forceStopPackageLocked	(Ljava/lang/String;I)V
        //     125: aload_0
        //     126: monitorexit
        //     127: aload 9
        //     129: aload_1
        //     130: aload_2
        //     131: iload_3
        //     132: invokeinterface 4527 4 0
        //     137: new 1353	android/content/Intent
        //     140: dup
        //     141: ldc_w 1825
        //     144: ldc_w 2995
        //     147: aload_1
        //     148: aconst_null
        //     149: invokestatic 2999	android/net/Uri:fromParts	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;
        //     152: invokespecial 3002	android/content/Intent:<init>	(Ljava/lang/String;Landroid/net/Uri;)V
        //     155: astore 15
        //     157: aload 15
        //     159: ldc_w 1654
        //     162: iload 10
        //     164: invokevirtual 3006	android/content/Intent:putExtra	(Ljava/lang/String;I)Landroid/content/Intent;
        //     167: pop
        //     168: aload_0
        //     169: ldc_w 3899
        //     172: sipush 1000
        //     175: aload 15
        //     177: aconst_null
        //     178: aconst_null
        //     179: iconst_0
        //     180: aconst_null
        //     181: aconst_null
        //     182: aconst_null
        //     183: iconst_0
        //     184: iconst_0
        //     185: iload_3
        //     186: invokevirtual 4529	com/android/server/am/ActivityManagerService:broadcastIntentInPackage	(Ljava/lang/String;ILandroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;ZZI)I
        //     189: pop
        //     190: lload 6
        //     192: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     195: iconst_1
        //     196: istore 14
        //     198: goto -107 -> 91
        //     201: new 1701	java/lang/SecurityException
        //     204: dup
        //     205: new 598	java/lang/StringBuilder
        //     208: dup
        //     209: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     212: iload 5
        //     214: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     217: ldc_w 4531
        //     220: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     223: ldc_w 4522
        //     226: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     229: ldc_w 4533
        //     232: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     235: ldc_w 4535
        //     238: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     241: aload_1
        //     242: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     245: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     248: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     251: athrow
        //     252: astore 12
        //     254: aload_0
        //     255: monitorexit
        //     256: aload 12
        //     258: athrow
        //     259: astore 8
        //     261: lload 6
        //     263: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     266: aload 8
        //     268: athrow
        //     269: astore 11
        //     271: goto -223 -> 48
        //     274: astore 13
        //     276: goto -86 -> 190
        //
        // Exception table:
        //     from	to	target	type
        //     33	44	252	finally
        //     55	86	252	finally
        //     101	127	252	finally
        //     201	256	252	finally
        //     22	33	259	finally
        //     127	190	259	finally
        //     256	259	259	finally
        //     33	44	269	android/os/RemoteException
        //     127	190	274	android/os/RemoteException
    }

    public void closeSystemDialogs(String paramString)
    {
        enforceNotIsolatedCaller("closeSystemDialogs");
        int i = Binder.getCallingUid();
        long l = Binder.clearCallingIdentity();
        try
        {
            closeSystemDialogsLocked(i, paramString);
            Binder.restoreCallingIdentity(l);
            return;
        }
        finally
        {
        }
    }

    void closeSystemDialogsLocked(int paramInt, String paramString)
    {
        Intent localIntent = new Intent("android.intent.action.CLOSE_SYSTEM_DIALOGS");
        localIntent.addFlags(1073741824);
        if (paramString != null)
            localIntent.putExtra("reason", paramString);
        this.mWindowManager.closeSystemDialogs(paramString);
        for (int i = -1 + this.mMainStack.mHistory.size(); i >= 0; i--)
        {
            ActivityRecord localActivityRecord = (ActivityRecord)this.mMainStack.mHistory.get(i);
            if ((0x100 & localActivityRecord.info.flags) != 0)
                localActivityRecord.stack.finishActivityLocked(localActivityRecord, i, 0, null, "close-sys");
        }
        broadcastIntentLocked(null, null, localIntent, null, null, 0, null, null, null, false, false, -1, paramInt, 0);
    }

    // ERROR //
    ArrayList<ProcessRecord> collectProcesses(PrintWriter paramPrintWriter, int paramInt, String[] paramArrayOfString)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_3
        //     3: ifnull +172 -> 175
        //     6: aload_3
        //     7: arraylength
        //     8: iload_2
        //     9: if_icmple +166 -> 175
        //     12: aload_3
        //     13: iload_2
        //     14: aaload
        //     15: iconst_0
        //     16: invokevirtual 4561	java/lang/String:charAt	(I)C
        //     19: bipush 45
        //     21: if_icmpeq +154 -> 175
        //     24: new 536	java/util/ArrayList
        //     27: dup
        //     28: invokespecial 537	java/util/ArrayList:<init>	()V
        //     31: astore 4
        //     33: bipush 255
        //     35: istore 7
        //     37: aload_3
        //     38: iload_2
        //     39: aaload
        //     40: invokestatic 4564	java/lang/Integer:parseInt	(Ljava/lang/String;)I
        //     43: istore 13
        //     45: iload 13
        //     47: istore 7
        //     49: bipush 255
        //     51: aload_0
        //     52: getfield 582	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
        //     55: invokevirtual 1313	java/util/ArrayList:size	()I
        //     58: iadd
        //     59: istore 9
        //     61: iload 9
        //     63: iflt +70 -> 133
        //     66: aload_0
        //     67: getfield 582	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
        //     70: iload 9
        //     72: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     75: checkcast 982	com/android/server/am/ProcessRecord
        //     78: astore 10
        //     80: aload 10
        //     82: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     85: iload 7
        //     87: if_icmpne +14 -> 101
        //     90: aload 4
        //     92: aload 10
        //     94: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     97: pop
        //     98: goto +104 -> 202
        //     101: aload 10
        //     103: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     106: aload_3
        //     107: iload_2
        //     108: aaload
        //     109: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     112: ifeq +90 -> 202
        //     115: aload 4
        //     117: aload 10
        //     119: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     122: pop
        //     123: goto +79 -> 202
        //     126: astore 6
        //     128: aload_0
        //     129: monitorexit
        //     130: aload 6
        //     132: athrow
        //     133: aload 4
        //     135: invokevirtual 1313	java/util/ArrayList:size	()I
        //     138: ifgt +50 -> 188
        //     141: aload_1
        //     142: new 598	java/lang/StringBuilder
        //     145: dup
        //     146: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     149: ldc_w 4566
        //     152: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     155: aload_3
        //     156: iload_2
        //     157: aaload
        //     158: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     161: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     164: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     167: aconst_null
        //     168: astore 5
        //     170: aload_0
        //     171: monitorexit
        //     172: goto +36 -> 208
        //     175: new 536	java/util/ArrayList
        //     178: dup
        //     179: aload_0
        //     180: getfield 582	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
        //     183: invokespecial 4569	java/util/ArrayList:<init>	(Ljava/util/Collection;)V
        //     186: astore 4
        //     188: aload_0
        //     189: monitorexit
        //     190: aload 4
        //     192: astore 5
        //     194: goto +14 -> 208
        //     197: astore 8
        //     199: goto -150 -> 49
        //     202: iinc 9 255
        //     205: goto -144 -> 61
        //     208: aload 5
        //     210: areturn
        //
        // Exception table:
        //     from	to	target	type
        //     6	33	126	finally
        //     37	45	126	finally
        //     49	130	126	finally
        //     133	190	126	finally
        //     37	45	197	java/lang/NumberFormatException
    }

    CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo paramApplicationInfo)
    {
        return this.mCompatModePackages.compatibilityInfoForPackageLocked(paramApplicationInfo);
    }

    public void crashApplication(int paramInt1, int paramInt2, String paramString1, String paramString2)
    {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0)
        {
            String str = "Permission Denial: crashApplication() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
            Slog.w("ActivityManager", str);
            throw new SecurityException(str);
        }
        Object localObject1 = null;
        while (true)
        {
            int i;
            try
            {
                SparseArray localSparseArray = this.mPidsSelfLocked;
                i = 0;
                try
                {
                    ProcessRecord localProcessRecord;
                    if (i < this.mPidsSelfLocked.size())
                    {
                        localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.valueAt(i);
                        if (localProcessRecord.uid != paramInt1)
                            break label325;
                        if (localProcessRecord.pid == paramInt2)
                            localObject1 = localProcessRecord;
                    }
                    else
                    {
                        if (localObject1 != null)
                            break label260;
                        Slog.w("ActivityManager", "crashApplication: nothing for uid=" + paramInt1 + " initialPid=" + paramInt2 + " packageName=" + paramString1);
                        return;
                    }
                    Iterator localIterator = localProcessRecord.pkgList.iterator();
                    if (!localIterator.hasNext())
                        break label325;
                    if (!((String)localIterator.next()).equals(paramString1))
                        continue;
                    localObject1 = localProcessRecord;
                    continue;
                }
                finally
                {
                }
            }
            finally
            {
            }
            label260: long l;
            if (localObject1.thread != null)
            {
                if (localObject1.pid == Process.myPid())
                    Log.w("ActivityManager", "crashApplication: trying to crash self!");
                else
                    l = Binder.clearCallingIdentity();
            }
            else
            {
                try
                {
                    localObject1.thread.scheduleCrash(paramString2);
                    label310: Binder.restoreCallingIdentity(l);
                }
                catch (RemoteException localRemoteException)
                {
                    break label310;
                }
                label325: i++;
            }
        }
    }

    Intent createAppErrorIntentLocked(ProcessRecord paramProcessRecord, long paramLong, ApplicationErrorReport.CrashInfo paramCrashInfo)
    {
        ApplicationErrorReport localApplicationErrorReport = createAppErrorReportLocked(paramProcessRecord, paramLong, paramCrashInfo);
        Intent localIntent;
        if (localApplicationErrorReport == null)
            localIntent = null;
        while (true)
        {
            return localIntent;
            localIntent = new Intent("android.intent.action.APP_ERROR");
            localIntent.setComponent(paramProcessRecord.errorReportReceiver);
            localIntent.putExtra("android.intent.extra.BUG_REPORT", localApplicationErrorReport);
            localIntent.addFlags(268435456);
        }
    }

    boolean decProviderCountLocked(ContentProviderConnection paramContentProviderConnection, ContentProviderRecord paramContentProviderRecord, IBinder paramIBinder, boolean paramBoolean)
    {
        boolean bool = false;
        if (paramContentProviderConnection != null)
        {
            ContentProviderRecord localContentProviderRecord = paramContentProviderConnection.provider;
            if (paramBoolean)
            {
                paramContentProviderConnection.stableCount = (-1 + paramContentProviderConnection.stableCount);
                if ((paramContentProviderConnection.stableCount == 0) && (paramContentProviderConnection.unstableCount == 0))
                {
                    localContentProviderRecord.connections.remove(paramContentProviderConnection);
                    paramContentProviderConnection.client.conProviders.remove(paramContentProviderConnection);
                    bool = true;
                }
            }
        }
        while (true)
        {
            return bool;
            paramContentProviderConnection.unstableCount = (-1 + paramContentProviderConnection.unstableCount);
            break;
            paramContentProviderRecord.removeExternalProcessHandleLocked(paramIBinder);
        }
    }

    public void dismissKeyguardOnNextActivity()
    {
        enforceNotIsolatedCaller("dismissKeyguardOnNextActivity");
        long l = Binder.clearCallingIdentity();
        try
        {
            try
            {
                if (this.mLockScreenShown)
                {
                    this.mLockScreenShown = false;
                    comeOutOfSleepIfNeededLocked();
                }
                this.mMainStack.dismissKeyguardOnNextActivityLocked();
                return;
            }
            finally
            {
            }
        }
        finally
        {
            Binder.restoreCallingIdentity(l);
        }
    }

    final void doPendingActivityLaunchesLocked(boolean paramBoolean)
    {
        int i = this.mPendingActivityLaunches.size();
        if (i <= 0);
        while (true)
        {
            return;
            int j = 0;
            if (j < i)
            {
                PendingActivityLaunch localPendingActivityLaunch = (PendingActivityLaunch)this.mPendingActivityLaunches.get(j);
                ActivityStack localActivityStack = this.mMainStack;
                ActivityRecord localActivityRecord1 = localPendingActivityLaunch.r;
                ActivityRecord localActivityRecord2 = localPendingActivityLaunch.sourceRecord;
                int k = localPendingActivityLaunch.startFlags;
                if ((paramBoolean) && (j == i - 1));
                for (boolean bool = true; ; bool = false)
                {
                    localActivityStack.startActivityUncheckedLocked(localActivityRecord1, localActivityRecord2, k, bool, null);
                    j++;
                    break;
                }
            }
            this.mPendingActivityLaunches.clear();
        }
    }

    protected void dump(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
    {
        if (checkCallingPermission("android.permission.DUMP") != 0)
            paramPrintWriter.println("Permission Denial: can't dump ActivityManager from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " without permission " + "android.permission.DUMP");
        while (true)
        {
            return;
            boolean bool1 = false;
            boolean bool2 = false;
            String str1 = null;
            int i = 0;
            label73: String str8;
            long l;
            int j;
            String str2;
            String[] arrayOfString2;
            if (i < paramArrayOfString.length)
            {
                str8 = paramArrayOfString[i];
                if ((str8 != null) && (str8.length() > 0) && (str8.charAt(0) == '-'));
            }
            else
            {
                l = Binder.clearCallingIdentity();
                j = 0;
                if (i >= paramArrayOfString.length)
                    break label1332;
                str2 = paramArrayOfString[i];
                i++;
                if ((!"activities".equals(str2)) && (!"a".equals(str2)))
                    break label430;
                arrayOfString2 = paramArrayOfString;
            }
            while (true)
            {
                try
                {
                    dumpActivitiesLocked(paramFileDescriptor, paramPrintWriter, arrayOfString2, i, true, bool2, null);
                    if (j != 0)
                        break label1332;
                    Binder.restoreCallingIdentity(l);
                    break;
                    i++;
                    if ("-a".equals(str8))
                    {
                        bool1 = true;
                        break label73;
                    }
                    if ("-c".equals(str8))
                    {
                        bool2 = true;
                        break label73;
                    }
                    if ("-h".equals(str8))
                    {
                        paramPrintWriter.println("Activity manager dump options:");
                        paramPrintWriter.println("    [-a] [-c] [-h] [cmd] ...");
                        paramPrintWriter.println("    cmd may be one of:");
                        paramPrintWriter.println("        a[ctivities]: activity stack state");
                        paramPrintWriter.println("        b[roadcasts] [PACKAGE_NAME]: broadcast state");
                        paramPrintWriter.println("        i[ntents] [PACKAGE_NAME]: pending intent state");
                        paramPrintWriter.println("        p[rocesses] [PACKAGE_NAME]: process state");
                        paramPrintWriter.println("        o[om]: out of memory management");
                        paramPrintWriter.println("        prov[iders] [COMP_SPEC ...]: content provider state");
                        paramPrintWriter.println("        provider [COMP_SPEC]: provider client-side state");
                        paramPrintWriter.println("        s[ervices] [COMP_SPEC ...]: service state");
                        paramPrintWriter.println("        service [COMP_SPEC]: service client-side state");
                        paramPrintWriter.println("        package [PACKAGE_NAME]: all state related to given package");
                        paramPrintWriter.println("        all: dump all activities");
                        paramPrintWriter.println("        top: dump the top activity");
                        paramPrintWriter.println("    cmd may also be a COMP_SPEC to dump activities.");
                        paramPrintWriter.println("    COMP_SPEC may be a component name (com.foo/.myApp),");
                        paramPrintWriter.println("        a partial substring in a component name, a");
                        paramPrintWriter.println("        hex object identifier.");
                        paramPrintWriter.println("    -a: include all available server state.");
                        paramPrintWriter.println("    -c: include client state.");
                        break;
                    }
                    paramPrintWriter.println("Unknown argument: " + str8 + "; use -h for help");
                    break label73;
                }
                finally
                {
                }
                label430: if (("broadcasts".equals(str2)) || ("b".equals(str2)))
                {
                    String str3;
                    if (i >= paramArrayOfString.length)
                        str3 = null;
                    while (true)
                    {
                        while (true)
                        {
                            String[] arrayOfString4 = paramArrayOfString;
                            int n = i;
                            try
                            {
                                dumpBroadcastsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString4, n, true, str3);
                                break;
                            }
                            finally
                            {
                                localObject3 = finally;
                                throw localObject3;
                            }
                        }
                        str3 = paramArrayOfString[i];
                        i++;
                        String[] arrayOfString3 = new String[paramArrayOfString.length - i];
                        if (paramArrayOfString.length > 2)
                        {
                            int m = paramArrayOfString.length - i;
                            System.arraycopy(paramArrayOfString, i, arrayOfString3, 0, m);
                        }
                    }
                }
                if (("intents".equals(str2)) || ("i".equals(str2)))
                {
                    String str4;
                    if (i >= paramArrayOfString.length)
                        str4 = null;
                    while (true)
                    {
                        while (true)
                        {
                            String[] arrayOfString6 = paramArrayOfString;
                            int i2 = i;
                            try
                            {
                                dumpPendingIntentsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString6, i2, true, str4);
                                break;
                            }
                            finally
                            {
                                localObject4 = finally;
                                throw localObject4;
                            }
                        }
                        str4 = paramArrayOfString[i];
                        i++;
                        String[] arrayOfString5 = new String[paramArrayOfString.length - i];
                        if (paramArrayOfString.length > 2)
                        {
                            int i1 = paramArrayOfString.length - i;
                            System.arraycopy(paramArrayOfString, i, arrayOfString5, 0, i1);
                        }
                    }
                }
                if (("processes".equals(str2)) || ("p".equals(str2)))
                {
                    String str5;
                    if (i >= paramArrayOfString.length)
                        str5 = null;
                    while (true)
                    {
                        while (true)
                        {
                            String[] arrayOfString8 = paramArrayOfString;
                            int i4 = i;
                            try
                            {
                                dumpProcessesLocked(paramFileDescriptor, paramPrintWriter, arrayOfString8, i4, true, str5);
                                break;
                            }
                            finally
                            {
                                localObject5 = finally;
                                throw localObject5;
                            }
                        }
                        str5 = paramArrayOfString[i];
                        i++;
                        String[] arrayOfString7 = new String[paramArrayOfString.length - i];
                        if (paramArrayOfString.length > 2)
                        {
                            int i3 = paramArrayOfString.length - i;
                            System.arraycopy(paramArrayOfString, i, arrayOfString7, 0, i3);
                        }
                    }
                }
                if (("oom".equals(str2)) || ("o".equals(str2)))
                {
                    String[] arrayOfString9 = paramArrayOfString;
                    try
                    {
                        dumpOomLocked(paramFileDescriptor, paramPrintWriter, arrayOfString9, i, true);
                        continue;
                    }
                    finally
                    {
                        localObject6 = finally;
                        throw localObject6;
                    }
                }
                else if ("provider".equals(str2))
                {
                    String str7;
                    String[] arrayOfString14;
                    if (i >= paramArrayOfString.length)
                    {
                        str7 = null;
                        arrayOfString14 = EMPTY_STRING_ARRAY;
                    }
                    while (true)
                    {
                        if (dumpProvider(paramFileDescriptor, paramPrintWriter, str7, arrayOfString14, 0, bool1))
                            break label953;
                        paramPrintWriter.println("No providers match: " + str7);
                        paramPrintWriter.println("Use -h for help.");
                        break;
                        str7 = paramArrayOfString[i];
                        i++;
                        arrayOfString14 = new String[paramArrayOfString.length - i];
                        if (paramArrayOfString.length > 2)
                        {
                            int i9 = paramArrayOfString.length - i;
                            System.arraycopy(paramArrayOfString, i, arrayOfString14, 0, i9);
                        }
                    }
                }
                else
                {
                    label953: if (("providers".equals(str2)) || ("prov".equals(str2)))
                    {
                        String[] arrayOfString10 = paramArrayOfString;
                        int i5 = i;
                        try
                        {
                            dumpProvidersLocked(paramFileDescriptor, paramPrintWriter, arrayOfString10, i5, true, null);
                            continue;
                        }
                        finally
                        {
                            localObject7 = finally;
                            throw localObject7;
                        }
                    }
                    else if ("service".equals(str2))
                    {
                        String str6;
                        String[] arrayOfString13;
                        if (i >= paramArrayOfString.length)
                        {
                            str6 = null;
                            arrayOfString13 = EMPTY_STRING_ARRAY;
                        }
                        while (true)
                        {
                            if (dumpService(paramFileDescriptor, paramPrintWriter, str6, arrayOfString13, 0, bool1))
                                break label1132;
                            paramPrintWriter.println("No services match: " + str6);
                            paramPrintWriter.println("Use -h for help.");
                            break;
                            str6 = paramArrayOfString[i];
                            i++;
                            arrayOfString13 = new String[paramArrayOfString.length - i];
                            if (paramArrayOfString.length > 2)
                            {
                                int i8 = paramArrayOfString.length - i;
                                System.arraycopy(paramArrayOfString, i, arrayOfString13, 0, i8);
                            }
                        }
                    }
                    else
                    {
                        label1132: if ("package".equals(str2))
                        {
                            if (i >= paramArrayOfString.length)
                            {
                                paramPrintWriter.println("package: no package name specified");
                                paramPrintWriter.println("Use -h for help.");
                            }
                            else
                            {
                                str1 = paramArrayOfString[i];
                                int i6 = i + 1;
                                String[] arrayOfString12 = new String[paramArrayOfString.length - i6];
                                if (paramArrayOfString.length > 2)
                                {
                                    int i7 = paramArrayOfString.length - i6;
                                    System.arraycopy(paramArrayOfString, i6, arrayOfString12, 0, i7);
                                }
                                paramArrayOfString = arrayOfString12;
                                i = 0;
                                j = 1;
                            }
                        }
                        else if (("services".equals(str2)) || ("s".equals(str2)))
                        {
                            String[] arrayOfString11 = paramArrayOfString;
                            try
                            {
                                dumpServicesLocked(paramFileDescriptor, paramPrintWriter, arrayOfString11, i, true, bool2, null);
                                continue;
                            }
                            finally
                            {
                                localObject8 = finally;
                                throw localObject8;
                            }
                        }
                        else if (!dumpActivity(paramFileDescriptor, paramPrintWriter, str2, paramArrayOfString, i, bool1))
                        {
                            paramPrintWriter.println("Bad activity command, or no activities match: " + str2);
                            paramPrintWriter.println("Use -h for help.");
                        }
                    }
                }
            }
            label1332: String[] arrayOfString1 = paramArrayOfString;
            int k = i;
            boolean bool3 = bool1;
            try
            {
                if (dumpPendingIntentsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString1, k, bool3, str1))
                    paramPrintWriter.println(" ");
                if (bool1)
                    paramPrintWriter.println("-------------------------------------------------------------------------------");
                if (dumpBroadcastsLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, i, bool1, str1))
                    paramPrintWriter.println(" ");
                if (bool1)
                    paramPrintWriter.println("-------------------------------------------------------------------------------");
                if (dumpProvidersLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, i, bool1, str1))
                    paramPrintWriter.println(" ");
                if (bool1)
                    paramPrintWriter.println("-------------------------------------------------------------------------------");
                if (dumpServicesLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, i, bool1, bool2, str1))
                    paramPrintWriter.println(" ");
                if (bool1)
                    paramPrintWriter.println("-------------------------------------------------------------------------------");
                if (dumpActivitiesLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, i, bool1, bool2, str1))
                    paramPrintWriter.println(" ");
                if (bool1)
                    paramPrintWriter.println("-------------------------------------------------------------------------------");
                dumpProcessesLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, i, bool1, str1);
                Binder.restoreCallingIdentity(l);
            }
            finally
            {
            }
        }
    }

    boolean dumpActivitiesLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean1, boolean paramBoolean2, String paramString)
    {
        paramPrintWriter.println("ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)");
        paramPrintWriter.println("    Main stack:");
        ArrayList localArrayList1 = this.mMainStack.mHistory;
        boolean bool1;
        boolean bool2;
        label82: boolean bool6;
        label145: boolean bool5;
        label208: boolean bool4;
        label271: boolean bool3;
        label334: int j;
        label585: TaskRecord localTaskRecord;
        if (!paramBoolean1)
        {
            bool1 = true;
            dumpHistoryList(paramFileDescriptor, paramPrintWriter, localArrayList1, "    ", "Hist", true, bool1, paramBoolean2, paramString);
            paramPrintWriter.println(" ");
            paramPrintWriter.println("    Running activities (most recent first):");
            ArrayList localArrayList2 = this.mMainStack.mLRUActivities;
            if (paramBoolean1)
                break label644;
            bool2 = true;
            dumpHistoryList(paramFileDescriptor, paramPrintWriter, localArrayList2, "    ", "Run", false, bool2, false, paramString);
            if (this.mMainStack.mWaitingVisibleActivities.size() > 0)
            {
                paramPrintWriter.println(" ");
                paramPrintWriter.println("    Activities waiting for another to become visible:");
                ArrayList localArrayList6 = this.mMainStack.mWaitingVisibleActivities;
                if (paramBoolean1)
                    break label650;
                bool6 = true;
                dumpHistoryList(paramFileDescriptor, paramPrintWriter, localArrayList6, "    ", "Wait", false, bool6, false, paramString);
            }
            if (this.mMainStack.mStoppingActivities.size() > 0)
            {
                paramPrintWriter.println(" ");
                paramPrintWriter.println("    Activities waiting to stop:");
                ArrayList localArrayList5 = this.mMainStack.mStoppingActivities;
                if (paramBoolean1)
                    break label656;
                bool5 = true;
                dumpHistoryList(paramFileDescriptor, paramPrintWriter, localArrayList5, "    ", "Stop", false, bool5, false, paramString);
            }
            if (this.mMainStack.mGoingToSleepActivities.size() > 0)
            {
                paramPrintWriter.println(" ");
                paramPrintWriter.println("    Activities waiting to sleep:");
                ArrayList localArrayList4 = this.mMainStack.mGoingToSleepActivities;
                if (paramBoolean1)
                    break label662;
                bool4 = true;
                dumpHistoryList(paramFileDescriptor, paramPrintWriter, localArrayList4, "    ", "Sleep", false, bool4, false, paramString);
            }
            if (this.mMainStack.mFinishingActivities.size() > 0)
            {
                paramPrintWriter.println(" ");
                paramPrintWriter.println("    Activities waiting to finish:");
                ArrayList localArrayList3 = this.mMainStack.mFinishingActivities;
                if (paramBoolean1)
                    break label668;
                bool3 = true;
                dumpHistoryList(paramFileDescriptor, paramPrintWriter, localArrayList3, "    ", "Fin", false, bool3, false, paramString);
            }
            paramPrintWriter.println(" ");
            if (this.mMainStack.mPausingActivity != null)
                paramPrintWriter.println("    mPausingActivity: " + this.mMainStack.mPausingActivity);
            paramPrintWriter.println("    mResumedActivity: " + this.mMainStack.mResumedActivity);
            paramPrintWriter.println("    mFocusedActivity: " + this.mFocusedActivity);
            if (paramBoolean1)
            {
                paramPrintWriter.println("    mLastPausedActivity: " + this.mMainStack.mLastPausedActivity);
                paramPrintWriter.println("    mSleepTimeout: " + this.mMainStack.mSleepTimeout);
                paramPrintWriter.println("    mDismissKeyguardOnNextActivity: " + this.mMainStack.mDismissKeyguardOnNextActivity);
            }
            if (this.mRecentTasks.size() <= 0)
                break label727;
            paramPrintWriter.println();
            paramPrintWriter.println("    Recent tasks:");
            int i = this.mRecentTasks.size();
            j = 0;
            if (j >= i)
                break label727;
            localTaskRecord = (TaskRecord)this.mRecentTasks.get(j);
            if ((paramString == null) || ((localTaskRecord.realActivity != null) && (paramString.equals(localTaskRecord.realActivity))))
                break label674;
        }
        while (true)
        {
            j++;
            break label585;
            bool1 = false;
            break;
            label644: bool2 = false;
            break label82;
            label650: bool6 = false;
            break label145;
            label656: bool5 = false;
            break label208;
            label662: bool4 = false;
            break label271;
            label668: bool3 = false;
            break label334;
            label674: paramPrintWriter.print("    * Recent #");
            paramPrintWriter.print(j);
            paramPrintWriter.print(": ");
            paramPrintWriter.println(localTaskRecord);
            if (paramBoolean1)
                ((TaskRecord)this.mRecentTasks.get(j)).dump(paramPrintWriter, "        ");
        }
        label727: if (paramBoolean1)
        {
            paramPrintWriter.println(" ");
            paramPrintWriter.println("    mCurTask: " + this.mCurTask);
        }
        return true;
    }

    // ERROR //
    protected boolean dumpActivity(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String paramString, String[] paramArrayOfString, int paramInt, boolean paramBoolean)
    {
        // Byte code:
        //     0: new 536	java/util/ArrayList
        //     3: dup
        //     4: invokespecial 537	java/util/ArrayList:<init>	()V
        //     7: astore 7
        //     9: ldc_w 4825
        //     12: aload_3
        //     13: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     16: ifeq +69 -> 85
        //     19: aload_0
        //     20: monitorenter
        //     21: aload_0
        //     22: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     25: getfield 2934	com/android/server/am/ActivityStack:mHistory	Ljava/util/ArrayList;
        //     28: invokevirtual 3241	java/util/ArrayList:iterator	()Ljava/util/Iterator;
        //     31: astore 24
        //     33: aload 24
        //     35: invokeinterface 1016 1 0
        //     40: ifeq +29 -> 69
        //     43: aload 7
        //     45: aload 24
        //     47: invokeinterface 1020 1 0
        //     52: checkcast 1290	com/android/server/am/ActivityRecord
        //     55: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     58: pop
        //     59: goto -26 -> 33
        //     62: astore 23
        //     64: aload_0
        //     65: monitorexit
        //     66: aload 23
        //     68: athrow
        //     69: aload_0
        //     70: monitorexit
        //     71: aload 7
        //     73: invokevirtual 1313	java/util/ArrayList:size	()I
        //     76: ifgt +165 -> 241
        //     79: iconst_0
        //     80: istore 15
        //     82: iload 15
        //     84: ireturn
        //     85: ldc_w 4827
        //     88: aload_3
        //     89: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     92: ifeq +57 -> 149
        //     95: aload_0
        //     96: monitorenter
        //     97: aload_0
        //     98: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     101: getfield 2934	com/android/server/am/ActivityStack:mHistory	Ljava/util/ArrayList;
        //     104: invokevirtual 1313	java/util/ArrayList:size	()I
        //     107: istore 21
        //     109: iload 21
        //     111: ifle +26 -> 137
        //     114: aload 7
        //     116: aload_0
        //     117: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     120: getfield 2934	com/android/server/am/ActivityStack:mHistory	Ljava/util/ArrayList;
        //     123: iload 21
        //     125: iconst_1
        //     126: isub
        //     127: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     130: checkcast 1290	com/android/server/am/ActivityRecord
        //     133: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     136: pop
        //     137: aload_0
        //     138: monitorexit
        //     139: goto -68 -> 71
        //     142: astore 20
        //     144: aload_0
        //     145: monitorexit
        //     146: aload 20
        //     148: athrow
        //     149: new 50	com/android/server/am/ActivityManagerService$ItemMatcher
        //     152: dup
        //     153: invokespecial 4828	com/android/server/am/ActivityManagerService$ItemMatcher:<init>	()V
        //     156: astore 8
        //     158: aload 8
        //     160: aload_3
        //     161: invokevirtual 4831	com/android/server/am/ActivityManagerService$ItemMatcher:build	(Ljava/lang/String;)V
        //     164: aload_0
        //     165: monitorenter
        //     166: aload_0
        //     167: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     170: getfield 2934	com/android/server/am/ActivityStack:mHistory	Ljava/util/ArrayList;
        //     173: invokevirtual 3241	java/util/ArrayList:iterator	()Ljava/util/Iterator;
        //     176: astore 10
        //     178: aload 10
        //     180: invokeinterface 1016 1 0
        //     185: ifeq +51 -> 236
        //     188: aload 10
        //     190: invokeinterface 1020 1 0
        //     195: checkcast 1290	com/android/server/am/ActivityRecord
        //     198: astore 18
        //     200: aload 8
        //     202: aload 18
        //     204: aload 18
        //     206: getfield 1351	com/android/server/am/ActivityRecord:intent	Landroid/content/Intent;
        //     209: invokevirtual 1357	android/content/Intent:getComponent	()Landroid/content/ComponentName;
        //     212: invokevirtual 4834	com/android/server/am/ActivityManagerService$ItemMatcher:match	(Ljava/lang/Object;Landroid/content/ComponentName;)Z
        //     215: ifeq -37 -> 178
        //     218: aload 7
        //     220: aload 18
        //     222: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     225: pop
        //     226: goto -48 -> 178
        //     229: astore 9
        //     231: aload_0
        //     232: monitorexit
        //     233: aload 9
        //     235: athrow
        //     236: aload_0
        //     237: monitorexit
        //     238: goto -167 -> 71
        //     241: aload 4
        //     243: arraylength
        //     244: iload 5
        //     246: isub
        //     247: anewarray 428	java/lang/String
        //     250: astore 11
        //     252: aload 4
        //     254: arraylength
        //     255: iconst_2
        //     256: if_icmple +19 -> 275
        //     259: aload 4
        //     261: iload 5
        //     263: aload 11
        //     265: iconst_0
        //     266: aload 4
        //     268: arraylength
        //     269: iload 5
        //     271: isub
        //     272: invokestatic 3939	java/lang/System:arraycopy	(Ljava/lang/Object;ILjava/lang/Object;II)V
        //     275: aconst_null
        //     276: astore 12
        //     278: iconst_0
        //     279: istore 13
        //     281: bipush 255
        //     283: aload 7
        //     285: invokevirtual 1313	java/util/ArrayList:size	()I
        //     288: iadd
        //     289: istore 14
        //     291: iload 14
        //     293: iflt +130 -> 423
        //     296: aload 7
        //     298: iload 14
        //     300: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     303: checkcast 1290	com/android/server/am/ActivityRecord
        //     306: astore 16
        //     308: iload 13
        //     310: ifeq +7 -> 317
        //     313: aload_2
        //     314: invokevirtual 4814	java/io/PrintWriter:println	()V
        //     317: iconst_1
        //     318: istore 13
        //     320: aload_0
        //     321: monitorenter
        //     322: aload 12
        //     324: aload 16
        //     326: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     329: if_acmpeq +56 -> 385
        //     332: aload 16
        //     334: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     337: astore 12
        //     339: aload_2
        //     340: ldc_w 4836
        //     343: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     346: aload_2
        //     347: aload 12
        //     349: getfield 2937	com/android/server/am/TaskRecord:affinity	Ljava/lang/String;
        //     352: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     355: aload_2
        //     356: ldc_w 4838
        //     359: invokevirtual 2551	java/io/PrintWriter:print	(Ljava/lang/String;)V
        //     362: aload_2
        //     363: aload 12
        //     365: getfield 3276	com/android/server/am/TaskRecord:taskId	I
        //     368: invokevirtual 2566	java/io/PrintWriter:println	(I)V
        //     371: iload 6
        //     373: ifeq +12 -> 385
        //     376: aload 12
        //     378: aload_2
        //     379: ldc_w 1873
        //     382: invokevirtual 2623	com/android/server/am/TaskRecord:dump	(Ljava/io/PrintWriter;Ljava/lang/String;)V
        //     385: aload_0
        //     386: monitorexit
        //     387: aload_0
        //     388: ldc_w 1873
        //     391: aload_1
        //     392: aload_2
        //     393: aload 7
        //     395: iload 14
        //     397: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     400: checkcast 1290	com/android/server/am/ActivityRecord
        //     403: aload 11
        //     405: iload 6
        //     407: invokespecial 4840	com/android/server/am/ActivityManagerService:dumpActivity	(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;Lcom/android/server/am/ActivityRecord;[Ljava/lang/String;Z)V
        //     410: iinc 14 255
        //     413: goto -122 -> 291
        //     416: astore 17
        //     418: aload_0
        //     419: monitorexit
        //     420: aload 17
        //     422: athrow
        //     423: iconst_1
        //     424: istore 15
        //     426: goto -344 -> 82
        //
        // Exception table:
        //     from	to	target	type
        //     21	66	62	finally
        //     69	71	62	finally
        //     97	146	142	finally
        //     166	233	229	finally
        //     236	238	229	finally
        //     322	387	416	finally
        //     418	420	416	finally
    }

    final void dumpApplicationMemoryUsage(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter1, String paramString, String[] paramArrayOfString, boolean paramBoolean, PrintWriter paramPrintWriter2, StringBuilder paramStringBuilder1, StringBuilder paramStringBuilder2)
    {
        boolean bool1 = false;
        int i = 0;
        int j = 0;
        int k = paramArrayOfString.length;
        String str3;
        ArrayList localArrayList1;
        if (j < k)
        {
            str3 = paramArrayOfString[j];
            if ((str3 != null) && (str3.length() > 0) && (str3.charAt(0) == '-'));
        }
        else
        {
            localArrayList1 = collectProcesses(paramPrintWriter1, j, paramArrayOfString);
            if (localArrayList1 != null)
                break label189;
        }
        label155: label189: boolean bool2;
        ArrayList localArrayList2;
        long l3;
        long l4;
        long l5;
        long[] arrayOfLong1;
        long[] arrayOfLong2;
        ArrayList[] arrayOfArrayList;
        long l6;
        label705: label727: 
        do
        {
            while (true)
            {
                return;
                j++;
                if ("-a".equals(str3))
                {
                    bool1 = true;
                    break;
                }
                if ("--oom".equals(str3))
                {
                    i = 1;
                    break;
                }
                if (!"-h".equals(str3))
                    break label155;
                paramPrintWriter1.println("meminfo dump options: [-a] [--oom] [process]");
                paramPrintWriter1.println("    -a: include all available information for each process.");
                paramPrintWriter1.println("    --oom: only show processes organized by oom adj.");
                paramPrintWriter1.println("If [process] is specified it can be the name or ");
                paramPrintWriter1.println("pid of a specific process to dump.");
            }
            paramPrintWriter1.println("Unknown argument: " + str3 + "; use -h for help");
            break;
            bool2 = scanArgs(paramArrayOfString, "--checkin");
            long l1 = SystemClock.uptimeMillis();
            long l2 = SystemClock.elapsedRealtime();
            if ((localArrayList1.size() == 1) || (bool2))
                bool1 = true;
            String[] arrayOfString;
            int n;
            ProcessRecord localProcessRecord;
            Object localObject;
            if (bool2)
            {
                paramPrintWriter1.println(l1 + "," + l2);
                paramPrintWriter1.flush();
                arrayOfString = new String[paramArrayOfString.length - j];
                int m = paramArrayOfString.length - j;
                System.arraycopy(paramArrayOfString, j, arrayOfString, 0, m);
                localArrayList2 = new ArrayList();
                l3 = 0L;
                l4 = 0L;
                l5 = 0L;
                arrayOfLong1 = new long[9];
                arrayOfLong2 = new long[DUMP_MEM_OOM_LABEL.length];
                arrayOfArrayList = (ArrayList[])new ArrayList[DUMP_MEM_OOM_LABEL.length];
                l6 = 0L;
                n = -1 + localArrayList1.size();
                if (n < 0)
                    continue;
                localProcessRecord = (ProcessRecord)localArrayList1.get(n);
                if (localProcessRecord.thread == null)
                    break label815;
                if ((!bool2) && (bool1))
                {
                    paramPrintWriter1.println("\n** MEMINFO in pid " + localProcessRecord.pid + " [" + localProcessRecord.processName + "] **");
                    paramPrintWriter1.flush();
                }
                localObject = null;
                if (!bool1)
                    break label705;
            }
            long l11;
            MemItem localMemItem4;
            while (true)
            {
                try
                {
                    Debug.MemoryInfo localMemoryInfo = localProcessRecord.thread.dumpMemInfo(paramFileDescriptor, bool2, bool1, arrayOfString);
                    localObject = localMemoryInfo;
                    if ((bool2) || (localObject == null))
                        break label815;
                    l11 = ((Debug.MemoryInfo)localObject).getTotalPss();
                    l6 += l11;
                    localMemItem4 = new MemItem(localProcessRecord.processName + " (pid " + localProcessRecord.pid + ")", localProcessRecord.processName, l11, 0);
                    localArrayList2.add(localMemItem4);
                    l3 += ((Debug.MemoryInfo)localObject).nativePss;
                    l4 += ((Debug.MemoryInfo)localObject).dalvikPss;
                    l5 += ((Debug.MemoryInfo)localObject).otherPss;
                    int i11 = 0;
                    if (i11 >= 9)
                        break label727;
                    long l12 = ((Debug.MemoryInfo)localObject).getOtherPss(i11);
                    arrayOfLong1[i11] = (l12 + arrayOfLong1[i11]);
                    l5 -= l12;
                    i11++;
                    continue;
                    paramPrintWriter1.println("Applications Memory Usage (kB):");
                    paramPrintWriter1.println("Uptime: " + l1 + " Realtime: " + l2);
                }
                catch (RemoteException localRemoteException)
                {
                    if (bool2)
                        continue;
                    paramPrintWriter1.println("Got RemoteException!");
                    paramPrintWriter1.flush();
                    continue;
                }
                localObject = new Debug.MemoryInfo();
                Debug.getMemoryInfo(localProcessRecord.pid, (Debug.MemoryInfo)localObject);
            }
            for (int i12 = 0; ; i12++)
            {
                int i13 = arrayOfLong2.length;
                if (i12 < i13)
                {
                    if (localProcessRecord.setAdj > DUMP_MEM_OOM_ADJ[i12])
                    {
                        int i14 = -1 + arrayOfLong2.length;
                        if (i12 != i14);
                    }
                    else
                    {
                        arrayOfLong2[i12] = (l11 + arrayOfLong2[i12]);
                        if (arrayOfArrayList[i12] == null)
                            arrayOfArrayList[i12] = new ArrayList();
                        arrayOfArrayList[i12].add(localMemItem4);
                    }
                }
                else
                {
                    n--;
                    break;
                }
            }
        }
        while ((bool2) || (localArrayList1.size() <= 1));
        label815: ArrayList localArrayList3 = new ArrayList();
        localArrayList3.add(new MemItem("Native", "Native", l3, -1));
        localArrayList3.add(new MemItem("Dalvik", "Dalvik", l4, -2));
        localArrayList3.add(new MemItem("Unknown", "Unknown", l5, -3));
        for (int i1 = 0; i1 < 9; i1++)
        {
            String str2 = Debug.MemoryInfo.getOtherLabel(i1);
            localArrayList3.add(new MemItem(str2, str2, arrayOfLong1[i1], i1));
        }
        ArrayList localArrayList4 = new ArrayList();
        for (int i2 = 0; ; i2++)
        {
            int i3 = arrayOfLong2.length;
            if (i2 >= i3)
                break;
            if (arrayOfLong2[i2] != 0L)
            {
                String str1 = DUMP_MEM_OOM_LABEL[i2];
                MemItem localMemItem3 = new MemItem(str1, str1, arrayOfLong2[i2], DUMP_MEM_OOM_ADJ[i2]);
                localMemItem3.subitems = arrayOfArrayList[i2];
                localArrayList4.add(localMemItem3);
            }
        }
        if ((paramStringBuilder1 != null) || (paramStringBuilder2 != null))
        {
            if (paramStringBuilder1 != null)
                appendMemBucket(paramStringBuilder1, l6, "total", false);
            if (paramStringBuilder2 != null)
                appendMemBucket(paramStringBuilder2, l6, "total", true);
            int i4 = 1;
            int i5 = 0;
            int i6 = localArrayList4.size();
            if (i5 < i6)
            {
                MemItem localMemItem1 = (MemItem)localArrayList4.get(i5);
                if ((localMemItem1.subitems == null) || (localMemItem1.subitems.size() < 1));
                while (true)
                {
                    i5++;
                    break;
                    if ((localMemItem1.id < 5) || (localMemItem1.id == 6) || (localMemItem1.id == 7))
                    {
                        if ((paramStringBuilder1 != null) && (localMemItem1.id <= 0))
                            paramStringBuilder1.append(" / ");
                        if (paramStringBuilder2 != null)
                        {
                            if (localMemItem1.id < 0)
                                break label1370;
                            if (i4 != 0)
                            {
                                paramStringBuilder2.append(":");
                                i4 = 0;
                            }
                            paramStringBuilder2.append("\n\t at ");
                        }
                        while (true)
                        {
                            for (int i7 = 0; ; i7++)
                            {
                                int i8 = localMemItem1.subitems.size();
                                if (i7 >= i8)
                                    break;
                                MemItem localMemItem2 = (MemItem)localMemItem1.subitems.get(i7);
                                if (i7 > 0)
                                {
                                    if (paramStringBuilder1 != null)
                                        paramStringBuilder1.append(" ");
                                    if (paramStringBuilder2 != null)
                                        paramStringBuilder2.append("$");
                                }
                                if ((paramStringBuilder1 != null) && (localMemItem1.id <= 0))
                                    appendMemBucket(paramStringBuilder1, localMemItem2.pss, localMemItem2.shortLabel, false);
                                if (paramStringBuilder2 != null)
                                    appendMemBucket(paramStringBuilder2, localMemItem2.pss, localMemItem2.shortLabel, true);
                            }
                            label1370: paramStringBuilder2.append("$");
                        }
                        if ((paramStringBuilder2 != null) && (localMemItem1.id >= 0))
                        {
                            paramStringBuilder2.append("(");
                            for (int i9 = 0; ; i9++)
                            {
                                int i10 = DUMP_MEM_OOM_ADJ.length;
                                if (i9 >= i10)
                                    break;
                                if (DUMP_MEM_OOM_ADJ[i9] == localMemItem1.id)
                                {
                                    paramStringBuilder2.append(DUMP_MEM_OOM_LABEL[i9]);
                                    paramStringBuilder2.append(":");
                                    paramStringBuilder2.append(DUMP_MEM_OOM_ADJ[i9]);
                                }
                            }
                            paramStringBuilder2.append(")");
                        }
                    }
                }
            }
        }
        if ((!paramBoolean) && (i == 0))
        {
            paramPrintWriter1.println();
            paramPrintWriter1.println("Total PSS by process:");
            dumpMemItems(paramPrintWriter1, "    ", localArrayList2, true);
            paramPrintWriter1.println();
        }
        paramPrintWriter1.println("Total PSS by OOM adjustment:");
        dumpMemItems(paramPrintWriter1, "    ", localArrayList4, false);
        if (i == 0)
            if (paramPrintWriter2 == null)
                break label1808;
        label1808: for (PrintWriter localPrintWriter = paramPrintWriter2; ; localPrintWriter = paramPrintWriter1)
        {
            localPrintWriter.println();
            localPrintWriter.println("Total PSS by category:");
            dumpMemItems(localPrintWriter, "    ", localArrayList3, true);
            paramPrintWriter1.println();
            paramPrintWriter1.print("Total PSS: ");
            paramPrintWriter1.print(l6);
            paramPrintWriter1.println(" kB");
            int[] arrayOfInt = new int[1];
            arrayOfInt[0] = 8224;
            long[] arrayOfLong3 = new long[1];
            Process.readProcFile("/sys/kernel/mm/ksm/pages_shared", arrayOfInt, null, arrayOfLong3, null);
            long l7 = 4096L * arrayOfLong3[0] / 1024L;
            arrayOfLong3[0] = 0L;
            Process.readProcFile("/sys/kernel/mm/ksm/pages_sharing", arrayOfInt, null, arrayOfLong3, null);
            long l8 = 4096L * arrayOfLong3[0] / 1024L;
            arrayOfLong3[0] = 0L;
            Process.readProcFile("/sys/kernel/mm/ksm/pages_unshared", arrayOfInt, null, arrayOfLong3, null);
            long l9 = 4096L * arrayOfLong3[0] / 1024L;
            arrayOfLong3[0] = 0L;
            Process.readProcFile("/sys/kernel/mm/ksm/pages_volatile", arrayOfInt, null, arrayOfLong3, null);
            long l10 = 4096L * arrayOfLong3[0] / 1024L;
            paramPrintWriter1.print("            KSM: ");
            paramPrintWriter1.print(l8);
            paramPrintWriter1.print(" kB saved from shared ");
            paramPrintWriter1.print(l7);
            paramPrintWriter1.println(" kB");
            paramPrintWriter1.print("                     ");
            paramPrintWriter1.print(l9);
            paramPrintWriter1.print(" kB unshared; ");
            paramPrintWriter1.print(l10);
            paramPrintWriter1.println(" kB volatile");
            break;
        }
    }

    boolean dumpBroadcastsLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
    {
        boolean bool1 = false;
        paramPrintWriter.println("ACTIVITY MANAGER BROADCAST STATE (dumpsys activity broadcasts)");
        IntentResolver localIntentResolver;
        if (paramBoolean)
        {
            if (this.mRegisteredReceivers.size() > 0)
            {
                int i2 = 0;
                Iterator localIterator2 = this.mRegisteredReceivers.values().iterator();
                while (localIterator2.hasNext())
                {
                    ReceiverList localReceiverList = (ReceiverList)localIterator2.next();
                    if ((paramString == null) || ((localReceiverList.app != null) && (paramString.equals(localReceiverList.app.info.packageName))))
                    {
                        if (i2 == 0)
                        {
                            paramPrintWriter.println("    Registered Receivers:");
                            bool1 = true;
                            i2 = 1;
                        }
                        paramPrintWriter.print("    * ");
                        paramPrintWriter.println(localReceiverList);
                        localReceiverList.dump(paramPrintWriter, "        ");
                    }
                }
            }
            localIntentResolver = this.mReceiverResolver;
            if (!bool1)
                break label223;
        }
        label223: for (String str = "\n    Receiver Resolver Table:"; ; str = "    Receiver Resolver Table:")
        {
            if (localIntentResolver.dump(paramPrintWriter, str, "        ", paramString, false))
                bool1 = true;
            BroadcastQueue[] arrayOfBroadcastQueue1 = this.mBroadcastQueues;
            int i = arrayOfBroadcastQueue1.length;
            for (int j = 0; j < i; j++)
                bool1 = arrayOfBroadcastQueue1[j].dumpLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, paramInt, paramBoolean, paramString, bool1);
        }
        boolean bool2 = true;
        if ((this.mStickyBroadcasts != null) && (paramString == null))
        {
            if (bool2)
                paramPrintWriter.println();
            paramPrintWriter.println("    Sticky broadcasts:");
            StringBuilder localStringBuilder = new StringBuilder(128);
            Iterator localIterator1 = this.mStickyBroadcasts.entrySet().iterator();
            while (localIterator1.hasNext())
            {
                Map.Entry localEntry = (Map.Entry)localIterator1.next();
                paramPrintWriter.print("    * Sticky action ");
                paramPrintWriter.print((String)localEntry.getKey());
                if (paramBoolean)
                {
                    paramPrintWriter.println(":");
                    ArrayList localArrayList = (ArrayList)localEntry.getValue();
                    int n = localArrayList.size();
                    for (int i1 = 0; i1 < n; i1++)
                    {
                        localStringBuilder.setLength(0);
                        localStringBuilder.append("        Intent: ");
                        ((Intent)localArrayList.get(i1)).toShortString(localStringBuilder, false, true, false, false);
                        paramPrintWriter.println(localStringBuilder.toString());
                        Bundle localBundle = ((Intent)localArrayList.get(i1)).getExtras();
                        if (localBundle != null)
                        {
                            paramPrintWriter.print("            ");
                            paramPrintWriter.println(localBundle.toString());
                        }
                    }
                }
                else
                {
                    paramPrintWriter.println("");
                }
            }
            bool2 = true;
        }
        if (paramBoolean)
        {
            paramPrintWriter.println();
            for (BroadcastQueue localBroadcastQueue : this.mBroadcastQueues)
                paramPrintWriter.println("    mBroadcastsScheduled [" + localBroadcastQueue.mQueueName + "]=" + localBroadcastQueue.mBroadcastsScheduled);
            paramPrintWriter.println("    mHandler:");
            this.mHandler.dump(new PrintWriterPrinter(paramPrintWriter), "        ");
            bool2 = true;
        }
        return bool2;
    }

    // ERROR //
    final void dumpDbInfo(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
    {
        // Byte code:
        //     0: aload_0
        //     1: aload_2
        //     2: iconst_0
        //     3: aload_3
        //     4: invokevirtual 4844	com/android/server/am/ActivityManagerService:collectProcesses	(Ljava/io/PrintWriter;I[Ljava/lang/String;)Ljava/util/ArrayList;
        //     7: astore 4
        //     9: aload 4
        //     11: ifnonnull +4 -> 15
        //     14: return
        //     15: aload_2
        //     16: ldc_w 5009
        //     19: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     22: bipush 255
        //     24: aload 4
        //     26: invokevirtual 1313	java/util/ArrayList:size	()I
        //     29: iadd
        //     30: istore 5
        //     32: iload 5
        //     34: iflt -20 -> 14
        //     37: aload 4
        //     39: iload 5
        //     41: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     44: checkcast 982	com/android/server/am/ProcessRecord
        //     47: astore 6
        //     49: aload 6
        //     51: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     54: ifnull +172 -> 226
        //     57: aload_2
        //     58: new 598	java/lang/StringBuilder
        //     61: dup
        //     62: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     65: ldc_w 5011
        //     68: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     71: aload 6
        //     73: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     76: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     79: ldc_w 4866
        //     82: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     85: aload 6
        //     87: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     90: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     93: ldc_w 4868
        //     96: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     99: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     102: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     105: aload_2
        //     106: invokevirtual 2573	java/io/PrintWriter:flush	()V
        //     109: new 2575	com/android/server/am/TransferPipe
        //     112: dup
        //     113: invokespecial 2576	com/android/server/am/TransferPipe:<init>	()V
        //     116: astore 7
        //     118: aload 6
        //     120: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     123: aload 7
        //     125: invokevirtual 2579	com/android/server/am/TransferPipe:getWriteFd	()Landroid/os/ParcelFileDescriptor;
        //     128: invokevirtual 2583	android/os/ParcelFileDescriptor:getFileDescriptor	()Ljava/io/FileDescriptor;
        //     131: aload_3
        //     132: invokeinterface 5014 3 0
        //     137: aload 7
        //     139: aload_1
        //     140: invokevirtual 2594	com/android/server/am/TransferPipe:go	(Ljava/io/FileDescriptor;)V
        //     143: aload 7
        //     145: invokevirtual 2597	com/android/server/am/TransferPipe:kill	()V
        //     148: goto +78 -> 226
        //     151: astore 8
        //     153: aload 7
        //     155: invokevirtual 2597	com/android/server/am/TransferPipe:kill	()V
        //     158: aload 8
        //     160: athrow
        //     161: astore 10
        //     163: aload_2
        //     164: new 598	java/lang/StringBuilder
        //     167: dup
        //     168: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     171: ldc_w 5016
        //     174: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     177: aload 6
        //     179: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     182: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     185: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     188: aload_2
        //     189: invokevirtual 2573	java/io/PrintWriter:flush	()V
        //     192: goto +34 -> 226
        //     195: astore 9
        //     197: aload_2
        //     198: new 598	java/lang/StringBuilder
        //     201: dup
        //     202: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     205: ldc_w 5018
        //     208: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     211: aload 6
        //     213: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     216: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     219: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     222: aload_2
        //     223: invokevirtual 2573	java/io/PrintWriter:flush	()V
        //     226: iinc 5 255
        //     229: goto -197 -> 32
        //
        // Exception table:
        //     from	to	target	type
        //     118	143	151	finally
        //     109	118	161	java/io/IOException
        //     143	161	161	java/io/IOException
        //     109	118	195	android/os/RemoteException
        //     143	161	195	android/os/RemoteException
    }

    // ERROR //
    final void dumpGraphicsHardwareUsage(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
    {
        // Byte code:
        //     0: aload_0
        //     1: aload_2
        //     2: iconst_0
        //     3: aload_3
        //     4: invokevirtual 4844	com/android/server/am/ActivityManagerService:collectProcesses	(Ljava/io/PrintWriter;I[Ljava/lang/String;)Ljava/util/ArrayList;
        //     7: astore 4
        //     9: aload 4
        //     11: ifnonnull +4 -> 15
        //     14: return
        //     15: invokestatic 1271	android/os/SystemClock:uptimeMillis	()J
        //     18: lstore 5
        //     20: invokestatic 2691	android/os/SystemClock:elapsedRealtime	()J
        //     23: lstore 7
        //     25: aload_2
        //     26: ldc_w 5021
        //     29: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     32: aload_2
        //     33: new 598	java/lang/StringBuilder
        //     36: dup
        //     37: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     40: ldc_w 4896
        //     43: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     46: lload 5
        //     48: invokevirtual 1062	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
        //     51: ldc_w 4898
        //     54: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     57: lload 7
        //     59: invokevirtual 1062	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
        //     62: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     65: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     68: bipush 255
        //     70: aload 4
        //     72: invokevirtual 1313	java/util/ArrayList:size	()I
        //     75: iadd
        //     76: istore 9
        //     78: iload 9
        //     80: iflt -66 -> 14
        //     83: aload 4
        //     85: iload 9
        //     87: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     90: checkcast 982	com/android/server/am/ProcessRecord
        //     93: astore 10
        //     95: aload 10
        //     97: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     100: ifnull +172 -> 272
        //     103: aload_2
        //     104: new 598	java/lang/StringBuilder
        //     107: dup
        //     108: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     111: ldc_w 5023
        //     114: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     117: aload 10
        //     119: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     122: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     125: ldc_w 4866
        //     128: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     131: aload 10
        //     133: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     136: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     139: ldc_w 4868
        //     142: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     145: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     148: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     151: aload_2
        //     152: invokevirtual 2573	java/io/PrintWriter:flush	()V
        //     155: new 2575	com/android/server/am/TransferPipe
        //     158: dup
        //     159: invokespecial 2576	com/android/server/am/TransferPipe:<init>	()V
        //     162: astore 11
        //     164: aload 10
        //     166: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     169: aload 11
        //     171: invokevirtual 2579	com/android/server/am/TransferPipe:getWriteFd	()Landroid/os/ParcelFileDescriptor;
        //     174: invokevirtual 2583	android/os/ParcelFileDescriptor:getFileDescriptor	()Ljava/io/FileDescriptor;
        //     177: aload_3
        //     178: invokeinterface 5026 3 0
        //     183: aload 11
        //     185: aload_1
        //     186: invokevirtual 2594	com/android/server/am/TransferPipe:go	(Ljava/io/FileDescriptor;)V
        //     189: aload 11
        //     191: invokevirtual 2597	com/android/server/am/TransferPipe:kill	()V
        //     194: goto +78 -> 272
        //     197: astore 12
        //     199: aload 11
        //     201: invokevirtual 2597	com/android/server/am/TransferPipe:kill	()V
        //     204: aload 12
        //     206: athrow
        //     207: astore 14
        //     209: aload_2
        //     210: new 598	java/lang/StringBuilder
        //     213: dup
        //     214: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     217: ldc_w 5016
        //     220: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     223: aload 10
        //     225: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     228: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     231: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     234: aload_2
        //     235: invokevirtual 2573	java/io/PrintWriter:flush	()V
        //     238: goto +34 -> 272
        //     241: astore 13
        //     243: aload_2
        //     244: new 598	java/lang/StringBuilder
        //     247: dup
        //     248: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     251: ldc_w 5018
        //     254: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     257: aload 10
        //     259: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     262: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     265: invokevirtual 2601	java/io/PrintWriter:println	(Ljava/lang/String;)V
        //     268: aload_2
        //     269: invokevirtual 2573	java/io/PrintWriter:flush	()V
        //     272: iinc 9 255
        //     275: goto -197 -> 78
        //
        // Exception table:
        //     from	to	target	type
        //     164	189	197	finally
        //     155	164	207	java/io/IOException
        //     189	207	207	java/io/IOException
        //     155	164	241	android/os/RemoteException
        //     189	207	241	android/os/RemoteException
    }

    // ERROR //
    public boolean dumpHeap(String paramString1, boolean paramBoolean, String paramString2, ParcelFileDescriptor paramParcelFileDescriptor)
        throws RemoteException
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_0
        //     3: ldc_w 5030
        //     6: invokevirtual 4575	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
        //     9: ifeq +49 -> 58
        //     12: new 1701	java/lang/SecurityException
        //     15: dup
        //     16: ldc_w 5032
        //     19: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     22: athrow
        //     23: astore 8
        //     25: aload_0
        //     26: monitorexit
        //     27: aload 8
        //     29: athrow
        //     30: astore 7
        //     32: new 4019	java/lang/IllegalStateException
        //     35: dup
        //     36: ldc_w 4021
        //     39: invokespecial 4022	java/lang/IllegalStateException:<init>	(Ljava/lang/String;)V
        //     42: athrow
        //     43: astore 5
        //     45: aload 4
        //     47: ifnull +8 -> 55
        //     50: aload 4
        //     52: invokevirtual 2202	android/os/ParcelFileDescriptor:close	()V
        //     55: aload 5
        //     57: athrow
        //     58: aload 4
        //     60: ifnonnull +14 -> 74
        //     63: new 1572	java/lang/IllegalArgumentException
        //     66: dup
        //     67: ldc_w 5034
        //     70: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     73: athrow
        //     74: aconst_null
        //     75: astore 9
        //     77: aload_1
        //     78: invokestatic 4564	java/lang/Integer:parseInt	(Ljava/lang/String;)I
        //     81: istore 13
        //     83: aload_0
        //     84: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     87: astore 14
        //     89: aload 14
        //     91: monitorenter
        //     92: aload_0
        //     93: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     96: iload 13
        //     98: invokevirtual 1083	android/util/SparseArray:get	(I)Ljava/lang/Object;
        //     101: checkcast 982	com/android/server/am/ProcessRecord
        //     104: astore 9
        //     106: aload 14
        //     108: monitorexit
        //     109: aload 9
        //     111: ifnonnull +43 -> 154
        //     114: aload_0
        //     115: getfield 557	com/android/server/am/ActivityManagerService:mProcessNames	Lcom/android/server/ProcessMap;
        //     118: invokevirtual 2177	com/android/server/ProcessMap:getMap	()Ljava/util/HashMap;
        //     121: aload_1
        //     122: invokevirtual 1762	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
        //     125: checkcast 559	android/util/SparseArray
        //     128: astore 12
        //     130: aload 12
        //     132: ifnull +22 -> 154
        //     135: aload 12
        //     137: invokevirtual 2178	android/util/SparseArray:size	()I
        //     140: ifle +14 -> 154
        //     143: aload 12
        //     145: iconst_0
        //     146: invokevirtual 2181	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
        //     149: checkcast 982	com/android/server/am/ProcessRecord
        //     152: astore 9
        //     154: aload 9
        //     156: ifnull +11 -> 167
        //     159: aload 9
        //     161: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     164: ifnonnull +44 -> 208
        //     167: new 1572	java/lang/IllegalArgumentException
        //     170: dup
        //     171: new 598	java/lang/StringBuilder
        //     174: dup
        //     175: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     178: ldc_w 5036
        //     181: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     184: aload_1
        //     185: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     188: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     191: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     194: athrow
        //     195: astore 15
        //     197: aload 14
        //     199: monitorexit
        //     200: aload 15
        //     202: athrow
        //     203: astore 10
        //     205: goto -96 -> 109
        //     208: ldc_w 860
        //     211: ldc 218
        //     213: ldc_w 864
        //     216: invokestatic 870	android/os/SystemProperties:get	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //     219: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     222: ifne +45 -> 267
        //     225: iconst_2
        //     226: aload 9
        //     228: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     231: getfield 991	android/content/pm/ApplicationInfo:flags	I
        //     234: iand
        //     235: ifne +32 -> 267
        //     238: new 1701	java/lang/SecurityException
        //     241: dup
        //     242: new 598	java/lang/StringBuilder
        //     245: dup
        //     246: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     249: ldc_w 5038
        //     252: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     255: aload 9
        //     257: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     260: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     263: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     266: athrow
        //     267: aload 9
        //     269: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     272: iload_2
        //     273: aload_3
        //     274: aload 4
        //     276: invokeinterface 5041 4 0
        //     281: aconst_null
        //     282: astore 4
        //     284: aload_0
        //     285: monitorexit
        //     286: iconst_0
        //     287: ifeq +5 -> 292
        //     290: aconst_null
        //     291: athrow
        //     292: iconst_1
        //     293: ireturn
        //     294: astore 6
        //     296: goto -241 -> 55
        //     299: astore 11
        //     301: goto -9 -> 292
        //
        // Exception table:
        //     from	to	target	type
        //     2	27	23	finally
        //     63	74	23	finally
        //     77	92	23	finally
        //     114	195	23	finally
        //     200	203	23	finally
        //     208	286	23	finally
        //     0	2	30	android/os/RemoteException
        //     27	30	30	android/os/RemoteException
        //     0	2	43	finally
        //     27	30	43	finally
        //     32	43	43	finally
        //     92	109	195	finally
        //     197	200	195	finally
        //     77	92	203	java/lang/NumberFormatException
        //     200	203	203	java/lang/NumberFormatException
        //     50	55	294	java/io/IOException
        //     290	292	299	java/io/IOException
    }

    boolean dumpOomLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean)
    {
        boolean bool = false;
        if (this.mLruProcesses.size() > 0)
        {
            if (0 != 0)
                paramPrintWriter.println(" ");
            paramPrintWriter.println("    OOM levels:");
            paramPrintWriter.print("        SYSTEM_ADJ: ");
            paramPrintWriter.println(-16);
            paramPrintWriter.print("        PERSISTENT_PROC_ADJ: ");
            paramPrintWriter.println(-12);
            paramPrintWriter.print("        FOREGROUND_APP_ADJ: ");
            paramPrintWriter.println(0);
            paramPrintWriter.print("        VISIBLE_APP_ADJ: ");
            paramPrintWriter.println(1);
            paramPrintWriter.print("        PERCEPTIBLE_APP_ADJ: ");
            paramPrintWriter.println(2);
            paramPrintWriter.print("        HEAVY_WEIGHT_APP_ADJ: ");
            paramPrintWriter.println(3);
            paramPrintWriter.print("        BACKUP_APP_ADJ: ");
            paramPrintWriter.println(4);
            paramPrintWriter.print("        SERVICE_ADJ: ");
            paramPrintWriter.println(5);
            paramPrintWriter.print("        HOME_APP_ADJ: ");
            paramPrintWriter.println(6);
            paramPrintWriter.print("        PREVIOUS_APP_ADJ: ");
            paramPrintWriter.println(7);
            paramPrintWriter.print("        SERVICE_B_ADJ: ");
            paramPrintWriter.println(8);
            paramPrintWriter.print("        HIDDEN_APP_MIN_ADJ: ");
            paramPrintWriter.println(ProcessList.HIDDEN_APP_MIN_ADJ);
            paramPrintWriter.print("        HIDDEN_APP_MAX_ADJ: ");
            paramPrintWriter.println(15);
            if (1 != 0)
                paramPrintWriter.println(" ");
            paramPrintWriter.println("    Process OOM control:");
            dumpProcessOomList(paramPrintWriter, this, this.mLruProcesses, "        ", "Proc", "PERS", true, null);
            bool = true;
        }
        dumpProcessesToGc(paramFileDescriptor, paramPrintWriter, paramArrayOfString, paramInt, bool, paramBoolean, null);
        paramPrintWriter.println();
        paramPrintWriter.println("    mHomeProcess: " + this.mHomeProcess);
        paramPrintWriter.println("    mPreviousProcess: " + this.mPreviousProcess);
        if (this.mHeavyWeightProcess != null)
            paramPrintWriter.println("    mHeavyWeightProcess: " + this.mHeavyWeightProcess);
        return true;
    }

    boolean dumpPendingIntentsLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
    {
        boolean bool = false;
        if (this.mIntentSenderRecords.size() > 0)
        {
            int i = 0;
            Iterator localIterator = this.mIntentSenderRecords.values().iterator();
            while (localIterator.hasNext())
            {
                WeakReference localWeakReference = (WeakReference)localIterator.next();
                if (localWeakReference != null);
                for (PendingIntentRecord localPendingIntentRecord = (PendingIntentRecord)localWeakReference.get(); ; localPendingIntentRecord = null)
                {
                    if ((paramString != null) && ((localPendingIntentRecord == null) || (!paramString.equals(localPendingIntentRecord.key.packageName))))
                        break label150;
                    if (i == 0)
                    {
                        paramPrintWriter.println("ACTIVITY MANAGER PENDING INTENTS (dumpsys activity intents)");
                        i = 1;
                    }
                    bool = true;
                    if (localPendingIntentRecord == null)
                        break label152;
                    paramPrintWriter.print("    * ");
                    paramPrintWriter.println(localPendingIntentRecord);
                    if (!paramBoolean)
                        break;
                    localPendingIntentRecord.dump(paramPrintWriter, "        ");
                    break;
                }
                label150: continue;
                label152: paramPrintWriter.print("    * ");
                paramPrintWriter.println(localWeakReference);
            }
        }
        return bool;
    }

    boolean dumpProcessesLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
    {
        boolean bool1 = false;
        int i = 0;
        paramPrintWriter.println("ACTIVITY MANAGER RUNNING PROCESSES (dumpsys activity processes)");
        if (paramBoolean)
        {
            Iterator localIterator4 = this.mProcessNames.getMap().values().iterator();
            while (localIterator4.hasNext())
            {
                SparseArray localSparseArray5 = (SparseArray)localIterator4.next();
                int i11 = localSparseArray5.size();
                ProcessRecord localProcessRecord6;
                for (int i12 = 0; i12 < i11; i12++)
                {
                    localProcessRecord6 = (ProcessRecord)localSparseArray5.valueAt(i12);
                    if ((paramString == null) || (paramString.equals(localProcessRecord6.info.packageName)))
                        break label113;
                }
                continue;
                label113: if (!bool1)
                {
                    paramPrintWriter.println("    All known processes:");
                    bool1 = true;
                }
                if (localProcessRecord6.persistent);
                for (String str4 = "    *PERS*"; ; str4 = "    *APP*")
                {
                    paramPrintWriter.print(str4);
                    paramPrintWriter.print(" UID ");
                    paramPrintWriter.print(localSparseArray5.keyAt(i12));
                    paramPrintWriter.print(" ");
                    paramPrintWriter.println(localProcessRecord6);
                    localProcessRecord6.dump(paramPrintWriter, "        ");
                    if (!localProcessRecord6.persistent)
                        break;
                    i++;
                    break;
                }
            }
        }
        if (this.mIsolatedProcesses.size() > 0)
        {
            if (bool1)
                paramPrintWriter.println(" ");
            bool1 = true;
            paramPrintWriter.println("    Isolated process list (sorted by uid):");
            int i10 = 0;
            if (i10 < this.mIsolatedProcesses.size())
            {
                ProcessRecord localProcessRecord5 = (ProcessRecord)this.mIsolatedProcesses.valueAt(i10);
                if ((paramString != null) && (!paramString.equals(localProcessRecord5.info.packageName)));
                while (true)
                {
                    i10++;
                    break;
                    Object[] arrayOfObject = new Object[3];
                    arrayOfObject[0] = "        ";
                    arrayOfObject[1] = Integer.valueOf(i10);
                    arrayOfObject[2] = localProcessRecord5.toString();
                    paramPrintWriter.println(String.format("%sIsolated #%2d: %s", arrayOfObject));
                }
            }
        }
        if (this.mLruProcesses.size() > 0)
        {
            if (bool1)
                paramPrintWriter.println(" ");
            paramPrintWriter.println("    Process LRU list (sorted by oom_adj):");
            dumpProcessOomList(paramPrintWriter, this, this.mLruProcesses, "        ", "Proc", "PERS", false, paramString);
            bool1 = true;
        }
        SparseArray localSparseArray4;
        int i8;
        int i9;
        if (paramBoolean)
        {
            localSparseArray4 = this.mPidsSelfLocked;
            i8 = 0;
            i9 = 0;
        }
        SparseArray localSparseArray3;
        int i6;
        int i7;
        try
        {
            if (i9 < this.mPidsSelfLocked.size())
            {
                ProcessRecord localProcessRecord4 = (ProcessRecord)this.mPidsSelfLocked.valueAt(i9);
                if ((paramString != null) && (!paramString.equals(localProcessRecord4.info.packageName)))
                    break label2478;
                if (i8 == 0)
                {
                    if (bool1)
                        paramPrintWriter.println(" ");
                    bool1 = true;
                    paramPrintWriter.println("    PID mappings:");
                    i8 = 1;
                }
                paramPrintWriter.print("        PID #");
                paramPrintWriter.print(this.mPidsSelfLocked.keyAt(i9));
                paramPrintWriter.print(": ");
                paramPrintWriter.println(this.mPidsSelfLocked.valueAt(i9));
            }
        }
        finally
        {
            throw localObject2;
            if (this.mForegroundProcesses.size() > 0)
                localSparseArray3 = this.mPidsSelfLocked;
        }
        while (true)
            try
            {
                if (i7 < this.mForegroundProcesses.size())
                {
                    ProcessRecord localProcessRecord3 = (ProcessRecord)this.mPidsSelfLocked.get(((ForegroundToken)this.mForegroundProcesses.valueAt(i7)).pid);
                    if ((paramString != null) && ((localProcessRecord3 == null) || (!paramString.equals(localProcessRecord3.info.packageName))))
                        continue;
                    if (i6 == 0)
                    {
                        if (bool1)
                            paramPrintWriter.println(" ");
                        bool1 = true;
                        paramPrintWriter.println("    Foreground Processes:");
                        i6 = 1;
                    }
                    paramPrintWriter.print("        PID #");
                    paramPrintWriter.print(this.mForegroundProcesses.keyAt(i7));
                    paramPrintWriter.print(": ");
                    paramPrintWriter.println(this.mForegroundProcesses.valueAt(i7));
                }
            }
            finally
            {
                throw localObject1;
                if (this.mPersistentStartingProcesses.size() > 0)
                {
                    if (bool1)
                        paramPrintWriter.println(" ");
                    paramPrintWriter.println("    Persisent processes that are starting:");
                    dumpProcessList(paramPrintWriter, this, this.mPersistentStartingProcesses, "        ", "Starting Norm", "Restarting PERS", paramString);
                    bool1 = true;
                }
                if (this.mRemovedProcesses.size() > 0)
                {
                    if (bool1)
                        paramPrintWriter.println(" ");
                    paramPrintWriter.println("    Processes that are being removed:");
                    dumpProcessList(paramPrintWriter, this, this.mRemovedProcesses, "        ", "Removed Norm", "Removed PERS", paramString);
                    bool1 = true;
                }
                if (this.mProcessesOnHold.size() > 0)
                {
                    if (bool1)
                        paramPrintWriter.println(" ");
                    paramPrintWriter.println("    Processes that are on old until the system is ready:");
                    dumpProcessList(paramPrintWriter, this, this.mProcessesOnHold, "        ", "OnHold Norm", "OnHold PERS", paramString);
                    bool1 = true;
                }
                boolean bool2 = dumpProcessesToGc(paramFileDescriptor, paramPrintWriter, paramArrayOfString, paramInt, bool1, paramBoolean, paramString);
                if (this.mProcessCrashTimes.getMap().size() > 0)
                {
                    int i2 = 0;
                    long l = SystemClock.uptimeMillis();
                    Iterator localIterator3 = this.mProcessCrashTimes.getMap().entrySet().iterator();
                    if (localIterator3.hasNext())
                    {
                        Map.Entry localEntry3 = (Map.Entry)localIterator3.next();
                        String str3 = (String)localEntry3.getKey();
                        SparseArray localSparseArray2 = (SparseArray)localEntry3.getValue();
                        int i3 = localSparseArray2.size();
                        int i4 = 0;
                        int i5;
                        if (i4 < i3)
                        {
                            i5 = localSparseArray2.keyAt(i4);
                            ProcessRecord localProcessRecord2 = (ProcessRecord)this.mProcessNames.get(str3, i5);
                            if ((paramString == null) || ((localProcessRecord2 != null) && (paramString.equals(localProcessRecord2.info.packageName))))
                                continue;
                            i4++;
                            continue;
                        }
                        continue;
                        if (i2 == 0)
                        {
                            if (bool2)
                                paramPrintWriter.println(" ");
                            bool2 = true;
                            paramPrintWriter.println("    Time since processes crashed:");
                            i2 = 1;
                        }
                        paramPrintWriter.print("        Process ");
                        paramPrintWriter.print(str3);
                        paramPrintWriter.print(" uid ");
                        paramPrintWriter.print(i5);
                        paramPrintWriter.print(": last crashed ");
                        TimeUtils.formatDuration(l - ((Long)localSparseArray2.valueAt(i4)).longValue(), paramPrintWriter);
                        paramPrintWriter.println(" ago");
                        continue;
                    }
                }
                if (this.mBadProcesses.getMap().size() > 0)
                {
                    Iterator localIterator2 = this.mBadProcesses.getMap().entrySet().iterator();
                    if (localIterator2.hasNext())
                    {
                        Map.Entry localEntry2 = (Map.Entry)localIterator2.next();
                        String str2 = (String)localEntry2.getKey();
                        SparseArray localSparseArray1 = (SparseArray)localEntry2.getValue();
                        int m = localSparseArray1.size();
                        int n = 0;
                        int i1;
                        if (n < m)
                        {
                            i1 = localSparseArray1.keyAt(n);
                            ProcessRecord localProcessRecord1 = (ProcessRecord)this.mProcessNames.get(str2, i1);
                            if ((paramString == null) || ((localProcessRecord1 != null) && (paramString.equals(localProcessRecord1.info.packageName))))
                                continue;
                            n++;
                            continue;
                        }
                        continue;
                        if (0 == 0)
                        {
                            if (bool2)
                                paramPrintWriter.println(" ");
                            bool2 = true;
                            paramPrintWriter.println("    Bad processes:");
                        }
                        paramPrintWriter.print("        Bad process ");
                        paramPrintWriter.print(str2);
                        paramPrintWriter.print(" uid ");
                        paramPrintWriter.print(i1);
                        paramPrintWriter.print(": crashed at time ");
                        paramPrintWriter.println(localSparseArray1.valueAt(n));
                        continue;
                    }
                }
                paramPrintWriter.println();
                paramPrintWriter.println("    mHomeProcess: " + this.mHomeProcess);
                paramPrintWriter.println("    mPreviousProcess: " + this.mPreviousProcess);
                if (paramBoolean)
                {
                    StringBuilder localStringBuilder = new StringBuilder(128);
                    localStringBuilder.append("    mPreviousProcessVisibleTime: ");
                    TimeUtils.formatDuration(this.mPreviousProcessVisibleTime, localStringBuilder);
                    paramPrintWriter.println(localStringBuilder);
                }
                if (this.mHeavyWeightProcess != null)
                    paramPrintWriter.println("    mHeavyWeightProcess: " + this.mHeavyWeightProcess);
                paramPrintWriter.println("    mConfiguration: " + this.mConfiguration);
                if (paramBoolean)
                {
                    paramPrintWriter.println("    mConfigWillChange: " + this.mMainStack.mConfigWillChange);
                    if (this.mCompatModePackages.getPackages().size() > 0)
                    {
                        int j = 0;
                        Iterator localIterator1 = this.mCompatModePackages.getPackages().entrySet().iterator();
                        if (localIterator1.hasNext())
                        {
                            Map.Entry localEntry1 = (Map.Entry)localIterator1.next();
                            String str1 = (String)localEntry1.getKey();
                            int k = ((Integer)localEntry1.getValue()).intValue();
                            if ((paramString != null) && (!paramString.equals(str1)))
                                continue;
                            if (j == 0)
                            {
                                paramPrintWriter.println("    mScreenCompatPackages:");
                                j = 1;
                            }
                            paramPrintWriter.print("        ");
                            paramPrintWriter.print(str1);
                            paramPrintWriter.print(": ");
                            paramPrintWriter.print(k);
                            paramPrintWriter.println();
                            continue;
                        }
                    }
                }
                if ((this.mSleeping) || (this.mWentToSleep) || (this.mLockScreenShown))
                    paramPrintWriter.println("    mSleeping=" + this.mSleeping + " mWentToSleep=" + this.mWentToSleep + " mLockScreenShown " + this.mLockScreenShown);
                if (this.mShuttingDown)
                    paramPrintWriter.println("    mShuttingDown=" + this.mShuttingDown);
                if ((this.mDebugApp != null) || (this.mOrigDebugApp != null) || (this.mDebugTransient) || (this.mOrigWaitForDebugger))
                    paramPrintWriter.println("    mDebugApp=" + this.mDebugApp + "/orig=" + this.mOrigDebugApp + " mDebugTransient=" + this.mDebugTransient + " mOrigWaitForDebugger=" + this.mOrigWaitForDebugger);
                if (this.mOpenGlTraceApp != null)
                    paramPrintWriter.println("    mOpenGlTraceApp=" + this.mOpenGlTraceApp);
                if ((this.mProfileApp != null) || (this.mProfileProc != null) || (this.mProfileFile != null) || (this.mProfileFd != null))
                {
                    paramPrintWriter.println("    mProfileApp=" + this.mProfileApp + " mProfileProc=" + this.mProfileProc);
                    paramPrintWriter.println("    mProfileFile=" + this.mProfileFile + " mProfileFd=" + this.mProfileFd);
                    paramPrintWriter.println("    mProfileType=" + this.mProfileType + " mAutoStopProfiler=" + this.mAutoStopProfiler);
                }
                if ((this.mAlwaysFinishActivities) || (this.mController != null))
                    paramPrintWriter.println("    mAlwaysFinishActivities=" + this.mAlwaysFinishActivities + " mController=" + this.mController);
                if (paramBoolean)
                {
                    paramPrintWriter.println("    Total persistent processes: " + i);
                    paramPrintWriter.println("    mStartRunning=" + this.mStartRunning + " mProcessesReady=" + this.mProcessesReady + " mSystemReady=" + this.mSystemReady);
                    paramPrintWriter.println("    mBooting=" + this.mBooting + " mBooted=" + this.mBooted + " mFactoryTest=" + this.mFactoryTest);
                    paramPrintWriter.print("    mLastPowerCheckRealtime=");
                    TimeUtils.formatDuration(this.mLastPowerCheckRealtime, paramPrintWriter);
                    paramPrintWriter.println("");
                    paramPrintWriter.print("    mLastPowerCheckUptime=");
                    TimeUtils.formatDuration(this.mLastPowerCheckUptime, paramPrintWriter);
                    paramPrintWriter.println("");
                    paramPrintWriter.println("    mGoingToSleep=" + this.mMainStack.mGoingToSleep);
                    paramPrintWriter.println("    mLaunchingActivity=" + this.mMainStack.mLaunchingActivity);
                    paramPrintWriter.println("    mAdjSeq=" + this.mAdjSeq + " mLruSeq=" + this.mLruSeq);
                    paramPrintWriter.println("    mNumServiceProcs=" + this.mNumServiceProcs + " mNewNumServiceProcs=" + this.mNewNumServiceProcs);
                }
                return true;
                label2478: i9++;
            }
    }

    boolean dumpProcessesToGc(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean1, boolean paramBoolean2, String paramString)
    {
        if (this.mProcessesToGc.size() > 0)
        {
            int i = 0;
            long l = SystemClock.uptimeMillis();
            int j = 0;
            if (j < this.mProcessesToGc.size())
            {
                ProcessRecord localProcessRecord = (ProcessRecord)this.mProcessesToGc.get(j);
                if ((paramString != null) && (!paramString.equals(localProcessRecord.info.packageName)));
                while (true)
                {
                    j++;
                    break;
                    if (i == 0)
                    {
                        if (paramBoolean1)
                            paramPrintWriter.println(" ");
                        paramBoolean1 = true;
                        paramPrintWriter.println("    Processes that are waiting to GC:");
                        i = 1;
                    }
                    paramPrintWriter.print("        Process ");
                    paramPrintWriter.println(localProcessRecord);
                    paramPrintWriter.print("            lowMem=");
                    paramPrintWriter.print(localProcessRecord.reportLowMemory);
                    paramPrintWriter.print(", last gced=");
                    paramPrintWriter.print(l - localProcessRecord.lastRequestedGc);
                    paramPrintWriter.print(" ms ago, last lowMem=");
                    paramPrintWriter.print(l - localProcessRecord.lastLowMemory);
                    paramPrintWriter.println(" ms ago");
                }
            }
        }
        return paramBoolean1;
    }

    protected boolean dumpProvider(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String paramString, String[] paramArrayOfString, int paramInt, boolean paramBoolean)
    {
        return this.mProviderMap.dumpProvider(paramFileDescriptor, paramPrintWriter, paramString, paramArrayOfString, paramInt, paramBoolean);
    }

    boolean dumpProvidersLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
    {
        boolean bool = true;
        new ItemMatcher().build(paramArrayOfString, paramInt);
        paramPrintWriter.println("ACTIVITY MANAGER CONTENT PROVIDERS (dumpsys activity providers)");
        this.mProviderMap.dumpProvidersLocked(paramPrintWriter, paramBoolean);
        if (this.mLaunchingProviders.size() > 0)
        {
            int k = 0;
            int m = -1 + this.mLaunchingProviders.size();
            if (m >= 0)
            {
                ContentProviderRecord localContentProviderRecord = (ContentProviderRecord)this.mLaunchingProviders.get(m);
                if ((paramString != null) && (!paramString.equals(localContentProviderRecord.name.getPackageName())));
                while (true)
                {
                    m--;
                    break;
                    if (k == 0)
                    {
                        if (bool)
                            paramPrintWriter.println(" ");
                        bool = true;
                        paramPrintWriter.println("    Launching content providers:");
                        k = 1;
                    }
                    paramPrintWriter.print("    Launching #");
                    paramPrintWriter.print(m);
                    paramPrintWriter.print(": ");
                    paramPrintWriter.println(localContentProviderRecord);
                }
            }
        }
        if (this.mGrantedUriPermissions.size() > 0)
        {
            if (bool)
                paramPrintWriter.println();
            paramPrintWriter.println("Granted Uri Permissions:");
            for (int i = 0; i < this.mGrantedUriPermissions.size(); i++)
            {
                int j = this.mGrantedUriPermissions.keyAt(i);
                HashMap localHashMap = (HashMap)this.mGrantedUriPermissions.valueAt(i);
                paramPrintWriter.print("    * UID ");
                paramPrintWriter.print(j);
                paramPrintWriter.println(" holds:");
                Iterator localIterator = localHashMap.values().iterator();
                while (localIterator.hasNext())
                {
                    UriPermission localUriPermission = (UriPermission)localIterator.next();
                    paramPrintWriter.print("        ");
                    paramPrintWriter.println(localUriPermission);
                    if (paramBoolean)
                        localUriPermission.dump(paramPrintWriter, "            ");
                }
            }
            bool = true;
        }
        return bool;
    }

    protected boolean dumpService(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String paramString, String[] paramArrayOfString, int paramInt, boolean paramBoolean)
    {
        ArrayList localArrayList = new ArrayList();
        if ("all".equals(paramString));
        while (true)
        {
            boolean bool;
            try
            {
                Iterator localIterator3 = AppGlobals.getPackageManager().getUsers().iterator();
                if (localIterator3.hasNext())
                {
                    UserInfo localUserInfo2 = (UserInfo)localIterator3.next();
                    Iterator localIterator4 = this.mServiceMap.getAllServices(localUserInfo2.id).iterator();
                    if (localIterator4.hasNext())
                    {
                        localArrayList.add((ServiceRecord)localIterator4.next());
                        continue;
                    }
                    continue;
                }
            }
            catch (RemoteException localRemoteException2)
            {
                if (localArrayList.size() > 0)
                    break label346;
                bool = false;
                return bool;
            }
            finally
            {
            }
            ComponentName localComponentName;
            label141: int i;
            if (paramString != null)
            {
                localComponentName = ComponentName.unflattenFromString(paramString);
                i = 0;
                if (localComponentName != null);
            }
            try
            {
                int m = Integer.parseInt(paramString, 16);
                i = m;
                paramString = null;
                localComponentName = null;
                while (true)
                {
                    label166: ServiceRecord localServiceRecord;
                    try
                    {
                        Iterator localIterator1 = AppGlobals.getPackageManager().getUsers().iterator();
                        if (localIterator1.hasNext())
                        {
                            UserInfo localUserInfo1 = (UserInfo)localIterator1.next();
                            Iterator localIterator2 = this.mServiceMap.getAllServices(localUserInfo1.id).iterator();
                            if (localIterator2.hasNext())
                            {
                                localServiceRecord = (ServiceRecord)localIterator2.next();
                                if (localComponentName == null)
                                    break label295;
                                if (!localServiceRecord.name.equals(localComponentName))
                                    continue;
                                localArrayList.add(localServiceRecord);
                                continue;
                            }
                            continue;
                        }
                    }
                    catch (RemoteException localRemoteException1)
                    {
                        break;
                    }
                    finally
                    {
                    }
                    localComponentName = null;
                    break label141;
                    label295: if (paramString != null)
                    {
                        if (localServiceRecord.name.flattenToString().contains(paramString))
                            localArrayList.add(localServiceRecord);
                    }
                    else if (System.identityHashCode(localServiceRecord) == i)
                        localArrayList.add(localServiceRecord);
                }
                label346: int j = 0;
                for (int k = 0; k < localArrayList.size(); k++)
                {
                    if (j != 0)
                        paramPrintWriter.println();
                    j = 1;
                    dumpService("", paramFileDescriptor, paramPrintWriter, (ServiceRecord)localArrayList.get(k), paramArrayOfString, paramBoolean);
                }
                bool = true;
            }
            catch (RuntimeException localRuntimeException)
            {
                break label166;
            }
        }
    }

    boolean dumpServicesLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean1, boolean paramBoolean2, String paramString)
    {
        boolean bool1 = false;
        ItemMatcher localItemMatcher = new ItemMatcher();
        localItemMatcher.build(paramArrayOfString, paramInt);
        paramPrintWriter.println("ACTIVITY MANAGER SERVICES (dumpsys activity services)");
        try
        {
            Iterator localIterator2 = AppGlobals.getPackageManager().getUsers().iterator();
            while (localIterator2.hasNext())
            {
                UserInfo localUserInfo = (UserInfo)localIterator2.next();
                if (this.mServiceMap.getAllServices(localUserInfo.id).size() > 0)
                {
                    bool2 = false;
                    l = SystemClock.elapsedRealtime();
                    Iterator localIterator3 = this.mServiceMap.getAllServices(localUserInfo.id).iterator();
                    bool1 = false;
                    while (true)
                        if (localIterator3.hasNext())
                        {
                            localServiceRecord4 = (ServiceRecord)localIterator3.next();
                            if ((localItemMatcher.match(localServiceRecord4, localServiceRecord4.name)) && ((paramString == null) || (paramString.equals(localServiceRecord4.appInfo.packageName))))
                            {
                                if (!bool2)
                                {
                                    paramPrintWriter.println("    Active services:");
                                    bool2 = true;
                                }
                                if (bool1)
                                    paramPrintWriter.println();
                                paramPrintWriter.print("    * ");
                                paramPrintWriter.println(localServiceRecord4);
                                if (paramBoolean1)
                                {
                                    localServiceRecord4.dump(paramPrintWriter, "        ");
                                    bool1 = true;
                                    if ((!paramBoolean2) || (localServiceRecord4.app == null) || (localServiceRecord4.app.thread == null))
                                        continue;
                                    paramPrintWriter.println("        Client:");
                                    paramPrintWriter.flush();
                                }
                            }
                        }
                }
            }
        }
        catch (RemoteException localRemoteException1)
        {
            while (true)
            {
                boolean bool2;
                int i2;
                ServiceRecord localServiceRecord3;
                try
                {
                    localTransferPipe = new TransferPipe();
                }
                catch (IOException localRemoteException1)
                {
                    try
                    {
                        long l;
                        ServiceRecord localServiceRecord4;
                        localServiceRecord4.app.thread.dumpService(localTransferPipe.getWriteFd().getFileDescriptor(), localServiceRecord4, paramArrayOfString);
                        localTransferPipe.setBufferPrefix("            ");
                        localTransferPipe.go(paramFileDescriptor, 2000L);
                        localTransferPipe.kill();
                        bool1 = true;
                        continue;
                        paramPrintWriter.print("        app=");
                        paramPrintWriter.println(localServiceRecord4.app);
                        paramPrintWriter.print("        created=");
                        TimeUtils.formatDuration(localServiceRecord4.createTime, l, paramPrintWriter);
                        paramPrintWriter.print(" started=");
                        paramPrintWriter.print(localServiceRecord4.startRequested);
                        paramPrintWriter.print(" connections=");
                        paramPrintWriter.println(localServiceRecord4.connections.size());
                        if (localServiceRecord4.connections.size() <= 0)
                            continue;
                        paramPrintWriter.println("        Connections:");
                        Iterator localIterator4 = localServiceRecord4.connections.values().iterator();
                        if (!localIterator4.hasNext())
                            continue;
                        ArrayList localArrayList2 = (ArrayList)localIterator4.next();
                        int i4 = 0;
                        if (i4 < localArrayList2.size())
                        {
                            ConnectionRecord localConnectionRecord2 = (ConnectionRecord)localArrayList2.get(i4);
                            paramPrintWriter.print("            ");
                            paramPrintWriter.print(localConnectionRecord2.binding.intent.intent.getIntent().toShortString(false, false, false, false));
                            paramPrintWriter.print(" -> ");
                            ProcessRecord localProcessRecord = localConnectionRecord2.binding.client;
                            if (localProcessRecord == null)
                                continue;
                            str = localProcessRecord.toShortString();
                            paramPrintWriter.println(str);
                            i4++;
                            continue;
                        }
                        continue;
                        String str = "null";
                    }
                    finally
                    {
                        TransferPipe localTransferPipe;
                        localTransferPipe.kill();
                    }
                    paramPrintWriter.println("            Failure while dumping the service: " + localIOException);
                    continue;
                    localRemoteException1 = localRemoteException1;
                    if (this.mPendingServices.size() <= 0)
                        break label756;
                    i2 = 0;
                    int i3 = 0;
                    if (i3 >= this.mPendingServices.size())
                        break;
                    localServiceRecord3 = (ServiceRecord)this.mPendingServices.get(i3);
                    if (localItemMatcher.match(localServiceRecord3, localServiceRecord3.name))
                        break label677;
                    i3++;
                    continue;
                }
                catch (RemoteException localRemoteException2)
                {
                    paramPrintWriter.println("            Got a RemoteException while dumping the service");
                    continue;
                }
                bool1 = bool2;
                continue;
                label677: if ((paramString == null) || (paramString.equals(localServiceRecord3.appInfo.packageName)))
                {
                    if (i2 == 0)
                    {
                        if (bool1)
                            paramPrintWriter.println(" ");
                        bool1 = true;
                        paramPrintWriter.println("    Pending services:");
                        i2 = 1;
                    }
                    paramPrintWriter.print("    * Pending ");
                    paramPrintWriter.println(localServiceRecord3);
                    localServiceRecord3.dump(paramPrintWriter, "        ");
                }
            }
            bool1 = true;
            label756: if (this.mRestartingServices.size() > 0)
            {
                int n = 0;
                int i1 = 0;
                if (i1 < this.mRestartingServices.size())
                {
                    ServiceRecord localServiceRecord2 = (ServiceRecord)this.mRestartingServices.get(i1);
                    if (!localItemMatcher.match(localServiceRecord2, localServiceRecord2.name));
                    while (true)
                    {
                        i1++;
                        break;
                        if ((paramString == null) || (paramString.equals(localServiceRecord2.appInfo.packageName)))
                        {
                            if (n == 0)
                            {
                                if (bool1)
                                    paramPrintWriter.println(" ");
                                bool1 = true;
                                paramPrintWriter.println("    Restarting services:");
                                n = 1;
                            }
                            paramPrintWriter.print("    * Restarting ");
                            paramPrintWriter.println(localServiceRecord2);
                            localServiceRecord2.dump(paramPrintWriter, "        ");
                        }
                    }
                }
                bool1 = true;
            }
            if (this.mStoppingServices.size() > 0)
            {
                int k = 0;
                int m = 0;
                if (m < this.mStoppingServices.size())
                {
                    ServiceRecord localServiceRecord1 = (ServiceRecord)this.mStoppingServices.get(m);
                    if (!localItemMatcher.match(localServiceRecord1, localServiceRecord1.name));
                    while (true)
                    {
                        m++;
                        break;
                        if ((paramString == null) || (paramString.equals(localServiceRecord1.appInfo.packageName)))
                        {
                            if (k == 0)
                            {
                                if (bool1)
                                    paramPrintWriter.println(" ");
                                bool1 = true;
                                paramPrintWriter.println("    Stopping services:");
                                k = 1;
                            }
                            paramPrintWriter.print("    * Stopping ");
                            paramPrintWriter.println(localServiceRecord1);
                            localServiceRecord1.dump(paramPrintWriter, "        ");
                        }
                    }
                }
                bool1 = true;
            }
            if ((paramBoolean1) && (this.mServiceConnections.size() > 0))
            {
                int i = 0;
                Iterator localIterator1 = this.mServiceConnections.values().iterator();
                if (localIterator1.hasNext())
                {
                    ArrayList localArrayList1 = (ArrayList)localIterator1.next();
                    int j = 0;
                    label1097: ConnectionRecord localConnectionRecord1;
                    if (j < localArrayList1.size())
                    {
                        localConnectionRecord1 = (ConnectionRecord)localArrayList1.get(j);
                        if (localItemMatcher.match(localConnectionRecord1.binding.service, localConnectionRecord1.binding.service.name))
                            break label1152;
                    }
                    while (true)
                    {
                        j++;
                        break label1097;
                        break;
                        label1152: if ((paramString == null) || ((localConnectionRecord1.binding.client != null) && (paramString.equals(localConnectionRecord1.binding.client.info.packageName))))
                        {
                            if (i == 0)
                            {
                                if (bool1)
                                    paramPrintWriter.println(" ");
                                bool1 = true;
                                paramPrintWriter.println("    Connection bindings to services:");
                                i = 1;
                            }
                            paramPrintWriter.print("    * ");
                            paramPrintWriter.println(localConnectionRecord1);
                            localConnectionRecord1.dump(paramPrintWriter, "        ");
                        }
                    }
                }
                bool1 = true;
            }
        }
        return bool1;
    }

    void enableScreenAfterBoot()
    {
        EventLog.writeEvent(3050, SystemClock.uptimeMillis());
        this.mWindowManager.enableScreenAfterBoot();
        try
        {
            updateEventDispatchingLocked();
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    void enforceCallingPermission(String paramString1, String paramString2)
    {
        if (checkCallingPermission(paramString1) == 0)
            return;
        String str = "Permission Denial: " + paramString2 + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + paramString1;
        Slog.w("ActivityManager", str);
        throw new SecurityException(str);
    }

    void enforceNotIsolatedCaller(String paramString)
    {
        if (UserId.isIsolated(Binder.getCallingUid()))
            throw new SecurityException("Isolated process not allowed to call " + paramString);
    }

    final void ensureBootCompleted()
    {
        int i = 1;
        try
        {
            boolean bool = this.mBooting;
            this.mBooting = false;
            if (!this.mBooted);
            while (true)
            {
                this.mBooted = true;
                if (bool)
                    finishBooting();
                if (i != 0)
                    enableScreenAfterBoot();
                return;
                i = 0;
            }
        }
        finally
        {
        }
    }

    void ensurePackageDexOpt(String paramString)
    {
        IPackageManager localIPackageManager = AppGlobals.getPackageManager();
        try
        {
            if (localIPackageManager.performDexOpt(paramString))
                this.mDidDexOpt = true;
            label19: return;
        }
        catch (RemoteException localRemoteException)
        {
            break label19;
        }
    }

    // ERROR //
    public final void enterSafeMode()
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_0
        //     3: getfield 656	com/android/server/am/ActivityManagerService:mSystemReady	Z
        //     6: istore_2
        //     7: iload_2
        //     8: ifne +11 -> 19
        //     11: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     14: invokeinterface 5368 1 0
        //     19: aload_0
        //     20: monitorexit
        //     21: return
        //     22: astore_1
        //     23: aload_0
        //     24: monitorexit
        //     25: aload_1
        //     26: athrow
        //     27: astore_3
        //     28: goto -9 -> 19
        //
        // Exception table:
        //     from	to	target	type
        //     2	7	22	finally
        //     11	19	22	finally
        //     19	25	22	finally
        //     11	19	27	android/os/RemoteException
    }

    public final boolean finishActivity(IBinder paramIBinder, int paramInt, Intent paramIntent)
    {
        boolean bool1 = false;
        if ((paramIntent != null) && (paramIntent.hasFileDescriptors() == true))
            throw new IllegalArgumentException("File descriptors passed in Intent");
        try
        {
            if (this.mController != null)
            {
                ActivityRecord localActivityRecord = this.mMainStack.topRunningActivityLocked(paramIBinder, 0);
                if (localActivityRecord != null)
                {
                    int i = 1;
                    try
                    {
                        boolean bool2 = this.mController.activityResuming(localActivityRecord.packageName);
                        i = bool2;
                        if (i != 0);
                    }
                    catch (RemoteException localRemoteException)
                    {
                        while (true)
                            this.mController = null;
                    }
                }
            }
        }
        finally
        {
        }
        long l = Binder.clearCallingIdentity();
        bool1 = this.mMainStack.requestFinishActivityLocked(paramIBinder, paramInt, paramIntent, "app-request");
        Binder.restoreCallingIdentity(l);
        return bool1;
    }

    public boolean finishActivityAffinity(IBinder paramIBinder)
    {
        try
        {
            long l = Binder.clearCallingIdentity();
            boolean bool = this.mMainStack.finishActivityAffinityLocked(paramIBinder);
            Binder.restoreCallingIdentity(l);
            return bool;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    final void finishBooting()
    {
        IntentFilter localIntentFilter1 = new IntentFilter();
        localIntentFilter1.addAction("android.intent.action.QUERY_PACKAGE_RESTART");
        localIntentFilter1.addDataScheme("package");
        this.mContext.registerReceiver(new BroadcastReceiver()
        {
            public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
            {
                String[] arrayOfString = paramAnonymousIntent.getStringArrayExtra("android.intent.extra.PACKAGES");
                if (arrayOfString != null)
                {
                    int i = arrayOfString.length;
                    int j = 0;
                    while (j < i)
                    {
                        String str = arrayOfString[j];
                        synchronized (ActivityManagerService.this)
                        {
                            if (ActivityManagerService.this.forceStopPackageLocked(str, -1, false, false, false, false, 0))
                                setResultCode(-1);
                            else
                                j++;
                        }
                    }
                }
            }
        }
        , localIntentFilter1);
        IntentFilter localIntentFilter2 = new IntentFilter();
        localIntentFilter2.addAction("android.intent.action.USER_REMOVED");
        this.mContext.registerReceiver(new BroadcastReceiver()
        {
            public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
            {
                ActivityManagerService.this.onUserRemoved(paramAnonymousIntent);
            }
        }
        , localIntentFilter2);
        try
        {
            int i = this.mProcessesOnHold.size();
            if (i > 0)
            {
                ArrayList localArrayList = new ArrayList(this.mProcessesOnHold);
                for (int j = 0; j < i; j++)
                    startProcessLocked((ProcessRecord)localArrayList.get(j), "on-hold", null);
            }
            if (this.mFactoryTest != 1)
            {
                Message localMessage = this.mHandler.obtainMessage(27);
                this.mHandler.sendMessageDelayed(localMessage, 900000L);
                SystemProperties.set("sys.boot_completed", "1");
                SystemProperties.set("dev.bootcomplete", "1");
                broadcastIntentLocked(null, null, new Intent("android.intent.action.BOOT_COMPLETED", null), null, null, 0, null, null, "android.permission.RECEIVE_BOOT_COMPLETED", false, false, MY_PID, 1000, Binder.getOrigCallingUser());
            }
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public final void finishHeavyWeightApp()
    {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0)
        {
            String str = "Permission Denial: finishHeavyWeightApp() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
            Slog.w("ActivityManager", str);
            throw new SecurityException(str);
        }
        while (true)
        {
            int i;
            try
            {
                if (this.mHeavyWeightProcess == null)
                    break label197;
                ArrayList localArrayList = new ArrayList(this.mHeavyWeightProcess.activities);
                i = 0;
                if (i < localArrayList.size())
                {
                    ActivityRecord localActivityRecord = (ActivityRecord)localArrayList.get(i);
                    if (localActivityRecord.finishing)
                        break label198;
                    int j = this.mMainStack.indexOfTokenLocked(localActivityRecord.appToken);
                    if (j < 0)
                        break label198;
                    this.mMainStack.finishActivityLocked(localActivityRecord, j, 0, null, "finish-heavy");
                    break label198;
                }
                this.mHeavyWeightProcess = null;
                this.mHandler.sendEmptyMessage(25);
            }
            finally
            {
                localObject = finally;
                throw localObject;
            }
            label197: return;
            label198: i++;
        }
    }

    public void finishInstrumentation(IApplicationThread paramIApplicationThread, int paramInt, Bundle paramBundle)
    {
        UserId.getCallingUserId();
        if ((paramBundle != null) && (paramBundle.hasFileDescriptors()))
            throw new IllegalArgumentException("File descriptors passed in Intent");
        try
        {
            ProcessRecord localProcessRecord = getRecordForAppLocked(paramIApplicationThread);
            if (localProcessRecord == null)
            {
                Slog.w("ActivityManager", "finishInstrumentation: no app for " + paramIApplicationThread);
            }
            else
            {
                long l = Binder.clearCallingIdentity();
                finishInstrumentationLocked(localProcessRecord, paramInt, paramBundle);
                Binder.restoreCallingIdentity(l);
            }
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    void finishInstrumentationLocked(ProcessRecord paramProcessRecord, int paramInt, Bundle paramBundle)
    {
        if (paramProcessRecord.instrumentationWatcher != null);
        try
        {
            paramProcessRecord.instrumentationWatcher.instrumentationFinished(paramProcessRecord.instrumentationClass, paramInt, paramBundle);
            label22: paramProcessRecord.instrumentationWatcher = null;
            paramProcessRecord.instrumentationClass = null;
            paramProcessRecord.instrumentationInfo = null;
            paramProcessRecord.instrumentationProfileFile = null;
            paramProcessRecord.instrumentationArguments = null;
            forceStopPackageLocked(paramProcessRecord.processName, -1, false, false, true, true, paramProcessRecord.userId);
            return;
        }
        catch (RemoteException localRemoteException)
        {
            break label22;
        }
    }

    public void finishReceiver(IBinder paramIBinder, int paramInt, String paramString, Bundle paramBundle, boolean paramBoolean)
    {
        if ((paramBundle != null) && (paramBundle.hasFileDescriptors()))
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        long l = Binder.clearCallingIdentity();
        boolean bool = false;
        try
        {
            try
            {
                BroadcastRecord localBroadcastRecord = broadcastRecordForReceiverLocked(paramIBinder);
                if (localBroadcastRecord != null)
                    bool = localBroadcastRecord.queue.finishReceiverLocked(localBroadcastRecord, paramInt, paramString, paramBundle, paramBoolean, true);
                if (bool)
                    localBroadcastRecord.queue.processNextBroadcast(false);
                trimApplications();
                return;
            }
            finally
            {
            }
        }
        finally
        {
            Binder.restoreCallingIdentity(l);
        }
    }

    public final void finishSubActivity(IBinder paramIBinder, String paramString, int paramInt)
    {
        try
        {
            long l = Binder.clearCallingIdentity();
            this.mMainStack.finishSubActivityLocked(paramIBinder, paramString, paramInt);
            Binder.restoreCallingIdentity(l);
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public void forceStopPackage(String paramString)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 4573
        //     4: invokevirtual 4575	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
        //     7: ifeq +69 -> 76
        //     10: new 598	java/lang/StringBuilder
        //     13: dup
        //     14: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     17: ldc_w 5444
        //     20: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     23: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     26: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     29: ldc_w 1697
        //     32: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     35: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     38: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     41: ldc_w 1699
        //     44: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     47: ldc_w 4573
        //     50: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     53: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     56: astore 15
        //     58: ldc 221
        //     60: aload 15
        //     62: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     65: pop
        //     66: new 1701	java/lang/SecurityException
        //     69: dup
        //     70: aload 15
        //     72: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     75: athrow
        //     76: invokestatic 4360	android/os/UserId:getCallingUserId	()I
        //     79: istore_2
        //     80: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     83: lstore_3
        //     84: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     87: astore 6
        //     89: bipush 255
        //     91: istore 7
        //     93: aload_0
        //     94: monitorenter
        //     95: aload 6
        //     97: aload_1
        //     98: iload_2
        //     99: invokeinterface 3009 3 0
        //     104: istore 14
        //     106: iload 14
        //     108: istore 7
        //     110: iload 7
        //     112: bipush 255
        //     114: if_icmpne +36 -> 150
        //     117: ldc 221
        //     119: new 598	java/lang/StringBuilder
        //     122: dup
        //     123: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     126: ldc_w 5446
        //     129: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     132: aload_1
        //     133: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     136: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     139: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     142: pop
        //     143: aload_0
        //     144: monitorexit
        //     145: lload_3
        //     146: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     149: return
        //     150: aload_0
        //     151: aload_1
        //     152: iload 7
        //     154: invokespecial 4524	com/android/server/am/ActivityManagerService:forceStopPackageLocked	(Ljava/lang/String;I)V
        //     157: aload 6
        //     159: aload_1
        //     160: iconst_1
        //     161: iload_2
        //     162: invokeinterface 1583 4 0
        //     167: aload_0
        //     168: monitorexit
        //     169: goto -24 -> 145
        //     172: astore 9
        //     174: aload_0
        //     175: monitorexit
        //     176: aload 9
        //     178: athrow
        //     179: astore 5
        //     181: lload_3
        //     182: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     185: aload 5
        //     187: athrow
        //     188: astore 11
        //     190: ldc 221
        //     192: new 598	java/lang/StringBuilder
        //     195: dup
        //     196: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     199: ldc_w 1600
        //     202: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     205: aload_1
        //     206: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     209: ldc_w 1602
        //     212: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     215: aload 11
        //     217: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     220: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     223: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     226: pop
        //     227: goto -60 -> 167
        //     230: astore 8
        //     232: goto -122 -> 110
        //     235: astore 10
        //     237: goto -70 -> 167
        //
        // Exception table:
        //     from	to	target	type
        //     95	106	172	finally
        //     117	145	172	finally
        //     150	157	172	finally
        //     157	167	172	finally
        //     167	176	172	finally
        //     190	227	172	finally
        //     84	95	179	finally
        //     176	179	179	finally
        //     157	167	188	java/lang/IllegalArgumentException
        //     95	106	230	android/os/RemoteException
        //     157	167	235	android/os/RemoteException
    }

    // ERROR //
    void foregroundTokenDied(ForegroundToken paramForegroundToken)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_0
        //     3: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     6: astore_3
        //     7: aload_3
        //     8: monitorenter
        //     9: aload_0
        //     10: getfield 574	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
        //     13: aload_1
        //     14: getfield 5114	com/android/server/am/ActivityManagerService$ForegroundToken:pid	I
        //     17: invokevirtual 1083	android/util/SparseArray:get	(I)Ljava/lang/Object;
        //     20: checkcast 83	com/android/server/am/ActivityManagerService$ForegroundToken
        //     23: aload_1
        //     24: if_acmpeq +8 -> 32
        //     27: aload_3
        //     28: monitorexit
        //     29: aload_0
        //     30: monitorexit
        //     31: return
        //     32: aload_0
        //     33: getfield 574	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
        //     36: aload_1
        //     37: getfield 5114	com/android/server/am/ActivityManagerService$ForegroundToken:pid	I
        //     40: invokevirtual 2126	android/util/SparseArray:remove	(I)V
        //     43: aload_0
        //     44: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     47: aload_1
        //     48: getfield 5114	com/android/server/am/ActivityManagerService$ForegroundToken:pid	I
        //     51: invokevirtual 1083	android/util/SparseArray:get	(I)Ljava/lang/Object;
        //     54: checkcast 982	com/android/server/am/ProcessRecord
        //     57: astore 5
        //     59: aload 5
        //     61: ifnonnull +15 -> 76
        //     64: aload_3
        //     65: monitorexit
        //     66: aload_0
        //     67: monitorexit
        //     68: goto -37 -> 31
        //     71: astore_2
        //     72: aload_0
        //     73: monitorexit
        //     74: aload_2
        //     75: athrow
        //     76: aload 5
        //     78: aconst_null
        //     79: putfield 1164	com/android/server/am/ProcessRecord:forcingToForeground	Landroid/os/IBinder;
        //     82: aload 5
        //     84: iconst_0
        //     85: putfield 1167	com/android/server/am/ProcessRecord:foregroundServices	Z
        //     88: aload_3
        //     89: monitorexit
        //     90: aload_0
        //     91: invokevirtual 1396	com/android/server/am/ActivityManagerService:updateOomAdjLocked	()V
        //     94: aload_0
        //     95: monitorexit
        //     96: goto -65 -> 31
        //     99: astore 4
        //     101: aload_3
        //     102: monitorexit
        //     103: aload 4
        //     105: athrow
        //
        // Exception table:
        //     from	to	target	type
        //     2	9	71	finally
        //     29	31	71	finally
        //     66	74	71	finally
        //     90	96	71	finally
        //     103	106	71	finally
        //     9	29	99	finally
        //     32	66	99	finally
        //     76	90	99	finally
        //     101	103	99	finally
    }

    public ComponentName getActivityClassForToken(IBinder paramIBinder)
    {
        ComponentName localComponentName;
        try
        {
            ActivityRecord localActivityRecord = this.mMainStack.isInStackLocked(paramIBinder);
            if (localActivityRecord == null)
                localComponentName = null;
            else
                localComponentName = localActivityRecord.intent.getComponent();
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
        return localComponentName;
    }

    ActivityInfo getActivityInfoForUser(ActivityInfo paramActivityInfo, int paramInt)
    {
        ActivityInfo localActivityInfo;
        if ((paramActivityInfo == null) || ((paramInt < 1) && (paramActivityInfo.applicationInfo.uid < 100000)))
            localActivityInfo = paramActivityInfo;
        while (true)
        {
            return localActivityInfo;
            localActivityInfo = new ActivityInfo(paramActivityInfo);
            localActivityInfo.applicationInfo = getAppInfoForUser(localActivityInfo.applicationInfo, paramInt);
        }
    }

    public ComponentName getCallingActivity(IBinder paramIBinder)
    {
        while (true)
        {
            try
            {
                ActivityRecord localActivityRecord = getCallingRecordLocked(paramIBinder);
                if (localActivityRecord != null)
                {
                    localComponentName = localActivityRecord.intent.getComponent();
                    return localComponentName;
                }
            }
            finally
            {
                localObject = finally;
                throw localObject;
            }
            ComponentName localComponentName = null;
        }
    }

    @MiuiHook(MiuiHook.MiuiHookType.CHANGE_CODE)
    public String getCallingPackage(IBinder paramIBinder)
    {
        try
        {
            ActivityRecord localActivityRecord = getCallingRecordLocked(paramIBinder);
            if ((localActivityRecord != null) && (localActivityRecord.app != null))
            {
                str = localActivityRecord.info.packageName;
                return str;
            }
            String str = Injector.getCallingUidPackage(this, paramIBinder);
        }
        finally
        {
        }
    }

    public Configuration getConfiguration()
    {
        try
        {
            Configuration localConfiguration = new Configuration(this.mConfiguration);
            return localConfiguration;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public final IActivityManager.ContentProviderHolder getContentProvider(IApplicationThread paramIApplicationThread, String paramString, boolean paramBoolean)
    {
        enforceNotIsolatedCaller("getContentProvider");
        if (paramIApplicationThread == null)
        {
            String str = "null IApplicationThread when getting content provider " + paramString;
            Slog.w("ActivityManager", str);
            throw new SecurityException(str);
        }
        return getContentProviderImpl(paramIApplicationThread, paramString, null, paramBoolean);
    }

    public IActivityManager.ContentProviderHolder getContentProviderExternal(String paramString, IBinder paramIBinder)
    {
        enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call getContentProviderExternal()");
        return getContentProviderExternalUnchecked(paramString, paramIBinder);
    }

    public UserInfo getCurrentUser()
        throws RemoteException
    {
        int i = Binder.getCallingUid();
        if ((i != 0) && (i != Process.myUid()))
            Slog.e("ActivityManager", "Trying to get user from unauthorized app");
        for (UserInfo localUserInfo = null; ; localUserInfo = AppGlobals.getPackageManager().getUser(this.mCurrentUserId))
            return localUserInfo;
    }

    public ConfigurationInfo getDeviceConfigurationInfo()
    {
        ConfigurationInfo localConfigurationInfo = new ConfigurationInfo();
        try
        {
            localConfigurationInfo.reqTouchScreen = this.mConfiguration.touchscreen;
            localConfigurationInfo.reqKeyboardType = this.mConfiguration.keyboard;
            localConfigurationInfo.reqNavigation = this.mConfiguration.navigation;
            if ((this.mConfiguration.navigation == 2) || (this.mConfiguration.navigation == 3))
                localConfigurationInfo.reqInputFeatures = (0x2 | localConfigurationInfo.reqInputFeatures);
            if ((this.mConfiguration.keyboard != 0) && (this.mConfiguration.keyboard != 1))
                localConfigurationInfo.reqInputFeatures = (0x1 | localConfigurationInfo.reqInputFeatures);
            localConfigurationInfo.reqGlEsVersion = this.GL_ES_VERSION;
            return localConfigurationInfo;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public int getFrontActivityScreenCompatMode()
    {
        enforceNotIsolatedCaller("getFrontActivityScreenCompatMode");
        try
        {
            int i = this.mCompatModePackages.getFrontActivityScreenCompatModeLocked();
            return i;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public IIntentSender getIntentSender(int paramInt1, String paramString1, IBinder paramIBinder, String paramString2, int paramInt2, Intent[] paramArrayOfIntent, String[] paramArrayOfString, int paramInt3, Bundle paramBundle)
    {
        enforceNotIsolatedCaller("getIntentSender");
        if (paramArrayOfIntent != null)
        {
            if (paramArrayOfIntent.length < 1)
                throw new IllegalArgumentException("Intents array length must be >= 1");
            for (int k = 0; k < paramArrayOfIntent.length; k++)
            {
                Intent localIntent = paramArrayOfIntent[k];
                if (localIntent != null)
                {
                    if (localIntent.hasFileDescriptors())
                        throw new IllegalArgumentException("File descriptors passed in Intent");
                    if ((paramInt1 == 1) && ((0x4000000 & localIntent.getFlags()) != 0))
                        throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
                    paramArrayOfIntent[k] = new Intent(localIntent);
                }
            }
            if ((paramArrayOfString != null) && (paramArrayOfString.length != paramArrayOfIntent.length))
                throw new IllegalArgumentException("Intent array length does not match resolvedTypes length");
        }
        if ((paramBundle != null) && (paramBundle.hasFileDescriptors()))
            throw new IllegalArgumentException("File descriptors passed in options");
        try
        {
            int i = Binder.getCallingUid();
            if ((i != 0) && (i != 1000))
                try
                {
                    int j = AppGlobals.getPackageManager().getPackageUid(paramString1, UserId.getUserId(i));
                    if (!UserId.isSameApp(i, j))
                    {
                        String str = "Permission Denial: getIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + ", (need uid=" + j + ")" + " is not allowed to send as package " + paramString1;
                        Slog.w("ActivityManager", str);
                        throw new SecurityException(str);
                    }
                }
                catch (RemoteException localRemoteException)
                {
                    throw new SecurityException(localRemoteException);
                }
        }
        finally
        {
        }
        IIntentSender localIIntentSender = getIntentSenderLocked(paramInt1, paramString1, Binder.getOrigCallingUid(), paramIBinder, paramString2, paramInt2, paramArrayOfIntent, paramArrayOfString, paramInt3, paramBundle);
        return localIIntentSender;
    }

    IIntentSender getIntentSenderLocked(int paramInt1, String paramString1, int paramInt2, IBinder paramIBinder, String paramString2, int paramInt3, Intent[] paramArrayOfIntent, String[] paramArrayOfString, int paramInt4, Bundle paramBundle)
    {
        ActivityRecord localActivityRecord = null;
        Object localObject;
        if (paramInt1 == 3)
        {
            localActivityRecord = this.mMainStack.isInStackLocked(paramIBinder);
            if (localActivityRecord == null)
                localObject = null;
        }
        while (true)
        {
            return localObject;
            if (localActivityRecord.finishing)
            {
                localObject = null;
            }
            else
            {
                int i;
                label56: int j;
                label68: int k;
                label80: PendingIntentRecord.Key localKey;
                label138: Intent localIntent1;
                if ((0x20000000 & paramInt4) != 0)
                {
                    i = 1;
                    if ((0x10000000 & paramInt4) != 0)
                    {
                        j = 1;
                        if ((0x8000000 & paramInt4) == 0)
                            break label255;
                        k = 1;
                        localKey = new PendingIntentRecord.Key(paramInt1, paramString1, localActivityRecord, paramString2, paramInt3, paramArrayOfIntent, paramArrayOfString, paramInt4 & 0xC7FFFFFF, paramBundle);
                        WeakReference localWeakReference = (WeakReference)this.mIntentSenderRecords.get(localKey);
                        if (localWeakReference == null)
                            break label261;
                        localObject = (PendingIntentRecord)localWeakReference.get();
                        if (localObject == null)
                            break label310;
                        if (j != 0)
                            break label294;
                        if (k == 0)
                            continue;
                        if (((PendingIntentRecord)localObject).key.requestIntent != null)
                        {
                            localIntent1 = ((PendingIntentRecord)localObject).key.requestIntent;
                            if (paramArrayOfIntent == null)
                                break label267;
                        }
                    }
                }
                else
                {
                    label261: label267: for (Intent localIntent2 = paramArrayOfIntent[(-1 + paramArrayOfIntent.length)]; ; localIntent2 = null)
                    {
                        localIntent1.replaceExtras(localIntent2);
                        if (paramArrayOfIntent == null)
                            break label273;
                        paramArrayOfIntent[(-1 + paramArrayOfIntent.length)] = ((PendingIntentRecord)localObject).key.requestIntent;
                        ((PendingIntentRecord)localObject).key.allIntents = paramArrayOfIntent;
                        ((PendingIntentRecord)localObject).key.allResolvedTypes = paramArrayOfString;
                        break;
                        i = 0;
                        break label56;
                        j = 0;
                        break label68;
                        label255: k = 0;
                        break label80;
                        localObject = null;
                        break label138;
                    }
                    label273: ((PendingIntentRecord)localObject).key.allIntents = null;
                    ((PendingIntentRecord)localObject).key.allResolvedTypes = null;
                    continue;
                    label294: ((PendingIntentRecord)localObject).canceled = true;
                    this.mIntentSenderRecords.remove(localKey);
                    label310: if (i == 0)
                    {
                        localObject = new PendingIntentRecord(this, localKey, paramInt2);
                        this.mIntentSenderRecords.put(localKey, ((PendingIntentRecord)localObject).ref);
                        if (paramInt1 == 3)
                        {
                            if (localActivityRecord.pendingResults == null)
                                localActivityRecord.pendingResults = new HashSet();
                            localActivityRecord.pendingResults.add(((PendingIntentRecord)localObject).ref);
                        }
                    }
                }
            }
        }
    }

    public int getLaunchedFromUid(IBinder paramIBinder)
    {
        ActivityRecord localActivityRecord = ActivityRecord.forToken(paramIBinder);
        if (localActivityRecord == null);
        for (int i = -1; ; i = localActivityRecord.launchedFromUid)
            return i;
    }

    public void getMemoryInfo(ActivityManager.MemoryInfo paramMemoryInfo)
    {
        long l1 = this.mProcessList.getMemLevel(6);
        long l2 = this.mProcessList.getMemLevel(ProcessList.HIDDEN_APP_MIN_ADJ);
        paramMemoryInfo.availMem = Process.getFreeMemory();
        paramMemoryInfo.totalMem = Process.getTotalMemory();
        paramMemoryInfo.threshold = l1;
        if (paramMemoryInfo.availMem < l1 + (l2 - l1) / 2L);
        for (boolean bool = true; ; bool = false)
        {
            paramMemoryInfo.lowMemory = bool;
            paramMemoryInfo.hiddenAppThreshold = l2;
            paramMemoryInfo.secondaryServerThreshold = this.mProcessList.getMemLevel(5);
            paramMemoryInfo.visibleAppThreshold = this.mProcessList.getMemLevel(1);
            paramMemoryInfo.foregroundAppThreshold = this.mProcessList.getMemLevel(0);
            return;
        }
    }

    public void getMyMemoryState(ActivityManager.RunningAppProcessInfo paramRunningAppProcessInfo)
    {
        enforceNotIsolatedCaller("getMyMemoryState");
        try
        {
            synchronized (this.mPidsSelfLocked)
            {
                ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(Binder.getCallingPid());
                fillInProcMemInfo(localProcessRecord, paramRunningAppProcessInfo);
                return;
            }
        }
        finally
        {
        }
    }

    public boolean getPackageAskScreenCompat(String paramString)
    {
        enforceNotIsolatedCaller("getPackageAskScreenCompat");
        try
        {
            boolean bool = this.mCompatModePackages.getPackageAskCompatModeLocked(paramString);
            return bool;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public String getPackageForIntentSender(IIntentSender paramIIntentSender)
    {
        String str = null;
        if (!(paramIIntentSender instanceof PendingIntentRecord));
        while (true)
        {
            return str;
            try
            {
                str = ((PendingIntentRecord)paramIIntentSender).key.packageName;
            }
            catch (ClassCastException localClassCastException)
            {
            }
        }
    }

    public String getPackageForToken(IBinder paramIBinder)
    {
        String str;
        try
        {
            ActivityRecord localActivityRecord = this.mMainStack.isInStackLocked(paramIBinder);
            if (localActivityRecord == null)
                str = null;
            else
                str = localActivityRecord.packageName;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
        return str;
    }

    public int getPackageScreenCompatMode(String paramString)
    {
        enforceNotIsolatedCaller("getPackageScreenCompatMode");
        try
        {
            int i = this.mCompatModePackages.getPackageScreenCompatModeLocked(paramString);
            return i;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public int getProcessLimit()
    {
        try
        {
            int i = this.mProcessLimitOverride;
            return i;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public Debug.MemoryInfo[] getProcessMemoryInfo(int[] paramArrayOfInt)
        throws RemoteException
    {
        enforceNotIsolatedCaller("getProcessMemoryInfo");
        Debug.MemoryInfo[] arrayOfMemoryInfo = new Debug.MemoryInfo[paramArrayOfInt.length];
        for (int i = -1 + paramArrayOfInt.length; i >= 0; i--)
        {
            arrayOfMemoryInfo[i] = new Debug.MemoryInfo();
            Debug.getMemoryInfo(paramArrayOfInt[i], arrayOfMemoryInfo[i]);
        }
        return arrayOfMemoryInfo;
    }

    public long[] getProcessPss(int[] paramArrayOfInt)
        throws RemoteException
    {
        enforceNotIsolatedCaller("getProcessPss");
        long[] arrayOfLong = new long[paramArrayOfInt.length];
        for (int i = -1 + paramArrayOfInt.length; i >= 0; i--)
            arrayOfLong[i] = Debug.getPss(paramArrayOfInt[i]);
        return arrayOfLong;
    }

    final ProcessRecord getProcessRecordLocked(String paramString, int paramInt)
    {
        SparseArray localSparseArray;
        ProcessRecord localProcessRecord;
        if (paramInt == 1000)
        {
            localSparseArray = (SparseArray)this.mProcessNames.getMap().get(paramString);
            if (localSparseArray == null)
                localProcessRecord = null;
        }
        while (true)
        {
            return localProcessRecord;
            int i = localSparseArray.size();
            for (int j = 0; ; j++)
            {
                if (j >= i)
                    break label83;
                if (UserId.isSameUser(localSparseArray.keyAt(j), paramInt))
                {
                    localProcessRecord = (ProcessRecord)localSparseArray.valueAt(j);
                    break;
                }
            }
            label83: localProcessRecord = (ProcessRecord)this.mProcessNames.get(paramString, paramInt);
        }
    }

    // ERROR //
    public List<ActivityManager.ProcessErrorStateInfo> getProcessesInErrorState()
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 5635
        //     4: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     7: aload_0
        //     8: monitorenter
        //     9: aload_0
        //     10: getfield 582	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
        //     13: invokevirtual 1313	java/util/ArrayList:size	()I
        //     16: istore_2
        //     17: iload_2
        //     18: iconst_1
        //     19: isub
        //     20: istore_3
        //     21: aconst_null
        //     22: astore 4
        //     24: iload_3
        //     25: iflt +177 -> 202
        //     28: aload_0
        //     29: getfield 582	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
        //     32: iload_3
        //     33: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     36: checkcast 982	com/android/server/am/ProcessRecord
        //     39: astore 6
        //     41: aload 6
        //     43: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     46: ifnull +180 -> 226
        //     49: aload 6
        //     51: getfield 2029	com/android/server/am/ProcessRecord:crashing	Z
        //     54: ifne +11 -> 65
        //     57: aload 6
        //     59: getfield 2032	com/android/server/am/ProcessRecord:notResponding	Z
        //     62: ifeq +164 -> 226
        //     65: aconst_null
        //     66: astore 8
        //     68: aload 6
        //     70: getfield 2029	com/android/server/am/ProcessRecord:crashing	Z
        //     73: ifeq +50 -> 123
        //     76: aload 6
        //     78: getfield 3492	com/android/server/am/ProcessRecord:crashingReport	Landroid/app/ActivityManager$ProcessErrorStateInfo;
        //     81: astore 8
        //     83: aload 8
        //     85: ifnull +56 -> 141
        //     88: aload 4
        //     90: ifnonnull +129 -> 219
        //     93: new 536	java/util/ArrayList
        //     96: dup
        //     97: iconst_1
        //     98: invokespecial 2682	java/util/ArrayList:<init>	(I)V
        //     101: astore 7
        //     103: aload 7
        //     105: aload 8
        //     107: invokeinterface 1796 2 0
        //     112: pop
        //     113: iinc 3 255
        //     116: aload 7
        //     118: astore 4
        //     120: goto -96 -> 24
        //     123: aload 6
        //     125: getfield 2032	com/android/server/am/ProcessRecord:notResponding	Z
        //     128: ifeq -45 -> 83
        //     131: aload 6
        //     133: getfield 2497	com/android/server/am/ProcessRecord:notRespondingReport	Landroid/app/ActivityManager$ProcessErrorStateInfo;
        //     136: astore 8
        //     138: goto -55 -> 83
        //     141: ldc 221
        //     143: new 598	java/lang/StringBuilder
        //     146: dup
        //     147: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     150: ldc_w 5637
        //     153: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     156: aload 6
        //     158: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     161: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     164: ldc_w 5639
        //     167: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     170: aload 6
        //     172: getfield 2029	com/android/server/am/ProcessRecord:crashing	Z
        //     175: invokevirtual 3395	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
        //     178: ldc_w 5641
        //     181: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     184: aload 6
        //     186: getfield 2032	com/android/server/am/ProcessRecord:notResponding	Z
        //     189: invokevirtual 3395	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
        //     192: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     195: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     198: pop
        //     199: goto +27 -> 226
        //     202: aload_0
        //     203: monitorexit
        //     204: aload 4
        //     206: areturn
        //     207: astore_1
        //     208: aload_0
        //     209: monitorexit
        //     210: aload_1
        //     211: athrow
        //     212: astore_1
        //     213: aload 4
        //     215: pop
        //     216: goto -8 -> 208
        //     219: aload 4
        //     221: astore 7
        //     223: goto -120 -> 103
        //     226: aload 4
        //     228: astore 7
        //     230: goto -117 -> 113
        //
        // Exception table:
        //     from	to	target	type
        //     9	17	207	finally
        //     103	113	207	finally
        //     208	210	207	finally
        //     28	103	212	finally
        //     123	204	212	finally
    }

    public String getProviderMimeType(Uri paramUri)
    {
        enforceNotIsolatedCaller("getProviderMimeType");
        String str1 = paramUri.getAuthority();
        long l = Binder.clearCallingIdentity();
        IActivityManager.ContentProviderHolder localContentProviderHolder = null;
        while (true)
        {
            try
            {
                localContentProviderHolder = getContentProviderExternalUnchecked(str1, null);
                if (localContentProviderHolder != null)
                {
                    String str3 = localContentProviderHolder.provider.getType(paramUri);
                    str2 = str3;
                    return str2;
                }
            }
            catch (RemoteException localRemoteException)
            {
                Log.w("ActivityManager", "Content provider dead retrieving " + paramUri, localRemoteException);
                if (localContentProviderHolder != null)
                    removeContentProviderExternalUnchecked(str1, null);
                Binder.restoreCallingIdentity(l);
                str2 = null;
                continue;
            }
            finally
            {
                if (localContentProviderHolder != null)
                    removeContentProviderExternalUnchecked(str1, null);
                Binder.restoreCallingIdentity(l);
            }
            if (localContentProviderHolder != null)
                removeContentProviderExternalUnchecked(str1, null);
            Binder.restoreCallingIdentity(l);
            String str2 = null;
        }
    }

    // ERROR //
    public List<android.app.ActivityManager.RecentTaskInfo> getRecentTasks(int paramInt1, int paramInt2)
    {
        // Byte code:
        //     0: iconst_0
        //     1: istore_3
        //     2: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     5: istore 4
        //     7: iload 4
        //     9: sipush 1000
        //     12: if_icmpne +115 -> 127
        //     15: aload_0
        //     16: getfield 5482	com/android/server/am/ActivityManagerService:mCurrentUserId	I
        //     19: istore 5
        //     21: aload_0
        //     22: monitorenter
        //     23: aload_0
        //     24: ldc_w 5656
        //     27: ldc_w 5658
        //     30: invokevirtual 4280	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
        //     33: aload_0
        //     34: ldc_w 5660
        //     37: invokevirtual 4575	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
        //     40: ifne +5 -> 45
        //     43: iconst_1
        //     44: istore_3
        //     45: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     48: astore 7
        //     50: aload_0
        //     51: getfield 547	com/android/server/am/ActivityManagerService:mRecentTasks	Ljava/util/ArrayList;
        //     54: invokevirtual 1313	java/util/ArrayList:size	()I
        //     57: istore 8
        //     59: iload_1
        //     60: iload 8
        //     62: if_icmpge +75 -> 137
        //     65: iload_1
        //     66: istore 9
        //     68: new 536	java/util/ArrayList
        //     71: dup
        //     72: iload 9
        //     74: invokespecial 2682	java/util/ArrayList:<init>	(I)V
        //     77: astore 10
        //     79: iconst_0
        //     80: istore 11
        //     82: iload 11
        //     84: iload 8
        //     86: if_icmpge +293 -> 379
        //     89: iload_1
        //     90: ifle +289 -> 379
        //     93: aload_0
        //     94: getfield 547	com/android/server/am/ActivityManagerService:mRecentTasks	Ljava/util/ArrayList;
        //     97: iload 11
        //     99: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     102: checkcast 2148	com/android/server/am/TaskRecord
        //     105: astore 12
        //     107: aload 12
        //     109: getfield 2155	com/android/server/am/TaskRecord:userId	I
        //     112: istore 13
        //     114: iload 13
        //     116: iload 5
        //     118: if_icmpeq +26 -> 144
        //     121: iinc 11 1
        //     124: goto -42 -> 82
        //     127: iload 4
        //     129: invokestatic 2005	android/os/UserId:getUserId	(I)I
        //     132: istore 5
        //     134: goto -113 -> 21
        //     137: iload 8
        //     139: istore 9
        //     141: goto -73 -> 68
        //     144: iload 11
        //     146: ifeq +32 -> 178
        //     149: iload_2
        //     150: iconst_1
        //     151: iand
        //     152: ifne +26 -> 178
        //     155: aload 12
        //     157: getfield 2149	com/android/server/am/TaskRecord:intent	Landroid/content/Intent;
        //     160: ifnull +18 -> 178
        //     163: ldc_w 5661
        //     166: aload 12
        //     168: getfield 2149	com/android/server/am/TaskRecord:intent	Landroid/content/Intent;
        //     171: invokevirtual 1800	android/content/Intent:getFlags	()I
        //     174: iand
        //     175: ifne -54 -> 121
        //     178: new 5663	android/app/ActivityManager$RecentTaskInfo
        //     181: dup
        //     182: invokespecial 5664	android/app/ActivityManager$RecentTaskInfo:<init>	()V
        //     185: astore 14
        //     187: aload 12
        //     189: getfield 5667	com/android/server/am/TaskRecord:numActivities	I
        //     192: ifle +204 -> 396
        //     195: aload 12
        //     197: getfield 3276	com/android/server/am/TaskRecord:taskId	I
        //     200: istore 15
        //     202: aload 14
        //     204: iload 15
        //     206: putfield 5668	android/app/ActivityManager$RecentTaskInfo:id	I
        //     209: aload 14
        //     211: aload 12
        //     213: getfield 3276	com/android/server/am/TaskRecord:taskId	I
        //     216: putfield 5671	android/app/ActivityManager$RecentTaskInfo:persistentId	I
        //     219: aload 12
        //     221: getfield 2149	com/android/server/am/TaskRecord:intent	Landroid/content/Intent;
        //     224: ifnull +111 -> 335
        //     227: aload 12
        //     229: getfield 2149	com/android/server/am/TaskRecord:intent	Landroid/content/Intent;
        //     232: astore 16
        //     234: aload 14
        //     236: new 1353	android/content/Intent
        //     239: dup
        //     240: aload 16
        //     242: invokespecial 1624	android/content/Intent:<init>	(Landroid/content/Intent;)V
        //     245: putfield 5674	android/app/ActivityManager$RecentTaskInfo:baseIntent	Landroid/content/Intent;
        //     248: iload_3
        //     249: ifne +16 -> 265
        //     252: aload 14
        //     254: getfield 5674	android/app/ActivityManager$RecentTaskInfo:baseIntent	Landroid/content/Intent;
        //     257: aconst_null
        //     258: checkcast 1656	android/os/Bundle
        //     261: invokevirtual 5677	android/content/Intent:replaceExtras	(Landroid/os/Bundle;)Landroid/content/Intent;
        //     264: pop
        //     265: aload 14
        //     267: aload 12
        //     269: getfield 5680	com/android/server/am/TaskRecord:origActivity	Landroid/content/ComponentName;
        //     272: putfield 5681	android/app/ActivityManager$RecentTaskInfo:origActivity	Landroid/content/ComponentName;
        //     275: aload 14
        //     277: aload 12
        //     279: getfield 5687	com/android/server/am/ThumbnailHolder:lastDescription	Ljava/lang/CharSequence;
        //     282: putfield 5690	android/app/ActivityManager$RecentTaskInfo:description	Ljava/lang/CharSequence;
        //     285: iload_2
        //     286: iconst_2
        //     287: iand
        //     288: ifeq +33 -> 321
        //     291: aload 14
        //     293: getfield 5681	android/app/ActivityManager$RecentTaskInfo:origActivity	Landroid/content/ComponentName;
        //     296: ifnull +49 -> 345
        //     299: aload 7
        //     301: aload 14
        //     303: getfield 5681	android/app/ActivityManager$RecentTaskInfo:origActivity	Landroid/content/ComponentName;
        //     306: iconst_0
        //     307: iload 5
        //     309: invokeinterface 5693 4 0
        //     314: astore 20
        //     316: aload 20
        //     318: ifnull -197 -> 121
        //     321: aload 10
        //     323: aload 14
        //     325: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     328: pop
        //     329: iinc 1 255
        //     332: goto -211 -> 121
        //     335: aload 12
        //     337: getfield 2154	com/android/server/am/TaskRecord:affinityIntent	Landroid/content/Intent;
        //     340: astore 16
        //     342: goto -108 -> 234
        //     345: aload 14
        //     347: getfield 5674	android/app/ActivityManager$RecentTaskInfo:baseIntent	Landroid/content/Intent;
        //     350: ifnull -29 -> 321
        //     353: aload 7
        //     355: aload 14
        //     357: getfield 5674	android/app/ActivityManager$RecentTaskInfo:baseIntent	Landroid/content/Intent;
        //     360: aconst_null
        //     361: iconst_0
        //     362: iload 5
        //     364: invokeinterface 5696 5 0
        //     369: astore 19
        //     371: aload 19
        //     373: ifnonnull -52 -> 321
        //     376: goto -255 -> 121
        //     379: aload_0
        //     380: monitorexit
        //     381: aload 10
        //     383: areturn
        //     384: astore 6
        //     386: aload_0
        //     387: monitorexit
        //     388: aload 6
        //     390: athrow
        //     391: astore 18
        //     393: goto -72 -> 321
        //     396: bipush 255
        //     398: istore 15
        //     400: goto -198 -> 202
        //
        // Exception table:
        //     from	to	target	type
        //     23	114	384	finally
        //     155	285	384	finally
        //     291	316	384	finally
        //     321	342	384	finally
        //     345	371	384	finally
        //     379	388	384	finally
        //     291	316	391	android/os/RemoteException
        //     345	371	391	android/os/RemoteException
    }

    final ProcessRecord getRecordForAppLocked(IApplicationThread paramIApplicationThread)
    {
        ProcessRecord localProcessRecord = null;
        if (paramIApplicationThread == null);
        while (true)
        {
            return localProcessRecord;
            int i = getLRURecordIndexForAppLocked(paramIApplicationThread);
            if (i >= 0)
                localProcessRecord = (ProcessRecord)this.mLruProcesses.get(i);
        }
    }

    public int getRequestedOrientation(IBinder paramIBinder)
    {
        int i;
        try
        {
            ActivityRecord localActivityRecord = this.mMainStack.isInStackLocked(paramIBinder);
            if (localActivityRecord == null)
                i = -1;
            else
                i = this.mWindowManager.getAppOrientation(localActivityRecord.appToken);
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
        return i;
    }

    public List<ActivityManager.RunningAppProcessInfo> getRunningAppProcesses()
    {
        enforceNotIsolatedCaller("getRunningAppProcesses");
        try
        {
            int i = this.mLruProcesses.size();
            int j = i - 1;
            localObject3 = null;
            while (true)
            {
                if (j < 0)
                    break label249;
                try
                {
                    ProcessRecord localProcessRecord = (ProcessRecord)this.mLruProcesses.get(j);
                    if ((localProcessRecord.thread == null) || (localProcessRecord.crashing) || (localProcessRecord.notResponding))
                        break label265;
                    ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = new ActivityManager.RunningAppProcessInfo(localProcessRecord.processName, localProcessRecord.pid, localProcessRecord.getPackageList());
                    fillInProcMemInfo(localProcessRecord, localRunningAppProcessInfo);
                    if ((localProcessRecord.adjSource instanceof ProcessRecord))
                    {
                        localRunningAppProcessInfo.importanceReasonPid = ((ProcessRecord)localProcessRecord.adjSource).pid;
                        localRunningAppProcessInfo.importanceReasonImportance = oomAdjToImportance(localProcessRecord.adjSourceOom, null);
                    }
                    while (true)
                    {
                        if ((localProcessRecord.adjTarget instanceof ComponentName))
                            localRunningAppProcessInfo.importanceReasonComponent = ((ComponentName)localProcessRecord.adjTarget);
                        if (localObject3 != null)
                            break label258;
                        localObject4 = new ArrayList();
                        ((List)localObject4).add(localRunningAppProcessInfo);
                        j--;
                        localObject3 = localObject4;
                        break;
                        if ((localProcessRecord.adjSource instanceof ActivityRecord))
                        {
                            ActivityRecord localActivityRecord = (ActivityRecord)localProcessRecord.adjSource;
                            if (localActivityRecord.app != null)
                                localRunningAppProcessInfo.importanceReasonPid = localActivityRecord.app.pid;
                        }
                    }
                }
                finally
                {
                }
            }
            throw localObject1;
            label249: return localObject3;
        }
        finally
        {
            while (true)
            {
                Object localObject3;
                continue;
                label258: Object localObject4 = localObject3;
                continue;
                label265: localObject4 = localObject3;
            }
        }
    }

    public List<ApplicationInfo> getRunningExternalApplications()
    {
        enforceNotIsolatedCaller("getRunningExternalApplications");
        List localList = getRunningAppProcesses();
        ArrayList localArrayList = new ArrayList();
        if ((localList != null) && (localList.size() > 0))
        {
            HashSet localHashSet = new HashSet();
            Iterator localIterator1 = localList.iterator();
            while (localIterator1.hasNext())
            {
                ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)localIterator1.next();
                if (localRunningAppProcessInfo.pkgList != null)
                {
                    String[] arrayOfString = localRunningAppProcessInfo.pkgList;
                    int i = arrayOfString.length;
                    for (int j = 0; j < i; j++)
                        localHashSet.add(arrayOfString[j]);
                }
            }
            IPackageManager localIPackageManager = AppGlobals.getPackageManager();
            Iterator localIterator2 = localHashSet.iterator();
            while (localIterator2.hasNext())
            {
                String str = (String)localIterator2.next();
                try
                {
                    ApplicationInfo localApplicationInfo = localIPackageManager.getApplicationInfo(str, 0, UserId.getCallingUserId());
                    if ((0x40000 & localApplicationInfo.flags) != 0)
                        localArrayList.add(localApplicationInfo);
                }
                catch (RemoteException localRemoteException)
                {
                }
            }
        }
        return localArrayList;
    }

    public PendingIntent getRunningServiceControlPanel(ComponentName paramComponentName)
    {
        enforceNotIsolatedCaller("getRunningServiceControlPanel");
        while (true)
        {
            int j;
            PendingIntent localPendingIntent;
            try
            {
                int i = UserId.getUserId(Binder.getCallingUid());
                ServiceRecord localServiceRecord = this.mServiceMap.getServiceByName(paramComponentName, i);
                if (localServiceRecord != null)
                {
                    Iterator localIterator = localServiceRecord.connections.values().iterator();
                    if (localIterator.hasNext())
                    {
                        ArrayList localArrayList = (ArrayList)localIterator.next();
                        j = 0;
                        if (j >= localArrayList.size())
                            continue;
                        if (((ConnectionRecord)localArrayList.get(j)).clientIntent == null)
                            break label134;
                        localPendingIntent = ((ConnectionRecord)localArrayList.get(j)).clientIntent;
                        continue;
                    }
                }
                localPendingIntent = null;
            }
            finally
            {
            }
            label134: j++;
        }
    }

    // ERROR //
    public List<ActivityManager.RunningServiceInfo> getServices(int paramInt1, int paramInt2)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 5735
        //     4: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     7: aload_0
        //     8: monitorenter
        //     9: new 536	java/util/ArrayList
        //     12: dup
        //     13: invokespecial 537	java/util/ArrayList:<init>	()V
        //     16: astore_3
        //     17: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     20: invokestatic 2005	android/os/UserId:getUserId	(I)I
        //     23: istore 5
        //     25: aload_0
        //     26: getfield 613	com/android/server/am/ActivityManagerService:mServiceMap	Lcom/android/server/am/ActivityManagerService$ServiceMap;
        //     29: iload 5
        //     31: invokevirtual 2159	com/android/server/am/ActivityManagerService$ServiceMap:getAllServices	(I)Ljava/util/Collection;
        //     34: invokeinterface 5296 1 0
        //     39: ifle +66 -> 105
        //     42: aload_0
        //     43: getfield 613	com/android/server/am/ActivityManagerService:mServiceMap	Lcom/android/server/am/ActivityManagerService$ServiceMap;
        //     46: iload 5
        //     48: invokevirtual 2159	com/android/server/am/ActivityManagerService$ServiceMap:getAllServices	(I)Ljava/util/Collection;
        //     51: invokeinterface 1412 1 0
        //     56: astore 10
        //     58: aload 10
        //     60: invokeinterface 1016 1 0
        //     65: ifeq +40 -> 105
        //     68: aload_3
        //     69: invokevirtual 1313	java/util/ArrayList:size	()I
        //     72: iload_1
        //     73: if_icmpge +32 -> 105
        //     76: aload_3
        //     77: aload_0
        //     78: aload 10
        //     80: invokeinterface 1020 1 0
        //     85: checkcast 1316	com/android/server/am/ServiceRecord
        //     88: invokevirtual 5739	com/android/server/am/ActivityManagerService:makeRunningServiceInfoLocked	(Lcom/android/server/am/ServiceRecord;)Landroid/app/ActivityManager$RunningServiceInfo;
        //     91: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     94: pop
        //     95: goto -37 -> 58
        //     98: astore 4
        //     100: aload_0
        //     101: monitorexit
        //     102: aload 4
        //     104: athrow
        //     105: iconst_0
        //     106: istore 6
        //     108: iload 6
        //     110: aload_0
        //     111: getfield 619	com/android/server/am/ActivityManagerService:mRestartingServices	Ljava/util/ArrayList;
        //     114: invokevirtual 1313	java/util/ArrayList:size	()I
        //     117: if_icmpge +56 -> 173
        //     120: aload_3
        //     121: invokevirtual 1313	java/util/ArrayList:size	()I
        //     124: iload_1
        //     125: if_icmpge +48 -> 173
        //     128: aload_0
        //     129: getfield 619	com/android/server/am/ActivityManagerService:mRestartingServices	Ljava/util/ArrayList;
        //     132: iload 6
        //     134: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     137: checkcast 1316	com/android/server/am/ServiceRecord
        //     140: astore 7
        //     142: aload_0
        //     143: aload 7
        //     145: invokevirtual 5739	com/android/server/am/ActivityManagerService:makeRunningServiceInfoLocked	(Lcom/android/server/am/ServiceRecord;)Landroid/app/ActivityManager$RunningServiceInfo;
        //     148: astore 8
        //     150: aload 8
        //     152: aload 7
        //     154: getfield 3827	com/android/server/am/ServiceRecord:nextRestartTime	J
        //     157: putfield 5744	android/app/ActivityManager$RunningServiceInfo:restarting	J
        //     160: aload_3
        //     161: aload 8
        //     163: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     166: pop
        //     167: iinc 6 1
        //     170: goto -62 -> 108
        //     173: aload_0
        //     174: monitorexit
        //     175: aload_3
        //     176: areturn
        //
        // Exception table:
        //     from	to	target	type
        //     9	102	98	finally
        //     108	175	98	finally
    }

    public int getTaskForActivity(IBinder paramIBinder, boolean paramBoolean)
    {
        try
        {
            int i = getTaskForActivityLocked(paramIBinder, paramBoolean);
            return i;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    int getTaskForActivityLocked(IBinder paramIBinder, boolean paramBoolean)
    {
        int i = -1;
        int j = this.mMainStack.mHistory.size();
        TaskRecord localTaskRecord = null;
        for (int k = 0; ; k++)
        {
            ActivityRecord localActivityRecord;
            if (k < j)
            {
                localActivityRecord = (ActivityRecord)this.mMainStack.mHistory.get(k);
                if (localActivityRecord.appToken != paramIBinder)
                    break label79;
                if ((!paramBoolean) || (localTaskRecord != localActivityRecord.task))
                    i = localActivityRecord.task.taskId;
            }
            return i;
            label79: localTaskRecord = localActivityRecord.task;
        }
    }

    public ActivityManager.TaskThumbnails getTaskThumbnails(int paramInt)
    {
        ActivityManager.TaskThumbnails localTaskThumbnails;
        try
        {
            enforceCallingPermission("android.permission.READ_FRAME_BUFFER", "getTaskThumbnails()");
            TaskRecord localTaskRecord = taskForIdLocked(paramInt);
            if (localTaskRecord != null)
                localTaskThumbnails = this.mMainStack.getTaskThumbnailsLocked(localTaskRecord);
            else
                localTaskThumbnails = null;
        }
        finally
        {
        }
        return localTaskThumbnails;
    }

    // ERROR //
    public List getTasks(int paramInt1, int paramInt2, android.app.IThumbnailReceiver paramIThumbnailReceiver)
    {
        // Byte code:
        //     0: new 536	java/util/ArrayList
        //     3: dup
        //     4: invokespecial 537	java/util/ArrayList:<init>	()V
        //     7: astore 4
        //     9: aconst_null
        //     10: astore 5
        //     12: aconst_null
        //     13: astore 6
        //     15: aload_0
        //     16: monitorenter
        //     17: aload_0
        //     18: ldc_w 5656
        //     21: invokevirtual 4575	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
        //     24: istore 8
        //     26: iload 8
        //     28: ifeq +84 -> 112
        //     31: aload_3
        //     32: ifnull +9 -> 41
        //     35: aload_3
        //     36: invokeinterface 5768 1 0
        //     41: new 598	java/lang/StringBuilder
        //     44: dup
        //     45: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     48: ldc_w 5770
        //     51: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     54: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     57: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     60: ldc_w 1697
        //     63: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     66: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     69: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     72: ldc_w 1699
        //     75: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     78: ldc_w 5656
        //     81: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     84: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     87: astore 28
        //     89: ldc 221
        //     91: aload 28
        //     93: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     96: pop
        //     97: new 1701	java/lang/SecurityException
        //     100: dup
        //     101: aload 28
        //     103: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     106: athrow
        //     107: aload_0
        //     108: monitorexit
        //     109: aload 7
        //     111: athrow
        //     112: bipush 255
        //     114: aload_0
        //     115: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     118: getfield 2934	com/android/server/am/ActivityStack:mHistory	Ljava/util/ArrayList;
        //     121: invokevirtual 1313	java/util/ArrayList:size	()I
        //     124: iadd
        //     125: istore 9
        //     127: iload 9
        //     129: iflt +365 -> 494
        //     132: aload_0
        //     133: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     136: getfield 2934	com/android/server/am/ActivityStack:mHistory	Ljava/util/ArrayList;
        //     139: iload 9
        //     141: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     144: checkcast 1290	com/android/server/am/ActivityRecord
        //     147: astore 27
        //     149: aload 27
        //     151: astore 10
        //     153: aconst_null
        //     154: astore 11
        //     156: aconst_null
        //     157: astore 12
        //     159: iconst_0
        //     160: istore 13
        //     162: iconst_0
        //     163: istore 14
        //     165: aconst_null
        //     166: astore 15
        //     168: iload 9
        //     170: iflt +345 -> 515
        //     173: iload_1
        //     174: ifle +341 -> 515
        //     177: aload 10
        //     179: astore 22
        //     181: iinc 9 255
        //     184: iload 9
        //     186: iflt +314 -> 500
        //     189: aload_0
        //     190: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     193: getfield 2934	com/android/server/am/ActivityStack:mHistory	Ljava/util/ArrayList;
        //     196: iload 9
        //     198: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     201: checkcast 1290	com/android/server/am/ActivityRecord
        //     204: astore 10
        //     206: aload 11
        //     208: ifnull +27 -> 235
        //     211: aload 11
        //     213: getfield 2291	com/android/server/am/ActivityRecord:state	Lcom/android/server/am/ActivityStack$ActivityState;
        //     216: getstatic 5773	com/android/server/am/ActivityStack$ActivityState:INITIALIZING	Lcom/android/server/am/ActivityStack$ActivityState;
        //     219: if_acmpne +33 -> 252
        //     222: aload 11
        //     224: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     227: aload 22
        //     229: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     232: if_acmpne +20 -> 252
        //     235: aload 22
        //     237: astore 11
        //     239: aload 22
        //     241: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     244: astore 12
        //     246: iconst_0
        //     247: istore 14
        //     249: iconst_0
        //     250: istore 13
        //     252: iinc 13 1
        //     255: aload 22
        //     257: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     260: ifnull +17 -> 277
        //     263: aload 22
        //     265: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     268: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     271: ifnull +6 -> 277
        //     274: iinc 14 1
        //     277: aload 10
        //     279: ifnull +13 -> 292
        //     282: aload 10
        //     284: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     287: aload 12
        //     289: if_acmpeq +335 -> 624
        //     292: new 5775	android/app/ActivityManager$RunningTaskInfo
        //     295: dup
        //     296: invokespecial 5776	android/app/ActivityManager$RunningTaskInfo:<init>	()V
        //     299: astore 23
        //     301: aload 23
        //     303: aload 12
        //     305: getfield 3276	com/android/server/am/TaskRecord:taskId	I
        //     308: putfield 5777	android/app/ActivityManager$RunningTaskInfo:id	I
        //     311: aload 23
        //     313: aload 22
        //     315: getfield 1351	com/android/server/am/ActivityRecord:intent	Landroid/content/Intent;
        //     318: invokevirtual 1357	android/content/Intent:getComponent	()Landroid/content/ComponentName;
        //     321: putfield 5780	android/app/ActivityManager$RunningTaskInfo:baseActivity	Landroid/content/ComponentName;
        //     324: aload 23
        //     326: aload 11
        //     328: getfield 1351	com/android/server/am/ActivityRecord:intent	Landroid/content/Intent;
        //     331: invokevirtual 1357	android/content/Intent:getComponent	()Landroid/content/ComponentName;
        //     334: putfield 5783	android/app/ActivityManager$RunningTaskInfo:topActivity	Landroid/content/ComponentName;
        //     337: aload 11
        //     339: getfield 5787	com/android/server/am/ActivityRecord:thumbHolder	Lcom/android/server/am/ThumbnailHolder;
        //     342: ifnull +16 -> 358
        //     345: aload 23
        //     347: aload 11
        //     349: getfield 5787	com/android/server/am/ActivityRecord:thumbHolder	Lcom/android/server/am/ThumbnailHolder;
        //     352: getfield 5687	com/android/server/am/ThumbnailHolder:lastDescription	Ljava/lang/CharSequence;
        //     355: putfield 5788	android/app/ActivityManager$RunningTaskInfo:description	Ljava/lang/CharSequence;
        //     358: aload 23
        //     360: iload 13
        //     362: putfield 5789	android/app/ActivityManager$RunningTaskInfo:numActivities	I
        //     365: aload 23
        //     367: iload 14
        //     369: putfield 5792	android/app/ActivityManager$RunningTaskInfo:numRunning	I
        //     372: aload 23
        //     374: getfield 5796	android/app/ActivityManager$RunningTaskInfo:thumbnail	Landroid/graphics/Bitmap;
        //     377: ifnonnull +240 -> 617
        //     380: aload_3
        //     381: ifnull +236 -> 617
        //     384: aload 11
        //     386: getfield 2291	com/android/server/am/ActivityRecord:state	Lcom/android/server/am/ActivityStack$ActivityState;
        //     389: getstatic 2329	com/android/server/am/ActivityStack$ActivityState:RESUMED	Lcom/android/server/am/ActivityStack$ActivityState;
        //     392: if_acmpeq +14 -> 406
        //     395: aload 11
        //     397: getfield 2291	com/android/server/am/ActivityRecord:state	Lcom/android/server/am/ActivityStack$ActivityState;
        //     400: getstatic 2296	com/android/server/am/ActivityStack$ActivityState:PAUSING	Lcom/android/server/am/ActivityStack$ActivityState;
        //     403: if_acmpne +44 -> 447
        //     406: aload 11
        //     408: getfield 1917	com/android/server/am/ActivityRecord:idle	Z
        //     411: ifeq +95 -> 506
        //     414: aload 11
        //     416: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     419: ifnull +87 -> 506
        //     422: aload 11
        //     424: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     427: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     430: ifnull +76 -> 506
        //     433: aload 11
        //     435: astore 6
        //     437: aload 11
        //     439: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     442: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     445: astore 5
        //     447: aload 15
        //     449: ifnonnull +161 -> 610
        //     452: new 5798	com/android/server/am/PendingThumbnailsRecord
        //     455: dup
        //     456: aload_3
        //     457: invokespecial 5801	com/android/server/am/PendingThumbnailsRecord:<init>	(Landroid/app/IThumbnailReceiver;)V
        //     460: astore 24
        //     462: aload 24
        //     464: getfield 5804	com/android/server/am/PendingThumbnailsRecord:pendingRecords	Ljava/util/HashSet;
        //     467: aload 11
        //     469: invokevirtual 1901	java/util/HashSet:add	(Ljava/lang/Object;)Z
        //     472: pop
        //     473: aload 4
        //     475: aload 23
        //     477: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     480: pop
        //     481: iinc 1 255
        //     484: aconst_null
        //     485: astore 11
        //     487: aload 24
        //     489: astore 15
        //     491: goto -323 -> 168
        //     494: aconst_null
        //     495: astore 10
        //     497: goto -344 -> 153
        //     500: aconst_null
        //     501: astore 10
        //     503: goto -297 -> 206
        //     506: aload 11
        //     508: iconst_1
        //     509: putfield 5807	com/android/server/am/ActivityRecord:thumbnailNeeded	Z
        //     512: goto -65 -> 447
        //     515: aload 15
        //     517: ifnull +13 -> 530
        //     520: aload_0
        //     521: getfield 627	com/android/server/am/ActivityManagerService:mPendingThumbnails	Ljava/util/ArrayList;
        //     524: aload 15
        //     526: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     529: pop
        //     530: aload_0
        //     531: monitorexit
        //     532: aload 5
        //     534: ifnull +19 -> 553
        //     537: aload 6
        //     539: getfield 2587	com/android/server/am/ActivityRecord:appToken	Landroid/view/IApplicationToken$Stub;
        //     542: astore 19
        //     544: aload 5
        //     546: aload 19
        //     548: invokeinterface 5810 2 0
        //     553: aload 15
        //     555: ifnonnull +13 -> 568
        //     558: aload_3
        //     559: ifnull +9 -> 568
        //     562: aload_3
        //     563: invokeinterface 5768 1 0
        //     568: aload 4
        //     570: areturn
        //     571: astore 17
        //     573: ldc 221
        //     575: ldc_w 5812
        //     578: aload 17
        //     580: invokestatic 1336	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     583: pop
        //     584: aload_0
        //     585: aconst_null
        //     586: aload 6
        //     588: getfield 2587	com/android/server/am/ActivityRecord:appToken	Landroid/view/IApplicationToken$Stub;
        //     591: aconst_null
        //     592: aconst_null
        //     593: iconst_1
        //     594: invokevirtual 4144	com/android/server/am/ActivityManagerService:sendPendingThumbnail	(Lcom/android/server/am/ActivityRecord;Landroid/os/IBinder;Landroid/graphics/Bitmap;Ljava/lang/CharSequence;Z)V
        //     597: goto -44 -> 553
        //     600: astore 30
        //     602: goto -561 -> 41
        //     605: astore 16
        //     607: goto -39 -> 568
        //     610: aload 15
        //     612: astore 24
        //     614: goto -152 -> 462
        //     617: aload 15
        //     619: astore 24
        //     621: goto -148 -> 473
        //     624: aload 15
        //     626: astore 24
        //     628: goto -141 -> 487
        //     631: astore 7
        //     633: goto -526 -> 107
        //     636: astore 7
        //     638: aload 15
        //     640: pop
        //     641: goto -534 -> 107
        //
        // Exception table:
        //     from	to	target	type
        //     537	553	571	java/lang/Exception
        //     35	41	600	android/os/RemoteException
        //     562	568	605	android/os/RemoteException
        //     17	26	631	finally
        //     35	41	631	finally
        //     41	109	631	finally
        //     112	149	631	finally
        //     462	481	631	finally
        //     189	462	636	finally
        //     506	532	636	finally
    }

    public int getUidForIntentSender(IIntentSender paramIIntentSender)
    {
        if ((paramIIntentSender instanceof PendingIntentRecord));
        while (true)
        {
            try
            {
                i = ((PendingIntentRecord)paramIIntentSender).uid;
                return i;
            }
            catch (ClassCastException localClassCastException)
            {
            }
            int i = -1;
        }
    }

    public void goingToSleep()
    {
        if (checkCallingPermission("android.permission.DEVICE_POWER") != 0)
            throw new SecurityException("Requires permission android.permission.DEVICE_POWER");
        try
        {
            this.mWentToSleep = true;
            updateEventDispatchingLocked();
            if (!this.mSleeping)
            {
                this.mSleeping = true;
                this.mMainStack.stopIfSleepingLocked();
                checkExcessivePowerUsageLocked(false);
                this.mHandler.removeMessages(27);
                Message localMessage = this.mHandler.obtainMessage(27);
                this.mHandler.sendMessageDelayed(localMessage, 900000L);
            }
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public void grantUriPermission(IApplicationThread paramIApplicationThread, String paramString, Uri paramUri, int paramInt)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 5830
        //     4: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     7: aload_0
        //     8: monitorenter
        //     9: aload_0
        //     10: aload_1
        //     11: invokevirtual 3117	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
        //     14: astore 6
        //     16: aload 6
        //     18: ifnonnull +48 -> 66
        //     21: new 1701	java/lang/SecurityException
        //     24: dup
        //     25: new 598	java/lang/StringBuilder
        //     28: dup
        //     29: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     32: ldc_w 3119
        //     35: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     38: aload_1
        //     39: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     42: ldc_w 5832
        //     45: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     48: aload_3
        //     49: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     52: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     55: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     58: athrow
        //     59: astore 5
        //     61: aload_0
        //     62: monitorexit
        //     63: aload 5
        //     65: athrow
        //     66: aload_2
        //     67: ifnonnull +14 -> 81
        //     70: new 1572	java/lang/IllegalArgumentException
        //     73: dup
        //     74: ldc_w 5834
        //     77: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     80: athrow
        //     81: aload_3
        //     82: ifnonnull +14 -> 96
        //     85: new 1572	java/lang/IllegalArgumentException
        //     88: dup
        //     89: ldc_w 5836
        //     92: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     95: athrow
        //     96: aload_0
        //     97: aload 6
        //     99: getfield 1296	com/android/server/am/ProcessRecord:uid	I
        //     102: aload_2
        //     103: aload_3
        //     104: iload 4
        //     106: aconst_null
        //     107: invokevirtual 5840	com/android/server/am/ActivityManagerService:grantUriPermissionLocked	(ILjava/lang/String;Landroid/net/Uri;ILcom/android/server/am/UriPermissionOwner;)V
        //     110: aload_0
        //     111: monitorexit
        //     112: return
        //
        // Exception table:
        //     from	to	target	type
        //     9	63	59	finally
        //     70	112	59	finally
    }

    void grantUriPermissionFromIntentLocked(int paramInt, String paramString, Intent paramIntent, UriPermissionOwner paramUriPermissionOwner)
    {
        int i;
        NeededUriGrants localNeededUriGrants;
        if (paramIntent != null)
        {
            i = paramIntent.getFlags();
            localNeededUriGrants = checkGrantUriPermissionFromIntentLocked(paramInt, paramString, paramIntent, i, null);
            if (localNeededUriGrants != null)
                break label34;
        }
        while (true)
        {
            return;
            i = 0;
            break;
            label34: grantUriPermissionUncheckedFromIntentLocked(localNeededUriGrants, paramUriPermissionOwner);
        }
    }

    // ERROR //
    public void grantUriPermissionFromOwner(IBinder paramIBinder, int paramInt1, String paramString, Uri paramUri, int paramInt2)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_1
        //     3: invokestatic 5850	com/android/server/am/UriPermissionOwner:fromExternalToken	(Landroid/os/IBinder;)Lcom/android/server/am/UriPermissionOwner;
        //     6: astore 7
        //     8: aload 7
        //     10: ifnonnull +38 -> 48
        //     13: new 1572	java/lang/IllegalArgumentException
        //     16: dup
        //     17: new 598	java/lang/StringBuilder
        //     20: dup
        //     21: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     24: ldc_w 5852
        //     27: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     30: aload_1
        //     31: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     34: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     37: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     40: athrow
        //     41: astore 6
        //     43: aload_0
        //     44: monitorexit
        //     45: aload 6
        //     47: athrow
        //     48: iload_2
        //     49: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     52: if_icmpeq +23 -> 75
        //     55: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     58: invokestatic 4510	android/os/Process:myUid	()I
        //     61: if_icmpeq +14 -> 75
        //     64: new 1701	java/lang/SecurityException
        //     67: dup
        //     68: ldc_w 5854
        //     71: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     74: athrow
        //     75: aload_3
        //     76: ifnonnull +14 -> 90
        //     79: new 1572	java/lang/IllegalArgumentException
        //     82: dup
        //     83: ldc_w 5834
        //     86: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     89: athrow
        //     90: aload 4
        //     92: ifnonnull +14 -> 106
        //     95: new 1572	java/lang/IllegalArgumentException
        //     98: dup
        //     99: ldc_w 5836
        //     102: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     105: athrow
        //     106: aload_0
        //     107: iload_2
        //     108: aload_3
        //     109: aload 4
        //     111: iload 5
        //     113: aload 7
        //     115: invokevirtual 5840	com/android/server/am/ActivityManagerService:grantUriPermissionLocked	(ILjava/lang/String;Landroid/net/Uri;ILcom/android/server/am/UriPermissionOwner;)V
        //     118: aload_0
        //     119: monitorexit
        //     120: return
        //
        // Exception table:
        //     from	to	target	type
        //     2	45	41	finally
        //     48	120	41	finally
    }

    void grantUriPermissionLocked(int paramInt1, String paramString, Uri paramUri, int paramInt2, UriPermissionOwner paramUriPermissionOwner)
    {
        if (paramString == null)
            throw new NullPointerException("targetPkg");
        int i = checkGrantUriPermissionLocked(paramInt1, paramString, paramUri, paramInt2, -1);
        if (i < 0);
        while (true)
        {
            return;
            grantUriPermissionUncheckedLocked(i, paramString, paramUri, paramInt2, paramUriPermissionOwner);
        }
    }

    void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants paramNeededUriGrants, UriPermissionOwner paramUriPermissionOwner)
    {
        if (paramNeededUriGrants != null)
            for (int i = 0; i < paramNeededUriGrants.size(); i++)
                grantUriPermissionUncheckedLocked(paramNeededUriGrants.targetUid, paramNeededUriGrants.targetPkg, (Uri)paramNeededUriGrants.get(i), paramNeededUriGrants.flags, paramUriPermissionOwner);
    }

    void grantUriPermissionUncheckedLocked(int paramInt1, String paramString, Uri paramUri, int paramInt2, UriPermissionOwner paramUriPermissionOwner)
    {
        int i = paramInt2 & 0x3;
        if (i == 0);
        while (true)
        {
            return;
            HashMap localHashMap = (HashMap)this.mGrantedUriPermissions.get(paramInt1);
            if (localHashMap == null)
            {
                localHashMap = new HashMap();
                this.mGrantedUriPermissions.put(paramInt1, localHashMap);
            }
            UriPermission localUriPermission = (UriPermission)localHashMap.get(paramUri);
            if (localUriPermission == null)
            {
                localUriPermission = new UriPermission(paramInt1, paramUri);
                localHashMap.put(paramUri, localUriPermission);
            }
            localUriPermission.modeFlags = (i | localUriPermission.modeFlags);
            if (paramUriPermissionOwner == null)
            {
                localUriPermission.globalModeFlags = (i | localUriPermission.globalModeFlags);
            }
            else
            {
                if ((i & 0x1) != 0)
                {
                    localUriPermission.readOwners.add(paramUriPermissionOwner);
                    paramUriPermissionOwner.addReadPermission(localUriPermission);
                }
                if ((i & 0x2) != 0)
                {
                    localUriPermission.writeOwners.add(paramUriPermissionOwner);
                    paramUriPermissionOwner.addWritePermission(localUriPermission);
                }
            }
        }
    }

    public void handleApplicationCrash(IBinder paramIBinder, ApplicationErrorReport.CrashInfo paramCrashInfo)
    {
        ProcessRecord localProcessRecord = findAppProcess(paramIBinder, "Crash");
        String str;
        Object[] arrayOfObject;
        if (paramIBinder == null)
        {
            str = "system_server";
            arrayOfObject = new Object[7];
            arrayOfObject[0] = Integer.valueOf(Binder.getCallingPid());
            arrayOfObject[1] = str;
            if (localProcessRecord != null)
                break label147;
        }
        label147: for (int i = -1; ; i = localProcessRecord.info.flags)
        {
            arrayOfObject[2] = Integer.valueOf(i);
            arrayOfObject[3] = paramCrashInfo.exceptionClassName;
            arrayOfObject[4] = paramCrashInfo.exceptionMessage;
            arrayOfObject[5] = paramCrashInfo.throwFileName;
            arrayOfObject[6] = Integer.valueOf(paramCrashInfo.throwLineNumber);
            EventLog.writeEvent(30039, arrayOfObject);
            addErrorToDropBox("crash", localProcessRecord, str, null, null, null, null, null, paramCrashInfo);
            crashApplication(localProcessRecord, paramCrashInfo);
            return;
            if (localProcessRecord == null)
            {
                str = "unknown";
                break;
            }
            str = localProcessRecord.processName;
            break;
        }
    }

    public void handleApplicationStrictModeViolation(IBinder paramIBinder, int paramInt, StrictMode.ViolationInfo paramViolationInfo)
    {
        ProcessRecord localProcessRecord = findAppProcess(paramIBinder, "StrictMode");
        if (localProcessRecord == null);
        while (true)
        {
            return;
            Integer localInteger;
            int j;
            if ((paramInt & 0x80) != 0)
            {
                localInteger = Integer.valueOf(paramViolationInfo.hashCode());
                j = 1;
            }
            label60: AppErrorResult localAppErrorResult;
            synchronized (this.mAlreadyLoggedViolatedStacks)
            {
                if (this.mAlreadyLoggedViolatedStacks.contains(localInteger))
                {
                    j = 0;
                    if (j != 0)
                        logStrictModeViolationToDropBox(localProcessRecord, paramViolationInfo);
                    if ((paramInt & 0x20) == 0)
                        continue;
                    localAppErrorResult = new AppErrorResult();
                }
            }
            try
            {
                long l = Binder.clearCallingIdentity();
                Message localMessage = Message.obtain();
                localMessage.what = 26;
                HashMap localHashMap = new HashMap();
                localHashMap.put("result", localAppErrorResult);
                localHashMap.put("app", localProcessRecord);
                localHashMap.put("violationMask", Integer.valueOf(paramInt));
                localHashMap.put("info", paramViolationInfo);
                localMessage.obj = localHashMap;
                this.mHandler.sendMessage(localMessage);
                Binder.restoreCallingIdentity(l);
                int i = localAppErrorResult.get();
                Slog.w("ActivityManager", "handleApplicationStrictModeViolation; res=" + i);
                continue;
                if (this.mAlreadyLoggedViolatedStacks.size() >= 5000)
                    this.mAlreadyLoggedViolatedStacks.clear();
                this.mAlreadyLoggedViolatedStacks.add(localInteger);
                break label60;
                localObject2 = finally;
                throw localObject2;
            }
            finally
            {
            }
        }
    }

    public boolean handleApplicationWtf(IBinder paramIBinder, String paramString, ApplicationErrorReport.CrashInfo paramCrashInfo)
    {
        ProcessRecord localProcessRecord = findAppProcess(paramIBinder, "WTF");
        String str;
        int i;
        if (paramIBinder == null)
        {
            str = "system_server";
            Object[] arrayOfObject = new Object[5];
            arrayOfObject[0] = Integer.valueOf(Binder.getCallingPid());
            arrayOfObject[1] = str;
            if (localProcessRecord != null)
                break label167;
            i = -1;
            label50: arrayOfObject[2] = Integer.valueOf(i);
            arrayOfObject[3] = paramString;
            arrayOfObject[4] = paramCrashInfo.exceptionMessage;
            EventLog.writeEvent(30040, arrayOfObject);
            addErrorToDropBox("wtf", localProcessRecord, str, null, null, paramString, null, null, paramCrashInfo);
            if ((localProcessRecord == null) || (localProcessRecord.pid == Process.myPid()) || (Settings.Secure.getInt(this.mContext.getContentResolver(), "wtf_is_fatal", 0) == 0))
                break label180;
            crashApplication(localProcessRecord, paramCrashInfo);
        }
        label167: label180: for (boolean bool = true; ; bool = false)
        {
            return bool;
            if (localProcessRecord == null)
            {
                str = "unknown";
                break;
            }
            str = localProcessRecord.processName;
            break;
            i = localProcessRecord.info.flags;
            break label50;
        }
    }

    ContentProviderConnection incProviderCountLocked(ProcessRecord paramProcessRecord, ContentProviderRecord paramContentProviderRecord, IBinder paramIBinder, boolean paramBoolean)
    {
        int i;
        ContentProviderConnection localContentProviderConnection;
        if (paramProcessRecord != null)
        {
            i = 0;
            if (i < paramProcessRecord.conProviders.size())
            {
                localContentProviderConnection = (ContentProviderConnection)paramProcessRecord.conProviders.get(i);
                if (localContentProviderConnection.provider == paramContentProviderRecord)
                    if (paramBoolean)
                    {
                        localContentProviderConnection.stableCount = (1 + localContentProviderConnection.stableCount);
                        localContentProviderConnection.numStableIncs = (1 + localContentProviderConnection.numStableIncs);
                    }
            }
        }
        while (true)
        {
            return localContentProviderConnection;
            localContentProviderConnection.unstableCount = (1 + localContentProviderConnection.unstableCount);
            localContentProviderConnection.numUnstableIncs = (1 + localContentProviderConnection.numUnstableIncs);
            continue;
            i++;
            break;
            localContentProviderConnection = new ContentProviderConnection(paramContentProviderRecord, paramProcessRecord);
            if (paramBoolean)
            {
                localContentProviderConnection.stableCount = 1;
                localContentProviderConnection.numStableIncs = 1;
            }
            while (true)
            {
                paramContentProviderRecord.connections.add(localContentProviderConnection);
                paramProcessRecord.conProviders.add(localContentProviderConnection);
                break;
                localContentProviderConnection.unstableCount = 1;
                localContentProviderConnection.numUnstableIncs = 1;
            }
            paramContentProviderRecord.addExternalProcessHandleLocked(paramIBinder);
            localContentProviderConnection = null;
        }
    }

    boolean isAllowedWhileBooting(ApplicationInfo paramApplicationInfo)
    {
        if ((0x8 & paramApplicationInfo.flags) != 0);
        for (boolean bool = true; ; bool = false)
            return bool;
    }

    // ERROR //
    public boolean isImmersive(IBinder paramIBinder)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_0
        //     3: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     6: aload_1
        //     7: invokevirtual 3098	com/android/server/am/ActivityStack:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
        //     10: astore_3
        //     11: aload_3
        //     12: ifnonnull +16 -> 28
        //     15: new 1572	java/lang/IllegalArgumentException
        //     18: dup
        //     19: invokespecial 5930	java/lang/IllegalArgumentException:<init>	()V
        //     22: athrow
        //     23: astore_2
        //     24: aload_0
        //     25: monitorexit
        //     26: aload_2
        //     27: athrow
        //     28: aload_3
        //     29: getfield 5933	com/android/server/am/ActivityRecord:immersive	Z
        //     32: istore 4
        //     34: aload_0
        //     35: monitorexit
        //     36: iload 4
        //     38: ireturn
        //
        // Exception table:
        //     from	to	target	type
        //     2	26	23	finally
        //     28	36	23	finally
    }

    public boolean isIntentSenderAnActivity(IIntentSender paramIIntentSender)
    {
        boolean bool = false;
        if (!(paramIIntentSender instanceof PendingIntentRecord));
        while (true)
        {
            return bool;
            try
            {
                int i = ((PendingIntentRecord)paramIIntentSender).key.type;
                if (i == 2)
                    bool = true;
            }
            catch (ClassCastException localClassCastException)
            {
            }
        }
    }

    public boolean isIntentSenderTargetedToPackage(IIntentSender paramIIntentSender)
    {
        boolean bool = false;
        if (!(paramIIntentSender instanceof PendingIntentRecord));
        while (true)
        {
            return bool;
            try
            {
                PendingIntentRecord localPendingIntentRecord = (PendingIntentRecord)paramIIntentSender;
                if (localPendingIntentRecord.key.allIntents != null)
                {
                    for (int i = 0; ; i++)
                    {
                        if (i >= localPendingIntentRecord.key.allIntents.length)
                            break label84;
                        Intent localIntent = localPendingIntentRecord.key.allIntents[i];
                        if (localIntent.getPackage() != null)
                        {
                            ComponentName localComponentName = localIntent.getComponent();
                            if (localComponentName != null)
                                break;
                        }
                    }
                    label84: bool = true;
                }
            }
            catch (ClassCastException localClassCastException)
            {
            }
        }
    }

    boolean isNextTransitionForward()
    {
        int i = this.mWindowManager.getPendingAppTransition();
        if ((i == 4102) || (i == 4104) || (i == 4106));
        for (boolean bool = true; ; bool = false)
            return bool;
    }

    boolean isPendingBroadcastProcessLocked(int paramInt)
    {
        if ((this.mFgBroadcastQueue.isPendingBroadcastProcessLocked(paramInt)) || (this.mBgBroadcastQueue.isPendingBroadcastProcessLocked(paramInt)));
        for (boolean bool = true; ; bool = false)
            return bool;
    }

    boolean isSingleton(String paramString, ApplicationInfo paramApplicationInfo)
    {
        boolean bool = false;
        if (UserId.getAppId(paramApplicationInfo.uid) >= 10000)
            bool = false;
        while (true)
        {
            return bool;
            if (paramString == paramApplicationInfo.packageName)
            {
                if ((0x8 & paramApplicationInfo.flags) != 0);
                for (bool = true; ; bool = false)
                    break;
            }
            if ("system".equals(paramString))
                bool = true;
        }
    }

    public boolean isSleeping()
    {
        if ((this.mSleeping) || (this.mShuttingDown));
        for (boolean bool = true; ; bool = false)
            return bool;
    }

    public boolean isTopActivityImmersive()
    {
        enforceNotIsolatedCaller("startActivity");
        while (true)
        {
            try
            {
                ActivityRecord localActivityRecord = this.mMainStack.topRunningActivityLocked(null);
                if (localActivityRecord != null)
                {
                    bool = localActivityRecord.immersive;
                    return bool;
                }
            }
            finally
            {
                localObject = finally;
                throw localObject;
            }
            boolean bool = false;
        }
    }

    public boolean isUserAMonkey()
    {
        while (true)
        {
            try
            {
                if (this.mController != null)
                {
                    bool = true;
                    return bool;
                }
            }
            finally
            {
                localObject = finally;
                throw localObject;
            }
            boolean bool = false;
        }
    }

    // ERROR //
    public void killAllBackgroundProcesses()
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 5952
        //     4: invokevirtual 4575	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
        //     7: ifeq +69 -> 76
        //     10: new 598	java/lang/StringBuilder
        //     13: dup
        //     14: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     17: ldc_w 5954
        //     20: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     23: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     26: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     29: ldc_w 1697
        //     32: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     35: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     38: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     41: ldc_w 1699
        //     44: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     47: ldc_w 5952
        //     50: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     53: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     56: astore 16
        //     58: ldc 221
        //     60: aload 16
        //     62: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     65: pop
        //     66: new 1701	java/lang/SecurityException
        //     69: dup
        //     70: aload 16
        //     72: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     75: athrow
        //     76: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     79: lstore_1
        //     80: aload_0
        //     81: monitorenter
        //     82: new 536	java/util/ArrayList
        //     85: dup
        //     86: invokespecial 537	java/util/ArrayList:<init>	()V
        //     89: astore 4
        //     91: aload_0
        //     92: getfield 557	com/android/server/am/ActivityManagerService:mProcessNames	Lcom/android/server/ProcessMap;
        //     95: invokevirtual 2177	com/android/server/ProcessMap:getMap	()Ljava/util/HashMap;
        //     98: invokevirtual 1409	java/util/HashMap:values	()Ljava/util/Collection;
        //     101: invokeinterface 1412 1 0
        //     106: astore 6
        //     108: aload 6
        //     110: invokeinterface 1016 1 0
        //     115: ifeq +116 -> 231
        //     118: aload 6
        //     120: invokeinterface 1020 1 0
        //     125: checkcast 559	android/util/SparseArray
        //     128: astore 10
        //     130: aload 10
        //     132: invokevirtual 2178	android/util/SparseArray:size	()I
        //     135: istore 11
        //     137: iconst_0
        //     138: istore 12
        //     140: iload 12
        //     142: iload 11
        //     144: if_icmpge -36 -> 108
        //     147: aload 10
        //     149: iload 12
        //     151: invokevirtual 2181	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
        //     154: checkcast 982	com/android/server/am/ProcessRecord
        //     157: astore 13
        //     159: aload 13
        //     161: getfield 1243	com/android/server/am/ProcessRecord:persistent	Z
        //     164: ifeq +6 -> 170
        //     167: goto +114 -> 281
        //     170: aload 13
        //     172: getfield 2138	com/android/server/am/ProcessRecord:removed	Z
        //     175: ifeq +28 -> 203
        //     178: aload 4
        //     180: aload 13
        //     182: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     185: pop
        //     186: goto +95 -> 281
        //     189: astore 5
        //     191: aload_0
        //     192: monitorexit
        //     193: aload 5
        //     195: athrow
        //     196: astore_3
        //     197: lload_1
        //     198: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     201: aload_3
        //     202: athrow
        //     203: aload 13
        //     205: getfield 1151	com/android/server/am/ProcessRecord:setAdj	I
        //     208: getstatic 2352	com/android/server/am/ProcessList:HIDDEN_APP_MIN_ADJ	I
        //     211: if_icmplt +70 -> 281
        //     214: aload 13
        //     216: iconst_1
        //     217: putfield 2138	com/android/server/am/ProcessRecord:removed	Z
        //     220: aload 4
        //     222: aload 13
        //     224: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     227: pop
        //     228: goto +53 -> 281
        //     231: aload 4
        //     233: invokevirtual 1313	java/util/ArrayList:size	()I
        //     236: istore 7
        //     238: iconst_0
        //     239: istore 8
        //     241: iload 8
        //     243: iload 7
        //     245: if_icmpge +29 -> 274
        //     248: aload_0
        //     249: aload 4
        //     251: iload 8
        //     253: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     256: checkcast 982	com/android/server/am/ProcessRecord
        //     259: iconst_0
        //     260: iconst_1
        //     261: ldc_w 5956
        //     264: invokespecial 3230	com/android/server/am/ActivityManagerService:removeProcessLocked	(Lcom/android/server/am/ProcessRecord;ZZLjava/lang/String;)Z
        //     267: pop
        //     268: iinc 8 1
        //     271: goto -30 -> 241
        //     274: aload_0
        //     275: monitorexit
        //     276: lload_1
        //     277: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     280: return
        //     281: iinc 12 1
        //     284: goto -144 -> 140
        //
        // Exception table:
        //     from	to	target	type
        //     82	193	189	finally
        //     203	276	189	finally
        //     80	82	196	finally
        //     193	196	196	finally
    }

    void killAppAtUsersRequest(ProcessRecord paramProcessRecord, Dialog paramDialog)
    {
        try
        {
            paramProcessRecord.crashing = false;
            paramProcessRecord.crashingReport = null;
            paramProcessRecord.notResponding = false;
            paramProcessRecord.notRespondingReport = null;
            if (paramProcessRecord.anrDialog == paramDialog)
                paramProcessRecord.anrDialog = null;
            if (paramProcessRecord.waitDialog == paramDialog)
                paramProcessRecord.waitDialog = null;
            if ((paramProcessRecord.pid > 0) && (paramProcessRecord.pid != MY_PID))
            {
                handleAppCrashLocked(paramProcessRecord);
                Slog.i("ActivityManager", "Killing " + paramProcessRecord + ": user's request");
                Object[] arrayOfObject = new Object[4];
                arrayOfObject[0] = Integer.valueOf(paramProcessRecord.pid);
                arrayOfObject[1] = paramProcessRecord.processName;
                arrayOfObject[2] = Integer.valueOf(paramProcessRecord.setAdj);
                arrayOfObject[3] = "user's request after error";
                EventLog.writeEvent(30023, arrayOfObject);
                Process.killProcessQuiet(paramProcessRecord.pid);
            }
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public void killApplicationProcess(String paramString, int paramInt)
    {
        // Byte code:
        //     0: aload_1
        //     1: ifnonnull +4 -> 5
        //     4: return
        //     5: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     8: istore_3
        //     9: iload_3
        //     10: sipush 1000
        //     13: if_icmpne +91 -> 104
        //     16: aload_0
        //     17: monitorenter
        //     18: aload_0
        //     19: aload_1
        //     20: iload_2
        //     21: invokevirtual 1594	com/android/server/am/ActivityManagerService:getProcessRecordLocked	(Ljava/lang/String;I)Lcom/android/server/am/ProcessRecord;
        //     24: astore 5
        //     26: aload 5
        //     28: ifnull +37 -> 65
        //     31: aload 5
        //     33: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     36: astore 7
        //     38: aload 7
        //     40: ifnull +25 -> 65
        //     43: aload 5
        //     45: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     48: invokeinterface 5966 1 0
        //     53: aload_0
        //     54: monitorexit
        //     55: goto -51 -> 4
        //     58: astore 4
        //     60: aload_0
        //     61: monitorexit
        //     62: aload 4
        //     64: athrow
        //     65: ldc 221
        //     67: new 598	java/lang/StringBuilder
        //     70: dup
        //     71: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     74: ldc_w 5968
        //     77: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     80: aload_1
        //     81: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     84: ldc_w 4921
        //     87: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     90: iload_2
        //     91: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     94: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     97: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     100: pop
        //     101: goto -48 -> 53
        //     104: new 1701	java/lang/SecurityException
        //     107: dup
        //     108: new 598	java/lang/StringBuilder
        //     111: dup
        //     112: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     115: iload_3
        //     116: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     119: ldc_w 5970
        //     122: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     125: aload_1
        //     126: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     129: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     132: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     135: athrow
        //     136: astore 8
        //     138: goto -85 -> 53
        //
        // Exception table:
        //     from	to	target	type
        //     18	38	58	finally
        //     43	53	58	finally
        //     53	62	58	finally
        //     65	101	58	finally
        //     43	53	136	android/os/RemoteException
    }

    public void killApplicationWithUid(String paramString, int paramInt)
    {
        if (paramString == null);
        int i;
        while (true)
        {
            return;
            if (paramInt < 0)
            {
                Slog.w("ActivityManager", "Invalid uid specified for pkg : " + paramString);
            }
            else
            {
                i = Binder.getCallingUid();
                if (i != 1000)
                    break;
                Message localMessage = this.mHandler.obtainMessage(22);
                localMessage.arg1 = paramInt;
                localMessage.arg2 = 0;
                localMessage.obj = paramString;
                this.mHandler.sendMessage(localMessage);
            }
        }
        throw new SecurityException(i + " cannot kill pkg: " + paramString);
    }

    // ERROR //
    public void killBackgroundProcesses(String paramString)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 5952
        //     4: invokevirtual 4575	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
        //     7: ifeq +79 -> 86
        //     10: aload_0
        //     11: ldc_w 5984
        //     14: invokevirtual 4575	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
        //     17: ifeq +69 -> 86
        //     20: new 598	java/lang/StringBuilder
        //     23: dup
        //     24: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     27: ldc_w 5986
        //     30: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     33: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     36: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     39: ldc_w 1697
        //     42: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     45: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     48: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     51: ldc_w 1699
        //     54: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     57: ldc_w 5952
        //     60: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     63: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     66: astore 13
        //     68: ldc 221
        //     70: aload 13
        //     72: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     75: pop
        //     76: new 1701	java/lang/SecurityException
        //     79: dup
        //     80: aload 13
        //     82: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     85: athrow
        //     86: invokestatic 4360	android/os/UserId:getCallingUserId	()I
        //     89: istore_2
        //     90: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     93: lstore_3
        //     94: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     97: astore 6
        //     99: bipush 255
        //     101: istore 7
        //     103: aload_0
        //     104: monitorenter
        //     105: aload 6
        //     107: aload_1
        //     108: iload_2
        //     109: invokeinterface 3009 3 0
        //     114: istore 12
        //     116: iload 12
        //     118: istore 7
        //     120: iload 7
        //     122: bipush 255
        //     124: if_icmpne +36 -> 160
        //     127: ldc 221
        //     129: new 598	java/lang/StringBuilder
        //     132: dup
        //     133: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     136: ldc_w 5446
        //     139: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     142: aload_1
        //     143: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     146: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     149: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     152: pop
        //     153: aload_0
        //     154: monitorexit
        //     155: lload_3
        //     156: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     159: return
        //     160: aload_0
        //     161: aload_1
        //     162: iload 7
        //     164: iconst_5
        //     165: iconst_0
        //     166: iconst_1
        //     167: iconst_1
        //     168: iconst_0
        //     169: ldc_w 5988
        //     172: invokespecial 3019	com/android/server/am/ActivityManagerService:killPackageProcessesLocked	(Ljava/lang/String;IIZZZZLjava/lang/String;)Z
        //     175: pop
        //     176: aload_0
        //     177: monitorexit
        //     178: goto -23 -> 155
        //     181: astore 9
        //     183: aload_0
        //     184: monitorexit
        //     185: aload 9
        //     187: athrow
        //     188: astore 5
        //     190: lload_3
        //     191: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     194: aload 5
        //     196: athrow
        //     197: astore 8
        //     199: goto -79 -> 120
        //
        // Exception table:
        //     from	to	target	type
        //     105	116	181	finally
        //     127	155	181	finally
        //     160	185	181	finally
        //     94	105	188	finally
        //     185	188	188	finally
        //     105	116	197	android/os/RemoteException
    }

    public boolean killPids(int[] paramArrayOfInt, String paramString, boolean paramBoolean)
    {
        if (Binder.getCallingUid() != 1000)
            throw new SecurityException("killPids only available to the system");
        String str;
        boolean bool;
        if (paramString == null)
        {
            str = "Unknown";
            bool = false;
        }
        while (true)
        {
            int i;
            int j;
            int k;
            synchronized (this.mPidsSelfLocked)
            {
                int[] arrayOfInt = new int[paramArrayOfInt.length];
                i = 0;
                j = 0;
                if (j < paramArrayOfInt.length)
                {
                    ProcessRecord localProcessRecord2 = (ProcessRecord)this.mPidsSelfLocked.get(paramArrayOfInt[j]);
                    if (localProcessRecord2 != null)
                    {
                        int n = localProcessRecord2.setAdj;
                        arrayOfInt[j] = n;
                        if (n > i)
                            i = n;
                    }
                }
                else
                {
                    if ((i >= 15) || (i <= ProcessList.HIDDEN_APP_MIN_ADJ))
                        continue;
                    i = ProcessList.HIDDEN_APP_MIN_ADJ;
                    continue;
                    Slog.w("ActivityManager", "Killing processes " + str + " at adjustment " + i);
                    k = 0;
                    if (k < paramArrayOfInt.length)
                    {
                        ProcessRecord localProcessRecord1 = (ProcessRecord)this.mPidsSelfLocked.get(paramArrayOfInt[k]);
                        if (localProcessRecord1 == null)
                            continue;
                        int m = localProcessRecord1.setAdj;
                        if ((m < i) || (localProcessRecord1.killedBackground))
                            continue;
                        Slog.w("ActivityManager", "Killing " + localProcessRecord1 + " (adj " + m + "): " + str);
                        Object[] arrayOfObject = new Object[4];
                        arrayOfObject[0] = Integer.valueOf(localProcessRecord1.pid);
                        arrayOfObject[1] = localProcessRecord1.processName;
                        arrayOfObject[2] = Integer.valueOf(m);
                        arrayOfObject[3] = str;
                        EventLog.writeEvent(30023, arrayOfObject);
                        bool = true;
                        localProcessRecord1.killedBackground = true;
                        Process.killProcessQuiet(paramArrayOfInt[k]);
                    }
                }
            }
        }
    }

    public boolean killProcessesBelowForeground(String paramString)
    {
        if (Binder.getCallingUid() != 1000)
            throw new SecurityException("killProcessesBelowForeground() only available to system");
        return killProcessesBelowAdj(0, paramString);
    }

    final void logAppTooSlow(ProcessRecord paramProcessRecord, long paramLong, String paramString)
    {
    }

    ActivityManager.RunningServiceInfo makeRunningServiceInfoLocked(ServiceRecord paramServiceRecord)
    {
        ActivityManager.RunningServiceInfo localRunningServiceInfo = new ActivityManager.RunningServiceInfo();
        localRunningServiceInfo.service = paramServiceRecord.name;
        if (paramServiceRecord.app != null)
            localRunningServiceInfo.pid = paramServiceRecord.app.pid;
        localRunningServiceInfo.uid = paramServiceRecord.appInfo.uid;
        localRunningServiceInfo.process = paramServiceRecord.processName;
        localRunningServiceInfo.foreground = paramServiceRecord.isForeground;
        localRunningServiceInfo.activeSince = paramServiceRecord.createTime;
        localRunningServiceInfo.started = paramServiceRecord.startRequested;
        localRunningServiceInfo.clientCount = paramServiceRecord.connections.size();
        localRunningServiceInfo.crashCount = paramServiceRecord.crashCount;
        localRunningServiceInfo.lastActivityTime = paramServiceRecord.lastActivity;
        if (paramServiceRecord.isForeground)
            localRunningServiceInfo.flags = (0x2 | localRunningServiceInfo.flags);
        if (paramServiceRecord.startRequested)
            localRunningServiceInfo.flags = (0x1 | localRunningServiceInfo.flags);
        if ((paramServiceRecord.app != null) && (paramServiceRecord.app.pid == MY_PID))
            localRunningServiceInfo.flags = (0x4 | localRunningServiceInfo.flags);
        if ((paramServiceRecord.app != null) && (paramServiceRecord.app.persistent))
            localRunningServiceInfo.flags = (0x8 | localRunningServiceInfo.flags);
        Iterator localIterator = paramServiceRecord.connections.values().iterator();
        while (true)
        {
            ArrayList localArrayList;
            if (localIterator.hasNext())
                localArrayList = (ArrayList)localIterator.next();
            for (int i = 0; i < localArrayList.size(); i++)
            {
                ConnectionRecord localConnectionRecord = (ConnectionRecord)localArrayList.get(i);
                if (localConnectionRecord.clientLabel != 0)
                {
                    localRunningServiceInfo.clientPackage = localConnectionRecord.binding.client.info.packageName;
                    localRunningServiceInfo.clientLabel = localConnectionRecord.clientLabel;
                    return localRunningServiceInfo;
                }
            }
        }
    }

    // ERROR //
    public void monitor()
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_0
        //     3: monitorexit
        //     4: return
        //     5: astore_1
        //     6: aload_0
        //     7: monitorexit
        //     8: aload_1
        //     9: athrow
        //
        // Exception table:
        //     from	to	target	type
        //     2	8	5	finally
    }

    public boolean moveActivityTaskToBack(IBinder paramIBinder, boolean paramBoolean)
    {
        boolean bool1 = false;
        enforceNotIsolatedCaller("moveActivityTaskToBack");
        while (true)
        {
            try
            {
                long l = Binder.clearCallingIdentity();
                if (paramBoolean)
                    break label72;
                bool2 = true;
                int i = getTaskForActivityLocked(paramIBinder, bool2);
                if (i >= 0)
                    bool1 = this.mMainStack.moveTaskToBackLocked(i, null);
                else
                    Binder.restoreCallingIdentity(l);
            }
            finally
            {
                localObject = finally;
                throw localObject;
            }
            return bool1;
            label72: boolean bool2 = false;
        }
    }

    public void moveTaskBackwards(int paramInt)
    {
        enforceCallingPermission("android.permission.REORDER_TASKS", "moveTaskBackwards()");
        try
        {
            if (!checkAppSwitchAllowedLocked(Binder.getCallingPid(), Binder.getCallingUid(), "Task backwards"))
                return;
            long l = Binder.clearCallingIdentity();
            moveTaskBackwardsLocked(paramInt);
            Binder.restoreCallingIdentity(l);
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public void moveTaskToBack(int paramInt)
    {
        enforceCallingPermission("android.permission.REORDER_TASKS", "moveTaskToBack()");
        try
        {
            if ((this.mMainStack.mResumedActivity != null) && (this.mMainStack.mResumedActivity.task.taskId == paramInt) && (!checkAppSwitchAllowedLocked(Binder.getCallingPid(), Binder.getCallingUid(), "Task to back")))
                return;
            long l = Binder.clearCallingIdentity();
            this.mMainStack.moveTaskToBackLocked(paramInt, null);
            Binder.restoreCallingIdentity(l);
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public void moveTaskToFront(int paramInt1, int paramInt2, Bundle paramBundle)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 6043
        //     4: ldc_w 6060
        //     7: invokevirtual 4280	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
        //     10: aload_0
        //     11: monitorenter
        //     12: aload_0
        //     13: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     16: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     19: ldc_w 6062
        //     22: invokevirtual 6049	com/android/server/am/ActivityManagerService:checkAppSwitchAllowedLocked	(IILjava/lang/String;)Z
        //     25: ifne +12 -> 37
        //     28: aload_3
        //     29: invokestatic 6068	android/app/ActivityOptions:abort	(Landroid/os/Bundle;)V
        //     32: aload_0
        //     33: monitorexit
        //     34: goto +196 -> 230
        //     37: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     40: lstore 5
        //     42: aload_0
        //     43: iload_1
        //     44: invokespecial 5757	com/android/server/am/ActivityManagerService:taskForIdLocked	(I)Lcom/android/server/am/TaskRecord;
        //     47: astore 8
        //     49: aload 8
        //     51: ifnull +58 -> 109
        //     54: iload_2
        //     55: iconst_2
        //     56: iand
        //     57: ifne +11 -> 68
        //     60: aload_0
        //     61: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     64: iconst_1
        //     65: putfield 6071	com/android/server/am/ActivityStack:mUserLeaving	Z
        //     68: iload_2
        //     69: iconst_1
        //     70: iand
        //     71: ifeq +10 -> 81
        //     74: aload_0
        //     75: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     78: invokevirtual 6074	com/android/server/am/ActivityStack:moveHomeToFrontLocked	()V
        //     81: aload_0
        //     82: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     85: aload 8
        //     87: aconst_null
        //     88: aload_3
        //     89: invokevirtual 6078	com/android/server/am/ActivityStack:moveTaskToFrontLocked	(Lcom/android/server/am/TaskRecord;Lcom/android/server/am/ActivityRecord;Landroid/os/Bundle;)V
        //     92: lload 5
        //     94: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     97: aload_0
        //     98: monitorexit
        //     99: goto +131 -> 230
        //     102: astore 4
        //     104: aload_0
        //     105: monitorexit
        //     106: aload 4
        //     108: athrow
        //     109: bipush 255
        //     111: aload_0
        //     112: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     115: getfield 2934	com/android/server/am/ActivityStack:mHistory	Ljava/util/ArrayList;
        //     118: invokevirtual 1313	java/util/ArrayList:size	()I
        //     121: iadd
        //     122: istore 9
        //     124: iload 9
        //     126: iflt +93 -> 219
        //     129: aload_0
        //     130: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     133: getfield 2934	com/android/server/am/ActivityStack:mHistory	Ljava/util/ArrayList;
        //     136: iload 9
        //     138: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     141: checkcast 1290	com/android/server/am/ActivityRecord
        //     144: astore 10
        //     146: aload 10
        //     148: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     151: getfield 3276	com/android/server/am/TaskRecord:taskId	I
        //     154: iload_1
        //     155: if_icmpne +76 -> 231
        //     158: iload_2
        //     159: iconst_2
        //     160: iand
        //     161: ifne +11 -> 172
        //     164: aload_0
        //     165: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     168: iconst_1
        //     169: putfield 6071	com/android/server/am/ActivityStack:mUserLeaving	Z
        //     172: iload_2
        //     173: iconst_1
        //     174: iand
        //     175: ifeq +10 -> 185
        //     178: aload_0
        //     179: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     182: invokevirtual 6074	com/android/server/am/ActivityStack:moveHomeToFrontLocked	()V
        //     185: aload_0
        //     186: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     189: aload 10
        //     191: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     194: aconst_null
        //     195: aload_3
        //     196: invokevirtual 6078	com/android/server/am/ActivityStack:moveTaskToFrontLocked	(Lcom/android/server/am/TaskRecord;Lcom/android/server/am/ActivityRecord;Landroid/os/Bundle;)V
        //     199: lload 5
        //     201: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     204: aload_0
        //     205: monitorexit
        //     206: goto +24 -> 230
        //     209: astore 7
        //     211: lload 5
        //     213: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     216: aload 7
        //     218: athrow
        //     219: lload 5
        //     221: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     224: aload_3
        //     225: invokestatic 6068	android/app/ActivityOptions:abort	(Landroid/os/Bundle;)V
        //     228: aload_0
        //     229: monitorexit
        //     230: return
        //     231: iinc 9 255
        //     234: goto -110 -> 124
        //
        // Exception table:
        //     from	to	target	type
        //     12	42	102	finally
        //     92	106	102	finally
        //     199	230	102	finally
        //     42	92	209	finally
        //     109	199	209	finally
    }

    public boolean navigateUpTo(IBinder paramIBinder, Intent paramIntent1, int paramInt, Intent paramIntent2)
    {
        ComponentName localComponentName = paramIntent1.getComponent();
        while (true)
        {
            ActivityRecord localActivityRecord1;
            boolean bool1;
            Object localObject2;
            int i4;
            ActivityInfo localActivityInfo;
            int i2;
            try
            {
                localActivityRecord1 = ActivityRecord.forToken(paramIBinder);
                if (localActivityRecord1 == null)
                {
                    bool1 = false;
                }
                else
                {
                    localArrayList = localActivityRecord1.stack.mHistory;
                    i = localArrayList.indexOf(localActivityRecord1);
                    if (i < 0)
                        bool1 = false;
                }
            }
            finally
            {
                ArrayList localArrayList;
                int i;
                throw localObject1;
                int j = i - 1;
                localObject2 = null;
                bool1 = false;
                ActivityRecord localActivityRecord4;
                if (localComponentName != null)
                {
                    TaskRecord localTaskRecord = localActivityRecord1.task;
                    i4 = i - 1;
                    if (i4 >= 0)
                    {
                        localActivityRecord4 = (ActivityRecord)localArrayList.get(i4);
                        if (localTaskRecord == localActivityRecord4.task)
                            continue;
                        j = Math.min(i - 1, i4 + 1);
                        localObject2 = (ActivityRecord)localArrayList.get(j);
                    }
                }
                if (this.mController != null)
                {
                    ActivityRecord localActivityRecord3 = this.mMainStack.topRunningActivityLocked(paramIBinder, 0);
                    if (localActivityRecord3 != null)
                    {
                        int i3 = 1;
                        try
                        {
                            boolean bool2 = this.mController.activityResuming(localActivityRecord3.packageName);
                            i3 = bool2;
                            if (i3 == 0)
                            {
                                bool1 = false;
                                continue;
                                if ((!localActivityRecord4.info.packageName.equals(localComponentName.getPackageName())) || (!localActivityRecord4.info.name.equals(localComponentName.getClassName())))
                                    break label515;
                                j = i4;
                                localObject2 = localActivityRecord4;
                                bool1 = true;
                            }
                        }
                        catch (RemoteException localRemoteException2)
                        {
                            this.mController = null;
                            continue;
                        }
                    }
                }
                long l = Binder.clearCallingIdentity();
                int k = i;
                if (k > j)
                {
                    ActivityRecord localActivityRecord2 = (ActivityRecord)localArrayList.get(k);
                    this.mMainStack.requestFinishActivityLocked(localActivityRecord2.appToken, paramInt, paramIntent2, "navigate-up");
                    paramInt = 0;
                    paramIntent2 = null;
                    k--;
                    continue;
                }
                if ((localObject2 != null) && (bool1))
                {
                    int m = ((ActivityRecord)localObject2).info.launchMode;
                    int n = paramIntent1.getFlags();
                    if ((m == 3) || (m == 2) || (m == 1) || ((0x4000000 & n) != 0))
                    {
                        int i1 = localActivityRecord1.info.applicationInfo.uid;
                        ((ActivityRecord)localObject2).deliverNewIntentLocked(i1, paramIntent1);
                    }
                }
                else
                {
                    Binder.restoreCallingIdentity(l);
                    continue;
                }
            }
            label515: i4--;
        }
    }

    final ProcessRecord newProcessRecordLocked(IApplicationThread paramIApplicationThread, ApplicationInfo paramApplicationInfo, String paramString, boolean paramBoolean)
    {
        String str;
        if (paramString != null)
            str = paramString;
        while (true)
        {
            BatteryStatsImpl localBatteryStatsImpl = this.mBatteryStatsService.getActiveStatistics();
            int i = paramApplicationInfo.uid;
            int k;
            if (paramBoolean)
            {
                int j = UserId.getUserId(i);
                k = 1000;
                label39: if ((this.mNextIsolatedProcessUid < 99000) || (this.mNextIsolatedProcessUid > 99999))
                    this.mNextIsolatedProcessUid = 99000;
                i = UserId.getUid(j, this.mNextIsolatedProcessUid);
                this.mNextIsolatedProcessUid = (1 + this.mNextIsolatedProcessUid);
                if (this.mIsolatedProcesses.indexOfKey(i) >= 0)
                    break label147;
            }
            try
            {
                BatteryStatsImpl.Uid.Proc localProc = localBatteryStatsImpl.getProcessStatsLocked(paramApplicationInfo.uid, str);
                for (ProcessRecord localProcessRecord = new ProcessRecord(localProc, paramIApplicationThread, paramApplicationInfo, str, i); ; localProcessRecord = null)
                {
                    return localProcessRecord;
                    str = paramApplicationInfo.processName;
                    break;
                    label147: k--;
                    if (k > 0)
                        break label39;
                }
            }
            finally
            {
            }
        }
    }

    public IBinder newUriPermissionOwner(String paramString)
    {
        enforceNotIsolatedCaller("newUriPermissionOwner");
        try
        {
            Binder localBinder = new UriPermissionOwner(this, paramString).getExternalTokenLocked();
            return localBinder;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public void noteWakeupAlarm(IIntentSender paramIIntentSender)
    {
        // Byte code:
        //     0: aload_1
        //     1: instanceof 4350
        //     4: ifne +4 -> 8
        //     7: return
        //     8: aload_0
        //     9: getfield 832	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
        //     12: invokevirtual 836	com/android/server/am/BatteryStatsService:getActiveStatistics	()Lcom/android/internal/os/BatteryStatsImpl;
        //     15: astore_2
        //     16: aload_2
        //     17: monitorenter
        //     18: aload_0
        //     19: getfield 832	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
        //     22: invokevirtual 6118	com/android/server/am/BatteryStatsService:isOnBattery	()Z
        //     25: ifeq +53 -> 78
        //     28: aload_0
        //     29: getfield 832	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
        //     32: invokevirtual 6120	com/android/server/am/BatteryStatsService:enforceCallingPermission	()V
        //     35: aload_1
        //     36: checkcast 4350	com/android/server/am/PendingIntentRecord
        //     39: astore 4
        //     41: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     44: istore 5
        //     46: aload 4
        //     48: getfield 5815	com/android/server/am/PendingIntentRecord:uid	I
        //     51: iload 5
        //     53: if_icmpne +35 -> 88
        //     56: sipush 1000
        //     59: istore 6
        //     61: aload_2
        //     62: iload 6
        //     64: aload 4
        //     66: getfield 4354	com/android/server/am/PendingIntentRecord:key	Lcom/android/server/am/PendingIntentRecord$Key;
        //     69: getfield 4357	com/android/server/am/PendingIntentRecord$Key:packageName	Ljava/lang/String;
        //     72: invokevirtual 6124	com/android/internal/os/BatteryStatsImpl:getPackageStatsLocked	(ILjava/lang/String;)Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg;
        //     75: invokevirtual 6129	com/android/internal/os/BatteryStatsImpl$Uid$Pkg:incWakeupsLocked	()V
        //     78: aload_2
        //     79: monitorexit
        //     80: goto -73 -> 7
        //     83: astore_3
        //     84: aload_2
        //     85: monitorexit
        //     86: aload_3
        //     87: athrow
        //     88: aload 4
        //     90: getfield 5815	com/android/server/am/PendingIntentRecord:uid	I
        //     93: istore 6
        //     95: goto -34 -> 61
        //
        // Exception table:
        //     from	to	target	type
        //     18	86	83	finally
        //     88	95	83	finally
    }

    void onCoreSettingsChange(Bundle paramBundle)
    {
        int i = -1 + this.mLruProcesses.size();
        while (true)
        {
            ProcessRecord localProcessRecord;
            if (i >= 0)
                localProcessRecord = (ProcessRecord)this.mLruProcesses.get(i);
            try
            {
                if (localProcessRecord.thread != null)
                    localProcessRecord.thread.setCoreSettings(paramBundle);
                label44: i--;
                continue;
                return;
            }
            catch (RemoteException localRemoteException)
            {
                break label44;
            }
        }
    }

    // ERROR //
    public boolean onTransact(int paramInt1, android.os.Parcel paramParcel1, android.os.Parcel paramParcel2, int paramInt2)
        throws RemoteException
    {
        // Byte code:
        //     0: iload_1
        //     1: ldc_w 6136
        //     4: if_icmpne +174 -> 178
        //     7: new 536	java/util/ArrayList
        //     10: dup
        //     11: invokespecial 537	java/util/ArrayList:<init>	()V
        //     14: astore 5
        //     16: aload_0
        //     17: monitorenter
        //     18: aload_0
        //     19: getfield 557	com/android/server/am/ActivityManagerService:mProcessNames	Lcom/android/server/ProcessMap;
        //     22: invokevirtual 2177	com/android/server/ProcessMap:getMap	()Ljava/util/HashMap;
        //     25: invokevirtual 1409	java/util/HashMap:values	()Ljava/util/Collection;
        //     28: invokeinterface 1412 1 0
        //     33: astore 7
        //     35: aload 7
        //     37: invokeinterface 1016 1 0
        //     42: ifeq +71 -> 113
        //     45: aload 7
        //     47: invokeinterface 1020 1 0
        //     52: checkcast 559	android/util/SparseArray
        //     55: astore 16
        //     57: aload 16
        //     59: invokevirtual 2178	android/util/SparseArray:size	()I
        //     62: istore 17
        //     64: iconst_0
        //     65: istore 18
        //     67: iload 18
        //     69: iload 17
        //     71: if_icmpge -36 -> 35
        //     74: aload 16
        //     76: iload 18
        //     78: invokevirtual 2181	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
        //     81: checkcast 982	com/android/server/am/ProcessRecord
        //     84: astore 19
        //     86: aload 19
        //     88: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     91: ifnull +130 -> 221
        //     94: aload 5
        //     96: aload 19
        //     98: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     101: invokeinterface 1126 1 0
        //     106: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     109: pop
        //     110: goto +111 -> 221
        //     113: aload_0
        //     114: monitorexit
        //     115: aload 5
        //     117: invokevirtual 1313	java/util/ArrayList:size	()I
        //     120: istore 8
        //     122: iconst_0
        //     123: istore 9
        //     125: iload 9
        //     127: iload 8
        //     129: if_icmpge +49 -> 178
        //     132: invokestatic 6141	android/os/Parcel:obtain	()Landroid/os/Parcel;
        //     135: astore 13
        //     137: aload 5
        //     139: iload 9
        //     141: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     144: checkcast 1128	android/os/IBinder
        //     147: ldc_w 6136
        //     150: aload 13
        //     152: aconst_null
        //     153: iconst_0
        //     154: invokeinterface 6144 5 0
        //     159: pop
        //     160: aload 13
        //     162: invokevirtual 6147	android/os/Parcel:recycle	()V
        //     165: iinc 9 1
        //     168: goto -43 -> 125
        //     171: astore 6
        //     173: aload_0
        //     174: monitorexit
        //     175: aload 6
        //     177: athrow
        //     178: aload_0
        //     179: iload_1
        //     180: aload_2
        //     181: aload_3
        //     182: iload 4
        //     184: invokespecial 6149	android/app/ActivityManagerNative:onTransact	(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
        //     187: istore 12
        //     189: iload 12
        //     191: ireturn
        //     192: astore 10
        //     194: aload 10
        //     196: instanceof 1701
        //     199: ifne +14 -> 213
        //     202: ldc 221
        //     204: ldc_w 6151
        //     207: aload 10
        //     209: invokestatic 1048	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     212: pop
        //     213: aload 10
        //     215: athrow
        //     216: astore 14
        //     218: goto -58 -> 160
        //     221: iinc 18 1
        //     224: goto -157 -> 67
        //
        // Exception table:
        //     from	to	target	type
        //     18	115	171	finally
        //     173	175	171	finally
        //     178	189	192	java/lang/RuntimeException
        //     137	160	216	android/os/RemoteException
    }

    // ERROR //
    public ParcelFileDescriptor openContentUri(Uri paramUri)
        throws RemoteException
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 6154
        //     4: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     7: aload_1
        //     8: invokevirtual 1966	android/net/Uri:getAuthority	()Ljava/lang/String;
        //     11: astore_2
        //     12: aload_0
        //     13: aload_2
        //     14: aconst_null
        //     15: invokespecial 5476	com/android/server/am/ActivityManagerService:getContentProviderExternalUnchecked	(Ljava/lang/String;Landroid/os/IBinder;)Landroid/app/IActivityManager$ContentProviderHolder;
        //     18: astore_3
        //     19: aconst_null
        //     20: astore 4
        //     22: aload_3
        //     23: ifnull +72 -> 95
        //     26: getstatic 451	com/android/server/am/ActivityManagerService:sCallerIdentity	Ljava/lang/ThreadLocal;
        //     29: new 80	com/android/server/am/ActivityManagerService$Identity
        //     32: dup
        //     33: aload_0
        //     34: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     37: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     40: invokespecial 6156	com/android/server/am/ActivityManagerService$Identity:<init>	(Lcom/android/server/am/ActivityManagerService;II)V
        //     43: invokevirtual 6158	java/lang/ThreadLocal:set	(Ljava/lang/Object;)V
        //     46: aload_3
        //     47: getfield 3137	android/app/IActivityManager$ContentProviderHolder:provider	Landroid/content/IContentProvider;
        //     50: aload_1
        //     51: ldc_w 6159
        //     54: invokeinterface 6163 3 0
        //     59: astore 9
        //     61: aload 9
        //     63: astore 4
        //     65: getstatic 451	com/android/server/am/ActivityManagerService:sCallerIdentity	Ljava/lang/ThreadLocal;
        //     68: astore 7
        //     70: aload 7
        //     72: invokevirtual 6164	java/lang/ThreadLocal:remove	()V
        //     75: aload_0
        //     76: aload_2
        //     77: aconst_null
        //     78: invokespecial 5649	com/android/server/am/ActivityManagerService:removeContentProviderExternalUnchecked	(Ljava/lang/String;Landroid/os/IBinder;)V
        //     81: aload 4
        //     83: areturn
        //     84: astore 8
        //     86: getstatic 451	com/android/server/am/ActivityManagerService:sCallerIdentity	Ljava/lang/ThreadLocal;
        //     89: invokevirtual 6164	java/lang/ThreadLocal:remove	()V
        //     92: aload 8
        //     94: athrow
        //     95: ldc 221
        //     97: new 598	java/lang/StringBuilder
        //     100: dup
        //     101: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     104: ldc_w 6166
        //     107: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     110: aload_2
        //     111: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     114: ldc_w 6168
        //     117: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     120: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     123: invokestatic 4412	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
        //     126: pop
        //     127: goto -46 -> 81
        //     130: astore 6
        //     132: getstatic 451	com/android/server/am/ActivityManagerService:sCallerIdentity	Ljava/lang/ThreadLocal;
        //     135: astore 7
        //     137: goto -67 -> 70
        //
        // Exception table:
        //     from	to	target	type
        //     46	61	84	finally
        //     46	61	130	java/io/FileNotFoundException
    }

    public void overridePendingTransition(IBinder paramIBinder, String paramString, int paramInt1, int paramInt2)
    {
        try
        {
            ActivityRecord localActivityRecord = this.mMainStack.isInStackLocked(paramIBinder);
            if (localActivityRecord == null)
                return;
            long l = Binder.clearCallingIdentity();
            if ((localActivityRecord.state == ActivityStack.ActivityState.RESUMED) || (localActivityRecord.state == ActivityStack.ActivityState.PAUSING))
                this.mWindowManager.overridePendingAppTransition(paramString, paramInt1, paramInt2, null);
            Binder.restoreCallingIdentity(l);
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public IBinder peekService(Intent paramIntent, String paramString)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 6177
        //     4: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     7: aload_1
        //     8: ifnull +22 -> 30
        //     11: aload_1
        //     12: invokevirtual 4298	android/content/Intent:hasFileDescriptors	()Z
        //     15: iconst_1
        //     16: if_icmpne +14 -> 30
        //     19: new 1572	java/lang/IllegalArgumentException
        //     22: dup
        //     23: ldc_w 4300
        //     26: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     29: athrow
        //     30: aconst_null
        //     31: astore_3
        //     32: aload_0
        //     33: monitorenter
        //     34: aload_0
        //     35: aload_1
        //     36: aload_2
        //     37: invokestatic 4360	android/os/UserId:getCallingUserId	()I
        //     40: invokespecial 6179	com/android/server/am/ActivityManagerService:findServiceLocked	(Landroid/content/Intent;Ljava/lang/String;I)Lcom/android/server/am/ActivityManagerService$ServiceLookupResult;
        //     43: astore 5
        //     45: aload 5
        //     47: ifnull +126 -> 173
        //     50: aload 5
        //     52: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     55: ifnonnull +83 -> 138
        //     58: new 1701	java/lang/SecurityException
        //     61: dup
        //     62: new 598	java/lang/StringBuilder
        //     65: dup
        //     66: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     69: ldc_w 2971
        //     72: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     75: aload 5
        //     77: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     80: getfield 1425	com/android/server/am/ServiceRecord:name	Landroid/content/ComponentName;
        //     83: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     86: ldc_w 1751
        //     89: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     92: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     95: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     98: ldc_w 1697
        //     101: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     104: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     107: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     110: ldc_w 1699
        //     113: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     116: aload 5
        //     118: getfield 6180	com/android/server/am/ActivityManagerService$ServiceLookupResult:permission	Ljava/lang/String;
        //     121: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     124: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     127: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     130: athrow
        //     131: astore 4
        //     133: aload_0
        //     134: monitorexit
        //     135: aload 4
        //     137: athrow
        //     138: aload 5
        //     140: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     143: getfield 1450	com/android/server/am/ServiceRecord:bindings	Ljava/util/HashMap;
        //     146: aload 5
        //     148: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     151: getfield 1496	com/android/server/am/ServiceRecord:intent	Landroid/content/Intent$FilterComparison;
        //     154: invokevirtual 1762	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
        //     157: checkcast 1453	com/android/server/am/IntentBindRecord
        //     160: astore 6
        //     162: aload 6
        //     164: ifnull +9 -> 173
        //     167: aload 6
        //     169: getfield 3348	com/android/server/am/IntentBindRecord:binder	Landroid/os/IBinder;
        //     172: astore_3
        //     173: aload_0
        //     174: monitorexit
        //     175: aload_3
        //     176: areturn
        //
        // Exception table:
        //     from	to	target	type
        //     34	135	131	finally
        //     138	175	131	finally
    }

    final void performAppGcLocked(ProcessRecord paramProcessRecord)
    {
        try
        {
            paramProcessRecord.lastRequestedGc = SystemClock.uptimeMillis();
            if (paramProcessRecord.thread != null)
                if (paramProcessRecord.reportLowMemory)
                {
                    paramProcessRecord.reportLowMemory = false;
                    paramProcessRecord.thread.scheduleLowMemory();
                }
                else
                {
                    paramProcessRecord.thread.processInBackground();
                }
        }
        catch (Exception localException)
        {
        }
    }

    final void performAppGcsIfAppropriateLocked()
    {
        if (canGcNowLocked())
            performAppGcsLocked();
        while (true)
        {
            return;
            scheduleAppGcsLocked();
        }
    }

    final void performAppGcsLocked()
    {
        if (this.mProcessesToGc.size() <= 0);
        while (true)
        {
            return;
            if (canGcNowLocked())
            {
                while (true)
                    if (this.mProcessesToGc.size() > 0)
                    {
                        ProcessRecord localProcessRecord = (ProcessRecord)this.mProcessesToGc.remove(0);
                        if ((localProcessRecord.curRawAdj > 2) || (localProcessRecord.reportLowMemory))
                        {
                            if (60000L + localProcessRecord.lastRequestedGc <= SystemClock.uptimeMillis())
                            {
                                performAppGcLocked(localProcessRecord);
                                scheduleAppGcsLocked();
                                break;
                            }
                            addProcessToGcListLocked(localProcessRecord);
                        }
                    }
                scheduleAppGcsLocked();
            }
        }
    }

    final void performServiceRestartLocked(ServiceRecord paramServiceRecord)
    {
        if (!this.mRestartingServices.contains(paramServiceRecord));
        while (true)
        {
            return;
            bringUpServiceLocked(paramServiceRecord, paramServiceRecord.intent.getIntent().getFlags(), true);
        }
    }

    // ERROR //
    public boolean profileControl(String paramString1, boolean paramBoolean, String paramString2, ParcelFileDescriptor paramParcelFileDescriptor, int paramInt)
        throws RemoteException
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_0
        //     3: ldc_w 5030
        //     6: invokevirtual 4575	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
        //     9: ifeq +49 -> 58
        //     12: new 1701	java/lang/SecurityException
        //     15: dup
        //     16: ldc_w 5032
        //     19: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     22: athrow
        //     23: astore 9
        //     25: aload_0
        //     26: monitorexit
        //     27: aload 9
        //     29: athrow
        //     30: astore 8
        //     32: new 4019	java/lang/IllegalStateException
        //     35: dup
        //     36: ldc_w 4021
        //     39: invokespecial 4022	java/lang/IllegalStateException:<init>	(Ljava/lang/String;)V
        //     42: athrow
        //     43: astore 6
        //     45: aload 4
        //     47: ifnull +8 -> 55
        //     50: aload 4
        //     52: invokevirtual 2202	android/os/ParcelFileDescriptor:close	()V
        //     55: aload 6
        //     57: athrow
        //     58: iload_2
        //     59: ifeq +19 -> 78
        //     62: aload 4
        //     64: ifnonnull +14 -> 78
        //     67: new 1572	java/lang/IllegalArgumentException
        //     70: dup
        //     71: ldc_w 5034
        //     74: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     77: athrow
        //     78: aconst_null
        //     79: astore 10
        //     81: aload_1
        //     82: ifnull +80 -> 162
        //     85: aload_1
        //     86: invokestatic 4564	java/lang/Integer:parseInt	(Ljava/lang/String;)I
        //     89: istore 17
        //     91: aload_0
        //     92: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     95: astore 18
        //     97: aload 18
        //     99: monitorenter
        //     100: aload_0
        //     101: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     104: iload 17
        //     106: invokevirtual 1083	android/util/SparseArray:get	(I)Ljava/lang/Object;
        //     109: checkcast 982	com/android/server/am/ProcessRecord
        //     112: astore 10
        //     114: aload 18
        //     116: monitorexit
        //     117: aload 10
        //     119: ifnonnull +43 -> 162
        //     122: aload_0
        //     123: getfield 557	com/android/server/am/ActivityManagerService:mProcessNames	Lcom/android/server/ProcessMap;
        //     126: invokevirtual 2177	com/android/server/ProcessMap:getMap	()Ljava/util/HashMap;
        //     129: aload_1
        //     130: invokevirtual 1762	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
        //     133: checkcast 559	android/util/SparseArray
        //     136: astore 16
        //     138: aload 16
        //     140: ifnull +22 -> 162
        //     143: aload 16
        //     145: invokevirtual 2178	android/util/SparseArray:size	()I
        //     148: ifle +14 -> 162
        //     151: aload 16
        //     153: iconst_0
        //     154: invokevirtual 2181	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
        //     157: checkcast 982	com/android/server/am/ProcessRecord
        //     160: astore 10
        //     162: iload_2
        //     163: ifeq +57 -> 220
        //     166: aload 10
        //     168: ifnull +11 -> 179
        //     171: aload 10
        //     173: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     176: ifnonnull +44 -> 220
        //     179: new 1572	java/lang/IllegalArgumentException
        //     182: dup
        //     183: new 598	java/lang/StringBuilder
        //     186: dup
        //     187: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     190: ldc_w 5036
        //     193: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     196: aload_1
        //     197: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     200: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     203: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     206: athrow
        //     207: astore 19
        //     209: aload 18
        //     211: monitorexit
        //     212: aload 19
        //     214: athrow
        //     215: astore 15
        //     217: goto -100 -> 117
        //     220: iload_2
        //     221: ifeq +97 -> 318
        //     224: aload_0
        //     225: aconst_null
        //     226: aconst_null
        //     227: iconst_0
        //     228: invokespecial 6200	com/android/server/am/ActivityManagerService:stopProfilerLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;I)V
        //     231: aload_0
        //     232: aload 10
        //     234: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     237: aload 10
        //     239: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     242: aload_3
        //     243: aload 4
        //     245: iconst_0
        //     246: invokevirtual 6204	com/android/server/am/ActivityManagerService:setProfileApp	(Landroid/content/pm/ApplicationInfo;Ljava/lang/String;Ljava/lang/String;Landroid/os/ParcelFileDescriptor;Z)V
        //     249: aload_0
        //     250: aload 10
        //     252: putfield 704	com/android/server/am/ActivityManagerService:mProfileProc	Lcom/android/server/am/ProcessRecord;
        //     255: aload_0
        //     256: iload 5
        //     258: putfield 706	com/android/server/am/ActivityManagerService:mProfileType	I
        //     261: aload 4
        //     263: invokevirtual 1232	android/os/ParcelFileDescriptor:dup	()Landroid/os/ParcelFileDescriptor;
        //     266: astore 14
        //     268: aload 14
        //     270: astore 4
        //     272: aload 10
        //     274: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     277: iload_2
        //     278: aload_3
        //     279: aload 4
        //     281: iload 5
        //     283: invokeinterface 4017 5 0
        //     288: aconst_null
        //     289: astore 4
        //     291: aload_0
        //     292: aconst_null
        //     293: putfield 1196	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
        //     296: aload_0
        //     297: monitorexit
        //     298: aload 4
        //     300: ifnull +8 -> 308
        //     303: aload 4
        //     305: invokevirtual 2202	android/os/ParcelFileDescriptor:close	()V
        //     308: iconst_1
        //     309: ireturn
        //     310: astore 13
        //     312: aconst_null
        //     313: astore 4
        //     315: goto -43 -> 272
        //     318: aload_0
        //     319: aload 10
        //     321: aload_3
        //     322: iload 5
        //     324: invokespecial 6200	com/android/server/am/ActivityManagerService:stopProfilerLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;I)V
        //     327: aload 4
        //     329: ifnull -33 -> 296
        //     332: aload 4
        //     334: invokevirtual 2202	android/os/ParcelFileDescriptor:close	()V
        //     337: goto -41 -> 296
        //     340: astore 11
        //     342: goto -46 -> 296
        //     345: astore 7
        //     347: goto -292 -> 55
        //     350: astore 12
        //     352: goto -44 -> 308
        //
        // Exception table:
        //     from	to	target	type
        //     2	27	23	finally
        //     67	78	23	finally
        //     85	100	23	finally
        //     122	207	23	finally
        //     212	215	23	finally
        //     224	261	23	finally
        //     261	268	23	finally
        //     272	298	23	finally
        //     318	327	23	finally
        //     332	337	23	finally
        //     0	2	30	android/os/RemoteException
        //     27	30	30	android/os/RemoteException
        //     0	2	43	finally
        //     27	30	43	finally
        //     32	43	43	finally
        //     100	117	207	finally
        //     209	212	207	finally
        //     85	100	215	java/lang/NumberFormatException
        //     212	215	215	java/lang/NumberFormatException
        //     261	268	310	java/io/IOException
        //     332	337	340	java/io/IOException
        //     50	55	345	java/io/IOException
        //     303	308	350	java/io/IOException
    }

    // ERROR //
    public final void publishContentProviders(IApplicationThread paramIApplicationThread, List<IActivityManager.ContentProviderHolder> paramList)
    {
        // Byte code:
        //     0: aload_2
        //     1: ifnonnull +4 -> 5
        //     4: return
        //     5: aload_0
        //     6: ldc_w 6207
        //     9: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     12: aload_0
        //     13: monitorenter
        //     14: aload_0
        //     15: aload_1
        //     16: invokevirtual 3117	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
        //     19: astore 4
        //     21: aload 4
        //     23: ifnonnull +54 -> 77
        //     26: new 1701	java/lang/SecurityException
        //     29: dup
        //     30: new 598	java/lang/StringBuilder
        //     33: dup
        //     34: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     37: ldc_w 3119
        //     40: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     43: aload_1
        //     44: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     47: ldc_w 1736
        //     50: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     53: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     56: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     59: ldc_w 6209
        //     62: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     65: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     68: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     71: athrow
        //     72: astore_3
        //     73: aload_0
        //     74: monitorexit
        //     75: aload_3
        //     76: athrow
        //     77: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     80: lstore 5
        //     82: aload_2
        //     83: invokeinterface 1801 1 0
        //     88: istore 7
        //     90: iconst_0
        //     91: istore 8
        //     93: iload 8
        //     95: iload 7
        //     97: if_icmpge +247 -> 344
        //     100: aload_2
        //     101: iload 8
        //     103: invokeinterface 1826 2 0
        //     108: checkcast 3136	android/app/IActivityManager$ContentProviderHolder
        //     111: astore 9
        //     113: aload 9
        //     115: ifnull +239 -> 354
        //     118: aload 9
        //     120: getfield 6210	android/app/IActivityManager$ContentProviderHolder:info	Landroid/content/pm/ProviderInfo;
        //     123: ifnull +231 -> 354
        //     126: aload 9
        //     128: getfield 3137	android/app/IActivityManager$ContentProviderHolder:provider	Landroid/content/IContentProvider;
        //     131: ifnonnull +6 -> 137
        //     134: goto +220 -> 354
        //     137: aload 4
        //     139: getfield 2044	com/android/server/am/ProcessRecord:pubProviders	Ljava/util/HashMap;
        //     142: aload 9
        //     144: getfield 6210	android/app/IActivityManager$ContentProviderHolder:info	Landroid/content/pm/ProviderInfo;
        //     147: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     150: invokevirtual 1762	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
        //     153: checkcast 2049	com/android/server/am/ContentProviderRecord
        //     156: astore 10
        //     158: aload 10
        //     160: ifnull +194 -> 354
        //     163: new 1215	android/content/ComponentName
        //     166: dup
        //     167: aload 10
        //     169: getfield 3043	com/android/server/am/ContentProviderRecord:info	Landroid/content/pm/ProviderInfo;
        //     172: getfield 1829	android/content/pm/ComponentInfo:packageName	Ljava/lang/String;
        //     175: aload 10
        //     177: getfield 3043	com/android/server/am/ContentProviderRecord:info	Landroid/content/pm/ProviderInfo;
        //     180: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     183: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     186: astore 11
        //     188: aload_0
        //     189: getfield 634	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
        //     192: aload 11
        //     194: aload 10
        //     196: invokevirtual 3070	com/android/server/am/ProviderMap:putProviderByClass	(Landroid/content/ComponentName;Lcom/android/server/am/ContentProviderRecord;)V
        //     199: aload 10
        //     201: getfield 3043	com/android/server/am/ContentProviderRecord:info	Landroid/content/pm/ProviderInfo;
        //     204: getfield 1969	android/content/pm/ProviderInfo:authority	Ljava/lang/String;
        //     207: ldc_w 3627
        //     210: invokevirtual 3630	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
        //     213: astore 12
        //     215: iconst_0
        //     216: istore 13
        //     218: iload 13
        //     220: aload 12
        //     222: arraylength
        //     223: if_icmpge +23 -> 246
        //     226: aload_0
        //     227: getfield 634	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
        //     230: aload 12
        //     232: iload 13
        //     234: aaload
        //     235: aload 10
        //     237: invokevirtual 3187	com/android/server/am/ProviderMap:putProviderByName	(Ljava/lang/String;Lcom/android/server/am/ContentProviderRecord;)V
        //     240: iinc 13 1
        //     243: goto -25 -> 218
        //     246: aload_0
        //     247: getfield 636	com/android/server/am/ActivityManagerService:mLaunchingProviders	Ljava/util/ArrayList;
        //     250: invokevirtual 1313	java/util/ArrayList:size	()I
        //     253: istore 14
        //     255: iconst_0
        //     256: istore 15
        //     258: iload 15
        //     260: iload 14
        //     262: if_icmpge +36 -> 298
        //     265: aload_0
        //     266: getfield 636	com/android/server/am/ActivityManagerService:mLaunchingProviders	Ljava/util/ArrayList;
        //     269: iload 15
        //     271: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     274: aload 10
        //     276: if_acmpne +84 -> 360
        //     279: aload_0
        //     280: getfield 636	com/android/server/am/ActivityManagerService:mLaunchingProviders	Ljava/util/ArrayList;
        //     283: iload 15
        //     285: invokevirtual 1366	java/util/ArrayList:remove	(I)Ljava/lang/Object;
        //     288: pop
        //     289: iinc 15 255
        //     292: iinc 14 255
        //     295: goto +65 -> 360
        //     298: aload 10
        //     300: monitorenter
        //     301: aload 10
        //     303: aload 9
        //     305: getfield 3137	android/app/IActivityManager$ContentProviderHolder:provider	Landroid/content/IContentProvider;
        //     308: putfield 2060	com/android/server/am/ContentProviderRecord:provider	Landroid/content/IContentProvider;
        //     311: aload 10
        //     313: aload 4
        //     315: putfield 2063	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
        //     318: aload 10
        //     320: invokevirtual 3483	java/lang/Object:notifyAll	()V
        //     323: aload 10
        //     325: monitorexit
        //     326: aload_0
        //     327: aload 4
        //     329: invokespecial 1464	com/android/server/am/ActivityManagerService:updateOomAdjLocked	(Lcom/android/server/am/ProcessRecord;)Z
        //     332: pop
        //     333: goto +21 -> 354
        //     336: astore 16
        //     338: aload 10
        //     340: monitorexit
        //     341: aload 16
        //     343: athrow
        //     344: lload 5
        //     346: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     349: aload_0
        //     350: monitorexit
        //     351: goto -347 -> 4
        //     354: iinc 8 1
        //     357: goto -264 -> 93
        //     360: iinc 15 1
        //     363: goto -105 -> 258
        //
        // Exception table:
        //     from	to	target	type
        //     14	75	72	finally
        //     77	301	72	finally
        //     326	333	72	finally
        //     341	351	72	finally
        //     301	326	336	finally
        //     338	341	336	finally
    }

    // ERROR //
    public void publishService(IBinder paramIBinder1, Intent paramIntent, IBinder paramIBinder2)
    {
        // Byte code:
        //     0: aload_2
        //     1: ifnull +22 -> 23
        //     4: aload_2
        //     5: invokevirtual 4298	android/content/Intent:hasFileDescriptors	()Z
        //     8: iconst_1
        //     9: if_icmpne +14 -> 23
        //     12: new 1572	java/lang/IllegalArgumentException
        //     15: dup
        //     16: ldc_w 4300
        //     19: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     22: athrow
        //     23: aload_0
        //     24: monitorenter
        //     25: aload_1
        //     26: instanceof 1316
        //     29: ifne +21 -> 50
        //     32: new 1572	java/lang/IllegalArgumentException
        //     35: dup
        //     36: ldc_w 6214
        //     39: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     42: athrow
        //     43: astore 4
        //     45: aload_0
        //     46: monitorexit
        //     47: aload 4
        //     49: athrow
        //     50: aload_1
        //     51: checkcast 1316	com/android/server/am/ServiceRecord
        //     54: astore 5
        //     56: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     59: lstore 6
        //     61: aload 5
        //     63: ifnull +282 -> 345
        //     66: new 1469	android/content/Intent$FilterComparison
        //     69: dup
        //     70: aload_2
        //     71: invokespecial 2950	android/content/Intent$FilterComparison:<init>	(Landroid/content/Intent;)V
        //     74: astore 8
        //     76: aload 5
        //     78: getfield 1450	com/android/server/am/ServiceRecord:bindings	Ljava/util/HashMap;
        //     81: aload 8
        //     83: invokevirtual 1762	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
        //     86: checkcast 1453	com/android/server/am/IntentBindRecord
        //     89: astore 9
        //     91: aload 9
        //     93: ifnull +232 -> 325
        //     96: aload 9
        //     98: getfield 3351	com/android/server/am/IntentBindRecord:received	Z
        //     101: ifne +224 -> 325
        //     104: aload 9
        //     106: aload_3
        //     107: putfield 3348	com/android/server/am/IntentBindRecord:binder	Landroid/os/IBinder;
        //     110: aload 9
        //     112: iconst_1
        //     113: putfield 3354	com/android/server/am/IntentBindRecord:requested	Z
        //     116: aload 9
        //     118: iconst_1
        //     119: putfield 3351	com/android/server/am/IntentBindRecord:received	Z
        //     122: aload 5
        //     124: getfield 1404	com/android/server/am/ServiceRecord:connections	Ljava/util/HashMap;
        //     127: invokevirtual 1405	java/util/HashMap:size	()I
        //     130: ifle +195 -> 325
        //     133: aload 5
        //     135: getfield 1404	com/android/server/am/ServiceRecord:connections	Ljava/util/HashMap;
        //     138: invokevirtual 1409	java/util/HashMap:values	()Ljava/util/Collection;
        //     141: invokeinterface 1412 1 0
        //     146: astore 10
        //     148: aload 10
        //     150: invokeinterface 1016 1 0
        //     155: ifeq +170 -> 325
        //     158: aload 10
        //     160: invokeinterface 1020 1 0
        //     165: checkcast 536	java/util/ArrayList
        //     168: astore 11
        //     170: iconst_0
        //     171: istore 12
        //     173: iload 12
        //     175: aload 11
        //     177: invokevirtual 1313	java/util/ArrayList:size	()I
        //     180: if_icmpge -32 -> 148
        //     183: aload 11
        //     185: iload 12
        //     187: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     190: checkcast 1414	com/android/server/am/ConnectionRecord
        //     193: astore 13
        //     195: aload 8
        //     197: aload 13
        //     199: getfield 1442	com/android/server/am/ConnectionRecord:binding	Lcom/android/server/am/AppBindRecord;
        //     202: getfield 4331	com/android/server/am/AppBindRecord:intent	Lcom/android/server/am/IntentBindRecord;
        //     205: getfield 1467	com/android/server/am/IntentBindRecord:intent	Landroid/content/Intent$FilterComparison;
        //     208: invokevirtual 6215	android/content/Intent$FilterComparison:equals	(Ljava/lang/Object;)Z
        //     211: istore 14
        //     213: iload 14
        //     215: ifne +9 -> 224
        //     218: iinc 12 1
        //     221: goto -48 -> 173
        //     224: aload 13
        //     226: getfield 1422	com/android/server/am/ConnectionRecord:conn	Landroid/app/IServiceConnection;
        //     229: aload 5
        //     231: getfield 1425	com/android/server/am/ServiceRecord:name	Landroid/content/ComponentName;
        //     234: aload_3
        //     235: invokeinterface 1431 3 0
        //     240: goto -22 -> 218
        //     243: astore 15
        //     245: ldc 221
        //     247: new 598	java/lang/StringBuilder
        //     250: dup
        //     251: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     254: ldc_w 4333
        //     257: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     260: aload 5
        //     262: getfield 1425	com/android/server/am/ServiceRecord:name	Landroid/content/ComponentName;
        //     265: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     268: ldc_w 1435
        //     271: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     274: aload 13
        //     276: getfield 1422	com/android/server/am/ConnectionRecord:conn	Landroid/app/IServiceConnection;
        //     279: invokeinterface 1436 1 0
        //     284: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     287: ldc_w 1438
        //     290: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     293: aload 13
        //     295: getfield 1442	com/android/server/am/ConnectionRecord:binding	Lcom/android/server/am/AppBindRecord;
        //     298: getfield 1447	com/android/server/am/AppBindRecord:client	Lcom/android/server/am/ProcessRecord;
        //     301: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     304: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     307: ldc_w 1042
        //     310: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     313: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     316: aload 15
        //     318: invokestatic 1336	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     321: pop
        //     322: goto -104 -> 218
        //     325: aload_0
        //     326: aload 5
        //     328: aload_0
        //     329: getfield 621	com/android/server/am/ActivityManagerService:mStoppingServices	Ljava/util/ArrayList;
        //     332: aload 5
        //     334: invokevirtual 1622	java/util/ArrayList:contains	(Ljava/lang/Object;)Z
        //     337: invokevirtual 1482	com/android/server/am/ActivityManagerService:serviceDoneExecutingLocked	(Lcom/android/server/am/ServiceRecord;Z)V
        //     340: lload 6
        //     342: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     345: aload_0
        //     346: monitorexit
        //     347: return
        //
        // Exception table:
        //     from	to	target	type
        //     25	47	43	finally
        //     50	213	43	finally
        //     224	240	43	finally
        //     245	347	43	finally
        //     224	240	243	java/lang/Exception
    }

    // ERROR //
    public boolean refContentProvider(IBinder paramIBinder, int paramInt1, int paramInt2)
    {
        // Byte code:
        //     0: aload_1
        //     1: checkcast 2073	com/android/server/am/ContentProviderConnection
        //     4: astore 7
        //     6: aload 7
        //     8: ifnonnull +62 -> 70
        //     11: new 4453	java/lang/NullPointerException
        //     14: dup
        //     15: ldc_w 6219
        //     18: invokespecial 4456	java/lang/NullPointerException:<init>	(Ljava/lang/String;)V
        //     21: athrow
        //     22: astore 4
        //     24: new 598	java/lang/StringBuilder
        //     27: dup
        //     28: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     31: ldc_w 6221
        //     34: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     37: aload_1
        //     38: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     41: ldc_w 6223
        //     44: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     47: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     50: astore 5
        //     52: ldc 221
        //     54: aload 5
        //     56: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     59: pop
        //     60: new 1572	java/lang/IllegalArgumentException
        //     63: dup
        //     64: aload 5
        //     66: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     69: athrow
        //     70: aload_0
        //     71: monitorenter
        //     72: iload_2
        //     73: ifle +15 -> 88
        //     76: aload 7
        //     78: iload_2
        //     79: aload 7
        //     81: getfield 5919	com/android/server/am/ContentProviderConnection:numStableIncs	I
        //     84: iadd
        //     85: putfield 5919	com/android/server/am/ContentProviderConnection:numStableIncs	I
        //     88: iload_2
        //     89: aload 7
        //     91: getfield 3144	com/android/server/am/ContentProviderConnection:stableCount	I
        //     94: iadd
        //     95: istore 9
        //     97: iload 9
        //     99: ifge +39 -> 138
        //     102: new 4019	java/lang/IllegalStateException
        //     105: dup
        //     106: new 598	java/lang/StringBuilder
        //     109: dup
        //     110: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     113: ldc_w 6225
        //     116: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     119: iload 9
        //     121: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     124: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     127: invokespecial 4022	java/lang/IllegalStateException:<init>	(Ljava/lang/String;)V
        //     130: athrow
        //     131: astore 8
        //     133: aload_0
        //     134: monitorexit
        //     135: aload 8
        //     137: athrow
        //     138: iload_3
        //     139: ifle +15 -> 154
        //     142: aload 7
        //     144: iload_3
        //     145: aload 7
        //     147: getfield 5922	com/android/server/am/ContentProviderConnection:numUnstableIncs	I
        //     150: iadd
        //     151: putfield 5922	com/android/server/am/ContentProviderConnection:numUnstableIncs	I
        //     154: iload_3
        //     155: aload 7
        //     157: getfield 3147	com/android/server/am/ContentProviderConnection:unstableCount	I
        //     160: iadd
        //     161: istore 10
        //     163: iload 10
        //     165: ifge +32 -> 197
        //     168: new 4019	java/lang/IllegalStateException
        //     171: dup
        //     172: new 598	java/lang/StringBuilder
        //     175: dup
        //     176: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     179: ldc_w 6227
        //     182: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     185: iload 10
        //     187: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     190: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     193: invokespecial 4022	java/lang/IllegalStateException:<init>	(Ljava/lang/String;)V
        //     196: athrow
        //     197: iload 9
        //     199: iload 10
        //     201: iadd
        //     202: ifgt +43 -> 245
        //     205: new 4019	java/lang/IllegalStateException
        //     208: dup
        //     209: new 598	java/lang/StringBuilder
        //     212: dup
        //     213: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     216: ldc_w 6229
        //     219: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     222: iload 9
        //     224: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     227: ldc_w 6231
        //     230: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     233: iload 10
        //     235: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     238: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     241: invokespecial 4022	java/lang/IllegalStateException:<init>	(Ljava/lang/String;)V
        //     244: athrow
        //     245: aload 7
        //     247: iload 9
        //     249: putfield 3144	com/android/server/am/ContentProviderConnection:stableCount	I
        //     252: aload 7
        //     254: iload 10
        //     256: putfield 3147	com/android/server/am/ContentProviderConnection:unstableCount	I
        //     259: aload 7
        //     261: getfield 3636	com/android/server/am/ContentProviderConnection:dead	Z
        //     264: ifne +11 -> 275
        //     267: iconst_1
        //     268: istore 11
        //     270: aload_0
        //     271: monitorexit
        //     272: iload 11
        //     274: ireturn
        //     275: iconst_0
        //     276: istore 11
        //     278: goto -8 -> 270
        //
        // Exception table:
        //     from	to	target	type
        //     0	6	22	java/lang/ClassCastException
        //     76	135	131	finally
        //     142	272	131	finally
    }

    public void registerProcessObserver(IProcessObserver paramIProcessObserver)
    {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerProcessObserver()");
        try
        {
            this.mProcessObservers.register(paramIProcessObserver);
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public Intent registerReceiver(IApplicationThread paramIApplicationThread, String paramString1, IIntentReceiver paramIIntentReceiver, IntentFilter paramIntentFilter, String paramString2)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 6241
        //     4: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     7: aload_0
        //     8: monitorenter
        //     9: aconst_null
        //     10: astore 6
        //     12: aload_1
        //     13: ifnull +493 -> 506
        //     16: aload_0
        //     17: aload_1
        //     18: invokevirtual 3117	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
        //     21: astore 6
        //     23: aload 6
        //     25: ifnonnull +60 -> 85
        //     28: new 1701	java/lang/SecurityException
        //     31: dup
        //     32: new 598	java/lang/StringBuilder
        //     35: dup
        //     36: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     39: ldc_w 3119
        //     42: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     45: aload_1
        //     46: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     49: ldc_w 1736
        //     52: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     55: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     58: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     61: ldc_w 6243
        //     64: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     67: aload_3
        //     68: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     71: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     74: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     77: athrow
        //     78: astore 12
        //     80: aload_0
        //     81: monitorexit
        //     82: aload 12
        //     84: athrow
        //     85: aload 6
        //     87: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     90: getfield 1305	android/content/pm/ApplicationInfo:uid	I
        //     93: sipush 1000
        //     96: if_icmpeq +54 -> 150
        //     99: aload 6
        //     101: getfield 1007	com/android/server/am/ProcessRecord:pkgList	Ljava/util/HashSet;
        //     104: aload_2
        //     105: invokevirtual 2183	java/util/HashSet:contains	(Ljava/lang/Object;)Z
        //     108: ifne +42 -> 150
        //     111: new 1701	java/lang/SecurityException
        //     114: dup
        //     115: new 598	java/lang/StringBuilder
        //     118: dup
        //     119: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     122: ldc_w 6245
        //     125: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     128: aload_2
        //     129: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     132: ldc_w 6247
        //     135: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     138: aload 6
        //     140: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     143: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     146: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     149: athrow
        //     150: aconst_null
        //     151: astore 7
        //     153: aload 4
        //     155: invokevirtual 6250	android/content/IntentFilter:actionsIterator	()Ljava/util/Iterator;
        //     158: astore 8
        //     160: aload 8
        //     162: ifnull +36 -> 198
        //     165: aload 8
        //     167: invokeinterface 1016 1 0
        //     172: ifeq +36 -> 208
        //     175: aload_0
        //     176: aload 8
        //     178: invokeinterface 1020 1 0
        //     183: checkcast 428	java/lang/String
        //     186: aload 4
        //     188: aload 7
        //     190: invokespecial 6252	com/android/server/am/ActivityManagerService:getStickiesLocked	(Ljava/lang/String;Landroid/content/IntentFilter;Ljava/util/List;)Ljava/util/List;
        //     193: astore 7
        //     195: goto -30 -> 165
        //     198: aload_0
        //     199: aconst_null
        //     200: aload 4
        //     202: aconst_null
        //     203: invokespecial 6252	com/android/server/am/ActivityManagerService:getStickiesLocked	(Ljava/lang/String;Landroid/content/IntentFilter;Ljava/util/List;)Ljava/util/List;
        //     206: astore 7
        //     208: aload 7
        //     210: ifnull +304 -> 514
        //     213: aload 7
        //     215: iconst_0
        //     216: invokeinterface 1826 2 0
        //     221: checkcast 1353	android/content/Intent
        //     224: astore 9
        //     226: aload_3
        //     227: ifnonnull +8 -> 235
        //     230: aload_0
        //     231: monitorexit
        //     232: goto +279 -> 511
        //     235: aload_0
        //     236: getfield 603	com/android/server/am/ActivityManagerService:mRegisteredReceivers	Ljava/util/HashMap;
        //     239: aload_3
        //     240: invokeinterface 6255 1 0
        //     245: invokevirtual 1762	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
        //     248: checkcast 2086	com/android/server/am/ReceiverList
        //     251: astore 10
        //     253: aload 10
        //     255: ifnonnull +60 -> 315
        //     258: new 2086	com/android/server/am/ReceiverList
        //     261: dup
        //     262: aload_0
        //     263: aload 6
        //     265: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     268: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     271: aload_3
        //     272: invokespecial 6258	com/android/server/am/ReceiverList:<init>	(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;IILandroid/content/IIntentReceiver;)V
        //     275: astore 10
        //     277: aload 10
        //     279: getfield 4965	com/android/server/am/ReceiverList:app	Lcom/android/server/am/ProcessRecord;
        //     282: ifnull +189 -> 471
        //     285: aload 10
        //     287: getfield 4965	com/android/server/am/ReceiverList:app	Lcom/android/server/am/ProcessRecord;
        //     290: getfield 2084	com/android/server/am/ProcessRecord:receivers	Ljava/util/HashSet;
        //     293: aload 10
        //     295: invokevirtual 1901	java/util/HashSet:add	(Ljava/lang/Object;)Z
        //     298: pop
        //     299: aload_0
        //     300: getfield 603	com/android/server/am/ActivityManagerService:mRegisteredReceivers	Ljava/util/HashMap;
        //     303: aload_3
        //     304: invokeinterface 6255 1 0
        //     309: aload 10
        //     311: invokevirtual 1766	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //     314: pop
        //     315: new 1845	com/android/server/am/BroadcastFilter
        //     318: dup
        //     319: aload 4
        //     321: aload 10
        //     323: aload_2
        //     324: aload 5
        //     326: invokespecial 6261	com/android/server/am/BroadcastFilter:<init>	(Landroid/content/IntentFilter;Lcom/android/server/am/ReceiverList;Ljava/lang/String;Ljava/lang/String;)V
        //     329: astore 14
        //     331: aload 10
        //     333: aload 14
        //     335: invokevirtual 6262	com/android/server/am/ReceiverList:add	(Ljava/lang/Object;)Z
        //     338: pop
        //     339: aload 14
        //     341: invokevirtual 6265	com/android/server/am/BroadcastFilter:debugCheck	()Z
        //     344: ifne +12 -> 356
        //     347: ldc 221
        //     349: ldc_w 6267
        //     352: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     355: pop
        //     356: aload_0
        //     357: getfield 608	com/android/server/am/ActivityManagerService:mReceiverResolver	Lcom/android/server/IntentResolver;
        //     360: aload 14
        //     362: invokevirtual 6271	com/android/server/IntentResolver:addFilter	(Landroid/content/IntentFilter;)V
        //     365: aload 7
        //     367: ifnull +134 -> 501
        //     370: new 536	java/util/ArrayList
        //     373: dup
        //     374: invokespecial 537	java/util/ArrayList:<init>	()V
        //     377: astore 16
        //     379: aload 16
        //     381: aload 14
        //     383: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     386: pop
        //     387: aload 7
        //     389: invokeinterface 1801 1 0
        //     394: istore 18
        //     396: iconst_0
        //     397: istore 19
        //     399: iload 19
        //     401: iload 18
        //     403: if_icmpge +98 -> 501
        //     406: aload 7
        //     408: iload 19
        //     410: invokeinterface 1826 2 0
        //     415: checkcast 1353	android/content/Intent
        //     418: astore 20
        //     420: aload_0
        //     421: aload 20
        //     423: invokevirtual 1805	com/android/server/am/ActivityManagerService:broadcastQueueForIntent	(Landroid/content/Intent;)Lcom/android/server/am/BroadcastQueue;
        //     426: astore 21
        //     428: aload 21
        //     430: new 1807	com/android/server/am/BroadcastRecord
        //     433: dup
        //     434: aload 21
        //     436: aload 20
        //     438: aconst_null
        //     439: aconst_null
        //     440: bipush 255
        //     442: bipush 255
        //     444: aconst_null
        //     445: aload 16
        //     447: aconst_null
        //     448: iconst_0
        //     449: aconst_null
        //     450: aconst_null
        //     451: iconst_0
        //     452: iconst_1
        //     453: iconst_1
        //     454: invokespecial 1810	com/android/server/am/BroadcastRecord:<init>	(Lcom/android/server/am/BroadcastQueue;Landroid/content/Intent;Lcom/android/server/am/ProcessRecord;Ljava/lang/String;IILjava/lang/String;Ljava/util/List;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;ZZZ)V
        //     457: invokevirtual 1818	com/android/server/am/BroadcastQueue:enqueueParallelBroadcastLocked	(Lcom/android/server/am/BroadcastRecord;)V
        //     460: aload 21
        //     462: invokevirtual 1821	com/android/server/am/BroadcastQueue:scheduleBroadcastsLocked	()V
        //     465: iinc 19 1
        //     468: goto -69 -> 399
        //     471: aload_3
        //     472: invokeinterface 6255 1 0
        //     477: aload 10
        //     479: iconst_0
        //     480: invokeinterface 1132 3 0
        //     485: aload 10
        //     487: iconst_1
        //     488: putfield 6274	com/android/server/am/ReceiverList:linkedToDeath	Z
        //     491: goto -192 -> 299
        //     494: astore 11
        //     496: aload_0
        //     497: monitorexit
        //     498: goto +13 -> 511
        //     501: aload_0
        //     502: monitorexit
        //     503: goto +8 -> 511
        //     506: aconst_null
        //     507: astore_2
        //     508: goto -358 -> 150
        //     511: aload 9
        //     513: areturn
        //     514: aconst_null
        //     515: astore 9
        //     517: goto -291 -> 226
        //
        // Exception table:
        //     from	to	target	type
        //     16	82	78	finally
        //     85	465	78	finally
        //     471	485	78	finally
        //     485	503	78	finally
        //     471	485	494	android/os/RemoteException
    }

    void removeConnectionLocked(ConnectionRecord paramConnectionRecord, ProcessRecord paramProcessRecord, ActivityRecord paramActivityRecord)
    {
        IBinder localIBinder = paramConnectionRecord.conn.asBinder();
        AppBindRecord localAppBindRecord = paramConnectionRecord.binding;
        ServiceRecord localServiceRecord = localAppBindRecord.service;
        ArrayList localArrayList1 = (ArrayList)localServiceRecord.connections.get(localIBinder);
        if (localArrayList1 != null)
        {
            localArrayList1.remove(paramConnectionRecord);
            if (localArrayList1.size() == 0)
                localServiceRecord.connections.remove(localIBinder);
        }
        localAppBindRecord.connections.remove(paramConnectionRecord);
        if ((paramConnectionRecord.activity != null) && (paramConnectionRecord.activity != paramActivityRecord) && (paramConnectionRecord.activity.connections != null))
            paramConnectionRecord.activity.connections.remove(paramConnectionRecord);
        if (localAppBindRecord.client != paramProcessRecord)
        {
            localAppBindRecord.client.connections.remove(paramConnectionRecord);
            if ((0x8 & paramConnectionRecord.flags) != 0)
                localAppBindRecord.client.updateHasAboveClientLocked();
        }
        ArrayList localArrayList2 = (ArrayList)this.mServiceConnections.get(localIBinder);
        if (localArrayList2 != null)
        {
            localArrayList2.remove(paramConnectionRecord);
            if (localArrayList2.size() == 0)
                this.mServiceConnections.remove(localIBinder);
        }
        if (localAppBindRecord.connections.size() == 0)
            localAppBindRecord.intent.apps.remove(localAppBindRecord.client);
        if ((paramConnectionRecord.serviceDead) || ((localServiceRecord.app != null) && (localServiceRecord.app.thread != null) && (localAppBindRecord.intent.apps.size() == 0) && (localAppBindRecord.intent.hasBound)));
        try
        {
            bumpServiceExecutingLocked(localServiceRecord, "unbind");
            updateOomAdjLocked(localServiceRecord.app);
            localAppBindRecord.intent.hasBound = false;
            localAppBindRecord.intent.doRebind = false;
            localServiceRecord.app.thread.scheduleUnbindService(localServiceRecord, localAppBindRecord.intent.intent.getIntent());
            if ((0x1 & paramConnectionRecord.flags) != 0)
                bringDownServiceLocked(localServiceRecord, false);
            return;
        }
        catch (Exception localException)
        {
            while (true)
            {
                Slog.w("ActivityManager", "Exception when unbinding service " + localServiceRecord.shortName, localException);
                serviceDoneExecutingLocked(localServiceRecord, true);
            }
        }
    }

    // ERROR //
    public void removeContentProvider(IBinder paramIBinder, boolean paramBoolean)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 6281
        //     4: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     7: aload_0
        //     8: monitorenter
        //     9: aload_1
        //     10: checkcast 2073	com/android/server/am/ContentProviderConnection
        //     13: astore 7
        //     15: aload 7
        //     17: ifnonnull +68 -> 85
        //     20: new 4453	java/lang/NullPointerException
        //     23: dup
        //     24: ldc_w 6219
        //     27: invokespecial 4456	java/lang/NullPointerException:<init>	(Ljava/lang/String;)V
        //     30: athrow
        //     31: astore 6
        //     33: aload_0
        //     34: monitorexit
        //     35: aload 6
        //     37: athrow
        //     38: astore_3
        //     39: new 598	java/lang/StringBuilder
        //     42: dup
        //     43: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     46: ldc_w 6283
        //     49: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     52: aload_1
        //     53: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     56: ldc_w 6223
        //     59: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     62: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     65: astore 4
        //     67: ldc 221
        //     69: aload 4
        //     71: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     74: pop
        //     75: new 1572	java/lang/IllegalArgumentException
        //     78: dup
        //     79: aload 4
        //     81: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     84: athrow
        //     85: aload_0
        //     86: aload 7
        //     88: aconst_null
        //     89: aconst_null
        //     90: iload_2
        //     91: invokevirtual 3155	com/android/server/am/ActivityManagerService:decProviderCountLocked	(Lcom/android/server/am/ContentProviderConnection;Lcom/android/server/am/ContentProviderRecord;Landroid/os/IBinder;Z)Z
        //     94: ifeq +7 -> 101
        //     97: aload_0
        //     98: invokevirtual 1396	com/android/server/am/ActivityManagerService:updateOomAdjLocked	()V
        //     101: aload_0
        //     102: monitorexit
        //     103: return
        //
        // Exception table:
        //     from	to	target	type
        //     9	15	31	finally
        //     20	35	31	finally
        //     39	103	31	finally
        //     9	15	38	java/lang/ClassCastException
    }

    public void removeContentProviderExternal(String paramString, IBinder paramIBinder)
    {
        enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call removeContentProviderExternal()");
        removeContentProviderExternalUnchecked(paramString, paramIBinder);
    }

    void removeReceiverLocked(ReceiverList paramReceiverList)
    {
        this.mRegisteredReceivers.remove(paramReceiverList.receiver.asBinder());
        int i = paramReceiverList.size();
        for (int j = 0; j < i; j++)
            this.mReceiverResolver.removeFilter((IntentFilter)paramReceiverList.get(j));
    }

    public boolean removeSubTask(int paramInt1, int paramInt2)
    {
        boolean bool = true;
        while (true)
        {
            try
            {
                enforceCallingPermission("android.permission.REMOVE_TASKS", "removeSubTask()");
                long l = Binder.clearCallingIdentity();
                try
                {
                    ActivityRecord localActivityRecord = this.mMainStack.removeTaskActivitiesLocked(paramInt1, paramInt2, true);
                    if (localActivityRecord != null)
                    {
                        Binder.restoreCallingIdentity(l);
                        return bool;
                    }
                }
                finally
                {
                    localObject2 = finally;
                    Binder.restoreCallingIdentity(l);
                    throw localObject2;
                }
            }
            finally
            {
            }
            bool = false;
        }
    }

    // ERROR //
    public boolean removeTask(int paramInt1, int paramInt2)
    {
        // Byte code:
        //     0: iconst_1
        //     1: istore_3
        //     2: aload_0
        //     3: monitorenter
        //     4: aload_0
        //     5: ldc_w 6298
        //     8: ldc_w 6307
        //     11: invokevirtual 4280	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
        //     14: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     17: lstore 5
        //     19: aload_0
        //     20: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     23: iload_1
        //     24: bipush 255
        //     26: iconst_0
        //     27: invokevirtual 6304	com/android/server/am/ActivityStack:removeTaskActivitiesLocked	(IIZ)Lcom/android/server/am/ActivityRecord;
        //     30: astore 8
        //     32: aload 8
        //     34: ifnull +35 -> 69
        //     37: aload_0
        //     38: getfield 547	com/android/server/am/ActivityManagerService:mRecentTasks	Ljava/util/ArrayList;
        //     41: aload 8
        //     43: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     46: invokevirtual 1280	java/util/ArrayList:remove	(Ljava/lang/Object;)Z
        //     49: pop
        //     50: aload_0
        //     51: aload 8
        //     53: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     56: iload_2
        //     57: invokespecial 6309	com/android/server/am/ActivityManagerService:cleanUpRemovedTaskLocked	(Lcom/android/server/am/TaskRecord;I)V
        //     60: lload 5
        //     62: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     65: aload_0
        //     66: monitorexit
        //     67: iload_3
        //     68: ireturn
        //     69: aconst_null
        //     70: astore 9
        //     72: iconst_0
        //     73: istore 10
        //     75: iload 10
        //     77: aload_0
        //     78: getfield 547	com/android/server/am/ActivityManagerService:mRecentTasks	Ljava/util/ArrayList;
        //     81: invokevirtual 1313	java/util/ArrayList:size	()I
        //     84: if_icmpge +30 -> 114
        //     87: aload_0
        //     88: getfield 547	com/android/server/am/ActivityManagerService:mRecentTasks	Ljava/util/ArrayList;
        //     91: iload 10
        //     93: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     96: checkcast 2148	com/android/server/am/TaskRecord
        //     99: astore 13
        //     101: aload 13
        //     103: getfield 3276	com/android/server/am/TaskRecord:taskId	I
        //     106: iload_1
        //     107: if_icmpne +54 -> 161
        //     110: aload 13
        //     112: astore 9
        //     114: aload 9
        //     116: ifnull +108 -> 224
        //     119: aload 9
        //     121: getfield 5667	com/android/server/am/TaskRecord:numActivities	I
        //     124: ifgt +43 -> 167
        //     127: aload_0
        //     128: getfield 547	com/android/server/am/ActivityManagerService:mRecentTasks	Ljava/util/ArrayList;
        //     131: iload 10
        //     133: invokevirtual 1366	java/util/ArrayList:remove	(I)Ljava/lang/Object;
        //     136: pop
        //     137: aload_0
        //     138: aload 9
        //     140: iload_2
        //     141: invokespecial 6309	com/android/server/am/ActivityManagerService:cleanUpRemovedTaskLocked	(Lcom/android/server/am/TaskRecord;I)V
        //     144: lload 5
        //     146: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     149: aload_0
        //     150: monitorexit
        //     151: goto -84 -> 67
        //     154: astore 4
        //     156: aload_0
        //     157: monitorexit
        //     158: aload 4
        //     160: athrow
        //     161: iinc 10 1
        //     164: goto -89 -> 75
        //     167: ldc 221
        //     169: new 598	java/lang/StringBuilder
        //     172: dup
        //     173: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     176: ldc_w 6311
        //     179: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     182: iload_1
        //     183: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     186: ldc_w 6313
        //     189: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     192: ldc_w 6315
        //     195: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     198: aload 9
        //     200: getfield 5667	com/android/server/am/TaskRecord:numActivities	I
        //     203: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     206: ldc_w 1602
        //     209: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     212: aload 9
        //     214: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     217: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     220: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     223: pop
        //     224: lload 5
        //     226: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     229: aload_0
        //     230: monitorexit
        //     231: iconst_0
        //     232: istore_3
        //     233: goto -166 -> 67
        //     236: astore 7
        //     238: lload 5
        //     240: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     243: aload 7
        //     245: athrow
        //
        // Exception table:
        //     from	to	target	type
        //     4	19	154	finally
        //     60	67	154	finally
        //     144	158	154	finally
        //     224	246	154	finally
        //     19	60	236	finally
        //     75	144	236	finally
        //     167	224	236	finally
    }

    void removeUriPermissionIfNeededLocked(UriPermission paramUriPermission)
    {
        if ((0x3 & paramUriPermission.modeFlags) == 0)
        {
            HashMap localHashMap = (HashMap)this.mGrantedUriPermissions.get(paramUriPermission.uid);
            if (localHashMap != null)
            {
                localHashMap.remove(paramUriPermission.uri);
                if (localHashMap.size() == 0)
                    this.mGrantedUriPermissions.remove(paramUriPermission.uid);
            }
        }
    }

    void reportResumedActivityLocked(ActivityRecord paramActivityRecord)
    {
        updateUsageStats(paramActivityRecord, true);
    }

    public void reportThumbnail(IBinder paramIBinder, Bitmap paramBitmap, CharSequence paramCharSequence)
    {
        long l = Binder.clearCallingIdentity();
        sendPendingThumbnail(null, paramIBinder, paramBitmap, paramCharSequence, true);
        Binder.restoreCallingIdentity(l);
    }

    public void resumeAppSwitches()
    {
        if (checkCallingPermission("android.permission.STOP_APP_SWITCHES") != 0)
            throw new SecurityException("Requires permission android.permission.STOP_APP_SWITCHES");
        try
        {
            this.mAppSwitchesAllowedTime = 0L;
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public void revokeUriPermission(IApplicationThread paramIApplicationThread, Uri paramUri, int paramInt)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 6330
        //     4: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     7: aload_0
        //     8: monitorenter
        //     9: aload_0
        //     10: aload_1
        //     11: invokevirtual 3117	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
        //     14: astore 5
        //     16: aload 5
        //     18: ifnonnull +48 -> 66
        //     21: new 1701	java/lang/SecurityException
        //     24: dup
        //     25: new 598	java/lang/StringBuilder
        //     28: dup
        //     29: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     32: ldc_w 3119
        //     35: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     38: aload_1
        //     39: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     42: ldc_w 6332
        //     45: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     48: aload_2
        //     49: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     52: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     55: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     58: athrow
        //     59: astore 4
        //     61: aload_0
        //     62: monitorexit
        //     63: aload 4
        //     65: athrow
        //     66: aload_2
        //     67: ifnonnull +17 -> 84
        //     70: ldc 221
        //     72: ldc_w 6334
        //     75: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     78: pop
        //     79: aload_0
        //     80: monitorexit
        //     81: goto +147 -> 228
        //     84: iload_3
        //     85: iconst_3
        //     86: iand
        //     87: istore 6
        //     89: iload 6
        //     91: ifne +8 -> 99
        //     94: aload_0
        //     95: monitorexit
        //     96: goto +132 -> 228
        //     99: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     102: astore 7
        //     104: aload_2
        //     105: invokevirtual 1966	android/net/Uri:getAuthority	()Ljava/lang/String;
        //     108: astore 8
        //     110: aconst_null
        //     111: astore 9
        //     113: aload_0
        //     114: getfield 634	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
        //     117: aload 8
        //     119: aload 5
        //     121: getfield 2182	com/android/server/am/ProcessRecord:userId	I
        //     124: invokevirtual 3125	com/android/server/am/ProviderMap:getProviderByName	(Ljava/lang/String;I)Lcom/android/server/am/ContentProviderRecord;
        //     127: astore 10
        //     129: aload 10
        //     131: ifnull +49 -> 180
        //     134: aload 10
        //     136: getfield 3043	com/android/server/am/ContentProviderRecord:info	Landroid/content/pm/ProviderInfo;
        //     139: astore 9
        //     141: aload 9
        //     143: ifnonnull +63 -> 206
        //     146: ldc 221
        //     148: new 598	java/lang/StringBuilder
        //     151: dup
        //     152: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     155: ldc_w 3752
        //     158: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     161: aload_2
        //     162: invokevirtual 3755	android/net/Uri:toSafeString	()Ljava/lang/String;
        //     165: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     168: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     171: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     174: pop
        //     175: aload_0
        //     176: monitorexit
        //     177: goto +51 -> 228
        //     180: aload 7
        //     182: aload 8
        //     184: sipush 2048
        //     187: aload 5
        //     189: getfield 2182	com/android/server/am/ProcessRecord:userId	I
        //     192: invokeinterface 3163 4 0
        //     197: astore 13
        //     199: aload 13
        //     201: astore 9
        //     203: goto -62 -> 141
        //     206: aload_0
        //     207: aload 5
        //     209: getfield 1296	com/android/server/am/ProcessRecord:uid	I
        //     212: aload_2
        //     213: iload 6
        //     215: invokespecial 6336	com/android/server/am/ActivityManagerService:revokeUriPermissionLocked	(ILandroid/net/Uri;I)V
        //     218: aload_0
        //     219: monitorexit
        //     220: goto +8 -> 228
        //     223: astore 11
        //     225: goto -84 -> 141
        //     228: return
        //
        // Exception table:
        //     from	to	target	type
        //     9	63	59	finally
        //     70	177	59	finally
        //     180	199	59	finally
        //     206	220	59	finally
        //     180	199	223	android/os/RemoteException
    }

    // ERROR //
    public void revokeUriPermissionFromOwner(IBinder paramIBinder, Uri paramUri, int paramInt)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_1
        //     3: invokestatic 5850	com/android/server/am/UriPermissionOwner:fromExternalToken	(Landroid/os/IBinder;)Lcom/android/server/am/UriPermissionOwner;
        //     6: astore 5
        //     8: aload 5
        //     10: ifnonnull +38 -> 48
        //     13: new 1572	java/lang/IllegalArgumentException
        //     16: dup
        //     17: new 598	java/lang/StringBuilder
        //     20: dup
        //     21: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     24: ldc_w 5852
        //     27: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     30: aload_1
        //     31: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     34: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     37: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     40: athrow
        //     41: astore 4
        //     43: aload_0
        //     44: monitorexit
        //     45: aload 4
        //     47: athrow
        //     48: aload_2
        //     49: ifnonnull +12 -> 61
        //     52: aload 5
        //     54: iload_3
        //     55: invokevirtual 6340	com/android/server/am/UriPermissionOwner:removeUriPermissionsLocked	(I)V
        //     58: aload_0
        //     59: monitorexit
        //     60: return
        //     61: aload 5
        //     63: aload_2
        //     64: iload_3
        //     65: invokevirtual 6344	com/android/server/am/UriPermissionOwner:removeUriPermissionLocked	(Landroid/net/Uri;I)V
        //     68: goto -10 -> 58
        //
        // Exception table:
        //     from	to	target	type
        //     2	45	41	finally
        //     52	68	41	finally
    }

    final void scheduleAppGcLocked(ProcessRecord paramProcessRecord)
    {
        long l = SystemClock.uptimeMillis();
        if (60000L + paramProcessRecord.lastRequestedGc > l);
        while (true)
        {
            return;
            if (!this.mProcessesToGc.contains(paramProcessRecord))
            {
                addProcessToGcListLocked(paramProcessRecord);
                scheduleAppGcsLocked();
            }
        }
    }

    final void scheduleAppGcsLocked()
    {
        this.mHandler.removeMessages(5);
        if (this.mProcessesToGc.size() > 0)
        {
            ProcessRecord localProcessRecord = (ProcessRecord)this.mProcessesToGc.get(0);
            Message localMessage = this.mHandler.obtainMessage(5);
            long l1 = 60000L + localProcessRecord.lastRequestedGc;
            long l2 = SystemClock.uptimeMillis();
            if (l1 < l2 + 5000L)
                l1 = l2 + 5000L;
            this.mHandler.sendMessageAtTime(localMessage, l1);
        }
    }

    boolean sendPendingBroadcastsLocked(ProcessRecord paramProcessRecord)
    {
        boolean bool = false;
        BroadcastQueue[] arrayOfBroadcastQueue = this.mBroadcastQueues;
        int i = arrayOfBroadcastQueue.length;
        for (int j = 0; j < i; j++)
            bool |= arrayOfBroadcastQueue[j].sendPendingBroadcastsLocked(paramProcessRecord);
        return bool;
    }

    // ERROR //
    final void sendPendingThumbnail(ActivityRecord paramActivityRecord, IBinder paramIBinder, Bitmap paramBitmap, CharSequence paramCharSequence, boolean paramBoolean)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_1
        //     3: ifnonnull +21 -> 24
        //     6: aload_0
        //     7: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     10: aload_2
        //     11: invokevirtual 3098	com/android/server/am/ActivityStack:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
        //     14: astore_1
        //     15: aload_1
        //     16: ifnonnull +8 -> 24
        //     19: aload_0
        //     20: monitorexit
        //     21: goto +316 -> 337
        //     24: aload_3
        //     25: ifnonnull +27 -> 52
        //     28: aload_1
        //     29: getfield 5787	com/android/server/am/ActivityRecord:thumbHolder	Lcom/android/server/am/ThumbnailHolder;
        //     32: ifnull +20 -> 52
        //     35: aload_1
        //     36: getfield 5787	com/android/server/am/ActivityRecord:thumbHolder	Lcom/android/server/am/ThumbnailHolder;
        //     39: getfield 6349	com/android/server/am/ThumbnailHolder:lastThumbnail	Landroid/graphics/Bitmap;
        //     42: astore_3
        //     43: aload_1
        //     44: getfield 5787	com/android/server/am/ActivityRecord:thumbHolder	Lcom/android/server/am/ThumbnailHolder;
        //     47: getfield 5687	com/android/server/am/ThumbnailHolder:lastDescription	Ljava/lang/CharSequence;
        //     50: astore 4
        //     52: aload_3
        //     53: ifnonnull +18 -> 71
        //     56: iload 5
        //     58: ifne +13 -> 71
        //     61: aload_0
        //     62: monitorexit
        //     63: goto +274 -> 337
        //     66: aload_0
        //     67: monitorexit
        //     68: aload 6
        //     70: athrow
        //     71: aload_1
        //     72: getfield 2617	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
        //     75: astore 7
        //     77: aload_0
        //     78: getfield 627	com/android/server/am/ActivityManagerService:mPendingThumbnails	Ljava/util/ArrayList;
        //     81: invokevirtual 1313	java/util/ArrayList:size	()I
        //     84: istore 8
        //     86: iload 8
        //     88: istore 9
        //     90: iconst_0
        //     91: istore 10
        //     93: aconst_null
        //     94: astore 11
        //     96: iload 10
        //     98: iload 9
        //     100: if_icmpge +102 -> 202
        //     103: aload_0
        //     104: getfield 627	com/android/server/am/ActivityManagerService:mPendingThumbnails	Ljava/util/ArrayList;
        //     107: iload 10
        //     109: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     112: checkcast 5798	com/android/server/am/PendingThumbnailsRecord
        //     115: astore 21
        //     117: aload 21
        //     119: getfield 5804	com/android/server/am/PendingThumbnailsRecord:pendingRecords	Ljava/util/HashSet;
        //     122: aload_1
        //     123: invokevirtual 1545	java/util/HashSet:remove	(Ljava/lang/Object;)Z
        //     126: ifeq +62 -> 188
        //     129: aload 11
        //     131: ifnonnull +199 -> 330
        //     134: new 536	java/util/ArrayList
        //     137: dup
        //     138: invokespecial 537	java/util/ArrayList:<init>	()V
        //     141: astore 22
        //     143: aload 22
        //     145: aload 21
        //     147: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     150: pop
        //     151: aload 21
        //     153: getfield 5804	com/android/server/am/PendingThumbnailsRecord:pendingRecords	Ljava/util/HashSet;
        //     156: invokevirtual 1885	java/util/HashSet:size	()I
        //     159: ifne +33 -> 192
        //     162: aload 21
        //     164: iconst_1
        //     165: putfield 6351	com/android/server/am/PendingThumbnailsRecord:finished	Z
        //     168: aload_0
        //     169: getfield 627	com/android/server/am/ActivityManagerService:mPendingThumbnails	Ljava/util/ArrayList;
        //     172: iload 10
        //     174: invokevirtual 1366	java/util/ArrayList:remove	(I)Ljava/lang/Object;
        //     177: pop
        //     178: iinc 9 255
        //     181: aload 22
        //     183: astore 11
        //     185: goto -89 -> 96
        //     188: aload 11
        //     190: astore 22
        //     192: iinc 10 1
        //     195: aload 22
        //     197: astore 11
        //     199: goto -103 -> 96
        //     202: aload_0
        //     203: monitorexit
        //     204: aload 11
        //     206: ifnull +110 -> 316
        //     209: aload 11
        //     211: invokevirtual 1313	java/util/ArrayList:size	()I
        //     214: istore 14
        //     216: iconst_0
        //     217: istore 15
        //     219: iload 15
        //     221: iload 14
        //     223: if_icmpge +93 -> 316
        //     226: aload 11
        //     228: iload 15
        //     230: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     233: checkcast 5798	com/android/server/am/PendingThumbnailsRecord
        //     236: astore 18
        //     238: aload 18
        //     240: getfield 6354	com/android/server/am/PendingThumbnailsRecord:receiver	Landroid/app/IThumbnailReceiver;
        //     243: astore 19
        //     245: aload 7
        //     247: ifnull +46 -> 293
        //     250: aload 7
        //     252: getfield 3276	com/android/server/am/TaskRecord:taskId	I
        //     255: istore 20
        //     257: aload 19
        //     259: iload 20
        //     261: aload_3
        //     262: aload 4
        //     264: invokeinterface 6358 4 0
        //     269: aload 18
        //     271: getfield 6351	com/android/server/am/PendingThumbnailsRecord:finished	Z
        //     274: ifeq +13 -> 287
        //     277: aload 18
        //     279: getfield 6354	com/android/server/am/PendingThumbnailsRecord:receiver	Landroid/app/IThumbnailReceiver;
        //     282: invokeinterface 5768 1 0
        //     287: iinc 15 1
        //     290: goto -71 -> 219
        //     293: bipush 255
        //     295: istore 20
        //     297: goto -40 -> 257
        //     300: astore 16
        //     302: ldc 221
        //     304: ldc_w 6360
        //     307: aload 16
        //     309: invokestatic 1336	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
        //     312: pop
        //     313: goto -26 -> 287
        //     316: aload 11
        //     318: pop
        //     319: goto +18 -> 337
        //     322: astore 6
        //     324: aload 11
        //     326: pop
        //     327: goto -261 -> 66
        //     330: aload 11
        //     332: astore 22
        //     334: goto -191 -> 143
        //     337: return
        //     338: astore 6
        //     340: goto -274 -> 66
        //
        // Exception table:
        //     from	to	target	type
        //     226	287	300	java/lang/Exception
        //     103	143	322	finally
        //     202	204	322	finally
        //     6	68	338	finally
        //     71	86	338	finally
        //     143	178	338	finally
    }

    // ERROR //
    public void serviceDoneExecuting(IBinder paramIBinder, int paramInt1, int paramInt2, int paramInt3)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_1
        //     3: instanceof 1316
        //     6: ifne +21 -> 27
        //     9: new 1572	java/lang/IllegalArgumentException
        //     12: dup
        //     13: ldc_w 6214
        //     16: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     19: athrow
        //     20: astore 5
        //     22: aload_0
        //     23: monitorexit
        //     24: aload 5
        //     26: athrow
        //     27: aload_1
        //     28: checkcast 1316	com/android/server/am/ServiceRecord
        //     31: astore 6
        //     33: aload_0
        //     34: getfield 621	com/android/server/am/ActivityManagerService:mStoppingServices	Ljava/util/ArrayList;
        //     37: aload_1
        //     38: invokevirtual 1622	java/util/ArrayList:contains	(Ljava/lang/Object;)Z
        //     41: istore 7
        //     43: aload 6
        //     45: ifnull +282 -> 327
        //     48: aload 6
        //     50: aload_1
        //     51: if_acmpeq +59 -> 110
        //     54: ldc 221
        //     56: new 598	java/lang/StringBuilder
        //     59: dup
        //     60: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     63: ldc_w 6364
        //     66: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     69: aload 6
        //     71: getfield 1425	com/android/server/am/ServiceRecord:name	Landroid/content/ComponentName;
        //     74: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     77: ldc_w 6366
        //     80: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     83: aload_1
        //     84: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     87: ldc_w 6368
        //     90: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     93: aload 6
        //     95: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     98: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     101: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     104: pop
        //     105: aload_0
        //     106: monitorexit
        //     107: goto +251 -> 358
        //     110: iload_2
        //     111: iconst_1
        //     112: if_icmpne +114 -> 226
        //     115: aload 6
        //     117: iconst_1
        //     118: putfield 3605	com/android/server/am/ServiceRecord:callStart	Z
        //     121: iload 4
        //     123: lookupswitch	default:+49->172, 0:+78->201, 1:+78->201, 2:+126->249, 3:+152->275, 1000:+193->316
        //     173: iconst_3
        //     174: fload_2
        //     175: dup
        //     176: new 598	java/lang/StringBuilder
        //     179: dup
        //     180: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     183: ldc_w 6370
        //     186: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     189: iload 4
        //     191: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     194: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     197: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     200: athrow
        //     201: aload 6
        //     203: iload_3
        //     204: iconst_1
        //     205: invokevirtual 6374	com/android/server/am/ServiceRecord:findDeliveredStart	(IZ)Lcom/android/server/am/ServiceRecord$StartItem;
        //     208: pop
        //     209: aload 6
        //     211: iconst_0
        //     212: putfield 3365	com/android/server/am/ServiceRecord:stopIfKilled	Z
        //     215: iload 4
        //     217: ifne +9 -> 226
        //     220: aload 6
        //     222: iconst_0
        //     223: putfield 3605	com/android/server/am/ServiceRecord:callStart	Z
        //     226: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     229: lstore 9
        //     231: aload_0
        //     232: aload 6
        //     234: iload 7
        //     236: invokevirtual 1482	com/android/server/am/ActivityManagerService:serviceDoneExecutingLocked	(Lcom/android/server/am/ServiceRecord;Z)V
        //     239: lload 9
        //     241: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     244: aload_0
        //     245: monitorexit
        //     246: goto +112 -> 358
        //     249: aload 6
        //     251: iload_3
        //     252: iconst_1
        //     253: invokevirtual 6374	com/android/server/am/ServiceRecord:findDeliveredStart	(IZ)Lcom/android/server/am/ServiceRecord$StartItem;
        //     256: pop
        //     257: aload 6
        //     259: invokevirtual 6377	com/android/server/am/ServiceRecord:getLastStartId	()I
        //     262: iload_3
        //     263: if_icmpne -48 -> 215
        //     266: aload 6
        //     268: iconst_1
        //     269: putfield 3365	com/android/server/am/ServiceRecord:stopIfKilled	Z
        //     272: goto -57 -> 215
        //     275: aload 6
        //     277: iload_3
        //     278: iconst_0
        //     279: invokevirtual 6374	com/android/server/am/ServiceRecord:findDeliveredStart	(IZ)Lcom/android/server/am/ServiceRecord$StartItem;
        //     282: astore 12
        //     284: aload 12
        //     286: ifnull -71 -> 215
        //     289: aload 12
        //     291: iconst_0
        //     292: putfield 3808	com/android/server/am/ServiceRecord$StartItem:deliveryCount	I
        //     295: aload 12
        //     297: iconst_1
        //     298: aload 12
        //     300: getfield 3811	com/android/server/am/ServiceRecord$StartItem:doneExecutingCount	I
        //     303: iadd
        //     304: putfield 3811	com/android/server/am/ServiceRecord$StartItem:doneExecutingCount	I
        //     307: aload 6
        //     309: iconst_1
        //     310: putfield 3365	com/android/server/am/ServiceRecord:stopIfKilled	Z
        //     313: goto -98 -> 215
        //     316: aload 6
        //     318: iload_3
        //     319: iconst_1
        //     320: invokevirtual 6374	com/android/server/am/ServiceRecord:findDeliveredStart	(IZ)Lcom/android/server/am/ServiceRecord$StartItem;
        //     323: pop
        //     324: goto -109 -> 215
        //     327: ldc 221
        //     329: new 598	java/lang/StringBuilder
        //     332: dup
        //     333: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     336: ldc_w 6379
        //     339: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     342: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     345: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     348: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     351: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     354: pop
        //     355: goto -111 -> 244
        //     358: return
        //
        // Exception table:
        //     from	to	target	type
        //     2	24	20	finally
        //     27	355	20	finally
    }

    public void serviceDoneExecutingLocked(ServiceRecord paramServiceRecord, boolean paramBoolean)
    {
        paramServiceRecord.executeNesting = (-1 + paramServiceRecord.executeNesting);
        if ((paramServiceRecord.executeNesting <= 0) && (paramServiceRecord.app != null))
        {
            paramServiceRecord.app.executingServices.remove(paramServiceRecord);
            if (paramServiceRecord.app.executingServices.size() == 0)
                this.mHandler.removeMessages(12, paramServiceRecord.app);
            if (paramBoolean)
            {
                this.mStoppingServices.remove(paramServiceRecord);
                paramServiceRecord.bindings.clear();
            }
            updateOomAdjLocked(paramServiceRecord.app);
        }
    }

    void serviceTimeout(ProcessRecord paramProcessRecord)
    {
        String str = null;
        try
        {
            if ((paramProcessRecord.executingServices.size() == 0) || (paramProcessRecord.thread == null))
                return;
            long l1 = SystemClock.uptimeMillis() - 20000L;
            Iterator localIterator = paramProcessRecord.executingServices.iterator();
            Object localObject2 = null;
            long l2 = 0L;
            ServiceRecord localServiceRecord;
            if (localIterator.hasNext())
            {
                localServiceRecord = (ServiceRecord)localIterator.next();
                if (localServiceRecord.executingStart < l1)
                    localObject2 = localServiceRecord;
            }
            else
            {
                if ((localObject2 == null) || (!this.mLruProcesses.contains(paramProcessRecord)))
                    break label193;
                Slog.w("ActivityManager", "Timeout executing service: " + localObject2);
                str = "Executing service " + localObject2.shortName;
            }
            while (true)
            {
                if (str == null)
                    return;
                appNotResponding(paramProcessRecord, null, null, str);
                return;
                if (localServiceRecord.executingStart <= l2)
                    break;
                l2 = localServiceRecord.executingStart;
                break;
                label193: Message localMessage = this.mHandler.obtainMessage(12);
                localMessage.obj = paramProcessRecord;
                this.mHandler.sendMessageAtTime(localMessage, 20000L + l2);
            }
        }
        finally
        {
        }
    }

    public void setActivityController(IActivityController paramIActivityController)
    {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "setActivityController()");
        try
        {
            this.mController = paramIActivityController;
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public void setAlwaysFinish(boolean paramBoolean)
    {
        enforceCallingPermission("android.permission.SET_ALWAYS_FINISH", "setAlwaysFinish()");
        ContentResolver localContentResolver = this.mContext.getContentResolver();
        if (paramBoolean);
        for (int i = 1; ; i = 0)
        {
            Settings.System.putInt(localContentResolver, "always_finish_activities", i);
            try
            {
                this.mAlwaysFinishActivities = paramBoolean;
                return;
            }
            finally
            {
                localObject = finally;
                throw localObject;
            }
        }
    }

    public void setDebugApp(String paramString, boolean paramBoolean1, boolean paramBoolean2)
    {
        int i = 1;
        enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDebugApp()");
        int j;
        if (paramBoolean2)
        {
            ContentResolver localContentResolver = this.mContext.getContentResolver();
            Settings.System.putString(localContentResolver, "debug_app", paramString);
            if (paramBoolean1)
            {
                j = i;
                Settings.System.putInt(localContentResolver, "wait_for_debugger", j);
            }
        }
        else if (paramBoolean2);
        while (true)
        {
            try
            {
                this.mOrigDebugApp = this.mDebugApp;
                this.mOrigWaitForDebugger = this.mWaitForDebugger;
                this.mDebugApp = paramString;
                this.mWaitForDebugger = paramBoolean1;
                if (paramBoolean2)
                    break label140;
                this.mDebugTransient = i;
                if (paramString != null)
                {
                    long l = Binder.clearCallingIdentity();
                    forceStopPackageLocked(paramString, -1, false, false, true, true, 0);
                    Binder.restoreCallingIdentity(l);
                }
                return;
            }
            finally
            {
                localObject = finally;
                throw localObject;
            }
            j = 0;
            break;
            label140: i = 0;
        }
    }

    final void setFocusedActivityLocked(ActivityRecord paramActivityRecord)
    {
        if (this.mFocusedActivity != paramActivityRecord)
        {
            this.mFocusedActivity = paramActivityRecord;
            if (paramActivityRecord != null)
                this.mWindowManager.setFocusedApp(paramActivityRecord.appToken, true);
        }
    }

    public void setFrontActivityScreenCompatMode(int paramInt)
    {
        enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setFrontActivityScreenCompatMode");
        try
        {
            this.mCompatModePackages.setFrontActivityScreenCompatModeLocked(paramInt);
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public void setImmersive(IBinder paramIBinder, boolean paramBoolean)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_0
        //     3: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     6: aload_1
        //     7: invokevirtual 3098	com/android/server/am/ActivityStack:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
        //     10: astore 4
        //     12: aload 4
        //     14: ifnonnull +16 -> 30
        //     17: new 1572	java/lang/IllegalArgumentException
        //     20: dup
        //     21: invokespecial 5930	java/lang/IllegalArgumentException:<init>	()V
        //     24: athrow
        //     25: astore_3
        //     26: aload_0
        //     27: monitorexit
        //     28: aload_3
        //     29: athrow
        //     30: aload 4
        //     32: iload_2
        //     33: putfield 5933	com/android/server/am/ActivityRecord:immersive	Z
        //     36: aload_0
        //     37: monitorexit
        //     38: return
        //
        // Exception table:
        //     from	to	target	type
        //     2	28	25	finally
        //     30	38	25	finally
    }

    public void setLockScreenShown(boolean paramBoolean)
    {
        if (checkCallingPermission("android.permission.DEVICE_POWER") != 0)
            throw new SecurityException("Requires permission android.permission.DEVICE_POWER");
        try
        {
            this.mLockScreenShown = paramBoolean;
            comeOutOfSleepIfNeededLocked();
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    void setOpenGlTraceApp(ApplicationInfo paramApplicationInfo, String paramString)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: ldc_w 860
        //     5: ldc 218
        //     7: ldc_w 864
        //     10: invokestatic 870	android/os/SystemProperties:get	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //     13: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     16: ifne +48 -> 64
        //     19: iconst_2
        //     20: aload_1
        //     21: getfield 991	android/content/pm/ApplicationInfo:flags	I
        //     24: iand
        //     25: ifne +39 -> 64
        //     28: new 1701	java/lang/SecurityException
        //     31: dup
        //     32: new 598	java/lang/StringBuilder
        //     35: dup
        //     36: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     39: ldc_w 5038
        //     42: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     45: aload_1
        //     46: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     49: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     52: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     55: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     58: athrow
        //     59: astore_3
        //     60: aload_0
        //     61: monitorexit
        //     62: aload_3
        //     63: athrow
        //     64: aload_0
        //     65: aload_2
        //     66: putfield 710	com/android/server/am/ActivityManagerService:mOpenGlTraceApp	Ljava/lang/String;
        //     69: aload_0
        //     70: monitorexit
        //     71: return
        //
        // Exception table:
        //     from	to	target	type
        //     2	62	59	finally
        //     64	71	59	finally
    }

    public void setPackageAskScreenCompat(String paramString, boolean paramBoolean)
    {
        enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setPackageAskScreenCompat");
        try
        {
            this.mCompatModePackages.setPackageAskCompatModeLocked(paramString, paramBoolean);
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public void setPackageScreenCompatMode(String paramString, int paramInt)
    {
        enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setPackageScreenCompatMode");
        try
        {
            this.mCompatModePackages.setPackageScreenCompatModeLocked(paramString, paramInt);
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public void setProcessForeground(IBinder paramIBinder, int paramInt, boolean paramBoolean)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 6437
        //     4: ldc_w 6439
        //     7: invokevirtual 4280	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
        //     10: aload_0
        //     11: monitorenter
        //     12: iconst_0
        //     13: istore 4
        //     15: aload_0
        //     16: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     19: astore 6
        //     21: aload 6
        //     23: monitorenter
        //     24: aload_0
        //     25: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     28: iload_2
        //     29: invokevirtual 1083	android/util/SparseArray:get	(I)Ljava/lang/Object;
        //     32: checkcast 982	com/android/server/am/ProcessRecord
        //     35: astore 8
        //     37: aload 8
        //     39: ifnonnull +39 -> 78
        //     42: iload_3
        //     43: ifeq +35 -> 78
        //     46: ldc 221
        //     48: new 598	java/lang/StringBuilder
        //     51: dup
        //     52: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     55: ldc_w 6441
        //     58: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     61: iload_2
        //     62: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     65: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     68: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     71: pop
        //     72: aload 6
        //     74: monitorexit
        //     75: aload_0
        //     76: monitorexit
        //     77: return
        //     78: aload_0
        //     79: getfield 574	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
        //     82: iload_2
        //     83: invokevirtual 1083	android/util/SparseArray:get	(I)Ljava/lang/Object;
        //     86: checkcast 83	com/android/server/am/ActivityManagerService$ForegroundToken
        //     89: astore 9
        //     91: aload 9
        //     93: ifnull +39 -> 132
        //     96: aload 9
        //     98: getfield 6444	com/android/server/am/ActivityManagerService$ForegroundToken:token	Landroid/os/IBinder;
        //     101: aload 9
        //     103: iconst_0
        //     104: invokeinterface 6448 3 0
        //     109: pop
        //     110: aload_0
        //     111: getfield 574	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
        //     114: iload_2
        //     115: invokevirtual 2126	android/util/SparseArray:remove	(I)V
        //     118: aload 8
        //     120: ifnull +107 -> 227
        //     123: aload 8
        //     125: aconst_null
        //     126: putfield 1164	com/android/server/am/ProcessRecord:forcingToForeground	Landroid/os/IBinder;
        //     129: goto +98 -> 227
        //     132: iload_3
        //     133: ifeq +57 -> 190
        //     136: aload_1
        //     137: ifnull +53 -> 190
        //     140: new 34	com/android/server/am/ActivityManagerService$8
        //     143: dup
        //     144: aload_0
        //     145: invokespecial 6449	com/android/server/am/ActivityManagerService$8:<init>	(Lcom/android/server/am/ActivityManagerService;)V
        //     148: astore 10
        //     150: aload 10
        //     152: iload_2
        //     153: putfield 5114	com/android/server/am/ActivityManagerService$ForegroundToken:pid	I
        //     156: aload 10
        //     158: aload_1
        //     159: putfield 6444	com/android/server/am/ActivityManagerService$ForegroundToken:token	Landroid/os/IBinder;
        //     162: aload_1
        //     163: aload 10
        //     165: iconst_0
        //     166: invokeinterface 1132 3 0
        //     171: aload_0
        //     172: getfield 574	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
        //     175: iload_2
        //     176: aload 10
        //     178: invokevirtual 3917	android/util/SparseArray:put	(ILjava/lang/Object;)V
        //     181: aload 8
        //     183: aload_1
        //     184: putfield 1164	com/android/server/am/ProcessRecord:forcingToForeground	Landroid/os/IBinder;
        //     187: iconst_1
        //     188: istore 4
        //     190: aload 6
        //     192: monitorexit
        //     193: iload 4
        //     195: ifeq +7 -> 202
        //     198: aload_0
        //     199: invokevirtual 1396	com/android/server/am/ActivityManagerService:updateOomAdjLocked	()V
        //     202: aload_0
        //     203: monitorexit
        //     204: goto -127 -> 77
        //     207: astore 5
        //     209: aload_0
        //     210: monitorexit
        //     211: aload 5
        //     213: athrow
        //     214: astore 7
        //     216: aload 6
        //     218: monitorexit
        //     219: aload 7
        //     221: athrow
        //     222: astore 11
        //     224: goto -34 -> 190
        //     227: iconst_1
        //     228: istore 4
        //     230: goto -98 -> 132
        //
        // Exception table:
        //     from	to	target	type
        //     15	24	207	finally
        //     75	77	207	finally
        //     198	211	207	finally
        //     219	222	207	finally
        //     24	75	214	finally
        //     78	162	214	finally
        //     162	187	214	finally
        //     190	193	214	finally
        //     216	219	214	finally
        //     162	187	222	android/os/RemoteException
    }

    public void setProcessLimit(int paramInt)
    {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessLimit()");
        int i;
        if (paramInt < 0)
            i = 15;
        try
        {
            while (true)
            {
                this.mProcessLimit = i;
                this.mProcessLimitOverride = paramInt;
                trimApplications();
                return;
                i = paramInt;
            }
        }
        finally
        {
        }
    }

    // ERROR //
    void setProfileApp(ApplicationInfo paramApplicationInfo, String paramString1, String paramString2, ParcelFileDescriptor paramParcelFileDescriptor, boolean paramBoolean)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: ldc_w 860
        //     5: ldc 218
        //     7: ldc_w 864
        //     10: invokestatic 870	android/os/SystemProperties:get	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //     13: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     16: ifne +50 -> 66
        //     19: iconst_2
        //     20: aload_1
        //     21: getfield 991	android/content/pm/ApplicationInfo:flags	I
        //     24: iand
        //     25: ifne +41 -> 66
        //     28: new 1701	java/lang/SecurityException
        //     31: dup
        //     32: new 598	java/lang/StringBuilder
        //     35: dup
        //     36: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     39: ldc_w 5038
        //     42: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     45: aload_1
        //     46: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     49: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     52: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     55: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     58: athrow
        //     59: astore 6
        //     61: aload_0
        //     62: monitorexit
        //     63: aload 6
        //     65: athrow
        //     66: aload_0
        //     67: aload_2
        //     68: putfield 702	com/android/server/am/ActivityManagerService:mProfileApp	Ljava/lang/String;
        //     71: aload_0
        //     72: aload_3
        //     73: putfield 1194	com/android/server/am/ActivityManagerService:mProfileFile	Ljava/lang/String;
        //     76: aload_0
        //     77: getfield 1196	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
        //     80: astore 7
        //     82: aload 7
        //     84: ifnull +15 -> 99
        //     87: aload_0
        //     88: getfield 1196	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
        //     91: invokevirtual 2202	android/os/ParcelFileDescriptor:close	()V
        //     94: aload_0
        //     95: aconst_null
        //     96: putfield 1196	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
        //     99: aload_0
        //     100: aload 4
        //     102: putfield 1196	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
        //     105: aload_0
        //     106: iconst_0
        //     107: putfield 706	com/android/server/am/ActivityManagerService:mProfileType	I
        //     110: aload_0
        //     111: iload 5
        //     113: putfield 708	com/android/server/am/ActivityManagerService:mAutoStopProfiler	Z
        //     116: aload_0
        //     117: monitorexit
        //     118: return
        //     119: astore 8
        //     121: goto -27 -> 94
        //
        // Exception table:
        //     from	to	target	type
        //     2	63	59	finally
        //     66	82	59	finally
        //     87	94	59	finally
        //     94	118	59	finally
        //     87	94	119	java/io/IOException
    }

    public void setRequestedOrientation(IBinder paramIBinder, int paramInt)
    {
        IApplicationToken.Stub localStub = null;
        try
        {
            ActivityRecord localActivityRecord = this.mMainStack.isInStackLocked(paramIBinder);
            if (localActivityRecord == null)
                return;
            long l = Binder.clearCallingIdentity();
            this.mWindowManager.setAppOrientation(localActivityRecord.appToken, paramInt);
            WindowManagerService localWindowManagerService = this.mWindowManager;
            Configuration localConfiguration1 = this.mConfiguration;
            if (localActivityRecord.mayFreezeScreenLocked(localActivityRecord.app))
                localStub = localActivityRecord.appToken;
            Configuration localConfiguration2 = localWindowManagerService.updateOrientationFromAppTokens(localConfiguration1, localStub);
            if (localConfiguration2 != null)
            {
                localActivityRecord.frozenBeforeDestroy = true;
                if (!updateConfigurationLocked(localConfiguration2, localActivityRecord, false, false))
                    this.mMainStack.resumeTopActivityLocked(null);
            }
            Binder.restoreCallingIdentity(l);
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public void setServiceForeground(ComponentName paramComponentName, IBinder paramIBinder, int paramInt, android.app.Notification paramNotification, boolean paramBoolean)
    {
        // Byte code:
        //     0: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     3: lstore 6
        //     5: aload_0
        //     6: monitorenter
        //     7: aload_0
        //     8: aload_1
        //     9: aload_2
        //     10: invokespecial 6472	com/android/server/am/ActivityManagerService:findServiceLocked	(Landroid/content/ComponentName;Landroid/os/IBinder;)Lcom/android/server/am/ServiceRecord;
        //     13: astore 10
        //     15: aload 10
        //     17: ifnull +109 -> 126
        //     20: iload_3
        //     21: ifeq +113 -> 134
        //     24: aload 4
        //     26: ifnonnull +31 -> 57
        //     29: new 1572	java/lang/IllegalArgumentException
        //     32: dup
        //     33: ldc_w 6474
        //     36: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     39: athrow
        //     40: astore 9
        //     42: aload_0
        //     43: monitorexit
        //     44: aload 9
        //     46: athrow
        //     47: astore 8
        //     49: lload 6
        //     51: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     54: aload 8
        //     56: athrow
        //     57: aload 10
        //     59: getfield 1516	com/android/server/am/ServiceRecord:foregroundId	I
        //     62: iload_3
        //     63: if_icmpeq +14 -> 77
        //     66: aload 10
        //     68: invokevirtual 1510	com/android/server/am/ServiceRecord:cancelNotification	()V
        //     71: aload 10
        //     73: iload_3
        //     74: putfield 1516	com/android/server/am/ServiceRecord:foregroundId	I
        //     77: aload 4
        //     79: bipush 64
        //     81: aload 4
        //     83: getfield 6477	android/app/Notification:flags	I
        //     86: ior
        //     87: putfield 6477	android/app/Notification:flags	I
        //     90: aload 10
        //     92: aload 4
        //     94: putfield 1520	com/android/server/am/ServiceRecord:foregroundNoti	Landroid/app/Notification;
        //     97: aload 10
        //     99: iconst_1
        //     100: putfield 1513	com/android/server/am/ServiceRecord:isForeground	Z
        //     103: aload 10
        //     105: invokevirtual 3599	com/android/server/am/ServiceRecord:postNotification	()V
        //     108: aload 10
        //     110: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     113: ifnull +13 -> 126
        //     116: aload_0
        //     117: aload 10
        //     119: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     122: iconst_1
        //     123: invokevirtual 1558	com/android/server/am/ActivityManagerService:updateServiceForegroundLocked	(Lcom/android/server/am/ProcessRecord;Z)V
        //     126: aload_0
        //     127: monitorexit
        //     128: lload 6
        //     130: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     133: return
        //     134: aload 10
        //     136: getfield 1513	com/android/server/am/ServiceRecord:isForeground	Z
        //     139: ifeq +38 -> 177
        //     142: aload 10
        //     144: iconst_0
        //     145: putfield 1513	com/android/server/am/ServiceRecord:isForeground	Z
        //     148: aload 10
        //     150: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     153: ifnull +24 -> 177
        //     156: aload_0
        //     157: aload 10
        //     159: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     162: iconst_0
        //     163: iconst_1
        //     164: invokevirtual 1265	com/android/server/am/ActivityManagerService:updateLruProcessLocked	(Lcom/android/server/am/ProcessRecord;ZZ)V
        //     167: aload_0
        //     168: aload 10
        //     170: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     173: iconst_1
        //     174: invokevirtual 1558	com/android/server/am/ActivityManagerService:updateServiceForegroundLocked	(Lcom/android/server/am/ProcessRecord;Z)V
        //     177: iload 5
        //     179: ifeq -53 -> 126
        //     182: aload 10
        //     184: invokevirtual 1510	com/android/server/am/ServiceRecord:cancelNotification	()V
        //     187: aload 10
        //     189: iconst_0
        //     190: putfield 1516	com/android/server/am/ServiceRecord:foregroundId	I
        //     193: aload 10
        //     195: aconst_null
        //     196: putfield 1520	com/android/server/am/ServiceRecord:foregroundNoti	Landroid/app/Notification;
        //     199: goto -73 -> 126
        //
        // Exception table:
        //     from	to	target	type
        //     7	44	40	finally
        //     57	128	40	finally
        //     134	199	40	finally
        //     5	7	47	finally
        //     44	47	47	finally
    }

    public void setWindowManager(WindowManagerService paramWindowManagerService)
    {
        this.mWindowManager = paramWindowManagerService;
    }

    public void showBootMessage(CharSequence paramCharSequence, boolean paramBoolean)
    {
        enforceNotIsolatedCaller("showBootMessage");
        this.mWindowManager.showBootMessage(paramCharSequence, paramBoolean);
    }

    final void showLaunchWarningLocked(final ActivityRecord paramActivityRecord1, final ActivityRecord paramActivityRecord2)
    {
        if (!this.mLaunchWarningShown)
        {
            this.mLaunchWarningShown = true;
            this.mHandler.post(new Runnable()
            {
                public void run()
                {
                    synchronized (ActivityManagerService.this)
                    {
                        final LaunchWarningWindow localLaunchWarningWindow = new LaunchWarningWindow(ActivityManagerService.this.mContext, paramActivityRecord1, paramActivityRecord2);
                        localLaunchWarningWindow.show();
                        ActivityManagerService.this.mHandler.postDelayed(new Runnable()
                        {
                            public void run()
                            {
                                synchronized (ActivityManagerService.this)
                                {
                                    localLaunchWarningWindow.dismiss();
                                    ActivityManagerService.this.mLaunchWarningShown = false;
                                    return;
                                }
                            }
                        }
                        , 4000L);
                        return;
                    }
                }
            });
        }
    }

    public final void showSafeModeOverlay()
    {
        View localView = LayoutInflater.from(this.mContext).inflate(17367189, null);
        WindowManager.LayoutParams localLayoutParams = new WindowManager.LayoutParams();
        localLayoutParams.type = 2015;
        localLayoutParams.width = -2;
        localLayoutParams.height = -2;
        localLayoutParams.gravity = 83;
        localLayoutParams.format = localView.getBackground().getOpacity();
        localLayoutParams.flags = 24;
        ((WindowManager)this.mContext.getSystemService("window")).addView(localView, localLayoutParams);
    }

    public void showWaitingForDebugger(IApplicationThread paramIApplicationThread, boolean paramBoolean)
    {
        if (paramIApplicationThread != null);
        while (true)
        {
            try
            {
                localProcessRecord = getRecordForAppLocked(paramIApplicationThread);
                if (localProcessRecord == null)
                    break label81;
                Message localMessage = Message.obtain();
                localMessage.what = 6;
                localMessage.obj = localProcessRecord;
                if (paramBoolean)
                {
                    i = 1;
                    localMessage.arg1 = i;
                    this.mHandler.sendMessage(localMessage);
                    break label81;
                }
            }
            finally
            {
                localObject = finally;
                throw localObject;
            }
            int i = 0;
            continue;
            label81: return;
            ProcessRecord localProcessRecord = null;
        }
    }

    public boolean shutdown(int paramInt)
    {
        if (checkCallingPermission("android.permission.SHUTDOWN") != 0)
            throw new SecurityException("Requires permission android.permission.SHUTDOWN");
        boolean bool = false;
        try
        {
            this.mShuttingDown = true;
            updateEventDispatchingLocked();
            long l;
            if (this.mMainStack.mResumedActivity != null)
            {
                this.mMainStack.stopIfSleepingLocked();
                l = System.currentTimeMillis() + paramInt;
            }
            while (true)
            {
                if ((this.mMainStack.mResumedActivity != null) || (this.mMainStack.mPausingActivity != null))
                {
                    if (l - System.currentTimeMillis() <= 0L)
                    {
                        Slog.w("ActivityManager", "Activity manager shutdown timed out");
                        bool = true;
                    }
                }
                else
                {
                    this.mUsageStatsService.shutdown();
                    this.mBatteryStatsService.shutdown();
                    return bool;
                }
                try
                {
                    wait();
                }
                catch (InterruptedException localInterruptedException)
                {
                }
            }
        }
        finally
        {
        }
    }

    // ERROR //
    public void signalPersistentProcesses(int paramInt)
        throws RemoteException
    {
        // Byte code:
        //     0: iload_1
        //     1: bipush 10
        //     3: if_icmpeq +14 -> 17
        //     6: new 1701	java/lang/SecurityException
        //     9: dup
        //     10: ldc_w 6553
        //     13: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     16: athrow
        //     17: aload_0
        //     18: monitorenter
        //     19: aload_0
        //     20: ldc_w 6555
        //     23: invokevirtual 4575	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
        //     26: ifeq +19 -> 45
        //     29: new 1701	java/lang/SecurityException
        //     32: dup
        //     33: ldc_w 6557
        //     36: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     39: athrow
        //     40: astore_2
        //     41: aload_0
        //     42: monitorexit
        //     43: aload_2
        //     44: athrow
        //     45: bipush 255
        //     47: aload_0
        //     48: getfield 582	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
        //     51: invokevirtual 1313	java/util/ArrayList:size	()I
        //     54: iadd
        //     55: istore_3
        //     56: iload_3
        //     57: iflt +44 -> 101
        //     60: aload_0
        //     61: getfield 582	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
        //     64: iload_3
        //     65: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     68: checkcast 982	com/android/server/am/ProcessRecord
        //     71: astore 4
        //     73: aload 4
        //     75: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     78: ifnull +26 -> 104
        //     81: aload 4
        //     83: getfield 1243	com/android/server/am/ProcessRecord:persistent	Z
        //     86: ifeq +18 -> 104
        //     89: aload 4
        //     91: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     94: iload_1
        //     95: invokestatic 2866	android/os/Process:sendSignal	(II)V
        //     98: goto +6 -> 104
        //     101: aload_0
        //     102: monitorexit
        //     103: return
        //     104: iinc 3 255
        //     107: goto -51 -> 56
        //
        // Exception table:
        //     from	to	target	type
        //     19	43	40	finally
        //     45	103	40	finally
    }

    void skipCurrentReceiverLocked(ProcessRecord paramProcessRecord)
    {
        BroadcastQueue[] arrayOfBroadcastQueue = this.mBroadcastQueues;
        int i = arrayOfBroadcastQueue.length;
        for (int j = 0; j < i; j++)
            arrayOfBroadcastQueue[j].skipCurrentReceiverLocked(paramProcessRecord);
    }

    void skipPendingBroadcastLocked(int paramInt)
    {
        Slog.w("ActivityManager", "Unattached app died before broadcast acknowledged, skipping");
        BroadcastQueue[] arrayOfBroadcastQueue = this.mBroadcastQueues;
        int i = arrayOfBroadcastQueue.length;
        for (int j = 0; j < i; j++)
            arrayOfBroadcastQueue[j].skipPendingBroadcastLocked(paramInt);
    }

    public final int startActivities(IApplicationThread paramIApplicationThread, Intent[] paramArrayOfIntent, String[] paramArrayOfString, IBinder paramIBinder, Bundle paramBundle)
    {
        enforceNotIsolatedCaller("startActivities");
        return this.mMainStack.startActivities(paramIApplicationThread, -1, paramArrayOfIntent, paramArrayOfString, paramIBinder, paramBundle, Binder.getOrigCallingUser());
    }

    public final int startActivitiesInPackage(int paramInt, Intent[] paramArrayOfIntent, String[] paramArrayOfString, IBinder paramIBinder, Bundle paramBundle)
    {
        int i = Binder.getCallingUid();
        if ((i != 0) && (i != Process.myUid()))
            throw new SecurityException("startActivityInPackage only available to the system");
        return this.mMainStack.startActivities(null, paramInt, paramArrayOfIntent, paramArrayOfString, paramIBinder, paramBundle, UserId.getUserId(paramInt));
    }

    public final int startActivity(IApplicationThread paramIApplicationThread, Intent paramIntent, String paramString1, IBinder paramIBinder, String paramString2, int paramInt1, int paramInt2, String paramString3, ParcelFileDescriptor paramParcelFileDescriptor, Bundle paramBundle)
    {
        enforceNotIsolatedCaller("startActivity");
        int i;
        if ((paramIntent.getCategories() != null) && (paramIntent.getCategories().contains("android.intent.category.HOME")))
            i = this.mCurrentUserId;
        while (true)
        {
            return this.mMainStack.startActivityMayWait(paramIApplicationThread, -1, paramIntent, paramString1, paramIBinder, paramString2, paramInt1, paramInt2, paramString3, paramParcelFileDescriptor, null, null, paramBundle, i);
            if (Binder.getCallingUid() < 10000)
                i = 0;
            else
                i = Binder.getOrigCallingUser();
        }
    }

    public final IActivityManager.WaitResult startActivityAndWait(IApplicationThread paramIApplicationThread, Intent paramIntent, String paramString1, IBinder paramIBinder, String paramString2, int paramInt1, int paramInt2, String paramString3, ParcelFileDescriptor paramParcelFileDescriptor, Bundle paramBundle)
    {
        enforceNotIsolatedCaller("startActivityAndWait");
        IActivityManager.WaitResult localWaitResult = new IActivityManager.WaitResult();
        int i = Binder.getOrigCallingUser();
        this.mMainStack.startActivityMayWait(paramIApplicationThread, -1, paramIntent, paramString1, paramIBinder, paramString2, paramInt1, paramInt2, paramString3, paramParcelFileDescriptor, localWaitResult, null, paramBundle, i);
        return localWaitResult;
    }

    public final int startActivityInPackage(int paramInt1, Intent paramIntent, String paramString1, IBinder paramIBinder, String paramString2, int paramInt2, int paramInt3, Bundle paramBundle)
    {
        int i = Binder.getOrigCallingUser();
        int j = Binder.getCallingUid();
        if ((j != 0) && (j != Process.myUid()))
            throw new SecurityException("startActivityInPackage only available to the system");
        return this.mMainStack.startActivityMayWait(null, paramInt1, paramIntent, paramString1, paramIBinder, paramString2, paramInt2, paramInt3, null, null, null, null, paramBundle, i);
    }

    public int startActivityIntentSender(IApplicationThread paramIApplicationThread, IntentSender paramIntentSender, Intent paramIntent, String paramString1, IBinder paramIBinder, String paramString2, int paramInt1, int paramInt2, int paramInt3, Bundle paramBundle)
    {
        enforceNotIsolatedCaller("startActivityIntentSender");
        if ((paramIntent != null) && (paramIntent.hasFileDescriptors()))
            throw new IllegalArgumentException("File descriptors passed in Intent");
        IIntentSender localIIntentSender = paramIntentSender.getTarget();
        if (!(localIIntentSender instanceof PendingIntentRecord))
            throw new IllegalArgumentException("Bad PendingIntent object");
        PendingIntentRecord localPendingIntentRecord = (PendingIntentRecord)localIIntentSender;
        try
        {
            if ((this.mMainStack.mResumedActivity != null) && (this.mMainStack.mResumedActivity.info.applicationInfo.uid == Binder.getCallingUid()))
                this.mAppSwitchesAllowedTime = 0L;
            return localPendingIntentRecord.sendInner(0, paramIntent, paramString1, null, null, paramIBinder, paramString2, paramInt1, paramInt2, paramInt3, paramBundle);
        }
        finally
        {
        }
    }

    public final int startActivityWithConfig(IApplicationThread paramIApplicationThread, Intent paramIntent, String paramString1, IBinder paramIBinder, String paramString2, int paramInt1, int paramInt2, Configuration paramConfiguration, Bundle paramBundle)
    {
        enforceNotIsolatedCaller("startActivityWithConfig");
        return this.mMainStack.startActivityMayWait(paramIApplicationThread, -1, paramIntent, paramString1, paramIBinder, paramString2, paramInt1, paramInt2, null, null, null, paramConfiguration, paramBundle, Binder.getOrigCallingUser());
    }

    void startAppProblemLocked(ProcessRecord paramProcessRecord)
    {
        paramProcessRecord.errorReportReceiver = ApplicationErrorReport.getErrorReportReceiver(this.mContext, paramProcessRecord.info.packageName, paramProcessRecord.info.flags);
        skipCurrentReceiverLocked(paramProcessRecord);
    }

    boolean startHomeActivityLocked(int paramInt)
    {
        if (this.mHeadless)
            ensureBootCompleted();
        for (boolean bool = false; ; bool = false)
        {
            return bool;
            if ((this.mFactoryTest != 1) || (this.mTopAction != null))
                break;
        }
        String str = this.mTopAction;
        Uri localUri;
        if (this.mTopData != null)
        {
            localUri = Uri.parse(this.mTopData);
            label58: Intent localIntent = new Intent(str, localUri);
            localIntent.setComponent(this.mTopComponent);
            if (this.mFactoryTest != 1)
                localIntent.addCategory("android.intent.category.HOME");
            ActivityInfo localActivityInfo1 = localIntent.resolveActivityInfo(this.mContext.getPackageManager(), 1024);
            if (localActivityInfo1 == null)
                break label251;
            localIntent.setComponent(new ComponentName(localActivityInfo1.applicationInfo.packageName, localActivityInfo1.name));
            ActivityInfo localActivityInfo2 = new ActivityInfo(localActivityInfo1);
            localActivityInfo2.applicationInfo = getAppInfoForUser(localActivityInfo2.applicationInfo, paramInt);
            ProcessRecord localProcessRecord = getProcessRecordLocked(localActivityInfo2.processName, localActivityInfo2.applicationInfo.uid);
            if ((localProcessRecord == null) || (localProcessRecord.instrumentationClass == null))
            {
                localIntent.setFlags(0x10000000 | localIntent.getFlags());
                this.mMainStack.startActivityLocked(null, localIntent, null, localActivityInfo2, null, null, 0, 0, 0, 0, null, false, null);
            }
        }
        label251: 
        while (true)
        {
            bool = true;
            break;
            localUri = null;
            break label58;
        }
    }

    // ERROR //
    public boolean startInstrumentation(ComponentName paramComponentName, String paramString, int paramInt, Bundle paramBundle, IInstrumentationWatcher paramIInstrumentationWatcher)
    {
        // Byte code:
        //     0: aload_0
        //     1: ldc_w 6635
        //     4: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     7: aload 4
        //     9: ifnull +22 -> 31
        //     12: aload 4
        //     14: invokevirtual 4134	android/os/Bundle:hasFileDescriptors	()Z
        //     17: ifeq +14 -> 31
        //     20: new 1572	java/lang/IllegalArgumentException
        //     23: dup
        //     24: ldc_w 4136
        //     27: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     30: athrow
        //     31: aload_0
        //     32: monitorenter
        //     33: aconst_null
        //     34: astore 6
        //     36: aconst_null
        //     37: astore 7
        //     39: aload_0
        //     40: getfield 2453	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
        //     43: invokevirtual 3897	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
        //     46: aload_1
        //     47: sipush 1024
        //     50: invokevirtual 6639	android/content/pm/PackageManager:getInstrumentationInfo	(Landroid/content/ComponentName;I)Landroid/content/pm/InstrumentationInfo;
        //     53: astore 6
        //     55: aload_0
        //     56: getfield 2453	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
        //     59: invokevirtual 3897	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
        //     62: aload 6
        //     64: getfield 6644	android/content/pm/InstrumentationInfo:targetPackage	Ljava/lang/String;
        //     67: sipush 1024
        //     70: invokevirtual 3904	android/content/pm/PackageManager:getApplicationInfo	(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;
        //     73: astore 18
        //     75: aload 18
        //     77: astore 7
        //     79: aload 6
        //     81: ifnonnull +38 -> 119
        //     84: aload_0
        //     85: aload 5
        //     87: aload_1
        //     88: new 598	java/lang/StringBuilder
        //     91: dup
        //     92: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     95: ldc_w 6646
        //     98: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     101: aload_1
        //     102: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     105: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     108: invokespecial 6648	com/android/server/am/ActivityManagerService:reportStartInstrumentationFailure	(Landroid/app/IInstrumentationWatcher;Landroid/content/ComponentName;Ljava/lang/String;)V
        //     111: iconst_0
        //     112: istore 15
        //     114: aload_0
        //     115: monitorexit
        //     116: goto +275 -> 391
        //     119: aload 7
        //     121: ifnonnull +49 -> 170
        //     124: aload_0
        //     125: aload 5
        //     127: aload_1
        //     128: new 598	java/lang/StringBuilder
        //     131: dup
        //     132: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     135: ldc_w 6650
        //     138: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     141: aload 6
        //     143: getfield 6644	android/content/pm/InstrumentationInfo:targetPackage	Ljava/lang/String;
        //     146: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     149: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     152: invokespecial 6648	com/android/server/am/ActivityManagerService:reportStartInstrumentationFailure	(Landroid/app/IInstrumentationWatcher;Landroid/content/ComponentName;Ljava/lang/String;)V
        //     155: iconst_0
        //     156: istore 15
        //     158: aload_0
        //     159: monitorexit
        //     160: goto +231 -> 391
        //     163: astore 16
        //     165: aload_0
        //     166: monitorexit
        //     167: aload 16
        //     169: athrow
        //     170: aload_0
        //     171: getfield 2453	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
        //     174: invokevirtual 3897	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
        //     177: aload 6
        //     179: getfield 6644	android/content/pm/InstrumentationInfo:targetPackage	Ljava/lang/String;
        //     182: aload 6
        //     184: getfield 6651	android/content/pm/InstrumentationInfo:packageName	Ljava/lang/String;
        //     187: invokevirtual 6654	android/content/pm/PackageManager:checkSignatures	(Ljava/lang/String;Ljava/lang/String;)I
        //     190: istore 9
        //     192: iload 9
        //     194: ifge +103 -> 297
        //     197: iload 9
        //     199: bipush 255
        //     201: if_icmpeq +96 -> 297
        //     204: new 598	java/lang/StringBuilder
        //     207: dup
        //     208: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     211: ldc_w 6656
        //     214: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     217: aload_1
        //     218: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     221: ldc_w 1751
        //     224: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     227: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     230: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     233: ldc_w 1697
        //     236: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     239: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     242: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     245: ldc_w 6658
        //     248: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     251: aload 6
        //     253: getfield 6651	android/content/pm/InstrumentationInfo:packageName	Ljava/lang/String;
        //     256: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     259: ldc_w 6660
        //     262: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     265: aload 6
        //     267: getfield 6644	android/content/pm/InstrumentationInfo:targetPackage	Ljava/lang/String;
        //     270: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     273: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     276: astore 17
        //     278: aload_0
        //     279: aload 5
        //     281: aload_1
        //     282: aload 17
        //     284: invokespecial 6648	com/android/server/am/ActivityManagerService:reportStartInstrumentationFailure	(Landroid/app/IInstrumentationWatcher;Landroid/content/ComponentName;Ljava/lang/String;)V
        //     287: new 1701	java/lang/SecurityException
        //     290: dup
        //     291: aload 17
        //     293: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     296: athrow
        //     297: invokestatic 4360	android/os/UserId:getCallingUserId	()I
        //     300: istore 10
        //     302: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     305: lstore 11
        //     307: aload_0
        //     308: aload 6
        //     310: getfield 6644	android/content/pm/InstrumentationInfo:targetPackage	Ljava/lang/String;
        //     313: bipush 255
        //     315: iconst_1
        //     316: iconst_0
        //     317: iconst_1
        //     318: iconst_1
        //     319: iload 10
        //     321: invokespecial 949	com/android/server/am/ActivityManagerService:forceStopPackageLocked	(Ljava/lang/String;IZZZZI)Z
        //     324: pop
        //     325: aload_0
        //     326: aload 7
        //     328: iconst_0
        //     329: invokevirtual 3661	com/android/server/am/ActivityManagerService:addAppLocked	(Landroid/content/pm/ApplicationInfo;Z)Lcom/android/server/am/ProcessRecord;
        //     332: astore 14
        //     334: aload 14
        //     336: aload_1
        //     337: putfield 1213	com/android/server/am/ProcessRecord:instrumentationClass	Landroid/content/ComponentName;
        //     340: aload 14
        //     342: aload 7
        //     344: putfield 1204	com/android/server/am/ProcessRecord:instrumentationInfo	Landroid/content/pm/ApplicationInfo;
        //     347: aload 14
        //     349: aload_2
        //     350: putfield 1192	com/android/server/am/ProcessRecord:instrumentationProfileFile	Ljava/lang/String;
        //     353: aload 14
        //     355: aload 4
        //     357: putfield 1236	com/android/server/am/ProcessRecord:instrumentationArguments	Landroid/os/Bundle;
        //     360: aload 14
        //     362: aload 5
        //     364: putfield 1240	com/android/server/am/ProcessRecord:instrumentationWatcher	Landroid/app/IInstrumentationWatcher;
        //     367: aload 14
        //     369: aload_1
        //     370: putfield 6663	com/android/server/am/ProcessRecord:instrumentationResultClass	Landroid/content/ComponentName;
        //     373: lload 11
        //     375: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     378: aload_0
        //     379: monitorexit
        //     380: iconst_1
        //     381: istore 15
        //     383: goto +8 -> 391
        //     386: astore 8
        //     388: goto -309 -> 79
        //     391: iload 15
        //     393: ireturn
        //
        // Exception table:
        //     from	to	target	type
        //     39	75	163	finally
        //     84	167	163	finally
        //     170	380	163	finally
        //     39	75	386	android/content/pm/PackageManager$NameNotFoundException
    }

    // ERROR //
    public boolean startNextMatchingActivity(IBinder paramIBinder, Intent paramIntent, Bundle paramBundle)
    {
        // Byte code:
        //     0: aload_2
        //     1: ifnull +22 -> 23
        //     4: aload_2
        //     5: invokevirtual 4298	android/content/Intent:hasFileDescriptors	()Z
        //     8: iconst_1
        //     9: if_icmpne +14 -> 23
        //     12: new 1572	java/lang/IllegalArgumentException
        //     15: dup
        //     16: ldc_w 4300
        //     19: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     22: athrow
        //     23: aload_0
        //     24: monitorenter
        //     25: aload_0
        //     26: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     29: aload_1
        //     30: invokevirtual 3098	com/android/server/am/ActivityStack:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
        //     33: astore 5
        //     35: aload 5
        //     37: ifnonnull +15 -> 52
        //     40: aload_3
        //     41: invokestatic 6068	android/app/ActivityOptions:abort	(Landroid/os/Bundle;)V
        //     44: iconst_0
        //     45: istore 6
        //     47: aload_0
        //     48: monitorexit
        //     49: goto +442 -> 491
        //     52: aload 5
        //     54: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     57: ifnull +14 -> 71
        //     60: aload 5
        //     62: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     65: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     68: ifnonnull +20 -> 88
        //     71: aload_3
        //     72: invokestatic 6068	android/app/ActivityOptions:abort	(Landroid/os/Bundle;)V
        //     75: iconst_0
        //     76: istore 6
        //     78: aload_0
        //     79: monitorexit
        //     80: goto +411 -> 491
        //     83: aload_0
        //     84: monitorexit
        //     85: aload 4
        //     87: athrow
        //     88: new 1353	android/content/Intent
        //     91: dup
        //     92: aload_2
        //     93: invokespecial 1624	android/content/Intent:<init>	(Landroid/content/Intent;)V
        //     96: astore 7
        //     98: aload 7
        //     100: aload 5
        //     102: getfield 1351	com/android/server/am/ActivityRecord:intent	Landroid/content/Intent;
        //     105: invokevirtual 1716	android/content/Intent:getData	()Landroid/net/Uri;
        //     108: aload 5
        //     110: getfield 1351	com/android/server/am/ActivityRecord:intent	Landroid/content/Intent;
        //     113: invokevirtual 6667	android/content/Intent:getType	()Ljava/lang/String;
        //     116: invokevirtual 6671	android/content/Intent:setDataAndType	(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;
        //     119: pop
        //     120: aload 7
        //     122: aconst_null
        //     123: invokevirtual 4597	android/content/Intent:setComponent	(Landroid/content/ComponentName;)Landroid/content/Intent;
        //     126: pop
        //     127: aconst_null
        //     128: astore 10
        //     130: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     133: aload 7
        //     135: aload 5
        //     137: getfield 6674	com/android/server/am/ActivityRecord:resolvedType	Ljava/lang/String;
        //     140: ldc_w 6675
        //     143: invokestatic 4360	android/os/UserId:getCallingUserId	()I
        //     146: invokeinterface 5696 5 0
        //     151: astore 25
        //     153: aload 25
        //     155: ifnull +350 -> 505
        //     158: aload 25
        //     160: invokeinterface 1801 1 0
        //     165: istore 26
        //     167: goto +332 -> 499
        //     170: iload 27
        //     172: iload 26
        //     174: if_icmpge +88 -> 262
        //     177: aload 25
        //     179: iload 27
        //     181: invokeinterface 1826 2 0
        //     186: checkcast 1780	android/content/pm/ResolveInfo
        //     189: astore 28
        //     191: aload 28
        //     193: getfield 1793	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
        //     196: getfield 1829	android/content/pm/ComponentInfo:packageName	Ljava/lang/String;
        //     199: aload 5
        //     201: getfield 2610	com/android/server/am/ActivityRecord:packageName	Ljava/lang/String;
        //     204: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     207: ifeq +304 -> 511
        //     210: aload 28
        //     212: getfield 1793	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
        //     215: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     218: aload 5
        //     220: getfield 1299	com/android/server/am/ActivityRecord:info	Landroid/content/pm/ActivityInfo;
        //     223: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     226: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     229: ifeq +282 -> 511
        //     232: iload 27
        //     234: iconst_1
        //     235: iadd
        //     236: istore 29
        //     238: iload 29
        //     240: iload 26
        //     242: if_icmpge +20 -> 262
        //     245: aload 25
        //     247: iload 29
        //     249: invokeinterface 1826 2 0
        //     254: checkcast 1780	android/content/pm/ResolveInfo
        //     257: getfield 1793	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
        //     260: astore 10
        //     262: aload 10
        //     264: ifnonnull +15 -> 279
        //     267: aload_3
        //     268: invokestatic 6068	android/app/ActivityOptions:abort	(Landroid/os/Bundle;)V
        //     271: iconst_0
        //     272: istore 6
        //     274: aload_0
        //     275: monitorexit
        //     276: goto +215 -> 491
        //     279: aload 7
        //     281: new 1215	android/content/ComponentName
        //     284: dup
        //     285: aload 10
        //     287: getfield 1304	android/content/pm/ActivityInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     290: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     293: aload 10
        //     295: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     298: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     301: invokevirtual 4597	android/content/Intent:setComponent	(Landroid/content/ComponentName;)Landroid/content/Intent;
        //     304: pop
        //     305: aload 7
        //     307: ldc_w 6676
        //     310: aload 7
        //     312: invokevirtual 1800	android/content/Intent:getFlags	()I
        //     315: iand
        //     316: invokevirtual 6632	android/content/Intent:setFlags	(I)Landroid/content/Intent;
        //     319: pop
        //     320: aload 5
        //     322: getfield 3023	com/android/server/am/ActivityRecord:finishing	Z
        //     325: istore 14
        //     327: aload 5
        //     329: iconst_1
        //     330: putfield 3023	com/android/server/am/ActivityRecord:finishing	Z
        //     333: aload 5
        //     335: getfield 3101	com/android/server/am/ActivityRecord:resultTo	Lcom/android/server/am/ActivityRecord;
        //     338: astore 15
        //     340: aload 5
        //     342: getfield 6679	com/android/server/am/ActivityRecord:resultWho	Ljava/lang/String;
        //     345: astore 16
        //     347: aload 5
        //     349: getfield 6682	com/android/server/am/ActivityRecord:requestCode	I
        //     352: istore 17
        //     354: aload 5
        //     356: aconst_null
        //     357: putfield 3101	com/android/server/am/ActivityRecord:resultTo	Lcom/android/server/am/ActivityRecord;
        //     360: aload 15
        //     362: ifnull +14 -> 376
        //     365: aload 15
        //     367: aload 5
        //     369: aload 16
        //     371: iload 17
        //     373: invokevirtual 6686	com/android/server/am/ActivityRecord:removeResultsLocked	(Lcom/android/server/am/ActivityRecord;Ljava/lang/String;I)V
        //     376: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     379: lstore 18
        //     381: aload_0
        //     382: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     385: astore 20
        //     387: aload 5
        //     389: getfield 1293	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
        //     392: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     395: astore 21
        //     397: aload 5
        //     399: getfield 6674	com/android/server/am/ActivityRecord:resolvedType	Ljava/lang/String;
        //     402: astore 22
        //     404: aload 15
        //     406: ifnull +111 -> 517
        //     409: aload 15
        //     411: getfield 2587	com/android/server/am/ActivityRecord:appToken	Landroid/view/IApplicationToken$Stub;
        //     414: astore 23
        //     416: aload 20
        //     418: aload 21
        //     420: aload 7
        //     422: aload 22
        //     424: aload 10
        //     426: aload 23
        //     428: aload 16
        //     430: iload 17
        //     432: bipush 255
        //     434: aload 5
        //     436: getfield 5563	com/android/server/am/ActivityRecord:launchedFromUid	I
        //     439: iconst_0
        //     440: aload_3
        //     441: iconst_0
        //     442: aconst_null
        //     443: invokevirtual 6098	com/android/server/am/ActivityStack:startActivityLocked	(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;Landroid/content/pm/ActivityInfo;Landroid/os/IBinder;Ljava/lang/String;IIIILandroid/os/Bundle;Z[Lcom/android/server/am/ActivityRecord;)I
        //     446: istore 24
        //     448: lload 18
        //     450: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     453: aload 5
        //     455: iload 14
        //     457: putfield 3023	com/android/server/am/ActivityRecord:finishing	Z
        //     460: iload 24
        //     462: ifeq +11 -> 473
        //     465: iconst_0
        //     466: istore 6
        //     468: aload_0
        //     469: monitorexit
        //     470: goto +21 -> 491
        //     473: iconst_1
        //     474: istore 6
        //     476: aload_0
        //     477: monitorexit
        //     478: goto +13 -> 491
        //     481: astore 4
        //     483: goto -400 -> 83
        //     486: astore 11
        //     488: goto -226 -> 262
        //     491: iload 6
        //     493: ireturn
        //     494: astore 4
        //     496: goto -413 -> 83
        //     499: iconst_0
        //     500: istore 27
        //     502: goto -332 -> 170
        //     505: iconst_0
        //     506: istore 26
        //     508: goto -9 -> 499
        //     511: iinc 27 1
        //     514: goto -344 -> 170
        //     517: aconst_null
        //     518: astore 23
        //     520: goto -104 -> 416
        //
        // Exception table:
        //     from	to	target	type
        //     98	127	481	finally
        //     130	262	481	finally
        //     267	478	481	finally
        //     130	262	486	android/os/RemoteException
        //     25	85	494	finally
        //     88	98	494	finally
    }

    final ProcessRecord startProcessLocked(String paramString1, ApplicationInfo paramApplicationInfo, boolean paramBoolean1, int paramInt, String paramString2, ComponentName paramComponentName, boolean paramBoolean2, boolean paramBoolean3)
    {
        ProcessRecord localProcessRecord1;
        ProcessRecord localProcessRecord2;
        if (!paramBoolean3)
        {
            localProcessRecord1 = getProcessRecordLocked(paramString1, paramApplicationInfo.uid);
            if ((localProcessRecord1 == null) || (localProcessRecord1.pid <= 0))
                break label72;
            if ((paramBoolean1) && (localProcessRecord1.thread != null))
                break label64;
            localProcessRecord1.addPackage(paramApplicationInfo.packageName);
            localProcessRecord2 = localProcessRecord1;
        }
        label393: 
        while (true)
        {
            return localProcessRecord2;
            localProcessRecord1 = null;
            break;
            label64: handleAppDiedLocked(localProcessRecord1, true, true);
            label72: String str;
            if (paramComponentName != null)
                str = paramComponentName.flattenToShortString();
            while (true)
                if (!paramBoolean3)
                {
                    if ((paramInt & 0x4) != 0)
                    {
                        if (this.mBadProcesses.get(paramApplicationInfo.processName, paramApplicationInfo.uid) == null)
                            break label219;
                        localProcessRecord2 = null;
                        break;
                        str = null;
                        continue;
                    }
                    this.mProcessCrashTimes.remove(paramApplicationInfo.processName, paramApplicationInfo.uid);
                    if (this.mBadProcesses.get(paramApplicationInfo.processName, paramApplicationInfo.uid) != null)
                    {
                        Object[] arrayOfObject = new Object[2];
                        arrayOfObject[0] = Integer.valueOf(paramApplicationInfo.uid);
                        arrayOfObject[1] = paramApplicationInfo.processName;
                        EventLog.writeEvent(30016, arrayOfObject);
                        this.mBadProcesses.remove(paramApplicationInfo.processName, paramApplicationInfo.uid);
                        if (localProcessRecord1 != null)
                            localProcessRecord1.bad = false;
                    }
                }
            label219: if (localProcessRecord1 == null)
            {
                localProcessRecord1 = newProcessRecordLocked(null, paramApplicationInfo, paramString1, paramBoolean3);
                if (localProcessRecord1 == null)
                {
                    Slog.w("ActivityManager", "Failed making new process record for " + paramString1 + "/" + paramApplicationInfo.uid + " isolated=" + paramBoolean3);
                    localProcessRecord2 = null;
                }
                else
                {
                    this.mProcessNames.put(paramString1, localProcessRecord1.uid, localProcessRecord1);
                    if (paramBoolean3)
                        this.mIsolatedProcesses.put(localProcessRecord1.uid, localProcessRecord1);
                }
            }
            else
            {
                while (true)
                {
                    if ((this.mProcessesReady) || (isAllowedWhileBooting(paramApplicationInfo)) || (paramBoolean2))
                        break label393;
                    if (!this.mProcessesOnHold.contains(localProcessRecord1))
                        this.mProcessesOnHold.add(localProcessRecord1);
                    localProcessRecord2 = localProcessRecord1;
                    break;
                    localProcessRecord1.addPackage(paramApplicationInfo.packageName);
                }
                startProcessLocked(localProcessRecord1, paramString2, str);
                if (localProcessRecord1.pid != 0)
                    localProcessRecord2 = localProcessRecord1;
                else
                    localProcessRecord2 = null;
            }
        }
    }

    // ERROR //
    public final void startRunning(String paramString1, String paramString2, String paramString3, String paramString4)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_0
        //     3: getfield 652	com/android/server/am/ActivityManagerService:mStartRunning	Z
        //     6: ifeq +8 -> 14
        //     9: aload_0
        //     10: monitorexit
        //     11: goto +87 -> 98
        //     14: aload_0
        //     15: iconst_1
        //     16: putfield 652	com/android/server/am/ActivityManagerService:mStartRunning	Z
        //     19: aload_1
        //     20: ifnull +58 -> 78
        //     23: aload_2
        //     24: ifnull +54 -> 78
        //     27: new 1215	android/content/ComponentName
        //     30: dup
        //     31: aload_1
        //     32: aload_2
        //     33: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     36: astore 6
        //     38: aload_0
        //     39: aload 6
        //     41: putfield 3945	com/android/server/am/ActivityManagerService:mTopComponent	Landroid/content/ComponentName;
        //     44: aload_3
        //     45: ifnull +39 -> 84
        //     48: aload_0
        //     49: aload_3
        //     50: putfield 6615	com/android/server/am/ActivityManagerService:mTopAction	Ljava/lang/String;
        //     53: aload_0
        //     54: aload 4
        //     56: putfield 6617	com/android/server/am/ActivityManagerService:mTopData	Ljava/lang/String;
        //     59: aload_0
        //     60: getfield 656	com/android/server/am/ActivityManagerService:mSystemReady	Z
        //     63: ifne +28 -> 91
        //     66: aload_0
        //     67: monitorexit
        //     68: goto +30 -> 98
        //     71: astore 5
        //     73: aload_0
        //     74: monitorexit
        //     75: aload 5
        //     77: athrow
        //     78: aconst_null
        //     79: astore 6
        //     81: goto -43 -> 38
        //     84: ldc_w 6692
        //     87: astore_3
        //     88: goto -40 -> 48
        //     91: aload_0
        //     92: monitorexit
        //     93: aload_0
        //     94: aconst_null
        //     95: invokevirtual 6695	com/android/server/am/ActivityManagerService:systemReady	(Ljava/lang/Runnable;)V
        //     98: return
        //
        // Exception table:
        //     from	to	target	type
        //     2	75	71	finally
        //     84	93	71	finally
    }

    public ComponentName startService(IApplicationThread paramIApplicationThread, Intent paramIntent, String paramString)
    {
        enforceNotIsolatedCaller("startService");
        if ((paramIntent != null) && (paramIntent.hasFileDescriptors() == true))
            throw new IllegalArgumentException("File descriptors passed in Intent");
        try
        {
            int i = Binder.getCallingPid();
            int j = Binder.getCallingUid();
            long l = Binder.clearCallingIdentity();
            ComponentName localComponentName = startServiceLocked(paramIApplicationThread, paramIntent, paramString, i, j);
            Binder.restoreCallingIdentity(l);
            return localComponentName;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    ComponentName startServiceInPackage(int paramInt, Intent paramIntent, String paramString)
    {
        try
        {
            long l = Binder.clearCallingIdentity();
            ComponentName localComponentName = startServiceLocked(null, paramIntent, paramString, -1, paramInt);
            Binder.restoreCallingIdentity(l);
            return localComponentName;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    ComponentName startServiceLocked(IApplicationThread paramIApplicationThread, Intent paramIntent, String paramString, int paramInt1, int paramInt2)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_1
        //     3: ifnull +68 -> 71
        //     6: aload_0
        //     7: aload_1
        //     8: invokevirtual 3117	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
        //     11: ifnonnull +60 -> 71
        //     14: new 1701	java/lang/SecurityException
        //     17: dup
        //     18: new 598	java/lang/StringBuilder
        //     21: dup
        //     22: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     25: ldc_w 3119
        //     28: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     31: aload_1
        //     32: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     35: ldc_w 1736
        //     38: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     41: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     44: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     47: ldc_w 6706
        //     50: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     53: aload_2
        //     54: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     57: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     60: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     63: athrow
        //     64: astore 12
        //     66: aload_0
        //     67: monitorexit
        //     68: aload 12
        //     70: athrow
        //     71: aload_0
        //     72: aload_2
        //     73: aload_3
        //     74: iload 4
        //     76: iload 5
        //     78: iload 5
        //     80: invokestatic 2005	android/os/UserId:getUserId	(I)I
        //     83: invokespecial 4314	com/android/server/am/ActivityManagerService:retrieveServiceLocked	(Landroid/content/Intent;Ljava/lang/String;III)Lcom/android/server/am/ActivityManagerService$ServiceLookupResult;
        //     86: astore 6
        //     88: aload 6
        //     90: ifnonnull +11 -> 101
        //     93: aload_0
        //     94: monitorexit
        //     95: aconst_null
        //     96: astore 13
        //     98: goto +202 -> 300
        //     101: aload 6
        //     103: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     106: ifnonnull +37 -> 143
        //     109: aload 6
        //     111: getfield 6180	com/android/server/am/ActivityManagerService$ServiceLookupResult:permission	Ljava/lang/String;
        //     114: ifnull +189 -> 303
        //     117: aload 6
        //     119: getfield 6180	com/android/server/am/ActivityManagerService$ServiceLookupResult:permission	Ljava/lang/String;
        //     122: astore 14
        //     124: new 1215	android/content/ComponentName
        //     127: dup
        //     128: ldc_w 6708
        //     131: aload 14
        //     133: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     136: astore 13
        //     138: aload_0
        //     139: monitorexit
        //     140: goto +160 -> 300
        //     143: aload 6
        //     145: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     148: astore 7
        //     150: aload_0
        //     151: iload 5
        //     153: aload 7
        //     155: getfield 1579	com/android/server/am/ServiceRecord:packageName	Ljava/lang/String;
        //     158: aload_2
        //     159: aload_2
        //     160: invokevirtual 1800	android/content/Intent:getFlags	()I
        //     163: aconst_null
        //     164: invokevirtual 4484	com/android/server/am/ActivityManagerService:checkGrantUriPermissionFromIntentLocked	(ILjava/lang/String;Landroid/content/Intent;ILcom/android/server/am/ActivityManagerService$NeededUriGrants;)Lcom/android/server/am/ActivityManagerService$NeededUriGrants;
        //     167: astore 8
        //     169: aload_0
        //     170: aload 7
        //     172: invokespecial 1507	com/android/server/am/ActivityManagerService:unscheduleServiceRestartLocked	(Lcom/android/server/am/ServiceRecord;)Z
        //     175: ifeq +3 -> 178
        //     178: aload 7
        //     180: iconst_1
        //     181: putfield 1401	com/android/server/am/ServiceRecord:startRequested	Z
        //     184: aload 7
        //     186: iconst_0
        //     187: putfield 3605	com/android/server/am/ServiceRecord:callStart	Z
        //     190: aload 7
        //     192: getfield 1526	com/android/server/am/ServiceRecord:pendingStarts	Ljava/util/ArrayList;
        //     195: new 2168	com/android/server/am/ServiceRecord$StartItem
        //     198: dup
        //     199: aload 7
        //     201: iconst_0
        //     202: aload 7
        //     204: invokevirtual 2171	com/android/server/am/ServiceRecord:makeNextStartId	()I
        //     207: aload_2
        //     208: aload 8
        //     210: invokespecial 2174	com/android/server/am/ServiceRecord$StartItem:<init>	(Lcom/android/server/am/ServiceRecord;ZILandroid/content/Intent;Lcom/android/server/am/ActivityManagerService$NeededUriGrants;)V
        //     213: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     216: pop
        //     217: aload 7
        //     219: invokestatic 1271	android/os/SystemClock:uptimeMillis	()J
        //     222: putfield 2309	com/android/server/am/ServiceRecord:lastActivity	J
        //     225: aload 7
        //     227: getfield 1533	com/android/server/am/ServiceRecord:stats	Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;
        //     230: invokevirtual 1538	com/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv:getBatteryStats	()Lcom/android/internal/os/BatteryStatsImpl;
        //     233: astore 10
        //     235: aload 10
        //     237: monitorenter
        //     238: aload 7
        //     240: getfield 1533	com/android/server/am/ServiceRecord:stats	Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;
        //     243: invokevirtual 6711	com/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv:startRunningLocked	()V
        //     246: aload 10
        //     248: monitorexit
        //     249: aload_0
        //     250: aload 7
        //     252: aload_2
        //     253: invokevirtual 1800	android/content/Intent:getFlags	()I
        //     256: iconst_0
        //     257: invokespecial 4328	com/android/server/am/ActivityManagerService:bringUpServiceLocked	(Lcom/android/server/am/ServiceRecord;IZ)Z
        //     260: ifne +31 -> 291
        //     263: new 1215	android/content/ComponentName
        //     266: dup
        //     267: ldc_w 6708
        //     270: ldc_w 6713
        //     273: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     276: astore 13
        //     278: aload_0
        //     279: monitorexit
        //     280: goto +20 -> 300
        //     283: astore 11
        //     285: aload 10
        //     287: monitorexit
        //     288: aload 11
        //     290: athrow
        //     291: aload 7
        //     293: getfield 1425	com/android/server/am/ServiceRecord:name	Landroid/content/ComponentName;
        //     296: astore 13
        //     298: aload_0
        //     299: monitorexit
        //     300: aload 13
        //     302: areturn
        //     303: ldc_w 6715
        //     306: astore 14
        //     308: goto -184 -> 124
        //
        // Exception table:
        //     from	to	target	type
        //     6	68	64	finally
        //     71	238	64	finally
        //     249	280	64	finally
        //     288	300	64	finally
        //     238	249	283	finally
        //     285	288	283	finally
    }

    void startSetupActivityLocked()
    {
        if (this.mCheckedForSetup);
        ContentResolver localContentResolver;
        Intent localIntent;
        ResolveInfo localResolveInfo;
        int i;
        label74: 
        do
        {
            do
            {
                return;
                localContentResolver = this.mContext.getContentResolver();
            }
            while ((this.mFactoryTest == 1) || (Settings.Secure.getInt(localContentResolver, "device_provisioned", 0) == 0));
            this.mCheckedForSetup = true;
            localIntent = new Intent("android.intent.action.UPGRADE_SETUP");
            List localList = mSelf.mContext.getPackageManager().queryIntentActivities(localIntent, 128);
            localResolveInfo = null;
            i = 0;
            if (localList != null)
            {
                int j = localList.size();
                if (i < j)
                {
                    if ((0x1 & ((ResolveInfo)localList.get(i)).activityInfo.applicationInfo.flags) == 0)
                        break;
                    localResolveInfo = (ResolveInfo)localList.get(i);
                }
            }
        }
        while (localResolveInfo == null);
        if (localResolveInfo.activityInfo.metaData != null);
        for (String str1 = localResolveInfo.activityInfo.metaData.getString("android.SETUP_VERSION"); ; str1 = null)
        {
            if ((str1 == null) && (localResolveInfo.activityInfo.applicationInfo.metaData != null))
                str1 = localResolveInfo.activityInfo.applicationInfo.metaData.getString("android.SETUP_VERSION");
            String str2 = Settings.Secure.getString(localContentResolver, "last_setup_shown");
            if ((str1 == null) || (str1.equals(str2)))
                break;
            localIntent.setFlags(268435456);
            localIntent.setComponent(new ComponentName(localResolveInfo.activityInfo.packageName, localResolveInfo.activityInfo.name));
            this.mMainStack.startActivityLocked(null, localIntent, null, localResolveInfo.activityInfo, null, null, 0, 0, 0, 0, null, false, null);
            break;
            i++;
            break label74;
        }
    }

    public void stopAppSwitches()
    {
        if (checkCallingPermission("android.permission.STOP_APP_SWITCHES") != 0)
            throw new SecurityException("Requires permission android.permission.STOP_APP_SWITCHES");
        try
        {
            this.mAppSwitchesAllowedTime = (5000L + SystemClock.uptimeMillis());
            this.mDidAppSwitch = false;
            this.mHandler.removeMessages(21);
            Message localMessage = this.mHandler.obtainMessage(21);
            this.mHandler.sendMessageDelayed(localMessage, 5000L);
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public int stopService(IApplicationThread paramIApplicationThread, Intent paramIntent, String paramString)
    {
        // Byte code:
        //     0: iconst_1
        //     1: istore 4
        //     3: aload_0
        //     4: ldc_w 6742
        //     7: invokevirtual 4297	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
        //     10: aload_2
        //     11: ifnull +23 -> 34
        //     14: aload_2
        //     15: invokevirtual 4298	android/content/Intent:hasFileDescriptors	()Z
        //     18: iload 4
        //     20: if_icmpne +14 -> 34
        //     23: new 1572	java/lang/IllegalArgumentException
        //     26: dup
        //     27: ldc_w 4300
        //     30: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     33: athrow
        //     34: aload_0
        //     35: monitorenter
        //     36: aload_0
        //     37: aload_1
        //     38: invokevirtual 3117	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
        //     41: astore 6
        //     43: aload_1
        //     44: ifnull +65 -> 109
        //     47: aload 6
        //     49: ifnonnull +60 -> 109
        //     52: new 1701	java/lang/SecurityException
        //     55: dup
        //     56: new 598	java/lang/StringBuilder
        //     59: dup
        //     60: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     63: ldc_w 3119
        //     66: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     69: aload_1
        //     70: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     73: ldc_w 1736
        //     76: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     79: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     82: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     85: ldc_w 6744
        //     88: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     91: aload_2
        //     92: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     95: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     98: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     101: athrow
        //     102: astore 5
        //     104: aload_0
        //     105: monitorexit
        //     106: aload 5
        //     108: athrow
        //     109: aload 6
        //     111: ifnonnull +55 -> 166
        //     114: invokestatic 4360	android/os/UserId:getCallingUserId	()I
        //     117: istore 7
        //     119: aload_0
        //     120: aload_2
        //     121: aload_3
        //     122: iload 7
        //     124: invokespecial 6179	com/android/server/am/ActivityManagerService:findServiceLocked	(Landroid/content/Intent;Ljava/lang/String;I)Lcom/android/server/am/ActivityManagerService$ServiceLookupResult;
        //     127: astore 8
        //     129: aload 8
        //     131: ifnull +64 -> 195
        //     134: aload 8
        //     136: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     139: ifnull +47 -> 186
        //     142: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     145: lstore 9
        //     147: aload_0
        //     148: aload 8
        //     150: getfield 4317	com/android/server/am/ActivityManagerService$ServiceLookupResult:record	Lcom/android/server/am/ServiceRecord;
        //     153: invokespecial 2166	com/android/server/am/ActivityManagerService:stopServiceLocked	(Lcom/android/server/am/ServiceRecord;)V
        //     156: lload 9
        //     158: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     161: aload_0
        //     162: monitorexit
        //     163: goto +37 -> 200
        //     166: aload 6
        //     168: getfield 2182	com/android/server/am/ProcessRecord:userId	I
        //     171: istore 7
        //     173: goto -54 -> 119
        //     176: astore 11
        //     178: lload 9
        //     180: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     183: aload 11
        //     185: athrow
        //     186: bipush 255
        //     188: istore 4
        //     190: aload_0
        //     191: monitorexit
        //     192: goto +8 -> 200
        //     195: aload_0
        //     196: monitorexit
        //     197: iconst_0
        //     198: istore 4
        //     200: iload 4
        //     202: ireturn
        //
        // Exception table:
        //     from	to	target	type
        //     36	106	102	finally
        //     114	147	102	finally
        //     156	197	102	finally
        //     147	156	176	finally
    }

    // ERROR //
    public boolean stopServiceToken(ComponentName paramComponentName, IBinder paramIBinder, int paramInt)
    {
        // Byte code:
        //     0: iconst_0
        //     1: istore 4
        //     3: aload_0
        //     4: monitorenter
        //     5: aload_0
        //     6: aload_1
        //     7: aload_2
        //     8: invokespecial 6472	com/android/server/am/ActivityManagerService:findServiceLocked	(Landroid/content/ComponentName;Landroid/os/IBinder;)Lcom/android/server/am/ServiceRecord;
        //     11: astore 6
        //     13: aload 6
        //     15: ifnull +208 -> 223
        //     18: iload_3
        //     19: iflt +128 -> 147
        //     22: aload 6
        //     24: iload_3
        //     25: iconst_0
        //     26: invokevirtual 6374	com/android/server/am/ServiceRecord:findDeliveredStart	(IZ)Lcom/android/server/am/ServiceRecord$StartItem;
        //     29: astore 11
        //     31: aload 11
        //     33: ifnull +40 -> 73
        //     36: aload 6
        //     38: getfield 3801	com/android/server/am/ServiceRecord:deliveredStarts	Ljava/util/ArrayList;
        //     41: invokevirtual 1313	java/util/ArrayList:size	()I
        //     44: ifle +29 -> 73
        //     47: aload 6
        //     49: getfield 3801	com/android/server/am/ServiceRecord:deliveredStarts	Ljava/util/ArrayList;
        //     52: iconst_0
        //     53: invokevirtual 1366	java/util/ArrayList:remove	(I)Ljava/lang/Object;
        //     56: checkcast 2168	com/android/server/am/ServiceRecord$StartItem
        //     59: astore 13
        //     61: aload 13
        //     63: invokevirtual 3804	com/android/server/am/ServiceRecord$StartItem:removeUriPermissionsLocked	()V
        //     66: aload 13
        //     68: aload 11
        //     70: if_acmpne -34 -> 36
        //     73: aload 6
        //     75: invokevirtual 6377	com/android/server/am/ServiceRecord:getLastStartId	()I
        //     78: iload_3
        //     79: if_icmpeq +8 -> 87
        //     82: aload_0
        //     83: monitorexit
        //     84: goto +141 -> 225
        //     87: aload 6
        //     89: getfield 3801	com/android/server/am/ServiceRecord:deliveredStarts	Ljava/util/ArrayList;
        //     92: invokevirtual 1313	java/util/ArrayList:size	()I
        //     95: ifle +52 -> 147
        //     98: ldc 221
        //     100: new 598	java/lang/StringBuilder
        //     103: dup
        //     104: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     107: ldc_w 6748
        //     110: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     113: iload_3
        //     114: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     117: ldc_w 6750
        //     120: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     123: aload 6
        //     125: getfield 3801	com/android/server/am/ServiceRecord:deliveredStarts	Ljava/util/ArrayList;
        //     128: invokevirtual 1313	java/util/ArrayList:size	()I
        //     131: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     134: ldc_w 6752
        //     137: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     140: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     143: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     146: pop
        //     147: aload 6
        //     149: getfield 1533	com/android/server/am/ServiceRecord:stats	Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;
        //     152: invokevirtual 1538	com/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv:getBatteryStats	()Lcom/android/internal/os/BatteryStatsImpl;
        //     155: astore 7
        //     157: aload 7
        //     159: monitorenter
        //     160: aload 6
        //     162: getfield 1533	com/android/server/am/ServiceRecord:stats	Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;
        //     165: invokevirtual 4025	com/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv:stopRunningLocked	()V
        //     168: aload 6
        //     170: iconst_0
        //     171: putfield 1401	com/android/server/am/ServiceRecord:startRequested	Z
        //     174: aload 6
        //     176: iconst_0
        //     177: putfield 3605	com/android/server/am/ServiceRecord:callStart	Z
        //     180: aload 7
        //     182: monitorexit
        //     183: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     186: lstore 9
        //     188: aload_0
        //     189: aload 6
        //     191: iconst_0
        //     192: invokespecial 1619	com/android/server/am/ActivityManagerService:bringDownServiceLocked	(Lcom/android/server/am/ServiceRecord;Z)V
        //     195: lload 9
        //     197: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     200: iconst_1
        //     201: istore 4
        //     203: aload_0
        //     204: monitorexit
        //     205: goto +20 -> 225
        //     208: astore 5
        //     210: aload_0
        //     211: monitorexit
        //     212: aload 5
        //     214: athrow
        //     215: astore 8
        //     217: aload 7
        //     219: monitorexit
        //     220: aload 8
        //     222: athrow
        //     223: aload_0
        //     224: monitorexit
        //     225: iload 4
        //     227: ireturn
        //
        // Exception table:
        //     from	to	target	type
        //     5	160	208	finally
        //     183	212	208	finally
        //     220	225	208	finally
        //     160	183	215	finally
        //     217	220	215	finally
    }

    // ERROR //
    public boolean switchUser(int paramInt)
    {
        // Byte code:
        //     0: iconst_0
        //     1: istore_2
        //     2: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     5: istore_3
        //     6: iload_3
        //     7: ifeq +21 -> 28
        //     10: iload_3
        //     11: invokestatic 4510	android/os/Process:myUid	()I
        //     14: if_icmpeq +14 -> 28
        //     17: ldc 221
        //     19: ldc_w 6755
        //     22: invokestatic 1310	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
        //     25: pop
        //     26: iload_2
        //     27: ireturn
        //     28: aload_0
        //     29: getfield 5482	com/android/server/am/ActivityManagerService:mCurrentUserId	I
        //     32: iload_1
        //     33: if_icmpne +8 -> 41
        //     36: iconst_1
        //     37: istore_2
        //     38: goto -12 -> 26
        //     41: aload_0
        //     42: monitorenter
        //     43: aload_0
        //     44: getfield 760	com/android/server/am/ActivityManagerService:mLoggedInUsers	Landroid/util/SparseIntArray;
        //     47: iload_1
        //     48: invokevirtual 6756	android/util/SparseIntArray:indexOfKey	(I)I
        //     51: ifge +32 -> 83
        //     54: aload_0
        //     55: iload_1
        //     56: invokespecial 6758	com/android/server/am/ActivityManagerService:userExists	(I)Z
        //     59: ifne +15 -> 74
        //     62: aload_0
        //     63: monitorexit
        //     64: goto -38 -> 26
        //     67: astore 4
        //     69: aload_0
        //     70: monitorexit
        //     71: aload 4
        //     73: athrow
        //     74: aload_0
        //     75: getfield 760	com/android/server/am/ActivityManagerService:mLoggedInUsers	Landroid/util/SparseIntArray;
        //     78: iload_1
        //     79: iload_1
        //     80: invokevirtual 6760	android/util/SparseIntArray:append	(II)V
        //     83: aload_0
        //     84: iload_1
        //     85: putfield 5482	com/android/server/am/ActivityManagerService:mCurrentUserId	I
        //     88: aload_0
        //     89: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     92: iload_1
        //     93: invokevirtual 6762	com/android/server/am/ActivityStack:switchUser	(I)Z
        //     96: ifne +9 -> 105
        //     99: aload_0
        //     100: iload_1
        //     101: invokevirtual 6764	com/android/server/am/ActivityManagerService:startHomeActivityLocked	(I)Z
        //     104: pop
        //     105: aload_0
        //     106: monitorexit
        //     107: new 1353	android/content/Intent
        //     110: dup
        //     111: ldc_w 6766
        //     114: invokespecial 4543	android/content/Intent:<init>	(Ljava/lang/String;)V
        //     117: astore 5
        //     119: aload 5
        //     121: ldc_w 3507
        //     124: iload_1
        //     125: invokevirtual 3006	android/content/Intent:putExtra	(Ljava/lang/String;I)Landroid/content/Intent;
        //     128: pop
        //     129: aload_0
        //     130: getfield 2453	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
        //     133: aload 5
        //     135: ldc_w 6768
        //     138: invokevirtual 6772	android/content/Context:sendBroadcast	(Landroid/content/Intent;Ljava/lang/String;)V
        //     141: iconst_1
        //     142: istore_2
        //     143: goto -117 -> 26
        //
        // Exception table:
        //     from	to	target	type
        //     43	71	67	finally
        //     74	107	67	finally
    }

    // ERROR //
    public void systemReady(final Runnable paramRunnable)
    {
        // Byte code:
        //     0: aload_0
        //     1: monitorenter
        //     2: aload_0
        //     3: getfield 656	com/android/server/am/ActivityManagerService:mSystemReady	Z
        //     6: ifeq +18 -> 24
        //     9: aload_1
        //     10: ifnull +9 -> 19
        //     13: aload_1
        //     14: invokeinterface 6775 1 0
        //     19: aload_0
        //     20: monitorexit
        //     21: goto +1046 -> 1067
        //     24: aload_0
        //     25: getfield 662	com/android/server/am/ActivityManagerService:mDidUpdate	Z
        //     28: ifne +407 -> 435
        //     31: aload_0
        //     32: getfield 660	com/android/server/am/ActivityManagerService:mWaitingUpdate	Z
        //     35: ifeq +13 -> 48
        //     38: aload_0
        //     39: monitorexit
        //     40: goto +1027 -> 1067
        //     43: astore_2
        //     44: aload_0
        //     45: monitorexit
        //     46: aload_2
        //     47: athrow
        //     48: new 1353	android/content/Intent
        //     51: dup
        //     52: ldc_w 6777
        //     55: invokespecial 4543	android/content/Intent:<init>	(Ljava/lang/String;)V
        //     58: astore 38
        //     60: aconst_null
        //     61: astore 39
        //     63: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     66: aload 38
        //     68: aconst_null
        //     69: iconst_0
        //     70: iconst_0
        //     71: invokeinterface 1835 5 0
        //     76: astore 61
        //     78: aload 61
        //     80: astore 39
        //     82: aload 39
        //     84: ifnull +334 -> 418
        //     87: bipush 255
        //     89: aload 39
        //     91: invokeinterface 1801 1 0
        //     96: iadd
        //     97: istore 41
        //     99: iload 41
        //     101: iflt +42 -> 143
        //     104: iconst_1
        //     105: aload 39
        //     107: iload 41
        //     109: invokeinterface 1826 2 0
        //     114: checkcast 1780	android/content/pm/ResolveInfo
        //     117: getfield 1793	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
        //     120: getfield 1304	android/content/pm/ActivityInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     123: getfield 991	android/content/pm/ApplicationInfo:flags	I
        //     126: iand
        //     127: ifne +941 -> 1068
        //     130: aload 39
        //     132: iload 41
        //     134: invokeinterface 1830 2 0
        //     139: pop
        //     140: goto +928 -> 1068
        //     143: aload 38
        //     145: ldc_w 5516
        //     148: invokevirtual 1628	android/content/Intent:addFlags	(I)Landroid/content/Intent;
        //     151: pop
        //     152: invokestatic 6779	com/android/server/am/ActivityManagerService:readLastDonePreBootReceivers	()Ljava/util/ArrayList;
        //     155: astore 43
        //     157: new 536	java/util/ArrayList
        //     160: dup
        //     161: invokespecial 537	java/util/ArrayList:<init>	()V
        //     164: astore 44
        //     166: iconst_0
        //     167: istore 45
        //     169: aload 39
        //     171: invokeinterface 1801 1 0
        //     176: istore 46
        //     178: iload 45
        //     180: iload 46
        //     182: if_icmpge +898 -> 1080
        //     185: aload 39
        //     187: iload 45
        //     189: invokeinterface 1826 2 0
        //     194: checkcast 1780	android/content/pm/ResolveInfo
        //     197: getfield 1793	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
        //     200: astore 57
        //     202: new 1215	android/content/ComponentName
        //     205: dup
        //     206: aload 57
        //     208: getfield 1829	android/content/pm/ComponentInfo:packageName	Ljava/lang/String;
        //     211: aload 57
        //     213: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     216: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     219: astore 58
        //     221: aload 43
        //     223: aload 58
        //     225: invokevirtual 1622	java/util/ArrayList:contains	(Ljava/lang/Object;)Z
        //     228: ifeq +846 -> 1074
        //     231: aload 39
        //     233: iload 45
        //     235: invokeinterface 1830 2 0
        //     240: pop
        //     241: iinc 45 255
        //     244: goto +830 -> 1074
        //     247: aload 39
        //     249: invokeinterface 1801 1 0
        //     254: istore 48
        //     256: iload 47
        //     258: iload 48
        //     260: if_icmpge +158 -> 418
        //     263: aload 39
        //     265: iload 47
        //     267: invokeinterface 1826 2 0
        //     272: checkcast 1780	android/content/pm/ResolveInfo
        //     275: getfield 1793	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
        //     278: astore 49
        //     280: new 1215	android/content/ComponentName
        //     283: dup
        //     284: aload 49
        //     286: getfield 1829	android/content/pm/ComponentInfo:packageName	Ljava/lang/String;
        //     289: aload 49
        //     291: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     294: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     297: astore 50
        //     299: aload 44
        //     301: aload 50
        //     303: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     306: pop
        //     307: aload 38
        //     309: aload 50
        //     311: invokevirtual 4597	android/content/Intent:setComponent	(Landroid/content/ComponentName;)Landroid/content/Intent;
        //     314: pop
        //     315: aconst_null
        //     316: astore 53
        //     318: bipush 255
        //     320: aload 39
        //     322: invokeinterface 1801 1 0
        //     327: iadd
        //     328: istore 54
        //     330: iload 47
        //     332: iload 54
        //     334: if_icmpne +16 -> 350
        //     337: new 36	com/android/server/am/ActivityManagerService$9
        //     340: dup
        //     341: aload_0
        //     342: aload 44
        //     344: aload_1
        //     345: invokespecial 6782	com/android/server/am/ActivityManagerService$9:<init>	(Lcom/android/server/am/ActivityManagerService;Ljava/util/ArrayList;Ljava/lang/Runnable;)V
        //     348: astore 53
        //     350: ldc 221
        //     352: new 598	java/lang/StringBuilder
        //     355: dup
        //     356: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     359: ldc_w 6784
        //     362: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     365: aload 38
        //     367: invokevirtual 1357	android/content/Intent:getComponent	()Landroid/content/ComponentName;
        //     370: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     373: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     376: invokestatic 784	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //     379: pop
        //     380: aload_0
        //     381: aconst_null
        //     382: aconst_null
        //     383: aload 38
        //     385: aconst_null
        //     386: aload 53
        //     388: iconst_0
        //     389: aconst_null
        //     390: aconst_null
        //     391: aconst_null
        //     392: iconst_1
        //     393: iconst_0
        //     394: getstatic 442	com/android/server/am/ActivityManagerService:MY_PID	I
        //     397: sipush 1000
        //     400: iconst_0
        //     401: invokespecial 937	com/android/server/am/ActivityManagerService:broadcastIntentLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;ZZIII)I
        //     404: pop
        //     405: aload 53
        //     407: ifnull +679 -> 1086
        //     410: aload_0
        //     411: iconst_1
        //     412: putfield 660	com/android/server/am/ActivityManagerService:mWaitingUpdate	Z
        //     415: goto +671 -> 1086
        //     418: aload_0
        //     419: getfield 660	com/android/server/am/ActivityManagerService:mWaitingUpdate	Z
        //     422: ifeq +8 -> 430
        //     425: aload_0
        //     426: monitorexit
        //     427: goto +640 -> 1067
        //     430: aload_0
        //     431: iconst_1
        //     432: putfield 662	com/android/server/am/ActivityManagerService:mDidUpdate	Z
        //     435: aload_0
        //     436: iconst_1
        //     437: putfield 656	com/android/server/am/ActivityManagerService:mSystemReady	Z
        //     440: aload_0
        //     441: getfield 652	com/android/server/am/ActivityManagerService:mStartRunning	Z
        //     444: ifne +8 -> 452
        //     447: aload_0
        //     448: monitorexit
        //     449: goto +618 -> 1067
        //     452: aload_0
        //     453: monitorexit
        //     454: aload_0
        //     455: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     458: astore_3
        //     459: aload_3
        //     460: monitorenter
        //     461: aload_0
        //     462: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     465: invokevirtual 2178	android/util/SparseArray:size	()I
        //     468: istore 5
        //     470: iload 5
        //     472: iconst_1
        //     473: isub
        //     474: istore 6
        //     476: aconst_null
        //     477: astore 7
        //     479: iload 6
        //     481: iflt +61 -> 542
        //     484: aload_0
        //     485: getfield 572	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
        //     488: iload 6
        //     490: invokevirtual 2181	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
        //     493: checkcast 982	com/android/server/am/ProcessRecord
        //     496: astore 35
        //     498: aload_0
        //     499: aload 35
        //     501: getfield 986	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
        //     504: invokevirtual 1183	com/android/server/am/ActivityManagerService:isAllowedWhileBooting	(Landroid/content/pm/ApplicationInfo;)Z
        //     507: ifne +553 -> 1060
        //     510: aload 7
        //     512: ifnonnull +541 -> 1053
        //     515: new 536	java/util/ArrayList
        //     518: dup
        //     519: invokespecial 537	java/util/ArrayList:<init>	()V
        //     522: astore 36
        //     524: aload 36
        //     526: aload 35
        //     528: invokevirtual 1550	java/util/ArrayList:add	(Ljava/lang/Object;)Z
        //     531: pop
        //     532: iinc 6 255
        //     535: aload 36
        //     537: astore 7
        //     539: goto -60 -> 479
        //     542: aload_3
        //     543: monitorexit
        //     544: aload_0
        //     545: monitorenter
        //     546: aload 7
        //     548: ifnull +82 -> 630
        //     551: bipush 255
        //     553: aload 7
        //     555: invokevirtual 1313	java/util/ArrayList:size	()I
        //     558: iadd
        //     559: istore 31
        //     561: iload 31
        //     563: iflt +67 -> 630
        //     566: aload 7
        //     568: iload 31
        //     570: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     573: checkcast 982	com/android/server/am/ProcessRecord
        //     576: astore 32
        //     578: ldc 221
        //     580: new 598	java/lang/StringBuilder
        //     583: dup
        //     584: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     587: ldc_w 6786
        //     590: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     593: aload 32
        //     595: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     598: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     601: invokestatic 784	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //     604: pop
        //     605: aload_0
        //     606: aload 32
        //     608: iconst_1
        //     609: iconst_0
        //     610: ldc_w 6788
        //     613: invokespecial 3230	com/android/server/am/ActivityManagerService:removeProcessLocked	(Lcom/android/server/am/ProcessRecord;ZZLjava/lang/String;)Z
        //     616: pop
        //     617: iinc 31 255
        //     620: goto -59 -> 561
        //     623: astore 4
        //     625: aload_3
        //     626: monitorexit
        //     627: aload 4
        //     629: athrow
        //     630: aload_0
        //     631: iconst_1
        //     632: putfield 654	com/android/server/am/ActivityManagerService:mProcessesReady	Z
        //     635: aload_0
        //     636: monitorexit
        //     637: ldc 221
        //     639: ldc_w 6790
        //     642: invokestatic 784	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //     645: pop
        //     646: sipush 3040
        //     649: invokestatic 1271	android/os/SystemClock:uptimeMillis	()J
        //     652: invokestatic 5346	android/util/EventLog:writeEvent	(IJ)I
        //     655: pop
        //     656: aload_0
        //     657: monitorenter
        //     658: aload_0
        //     659: getfield 3469	com/android/server/am/ActivityManagerService:mFactoryTest	I
        //     662: iconst_1
        //     663: if_icmpne +147 -> 810
        //     666: aload_0
        //     667: getfield 2453	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
        //     670: invokevirtual 3897	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
        //     673: new 1353	android/content/Intent
        //     676: dup
        //     677: ldc_w 6792
        //     680: invokespecial 4543	android/content/Intent:<init>	(Ljava/lang/String;)V
        //     683: sipush 1024
        //     686: invokevirtual 6796	android/content/pm/PackageManager:resolveActivity	(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;
        //     689: astore 25
        //     691: aconst_null
        //     692: astore 26
        //     694: aload 25
        //     696: ifnull +253 -> 949
        //     699: aload 25
        //     701: getfield 1793	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
        //     704: astore 29
        //     706: aload 29
        //     708: getfield 1304	android/content/pm/ActivityInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
        //     711: astore 30
        //     713: iconst_1
        //     714: aload 30
        //     716: getfield 991	android/content/pm/ApplicationInfo:flags	I
        //     719: iand
        //     720: ifeq +211 -> 931
        //     723: aload_0
        //     724: ldc_w 6792
        //     727: putfield 6615	com/android/server/am/ActivityManagerService:mTopAction	Ljava/lang/String;
        //     730: aload_0
        //     731: aconst_null
        //     732: putfield 6617	com/android/server/am/ActivityManagerService:mTopData	Ljava/lang/String;
        //     735: aload_0
        //     736: new 1215	android/content/ComponentName
        //     739: dup
        //     740: aload 30
        //     742: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     745: aload 29
        //     747: getfield 1973	android/content/pm/ComponentInfo:name	Ljava/lang/String;
        //     750: invokespecial 2962	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
        //     753: putfield 3945	com/android/server/am/ActivityManagerService:mTopComponent	Landroid/content/ComponentName;
        //     756: aload 26
        //     758: ifnull +52 -> 810
        //     761: aload_0
        //     762: aconst_null
        //     763: putfield 6615	com/android/server/am/ActivityManagerService:mTopAction	Ljava/lang/String;
        //     766: aload_0
        //     767: aconst_null
        //     768: putfield 6617	com/android/server/am/ActivityManagerService:mTopData	Ljava/lang/String;
        //     771: aload_0
        //     772: aconst_null
        //     773: putfield 3945	com/android/server/am/ActivityManagerService:mTopComponent	Landroid/content/ComponentName;
        //     776: invokestatic 2431	android/os/Message:obtain	()Landroid/os/Message;
        //     779: astore 27
        //     781: aload 27
        //     783: iconst_3
        //     784: putfield 2434	android/os/Message:what	I
        //     787: aload 27
        //     789: invokevirtual 6798	android/os/Message:getData	()Landroid/os/Bundle;
        //     792: ldc_w 6800
        //     795: aload 26
        //     797: invokevirtual 6804	android/os/Bundle:putCharSequence	(Ljava/lang/String;Ljava/lang/CharSequence;)V
        //     800: aload_0
        //     801: getfield 755	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
        //     804: aload 27
        //     806: invokevirtual 1687	android/os/Handler:sendMessage	(Landroid/os/Message;)Z
        //     809: pop
        //     810: aload_0
        //     811: monitorexit
        //     812: aload_0
        //     813: invokespecial 6806	com/android/server/am/ActivityManagerService:retrieveSettings	()V
        //     816: aload_1
        //     817: ifnull +9 -> 826
        //     820: aload_1
        //     821: invokeinterface 6775 1 0
        //     826: aload_0
        //     827: monitorenter
        //     828: aload_0
        //     829: getfield 3469	com/android/server/am/ActivityManagerService:mFactoryTest	I
        //     832: istore 14
        //     834: iload 14
        //     836: iconst_1
        //     837: if_icmpeq +139 -> 976
        //     840: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     843: sipush 1024
        //     846: invokeinterface 6810 2 0
        //     851: astore 20
        //     853: aload 20
        //     855: ifnull +121 -> 976
        //     858: aload 20
        //     860: invokeinterface 1801 1 0
        //     865: istore 21
        //     867: iconst_0
        //     868: istore 22
        //     870: iload 22
        //     872: iload 21
        //     874: if_icmpge +102 -> 976
        //     877: aload 20
        //     879: iload 22
        //     881: invokeinterface 1826 2 0
        //     886: checkcast 988	android/content/pm/ApplicationInfo
        //     889: astore 23
        //     891: aload 23
        //     893: ifnull +25 -> 918
        //     896: aload 23
        //     898: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     901: ldc_w 3899
        //     904: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     907: ifne +11 -> 918
        //     910: aload_0
        //     911: aload 23
        //     913: iconst_0
        //     914: invokevirtual 3661	com/android/server/am/ActivityManagerService:addAppLocked	(Landroid/content/pm/ApplicationInfo;Z)Lcom/android/server/am/ProcessRecord;
        //     917: pop
        //     918: iinc 22 1
        //     921: goto -51 -> 870
        //     924: astore 9
        //     926: aload_0
        //     927: monitorexit
        //     928: aload 9
        //     930: athrow
        //     931: aload_0
        //     932: getfield 2453	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
        //     935: invokevirtual 6814	android/content/Context:getResources	()Landroid/content/res/Resources;
        //     938: ldc_w 6815
        //     941: invokevirtual 6821	android/content/res/Resources:getText	(I)Ljava/lang/CharSequence;
        //     944: astore 26
        //     946: goto -190 -> 756
        //     949: aload_0
        //     950: getfield 2453	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
        //     953: invokevirtual 6814	android/content/Context:getResources	()Landroid/content/res/Resources;
        //     956: ldc_w 6822
        //     959: invokevirtual 6821	android/content/res/Resources:getText	(I)Ljava/lang/CharSequence;
        //     962: astore 26
        //     964: goto -208 -> 756
        //     967: astore 12
        //     969: aload_0
        //     970: monitorexit
        //     971: aload 12
        //     973: athrow
        //     974: astore 19
        //     976: aload_0
        //     977: iconst_1
        //     978: putfield 658	com/android/server/am/ActivityManagerService:mBooting	Z
        //     981: invokestatic 997	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
        //     984: invokeinterface 6825 1 0
        //     989: ifeq +25 -> 1014
        //     992: invokestatic 2431	android/os/Message:obtain	()Landroid/os/Message;
        //     995: astore 17
        //     997: aload 17
        //     999: bipush 14
        //     1001: putfield 2434	android/os/Message:what	I
        //     1004: aload_0
        //     1005: getfield 755	com/android/server/am/ActivityManagerService:mHandler	Landroid/os/Handler;
        //     1008: aload 17
        //     1010: invokevirtual 1687	android/os/Handler:sendMessage	(Landroid/os/Message;)Z
        //     1013: pop
        //     1014: aload_0
        //     1015: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     1018: aconst_null
        //     1019: invokevirtual 2210	com/android/server/am/ActivityStack:resumeTopActivityLocked	(Lcom/android/server/am/ActivityRecord;)Z
        //     1022: pop
        //     1023: aload_0
        //     1024: monitorexit
        //     1025: goto +42 -> 1067
        //     1028: astore 13
        //     1030: aload_0
        //     1031: monitorexit
        //     1032: aload 13
        //     1034: athrow
        //     1035: astore 15
        //     1037: goto -23 -> 1014
        //     1040: astore 4
        //     1042: aload 7
        //     1044: pop
        //     1045: goto -420 -> 625
        //     1048: astore 40
        //     1050: goto -968 -> 82
        //     1053: aload 7
        //     1055: astore 36
        //     1057: goto -533 -> 524
        //     1060: aload 7
        //     1062: astore 36
        //     1064: goto -532 -> 532
        //     1067: return
        //     1068: iinc 41 255
        //     1071: goto -972 -> 99
        //     1074: iinc 45 1
        //     1077: goto -908 -> 169
        //     1080: iconst_0
        //     1081: istore 47
        //     1083: goto -836 -> 247
        //     1086: iinc 47 1
        //     1089: goto -842 -> 247
        //
        // Exception table:
        //     from	to	target	type
        //     2	46	43	finally
        //     48	60	43	finally
        //     63	78	43	finally
        //     87	454	43	finally
        //     461	470	623	finally
        //     524	532	623	finally
        //     625	627	623	finally
        //     551	617	924	finally
        //     630	637	924	finally
        //     926	928	924	finally
        //     658	812	967	finally
        //     931	971	967	finally
        //     840	918	974	android/os/RemoteException
        //     828	834	1028	finally
        //     840	918	1028	finally
        //     976	981	1028	finally
        //     981	1014	1028	finally
        //     1014	1032	1028	finally
        //     981	1014	1035	android/os/RemoteException
        //     484	524	1040	finally
        //     542	544	1040	finally
        //     63	78	1048	android/os/RemoteException
    }

    public boolean targetTaskAffinityMatchesActivity(IBinder paramIBinder, String paramString)
    {
        ActivityRecord localActivityRecord = ActivityRecord.forToken(paramIBinder);
        if ((localActivityRecord != null) && (localActivityRecord.task.affinity != null) && (localActivityRecord.task.affinity.equals(paramString)));
        for (boolean bool = true; ; bool = false)
            return bool;
    }

    public boolean testIsSystemReady()
    {
        return this.mSystemReady;
    }

    final void trimApplications()
    {
        try
        {
            int i = -1 + this.mRemovedProcesses.size();
            if (i >= 0)
            {
                ProcessRecord localProcessRecord = (ProcessRecord)this.mRemovedProcesses.get(i);
                IBinder localIBinder;
                if ((localProcessRecord.activities.size() == 0) && (localProcessRecord.curReceiver == null) && (localProcessRecord.services.size() == 0))
                {
                    StringBuilder localStringBuilder = new StringBuilder().append("Exiting empty application process ").append(localProcessRecord.processName).append(" (");
                    if (localProcessRecord.thread == null)
                        break label248;
                    localIBinder = localProcessRecord.thread.asBinder();
                    label102: Slog.i("ActivityManager", localIBinder + ")\n");
                    if ((localProcessRecord.pid <= 0) || (localProcessRecord.pid == MY_PID))
                        break label254;
                    Object[] arrayOfObject = new Object[4];
                    arrayOfObject[0] = Integer.valueOf(localProcessRecord.pid);
                    arrayOfObject[1] = localProcessRecord.processName;
                    arrayOfObject[2] = Integer.valueOf(localProcessRecord.setAdj);
                    arrayOfObject[3] = "empty";
                    EventLog.writeEvent(30023, arrayOfObject);
                    Process.killProcessQuiet(localProcessRecord.pid);
                }
                while (true)
                {
                    cleanUpApplicationRecordLocked(localProcessRecord, false, true, -1);
                    this.mRemovedProcesses.remove(i);
                    if ((localProcessRecord.persistent) && (localProcessRecord.persistent))
                        addAppLocked(localProcessRecord.info, false);
                    i--;
                    break;
                    label248: localIBinder = null;
                    break label102;
                    try
                    {
                        label254: localProcessRecord.thread.scheduleExit();
                    }
                    catch (Exception localException)
                    {
                    }
                }
            }
            updateOomAdjLocked();
            return;
        }
        finally
        {
        }
    }

    // ERROR //
    public void unbindBackupAgent(ApplicationInfo paramApplicationInfo)
    {
        // Byte code:
        //     0: aload_1
        //     1: ifnonnull +13 -> 14
        //     4: ldc 221
        //     6: ldc_w 6836
        //     9: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     12: pop
        //     13: return
        //     14: aload_0
        //     15: monitorenter
        //     16: aload_0
        //     17: getfield 623	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
        //     20: ifnonnull +22 -> 42
        //     23: ldc 221
        //     25: ldc_w 6838
        //     28: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     31: pop
        //     32: aload_0
        //     33: monitorexit
        //     34: goto -21 -> 13
        //     37: astore_2
        //     38: aload_0
        //     39: monitorexit
        //     40: aload_2
        //     41: athrow
        //     42: aload_0
        //     43: getfield 623	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
        //     46: aload_1
        //     47: getfield 1207	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
        //     50: invokevirtual 432	java/lang/String:equals	(Ljava/lang/Object;)Z
        //     53: ifne +40 -> 93
        //     56: ldc 221
        //     58: new 598	java/lang/StringBuilder
        //     61: dup
        //     62: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     65: ldc_w 6840
        //     68: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     71: aload_1
        //     72: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     75: ldc_w 6842
        //     78: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     81: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     84: invokestatic 1310	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
        //     87: pop
        //     88: aload_0
        //     89: monitorexit
        //     90: goto -77 -> 13
        //     93: aload_0
        //     94: getfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     97: getfield 2092	com/android/server/am/BackupRecord:app	Lcom/android/server/am/ProcessRecord;
        //     100: astore_3
        //     101: aload_0
        //     102: aconst_null
        //     103: putfield 625	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
        //     106: aload_0
        //     107: aconst_null
        //     108: putfield 623	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
        //     111: aload_0
        //     112: aload_3
        //     113: invokespecial 1464	com/android/server/am/ActivityManagerService:updateOomAdjLocked	(Lcom/android/server/am/ProcessRecord;)Z
        //     116: pop
        //     117: aload_3
        //     118: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     121: astore 5
        //     123: aload 5
        //     125: ifnull +18 -> 143
        //     128: aload_3
        //     129: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     132: aload_1
        //     133: aload_0
        //     134: aload_1
        //     135: invokevirtual 1222	com/android/server/am/ActivityManagerService:compatibilityInfoForPackageLocked	(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/CompatibilityInfo;
        //     138: invokeinterface 6846 3 0
        //     143: aload_0
        //     144: monitorexit
        //     145: goto -132 -> 13
        //     148: astore 6
        //     150: ldc 221
        //     152: ldc_w 6848
        //     155: invokestatic 1310	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
        //     158: pop
        //     159: aload 6
        //     161: invokevirtual 1393	java/lang/Exception:printStackTrace	()V
        //     164: goto -21 -> 143
        //
        // Exception table:
        //     from	to	target	type
        //     16	40	37	finally
        //     42	123	37	finally
        //     128	143	37	finally
        //     143	164	37	finally
        //     128	143	148	java/lang/Exception
    }

    // ERROR //
    public void unbindFinished(IBinder paramIBinder, Intent paramIntent, boolean paramBoolean)
    {
        // Byte code:
        //     0: aload_2
        //     1: ifnull +22 -> 23
        //     4: aload_2
        //     5: invokevirtual 4298	android/content/Intent:hasFileDescriptors	()Z
        //     8: iconst_1
        //     9: if_icmpne +14 -> 23
        //     12: new 1572	java/lang/IllegalArgumentException
        //     15: dup
        //     16: ldc_w 4300
        //     19: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     22: athrow
        //     23: aload_0
        //     24: monitorenter
        //     25: aload_1
        //     26: instanceof 1316
        //     29: ifne +21 -> 50
        //     32: new 1572	java/lang/IllegalArgumentException
        //     35: dup
        //     36: ldc_w 6214
        //     39: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     42: athrow
        //     43: astore 4
        //     45: aload_0
        //     46: monitorexit
        //     47: aload 4
        //     49: athrow
        //     50: aload_1
        //     51: checkcast 1316	com/android/server/am/ServiceRecord
        //     54: astore 5
        //     56: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     59: lstore 6
        //     61: aload 5
        //     63: ifnull +83 -> 146
        //     66: new 1469	android/content/Intent$FilterComparison
        //     69: dup
        //     70: aload_2
        //     71: invokespecial 2950	android/content/Intent$FilterComparison:<init>	(Landroid/content/Intent;)V
        //     74: astore 8
        //     76: aload 5
        //     78: getfield 1450	com/android/server/am/ServiceRecord:bindings	Ljava/util/HashMap;
        //     81: aload 8
        //     83: invokevirtual 1762	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
        //     86: checkcast 1453	com/android/server/am/IntentBindRecord
        //     89: astore 9
        //     91: aload_0
        //     92: getfield 621	com/android/server/am/ActivityManagerService:mStoppingServices	Ljava/util/ArrayList;
        //     95: aload 5
        //     97: invokevirtual 1622	java/util/ArrayList:contains	(Ljava/lang/Object;)Z
        //     100: istore 10
        //     102: aload 9
        //     104: ifnull +29 -> 133
        //     107: aload 9
        //     109: getfield 3682	com/android/server/am/IntentBindRecord:apps	Ljava/util/HashMap;
        //     112: invokevirtual 1405	java/util/HashMap:size	()I
        //     115: ifle +34 -> 149
        //     118: iload 10
        //     120: ifne +29 -> 149
        //     123: aload_0
        //     124: aload 5
        //     126: aload 9
        //     128: iconst_1
        //     129: invokespecial 3693	com/android/server/am/ActivityManagerService:requestServiceBindingLocked	(Lcom/android/server/am/ServiceRecord;Lcom/android/server/am/IntentBindRecord;Z)Z
        //     132: pop
        //     133: aload_0
        //     134: aload 5
        //     136: iload 10
        //     138: invokevirtual 1482	com/android/server/am/ActivityManagerService:serviceDoneExecutingLocked	(Lcom/android/server/am/ServiceRecord;Z)V
        //     141: lload 6
        //     143: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     146: aload_0
        //     147: monitorexit
        //     148: return
        //     149: aload 9
        //     151: iconst_1
        //     152: putfield 3691	com/android/server/am/IntentBindRecord:doRebind	Z
        //     155: goto -22 -> 133
        //
        // Exception table:
        //     from	to	target	type
        //     25	47	43	finally
        //     50	155	43	finally
    }

    // ERROR //
    public boolean unbindService(IServiceConnection paramIServiceConnection)
    {
        // Byte code:
        //     0: iconst_0
        //     1: istore_2
        //     2: aload_0
        //     3: monitorenter
        //     4: aload_1
        //     5: invokeinterface 1436 1 0
        //     10: astore 4
        //     12: aload_0
        //     13: getfield 615	com/android/server/am/ActivityManagerService:mServiceConnections	Ljava/util/HashMap;
        //     16: aload 4
        //     18: invokevirtual 1762	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
        //     21: checkcast 536	java/util/ArrayList
        //     24: astore 5
        //     26: aload 5
        //     28: ifnonnull +39 -> 67
        //     31: ldc 221
        //     33: new 598	java/lang/StringBuilder
        //     36: dup
        //     37: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     40: ldc_w 6853
        //     43: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     46: aload_1
        //     47: invokeinterface 1436 1 0
        //     52: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     55: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     58: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     61: pop
        //     62: aload_0
        //     63: monitorexit
        //     64: goto +82 -> 146
        //     67: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     70: lstore 6
        //     72: aload 5
        //     74: invokevirtual 1313	java/util/ArrayList:size	()I
        //     77: ifle +60 -> 137
        //     80: aload 5
        //     82: iconst_0
        //     83: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     86: checkcast 1414	com/android/server/am/ConnectionRecord
        //     89: astore 8
        //     91: aload_0
        //     92: aload 8
        //     94: aconst_null
        //     95: aconst_null
        //     96: invokevirtual 3345	com/android/server/am/ActivityManagerService:removeConnectionLocked	(Lcom/android/server/am/ConnectionRecord;Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ActivityRecord;)V
        //     99: aload 8
        //     101: getfield 1442	com/android/server/am/ConnectionRecord:binding	Lcom/android/server/am/AppBindRecord;
        //     104: getfield 4051	com/android/server/am/AppBindRecord:service	Lcom/android/server/am/ServiceRecord;
        //     107: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     110: ifnull -38 -> 72
        //     113: aload_0
        //     114: aload 8
        //     116: getfield 1442	com/android/server/am/ConnectionRecord:binding	Lcom/android/server/am/AppBindRecord;
        //     119: getfield 4051	com/android/server/am/AppBindRecord:service	Lcom/android/server/am/ServiceRecord;
        //     122: getfield 1451	com/android/server/am/ServiceRecord:app	Lcom/android/server/am/ProcessRecord;
        //     125: invokespecial 1464	com/android/server/am/ActivityManagerService:updateOomAdjLocked	(Lcom/android/server/am/ProcessRecord;)Z
        //     128: pop
        //     129: goto -57 -> 72
        //     132: astore_3
        //     133: aload_0
        //     134: monitorexit
        //     135: aload_3
        //     136: athrow
        //     137: lload 6
        //     139: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     142: aload_0
        //     143: monitorexit
        //     144: iconst_1
        //     145: istore_2
        //     146: iload_2
        //     147: ireturn
        //
        // Exception table:
        //     from	to	target	type
        //     4	135	132	finally
        //     137	144	132	finally
    }

    // ERROR //
    public final void unbroadcastIntent(IApplicationThread paramIApplicationThread, Intent paramIntent, int paramInt)
    {
        // Byte code:
        //     0: aload_2
        //     1: ifnull +22 -> 23
        //     4: aload_2
        //     5: invokevirtual 4298	android/content/Intent:hasFileDescriptors	()Z
        //     8: iconst_1
        //     9: if_icmpne +14 -> 23
        //     12: new 1572	java/lang/IllegalArgumentException
        //     15: dup
        //     16: ldc_w 4300
        //     19: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     22: athrow
        //     23: aload_0
        //     24: monitorenter
        //     25: aload_0
        //     26: ldc_w 1689
        //     29: invokevirtual 4575	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
        //     32: ifeq +76 -> 108
        //     35: new 598	java/lang/StringBuilder
        //     38: dup
        //     39: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     42: ldc_w 6857
        //     45: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     48: invokestatic 1933	android/os/Binder:getCallingPid	()I
        //     51: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     54: ldc_w 1697
        //     57: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     60: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     63: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     66: ldc_w 1699
        //     69: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     72: ldc_w 1689
        //     75: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     78: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     81: astore 9
        //     83: ldc 221
        //     85: aload 9
        //     87: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     90: pop
        //     91: new 1701	java/lang/SecurityException
        //     94: dup
        //     95: aload 9
        //     97: invokespecial 1702	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
        //     100: athrow
        //     101: astore 4
        //     103: aload_0
        //     104: monitorexit
        //     105: aload 4
        //     107: athrow
        //     108: aload_0
        //     109: getfield 610	com/android/server/am/ActivityManagerService:mStickyBroadcasts	Ljava/util/HashMap;
        //     112: aload_2
        //     113: invokevirtual 1637	android/content/Intent:getAction	()Ljava/lang/String;
        //     116: invokevirtual 1762	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
        //     119: checkcast 536	java/util/ArrayList
        //     122: astore 5
        //     124: aload 5
        //     126: ifnull +45 -> 171
        //     129: aload 5
        //     131: invokevirtual 1313	java/util/ArrayList:size	()I
        //     134: istore 6
        //     136: iconst_0
        //     137: istore 7
        //     139: iload 7
        //     141: iload 6
        //     143: if_icmpge +28 -> 171
        //     146: aload_2
        //     147: aload 5
        //     149: iload 7
        //     151: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     154: checkcast 1353	android/content/Intent
        //     157: invokevirtual 1770	android/content/Intent:filterEquals	(Landroid/content/Intent;)Z
        //     160: ifeq +14 -> 174
        //     163: aload 5
        //     165: iload 7
        //     167: invokevirtual 1366	java/util/ArrayList:remove	(I)Ljava/lang/Object;
        //     170: pop
        //     171: aload_0
        //     172: monitorexit
        //     173: return
        //     174: iinc 7 1
        //     177: goto -38 -> 139
        //
        // Exception table:
        //     from	to	target	type
        //     25	105	101	finally
        //     108	173	101	finally
    }

    public void unhandledBack()
    {
        enforceCallingPermission("android.permission.FORCE_BACK", "unhandledBack()");
        try
        {
            int i = this.mMainStack.mHistory.size();
            if (i > 1)
            {
                long l = Binder.clearCallingIdentity();
                this.mMainStack.finishActivityLocked((ActivityRecord)this.mMainStack.mHistory.get(i - 1), i - 1, 0, null, "unhandled-back");
                Binder.restoreCallingIdentity(l);
            }
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public void unregisterProcessObserver(IProcessObserver paramIProcessObserver)
    {
        try
        {
            this.mProcessObservers.unregister(paramIProcessObserver);
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public void unregisterReceiver(IIntentReceiver paramIIntentReceiver)
    {
        long l = Binder.clearCallingIdentity();
        int i = 0;
        try
        {
            try
            {
                ReceiverList localReceiverList = (ReceiverList)this.mRegisteredReceivers.get(paramIIntentReceiver.asBinder());
                if (localReceiverList != null)
                {
                    if (localReceiverList.curBroadcast != null)
                    {
                        BroadcastRecord localBroadcastRecord = localReceiverList.curBroadcast;
                        if (finishReceiverLocked(paramIIntentReceiver.asBinder(), localBroadcastRecord.resultCode, localBroadcastRecord.resultData, localBroadcastRecord.resultExtras, localBroadcastRecord.resultAbort, true))
                        {
                            i = 1;
                            localBroadcastRecord.queue.processNextBroadcast(false);
                        }
                    }
                    if (localReceiverList.app != null)
                        localReceiverList.app.receivers.remove(localReceiverList);
                    removeReceiverLocked(localReceiverList);
                    if (localReceiverList.linkedToDeath)
                    {
                        localReceiverList.linkedToDeath = false;
                        localReceiverList.receiver.asBinder().unlinkToDeath(localReceiverList, 0);
                    }
                }
                if (i != 0)
                    trimApplications();
                return;
            }
            finally
            {
            }
        }
        finally
        {
            Binder.restoreCallingIdentity(l);
        }
    }

    // ERROR //
    public void unstableProviderDied(IBinder paramIBinder)
    {
        // Byte code:
        //     0: aload_1
        //     1: checkcast 2073	com/android/server/am/ContentProviderConnection
        //     4: astore 5
        //     6: aload 5
        //     8: ifnonnull +58 -> 66
        //     11: new 4453	java/lang/NullPointerException
        //     14: dup
        //     15: ldc_w 6219
        //     18: invokespecial 4456	java/lang/NullPointerException:<init>	(Ljava/lang/String;)V
        //     21: athrow
        //     22: astore_2
        //     23: new 598	java/lang/StringBuilder
        //     26: dup
        //     27: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     30: ldc_w 6221
        //     33: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     36: aload_1
        //     37: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     40: ldc_w 6223
        //     43: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     46: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     49: astore_3
        //     50: ldc 221
        //     52: aload_3
        //     53: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     56: pop
        //     57: new 1572	java/lang/IllegalArgumentException
        //     60: dup
        //     61: aload_3
        //     62: invokespecial 3169	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //     65: athrow
        //     66: aload_0
        //     67: monitorenter
        //     68: aload 5
        //     70: getfield 2076	com/android/server/am/ContentProviderConnection:provider	Lcom/android/server/am/ContentProviderRecord;
        //     73: getfield 2060	com/android/server/am/ContentProviderRecord:provider	Landroid/content/IContentProvider;
        //     76: astore 7
        //     78: aload_0
        //     79: monitorexit
        //     80: aload 7
        //     82: ifnonnull +13 -> 95
        //     85: goto +230 -> 315
        //     88: astore 6
        //     90: aload_0
        //     91: monitorexit
        //     92: aload 6
        //     94: athrow
        //     95: aload 7
        //     97: invokeinterface 3652 1 0
        //     102: invokeinterface 6890 1 0
        //     107: ifeq +62 -> 169
        //     110: aload_0
        //     111: monitorenter
        //     112: ldc 221
        //     114: new 598	java/lang/StringBuilder
        //     117: dup
        //     118: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     121: ldc_w 6892
        //     124: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     127: invokestatic 1936	android/os/Binder:getCallingUid	()I
        //     130: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     133: ldc_w 6894
        //     136: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     139: aload 5
        //     141: invokevirtual 1090	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //     144: ldc_w 6896
        //     147: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     150: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     153: invokestatic 1095	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //     156: pop
        //     157: aload_0
        //     158: monitorexit
        //     159: goto +156 -> 315
        //     162: astore 14
        //     164: aload_0
        //     165: monitorexit
        //     166: aload 14
        //     168: athrow
        //     169: aload_0
        //     170: monitorenter
        //     171: aload 5
        //     173: getfield 2076	com/android/server/am/ContentProviderConnection:provider	Lcom/android/server/am/ContentProviderRecord;
        //     176: getfield 2060	com/android/server/am/ContentProviderRecord:provider	Landroid/content/IContentProvider;
        //     179: aload 7
        //     181: if_acmpeq +15 -> 196
        //     184: aload_0
        //     185: monitorexit
        //     186: goto +129 -> 315
        //     189: astore 8
        //     191: aload_0
        //     192: monitorexit
        //     193: aload 8
        //     195: athrow
        //     196: aload 5
        //     198: getfield 2076	com/android/server/am/ContentProviderConnection:provider	Lcom/android/server/am/ContentProviderRecord;
        //     201: getfield 2063	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
        //     204: astore 9
        //     206: aload 9
        //     208: ifnull +11 -> 219
        //     211: aload 9
        //     213: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     216: ifnonnull +8 -> 224
        //     219: aload_0
        //     220: monitorexit
        //     221: goto +94 -> 315
        //     224: ldc 221
        //     226: new 598	java/lang/StringBuilder
        //     229: dup
        //     230: invokespecial 599	java/lang/StringBuilder:<init>	()V
        //     233: ldc_w 3219
        //     236: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     239: aload 9
        //     241: getfield 1119	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
        //     244: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     247: ldc_w 3640
        //     250: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     253: aload 9
        //     255: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     258: invokevirtual 774	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
        //     261: ldc_w 6898
        //     264: invokevirtual 766	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //     267: invokevirtual 778	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //     270: invokestatic 784	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //     273: pop
        //     274: invokestatic 2401	android/os/Binder:clearCallingIdentity	()J
        //     277: lstore 11
        //     279: aload_0
        //     280: aload 9
        //     282: aload 9
        //     284: getfield 1141	com/android/server/am/ProcessRecord:pid	I
        //     287: aload 9
        //     289: getfield 1112	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
        //     292: invokevirtual 3159	com/android/server/am/ActivityManagerService:appDiedLocked	(Lcom/android/server/am/ProcessRecord;ILandroid/app/IApplicationThread;)V
        //     295: lload 11
        //     297: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     300: aload_0
        //     301: monitorexit
        //     302: goto +13 -> 315
        //     305: astore 13
        //     307: lload 11
        //     309: invokestatic 2423	android/os/Binder:restoreCallingIdentity	(J)V
        //     312: aload 13
        //     314: athrow
        //     315: return
        //
        // Exception table:
        //     from	to	target	type
        //     0	6	22	java/lang/ClassCastException
        //     68	92	88	finally
        //     112	166	162	finally
        //     171	193	189	finally
        //     196	279	189	finally
        //     295	315	189	finally
        //     279	295	305	finally
    }

    public void updateConfiguration(Configuration paramConfiguration)
    {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updateConfiguration()");
        if (paramConfiguration == null);
        try
        {
            if (this.mWindowManager != null)
                paramConfiguration = this.mWindowManager.computeNewConfiguration();
            if (this.mWindowManager != null)
                this.mProcessList.applyDisplaySize(this.mWindowManager);
            long l = Binder.clearCallingIdentity();
            if (paramConfiguration != null)
                Settings.System.clearConfiguration(paramConfiguration);
            updateConfigurationLocked(paramConfiguration, null, false, false);
            Binder.restoreCallingIdentity(l);
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    @MiuiHook(MiuiHook.MiuiHookType.CHANGE_CODE)
    boolean updateConfigurationLocked(Configuration paramConfiguration, ActivityRecord paramActivityRecord, boolean paramBoolean1, boolean paramBoolean2)
    {
        boolean bool1;
        if (this.mHeadless)
            bool1 = true;
        while (true)
        {
            return bool1;
            int i = 0;
            bool1 = true;
            Configuration localConfiguration1;
            boolean bool2;
            label96: Configuration localConfiguration2;
            int j;
            label277: ProcessRecord localProcessRecord;
            if (paramConfiguration != null)
            {
                localConfiguration1 = new Configuration(this.mConfiguration);
                i = localConfiguration1.updateFrom(paramConfiguration);
                if (i != 0)
                {
                    EventLog.writeEvent(2719, i);
                    if ((paramConfiguration.locale != null) && (!paramBoolean2))
                    {
                        Locale localLocale = paramConfiguration.locale;
                        if (!paramConfiguration.locale.equals(this.mConfiguration.locale))
                        {
                            bool2 = true;
                            saveLocaleLocked(localLocale, bool2, paramConfiguration.userSetLocale);
                        }
                    }
                    else
                    {
                        this.mConfigurationSeq = (1 + this.mConfigurationSeq);
                        if (this.mConfigurationSeq <= 0)
                            this.mConfigurationSeq = 1;
                        localConfiguration1.seq = this.mConfigurationSeq;
                        this.mConfiguration = localConfiguration1;
                        Slog.i("ActivityManager", "Config changed: " + localConfiguration1);
                        localConfiguration2 = new Configuration(this.mConfiguration);
                        this.mShowDialogs = shouldShowDialogs(localConfiguration1);
                        AttributeCache localAttributeCache = AttributeCache.instance();
                        if (localAttributeCache != null)
                            localAttributeCache.updateConfiguration(localConfiguration2);
                        mSystemThread.applyConfigurationToResources(localConfiguration2);
                        if ((paramBoolean1) && (Settings.System.hasInterestingConfigurationChanges(i)))
                        {
                            Message localMessage = this.mHandler.obtainMessage(4);
                            localMessage.obj = new Configuration(localConfiguration2);
                            this.mHandler.sendMessage(localMessage);
                        }
                        j = -1 + this.mLruProcesses.size();
                        if (j < 0)
                            break label328;
                        localProcessRecord = (ProcessRecord)this.mLruProcesses.get(j);
                    }
                }
            }
            try
            {
                if (localProcessRecord.thread != null)
                    localProcessRecord.thread.scheduleConfigurationChanged(localConfiguration2);
                label316: j--;
                break label277;
                bool2 = false;
                break label96;
                label328: Intent localIntent = new Intent("android.intent.action.CONFIGURATION_CHANGED");
                localIntent.addFlags(1610612736);
                broadcastIntentLocked(null, null, localIntent, null, null, 0, null, null, null, false, false, MY_PID, 1000, 0);
                Context localContext = this.mContext;
                Handler localHandler = this.mHandler;
                MiuiThemeHelper.handleExtraConfigurationChanges(i, localConfiguration1, localContext, localHandler);
                if ((i & 0x4) != 0)
                    broadcastIntentLocked(null, null, new Intent("android.intent.action.LOCALE_CHANGED"), null, null, 0, null, null, null, false, false, MY_PID, 1000, 0);
                if ((i != 0) && (paramActivityRecord == null))
                    paramActivityRecord = this.mMainStack.topRunningActivityLocked(null);
                if (paramActivityRecord != null)
                {
                    bool1 = this.mMainStack.ensureActivityConfigurationLocked(paramActivityRecord, i);
                    this.mMainStack.ensureActivitiesVisibleLocked(paramActivityRecord, i);
                }
                if ((paramConfiguration == null) || (this.mWindowManager == null))
                    continue;
                this.mWindowManager.setNewConfiguration(this.mConfiguration);
            }
            catch (Exception localException)
            {
                break label316;
            }
        }
    }

    void updateCpuStats()
    {
        long l = SystemClock.uptimeMillis();
        if (this.mLastCpuTime.get() >= l - 5000L);
        while (true)
        {
            return;
            if (!this.mProcessStatsMutexFree.compareAndSet(true, false))
                continue;
            synchronized (this.mProcessStatsThread)
            {
                this.mProcessStatsThread.notify();
            }
        }
    }

    void updateCpuStatsNow()
    {
        long l;
        long[] arrayOfLong;
        SparseArray localSparseArray;
        synchronized (this.mProcessStatsThread)
        {
            this.mProcessStatsMutexFree.set(false);
            l = SystemClock.uptimeMillis();
            int i = 0;
            if (this.mLastCpuTime.get() < l - 5000L)
            {
                this.mLastCpuTime.set(l);
                i = 1;
                this.mProcessStats.update();
                if ("true".equals(SystemProperties.get("events.cpu")))
                {
                    int i4 = this.mProcessStats.getLastUserTime();
                    int i5 = this.mProcessStats.getLastSystemTime();
                    int i6 = this.mProcessStats.getLastIoWaitTime();
                    int i7 = this.mProcessStats.getLastIrqTime();
                    int i8 = this.mProcessStats.getLastSoftIrqTime();
                    int i9 = this.mProcessStats.getLastIdleTime() + (i8 + (i7 + (i6 + (i4 + i5))));
                    if (i9 == 0)
                        i9 = 1;
                    Object[] arrayOfObject = new Object[6];
                    arrayOfObject[0] = Integer.valueOf(100 * (i8 + (i7 + (i6 + (i4 + i5)))) / i9);
                    arrayOfObject[1] = Integer.valueOf(i4 * 100 / i9);
                    arrayOfObject[2] = Integer.valueOf(i5 * 100 / i9);
                    arrayOfObject[3] = Integer.valueOf(i6 * 100 / i9);
                    arrayOfObject[4] = Integer.valueOf(i7 * 100 / i9);
                    arrayOfObject[5] = Integer.valueOf(i8 * 100 / i9);
                    EventLog.writeEvent(2721, arrayOfObject);
                }
            }
            arrayOfLong = this.mProcessStats.getLastCpuSpeedTimes();
            synchronized (this.mBatteryStatsService.getActiveStatistics())
            {
                localSparseArray = this.mPidsSelfLocked;
                if (i == 0);
            }
        }
        while (true)
        {
            int i1;
            try
            {
                if (this.mOnBattery)
                {
                    j = ???.startAddingCpuLocked();
                    k = 0;
                    m = 0;
                    int n = this.mProcessStats.countStats();
                    i1 = 0;
                    if (i1 < n)
                    {
                        localStats = this.mProcessStats.getStats(i1);
                        if (!localStats.working)
                            continue;
                        ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(localStats.pid);
                        i2 = j * localStats.rel_utime / 100;
                        i3 = j * localStats.rel_stime / 100;
                        k += i2;
                        m += i3;
                        if (localProcessRecord != null)
                        {
                            BatteryStatsImpl.Uid.Proc localProc2 = localProcessRecord.batteryStats;
                            localProc2.addCpuTimeLocked(localStats.rel_utime - i2, localStats.rel_stime - i3);
                            localProc2.addSpeedStepTimes(arrayOfLong);
                            localProcessRecord.curCpuTime += 10 * (localStats.rel_utime + localStats.rel_stime);
                        }
                    }
                }
            }
            finally
            {
                int j;
                int k;
                int m;
                ProcessStats.Stats localStats;
                int i2;
                int i3;
                throw localObject3;
                localObject2 = finally;
                throw localObject2;
                localObject1 = finally;
                throw localObject1;
                BatteryStatsImpl.Uid.Proc localProc1 = ???.getProcessStatsLocked(localStats.name, localStats.pid);
                if (localProc1 != null)
                {
                    localProc1.addCpuTimeLocked(localStats.rel_utime - i2, localStats.rel_stime - i3);
                    localProc1.addSpeedStepTimes(arrayOfLong);
                    continue;
                    ???.finishAddingCpuLocked(j, k, m, arrayOfLong);
                    if (this.mLastWriteTime < l - 1800000L)
                    {
                        this.mLastWriteTime = l;
                        this.mBatteryStatsService.getActiveStatistics().writeAsyncLocked();
                    }
                }
            }
        }
    }

    final void updateLruProcessLocked(ProcessRecord paramProcessRecord, boolean paramBoolean1, boolean paramBoolean2)
    {
        this.mLruSeq = (1 + this.mLruSeq);
        updateLruProcessInternalLocked(paramProcessRecord, paramBoolean1, paramBoolean2, 0);
    }

    final void updateOomAdjLocked()
    {
        ActivityRecord localActivityRecord = resumedAppLocked();
        if (localActivityRecord != null);
        int m;
        int n;
        for (ProcessRecord localProcessRecord1 = localActivityRecord.app; ; localProcessRecord1 = null)
        {
            this.mAdjSeq = (1 + this.mAdjSeq);
            this.mNewNumServiceProcs = 0;
            int i = 1 + (15 - ProcessList.HIDDEN_APP_MIN_ADJ);
            int j = (-4 + this.mLruProcesses.size()) / i;
            if (j < 1)
                j = 1;
            int k = 0;
            m = 0;
            n = 0;
            int i1 = this.mLruProcesses.size();
            int i2 = ProcessList.HIDDEN_APP_MIN_ADJ;
            while (i1 > 0)
            {
                i1--;
                ProcessRecord localProcessRecord4 = (ProcessRecord)this.mLruProcesses.get(i1);
                updateOomAdjLocked(localProcessRecord4, i2, localProcessRecord1, true);
                if ((i2 < 15) && (localProcessRecord4.curAdj == i2))
                {
                    k++;
                    if (k >= j)
                    {
                        k = 0;
                        i2++;
                    }
                }
                if (!localProcessRecord4.killedBackground)
                {
                    if (localProcessRecord4.curAdj >= ProcessList.HIDDEN_APP_MIN_ADJ)
                    {
                        m++;
                        if (m > this.mProcessLimit)
                        {
                            Slog.i("ActivityManager", "No longer want " + localProcessRecord4.processName + " (pid " + localProcessRecord4.pid + "): hidden #" + m);
                            Object[] arrayOfObject2 = new Object[4];
                            arrayOfObject2[0] = Integer.valueOf(localProcessRecord4.pid);
                            arrayOfObject2[1] = localProcessRecord4.processName;
                            arrayOfObject2[2] = Integer.valueOf(localProcessRecord4.setAdj);
                            arrayOfObject2[3] = "too many background";
                            EventLog.writeEvent(30023, arrayOfObject2);
                            localProcessRecord4.killedBackground = true;
                            Process.killProcessQuiet(localProcessRecord4.pid);
                        }
                    }
                    if ((!localProcessRecord4.killedBackground) && (localProcessRecord4.isolated) && (localProcessRecord4.services.size() <= 0))
                    {
                        Slog.i("ActivityManager", "Isolated process " + localProcessRecord4.processName + " (pid " + localProcessRecord4.pid + ") no longer needed");
                        Object[] arrayOfObject1 = new Object[4];
                        arrayOfObject1[0] = Integer.valueOf(localProcessRecord4.pid);
                        arrayOfObject1[1] = localProcessRecord4.processName;
                        arrayOfObject1[2] = Integer.valueOf(localProcessRecord4.setAdj);
                        arrayOfObject1[3] = "isolated not needed";
                        EventLog.writeEvent(30023, arrayOfObject1);
                        localProcessRecord4.killedBackground = true;
                        Process.killProcessQuiet(localProcessRecord4.pid);
                    }
                    if ((localProcessRecord4.nonStoppingAdj >= 6) && (localProcessRecord4.nonStoppingAdj != 8) && (!localProcessRecord4.killedBackground))
                        n++;
                }
            }
        }
        this.mNumServiceProcs = this.mNewNumServiceProcs;
        int i5;
        int i6;
        int i8;
        int i9;
        if (m <= 7)
        {
            i5 = this.mLruProcesses.size();
            i6 = n / 3;
            int i7 = 2;
            if (this.mHomeProcess != null)
                i7++;
            if (this.mPreviousProcess != null)
                i7++;
            if (i6 < i7)
                i6 = i7;
            i8 = 0;
            if (m <= 3)
                i9 = 15;
        }
        while (true)
        {
            int i10 = 80;
            int i11 = 0;
            label574: ProcessRecord localProcessRecord3;
            if (i11 < i5)
            {
                localProcessRecord3 = (ProcessRecord)this.mLruProcesses.get(i11);
                if ((localProcessRecord3.nonStoppingAdj >= 6) && (localProcessRecord3.nonStoppingAdj != 8) && (!localProcessRecord3.killedBackground) && ((localProcessRecord3.trimMemoryLevel >= i10) || (localProcessRecord3.thread == null)));
            }
            try
            {
                localProcessRecord3.thread.scheduleTrimMemory(i10);
                label653: localProcessRecord3.trimMemoryLevel = i10;
                i8++;
                if (i8 >= i6)
                {
                    i8 = 0;
                    switch (i10)
                    {
                    default:
                    case 80:
                    case 60:
                    }
                }
                while (true)
                {
                    i11++;
                    break label574;
                    if (m <= 5)
                    {
                        i9 = 10;
                        break;
                    }
                    i9 = 5;
                    break;
                    i10 = 60;
                    continue;
                    i10 = 40;
                    continue;
                    if ((localProcessRecord3.nonStoppingAdj != 3) || ((localProcessRecord3.trimMemoryLevel < 40) && (localProcessRecord3.thread != null)));
                    try
                    {
                        localProcessRecord3.thread.scheduleTrimMemory(40);
                        label778: localProcessRecord3.trimMemoryLevel = 40;
                        continue;
                        if (((localProcessRecord3.nonStoppingAdj <= 1) && (!localProcessRecord3.systemNoUi)) || (!localProcessRecord3.pendingUiClean) || ((localProcessRecord3.trimMemoryLevel < 20) && (localProcessRecord3.thread != null)));
                        try
                        {
                            localProcessRecord3.thread.scheduleTrimMemory(20);
                            label843: localProcessRecord3.pendingUiClean = false;
                            if ((localProcessRecord3.trimMemoryLevel < i9) && (localProcessRecord3.thread != null));
                            try
                            {
                                localProcessRecord3.thread.scheduleTrimMemory(i9);
                                label879: localProcessRecord3.trimMemoryLevel = i9;
                                continue;
                                int i3 = this.mLruProcesses.size();
                                int i4 = 0;
                                while (true)
                                {
                                    ProcessRecord localProcessRecord2;
                                    if (i4 < i3)
                                    {
                                        localProcessRecord2 = (ProcessRecord)this.mLruProcesses.get(i4);
                                        if (((localProcessRecord2.nonStoppingAdj > 1) || (localProcessRecord2.systemNoUi)) && (localProcessRecord2.pendingUiClean) && ((localProcessRecord2.trimMemoryLevel >= 20) || (localProcessRecord2.thread == null)));
                                    }
                                    try
                                    {
                                        localProcessRecord2.thread.scheduleTrimMemory(20);
                                        label977: localProcessRecord2.pendingUiClean = false;
                                        localProcessRecord2.trimMemoryLevel = 0;
                                        i4++;
                                        continue;
                                        if (this.mAlwaysFinishActivities)
                                            this.mMainStack.scheduleDestroyActivities(null, false, "always-finish");
                                        return;
                                    }
                                    catch (RemoteException localRemoteException1)
                                    {
                                        break label977;
                                    }
                                }
                            }
                            catch (RemoteException localRemoteException2)
                            {
                                break label879;
                            }
                        }
                        catch (RemoteException localRemoteException3)
                        {
                            break label843;
                        }
                    }
                    catch (RemoteException localRemoteException4)
                    {
                        break label778;
                    }
                }
            }
            catch (RemoteException localRemoteException5)
            {
                break label653;
            }
        }
    }

    public void updatePersistentConfiguration(Configuration paramConfiguration)
    {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updateConfiguration()");
        enforceCallingPermission("android.permission.WRITE_SETTINGS", "updateConfiguration()");
        if (paramConfiguration == null)
            throw new NullPointerException("Configuration must not be null");
        try
        {
            long l = Binder.clearCallingIdentity();
            updateConfigurationLocked(paramConfiguration, null, true, false);
            Binder.restoreCallingIdentity(l);
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    public void updateServiceForegroundLocked(ProcessRecord paramProcessRecord, boolean paramBoolean)
    {
        boolean bool = false;
        Iterator localIterator = paramProcessRecord.services.iterator();
        while (localIterator.hasNext())
            if (((ServiceRecord)localIterator.next()).isForeground)
                bool = true;
        if (bool != paramProcessRecord.foregroundServices)
        {
            paramProcessRecord.foregroundServices = bool;
            if (paramBoolean)
                updateOomAdjLocked();
        }
    }

    void updateUsageStats(ActivityRecord paramActivityRecord, boolean paramBoolean)
    {
        if (paramBoolean)
            this.mUsageStatsService.noteResumeComponent(paramActivityRecord.realActivity);
        while (true)
        {
            return;
            this.mUsageStatsService.notePauseComponent(paramActivityRecord.realActivity);
        }
    }

    final Intent verifyBroadcastLocked(Intent paramIntent)
    {
        if ((paramIntent != null) && (paramIntent.hasFileDescriptors() == true))
            throw new IllegalArgumentException("File descriptors passed in Intent");
        int i = paramIntent.getFlags();
        if (!this.mProcessesReady)
        {
            if ((0x8000000 & i) == 0)
                break label81;
            Intent localIntent = new Intent(paramIntent);
            localIntent.addFlags(1073741824);
            paramIntent = localIntent;
        }
        while ((0x4000000 & i) != 0)
        {
            throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
            label81: if ((i & 0x40000000) == 0)
            {
                Slog.e("ActivityManager", "Attempt to launch receivers of broadcast intent " + paramIntent + " before boot completion");
                throw new IllegalStateException("Cannot broadcast before boot completed");
            }
        }
        return paramIntent;
    }

    public void wakingUp()
    {
        if (checkCallingPermission("android.permission.DEVICE_POWER") != 0)
            throw new SecurityException("Requires permission android.permission.DEVICE_POWER");
        try
        {
            this.mWentToSleep = false;
            updateEventDispatchingLocked();
            comeOutOfSleepIfNeededLocked();
            return;
        }
        finally
        {
            localObject = finally;
            throw localObject;
        }
    }

    // ERROR //
    public boolean willActivityBeVisible(IBinder paramIBinder)
    {
        // Byte code:
        //     0: iconst_1
        //     1: istore_2
        //     2: aload_0
        //     3: monitorenter
        //     4: bipush 255
        //     6: aload_0
        //     7: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     10: getfield 2934	com/android/server/am/ActivityStack:mHistory	Ljava/util/ArrayList;
        //     13: invokevirtual 1313	java/util/ArrayList:size	()I
        //     16: iadd
        //     17: istore 4
        //     19: iload 4
        //     21: iflt +68 -> 89
        //     24: aload_0
        //     25: getfield 1282	com/android/server/am/ActivityManagerService:mMainStack	Lcom/android/server/am/ActivityStack;
        //     28: getfield 2934	com/android/server/am/ActivityStack:mHistory	Ljava/util/ArrayList;
        //     31: iload 4
        //     33: invokevirtual 1314	java/util/ArrayList:get	(I)Ljava/lang/Object;
        //     36: checkcast 1290	com/android/server/am/ActivityRecord
        //     39: astore 5
        //     41: aload 5
        //     43: getfield 2587	com/android/server/am/ActivityRecord:appToken	Landroid/view/IApplicationToken$Stub;
        //     46: aload_1
        //     47: if_acmpne +8 -> 55
        //     50: aload_0
        //     51: monitorexit
        //     52: goto +39 -> 91
        //     55: aload 5
        //     57: getfield 7072	com/android/server/am/ActivityRecord:fullscreen	Z
        //     60: ifeq +23 -> 83
        //     63: aload 5
        //     65: getfield 3023	com/android/server/am/ActivityRecord:finishing	Z
        //     68: ifne +15 -> 83
        //     71: iconst_0
        //     72: istore_2
        //     73: aload_0
        //     74: monitorexit
        //     75: goto +16 -> 91
        //     78: astore_3
        //     79: aload_0
        //     80: monitorexit
        //     81: aload_3
        //     82: athrow
        //     83: iinc 4 255
        //     86: goto -67 -> 19
        //     89: aload_0
        //     90: monitorexit
        //     91: iload_2
        //     92: ireturn
        //
        // Exception table:
        //     from	to	target	type
        //     4	81	78	finally
        //     89	91	78	finally
    }

    static class ServiceMap
    {
        private final SparseArray<HashMap<Intent.FilterComparison, ServiceRecord>> mServicesByIntentPerUser = new SparseArray();
        private final SparseArray<HashMap<ComponentName, ServiceRecord>> mServicesByNamePerUser = new SparseArray();

        private HashMap<ComponentName, ServiceRecord> getServices(int paramInt)
        {
            HashMap localHashMap = (HashMap)this.mServicesByNamePerUser.get(paramInt);
            if (localHashMap == null)
            {
                localHashMap = new HashMap();
                this.mServicesByNamePerUser.put(paramInt, localHashMap);
            }
            return localHashMap;
        }

        private HashMap<Intent.FilterComparison, ServiceRecord> getServicesByIntent(int paramInt)
        {
            HashMap localHashMap = (HashMap)this.mServicesByIntentPerUser.get(paramInt);
            if (localHashMap == null)
            {
                localHashMap = new HashMap();
                this.mServicesByIntentPerUser.put(paramInt, localHashMap);
            }
            return localHashMap;
        }

        Collection<ServiceRecord> getAllServices(int paramInt)
        {
            return getServices(paramInt).values();
        }

        ServiceRecord getServiceByIntent(Intent.FilterComparison paramFilterComparison)
        {
            return getServiceByIntent(paramFilterComparison, -1);
        }

        ServiceRecord getServiceByIntent(Intent.FilterComparison paramFilterComparison, int paramInt)
        {
            return (ServiceRecord)getServicesByIntent(paramInt).get(paramFilterComparison);
        }

        ServiceRecord getServiceByName(ComponentName paramComponentName)
        {
            return getServiceByName(paramComponentName, -1);
        }

        ServiceRecord getServiceByName(ComponentName paramComponentName, int paramInt)
        {
            return (ServiceRecord)getServices(paramInt).get(paramComponentName);
        }

        void putServiceByIntent(Intent.FilterComparison paramFilterComparison, int paramInt, ServiceRecord paramServiceRecord)
        {
            getServicesByIntent(paramInt).put(paramFilterComparison, paramServiceRecord);
        }

        void putServiceByName(ComponentName paramComponentName, int paramInt, ServiceRecord paramServiceRecord)
        {
            getServices(paramInt).put(paramComponentName, paramServiceRecord);
        }

        void removeServiceByIntent(Intent.FilterComparison paramFilterComparison, int paramInt)
        {
            ((ServiceRecord)getServicesByIntent(paramInt).remove(paramFilterComparison));
        }

        void removeServiceByName(ComponentName paramComponentName, int paramInt)
        {
            ((ServiceRecord)getServices(paramInt).remove(paramComponentName));
        }
    }

    private class ServiceRestarter
        implements Runnable
    {
        private ServiceRecord mService;

        private ServiceRestarter()
        {
        }

        public void run()
        {
            synchronized (ActivityManagerService.this)
            {
                ActivityManagerService.this.performServiceRestartLocked(this.mService);
                return;
            }
        }

        void setService(ServiceRecord paramServiceRecord)
        {
            this.mService = paramServiceRecord;
        }
    }

    private final class ServiceLookupResult
    {
        final String permission;
        final ServiceRecord record;

        ServiceLookupResult(ServiceRecord paramString, String arg3)
        {
            this.record = paramString;
            Object localObject;
            this.permission = localObject;
        }
    }

    static final class MemItem
    {
        final int id;
        final String label;
        final long pss;
        final String shortLabel;
        ArrayList<MemItem> subitems;

        public MemItem(String paramString1, String paramString2, long paramLong, int paramInt)
        {
            this.label = paramString1;
            this.shortLabel = paramString2;
            this.pss = paramLong;
            this.id = paramInt;
        }
    }

    static class ItemMatcher
    {
        boolean all = true;
        ArrayList<ComponentName> components;
        ArrayList<Integer> objects;
        ArrayList<String> strings;

        int build(String[] paramArrayOfString, int paramInt)
        {
            while (true)
            {
                String str;
                if (paramInt < paramArrayOfString.length)
                {
                    str = paramArrayOfString[paramInt];
                    if ("--".equals(str))
                        paramInt++;
                }
                else
                {
                    return paramInt;
                }
                build(str);
                paramInt++;
            }
        }

        void build(String paramString)
        {
            ComponentName localComponentName = ComponentName.unflattenFromString(paramString);
            if (localComponentName != null)
            {
                if (this.components == null)
                    this.components = new ArrayList();
                this.components.add(localComponentName);
                this.all = false;
            }
            while (true)
            {
                return;
                try
                {
                    int i = Integer.parseInt(paramString, 16);
                    if (this.objects == null)
                        this.objects = new ArrayList();
                    this.objects.add(Integer.valueOf(i));
                    this.all = false;
                }
                catch (RuntimeException localRuntimeException)
                {
                    if (this.strings == null)
                        this.strings = new ArrayList();
                    this.strings.add(paramString);
                    this.all = false;
                }
            }
        }

        boolean match(Object paramObject, ComponentName paramComponentName)
        {
            boolean bool;
            if (this.all)
                bool = true;
            while (true)
            {
                return bool;
                if (this.components != null)
                    for (int k = 0; ; k++)
                    {
                        if (k >= this.components.size())
                            break label63;
                        if (((ComponentName)this.components.get(k)).equals(paramComponentName))
                        {
                            bool = true;
                            break;
                        }
                    }
                label63: if (this.objects != null)
                    for (int j = 0; ; j++)
                    {
                        if (j >= this.objects.size())
                            break label118;
                        if (System.identityHashCode(paramObject) == ((Integer)this.objects.get(j)).intValue())
                        {
                            bool = true;
                            break;
                        }
                    }
                label118: if (this.strings != null)
                {
                    String str = paramComponentName.flattenToString();
                    for (int i = 0; ; i++)
                    {
                        if (i >= this.strings.size())
                            break label177;
                        if (str.contains((CharSequence)this.strings.get(i)))
                        {
                            bool = true;
                            break;
                        }
                    }
                }
                label177: bool = false;
            }
        }
    }

    static class NeededUriGrants extends ArrayList<Uri>
    {
        final int flags;
        final String targetPkg;
        final int targetUid;

        NeededUriGrants(String paramString, int paramInt1, int paramInt2)
        {
            this.targetPkg = paramString;
            this.targetUid = paramInt1;
            this.flags = paramInt2;
        }
    }

    static class PermissionController extends IPermissionController.Stub
    {
        ActivityManagerService mActivityManagerService;

        PermissionController(ActivityManagerService paramActivityManagerService)
        {
            this.mActivityManagerService = paramActivityManagerService;
        }

        public boolean checkPermission(String paramString, int paramInt1, int paramInt2)
        {
            if (this.mActivityManagerService.checkPermission(paramString, paramInt1, paramInt2) == 0);
            for (boolean bool = true; ; bool = false)
                return bool;
        }
    }

    static class CpuBinder extends Binder
    {
        ActivityManagerService mActivityManagerService;

        CpuBinder(ActivityManagerService paramActivityManagerService)
        {
            this.mActivityManagerService = paramActivityManagerService;
        }

        protected void dump(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
        {
            if (this.mActivityManagerService.checkCallingPermission("android.permission.DUMP") != 0)
                paramPrintWriter.println("Permission Denial: can't dump cpuinfo from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " without permission " + "android.permission.DUMP");
            while (true)
            {
                return;
                synchronized (this.mActivityManagerService.mProcessStatsThread)
                {
                    paramPrintWriter.print(this.mActivityManagerService.mProcessStats.printCurrentLoad());
                    paramPrintWriter.print(this.mActivityManagerService.mProcessStats.printCurrentState(SystemClock.uptimeMillis()));
                }
            }
        }
    }

    static class DbBinder extends Binder
    {
        ActivityManagerService mActivityManagerService;

        DbBinder(ActivityManagerService paramActivityManagerService)
        {
            this.mActivityManagerService = paramActivityManagerService;
        }

        protected void dump(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
        {
            if (this.mActivityManagerService.checkCallingPermission("android.permission.DUMP") != 0)
                paramPrintWriter.println("Permission Denial: can't dump dbinfo from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " without permission " + "android.permission.DUMP");
            while (true)
            {
                return;
                this.mActivityManagerService.dumpDbInfo(paramFileDescriptor, paramPrintWriter, paramArrayOfString);
            }
        }
    }

    static class GraphicsBinder extends Binder
    {
        ActivityManagerService mActivityManagerService;

        GraphicsBinder(ActivityManagerService paramActivityManagerService)
        {
            this.mActivityManagerService = paramActivityManagerService;
        }

        protected void dump(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
        {
            if (this.mActivityManagerService.checkCallingPermission("android.permission.DUMP") != 0)
                paramPrintWriter.println("Permission Denial: can't dump gfxinfo from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " without permission " + "android.permission.DUMP");
            while (true)
            {
                return;
                this.mActivityManagerService.dumpGraphicsHardwareUsage(paramFileDescriptor, paramPrintWriter, paramArrayOfString);
            }
        }
    }

    static class MemBinder extends Binder
    {
        ActivityManagerService mActivityManagerService;

        MemBinder(ActivityManagerService paramActivityManagerService)
        {
            this.mActivityManagerService = paramActivityManagerService;
        }

        protected void dump(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
        {
            if (this.mActivityManagerService.checkCallingPermission("android.permission.DUMP") != 0)
                paramPrintWriter.println("Permission Denial: can't dump meminfo from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " without permission " + "android.permission.DUMP");
            while (true)
            {
                return;
                this.mActivityManagerService.dumpApplicationMemoryUsage(paramFileDescriptor, paramPrintWriter, "    ", paramArrayOfString, false, null, null, null);
            }
        }
    }

    static class AThread extends Thread
    {
        boolean mReady = false;
        ActivityManagerService mService;

        public AThread()
        {
            super();
        }

        // ERROR //
        public void run()
        {
            // Byte code:
            //     0: invokestatic 28	android/os/Looper:prepare	()V
            //     3: bipush 254
            //     5: invokestatic 34	android/os/Process:setThreadPriority	(I)V
            //     8: iconst_0
            //     9: invokestatic 38	android/os/Process:setCanSelfBackground	(Z)V
            //     12: new 6	com/android/server/am/ActivityManagerService
            //     15: dup
            //     16: aconst_null
            //     17: invokespecial 41	com/android/server/am/ActivityManagerService:<init>	(Lcom/android/server/am/ActivityManagerService$1;)V
            //     20: astore_1
            //     21: aload_0
            //     22: monitorenter
            //     23: aload_0
            //     24: aload_1
            //     25: putfield 43	com/android/server/am/ActivityManagerService$AThread:mService	Lcom/android/server/am/ActivityManagerService;
            //     28: aload_0
            //     29: invokevirtual 48	java/lang/Object:notifyAll	()V
            //     32: aload_0
            //     33: monitorexit
            //     34: aload_0
            //     35: monitorenter
            //     36: aload_0
            //     37: getfield 20	com/android/server/am/ActivityManagerService$AThread:mReady	Z
            //     40: istore 4
            //     42: iload 4
            //     44: ifne +20 -> 64
            //     47: aload_0
            //     48: invokevirtual 51	java/lang/Object:wait	()V
            //     51: goto -15 -> 36
            //     54: astore 6
            //     56: goto -20 -> 36
            //     59: astore_2
            //     60: aload_0
            //     61: monitorexit
            //     62: aload_2
            //     63: athrow
            //     64: aload_0
            //     65: monitorexit
            //     66: invokestatic 57	android/os/StrictMode:conditionallyEnableDebugLogging	()Z
            //     69: ifeq +11 -> 80
            //     72: ldc 15
            //     74: ldc 59
            //     76: invokestatic 65	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
            //     79: pop
            //     80: invokestatic 68	android/os/Looper:loop	()V
            //     83: return
            //     84: astore_3
            //     85: aload_0
            //     86: monitorexit
            //     87: aload_3
            //     88: athrow
            //
            // Exception table:
            //     from	to	target	type
            //     47	51	54	java/lang/InterruptedException
            //     23	34	59	finally
            //     60	62	59	finally
            //     36	42	84	finally
            //     47	51	84	finally
            //     64	66	84	finally
            //     85	87	84	finally
        }
    }

    private final class AppDeathRecipient
        implements IBinder.DeathRecipient
    {
        final ProcessRecord mApp;
        final IApplicationThread mAppThread;
        final int mPid;

        AppDeathRecipient(ProcessRecord paramInt, int paramIApplicationThread, IApplicationThread arg4)
        {
            this.mApp = paramInt;
            this.mPid = paramIApplicationThread;
            Object localObject;
            this.mAppThread = localObject;
        }

        public void binderDied()
        {
            synchronized (ActivityManagerService.this)
            {
                ActivityManagerService.this.appDiedLocked(this.mApp, this.mPid, this.mAppThread);
                return;
            }
        }
    }

    static class ProcessChangeItem
    {
        static final int CHANGE_ACTIVITIES = 1;
        static final int CHANGE_IMPORTANCE = 2;
        int changes;
        boolean foregroundActivities;
        int importance;
        int pid;
        int uid;
    }

    private class Identity
    {
        public int pid;
        public int uid;

        Identity(int paramInt1, int arg3)
        {
            this.pid = paramInt1;
            int i;
            this.uid = i;
        }
    }

    abstract class ForegroundToken
        implements IBinder.DeathRecipient
    {
        int pid;
        IBinder token;

        ForegroundToken()
        {
        }
    }

    static class PendingActivityLaunch
    {
        ActivityRecord r;
        ActivityRecord sourceRecord;
        int startFlags;
    }

    @MiuiHook(MiuiHook.MiuiHookType.NEW_CLASS)
    static class Injector
    {
        static String getCallingUidPackage(ActivityManagerService paramActivityManagerService, IBinder paramIBinder)
        {
            String str = null;
            ActivityRecord localActivityRecord = paramActivityManagerService.mMainStack.isInStackLocked(paramIBinder);
            if (localActivityRecord == null);
            while (true)
            {
                return str;
                int i = localActivityRecord.launchedFromUid;
                if (i > 0)
                    try
                    {
                        String[] arrayOfString = AppGlobals.getPackageManager().getPackagesForUid(i);
                        if (arrayOfString.length > 0)
                            str = arrayOfString[0];
                    }
                    catch (RemoteException localRemoteException)
                    {
                    }
            }
        }

        static boolean isForegroudApp(ActivityManagerService paramActivityManagerService, ProcessRecord paramProcessRecord1, ProcessRecord paramProcessRecord2)
        {
            int i = 1;
            if ((paramProcessRecord1 == paramProcessRecord2) || ((paramProcessRecord1 == paramActivityManagerService.mHomeProcess) && (Settings.System.getInt(paramActivityManagerService.mContext.getContentResolver(), "keep_launcher_in_memory", i) != 0)));
            while (true)
            {
                return i;
                int j = 0;
            }
        }

        static boolean showAppCrashDialog(ActivityManagerService paramActivityManagerService, HashMap paramHashMap)
        {
            ProcessRecord localProcessRecord = (ProcessRecord)paramHashMap.get("app");
            AppErrorResult localAppErrorResult = (AppErrorResult)paramHashMap.get("result");
            ApplicationErrorReport.CrashInfo localCrashInfo = (ApplicationErrorReport.CrashInfo)paramHashMap.get("crash");
            if (ExtraSettings.Secure.isForceCloseDialogEnabled(paramActivityManagerService.mContext))
            {
                AppErrorDialog localAppErrorDialog = new AppErrorDialog(paramActivityManagerService.mContext, localAppErrorResult, localProcessRecord, localCrashInfo);
                localAppErrorDialog.show();
                localProcessRecord.crashDialog = localAppErrorDialog;
            }
            while (true)
            {
                return true;
                if ((localProcessRecord != null) && (localCrashInfo != null))
                    MiuiErrorReport.sendFcErrorReport(paramActivityManagerService.mContext, localProcessRecord, localCrashInfo, false);
                paramActivityManagerService.mMainStack.moveHomeToFrontLocked();
                localAppErrorResult.set(0);
            }
        }
    }
}

/* Location:                     /home/lithium/miui/chameleon/2.11.16/services_dex2jar.jar
 * Qualified Name:         com.android.server.am.ActivityManagerService
 * JD-Core Version:        0.6.2
 */