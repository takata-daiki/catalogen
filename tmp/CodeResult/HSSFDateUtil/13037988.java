/*
 * ============================================================
 * [ SYSTEM ]		: Web::Java ?? ( HOBOKEN )
 * [ PROJECT ]		: HOBOKEN Project
 * 
 * $Id: SpreadUtil.java 1098 2009-07-29 10:15:28Z mezawa_takuji $
 * ============================================================
 */

package prj.hoboken.patrasche.service.poi;

import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.Map;
import java.util.SortedMap;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;

import prj.hoboken.patrasche.Shared;
import prj.hoboken.patrasche.service.poi.config.ColorContents;
import prj.hoboken.patrasche.service.poi.config.SpreadWorksheetImpl;
import prj.hoboken.patrasche.util.SvoUtil;

/**
 * ????????????????????????????
 * 
 * ?????????????????????????????????????????
 * 
 * NOTE:<br>
 * <blockquote></blockquote>
 * 
 * <p>$Revision: 1098 $<br>$Date: 2009-07-29 19:15:28 +0900 (?, 29 7 2009) $</p>
 *
 * @since  J2SDK 1.4 : Servlet2.3/JSP1.2 : Apache Struts 1.2 : SpringFramework 1.2
 * @since  POI 3.0.1 (final 20070705)
 * @since  Patrasche 3.0
 * 
 * @author
 *     Mezawa Takuji  ( HOBOKEN Project )<br>
 *     <!-- *???*  ( CompanyName )<br> -->
 */
public final class SpreadUtil {
    
    /* ???????????????????????????? */
    private SpreadUtil() {
        super();
    }
    
    /**
     * ??????????????????????????????????? SpreadData ???????????????
     * ????????????????????????? ????? IOException ?????????<p>
     * 
     * ????????????????????????????????????
     * 
     * @see #getSpreadData(InputStream, String[])
     * 
     * @param stream ????????????????????
     * @param number ?????
     * @return ????????????????????????? SpreadData ???????
     * @throws IOException ????????????????????
     */
    public static SpreadData getSpreadData(InputStream stream, int[] number) throws IOException {
        HSSFWorkbook hssfbook = new HSSFWorkbook(new POIFSFileSystem(stream));
        SpreadData spreadData = new SpreadData(hssfbook);
        for (int ix=0, len=number.length; ix<len; ix++) {
            spreadData.setWorksheet(number[ix], new SpreadWorksheetImpl(hssfbook.getSheetAt(number[ix])));
        }
        return spreadData;
    }
    
    /**
     * ?????????????????????????????????? SpreadData ???????????????
     * ????????????????????????? ????? IOException ?????????<p>
     * 
     * ???????????????????????????????????
     * 
     * @see #getSpreadData(InputStream, int[])
     * 
     * @param stream ????????????????????
     * @param name ????
     * @return ????????????????????????? SpreadData ???????
     * @throws IOException ????????????????????
     */
    public static SpreadData getSpreadData(InputStream stream, String[] name) throws IOException {
        HSSFWorkbook hssfbook = new HSSFWorkbook(new POIFSFileSystem(stream));
        SpreadData spreadData = new SpreadData(hssfbook);
        for (int ix=0, len=name.length; ix<len; ix++) {
            spreadData.setWorksheet(name[ix], new SpreadWorksheetImpl(hssfbook.getSheet(name[ix])));
        }
        return spreadData;
    }
    
    /**
     * ???????????????????????? SpreadData ???????????????
     * 
     * ???????????????????????????????????????????????????????????
     * ?????POI????????????????????????????????????????????????????
     * ?????
     * 
     * @param name ????
     * @return ????????????????? SpreadData ???????
     */
    public static SpreadData createSpreadData(String[] name) {
        HSSFWorkbook hssfbook = new HSSFWorkbook();
        SpreadData spreadData = new SpreadData(hssfbook);
        for (int ix=0, len=name.length; ix<len; ix++) {
            spreadData.setWorksheet(name[ix], new SpreadWorksheetImpl(hssfbook.createSheet(name[ix])));
        }
        return spreadData;
    }
    
    /**
     * ??????????????????short ?????????
     * <pre>
     *   ( 2560 * ??????? ) / 70
     * </pre>
     * ????2560 = 70 pixel ???????????<p>
     * 
     * ??????????????????????????
     * 
     * @param pixel ?????????
     * @return ?????? short ???
     */
    public static short calcPixelToSize(int pixel) {
        return (short)((2560 * pixel) / 70);
    }
    
    /**
     * ??????????????????short ?????????
     * <pre>
     *   ??????? * 20
     * </pre>
     * ????20 = 1 point ???????????<p>
     * 
     * ???????????????????????????????????
     * 
     * @param point ?????????
     * @return ?????? short ???
     */
    public static short calcPointToSize(int point) {
        return (short)(point * 20);
    }
    
    /**
     * EXCEL???????????Web??????RGB?????????????????
     * ??????????? # ????? RGB ?????
     * 
     * @param color POI??? ( HSSFColor ? )
     * @return ???? RGB ?? ( ??? )
     */
    public static String getRGBColor(HSSFColor color) {
        StringBuffer rgb = new StringBuffer("");
        
        if (SvoUtil.isUseObject(color)) {
            for (int ix=0; ix<3; ix++) {
                String work = ZERO+Integer.toHexString(color.getTriplet()[ix]);
                rgb.append(work.substring(work.length() - 2));
            }
        }
        
        return rgb.toString();
    }
    
    /**
     * POI???????????????POI???????????????????????????
     * 
     * @param index ???????? ( short ? )
     * @return ????POI??? ( HSSFColor ? )
     */
    public static HSSFColor getPOIColor(short index) {
        return ColorContents.getInstance().getColorFromIndex(index);
    }
    
    /**
     * Web ?????????? POI ????????? ( short ? ) ??????
     * Web ???????????????????????????
     * <pre>
     *   ?#rgb ????? rbg ??
     *   ?#rrggbb ????? rrggbb ??
     *   ?????????????????????
     * </pre>
     * POI ??????????????????????????????????????????? Web ?????????
     * ??????????????????? short ???????????
     * 
     * @param rgbHex Web????????
     * @return POI????????? ( short ? )
     */
    public static short getColorIndexFromWebColor(String rgbHex) {
        /*
         * ??Web???????????? # ?????????
         */
        String hexColor = "";
        if (rgbHex.startsWith(Shared.SHARP)) {
            hexColor = StringUtils.mid(rgbHex, 1, rgbHex.length());
        } else {
            hexColor = String.copyValueOf(rgbHex.toCharArray());
        }
        
        /*
         * ????Web?????????HSSFColor???????????????? ( RRRR:GGGG:BBBB ) ????????
         * ???????? ( 0 ) ????? ?????????????????????
         */
        StringBuffer wHex = new StringBuffer("");
        switch (hexColor.length()) {
            case 3:     // Web?????????? ( RRGGBB ?? ) ??
                String[] hexs3 = new String[] {
                    StringUtils.left(hexColor, 1), StringUtils.mid(hexColor, 1, 1), StringUtils.right(hexColor, 1)
                };
                if (hexs3[0].equals(ZERO)) {
                    wHex.append(ZERO);
                } else {
                    wHex.append(StringUtils.repeat(hexs3[0], 4));
                }
                wHex.append(Shared.COLON);
                if (hexs3[1].equals(ZERO)) {
                    wHex.append(ZERO);
                } else {
                    wHex.append(StringUtils.repeat(hexs3[1], 4));
                }
                wHex.append(Shared.COLON);
                if (hexs3[2].equals(ZERO)) {
                    wHex.append(ZERO);
                } else {
                    wHex.append(StringUtils.repeat(hexs3[2], 4));
                }
                break;
            
            case 6:     // Web?????????? ( RRGGBB ?? ) ??
                String[] hexs6 = new String[] {
                    StringUtils.left(hexColor, 2), StringUtils.mid(hexColor, 2, 2), StringUtils.right(hexColor, 2)
                };
                if (hexs6[0].equals(ZERO2)) {
                    wHex.append(ZERO);
                } else {
                    wHex.append(StringUtils.repeat(hexs6[0], 2));
                }
                wHex.append(Shared.COLON);
                if (hexs6[1].equals(ZERO2)) {
                    wHex.append(ZERO);
                } else {
                    wHex.append(StringUtils.repeat(hexs6[1], 2));
                }
                wHex.append(Shared.COLON);
                if (hexs6[2].equals(ZERO2)) {
                    wHex.append(ZERO);
                } else {
                    wHex.append(StringUtils.repeat(hexs6[2], 2));
                }
                break;
                
            default:        // ?????????????????
                wHex.append(RGB_0);
        }
        
        /*
         * Web?????????????? HSSFColor?????????????????????
         * ????? value ?? HSSFColor????????????????????
         * (*) containsValue() ????????
         */
        short index = -1;
        SortedMap colors = ColorContents.getInstance().getColorContents();
        for (Iterator ite = colors.entrySet().iterator(); ite.hasNext();) {
            Map.Entry entry = (Map.Entry)ite.next();
            String value = ((HSSFColor)entry.getValue()).getHexString();
            if ((value.equalsIgnoreCase(wHex.toString()))) {
                index = ((HSSFColor)entry.getValue()).getIndex();
                break;
            } else {
                index = HSSFColor.BLACK.index;
            }
        }
        
        return index;
    }
    
    /**
     * ??????????POI???????????????????POI?????????????????<p>
     * 
     * ( {@link HSSFCell} ???? )
     * <ul type="square">
     * <li>CELL_TYPE_NUMERIC ( = 0 )
     * <li>CELL_TYPE_STRING ( = 1 )
     * <li>CELL_TYPE_FORMULA ( = 2 )
     * <li>CELL_TYPE_BLANK ( = 3 )
     * <li>CELL_TYPE_BOOLEAN ( = 4 )
     * <li>CELL_TYPE_ERROR ( = 5 )
     * </ul>
     * 
     * @param hssfcell ?????????
     * @return POI?????????
     */
    public static int getPOICellType(HSSFCell hssfcell) {
        int cellType = hssfcell.getCellType();
        
        if (cellType == HSSFCell.CELL_TYPE_NUMERIC) {
            return cellType;
            
        } else if (cellType == HSSFCell.CELL_TYPE_STRING) {
            return cellType;
            
        } else if (cellType == HSSFCell.CELL_TYPE_FORMULA) {
            return cellType;
            
        } else if (cellType == HSSFCell.CELL_TYPE_BLANK) {
            return cellType;
            
        } else if (cellType == HSSFCell.CELL_TYPE_BOOLEAN) {
            return cellType;
            
        } else {
            // == HSSFCell.CELL_TYPE_ERROR
            return cellType;
        }
    }
    
    /**
     * ?????????????????????????????????????? <p>
     * 
     * ( {@link SpreadConstant} ???? )
     * <ul type="square">
     * <li>CELL_STYLE_INT ( = 0 )
     * <li>CELL_STYLE_DOUBLE ( = 1 )
     * <li>CELL_STYLE_DATE ( = 2 )
     * <li>CELL_STYLE_TIME ( = 3 )
     * <li>CELL_STYLE_DTM ( = 4 )
     * <li>CELL_STYLE_DATETIME ( = 5 )
     * <li>CELL_STYLE_TEXT ( = 6 )
     * </ul>
     * ???????????????????????????????????????INT??????? DOUBLE ?????<p>
     * 
     * ?????? POI ????? HSSFDateUtil.isInternalDateFormat() ???????????????
     * HSSFDateUtil.isInternalDateFormat() ????????????????????????????????????
     * ???????
     * <pre>
     *   0x0e ( 14 ), 0x0f ( 15 ), 0x10 ( 16 ), 0x11 ( 17 ), 0x12 ( 18 ), 0x13 ( 19 ), 0x14 ( 20 ), 0x15 ( 21 ), 0x16 ( 22 )
     *   0x2d ( 45 ), 0x2e ( 46 ), 0x2f ( 47 )
     * </pre>
     * ??????????????????????
     * 
     * ???<a href="http://sc.openoffice.org/excelfileformat.pdf">http://sc.openoffice.org/excelfileformat.pdf</a> ? p160,161 ???
     * ?????????????????
     * 
     * 164??????????????????HSSFDataFormat.getFormat() ?????????????????
     * y, m, d, h, s ???????????????????????????
     * 
     * @param hssfcell ??????
     * @param book ????????????????????????????????????
     * @return ???????????
     */
    public static int getSpreadCellStyle(HSSFCell hssfcell, HSSFWorkbook book) {
        HSSFCellStyle hssfstyle = hssfcell.getCellStyle();
        short format = hssfstyle.getDataFormat();
        
        if (format >= 14 && format <= 17) {
            // 14=0x0e, 17=0x11
            return SpreadConstant.CELL_STYLE_DATE;      // ??
            
        } else if ((format >= 18 && format <= 21) || (format >= 45 && format <= 47)) {
            // 18=0x12, 21=0x15, 45=0x2d, 47=0x2f
            return SpreadConstant.CELL_STYLE_TIME;      // ??
            
        } else if (format == 22) {
            // 22=0x16
            return SpreadConstant.CELL_STYLE_DTM;       // ????
            
        } else if (format == 49) {
            // 49=0x31
            return SpreadConstant.CELL_STYLE_TEXT;      // ??? ( @ ?? )
            
        } else if (HSSFDateUtil.isCellDateFormatted(hssfcell)) {
            if (hssfcell.getNumericCellValue() < 1) {
                // 1 ?? = ????
                return SpreadConstant.CELL_STYLE_TIME;
                
            } else if (Math.floor(hssfcell.getNumericCellValue()) == hssfcell.getNumericCellValue()) {
                // ????
                return SpreadConstant.CELL_STYLE_DATE;
                
            } else {
                return SpreadConstant.CELL_STYLE_DTM;
            }
            
        } else {
            // ???? = ?????????
            String fmt = book.createDataFormat().getFormat(format);
            if ((fmt.indexOf(_D_) > -1) && (fmt.indexOf(_M_) > -1) && (fmt.indexOf(_Y_) > -1) && (fmt.indexOf(_H_) > -1)) {
                return SpreadConstant.CELL_STYLE_DTM;
                
            } else if((fmt.indexOf(_D_) > -1) && (fmt.indexOf(_M_) > -1) || (fmt.indexOf(_M_) > -1) && (fmt.indexOf(_Y_) > -1)) {
                return SpreadConstant.CELL_STYLE_DATE;
                
            } else if ((fmt.indexOf(_H_) > -1) && (fmt.indexOf(_M_) > -1) || (fmt.indexOf(_M_) > -1) && (fmt.indexOf(_S_) > -1)) {
                return SpreadConstant.CELL_STYLE_TIME;
                
            } else if (Math.floor(hssfcell.getNumericCellValue()) == hssfcell.getNumericCellValue()) {
                return SpreadConstant.CELL_STYLE_INT;
                
            } else {
                return SpreadConstant.CELL_STYLE_DOUBLE;
            }
        }
    }
    
    // ------------------------------------------------------------ [ ????? ]

    private static final String ZERO = "0";
    private static final String ZERO2 = "00";
    private static final String RGB_0 = "0:0:0";
    private static final String _D_ = "d";
    private static final String _M_ = "m";
    private static final String _Y_ = "y";
    private static final String _H_ = "h";
    private static final String _S_ = "s";
}


/* Copyright (C) 2005, HOBOKEN Project, All Rights Reserved. */