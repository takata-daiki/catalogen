// $ANTLR 3.0.1 /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g 2012-07-31 11:23:52

package org.sourceopen.hadoop.hive.resources.parser.analyze.ast;


import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import org.antlr.runtime.BitSet;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.FailedPredicateException;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.Parser;
import org.antlr.runtime.ParserRuleReturnScope;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RuleReturnScope;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.runtime.tree.RewriteEarlyExitException;
import org.antlr.runtime.tree.RewriteRuleSubtreeStream;
import org.antlr.runtime.tree.RewriteRuleTokenStream;
import org.antlr.runtime.tree.TreeAdaptor;

/**
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
public class HiveParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "TOK_INSERT", "TOK_QUERY", "TOK_SELECT", "TOK_SELECTDI", "TOK_SELEXPR", "TOK_FROM", "TOK_TAB", "TOK_PARTSPEC", "TOK_PARTVAL", "TOK_DIR", "TOK_LOCAL_DIR", "TOK_TABREF", "TOK_SUBQUERY", "TOK_INSERT_INTO", "TOK_DESTINATION", "TOK_ALLCOLREF", "TOK_TABLE_OR_COL", "TOK_FUNCTION", "TOK_FUNCTIONDI", "TOK_FUNCTIONSTAR", "TOK_WHERE", "TOK_OP_EQ", "TOK_OP_NE", "TOK_OP_LE", "TOK_OP_LT", "TOK_OP_GE", "TOK_OP_GT", "TOK_OP_DIV", "TOK_OP_ADD", "TOK_OP_SUB", "TOK_OP_MUL", "TOK_OP_MOD", "TOK_OP_BITAND", "TOK_OP_BITNOT", "TOK_OP_BITOR", "TOK_OP_BITXOR", "TOK_OP_AND", "TOK_OP_OR", "TOK_OP_NOT", "TOK_OP_LIKE", "TOK_TRUE", "TOK_FALSE", "TOK_TRANSFORM", "TOK_SERDE", "TOK_SERDENAME", "TOK_SERDEPROPS", "TOK_EXPLIST", "TOK_ALIASLIST", "TOK_GROUPBY", "TOK_HAVING", "TOK_ORDERBY", "TOK_CLUSTERBY", "TOK_DISTRIBUTEBY", "TOK_SORTBY", "TOK_UNION", "TOK_JOIN", "TOK_LEFTOUTERJOIN", "TOK_RIGHTOUTERJOIN", "TOK_FULLOUTERJOIN", "TOK_UNIQUEJOIN", "TOK_LOAD", "TOK_EXPORT", "TOK_IMPORT", "TOK_NULL", "TOK_ISNULL", "TOK_ISNOTNULL", "TOK_TINYINT", "TOK_SMALLINT", "TOK_INT", "TOK_BIGINT", "TOK_BOOLEAN", "TOK_FLOAT", "TOK_DOUBLE", "TOK_DATE", "TOK_DATETIME", "TOK_TIMESTAMP", "TOK_STRING", "TOK_BINARY", "TOK_LIST", "TOK_STRUCT", "TOK_MAP", "TOK_UNIONTYPE", "TOK_COLTYPELIST", "TOK_CREATEDATABASE", "TOK_CREATETABLE", "TOK_CREATEINDEX", "TOK_CREATEINDEX_INDEXTBLNAME", "TOK_DEFERRED_REBUILDINDEX", "TOK_DROPINDEX", "TOK_LIKETABLE", "TOK_DESCTABLE", "TOK_DESCFUNCTION", "TOK_ALTERTABLE_PARTITION", "TOK_ALTERTABLE_RENAME", "TOK_ALTERTABLE_ADDCOLS", "TOK_ALTERTABLE_RENAMECOL", "TOK_ALTERTABLE_RENAMEPART", "TOK_ALTERTABLE_REPLACECOLS", "TOK_ALTERTABLE_ADDPARTS", "TOK_ALTERTABLE_DROPPARTS", "TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE", "TOK_ALTERTABLE_TOUCH", "TOK_ALTERTABLE_ARCHIVE", "TOK_ALTERTABLE_UNARCHIVE", "TOK_ALTERTABLE_SERDEPROPERTIES", "TOK_ALTERTABLE_SERIALIZER", "TOK_TABLE_PARTITION", "TOK_ALTERTABLE_FILEFORMAT", "TOK_ALTERTABLE_LOCATION", "TOK_ALTERTABLE_PROPERTIES", "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION", "TOK_ALTERINDEX_REBUILD", "TOK_ALTERINDEX_PROPERTIES", "TOK_MSCK", "TOK_SHOWDATABASES", "TOK_SHOWTABLES", "TOK_SHOWFUNCTIONS", "TOK_SHOWPARTITIONS", "TOK_SHOW_TABLESTATUS", "TOK_SHOW_TBLPROPERTIES", "TOK_SHOWLOCKS", "TOK_LOCKTABLE", "TOK_UNLOCKTABLE", "TOK_SWITCHDATABASE", "TOK_DROPDATABASE", "TOK_DROPTABLE", "TOK_DATABASECOMMENT", "TOK_TABCOLLIST", "TOK_TABCOL", "TOK_TABLECOMMENT", "TOK_TABLEPARTCOLS", "TOK_TABLEBUCKETS", "TOK_TABLEROWFORMAT", "TOK_TABLEROWFORMATFIELD", "TOK_TABLEROWFORMATCOLLITEMS", "TOK_TABLEROWFORMATMAPKEYS", "TOK_TABLEROWFORMATLINES", "TOK_TBLSEQUENCEFILE", "TOK_TBLTEXTFILE", "TOK_TBLRCFILE", "TOK_TABLEFILEFORMAT", "TOK_FILEFORMAT_GENERIC", "TOK_OFFLINE", "TOK_ENABLE", "TOK_DISABLE", "TOK_READONLY", "TOK_NO_DROP", "TOK_STORAGEHANDLER", "TOK_ALTERTABLE_CLUSTER_SORT", "TOK_TABCOLNAME", "TOK_TABLELOCATION", "TOK_PARTITIONLOCATION", "TOK_TABLEBUCKETSAMPLE", "TOK_TABLESPLITSAMPLE", "TOK_TMP_FILE", "TOK_TABSORTCOLNAMEASC", "TOK_TABSORTCOLNAMEDESC", "TOK_STRINGLITERALSEQUENCE", "TOK_CHARSETLITERAL", "TOK_CREATEFUNCTION", "TOK_DROPFUNCTION", "TOK_CREATEVIEW", "TOK_DROPVIEW", "TOK_ALTERVIEW_PROPERTIES", "TOK_ALTERVIEW_ADDPARTS", "TOK_ALTERVIEW_DROPPARTS", "TOK_ALTERVIEW_RENAME", "TOK_VIEWPARTCOLS", "TOK_EXPLAIN", "TOK_TABLESERIALIZER", "TOK_TABLEPROPERTIES", "TOK_TABLEPROPLIST", "TOK_INDEXPROPERTIES", "TOK_INDEXPROPLIST", "TOK_TABTYPE", "TOK_LIMIT", "TOK_TABLEPROPERTY", "TOK_IFEXISTS", "TOK_IFNOTEXISTS", "TOK_ORREPLACE", "TOK_HINTLIST", "TOK_HINT", "TOK_MAPJOIN", "TOK_STREAMTABLE", "TOK_HOLD_DDLTIME", "TOK_HINTARGLIST", "TOK_USERSCRIPTCOLNAMES", "TOK_USERSCRIPTCOLSCHEMA", "TOK_RECORDREADER", "TOK_RECORDWRITER", "TOK_LEFTSEMIJOIN", "TOK_LATERAL_VIEW", "TOK_TABALIAS", "TOK_ANALYZE", "TOK_CREATEROLE", "TOK_DROPROLE", "TOK_GRANT", "TOK_REVOKE", "TOK_SHOW_GRANT", "TOK_PRIVILEGE_LIST", "TOK_PRIVILEGE", "TOK_PRINCIPAL_NAME", "TOK_USER", "TOK_GROUP", "TOK_ROLE", "TOK_GRANT_WITH_OPTION", "TOK_PRIV_ALL", "TOK_PRIV_ALTER_METADATA", "TOK_PRIV_ALTER_DATA", "TOK_PRIV_DROP", "TOK_PRIV_INDEX", "TOK_PRIV_LOCK", "TOK_PRIV_SELECT", "TOK_PRIV_SHOW_DATABASE", "TOK_PRIV_CREATE", "TOK_PRIV_OBJECT", "TOK_PRIV_OBJECT_COL", "TOK_GRANT_ROLE", "TOK_REVOKE_ROLE", "TOK_SHOW_ROLE_GRANT", "TOK_SHOWINDEXES", "TOK_INDEXCOMMENT", "TOK_DESCDATABASE", "TOK_DATABASEPROPERTIES", "TOK_DATABASELOCATION", "TOK_DBPROPLIST", "TOK_ALTERDATABASE_PROPERTIES", "TOK_ALTERTABLE_ALTERPARTS_MERGEFILES", "TOK_TABNAME", "TOK_TABSRC", "TOK_RESTRICT", "TOK_CASCADE", "KW_EXPLAIN", "KW_EXTENDED", "KW_FORMATTED", "KW_LOAD", "KW_DATA", "KW_LOCAL", "KW_INPATH", "StringLiteral", "KW_OVERWRITE", "KW_INTO", "KW_TABLE", "KW_EXPORT", "KW_TO", "KW_IMPORT", "KW_EXTERNAL", "KW_FROM", "KW_IF", "KW_EXISTS", "KW_RESTRICT", "KW_CASCADE", "KW_NOT", "KW_OR", "KW_REPLACE", "KW_CREATE", "KW_DATABASE", "KW_SCHEMA", "Identifier", "KW_WITH", "KW_DBPROPERTIES", "KW_LOCATION", "LPAREN", "RPAREN", "COMMA", "KW_USE", "KW_DROP", "KW_COMMENT", "KW_LIKE", "KW_AS", "KW_INDEX", "KW_ON", "KW_DEFERRED", "KW_REBUILD", "KW_IN", "KW_IDXPROPERTIES", "KW_ALTER", "KW_VIEW", "KW_SET", "KW_RENAME", "KW_ADD", "KW_COLUMNS", "KW_CHANGE", "KW_COLUMN", "KW_FIRST", "KW_AFTER", "KW_TOUCH", "KW_ARCHIVE", "KW_UNARCHIVE", "KW_TBLPROPERTIES", "KW_SERDE", "KW_SERDEPROPERTIES", "KW_FILEFORMAT", "KW_CONCATENATE", "KW_ENABLE", "KW_DISABLE", "KW_OFFLINE", "KW_NO_DROP", "KW_READONLY", "KW_CLUSTERED", "KW_SEQUENCEFILE", "KW_TEXTFILE", "KW_RCFILE", "KW_INPUTFORMAT", "KW_OUTPUTFORMAT", "KW_INPUTDRIVER", "KW_OUTPUTDRIVER", "DOT", "KW_ELEM_TYPE", "KW_KEY_TYPE", "KW_VALUE_TYPE", "KW_DESCRIBE", "KW_DESC", "KW_FUNCTION", "KW_ANALYZE", "KW_COMPUTE", "KW_STATISTICS", "KW_SHOW", "KW_DATABASES", "KW_SCHEMAS", "KW_TABLES", "KW_FUNCTIONS", "KW_PARTITIONS", "KW_LOCKS", "KW_INDEXES", "KW_LOCK", "KW_SHARED", "KW_EXCLUSIVE", "KW_UNLOCK", "KW_GRANT", "KW_REVOKE", "KW_ALL", "KW_UPDATE", "KW_SELECT", "KW_SHOW_DATABASE", "KW_GROUP", "KW_OPTION", "KW_MSCK", "KW_REPAIR", "KW_TEMPORARY", "KW_PARTITIONED", "KW_BY", "KW_SORTED", "Number", "KW_BUCKETS", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_ROW", "KW_FORMAT", "KW_DELIMITED", "EQUAL", "KW_FIELDS", "KW_TERMINATED", "KW_ESCAPED", "KW_COLLECTION", "KW_ITEMS", "KW_MAP", "KW_KEYS", "KW_LINES", "KW_STORED", "KW_ASC", "COLON", "KW_TINYINT", "KW_SMALLINT", "KW_INT", "KW_BIGINT", "KW_BOOLEAN", "KW_FLOAT", "KW_DOUBLE", "KW_DATE", "KW_DATETIME", "KW_TIMESTAMP", "KW_STRING", "KW_BINARY", "KW_ARRAY", "LESSTHAN", "GREATERTHAN", "KW_STRUCT", "KW_UNIONTYPE", "KW_UNION", "KW_INSERT", "KW_DIRECTORY", "KW_LIMIT", "KW_DISTINCT", "KW_TRANSFORM", "KW_USING", "DIVIDE", "STAR", "PLUS", "KW_MAPJOIN", "KW_STREAMTABLE", "KW_HOLD_DDLTIME", "KW_REDUCE", "KW_PRESERVE", "KW_UNIQUEJOIN", "KW_JOIN", "KW_LEFT", "KW_OUTER", "KW_RIGHT", "KW_FULL", "KW_SEMI", "KW_LATERAL", "KW_TABLESAMPLE", "KW_BUCKET", "KW_OUT", "KW_OF", "KW_PERCENT", "KW_WHERE", "KW_HAVING", "KW_ORDER", "KW_CLUSTER", "KW_DISTRIBUTE", "KW_SORT", "KW_CAST", "KW_CASE", "KW_WHEN", "KW_THEN", "KW_ELSE", "KW_END", "BigintLiteral", "SmallintLiteral", "TinyintLiteral", "CharSetName", "CharSetLiteral", "KW_NULL", "LSQUARE", "RSQUARE", "MINUS", "TILDE", "KW_IS", "BITWISEXOR", "MOD", "DIV", "AMPERSAND", "BITWISEOR", "KW_RLIKE", "KW_REGEXP", "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", "GREATERTHANOREQUALTO", "KW_BETWEEN", "KW_AND", "KW_TRUE", "KW_FALSE", "KW_PARTITION", "KW_CLUSTERSTATUS", "KW_UTC", "KW_UTCTIMESTAMP", "KW_LONG", "KW_DELETE", "KW_PLUS", "KW_MINUS", "KW_FETCH", "KW_INTERSECT", "KW_MATERIALIZED", "KW_SSL", "KW_UNDO", "KW_PROCEDURE", "KW_UNSIGNED", "KW_WHILE", "KW_READ", "KW_READS", "KW_PURGE", "KW_RANGE", "KW_BEFORE", "KW_BOTH", "KW_CROSS", "KW_CONTINUE", "KW_CURSOR", "KW_TRIGGER", "SEMICOLON", "LCURLY", "RCURLY", "QUESTION", "DOLLAR", "Letter", "HexDigit", "Digit", "Exponent", "RegexComponent", "WS", "COMMENT"
    };
    public static final int TOK_FUNCTIONDI=22;
    public static final int LSQUARE=429;
    public static final int TOK_PRIV_SHOW_DATABASE=217;
    public static final int KW_REPAIR=342;
    public static final int KW_FORMAT=352;
    public static final int TOK_ALTERTABLE_ALTERPARTS_MERGEFILES=231;
    public static final int KW_FIRST=288;
    public static final int TOK_OP_GT=30;
    public static final int TOK_ALTERTABLE_SERDEPROPERTIES=108;
    public static final int KW_DROP=270;
    public static final int TinyintLiteral=425;
    public static final int KW_EXPLAIN=236;
    public static final int KW_PERCENT=410;
    public static final int TOK_PRIV_ALTER_DATA=212;
    public static final int TOK_OP_GE=29;
    public static final int EQUAL_NS=441;
    public static final int RPAREN=267;
    public static final int TOK_OP_ADD=32;
    public static final int KW_DBPROPERTIES=264;
    public static final int TOK_TABCOLNAME=153;
    public static final int TOK_FUNCTIONSTAR=23;
    public static final int KW_THEN=420;
    public static final int TOK_FROM=9;
    public static final int TOK_TINYINT=70;
    public static final int DIVIDE=390;
    public static final int TOK_ALTERTABLE_LOCATION=112;
    public static final int KW_HOLD_DDLTIME=395;
    public static final int TOK_INDEXCOMMENT=225;
    public static final int TOK_ALTERTABLE_SERIALIZER=109;
    public static final int TOK_SHOW_GRANT=202;
    public static final int KW_SHOW_DATABASE=338;
    public static final int TOK_DESCDATABASE=226;
    public static final int TOK_DESCFUNCTION=95;
    public static final int KW_FETCH=457;
    public static final int KW_FILEFORMAT=296;
    public static final int KW_MATERIALIZED=459;
    public static final int KW_TRANSFORM=388;
    public static final int TOK_LEFTSEMIJOIN=194;
    public static final int KW_UNIQUEJOIN=398;
    public static final int TOK_TBLSEQUENCEFILE=141;
    public static final int TOK_SELEXPR=8;
    public static final int KW_SELECT=337;
    public static final int TOK_UNIQUEJOIN=63;
    public static final int TOK_MAP=84;
    public static final int TOK_PRIV_ALL=210;
    public static final int KW_BUCKET=407;
    public static final int KW_LOAD=239;
    public static final int KW_GROUP=339;
    public static final int TOK_HOLD_DDLTIME=188;
    public static final int TOK_PRIV_OBJECT=219;
    public static final int KW_TO=248;
    public static final int KW_CHANGE=286;
    public static final int KW_DISTRIBUTE=415;
    public static final int KW_NOT=256;
    public static final int KW_ELSE=421;
    public static final int TOK_TMP_FILE=158;
    public static final int KW_INPATH=242;
    public static final int KW_OUT=408;
    public static final int TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE=104;
    public static final int TOK_STRUCT=83;
    public static final int KW_BOOLEAN=370;
    public static final int TOK_DOUBLE=76;
    public static final int KW_INDEXES=328;
    public static final int TOK_SHOWLOCKS=124;
    public static final int KW_REGEXP=440;
    public static final int TOK_DATETIME=78;
    public static final int TOK_STORAGEHANDLER=151;
    public static final int HexDigit=481;
    public static final int KW_SORT=416;
    public static final int KW_FROM=251;
    public static final int KW_DEFERRED=276;
    public static final int TOK_UNLOCKTABLE=126;
    public static final int TOK_MAPJOIN=186;
    public static final int KW_REDUCE=396;
    public static final int TOK_TIMESTAMP=79;
    public static final int TOK_IFNOTEXISTS=182;
    public static final int TOK_TBLTEXTFILE=142;
    public static final int TOK_ALTERTABLE_FILEFORMAT=111;
    public static final int KW_READS=466;
    public static final int KW_SET=282;
    public static final int PLUS=392;
    public static final int TOK_TABSORTCOLNAMEDESC=160;
    public static final int TOK_RESTRICT=234;
    public static final int KW_REBUILD=277;
    public static final int KW_EXTENDED=237;
    public static final int TOK_LOAD=64;
    public static final int TOK_TABALIAS=196;
    public static final int TOK_IFEXISTS=181;
    public static final int KW_LOCATION=265;
    public static final int TOK_ALTERTABLE_TOUCH=105;
    public static final int KW_MSCK=341;
    public static final int TOK_TRANSFORM=46;
    public static final int LESSTHAN=379;
    public static final int KW_DELIMITED=353;
    public static final int TOK_FUNCTION=21;
    public static final int TOK_CREATEINDEX=89;
    public static final int KW_WHEN=419;
    public static final int TOK_TABLEROWFORMATLINES=140;
    public static final int TOK_CREATEFUNCTION=163;
    public static final int AMPERSAND=437;
    public static final int TOK_SHOWTABLES=119;
    public static final int KW_EXPORT=247;
    public static final int MINUS=431;
    public static final int KW_FIELDS=355;
    public static final int KW_SEQUENCEFILE=304;
    public static final int TOK_FALSE=45;
    public static final int COLON=365;
    public static final int SmallintLiteral=424;
    public static final int TOK_TABLECOMMENT=133;
    public static final int TOK_ALTERTABLE_RENAMEPART=100;
    public static final int TOK_LIKETABLE=93;
    public static final int TOK_SMALLINT=71;
    public static final int TOK_CREATEINDEX_INDEXTBLNAME=90;
    public static final int TOK_PRIV_LOCK=215;
    public static final int TOK_OP_LT=28;
    public static final int KW_TABLESAMPLE=406;
    public static final int RCURLY=477;
    public static final int TOK_TABLEPROPERTY=180;
    public static final int TOK_GRANT_WITH_OPTION=209;
    public static final int TOK_FULLOUTERJOIN=62;
    public static final int KW_USING=389;
    public static final int TOK_OP_LE=27;
    public static final int KW_NULL=428;
    public static final int TOK_INDEXPROPERTIES=176;
    public static final int TOK_OP_AND=40;
    public static final int TOK_OP_MOD=35;
    public static final int TOK_HINTARGLIST=189;
    public static final int KW_SERDE=294;
    public static final int KW_TINYINT=366;
    public static final int TOK_GROUPBY=52;
    public static final int KW_CROSS=471;
    public static final int TOK_CHARSETLITERAL=162;
    public static final int TOK_TABLEPARTCOLS=134;
    public static final int KW_COLLECTION=358;
    public static final int TOK_ALTERTABLE_DROPPARTS=103;
    public static final int KW_INSERT=384;
    public static final int TOK_SERDEPROPS=49;
    public static final int BITWISEXOR=434;
    public static final int TOK_DROPTABLE=129;
    public static final int TOK_OP_OR=41;
    public static final int TOK_INDEXPROPLIST=177;
    public static final int TOK_TABLEROWFORMATMAPKEYS=139;
    public static final int TOK_TABLEBUCKETSAMPLE=156;
    public static final int Identifier=262;
    public static final int TOK_PARTVAL=12;
    public static final int TOK_OP_NE=26;
    public static final int TOK_TABLEBUCKETS=135;
    public static final int KW_RLIKE=439;
    public static final int TOK_STRINGLITERALSEQUENCE=161;
    public static final int TOK_OP_NOT=42;
    public static final int KW_SCHEMAS=323;
    public static final int COMMENT=486;
    public static final int KW_READONLY=302;
    public static final int TOK_ALIASLIST=51;
    public static final int KW_ESCAPED=357;
    public static final int TOK_INSERT=4;
    public static final int KW_SMALLINT=367;
    public static final int KW_INT=368;
    public static final int TOK_TABSRC=233;
    public static final int KW_TEXTFILE=305;
    public static final int TOK_USERSCRIPTCOLNAMES=190;
    public static final int KW_RENAME=283;
    public static final int TOK_ALTERTABLE_REPLACECOLS=101;
    public static final int TOK_UNIONTYPE=85;
    public static final int TOK_LATERAL_VIEW=195;
    public static final int KW_BINARY=377;
    public static final int TOK_STRING=80;
    public static final int KW_END=422;
    public static final int TOK_CLUSTERBY=55;
    public static final int TOK_FLOAT=75;
    public static final int TOK_REVOKE_ROLE=222;
    public static final int TOK_SORTBY=57;
    public static final int KW_TABLES=324;
    public static final int TOK_PRIV_OBJECT_COL=220;
    public static final int Letter=480;
    public static final int KW_CURSOR=473;
    public static final int KW_TIMESTAMP=375;
    public static final int TOK_SELECTDI=7;
    public static final int KW_COLUMNS=285;
    public static final int KW_UNLOCK=332;
    public static final int KW_UNIONTYPE=382;
    public static final int KW_DESCRIBE=315;
    public static final int TOK_CREATETABLE=88;
    public static final int TOK_DROPDATABASE=128;
    public static final int KW_RCFILE=306;
    public static final int KW_CREATE=259;
    public static final int KW_MAPJOIN=393;
    public static final int TOK_DROPVIEW=166;
    public static final int KW_WITH=263;
    public static final int TOK_PRINCIPAL_NAME=205;
    public static final int TOK_SHOW_ROLE_GRANT=223;
    public static final int TOK_PRIVILEGE=204;
    public static final int TOK_ALTERTABLE_RENAMECOL=99;
    public static final int KW_GRANT=333;
    public static final int Number=347;
    public static final int COMMA=268;
    public static final int KW_WHILE=464;
    public static final int EQUAL=354;
    public static final int KW_UNARCHIVE=292;
    public static final int KW_RECORDREADER=349;
    public static final int TOK_DESTINATION=18;
    public static final int KW_OFFLINE=300;
    public static final int TOK_OP_BITAND=36;
    public static final int TOK_HAVING=53;
    public static final int KW_RESTRICT=254;
    public static final int KW_UNION=383;
    public static final int KW_TEMPORARY=343;
    public static final int KW_CAST=417;
    public static final int KW_FALSE=448;
    public static final int KW_IDXPROPERTIES=279;
    public static final int KW_INTERSECT=458;
    public static final int TOK_EXPLAIN=172;
    public static final int TOK_ALTERTABLE_PARTITION=96;
    public static final int TOK_FILEFORMAT_GENERIC=145;
    public static final int KW_STORED=363;
    public static final int TOK_PRIV_ALTER_METADATA=211;
    public static final int KW_CASE=418;
    public static final int TOK_OP_BITNOT=37;
    public static final int TOK_TABCOLLIST=131;
    public static final int TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION=114;
    public static final int TOK_TABTYPE=178;
    public static final int QUESTION=478;
    public static final int TOK_HINTLIST=184;
    public static final int KW_AS=273;
    public static final int KW_BEFORE=469;
    public static final int TOK_OFFLINE=146;
    public static final int KW_KEY_TYPE=313;
    public static final int TOK_TABLELOCATION=154;
    public static final int TOK_ANALYZE=197;
    public static final int TOK_RECORDREADER=192;
    public static final int KW_ALTER=280;
    public static final int TOK_TABREF=15;
    public static final int KW_LIKE=272;
    public static final int KW_EXCLUSIVE=331;
    public static final int KW_PARTITIONED=344;
    public static final int KW_JOIN=399;
    public static final int STAR=391;
    public static final int TOK_ALTERTABLE_ARCHIVE=106;
    public static final int KW_PLUS=455;
    public static final int MOD=435;
    public static final int KW_ITEMS=359;
    public static final int TOK_OP_EQ=25;
    public static final int TOK_CASCADE=235;
    public static final int KW_ROW=351;
    public static final int TOK_VIEWPARTCOLS=171;
    public static final int KW_CONCATENATE=297;
    public static final int KW_REVOKE=334;
    public static final int KW_FLOAT=371;
    public static final int KW_BOTH=470;
    public static final int EOF=-1;
    public static final int TOK_SHOWDATABASES=118;
    public static final int KW_ASC=364;
    public static final int TOK_DATABASECOMMENT=130;
    public static final int RegexComponent=484;
    public static final int KW_CASCADE=255;
    public static final int KW_PARTITIONS=326;
    public static final int KW_RANGE=468;
    public static final int TOK_GRANT=200;
    public static final int TOK_ORREPLACE=183;
    public static final int TOK_QUERY=5;
    public static final int TOK_ALTERVIEW_RENAME=170;
    public static final int TOK_RIGHTOUTERJOIN=61;
    public static final int TOK_PRIV_SELECT=216;
    public static final int KW_TABLE=246;
    public static final int TOK_RECORDWRITER=193;
    public static final int TOK_ALTERVIEW_ADDPARTS=168;
    public static final int KW_SCHEMA=261;
    public static final int KW_OPTION=340;
    public static final int TOK_TABLESPLITSAMPLE=157;
    public static final int TOK_COLTYPELIST=86;
    public static final int KW_ENABLE=298;
    public static final int TOK_BIGINT=73;
    public static final int KW_ADD=284;
    public static final int TOK_ALTERTABLE_RENAME=97;
    public static final int KW_LATERAL=405;
    public static final int LCURLY=476;
    public static final int SEMICOLON=475;
    public static final int TOK_TABCOL=132;
    public static final int KW_DELETE=454;
    public static final int KW_OUTPUTDRIVER=310;
    public static final int TOK_ALTERINDEX_REBUILD=115;
    public static final int TOK_WHERE=24;
    public static final int KW_TBLPROPERTIES=293;
    public static final int WS=485;
    public static final int TOK_TABLEROWFORMATFIELD=137;
    public static final int KW_REPLACE=258;
    public static final int KW_LOCK=329;
    public static final int TOK_ALTERVIEW_DROPPARTS=169;
    public static final int KW_BY=345;
    public static final int TOK_UNION=58;
    public static final int TOK_SELECT=6;
    public static final int TOK_OP_LIKE=43;
    public static final int KW_SEMI=404;
    public static final int KW_LOCAL=241;
    public static final int TOK_EXPORT=65;
    public static final int TOK_TABLEPROPLIST=175;
    public static final int KW_UTC=451;
    public static final int KW_INPUTDRIVER=309;
    public static final int TOK_PRIV_INDEX=214;
    public static final int KW_LINES=362;
    public static final int TOK_SHOW_TABLESTATUS=122;
    public static final int KW_AND=446;
    public static final int TOK_SUBQUERY=16;
    public static final int KW_CLUSTERSTATUS=450;
    public static final int CharSetName=426;
    public static final int TOK_DROPFUNCTION=164;
    public static final int TOK_DISABLE=148;
    public static final int KW_DIRECTORY=385;
    public static final int TOK_DESCTABLE=94;
    public static final int KW_SHARED=330;
    public static final int KW_COMPUTE=319;
    public static final int KW_PARTITION=449;
    public static final int TOK_READONLY=149;
    public static final int LPAREN=266;
    public static final int GREATERTHANOREQUALTO=444;
    public static final int KW_FORMATTED=238;
    public static final int KW_STRUCT=381;
    public static final int KW_USE=269;
    public static final int TOK_TRUE=44;
    public static final int KW_TERMINATED=356;
    public static final int TOK_CREATEVIEW=165;
    public static final int TOK_LOCAL_DIR=14;
    public static final int TOK_DROPINDEX=92;
    public static final int KW_IN=278;
    public static final int KW_SSL=460;
    public static final int KW_INPUTFORMAT=307;
    public static final int KW_IS=433;
    public static final int KW_OUTER=401;
    public static final int KW_IF=252;
    public static final int KW_DATABASES=322;
    public static final int TOK_ALTERVIEW_PROPERTIES=167;
    public static final int KW_ORDER=413;
    public static final int KW_ALL=335;
    public static final int KW_HAVING=412;
    public static final int TOK_GRANT_ROLE=221;
    public static final int TOK_ISNULL=68;
    public static final int TOK_ALLCOLREF=19;
    public static final int KW_FUNCTIONS=325;
    public static final int TOK_DIR=13;
    public static final int BITWISEOR=438;
    public static final int KW_SERDEPROPERTIES=295;
    public static final int StringLiteral=243;
    public static final int KW_ANALYZE=318;
    public static final int CharSetLiteral=427;
    public static final int TOK_TABLE_OR_COL=20;
    public static final int KW_PROCEDURE=462;
    public static final int TOK_ALTERTABLE_ADDPARTS=102;
    public static final int KW_CLUSTERED=303;
    public static final int KW_DISABLE=299;
    public static final int KW_PURGE=467;
    public static final int KW_COMMENT=271;
    public static final int KW_NO_DROP=301;
    public static final int DIV=436;
    public static final int TOK_CREATEDATABASE=87;
    public static final int TOK_MSCK=117;
    public static final int KW_DATABASE=260;
    public static final int KW_RECORDWRITER=350;
    public static final int TOK_DROPROLE=199;
    public static final int TOK_OP_BITXOR=39;
    public static final int TOK_ROLE=208;
    public static final int KW_TOUCH=290;
    public static final int TOK_ALTERTABLE_ADDCOLS=98;
    public static final int KW_DATETIME=374;
    public static final int KW_STRING=376;
    public static final int TOK_CREATEROLE=198;
    public static final int TOK_SHOWINDEXES=224;
    public static final int KW_OUTPUTFORMAT=308;
    public static final int KW_LONG=453;
    public static final int TOK_NULL=67;
    public static final int TOK_GROUP=207;
    public static final int KW_WHERE=411;
    public static final int KW_EXISTS=253;
    public static final int TOK_OP_DIV=31;
    public static final int NOTEQUAL=442;
    public static final int TOK_TABNAME=232;
    public static final int KW_LOCKS=327;
    public static final int TOK_TABLE_PARTITION=110;
    public static final int TOK_INSERT_INTO=17;
    public static final int TOK_DATE=77;
    public static final int KW_UPDATE=336;
    public static final int TOK_TABLEROWFORMAT=136;
    public static final int KW_OVERWRITE=244;
    public static final int KW_DISTINCT=387;
    public static final int TOK_NO_DROP=150;
    public static final int TOK_PRIVILEGE_LIST=203;
    public static final int GREATERTHAN=380;
    public static final int TOK_SHOWPARTITIONS=121;
    public static final int TOK_ISNOTNULL=69;
    public static final int KW_CLUSTER=414;
    public static final int KW_PRESERVE=397;
    public static final int KW_FUNCTION=317;
    public static final int TOK_EXPLIST=50;
    public static final int TOK_BINARY=81;
    public static final int TOK_DISTRIBUTEBY=56;
    public static final int TOK_USER=206;
    public static final int TOK_LIST=82;
    public static final int TOK_TBLRCFILE=143;
    public static final int TOK_ALTERTABLE_UNARCHIVE=107;
    public static final int TOK_HINT=185;
    public static final int TOK_TABLEPROPERTIES=174;
    public static final int KW_ARCHIVE=291;
    public static final int TOK_SERDE=47;
    public static final int KW_LEFT=400;
    public static final int KW_KEYS=361;
    public static final int KW_IMPORT=249;
    public static final int TOK_SHOWFUNCTIONS=120;
    public static final int KW_VIEW=281;
    public static final int KW_DOUBLE=372;
    public static final int TOK_TABLESERIALIZER=173;
    public static final int TOK_LEFTOUTERJOIN=60;
    public static final int KW_SORTED=346;
    public static final int TOK_DBPROPLIST=229;
    public static final int TOK_LOCKTABLE=125;
    public static final int KW_MAP=360;
    public static final int KW_ELEM_TYPE=312;
    public static final int KW_FULL=403;
    public static final int TOK_ENABLE=147;
    public static final int TOK_SERDENAME=48;
    public static final int LESSTHANOREQUALTO=443;
    public static final int TOK_PARTITIONLOCATION=155;
    public static final int TOK_DATABASELOCATION=228;
    public static final int KW_ARRAY=378;
    public static final int KW_BUCKETS=348;
    public static final int DOLLAR=479;
    public static final int KW_UTCTIMESTAMP=452;
    public static final int KW_READ=465;
    public static final int TOK_OP_MUL=34;
    public static final int TOK_ALTERTABLE_CLUSTER_SORT=152;
    public static final int KW_DESC=316;
    public static final int Exponent=483;
    public static final int TOK_PRIV_DROP=213;
    public static final int TOK_REVOKE=201;
    public static final int KW_TRUE=447;
    public static final int TOK_ALTERTABLE_PROPERTIES=113;
    public static final int KW_LIMIT=386;
    public static final int TOK_STREAMTABLE=187;
    public static final int KW_BIGINT=369;
    public static final int TOK_INT=72;
    public static final int KW_MINUS=456;
    public static final int KW_RIGHT=402;
    public static final int TOK_TABLEFILEFORMAT=144;
    public static final int TOK_ORDERBY=54;
    public static final int KW_EXTERNAL=250;
    public static final int KW_STATISTICS=320;
    public static final int KW_AFTER=289;
    public static final int TOK_PRIV_CREATE=218;
    public static final int TILDE=432;
    public static final int TOK_ALTERINDEX_PROPERTIES=116;
    public static final int TOK_JOIN=59;
    public static final int KW_INDEX=274;
    public static final int KW_COLUMN=287;
    public static final int DOT=311;
    public static final int KW_UNDO=461;
    public static final int TOK_DATABASEPROPERTIES=227;
    public static final int KW_STREAMTABLE=394;
    public static final int TOK_TAB=10;
    public static final int TOK_SHOW_TBLPROPERTIES=123;
    public static final int TOK_ALTERDATABASE_PROPERTIES=230;
    public static final int TOK_DEFERRED_REBUILDINDEX=91;
    public static final int KW_TRIGGER=474;
    public static final int KW_CONTINUE=472;
    public static final int TOK_USERSCRIPTCOLSCHEMA=191;
    public static final int TOK_OP_BITOR=38;
    public static final int RSQUARE=430;
    public static final int Digit=482;
    public static final int TOK_SWITCHDATABASE=127;
    public static final int TOK_PARTSPEC=11;
    public static final int TOK_BOOLEAN=74;
    public static final int KW_UNSIGNED=463;
    public static final int KW_DATA=240;
    public static final int TOK_LIMIT=179;
    public static final int TOK_TABSORTCOLNAMEASC=159;
    public static final int KW_SHOW=321;
    public static final int BigintLiteral=423;
    public static final int KW_DATE=373;
    public static final int KW_INTO=245;
    public static final int KW_OR=257;
    public static final int TOK_TABLEROWFORMATCOLLITEMS=138;
    public static final int KW_ON=275;
    public static final int KW_VALUE_TYPE=314;
    public static final int KW_OF=409;
    public static final int KW_BETWEEN=445;
    public static final int TOK_OP_SUB=33;
    public static final int TOK_IMPORT=66;

        public HiveParser(TokenStream input) {
            super(input);
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "/work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g"; }

    
      Stack msgs = new Stack<String>();


    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start statement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:282:1: statement : ( explainStatement EOF | execStatement EOF );
    public final statement_return statement() throws RecognitionException {
        statement_return retval = new statement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF2=null;
        Token EOF4=null;
        explainStatement_return explainStatement1 = null;

        execStatement_return execStatement3 = null;


        CommonTree EOF2_tree=null;
        CommonTree EOF4_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:283:2: ( explainStatement EOF | execStatement EOF )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==KW_EXPLAIN) ) {
                alt1=1;
            }
            else if ( (LA1_0==KW_LOAD||LA1_0==KW_EXPORT||LA1_0==KW_IMPORT||LA1_0==KW_FROM||LA1_0==KW_CREATE||(LA1_0>=KW_USE && LA1_0<=KW_DROP)||LA1_0==KW_ALTER||(LA1_0>=KW_DESCRIBE && LA1_0<=KW_DESC)||LA1_0==KW_ANALYZE||LA1_0==KW_SHOW||LA1_0==KW_LOCK||(LA1_0>=KW_UNLOCK && LA1_0<=KW_REVOKE)||LA1_0==KW_SELECT||LA1_0==KW_MSCK||LA1_0==KW_MAP||LA1_0==KW_INSERT||LA1_0==KW_REDUCE) ) {
                alt1=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("282:1: statement : ( explainStatement EOF | execStatement EOF );", 1, 0, input);

                throw nvae;
            }
            switch (alt1) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:283:4: explainStatement EOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_explainStatement_in_statement769);
                    explainStatement1=explainStatement();
                    _fsp--;

                    adaptor.addChild(root_0, explainStatement1.getTree());
                    EOF2=(Token)input.LT(1);
                    match(input,EOF,FOLLOW_EOF_in_statement771); 
                    EOF2_tree = (CommonTree)adaptor.create(EOF2);
                    adaptor.addChild(root_0, EOF2_tree);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:284:4: execStatement EOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_execStatement_in_statement776);
                    execStatement3=execStatement();
                    _fsp--;

                    adaptor.addChild(root_0, execStatement3.getTree());
                    EOF4=(Token)input.LT(1);
                    match(input,EOF,FOLLOW_EOF_in_statement778); 
                    EOF4_tree = (CommonTree)adaptor.create(EOF4);
                    adaptor.addChild(root_0, EOF4_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end statement

    public static class explainStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start explainStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:287:1: explainStatement : KW_EXPLAIN (explainOptions= KW_EXTENDED | explainOptions= KW_FORMATTED )? execStatement -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? ) ;
    public final explainStatement_return explainStatement() throws RecognitionException {
        explainStatement_return retval = new explainStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token explainOptions=null;
        Token KW_EXPLAIN5=null;
        execStatement_return execStatement6 = null;


        CommonTree explainOptions_tree=null;
        CommonTree KW_EXPLAIN5_tree=null;
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
        RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");
         msgs.push("explain statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:290:2: ( KW_EXPLAIN (explainOptions= KW_EXTENDED | explainOptions= KW_FORMATTED )? execStatement -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:290:4: KW_EXPLAIN (explainOptions= KW_EXTENDED | explainOptions= KW_FORMATTED )? execStatement
            {
            KW_EXPLAIN5=(Token)input.LT(1);
            match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement799); 
            stream_KW_EXPLAIN.add(KW_EXPLAIN5);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:290:15: (explainOptions= KW_EXTENDED | explainOptions= KW_FORMATTED )?
            int alt2=3;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==KW_EXTENDED) ) {
                alt2=1;
            }
            else if ( (LA2_0==KW_FORMATTED) ) {
                alt2=2;
            }
            switch (alt2) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:290:16: explainOptions= KW_EXTENDED
                    {
                    explainOptions=(Token)input.LT(1);
                    match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_explainStatement804); 
                    stream_KW_EXTENDED.add(explainOptions);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:290:43: explainOptions= KW_FORMATTED
                    {
                    explainOptions=(Token)input.LT(1);
                    match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_explainStatement808); 
                    stream_KW_FORMATTED.add(explainOptions);


                    }
                    break;

            }

            pushFollow(FOLLOW_execStatement_in_explainStatement812);
            execStatement6=execStatement();
            _fsp--;

            stream_execStatement.add(execStatement6.getTree());

            // AST REWRITE
            // elements: explainOptions, execStatement
            // token labels: explainOptions
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_explainOptions=new RewriteRuleTokenStream(adaptor,"token explainOptions",explainOptions);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 291:7: -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:291:10: ^( TOK_EXPLAIN execStatement ( $explainOptions)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLAIN, "TOK_EXPLAIN"), root_1);

                adaptor.addChild(root_1, stream_execStatement.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:291:38: ( $explainOptions)?
                if ( stream_explainOptions.hasNext() ) {
                    adaptor.addChild(root_1, stream_explainOptions.next());

                }
                stream_explainOptions.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end explainStatement

    public static class execStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start execStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:294:1: execStatement : ( queryStatementExpression | loadStatement | exportStatement | importStatement | ddlStatement );
    public final execStatement_return execStatement() throws RecognitionException {
        execStatement_return retval = new execStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        queryStatementExpression_return queryStatementExpression7 = null;

        loadStatement_return loadStatement8 = null;

        exportStatement_return exportStatement9 = null;

        importStatement_return importStatement10 = null;

        ddlStatement_return ddlStatement11 = null;



         msgs.push("statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:297:5: ( queryStatementExpression | loadStatement | exportStatement | importStatement | ddlStatement )
            int alt3=5;
            switch ( input.LA(1) ) {
            case KW_FROM:
            case KW_SELECT:
            case KW_MAP:
            case KW_INSERT:
            case KW_REDUCE:
                {
                alt3=1;
                }
                break;
            case KW_LOAD:
                {
                alt3=2;
                }
                break;
            case KW_EXPORT:
                {
                alt3=3;
                }
                break;
            case KW_IMPORT:
                {
                alt3=4;
                }
                break;
            case KW_CREATE:
            case KW_USE:
            case KW_DROP:
            case KW_ALTER:
            case KW_DESCRIBE:
            case KW_DESC:
            case KW_ANALYZE:
            case KW_SHOW:
            case KW_LOCK:
            case KW_UNLOCK:
            case KW_GRANT:
            case KW_REVOKE:
            case KW_MSCK:
                {
                alt3=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("294:1: execStatement : ( queryStatementExpression | loadStatement | exportStatement | importStatement | ddlStatement );", 3, 0, input);

                throw nvae;
            }

            switch (alt3) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:297:7: queryStatementExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_queryStatementExpression_in_execStatement854);
                    queryStatementExpression7=queryStatementExpression();
                    _fsp--;

                    adaptor.addChild(root_0, queryStatementExpression7.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:298:7: loadStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_loadStatement_in_execStatement862);
                    loadStatement8=loadStatement();
                    _fsp--;

                    adaptor.addChild(root_0, loadStatement8.getTree());

                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:299:7: exportStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_exportStatement_in_execStatement870);
                    exportStatement9=exportStatement();
                    _fsp--;

                    adaptor.addChild(root_0, exportStatement9.getTree());

                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:300:7: importStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_importStatement_in_execStatement878);
                    importStatement10=importStatement();
                    _fsp--;

                    adaptor.addChild(root_0, importStatement10.getTree());

                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:301:7: ddlStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ddlStatement_in_execStatement886);
                    ddlStatement11=ddlStatement();
                    _fsp--;

                    adaptor.addChild(root_0, ddlStatement11.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end execStatement

    public static class loadStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start loadStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:304:1: loadStatement : KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) ;
    public final loadStatement_return loadStatement() throws RecognitionException {
        loadStatement_return retval = new loadStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token islocal=null;
        Token path=null;
        Token isoverwrite=null;
        Token KW_LOAD12=null;
        Token KW_DATA13=null;
        Token KW_INPATH14=null;
        Token KW_INTO15=null;
        Token KW_TABLE16=null;
        tableOrPartition_return tab = null;


        CommonTree islocal_tree=null;
        CommonTree path_tree=null;
        CommonTree isoverwrite_tree=null;
        CommonTree KW_LOAD12_tree=null;
        CommonTree KW_DATA13_tree=null;
        CommonTree KW_INPATH14_tree=null;
        CommonTree KW_INTO15_tree=null;
        CommonTree KW_TABLE16_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INPATH=new RewriteRuleTokenStream(adaptor,"token KW_INPATH");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
        RewriteRuleTokenStream stream_KW_DATA=new RewriteRuleTokenStream(adaptor,"token KW_DATA");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         msgs.push("load statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:307:5: ( KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:307:7: KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition )
            {
            KW_LOAD12=(Token)input.LT(1);
            match(input,KW_LOAD,FOLLOW_KW_LOAD_in_loadStatement913); 
            stream_KW_LOAD.add(KW_LOAD12);

            KW_DATA13=(Token)input.LT(1);
            match(input,KW_DATA,FOLLOW_KW_DATA_in_loadStatement915); 
            stream_KW_DATA.add(KW_DATA13);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:307:23: (islocal= KW_LOCAL )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==KW_LOCAL) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:307:24: islocal= KW_LOCAL
                    {
                    islocal=(Token)input.LT(1);
                    match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_loadStatement920); 
                    stream_KW_LOCAL.add(islocal);


                    }
                    break;

            }

            KW_INPATH14=(Token)input.LT(1);
            match(input,KW_INPATH,FOLLOW_KW_INPATH_in_loadStatement924); 
            stream_KW_INPATH.add(KW_INPATH14);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:307:53: (path= StringLiteral )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:307:54: path= StringLiteral
            {
            path=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_loadStatement929); 
            stream_StringLiteral.add(path);


            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:307:74: (isoverwrite= KW_OVERWRITE )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==KW_OVERWRITE) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:307:75: isoverwrite= KW_OVERWRITE
                    {
                    isoverwrite=(Token)input.LT(1);
                    match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_loadStatement935); 
                    stream_KW_OVERWRITE.add(isoverwrite);


                    }
                    break;

            }

            KW_INTO15=(Token)input.LT(1);
            match(input,KW_INTO,FOLLOW_KW_INTO_in_loadStatement939); 
            stream_KW_INTO.add(KW_INTO15);

            KW_TABLE16=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_loadStatement941); 
            stream_KW_TABLE.add(KW_TABLE16);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:307:119: (tab= tableOrPartition )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:307:120: tab= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_loadStatement946);
            tab=tableOrPartition();
            _fsp--;

            stream_tableOrPartition.add(tab.getTree());

            }


            // AST REWRITE
            // elements: path, isoverwrite, islocal, tab
            // token labels: islocal, isoverwrite, path
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_islocal=new RewriteRuleTokenStream(adaptor,"token islocal",islocal);
            RewriteRuleTokenStream stream_isoverwrite=new RewriteRuleTokenStream(adaptor,"token isoverwrite",isoverwrite);
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"token tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 308:5: -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:308:8: ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LOAD, "TOK_LOAD"), root_1);

                adaptor.addChild(root_1, stream_path.next());
                adaptor.addChild(root_1, stream_tab.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:308:30: ( $islocal)?
                if ( stream_islocal.hasNext() ) {
                    adaptor.addChild(root_1, stream_islocal.next());

                }
                stream_islocal.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:308:40: ( $isoverwrite)?
                if ( stream_isoverwrite.hasNext() ) {
                    adaptor.addChild(root_1, stream_isoverwrite.next());

                }
                stream_isoverwrite.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end loadStatement

    public static class exportStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exportStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:311:1: exportStatement : KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) -> ^( TOK_EXPORT $tab $path) ;
    public final exportStatement_return exportStatement() throws RecognitionException {
        exportStatement_return retval = new exportStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token path=null;
        Token KW_EXPORT17=null;
        Token KW_TABLE18=null;
        Token KW_TO19=null;
        tableOrPartition_return tab = null;


        CommonTree path_tree=null;
        CommonTree KW_EXPORT17_tree=null;
        CommonTree KW_TABLE18_tree=null;
        CommonTree KW_TO19_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_EXPORT=new RewriteRuleTokenStream(adaptor,"token KW_EXPORT");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         msgs.push("export statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:314:5: ( KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) -> ^( TOK_EXPORT $tab $path) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:314:7: KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral )
            {
            KW_EXPORT17=(Token)input.LT(1);
            match(input,KW_EXPORT,FOLLOW_KW_EXPORT_in_exportStatement998); 
            stream_KW_EXPORT.add(KW_EXPORT17);

            KW_TABLE18=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_exportStatement1000); 
            stream_KW_TABLE.add(KW_TABLE18);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:314:26: (tab= tableOrPartition )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:314:27: tab= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_exportStatement1005);
            tab=tableOrPartition();
            _fsp--;

            stream_tableOrPartition.add(tab.getTree());

            }

            KW_TO19=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_exportStatement1008); 
            stream_KW_TO.add(KW_TO19);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:314:55: (path= StringLiteral )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:314:56: path= StringLiteral
            {
            path=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_exportStatement1013); 
            stream_StringLiteral.add(path);


            }


            // AST REWRITE
            // elements: tab, path
            // token labels: path
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"token tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 315:5: -> ^( TOK_EXPORT $tab $path)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:315:8: ^( TOK_EXPORT $tab $path)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPORT, "TOK_EXPORT"), root_1);

                adaptor.addChild(root_1, stream_tab.next());
                adaptor.addChild(root_1, stream_path.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exportStatement

    public static class importStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start importStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:318:1: importStatement : KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) ;
    public final importStatement_return importStatement() throws RecognitionException {
        importStatement_return retval = new importStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ext=null;
        Token path=null;
        Token KW_IMPORT20=null;
        Token KW_TABLE21=null;
        Token KW_FROM22=null;
        tableOrPartition_return tab = null;

        tableLocation_return tableLocation23 = null;


        CommonTree ext_tree=null;
        CommonTree path_tree=null;
        CommonTree KW_IMPORT20_tree=null;
        CommonTree KW_TABLE21_tree=null;
        CommonTree KW_FROM22_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_IMPORT=new RewriteRuleTokenStream(adaptor,"token KW_IMPORT");
        RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
         msgs.push("import statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:2: ( KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:4: KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )?
            {
            KW_IMPORT20=(Token)input.LT(1);
            match(input,KW_IMPORT,FOLLOW_KW_IMPORT_in_importStatement1054); 
            stream_KW_IMPORT.add(KW_IMPORT20);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:14: ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==KW_TABLE||LA7_0==KW_EXTERNAL) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:15: (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition )
                    {
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:15: (ext= KW_EXTERNAL )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==KW_EXTERNAL) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:16: ext= KW_EXTERNAL
                            {
                            ext=(Token)input.LT(1);
                            match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_importStatement1060); 
                            stream_KW_EXTERNAL.add(ext);


                            }
                            break;

                    }

                    KW_TABLE21=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_importStatement1064); 
                    stream_KW_TABLE.add(KW_TABLE21);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:43: (tab= tableOrPartition )
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:44: tab= tableOrPartition
                    {
                    pushFollow(FOLLOW_tableOrPartition_in_importStatement1069);
                    tab=tableOrPartition();
                    _fsp--;

                    stream_tableOrPartition.add(tab.getTree());

                    }


                    }
                    break;

            }

            KW_FROM22=(Token)input.LT(1);
            match(input,KW_FROM,FOLLOW_KW_FROM_in_importStatement1074); 
            stream_KW_FROM.add(KW_FROM22);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:76: (path= StringLiteral )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:77: path= StringLiteral
            {
            path=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_importStatement1079); 
            stream_StringLiteral.add(path);


            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:97: ( tableLocation )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==KW_LOCATION) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:321:97: tableLocation
                    {
                    pushFollow(FOLLOW_tableLocation_in_importStatement1082);
                    tableLocation23=tableLocation();
                    _fsp--;

                    stream_tableLocation.add(tableLocation23.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tab, ext, tableLocation, path
            // token labels: path, ext
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"token tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 322:5: -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:322:8: ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_IMPORT, "TOK_IMPORT"), root_1);

                adaptor.addChild(root_1, stream_path.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:322:27: ( $tab)?
                if ( stream_tab.hasNext() ) {
                    adaptor.addChild(root_1, stream_tab.next());

                }
                stream_tab.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:322:33: ( $ext)?
                if ( stream_ext.hasNext() ) {
                    adaptor.addChild(root_1, stream_ext.next());

                }
                stream_ext.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:322:39: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.next());

                }
                stream_tableLocation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end importStatement

    public static class ddlStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ddlStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:325:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );
    public final ddlStatement_return ddlStatement() throws RecognitionException {
        ddlStatement_return retval = new ddlStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        createDatabaseStatement_return createDatabaseStatement24 = null;

        switchDatabaseStatement_return switchDatabaseStatement25 = null;

        dropDatabaseStatement_return dropDatabaseStatement26 = null;

        createTableStatement_return createTableStatement27 = null;

        dropTableStatement_return dropTableStatement28 = null;

        alterStatement_return alterStatement29 = null;

        descStatement_return descStatement30 = null;

        showStatement_return showStatement31 = null;

        metastoreCheck_return metastoreCheck32 = null;

        createViewStatement_return createViewStatement33 = null;

        dropViewStatement_return dropViewStatement34 = null;

        createFunctionStatement_return createFunctionStatement35 = null;

        createIndexStatement_return createIndexStatement36 = null;

        dropIndexStatement_return dropIndexStatement37 = null;

        dropFunctionStatement_return dropFunctionStatement38 = null;

        analyzeStatement_return analyzeStatement39 = null;

        lockStatement_return lockStatement40 = null;

        unlockStatement_return unlockStatement41 = null;

        createRoleStatement_return createRoleStatement42 = null;

        dropRoleStatement_return dropRoleStatement43 = null;

        grantPrivileges_return grantPrivileges44 = null;

        revokePrivileges_return revokePrivileges45 = null;

        showGrants_return showGrants46 = null;

        showRoleGrants_return showRoleGrants47 = null;

        grantRole_return grantRole48 = null;

        revokeRole_return revokeRole49 = null;



         msgs.push("ddl statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:328:5: ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole )
            int alt9=26;
            switch ( input.LA(1) ) {
            case KW_CREATE:
                {
                switch ( input.LA(2) ) {
                case KW_TEMPORARY:
                    {
                    alt9=12;
                    }
                    break;
                case KW_INDEX:
                    {
                    alt9=13;
                    }
                    break;
                case KW_OR:
                case KW_VIEW:
                    {
                    alt9=10;
                    }
                    break;
                case KW_DATABASE:
                case KW_SCHEMA:
                    {
                    alt9=1;
                    }
                    break;
                case Identifier:
                    {
                    alt9=19;
                    }
                    break;
                case KW_TABLE:
                case KW_EXTERNAL:
                    {
                    alt9=4;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("325:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 1, input);

                    throw nvae;
                }

                }
                break;
            case KW_USE:
                {
                alt9=2;
                }
                break;
            case KW_DROP:
                {
                switch ( input.LA(2) ) {
                case KW_VIEW:
                    {
                    alt9=11;
                    }
                    break;
                case KW_TABLE:
                    {
                    alt9=5;
                    }
                    break;
                case KW_INDEX:
                    {
                    alt9=14;
                    }
                    break;
                case KW_TEMPORARY:
                    {
                    alt9=15;
                    }
                    break;
                case Identifier:
                    {
                    alt9=20;
                    }
                    break;
                case KW_DATABASE:
                case KW_SCHEMA:
                    {
                    alt9=3;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("325:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 3, input);

                    throw nvae;
                }

                }
                break;
            case KW_ALTER:
                {
                alt9=6;
                }
                break;
            case KW_DESCRIBE:
            case KW_DESC:
                {
                alt9=7;
                }
                break;
            case KW_SHOW:
                {
                switch ( input.LA(2) ) {
                case KW_GRANT:
                    {
                    alt9=23;
                    }
                    break;
                case KW_FORMATTED:
                case KW_TABLE:
                case KW_INDEX:
                case KW_TBLPROPERTIES:
                case KW_DATABASES:
                case KW_SCHEMAS:
                case KW_TABLES:
                case KW_FUNCTIONS:
                case KW_PARTITIONS:
                case KW_LOCKS:
                case KW_INDEXES:
                    {
                    alt9=8;
                    }
                    break;
                case Identifier:
                    {
                    alt9=24;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("325:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 7, input);

                    throw nvae;
                }

                }
                break;
            case KW_MSCK:
                {
                alt9=9;
                }
                break;
            case KW_ANALYZE:
                {
                alt9=16;
                }
                break;
            case KW_LOCK:
                {
                alt9=17;
                }
                break;
            case KW_UNLOCK:
                {
                alt9=18;
                }
                break;
            case KW_GRANT:
                {
                int LA9_12 = input.LA(2);

                if ( (LA9_12==Identifier) ) {
                    alt9=25;
                }
                else if ( (LA9_12==KW_CREATE||LA9_12==KW_DROP||LA9_12==KW_INDEX||LA9_12==KW_ALTER||LA9_12==KW_LOCK||(LA9_12>=KW_ALL && LA9_12<=KW_SHOW_DATABASE)) ) {
                    alt9=21;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("325:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 12, input);

                    throw nvae;
                }
                }
                break;
            case KW_REVOKE:
                {
                int LA9_13 = input.LA(2);

                if ( (LA9_13==KW_CREATE||LA9_13==KW_DROP||LA9_13==KW_INDEX||LA9_13==KW_ALTER||LA9_13==KW_LOCK||(LA9_13>=KW_ALL && LA9_13<=KW_SHOW_DATABASE)) ) {
                    alt9=22;
                }
                else if ( (LA9_13==Identifier) ) {
                    alt9=26;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("325:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 13, input);

                    throw nvae;
                }
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("325:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:328:7: createDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createDatabaseStatement_in_ddlStatement1134);
                    createDatabaseStatement24=createDatabaseStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createDatabaseStatement24.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:329:7: switchDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_switchDatabaseStatement_in_ddlStatement1142);
                    switchDatabaseStatement25=switchDatabaseStatement();
                    _fsp--;

                    adaptor.addChild(root_0, switchDatabaseStatement25.getTree());

                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:330:7: dropDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropDatabaseStatement_in_ddlStatement1150);
                    dropDatabaseStatement26=dropDatabaseStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropDatabaseStatement26.getTree());

                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:331:7: createTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createTableStatement_in_ddlStatement1158);
                    createTableStatement27=createTableStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createTableStatement27.getTree());

                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:332:7: dropTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropTableStatement_in_ddlStatement1166);
                    dropTableStatement28=dropTableStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropTableStatement28.getTree());

                    }
                    break;
                case 6 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:333:7: alterStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatement_in_ddlStatement1174);
                    alterStatement29=alterStatement();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatement29.getTree());

                    }
                    break;
                case 7 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:334:7: descStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_descStatement_in_ddlStatement1182);
                    descStatement30=descStatement();
                    _fsp--;

                    adaptor.addChild(root_0, descStatement30.getTree());

                    }
                    break;
                case 8 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:335:7: showStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_showStatement_in_ddlStatement1190);
                    showStatement31=showStatement();
                    _fsp--;

                    adaptor.addChild(root_0, showStatement31.getTree());

                    }
                    break;
                case 9 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:336:7: metastoreCheck
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_metastoreCheck_in_ddlStatement1198);
                    metastoreCheck32=metastoreCheck();
                    _fsp--;

                    adaptor.addChild(root_0, metastoreCheck32.getTree());

                    }
                    break;
                case 10 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:337:7: createViewStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createViewStatement_in_ddlStatement1206);
                    createViewStatement33=createViewStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createViewStatement33.getTree());

                    }
                    break;
                case 11 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:338:7: dropViewStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropViewStatement_in_ddlStatement1214);
                    dropViewStatement34=dropViewStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropViewStatement34.getTree());

                    }
                    break;
                case 12 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:339:7: createFunctionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createFunctionStatement_in_ddlStatement1222);
                    createFunctionStatement35=createFunctionStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createFunctionStatement35.getTree());

                    }
                    break;
                case 13 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:340:7: createIndexStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createIndexStatement_in_ddlStatement1230);
                    createIndexStatement36=createIndexStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createIndexStatement36.getTree());

                    }
                    break;
                case 14 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:341:7: dropIndexStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropIndexStatement_in_ddlStatement1238);
                    dropIndexStatement37=dropIndexStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropIndexStatement37.getTree());

                    }
                    break;
                case 15 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:342:7: dropFunctionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropFunctionStatement_in_ddlStatement1246);
                    dropFunctionStatement38=dropFunctionStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropFunctionStatement38.getTree());

                    }
                    break;
                case 16 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:343:7: analyzeStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_analyzeStatement_in_ddlStatement1254);
                    analyzeStatement39=analyzeStatement();
                    _fsp--;

                    adaptor.addChild(root_0, analyzeStatement39.getTree());

                    }
                    break;
                case 17 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:344:7: lockStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lockStatement_in_ddlStatement1262);
                    lockStatement40=lockStatement();
                    _fsp--;

                    adaptor.addChild(root_0, lockStatement40.getTree());

                    }
                    break;
                case 18 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:345:7: unlockStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unlockStatement_in_ddlStatement1270);
                    unlockStatement41=unlockStatement();
                    _fsp--;

                    adaptor.addChild(root_0, unlockStatement41.getTree());

                    }
                    break;
                case 19 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:346:7: createRoleStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createRoleStatement_in_ddlStatement1278);
                    createRoleStatement42=createRoleStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createRoleStatement42.getTree());

                    }
                    break;
                case 20 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:347:7: dropRoleStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropRoleStatement_in_ddlStatement1286);
                    dropRoleStatement43=dropRoleStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropRoleStatement43.getTree());

                    }
                    break;
                case 21 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:348:7: grantPrivileges
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_grantPrivileges_in_ddlStatement1294);
                    grantPrivileges44=grantPrivileges();
                    _fsp--;

                    adaptor.addChild(root_0, grantPrivileges44.getTree());

                    }
                    break;
                case 22 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:349:7: revokePrivileges
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_revokePrivileges_in_ddlStatement1302);
                    revokePrivileges45=revokePrivileges();
                    _fsp--;

                    adaptor.addChild(root_0, revokePrivileges45.getTree());

                    }
                    break;
                case 23 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:350:7: showGrants
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_showGrants_in_ddlStatement1310);
                    showGrants46=showGrants();
                    _fsp--;

                    adaptor.addChild(root_0, showGrants46.getTree());

                    }
                    break;
                case 24 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:351:7: showRoleGrants
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_showRoleGrants_in_ddlStatement1318);
                    showRoleGrants47=showRoleGrants();
                    _fsp--;

                    adaptor.addChild(root_0, showRoleGrants47.getTree());

                    }
                    break;
                case 25 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:352:7: grantRole
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_grantRole_in_ddlStatement1326);
                    grantRole48=grantRole();
                    _fsp--;

                    adaptor.addChild(root_0, grantRole48.getTree());

                    }
                    break;
                case 26 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:353:7: revokeRole
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_revokeRole_in_ddlStatement1334);
                    revokeRole49=revokeRole();
                    _fsp--;

                    adaptor.addChild(root_0, revokeRole49.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end ddlStatement

    public static class ifExists_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ifExists
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:356:1: ifExists : KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) ;
    public final ifExists_return ifExists() throws RecognitionException {
        ifExists_return retval = new ifExists_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IF50=null;
        Token KW_EXISTS51=null;

        CommonTree KW_IF50_tree=null;
        CommonTree KW_EXISTS51_tree=null;
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

         msgs.push("if exists clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:359:5: ( KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:359:7: KW_IF KW_EXISTS
            {
            KW_IF50=(Token)input.LT(1);
            match(input,KW_IF,FOLLOW_KW_IF_in_ifExists1361); 
            stream_KW_IF.add(KW_IF50);

            KW_EXISTS51=(Token)input.LT(1);
            match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifExists1363); 
            stream_KW_EXISTS.add(KW_EXISTS51);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 360:5: -> ^( TOK_IFEXISTS )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:360:8: ^( TOK_IFEXISTS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_IFEXISTS, "TOK_IFEXISTS"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end ifExists

    public static class restrictOrCascade_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start restrictOrCascade
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:363:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );
    public final restrictOrCascade_return restrictOrCascade() throws RecognitionException {
        restrictOrCascade_return retval = new restrictOrCascade_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_RESTRICT52=null;
        Token KW_CASCADE53=null;

        CommonTree KW_RESTRICT52_tree=null;
        CommonTree KW_CASCADE53_tree=null;
        RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
        RewriteRuleTokenStream stream_KW_RESTRICT=new RewriteRuleTokenStream(adaptor,"token KW_RESTRICT");

         msgs.push("restrict or cascade clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:366:5: ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==KW_RESTRICT) ) {
                alt10=1;
            }
            else if ( (LA10_0==KW_CASCADE) ) {
                alt10=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("363:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:366:7: KW_RESTRICT
                    {
                    KW_RESTRICT52=(Token)input.LT(1);
                    match(input,KW_RESTRICT,FOLLOW_KW_RESTRICT_in_restrictOrCascade1400); 
                    stream_KW_RESTRICT.add(KW_RESTRICT52);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 367:5: -> ^( TOK_RESTRICT )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:367:8: ^( TOK_RESTRICT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RESTRICT, "TOK_RESTRICT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:368:7: KW_CASCADE
                    {
                    KW_CASCADE53=(Token)input.LT(1);
                    match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_restrictOrCascade1418); 
                    stream_KW_CASCADE.add(KW_CASCADE53);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 369:5: -> ^( TOK_CASCADE )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:369:8: ^( TOK_CASCADE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CASCADE, "TOK_CASCADE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end restrictOrCascade

    public static class ifNotExists_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ifNotExists
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:372:1: ifNotExists : KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) ;
    public final ifNotExists_return ifNotExists() throws RecognitionException {
        ifNotExists_return retval = new ifNotExists_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IF54=null;
        Token KW_NOT55=null;
        Token KW_EXISTS56=null;

        CommonTree KW_IF54_tree=null;
        CommonTree KW_NOT55_tree=null;
        CommonTree KW_EXISTS56_tree=null;
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

         msgs.push("if not exists clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:375:5: ( KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:375:7: KW_IF KW_NOT KW_EXISTS
            {
            KW_IF54=(Token)input.LT(1);
            match(input,KW_IF,FOLLOW_KW_IF_in_ifNotExists1455); 
            stream_KW_IF.add(KW_IF54);

            KW_NOT55=(Token)input.LT(1);
            match(input,KW_NOT,FOLLOW_KW_NOT_in_ifNotExists1457); 
            stream_KW_NOT.add(KW_NOT55);

            KW_EXISTS56=(Token)input.LT(1);
            match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifNotExists1459); 
            stream_KW_EXISTS.add(KW_EXISTS56);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 376:5: -> ^( TOK_IFNOTEXISTS )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:376:8: ^( TOK_IFNOTEXISTS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_IFNOTEXISTS, "TOK_IFNOTEXISTS"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end ifNotExists

    public static class orReplace_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orReplace
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:379:1: orReplace : KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) ;
    public final orReplace_return orReplace() throws RecognitionException {
        orReplace_return retval = new orReplace_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_OR57=null;
        Token KW_REPLACE58=null;

        CommonTree KW_OR57_tree=null;
        CommonTree KW_REPLACE58_tree=null;
        RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
        RewriteRuleTokenStream stream_KW_OR=new RewriteRuleTokenStream(adaptor,"token KW_OR");

         msgs.push("or replace clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:382:5: ( KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:382:7: KW_OR KW_REPLACE
            {
            KW_OR57=(Token)input.LT(1);
            match(input,KW_OR,FOLLOW_KW_OR_in_orReplace1496); 
            stream_KW_OR.add(KW_OR57);

            KW_REPLACE58=(Token)input.LT(1);
            match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_orReplace1498); 
            stream_KW_REPLACE.add(KW_REPLACE58);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 383:5: -> ^( TOK_ORREPLACE )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:383:8: ^( TOK_ORREPLACE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ORREPLACE, "TOK_ORREPLACE"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end orReplace

    public static class createDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createDatabaseStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:387:1: createDatabaseStatement : KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) ;
    public final createDatabaseStatement_return createDatabaseStatement() throws RecognitionException {
        createDatabaseStatement_return retval = new createDatabaseStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_CREATE59=null;
        Token KW_DATABASE60=null;
        Token KW_SCHEMA61=null;
        Token KW_WITH65=null;
        Token KW_DBPROPERTIES66=null;
        dbProperties_return dbprops = null;

        ifNotExists_return ifNotExists62 = null;

        databaseComment_return databaseComment63 = null;

        dbLocation_return dbLocation64 = null;


        CommonTree name_tree=null;
        CommonTree KW_CREATE59_tree=null;
        CommonTree KW_DATABASE60_tree=null;
        CommonTree KW_SCHEMA61_tree=null;
        CommonTree KW_WITH65_tree=null;
        CommonTree KW_DBPROPERTIES66_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
        RewriteRuleSubtreeStream stream_dbLocation=new RewriteRuleSubtreeStream(adaptor,"rule dbLocation");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_databaseComment=new RewriteRuleSubtreeStream(adaptor,"rule databaseComment");
         msgs.push("create database statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:390:5: ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:390:7: KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
            {
            KW_CREATE59=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement1536); 
            stream_KW_CREATE.add(KW_CREATE59);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:390:17: ( KW_DATABASE | KW_SCHEMA )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==KW_DATABASE) ) {
                alt11=1;
            }
            else if ( (LA11_0==KW_SCHEMA) ) {
                alt11=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("390:17: ( KW_DATABASE | KW_SCHEMA )", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:390:18: KW_DATABASE
                    {
                    KW_DATABASE60=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement1539); 
                    stream_KW_DATABASE.add(KW_DATABASE60);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:390:30: KW_SCHEMA
                    {
                    KW_SCHEMA61=(Token)input.LT(1);
                    match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement1541); 
                    stream_KW_SCHEMA.add(KW_SCHEMA61);


                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:391:9: ( ifNotExists )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==KW_IF) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:391:9: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement1552);
                    ifNotExists62=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists62.getTree());

                    }
                    break;

            }

            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createDatabaseStatement1565); 
            stream_Identifier.add(name);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:393:9: ( databaseComment )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==KW_COMMENT) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:393:9: databaseComment
                    {
                    pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement1575);
                    databaseComment63=databaseComment();
                    _fsp--;

                    stream_databaseComment.add(databaseComment63.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:394:9: ( dbLocation )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==KW_LOCATION) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:394:9: dbLocation
                    {
                    pushFollow(FOLLOW_dbLocation_in_createDatabaseStatement1586);
                    dbLocation64=dbLocation();
                    _fsp--;

                    stream_dbLocation.add(dbLocation64.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:395:9: ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==KW_WITH) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:395:10: KW_WITH KW_DBPROPERTIES dbprops= dbProperties
                    {
                    KW_WITH65=(Token)input.LT(1);
                    match(input,KW_WITH,FOLLOW_KW_WITH_in_createDatabaseStatement1598); 
                    stream_KW_WITH.add(KW_WITH65);

                    KW_DBPROPERTIES66=(Token)input.LT(1);
                    match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement1600); 
                    stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES66);

                    pushFollow(FOLLOW_dbProperties_in_createDatabaseStatement1604);
                    dbprops=dbProperties();
                    _fsp--;

                    stream_dbProperties.add(dbprops.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: dbLocation, ifNotExists, dbprops, databaseComment, name
            // token labels: name
            // rule labels: retval, dbprops
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_dbprops=new RewriteRuleSubtreeStream(adaptor,"token dbprops",dbprops!=null?dbprops.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 396:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:396:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:396:35: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:396:48: ( dbLocation )?
                if ( stream_dbLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_dbLocation.next());

                }
                stream_dbLocation.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:396:60: ( databaseComment )?
                if ( stream_databaseComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseComment.next());

                }
                stream_databaseComment.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:396:77: ( $dbprops)?
                if ( stream_dbprops.hasNext() ) {
                    adaptor.addChild(root_1, stream_dbprops.next());

                }
                stream_dbprops.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createDatabaseStatement

    public static class dbLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dbLocation
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:399:1: dbLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) ;
    public final dbLocation_return dbLocation() throws RecognitionException {
        dbLocation_return retval = new dbLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION67=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION67_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         msgs.push("database location specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:402:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:403:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION67=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_dbLocation1665); 
            stream_KW_LOCATION.add(KW_LOCATION67);

            locn=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_dbLocation1669); 
            stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 403:38: -> ^( TOK_DATABASELOCATION $locn)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:403:41: ^( TOK_DATABASELOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DATABASELOCATION, "TOK_DATABASELOCATION"), root_1);

                adaptor.addChild(root_1, stream_locn.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dbLocation

    public static class dbProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dbProperties
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:406:1: dbProperties : LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) ;
    public final dbProperties_return dbProperties() throws RecognitionException {
        dbProperties_return retval = new dbProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN68=null;
        Token RPAREN70=null;
        dbPropertiesList_return dbPropertiesList69 = null;


        CommonTree LPAREN68_tree=null;
        CommonTree RPAREN70_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_dbPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule dbPropertiesList");
         msgs.push("dbproperties"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:409:5: ( LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:410:7: LPAREN dbPropertiesList RPAREN
            {
            LPAREN68=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_dbProperties1711); 
            stream_LPAREN.add(LPAREN68);

            pushFollow(FOLLOW_dbPropertiesList_in_dbProperties1713);
            dbPropertiesList69=dbPropertiesList();
            _fsp--;

            stream_dbPropertiesList.add(dbPropertiesList69.getTree());
            RPAREN70=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_dbProperties1715); 
            stream_RPAREN.add(RPAREN70);


            // AST REWRITE
            // elements: dbPropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 410:38: -> ^( TOK_DATABASEPROPERTIES dbPropertiesList )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:410:41: ^( TOK_DATABASEPROPERTIES dbPropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DATABASEPROPERTIES, "TOK_DATABASEPROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_dbPropertiesList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dbProperties

    public static class dbPropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dbPropertiesList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:413:1: dbPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) ;
    public final dbPropertiesList_return dbPropertiesList() throws RecognitionException {
        dbPropertiesList_return retval = new dbPropertiesList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA72=null;
        keyValueProperty_return keyValueProperty71 = null;

        keyValueProperty_return keyValueProperty73 = null;


        CommonTree COMMA72_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         msgs.push("database properties list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:416:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:417:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList1756);
            keyValueProperty71=keyValueProperty();
            _fsp--;

            stream_keyValueProperty.add(keyValueProperty71.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:417:24: ( COMMA keyValueProperty )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==COMMA) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:417:25: COMMA keyValueProperty
            	    {
            	    COMMA72=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_dbPropertiesList1759); 
            	    stream_COMMA.add(COMMA72);

            	    pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList1761);
            	    keyValueProperty73=keyValueProperty();
            	    _fsp--;

            	    stream_keyValueProperty.add(keyValueProperty73.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 417:50: -> ^( TOK_DBPROPLIST ( keyValueProperty )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:417:53: ^( TOK_DBPROPLIST ( keyValueProperty )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DBPROPLIST, "TOK_DBPROPLIST"), root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.next());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dbPropertiesList

    public static class switchDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start switchDatabaseStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:421:1: switchDatabaseStatement : KW_USE Identifier -> ^( TOK_SWITCHDATABASE Identifier ) ;
    public final switchDatabaseStatement_return switchDatabaseStatement() throws RecognitionException {
        switchDatabaseStatement_return retval = new switchDatabaseStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_USE74=null;
        Token Identifier75=null;

        CommonTree KW_USE74_tree=null;
        CommonTree Identifier75_tree=null;
        RewriteRuleTokenStream stream_KW_USE=new RewriteRuleTokenStream(adaptor,"token KW_USE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("switch database statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:424:5: ( KW_USE Identifier -> ^( TOK_SWITCHDATABASE Identifier ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:424:7: KW_USE Identifier
            {
            KW_USE74=(Token)input.LT(1);
            match(input,KW_USE,FOLLOW_KW_USE_in_switchDatabaseStatement1800); 
            stream_KW_USE.add(KW_USE74);

            Identifier75=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_switchDatabaseStatement1802); 
            stream_Identifier.add(Identifier75);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 425:5: -> ^( TOK_SWITCHDATABASE Identifier )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:425:8: ^( TOK_SWITCHDATABASE Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SWITCHDATABASE, "TOK_SWITCHDATABASE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end switchDatabaseStatement

    public static class dropDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropDatabaseStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:428:1: dropDatabaseStatement : KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? ) ;
    public final dropDatabaseStatement_return dropDatabaseStatement() throws RecognitionException {
        dropDatabaseStatement_return retval = new dropDatabaseStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP76=null;
        Token KW_DATABASE77=null;
        Token KW_SCHEMA78=null;
        Token Identifier80=null;
        ifExists_return ifExists79 = null;

        restrictOrCascade_return restrictOrCascade81 = null;


        CommonTree KW_DROP76_tree=null;
        CommonTree KW_DATABASE77_tree=null;
        CommonTree KW_SCHEMA78_tree=null;
        CommonTree Identifier80_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop database statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:431:5: ( KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:431:7: KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )?
            {
            KW_DROP76=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropDatabaseStatement1841); 
            stream_KW_DROP.add(KW_DROP76);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:431:15: ( KW_DATABASE | KW_SCHEMA )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==KW_DATABASE) ) {
                alt17=1;
            }
            else if ( (LA17_0==KW_SCHEMA) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("431:15: ( KW_DATABASE | KW_SCHEMA )", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:431:16: KW_DATABASE
                    {
                    KW_DATABASE77=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_dropDatabaseStatement1844); 
                    stream_KW_DATABASE.add(KW_DATABASE77);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:431:28: KW_SCHEMA
                    {
                    KW_SCHEMA78=(Token)input.LT(1);
                    match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_dropDatabaseStatement1846); 
                    stream_KW_SCHEMA.add(KW_SCHEMA78);


                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:431:39: ( ifExists )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==KW_IF) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:431:39: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropDatabaseStatement1849);
                    ifExists79=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists79.getTree());

                    }
                    break;

            }

            Identifier80=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropDatabaseStatement1852); 
            stream_Identifier.add(Identifier80);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:431:60: ( restrictOrCascade )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( ((LA19_0>=KW_RESTRICT && LA19_0<=KW_CASCADE)) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:431:60: restrictOrCascade
                    {
                    pushFollow(FOLLOW_restrictOrCascade_in_dropDatabaseStatement1854);
                    restrictOrCascade81=restrictOrCascade();
                    _fsp--;

                    stream_restrictOrCascade.add(restrictOrCascade81.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ifExists, restrictOrCascade, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 432:5: -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:432:8: ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPDATABASE, "TOK_DROPDATABASE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:432:38: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:432:48: ( restrictOrCascade )?
                if ( stream_restrictOrCascade.hasNext() ) {
                    adaptor.addChild(root_1, stream_restrictOrCascade.next());

                }
                stream_restrictOrCascade.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropDatabaseStatement

    public static class databaseComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start databaseComment
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:435:1: databaseComment : KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) ;
    public final databaseComment_return databaseComment() throws RecognitionException {
        databaseComment_return retval = new databaseComment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT82=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT82_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         msgs.push("database's comment"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:438:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:438:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT82=(Token)input.LT(1);
            match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_databaseComment1900); 
            stream_KW_COMMENT.add(KW_COMMENT82);

            comment=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_databaseComment1904); 
            stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 439:5: -> ^( TOK_DATABASECOMMENT $comment)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:439:8: ^( TOK_DATABASECOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DATABASECOMMENT, "TOK_DATABASECOMMENT"), root_1);

                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end databaseComment

    public static class createTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createTableStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:442:1: createTableStatement : KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? ) ;
    public final createTableStatement_return createTableStatement() throws RecognitionException {
        createTableStatement_return retval = new createTableStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ext=null;
        Token like=null;
        Token KW_CREATE83=null;
        Token KW_TABLE84=null;
        Token LPAREN87=null;
        Token RPAREN89=null;
        Token KW_AS97=null;
        tableName_return name = null;

        tableName_return likeName = null;

        ifNotExists_return ifNotExists85 = null;

        tableLocation_return tableLocation86 = null;

        columnNameTypeList_return columnNameTypeList88 = null;

        tableComment_return tableComment90 = null;

        tablePartition_return tablePartition91 = null;

        tableBuckets_return tableBuckets92 = null;

        tableRowFormat_return tableRowFormat93 = null;

        tableFileFormat_return tableFileFormat94 = null;

        tableLocation_return tableLocation95 = null;

        tablePropertiesPrefixed_return tablePropertiesPrefixed96 = null;

        selectStatement_return selectStatement98 = null;


        CommonTree ext_tree=null;
        CommonTree like_tree=null;
        CommonTree KW_CREATE83_tree=null;
        CommonTree KW_TABLE84_tree=null;
        CommonTree LPAREN87_tree=null;
        CommonTree RPAREN89_tree=null;
        CommonTree KW_AS97_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
        RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_tablePartition=new RewriteRuleSubtreeStream(adaptor,"rule tablePartition");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
         msgs.push("create table statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:445:5: ( KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:445:7: KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )
            {
            KW_CREATE83=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createTableStatement1944); 
            stream_KW_CREATE.add(KW_CREATE83);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:445:17: (ext= KW_EXTERNAL )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==KW_EXTERNAL) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:445:18: ext= KW_EXTERNAL
                    {
                    ext=(Token)input.LT(1);
                    match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_createTableStatement1949); 
                    stream_KW_EXTERNAL.add(ext);


                    }
                    break;

            }

            KW_TABLE84=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createTableStatement1953); 
            stream_KW_TABLE.add(KW_TABLE84);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:445:45: ( ifNotExists )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==KW_IF) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:445:45: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createTableStatement1955);
                    ifNotExists85=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists85.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_tableName_in_createTableStatement1960);
            name=tableName();
            _fsp--;

            stream_tableName.add(name.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:446:7: (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==KW_LIKE) ) {
                alt32=1;
            }
            else if ( (LA32_0==EOF||(LA32_0>=KW_LOCATION && LA32_0<=LPAREN)||LA32_0==KW_COMMENT||LA32_0==KW_AS||LA32_0==KW_TBLPROPERTIES||LA32_0==KW_CLUSTERED||LA32_0==KW_PARTITIONED||LA32_0==KW_ROW||LA32_0==KW_STORED) ) {
                alt32=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("446:7: (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:446:10: like= KW_LIKE likeName= tableName ( tableLocation )?
                    {
                    like=(Token)input.LT(1);
                    match(input,KW_LIKE,FOLLOW_KW_LIKE_in_createTableStatement1973); 
                    stream_KW_LIKE.add(like);

                    pushFollow(FOLLOW_tableName_in_createTableStatement1977);
                    likeName=tableName();
                    _fsp--;

                    stream_tableName.add(likeName.getTree());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:447:10: ( tableLocation )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==KW_LOCATION) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:447:10: tableLocation
                            {
                            pushFollow(FOLLOW_tableLocation_in_createTableStatement1988);
                            tableLocation86=tableLocation();
                            _fsp--;

                            stream_tableLocation.add(tableLocation86.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:448:10: ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )?
                    {
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:448:10: ( LPAREN columnNameTypeList RPAREN )?
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( (LA23_0==LPAREN) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:448:11: LPAREN columnNameTypeList RPAREN
                            {
                            LPAREN87=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_createTableStatement2001); 
                            stream_LPAREN.add(LPAREN87);

                            pushFollow(FOLLOW_columnNameTypeList_in_createTableStatement2003);
                            columnNameTypeList88=columnNameTypeList();
                            _fsp--;

                            stream_columnNameTypeList.add(columnNameTypeList88.getTree());
                            RPAREN89=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_createTableStatement2005); 
                            stream_RPAREN.add(RPAREN89);


                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:449:10: ( tableComment )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==KW_COMMENT) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:449:10: tableComment
                            {
                            pushFollow(FOLLOW_tableComment_in_createTableStatement2018);
                            tableComment90=tableComment();
                            _fsp--;

                            stream_tableComment.add(tableComment90.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:450:10: ( tablePartition )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==KW_PARTITIONED) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:450:10: tablePartition
                            {
                            pushFollow(FOLLOW_tablePartition_in_createTableStatement2030);
                            tablePartition91=tablePartition();
                            _fsp--;

                            stream_tablePartition.add(tablePartition91.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:451:10: ( tableBuckets )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==KW_CLUSTERED) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:451:10: tableBuckets
                            {
                            pushFollow(FOLLOW_tableBuckets_in_createTableStatement2042);
                            tableBuckets92=tableBuckets();
                            _fsp--;

                            stream_tableBuckets.add(tableBuckets92.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:452:10: ( tableRowFormat )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==KW_ROW) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:452:10: tableRowFormat
                            {
                            pushFollow(FOLLOW_tableRowFormat_in_createTableStatement2054);
                            tableRowFormat93=tableRowFormat();
                            _fsp--;

                            stream_tableRowFormat.add(tableRowFormat93.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:453:10: ( tableFileFormat )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==KW_STORED) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:453:10: tableFileFormat
                            {
                            pushFollow(FOLLOW_tableFileFormat_in_createTableStatement2066);
                            tableFileFormat94=tableFileFormat();
                            _fsp--;

                            stream_tableFileFormat.add(tableFileFormat94.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:454:10: ( tableLocation )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==KW_LOCATION) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:454:10: tableLocation
                            {
                            pushFollow(FOLLOW_tableLocation_in_createTableStatement2078);
                            tableLocation95=tableLocation();
                            _fsp--;

                            stream_tableLocation.add(tableLocation95.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:455:10: ( tablePropertiesPrefixed )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==KW_TBLPROPERTIES) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:455:10: tablePropertiesPrefixed
                            {
                            pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement2090);
                            tablePropertiesPrefixed96=tablePropertiesPrefixed();
                            _fsp--;

                            stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed96.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:456:10: ( KW_AS selectStatement )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==KW_AS) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:456:11: KW_AS selectStatement
                            {
                            KW_AS97=(Token)input.LT(1);
                            match(input,KW_AS,FOLLOW_KW_AS_in_createTableStatement2103); 
                            stream_KW_AS.add(KW_AS97);

                            pushFollow(FOLLOW_selectStatement_in_createTableStatement2105);
                            selectStatement98=selectStatement();
                            _fsp--;

                            stream_selectStatement.add(selectStatement98.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: ifNotExists, selectStatement, tableBuckets, tableLocation, columnNameTypeList, tableFileFormat, tablePartition, name, tableRowFormat, likeName, tableComment, ext, tablePropertiesPrefixed
            // token labels: ext
            // rule labels: retval, likeName, name
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_likeName=new RewriteRuleSubtreeStream(adaptor,"token likeName",likeName!=null?likeName.tree:null);
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"token name",name!=null?name.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 458:5: -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:458:8: ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATETABLE, "TOK_CREATETABLE"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:458:32: ( $ext)?
                if ( stream_ext.hasNext() ) {
                    adaptor.addChild(root_1, stream_ext.next());

                }
                stream_ext.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:458:38: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:459:10: ^( TOK_LIKETABLE ( $likeName)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LIKETABLE, "TOK_LIKETABLE"), root_2);

                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:459:26: ( $likeName)?
                if ( stream_likeName.hasNext() ) {
                    adaptor.addChild(root_2, stream_likeName.next());

                }
                stream_likeName.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:460:10: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.next());

                }
                stream_columnNameTypeList.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:461:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.next());

                }
                stream_tableComment.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:462:10: ( tablePartition )?
                if ( stream_tablePartition.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePartition.next());

                }
                stream_tablePartition.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:463:10: ( tableBuckets )?
                if ( stream_tableBuckets.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableBuckets.next());

                }
                stream_tableBuckets.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:464:10: ( tableRowFormat )?
                if ( stream_tableRowFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormat.next());

                }
                stream_tableRowFormat.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:465:10: ( tableFileFormat )?
                if ( stream_tableFileFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableFileFormat.next());

                }
                stream_tableFileFormat.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:466:10: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.next());

                }
                stream_tableLocation.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:467:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.next());

                }
                stream_tablePropertiesPrefixed.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:468:10: ( selectStatement )?
                if ( stream_selectStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_selectStatement.next());

                }
                stream_selectStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createTableStatement

    public static class createIndexStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createIndexStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:472:1: createIndexStatement : KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) ;
    public final createIndexStatement_return createIndexStatement() throws RecognitionException {
        createIndexStatement_return retval = new createIndexStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token indexName=null;
        Token typeName=null;
        Token KW_CREATE99=null;
        Token KW_INDEX100=null;
        Token KW_ON101=null;
        Token KW_TABLE102=null;
        Token LPAREN103=null;
        Token RPAREN104=null;
        Token KW_AS105=null;
        tableName_return tab = null;

        columnNameList_return indexedCols = null;

        autoRebuild_return autoRebuild106 = null;

        indexPropertiesPrefixed_return indexPropertiesPrefixed107 = null;

        indexTblName_return indexTblName108 = null;

        tableRowFormat_return tableRowFormat109 = null;

        tableFileFormat_return tableFileFormat110 = null;

        tableLocation_return tableLocation111 = null;

        tablePropertiesPrefixed_return tablePropertiesPrefixed112 = null;

        indexComment_return indexComment113 = null;


        CommonTree indexName_tree=null;
        CommonTree typeName_tree=null;
        CommonTree KW_CREATE99_tree=null;
        CommonTree KW_INDEX100_tree=null;
        CommonTree KW_ON101_tree=null;
        CommonTree KW_TABLE102_tree=null;
        CommonTree LPAREN103_tree=null;
        CommonTree RPAREN104_tree=null;
        CommonTree KW_AS105_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_indexPropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesPrefixed");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_autoRebuild=new RewriteRuleSubtreeStream(adaptor,"rule autoRebuild");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_indexTblName=new RewriteRuleSubtreeStream(adaptor,"rule indexTblName");
        RewriteRuleSubtreeStream stream_indexComment=new RewriteRuleSubtreeStream(adaptor,"rule indexComment");
         msgs.push("create index statement");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:475:5: ( KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:475:7: KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )?
            {
            KW_CREATE99=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createIndexStatement2296); 
            stream_KW_CREATE.add(KW_CREATE99);

            KW_INDEX100=(Token)input.LT(1);
            match(input,KW_INDEX,FOLLOW_KW_INDEX_in_createIndexStatement2298); 
            stream_KW_INDEX.add(KW_INDEX100);

            indexName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createIndexStatement2302); 
            stream_Identifier.add(indexName);

            KW_ON101=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_createIndexStatement2310); 
            stream_KW_ON.add(KW_ON101);

            KW_TABLE102=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createIndexStatement2312); 
            stream_KW_TABLE.add(KW_TABLE102);

            pushFollow(FOLLOW_tableName_in_createIndexStatement2316);
            tab=tableName();
            _fsp--;

            stream_tableName.add(tab.getTree());
            LPAREN103=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_createIndexStatement2318); 
            stream_LPAREN.add(LPAREN103);

            pushFollow(FOLLOW_columnNameList_in_createIndexStatement2322);
            indexedCols=columnNameList();
            _fsp--;

            stream_columnNameList.add(indexedCols.getTree());
            RPAREN104=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_createIndexStatement2324); 
            stream_RPAREN.add(RPAREN104);

            KW_AS105=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_createIndexStatement2332); 
            stream_KW_AS.add(KW_AS105);

            typeName=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_createIndexStatement2336); 
            stream_StringLiteral.add(typeName);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:478:7: ( autoRebuild )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==KW_WITH) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:478:7: autoRebuild
                    {
                    pushFollow(FOLLOW_autoRebuild_in_createIndexStatement2344);
                    autoRebuild106=autoRebuild();
                    _fsp--;

                    stream_autoRebuild.add(autoRebuild106.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:479:7: ( indexPropertiesPrefixed )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==KW_IDXPROPERTIES) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:479:7: indexPropertiesPrefixed
                    {
                    pushFollow(FOLLOW_indexPropertiesPrefixed_in_createIndexStatement2353);
                    indexPropertiesPrefixed107=indexPropertiesPrefixed();
                    _fsp--;

                    stream_indexPropertiesPrefixed.add(indexPropertiesPrefixed107.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:480:7: ( indexTblName )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==KW_IN) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:480:7: indexTblName
                    {
                    pushFollow(FOLLOW_indexTblName_in_createIndexStatement2362);
                    indexTblName108=indexTblName();
                    _fsp--;

                    stream_indexTblName.add(indexTblName108.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:481:7: ( tableRowFormat )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==KW_ROW) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:481:7: tableRowFormat
                    {
                    pushFollow(FOLLOW_tableRowFormat_in_createIndexStatement2371);
                    tableRowFormat109=tableRowFormat();
                    _fsp--;

                    stream_tableRowFormat.add(tableRowFormat109.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:482:7: ( tableFileFormat )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==KW_STORED) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:482:7: tableFileFormat
                    {
                    pushFollow(FOLLOW_tableFileFormat_in_createIndexStatement2380);
                    tableFileFormat110=tableFileFormat();
                    _fsp--;

                    stream_tableFileFormat.add(tableFileFormat110.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:483:7: ( tableLocation )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==KW_LOCATION) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:483:7: tableLocation
                    {
                    pushFollow(FOLLOW_tableLocation_in_createIndexStatement2389);
                    tableLocation111=tableLocation();
                    _fsp--;

                    stream_tableLocation.add(tableLocation111.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:484:7: ( tablePropertiesPrefixed )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==KW_TBLPROPERTIES) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:484:7: tablePropertiesPrefixed
                    {
                    pushFollow(FOLLOW_tablePropertiesPrefixed_in_createIndexStatement2398);
                    tablePropertiesPrefixed112=tablePropertiesPrefixed();
                    _fsp--;

                    stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed112.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:485:7: ( indexComment )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==KW_COMMENT) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:485:7: indexComment
                    {
                    pushFollow(FOLLOW_indexComment_in_createIndexStatement2407);
                    indexComment113=indexComment();
                    _fsp--;

                    stream_indexComment.add(indexComment113.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: typeName, indexName, autoRebuild, tableFileFormat, tablePropertiesPrefixed, indexedCols, tab, indexPropertiesPrefixed, indexTblName, tableLocation, tableRowFormat, indexComment
            // token labels: typeName, indexName
            // rule labels: indexedCols, retval, tab
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_typeName=new RewriteRuleTokenStream(adaptor,"token typeName",typeName);
            RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
            RewriteRuleSubtreeStream stream_indexedCols=new RewriteRuleSubtreeStream(adaptor,"token indexedCols",indexedCols!=null?indexedCols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"token tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 486:5: -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:486:7: ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEINDEX, "TOK_CREATEINDEX"), root_1);

                adaptor.addChild(root_1, stream_indexName.next());
                adaptor.addChild(root_1, stream_typeName.next());
                adaptor.addChild(root_1, stream_tab.next());
                adaptor.addChild(root_1, stream_indexedCols.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:487:9: ( autoRebuild )?
                if ( stream_autoRebuild.hasNext() ) {
                    adaptor.addChild(root_1, stream_autoRebuild.next());

                }
                stream_autoRebuild.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:488:9: ( indexPropertiesPrefixed )?
                if ( stream_indexPropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexPropertiesPrefixed.next());

                }
                stream_indexPropertiesPrefixed.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:489:9: ( indexTblName )?
                if ( stream_indexTblName.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexTblName.next());

                }
                stream_indexTblName.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:490:9: ( tableRowFormat )?
                if ( stream_tableRowFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormat.next());

                }
                stream_tableRowFormat.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:491:9: ( tableFileFormat )?
                if ( stream_tableFileFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableFileFormat.next());

                }
                stream_tableFileFormat.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:492:9: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.next());

                }
                stream_tableLocation.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:493:9: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.next());

                }
                stream_tablePropertiesPrefixed.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:494:9: ( indexComment )?
                if ( stream_indexComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexComment.next());

                }
                stream_indexComment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createIndexStatement

    public static class indexComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start indexComment
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:497:1: indexComment : KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) ;
    public final indexComment_return indexComment() throws RecognitionException {
        indexComment_return retval = new indexComment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT114=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT114_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         msgs.push("comment on an index");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:500:9: ( KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:501:17: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT114=(Token)input.LT(1);
            match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_indexComment2564); 
            stream_KW_COMMENT.add(KW_COMMENT114);

            comment=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_indexComment2568); 
            stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 501:51: -> ^( TOK_INDEXCOMMENT $comment)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:501:54: ^( TOK_INDEXCOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INDEXCOMMENT, "TOK_INDEXCOMMENT"), root_1);

                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end indexComment

    public static class autoRebuild_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start autoRebuild
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:504:1: autoRebuild : KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) ;
    public final autoRebuild_return autoRebuild() throws RecognitionException {
        autoRebuild_return retval = new autoRebuild_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_WITH115=null;
        Token KW_DEFERRED116=null;
        Token KW_REBUILD117=null;

        CommonTree KW_WITH115_tree=null;
        CommonTree KW_DEFERRED116_tree=null;
        CommonTree KW_REBUILD117_tree=null;
        RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_DEFERRED=new RewriteRuleTokenStream(adaptor,"token KW_DEFERRED");

         msgs.push("auto rebuild index");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:507:5: ( KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:507:7: KW_WITH KW_DEFERRED KW_REBUILD
            {
            KW_WITH115=(Token)input.LT(1);
            match(input,KW_WITH,FOLLOW_KW_WITH_in_autoRebuild2609); 
            stream_KW_WITH.add(KW_WITH115);

            KW_DEFERRED116=(Token)input.LT(1);
            match(input,KW_DEFERRED,FOLLOW_KW_DEFERRED_in_autoRebuild2611); 
            stream_KW_DEFERRED.add(KW_DEFERRED116);

            KW_REBUILD117=(Token)input.LT(1);
            match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_autoRebuild2613); 
            stream_KW_REBUILD.add(KW_REBUILD117);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 508:5: -> ^( TOK_DEFERRED_REBUILDINDEX )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:508:7: ^( TOK_DEFERRED_REBUILDINDEX )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DEFERRED_REBUILDINDEX, "TOK_DEFERRED_REBUILDINDEX"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end autoRebuild

    public static class indexTblName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start indexTblName
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:511:1: indexTblName : KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) ;
    public final indexTblName_return indexTblName() throws RecognitionException {
        indexTblName_return retval = new indexTblName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IN118=null;
        Token KW_TABLE119=null;
        tableName_return indexTbl = null;


        CommonTree KW_IN118_tree=null;
        CommonTree KW_TABLE119_tree=null;
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         msgs.push("index table name");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:514:5: ( KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:514:7: KW_IN KW_TABLE indexTbl= tableName
            {
            KW_IN118=(Token)input.LT(1);
            match(input,KW_IN,FOLLOW_KW_IN_in_indexTblName2649); 
            stream_KW_IN.add(KW_IN118);

            KW_TABLE119=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_indexTblName2651); 
            stream_KW_TABLE.add(KW_TABLE119);

            pushFollow(FOLLOW_tableName_in_indexTblName2655);
            indexTbl=tableName();
            _fsp--;

            stream_tableName.add(indexTbl.getTree());

            // AST REWRITE
            // elements: indexTbl
            // token labels: 
            // rule labels: retval, indexTbl
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_indexTbl=new RewriteRuleSubtreeStream(adaptor,"token indexTbl",indexTbl!=null?indexTbl.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 515:5: -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:515:7: ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEINDEX_INDEXTBLNAME, "TOK_CREATEINDEX_INDEXTBLNAME"), root_1);

                adaptor.addChild(root_1, stream_indexTbl.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end indexTblName

    public static class indexPropertiesPrefixed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start indexPropertiesPrefixed
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:518:1: indexPropertiesPrefixed : KW_IDXPROPERTIES indexProperties ;
    public final indexPropertiesPrefixed_return indexPropertiesPrefixed() throws RecognitionException {
        indexPropertiesPrefixed_return retval = new indexPropertiesPrefixed_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IDXPROPERTIES120=null;
        indexProperties_return indexProperties121 = null;


        CommonTree KW_IDXPROPERTIES120_tree=null;

         msgs.push("table properties with prefix"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:521:5: ( KW_IDXPROPERTIES indexProperties )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:522:9: KW_IDXPROPERTIES indexProperties
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_IDXPROPERTIES120=(Token)input.LT(1);
            match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed2702); 
            pushFollow(FOLLOW_indexProperties_in_indexPropertiesPrefixed2705);
            indexProperties121=indexProperties();
            _fsp--;

            adaptor.addChild(root_0, indexProperties121.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end indexPropertiesPrefixed

    public static class indexProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start indexProperties
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:525:1: indexProperties : LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) ;
    public final indexProperties_return indexProperties() throws RecognitionException {
        indexProperties_return retval = new indexProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN122=null;
        Token RPAREN124=null;
        indexPropertiesList_return indexPropertiesList123 = null;


        CommonTree LPAREN122_tree=null;
        CommonTree RPAREN124_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_indexPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesList");
         msgs.push("index properties"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:528:5: ( LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:529:7: LPAREN indexPropertiesList RPAREN
            {
            LPAREN122=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_indexProperties2738); 
            stream_LPAREN.add(LPAREN122);

            pushFollow(FOLLOW_indexPropertiesList_in_indexProperties2740);
            indexPropertiesList123=indexPropertiesList();
            _fsp--;

            stream_indexPropertiesList.add(indexPropertiesList123.getTree());
            RPAREN124=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_indexProperties2742); 
            stream_RPAREN.add(RPAREN124);


            // AST REWRITE
            // elements: indexPropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 529:41: -> ^( TOK_INDEXPROPERTIES indexPropertiesList )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:529:44: ^( TOK_INDEXPROPERTIES indexPropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INDEXPROPERTIES, "TOK_INDEXPROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_indexPropertiesList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end indexProperties

    public static class indexPropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start indexPropertiesList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:532:1: indexPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) ;
    public final indexPropertiesList_return indexPropertiesList() throws RecognitionException {
        indexPropertiesList_return retval = new indexPropertiesList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA126=null;
        keyValueProperty_return keyValueProperty125 = null;

        keyValueProperty_return keyValueProperty127 = null;


        CommonTree COMMA126_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         msgs.push("index properties list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:535:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:536:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList2783);
            keyValueProperty125=keyValueProperty();
            _fsp--;

            stream_keyValueProperty.add(keyValueProperty125.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:536:24: ( COMMA keyValueProperty )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==COMMA) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:536:25: COMMA keyValueProperty
            	    {
            	    COMMA126=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_indexPropertiesList2786); 
            	    stream_COMMA.add(COMMA126);

            	    pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList2788);
            	    keyValueProperty127=keyValueProperty();
            	    _fsp--;

            	    stream_keyValueProperty.add(keyValueProperty127.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 536:50: -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:536:53: ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INDEXPROPLIST, "TOK_INDEXPROPLIST"), root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.next());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end indexPropertiesList

    public static class dropIndexStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropIndexStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:539:1: dropIndexStatement : KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) ;
    public final dropIndexStatement_return dropIndexStatement() throws RecognitionException {
        dropIndexStatement_return retval = new dropIndexStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token indexName=null;
        Token KW_DROP128=null;
        Token KW_INDEX129=null;
        Token KW_ON131=null;
        tableName_return tab = null;

        ifExists_return ifExists130 = null;


        CommonTree indexName_tree=null;
        CommonTree KW_DROP128_tree=null;
        CommonTree KW_INDEX129_tree=null;
        CommonTree KW_ON131_tree=null;
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop index statement");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:542:5: ( KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:542:7: KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName
            {
            KW_DROP128=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropIndexStatement2826); 
            stream_KW_DROP.add(KW_DROP128);

            KW_INDEX129=(Token)input.LT(1);
            match(input,KW_INDEX,FOLLOW_KW_INDEX_in_dropIndexStatement2828); 
            stream_KW_INDEX.add(KW_INDEX129);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:542:24: ( ifExists )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==KW_IF) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:542:24: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropIndexStatement2830);
                    ifExists130=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists130.getTree());

                    }
                    break;

            }

            indexName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropIndexStatement2835); 
            stream_Identifier.add(indexName);

            KW_ON131=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_dropIndexStatement2837); 
            stream_KW_ON.add(KW_ON131);

            pushFollow(FOLLOW_tableName_in_dropIndexStatement2841);
            tab=tableName();
            _fsp--;

            stream_tableName.add(tab.getTree());

            // AST REWRITE
            // elements: indexName, tab, ifExists
            // token labels: indexName
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"token tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 543:5: -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:543:7: ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPINDEX, "TOK_DROPINDEX"), root_1);

                adaptor.addChild(root_1, stream_indexName.next());
                adaptor.addChild(root_1, stream_tab.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:543:39: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropIndexStatement

    public static class dropTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropTableStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:546:1: dropTableStatement : KW_DROP KW_TABLE ( ifExists )? tableName -> ^( TOK_DROPTABLE tableName ( ifExists )? ) ;
    public final dropTableStatement_return dropTableStatement() throws RecognitionException {
        dropTableStatement_return retval = new dropTableStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP132=null;
        Token KW_TABLE133=null;
        ifExists_return ifExists134 = null;

        tableName_return tableName135 = null;


        CommonTree KW_DROP132_tree=null;
        CommonTree KW_TABLE133_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:549:5: ( KW_DROP KW_TABLE ( ifExists )? tableName -> ^( TOK_DROPTABLE tableName ( ifExists )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:549:7: KW_DROP KW_TABLE ( ifExists )? tableName
            {
            KW_DROP132=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropTableStatement2886); 
            stream_KW_DROP.add(KW_DROP132);

            KW_TABLE133=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_dropTableStatement2888); 
            stream_KW_TABLE.add(KW_TABLE133);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:549:24: ( ifExists )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==KW_IF) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:549:24: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropTableStatement2890);
                    ifExists134=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists134.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_tableName_in_dropTableStatement2893);
            tableName135=tableName();
            _fsp--;

            stream_tableName.add(tableName135.getTree());

            // AST REWRITE
            // elements: tableName, ifExists
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 549:44: -> ^( TOK_DROPTABLE tableName ( ifExists )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:549:47: ^( TOK_DROPTABLE tableName ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPTABLE, "TOK_DROPTABLE"), root_1);

                adaptor.addChild(root_1, stream_tableName.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:549:73: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropTableStatement

    public static class alterStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:552:1: alterStatement : KW_ALTER ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix | KW_INDEX alterIndexStatementSuffix | KW_DATABASE alterDatabaseStatementSuffix ) ;
    public final alterStatement_return alterStatement() throws RecognitionException {
        alterStatement_return retval = new alterStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ALTER136=null;
        Token KW_TABLE137=null;
        Token KW_VIEW139=null;
        Token KW_INDEX141=null;
        Token KW_DATABASE143=null;
        alterTableStatementSuffix_return alterTableStatementSuffix138 = null;

        alterViewStatementSuffix_return alterViewStatementSuffix140 = null;

        alterIndexStatementSuffix_return alterIndexStatementSuffix142 = null;

        alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix144 = null;


        CommonTree KW_ALTER136_tree=null;
        CommonTree KW_TABLE137_tree=null;
        CommonTree KW_VIEW139_tree=null;
        CommonTree KW_INDEX141_tree=null;
        CommonTree KW_DATABASE143_tree=null;

         msgs.push("alter statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:555:5: ( KW_ALTER ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix | KW_INDEX alterIndexStatementSuffix | KW_DATABASE alterDatabaseStatementSuffix ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:555:7: KW_ALTER ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix | KW_INDEX alterIndexStatementSuffix | KW_DATABASE alterDatabaseStatementSuffix )
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_ALTER136=(Token)input.LT(1);
            match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement2931); 
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:556:9: ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix | KW_INDEX alterIndexStatementSuffix | KW_DATABASE alterDatabaseStatementSuffix )
            int alt44=4;
            switch ( input.LA(1) ) {
            case KW_TABLE:
                {
                alt44=1;
                }
                break;
            case KW_VIEW:
                {
                alt44=2;
                }
                break;
            case KW_INDEX:
                {
                alt44=3;
                }
                break;
            case KW_DATABASE:
                {
                alt44=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("556:9: ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix | KW_INDEX alterIndexStatementSuffix | KW_DATABASE alterDatabaseStatementSuffix )", 44, 0, input);

                throw nvae;
            }

            switch (alt44) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:557:13: KW_TABLE alterTableStatementSuffix
                    {
                    KW_TABLE137=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatement2956); 
                    pushFollow(FOLLOW_alterTableStatementSuffix_in_alterStatement2959);
                    alterTableStatementSuffix138=alterTableStatementSuffix();
                    _fsp--;

                    adaptor.addChild(root_0, alterTableStatementSuffix138.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:559:13: KW_VIEW alterViewStatementSuffix
                    {
                    KW_VIEW139=(Token)input.LT(1);
                    match(input,KW_VIEW,FOLLOW_KW_VIEW_in_alterStatement2983); 
                    pushFollow(FOLLOW_alterViewStatementSuffix_in_alterStatement2986);
                    alterViewStatementSuffix140=alterViewStatementSuffix();
                    _fsp--;

                    adaptor.addChild(root_0, alterViewStatementSuffix140.getTree());

                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:561:13: KW_INDEX alterIndexStatementSuffix
                    {
                    KW_INDEX141=(Token)input.LT(1);
                    match(input,KW_INDEX,FOLLOW_KW_INDEX_in_alterStatement3010); 
                    pushFollow(FOLLOW_alterIndexStatementSuffix_in_alterStatement3013);
                    alterIndexStatementSuffix142=alterIndexStatementSuffix();
                    _fsp--;

                    adaptor.addChild(root_0, alterIndexStatementSuffix142.getTree());

                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:563:13: KW_DATABASE alterDatabaseStatementSuffix
                    {
                    KW_DATABASE143=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_alterStatement3037); 
                    pushFollow(FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3040);
                    alterDatabaseStatementSuffix144=alterDatabaseStatementSuffix();
                    _fsp--;

                    adaptor.addChild(root_0, alterDatabaseStatementSuffix144.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatement

    public static class alterTableStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterTableStatementSuffix
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:567:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );
    public final alterTableStatementSuffix_return alterTableStatementSuffix() throws RecognitionException {
        alterTableStatementSuffix_return retval = new alterTableStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterStatementSuffixRename_return alterStatementSuffixRename145 = null;

        alterStatementSuffixAddCol_return alterStatementSuffixAddCol146 = null;

        alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol147 = null;

        alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions148 = null;

        alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions149 = null;

        alterStatementSuffixTouch_return alterStatementSuffixTouch150 = null;

        alterStatementSuffixArchive_return alterStatementSuffixArchive151 = null;

        alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive152 = null;

        alterStatementSuffixProperties_return alterStatementSuffixProperties153 = null;

        alterTblPartitionStatement_return alterTblPartitionStatement154 = null;

        alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby155 = null;



         msgs.push("alter table statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:570:5: ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby )
            int alt45=11;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==Identifier) ) {
                switch ( input.LA(2) ) {
                case KW_NOT:
                case KW_CLUSTERED:
                    {
                    alt45=11;
                    }
                    break;
                case KW_ADD:
                    {
                    int LA45_3 = input.LA(3);

                    if ( (LA45_3==KW_IF||LA45_3==KW_PARTITION) ) {
                        alt45=5;
                    }
                    else if ( (LA45_3==KW_COLUMNS) ) {
                        alt45=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("567:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );", 45, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_ARCHIVE:
                    {
                    alt45=7;
                    }
                    break;
                case KW_TOUCH:
                    {
                    alt45=6;
                    }
                    break;
                case KW_RENAME:
                    {
                    int LA45_6 = input.LA(3);

                    if ( (LA45_6==KW_TO) ) {
                        alt45=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("567:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );", 45, 6, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_DROP:
                    {
                    alt45=4;
                    }
                    break;
                case KW_UNARCHIVE:
                    {
                    alt45=8;
                    }
                    break;
                case KW_SET:
                    {
                    int LA45_9 = input.LA(3);

                    if ( (LA45_9==KW_LOCATION||(LA45_9>=KW_SERDE && LA45_9<=KW_FILEFORMAT)) ) {
                        alt45=10;
                    }
                    else if ( (LA45_9==KW_TBLPROPERTIES) ) {
                        alt45=9;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("567:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );", 45, 9, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_CHANGE:
                    {
                    alt45=3;
                    }
                    break;
                case KW_CONCATENATE:
                case KW_ENABLE:
                case KW_DISABLE:
                case KW_PARTITION:
                    {
                    alt45=10;
                    }
                    break;
                case KW_REPLACE:
                    {
                    alt45=2;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("567:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );", 45, 1, input);

                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("567:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:570:7: alterStatementSuffixRename
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3077);
                    alterStatementSuffixRename145=alterStatementSuffixRename();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixRename145.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:571:7: alterStatementSuffixAddCol
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix3085);
                    alterStatementSuffixAddCol146=alterStatementSuffixAddCol();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixAddCol146.getTree());

                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:572:7: alterStatementSuffixRenameCol
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix3093);
                    alterStatementSuffixRenameCol147=alterStatementSuffixRenameCol();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixRenameCol147.getTree());

                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:573:7: alterStatementSuffixDropPartitions
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3101);
                    alterStatementSuffixDropPartitions148=alterStatementSuffixDropPartitions();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixDropPartitions148.getTree());

                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:574:7: alterStatementSuffixAddPartitions
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3109);
                    alterStatementSuffixAddPartitions149=alterStatementSuffixAddPartitions();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixAddPartitions149.getTree());

                    }
                    break;
                case 6 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:575:7: alterStatementSuffixTouch
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3117);
                    alterStatementSuffixTouch150=alterStatementSuffixTouch();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixTouch150.getTree());

                    }
                    break;
                case 7 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:576:7: alterStatementSuffixArchive
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3125);
                    alterStatementSuffixArchive151=alterStatementSuffixArchive();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixArchive151.getTree());

                    }
                    break;
                case 8 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:577:7: alterStatementSuffixUnArchive
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3133);
                    alterStatementSuffixUnArchive152=alterStatementSuffixUnArchive();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixUnArchive152.getTree());

                    }
                    break;
                case 9 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:578:7: alterStatementSuffixProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3141);
                    alterStatementSuffixProperties153=alterStatementSuffixProperties();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixProperties153.getTree());

                    }
                    break;
                case 10 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:579:7: alterTblPartitionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix3149);
                    alterTblPartitionStatement154=alterTblPartitionStatement();
                    _fsp--;

                    adaptor.addChild(root_0, alterTblPartitionStatement154.getTree());

                    }
                    break;
                case 11 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:580:7: alterStatementSuffixClusterbySortby
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixClusterbySortby_in_alterTableStatementSuffix3157);
                    alterStatementSuffixClusterbySortby155=alterStatementSuffixClusterbySortby();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixClusterbySortby155.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterTableStatementSuffix

    public static class alterViewStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterViewStatementSuffix
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:583:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) );
    public final alterViewStatementSuffix_return alterViewStatementSuffix() throws RecognitionException {
        alterViewStatementSuffix_return retval = new alterViewStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterViewSuffixProperties_return alterViewSuffixProperties156 = null;

        alterStatementSuffixRename_return alterStatementSuffixRename157 = null;

        alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions158 = null;

        alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions159 = null;


        RewriteRuleSubtreeStream stream_alterStatementSuffixAddPartitions=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixAddPartitions");
        RewriteRuleSubtreeStream stream_alterStatementSuffixRename=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixRename");
        RewriteRuleSubtreeStream stream_alterStatementSuffixDropPartitions=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixDropPartitions");
         msgs.push("alter view statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:586:5: ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) )
            int alt46=4;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==Identifier) ) {
                switch ( input.LA(2) ) {
                case KW_DROP:
                    {
                    alt46=4;
                    }
                    break;
                case KW_SET:
                    {
                    alt46=1;
                    }
                    break;
                case KW_RENAME:
                    {
                    alt46=2;
                    }
                    break;
                case KW_ADD:
                    {
                    alt46=3;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("583:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) );", 46, 1, input);

                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("583:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) );", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:586:7: alterViewSuffixProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix3184);
                    alterViewSuffixProperties156=alterViewSuffixProperties();
                    _fsp--;

                    adaptor.addChild(root_0, alterViewSuffixProperties156.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:587:7: alterStatementSuffixRename
                    {
                    pushFollow(FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix3192);
                    alterStatementSuffixRename157=alterStatementSuffixRename();
                    _fsp--;

                    stream_alterStatementSuffixRename.add(alterStatementSuffixRename157.getTree());

                    // AST REWRITE
                    // elements: alterStatementSuffixRename
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 588:9: -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:588:12: ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERVIEW_RENAME, "TOK_ALTERVIEW_RENAME"), root_1);

                        adaptor.addChild(root_1, stream_alterStatementSuffixRename.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:589:7: alterStatementSuffixAddPartitions
                    {
                    pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix3216);
                    alterStatementSuffixAddPartitions158=alterStatementSuffixAddPartitions();
                    _fsp--;

                    stream_alterStatementSuffixAddPartitions.add(alterStatementSuffixAddPartitions158.getTree());

                    // AST REWRITE
                    // elements: alterStatementSuffixAddPartitions
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 590:9: -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:590:12: ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERVIEW_ADDPARTS, "TOK_ALTERVIEW_ADDPARTS"), root_1);

                        adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitions.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:591:7: alterStatementSuffixDropPartitions
                    {
                    pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix3240);
                    alterStatementSuffixDropPartitions159=alterStatementSuffixDropPartitions();
                    _fsp--;

                    stream_alterStatementSuffixDropPartitions.add(alterStatementSuffixDropPartitions159.getTree());

                    // AST REWRITE
                    // elements: alterStatementSuffixDropPartitions
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 592:9: -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:592:12: ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERVIEW_DROPPARTS, "TOK_ALTERVIEW_DROPPARTS"), root_1);

                        adaptor.addChild(root_1, stream_alterStatementSuffixDropPartitions.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterViewStatementSuffix

    public static class alterIndexStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterIndexStatementSuffix
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:595:1: alterIndexStatementSuffix : indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) ) ;
    public final alterIndexStatementSuffix_return alterIndexStatementSuffix() throws RecognitionException {
        alterIndexStatementSuffix_return retval = new alterIndexStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token indexName=null;
        Token tableNameId=null;
        Token KW_ON160=null;
        Token KW_REBUILD162=null;
        Token KW_SET163=null;
        Token KW_IDXPROPERTIES164=null;
        partitionSpec_return partitionSpec161 = null;

        indexProperties_return indexProperties165 = null;


        CommonTree indexName_tree=null;
        CommonTree tableNameId_tree=null;
        CommonTree KW_ON160_tree=null;
        CommonTree KW_REBUILD162_tree=null;
        CommonTree KW_SET163_tree=null;
        CommonTree KW_IDXPROPERTIES164_tree=null;
        RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_IDXPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_IDXPROPERTIES");
        RewriteRuleSubtreeStream stream_indexProperties=new RewriteRuleSubtreeStream(adaptor,"rule indexProperties");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("alter index statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:598:5: (indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:598:7: indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )
            {
            indexName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterIndexStatementSuffix3285); 
            stream_Identifier.add(indexName);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:599:7: ( KW_ON tableNameId= Identifier )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:599:8: KW_ON tableNameId= Identifier
            {
            KW_ON160=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_alterIndexStatementSuffix3294); 
            stream_KW_ON.add(KW_ON160);

            tableNameId=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterIndexStatementSuffix3298); 
            stream_Identifier.add(tableNameId);


            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:600:7: ( partitionSpec )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==KW_PARTITION) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:600:7: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_alterIndexStatementSuffix3307);
                    partitionSpec161=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec161.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:601:5: ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==KW_REBUILD) ) {
                alt48=1;
            }
            else if ( (LA48_0==KW_SET) ) {
                alt48=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("601:5: ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:602:7: KW_REBUILD
                    {
                    KW_REBUILD162=(Token)input.LT(1);
                    match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix3322); 
                    stream_KW_REBUILD.add(KW_REBUILD162);


                    // AST REWRITE
                    // elements: tableNameId, indexName, partitionSpec
                    // token labels: tableNameId, indexName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_tableNameId=new RewriteRuleTokenStream(adaptor,"token tableNameId",tableNameId);
                    RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 603:7: -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:603:9: ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERINDEX_REBUILD, "TOK_ALTERINDEX_REBUILD"), root_1);

                        adaptor.addChild(root_1, stream_tableNameId.next());
                        adaptor.addChild(root_1, stream_indexName.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:603:58: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.next());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:605:7: KW_SET KW_IDXPROPERTIES indexProperties
                    {
                    KW_SET163=(Token)input.LT(1);
                    match(input,KW_SET,FOLLOW_KW_SET_in_alterIndexStatementSuffix3356); 
                    stream_KW_SET.add(KW_SET163);

                    KW_IDXPROPERTIES164=(Token)input.LT(1);
                    match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix3358); 
                    stream_KW_IDXPROPERTIES.add(KW_IDXPROPERTIES164);

                    pushFollow(FOLLOW_indexProperties_in_alterIndexStatementSuffix3366);
                    indexProperties165=indexProperties();
                    _fsp--;

                    stream_indexProperties.add(indexProperties165.getTree());

                    // AST REWRITE
                    // elements: indexProperties, indexName, tableNameId
                    // token labels: tableNameId, indexName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_tableNameId=new RewriteRuleTokenStream(adaptor,"token tableNameId",tableNameId);
                    RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 607:7: -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:607:9: ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERINDEX_PROPERTIES, "TOK_ALTERINDEX_PROPERTIES"), root_1);

                        adaptor.addChild(root_1, stream_tableNameId.next());
                        adaptor.addChild(root_1, stream_indexName.next());
                        adaptor.addChild(root_1, stream_indexProperties.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterIndexStatementSuffix

    public static class alterDatabaseStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterDatabaseStatementSuffix
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:611:1: alterDatabaseStatementSuffix : alterDatabaseSuffixProperties ;
    public final alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix() throws RecognitionException {
        alterDatabaseStatementSuffix_return retval = new alterDatabaseStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties166 = null;



         msgs.push("alter database statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:614:5: ( alterDatabaseSuffixProperties )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:614:7: alterDatabaseSuffixProperties
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix3418);
            alterDatabaseSuffixProperties166=alterDatabaseSuffixProperties();
            _fsp--;

            adaptor.addChild(root_0, alterDatabaseSuffixProperties166.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterDatabaseStatementSuffix

    public static class alterDatabaseSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterDatabaseSuffixProperties
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:617:1: alterDatabaseSuffixProperties : name= Identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) ;
    public final alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties() throws RecognitionException {
        alterDatabaseSuffixProperties_return retval = new alterDatabaseSuffixProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_SET167=null;
        Token KW_DBPROPERTIES168=null;
        dbProperties_return dbProperties169 = null;


        CommonTree name_tree=null;
        CommonTree KW_SET167_tree=null;
        CommonTree KW_DBPROPERTIES168_tree=null;
        RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
         msgs.push("alter database properties statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:620:5: (name= Identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:620:7: name= Identifier KW_SET KW_DBPROPERTIES dbProperties
            {
            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterDatabaseSuffixProperties3447); 
            stream_Identifier.add(name);

            KW_SET167=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixProperties3449); 
            stream_KW_SET.add(KW_SET167);

            KW_DBPROPERTIES168=(Token)input.LT(1);
            match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties3451); 
            stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES168);

            pushFollow(FOLLOW_dbProperties_in_alterDatabaseSuffixProperties3453);
            dbProperties169=dbProperties();
            _fsp--;

            stream_dbProperties.add(dbProperties169.getTree());

            // AST REWRITE
            // elements: dbProperties, name
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 621:5: -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:621:8: ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERDATABASE_PROPERTIES, "TOK_ALTERDATABASE_PROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                adaptor.addChild(root_1, stream_dbProperties.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterDatabaseSuffixProperties

    public static class alterStatementSuffixRename_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixRename
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:624:1: alterStatementSuffixRename : oldName= Identifier KW_RENAME KW_TO newName= Identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) ;
    public final alterStatementSuffixRename_return alterStatementSuffixRename() throws RecognitionException {
        alterStatementSuffixRename_return retval = new alterStatementSuffixRename_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token oldName=null;
        Token newName=null;
        Token KW_RENAME170=null;
        Token KW_TO171=null;

        CommonTree oldName_tree=null;
        CommonTree newName_tree=null;
        CommonTree KW_RENAME170_tree=null;
        CommonTree KW_TO171_tree=null;
        RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");

         msgs.push("rename statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:627:5: (oldName= Identifier KW_RENAME KW_TO newName= Identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:627:7: oldName= Identifier KW_RENAME KW_TO newName= Identifier
            {
            oldName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRename3497); 
            stream_Identifier.add(oldName);

            KW_RENAME170=(Token)input.LT(1);
            match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRename3499); 
            stream_KW_RENAME.add(KW_RENAME170);

            KW_TO171=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRename3501); 
            stream_KW_TO.add(KW_TO171);

            newName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRename3505); 
            stream_Identifier.add(newName);


            // AST REWRITE
            // elements: newName, oldName
            // token labels: newName, oldName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newName=new RewriteRuleTokenStream(adaptor,"token newName",newName);
            RewriteRuleTokenStream stream_oldName=new RewriteRuleTokenStream(adaptor,"token oldName",oldName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 628:5: -> ^( TOK_ALTERTABLE_RENAME $oldName $newName)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:628:8: ^( TOK_ALTERTABLE_RENAME $oldName $newName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_RENAME, "TOK_ALTERTABLE_RENAME"), root_1);

                adaptor.addChild(root_1, stream_oldName.next());
                adaptor.addChild(root_1, stream_newName.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixRename

    public static class alterStatementSuffixAddCol_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixAddCol
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:631:1: alterStatementSuffixAddCol : Identifier (add= KW_ADD | replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList ) ;
    public final alterStatementSuffixAddCol_return alterStatementSuffixAddCol() throws RecognitionException {
        alterStatementSuffixAddCol_return retval = new alterStatementSuffixAddCol_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token add=null;
        Token replace=null;
        Token Identifier172=null;
        Token KW_COLUMNS173=null;
        Token LPAREN174=null;
        Token RPAREN176=null;
        columnNameTypeList_return columnNameTypeList175 = null;


        CommonTree add_tree=null;
        CommonTree replace_tree=null;
        CommonTree Identifier172_tree=null;
        CommonTree KW_COLUMNS173_tree=null;
        CommonTree LPAREN174_tree=null;
        CommonTree RPAREN176_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
         msgs.push("add column statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:634:5: ( Identifier (add= KW_ADD | replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:634:7: Identifier (add= KW_ADD | replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN
            {
            Identifier172=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixAddCol3548); 
            stream_Identifier.add(Identifier172);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:634:18: (add= KW_ADD | replace= KW_REPLACE )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==KW_ADD) ) {
                alt49=1;
            }
            else if ( (LA49_0==KW_REPLACE) ) {
                alt49=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("634:18: (add= KW_ADD | replace= KW_REPLACE )", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:634:19: add= KW_ADD
                    {
                    add=(Token)input.LT(1);
                    match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddCol3553); 
                    stream_KW_ADD.add(add);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:634:32: replace= KW_REPLACE
                    {
                    replace=(Token)input.LT(1);
                    match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol3559); 
                    stream_KW_REPLACE.add(replace);


                    }
                    break;

            }

            KW_COLUMNS173=(Token)input.LT(1);
            match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol3562); 
            stream_KW_COLUMNS.add(KW_COLUMNS173);

            LPAREN174=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementSuffixAddCol3564); 
            stream_LPAREN.add(LPAREN174);

            pushFollow(FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol3566);
            columnNameTypeList175=columnNameTypeList();
            _fsp--;

            stream_columnNameTypeList.add(columnNameTypeList175.getTree());
            RPAREN176=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementSuffixAddCol3568); 
            stream_RPAREN.add(RPAREN176);


            // AST REWRITE
            // elements: columnNameTypeList, columnNameTypeList, Identifier, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 635:5: -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList )
            if (add != null) {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:635:24: ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ADDCOLS, "TOK_ALTERTABLE_ADDCOLS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_columnNameTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 636:5: -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:636:24: ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_REPLACECOLS, "TOK_ALTERTABLE_REPLACECOLS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_columnNameTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixAddCol

    public static class alterStatementSuffixRenameCol_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixRenameCol
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:639:1: alterStatementSuffixRenameCol : Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) ;
    public final alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol() throws RecognitionException {
        alterStatementSuffixRenameCol_return retval = new alterStatementSuffixRenameCol_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token oldName=null;
        Token newName=null;
        Token comment=null;
        Token Identifier177=null;
        Token KW_CHANGE178=null;
        Token KW_COLUMN179=null;
        Token KW_COMMENT181=null;
        colType_return colType180 = null;

        alterStatementChangeColPosition_return alterStatementChangeColPosition182 = null;


        CommonTree oldName_tree=null;
        CommonTree newName_tree=null;
        CommonTree comment_tree=null;
        CommonTree Identifier177_tree=null;
        CommonTree KW_CHANGE178_tree=null;
        CommonTree KW_COLUMN179_tree=null;
        CommonTree KW_COMMENT181_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
        RewriteRuleTokenStream stream_KW_CHANGE=new RewriteRuleTokenStream(adaptor,"token KW_CHANGE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_alterStatementChangeColPosition=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementChangeColPosition");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("rename column name"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:642:5: ( Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:642:7: Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )?
            {
            Identifier177=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3641); 
            stream_Identifier.add(Identifier177);

            KW_CHANGE178=(Token)input.LT(1);
            match(input,KW_CHANGE,FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol3643); 
            stream_KW_CHANGE.add(KW_CHANGE178);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:642:28: ( KW_COLUMN )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==KW_COLUMN) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:642:28: KW_COLUMN
                    {
                    KW_COLUMN179=(Token)input.LT(1);
                    match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol3645); 
                    stream_KW_COLUMN.add(KW_COLUMN179);


                    }
                    break;

            }

            oldName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3650); 
            stream_Identifier.add(oldName);

            newName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3654); 
            stream_Identifier.add(newName);

            pushFollow(FOLLOW_colType_in_alterStatementSuffixRenameCol3656);
            colType180=colType();
            _fsp--;

            stream_colType.add(colType180.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:642:85: ( KW_COMMENT comment= StringLiteral )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==KW_COMMENT) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:642:86: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT181=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol3659); 
                    stream_KW_COMMENT.add(KW_COMMENT181);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol3663); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:642:121: ( alterStatementChangeColPosition )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( ((LA52_0>=KW_FIRST && LA52_0<=KW_AFTER)) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:642:121: alterStatementChangeColPosition
                    {
                    pushFollow(FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol3667);
                    alterStatementChangeColPosition182=alterStatementChangeColPosition();
                    _fsp--;

                    stream_alterStatementChangeColPosition.add(alterStatementChangeColPosition182.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: newName, colType, alterStatementChangeColPosition, Identifier, comment, oldName
            // token labels: newName, comment, oldName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newName=new RewriteRuleTokenStream(adaptor,"token newName",newName);
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_oldName=new RewriteRuleTokenStream(adaptor,"token oldName",oldName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 643:5: -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:643:7: ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_RENAMECOL, "TOK_ALTERTABLE_RENAMECOL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_oldName.next());
                adaptor.addChild(root_1, stream_newName.next());
                adaptor.addChild(root_1, stream_colType.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:643:71: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.next());

                }
                stream_comment.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:643:81: ( alterStatementChangeColPosition )?
                if ( stream_alterStatementChangeColPosition.hasNext() ) {
                    adaptor.addChild(root_1, stream_alterStatementChangeColPosition.next());

                }
                stream_alterStatementChangeColPosition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixRenameCol

    public static class alterStatementChangeColPosition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementChangeColPosition
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:646:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );
    public final alterStatementChangeColPosition_return alterStatementChangeColPosition() throws RecognitionException {
        alterStatementChangeColPosition_return retval = new alterStatementChangeColPosition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token first=null;
        Token afterCol=null;
        Token KW_AFTER183=null;

        CommonTree first_tree=null;
        CommonTree afterCol_tree=null;
        CommonTree KW_AFTER183_tree=null;
        RewriteRuleTokenStream stream_KW_AFTER=new RewriteRuleTokenStream(adaptor,"token KW_AFTER");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:647:5: (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==KW_FIRST) ) {
                alt53=1;
            }
            else if ( (LA53_0==KW_AFTER) ) {
                alt53=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("646:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );", 53, 0, input);

                throw nvae;
            }
            switch (alt53) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:647:7: first= KW_FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    first=(Token)input.LT(1);
                    match(input,KW_FIRST,FOLLOW_KW_FIRST_in_alterStatementChangeColPosition3713); 
                    first_tree = (CommonTree)adaptor.create(first);
                    adaptor.addChild(root_0, first_tree);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:647:22: KW_AFTER afterCol= Identifier
                    {
                    KW_AFTER183=(Token)input.LT(1);
                    match(input,KW_AFTER,FOLLOW_KW_AFTER_in_alterStatementChangeColPosition3715); 
                    stream_KW_AFTER.add(KW_AFTER183);

                    afterCol=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementChangeColPosition3719); 
                    stream_Identifier.add(afterCol);


                    // AST REWRITE
                    // elements: afterCol
                    // token labels: afterCol
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_afterCol=new RewriteRuleTokenStream(adaptor,"token afterCol",afterCol);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 648:5: -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
                    if (first != null) {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:648:25: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 649:5: -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:649:8: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);

                        adaptor.addChild(root_1, stream_afterCol.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementChangeColPosition

    public static class alterStatementSuffixAddPartitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixAddPartitions
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:652:1: alterStatementSuffixAddPartitions : Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )* -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ ) ;
    public final alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions() throws RecognitionException {
        alterStatementSuffixAddPartitions_return retval = new alterStatementSuffixAddPartitions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier184=null;
        Token KW_ADD185=null;
        ifNotExists_return ifNotExists186 = null;

        partitionSpec_return partitionSpec187 = null;

        partitionLocation_return partitionLocation188 = null;

        partitionSpec_return partitionSpec189 = null;

        partitionLocation_return partitionLocation190 = null;


        CommonTree Identifier184_tree=null;
        CommonTree KW_ADD185_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_partitionLocation=new RewriteRuleSubtreeStream(adaptor,"rule partitionLocation");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
         msgs.push("add partition statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:655:5: ( Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )* -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:655:7: Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )*
            {
            Identifier184=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixAddPartitions3771); 
            stream_Identifier.add(Identifier184);

            KW_ADD185=(Token)input.LT(1);
            match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions3773); 
            stream_KW_ADD.add(KW_ADD185);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:655:25: ( ifNotExists )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==KW_IF) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:655:25: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions3775);
                    ifNotExists186=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists186.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3778);
            partitionSpec187=partitionSpec();
            _fsp--;

            stream_partitionSpec.add(partitionSpec187.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:655:52: ( partitionLocation )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==KW_LOCATION) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:655:52: partitionLocation
                    {
                    pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3780);
                    partitionLocation188=partitionLocation();
                    _fsp--;

                    stream_partitionLocation.add(partitionLocation188.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:655:71: ( partitionSpec ( partitionLocation )? )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==KW_PARTITION) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:655:72: partitionSpec ( partitionLocation )?
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3784);
            	    partitionSpec189=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec189.getTree());
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:655:86: ( partitionLocation )?
            	    int alt56=2;
            	    int LA56_0 = input.LA(1);

            	    if ( (LA56_0==KW_LOCATION) ) {
            	        alt56=1;
            	    }
            	    switch (alt56) {
            	        case 1 :
            	            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:655:86: partitionLocation
            	            {
            	            pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3786);
            	            partitionLocation190=partitionLocation();
            	            _fsp--;

            	            stream_partitionLocation.add(partitionLocation190.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionLocation, ifNotExists, partitionSpec, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 656:5: -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:656:8: ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ADDPARTS, "TOK_ALTERTABLE_ADDPARTS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:656:45: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                if ( !(stream_partitionSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:656:73: ( partitionLocation )?
                    if ( stream_partitionLocation.hasNext() ) {
                        adaptor.addChild(root_1, stream_partitionLocation.next());

                    }
                    stream_partitionLocation.reset();

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixAddPartitions

    public static class alterStatementSuffixTouch_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixTouch
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:659:1: alterStatementSuffixTouch : Identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* ) ;
    public final alterStatementSuffixTouch_return alterStatementSuffixTouch() throws RecognitionException {
        alterStatementSuffixTouch_return retval = new alterStatementSuffixTouch_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier191=null;
        Token KW_TOUCH192=null;
        partitionSpec_return partitionSpec193 = null;


        CommonTree Identifier191_tree=null;
        CommonTree KW_TOUCH192_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TOUCH=new RewriteRuleTokenStream(adaptor,"token KW_TOUCH");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("touch statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:662:5: ( Identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:662:7: Identifier KW_TOUCH ( partitionSpec )*
            {
            Identifier191=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixTouch3839); 
            stream_Identifier.add(Identifier191);

            KW_TOUCH192=(Token)input.LT(1);
            match(input,KW_TOUCH,FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch3841); 
            stream_KW_TOUCH.add(KW_TOUCH192);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:662:27: ( partitionSpec )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==KW_PARTITION) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:662:28: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixTouch3844);
            	    partitionSpec193=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec193.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionSpec, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 663:5: -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:663:8: ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_TOUCH, "TOK_ALTERTABLE_TOUCH"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:663:42: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixTouch

    public static class alterStatementSuffixArchive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixArchive
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:666:1: alterStatementSuffixArchive : Identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* ) ;
    public final alterStatementSuffixArchive_return alterStatementSuffixArchive() throws RecognitionException {
        alterStatementSuffixArchive_return retval = new alterStatementSuffixArchive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier194=null;
        Token KW_ARCHIVE195=null;
        partitionSpec_return partitionSpec196 = null;


        CommonTree Identifier194_tree=null;
        CommonTree KW_ARCHIVE195_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("archive statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:669:5: ( Identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:669:7: Identifier KW_ARCHIVE ( partitionSpec )*
            {
            Identifier194=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixArchive3890); 
            stream_Identifier.add(Identifier194);

            KW_ARCHIVE195=(Token)input.LT(1);
            match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive3892); 
            stream_KW_ARCHIVE.add(KW_ARCHIVE195);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:669:29: ( partitionSpec )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==KW_PARTITION) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:669:30: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixArchive3895);
            	    partitionSpec196=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec196.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 670:5: -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:670:8: ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ARCHIVE, "TOK_ALTERTABLE_ARCHIVE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:670:44: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixArchive

    public static class alterStatementSuffixUnArchive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixUnArchive
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:673:1: alterStatementSuffixUnArchive : Identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* ) ;
    public final alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive() throws RecognitionException {
        alterStatementSuffixUnArchive_return retval = new alterStatementSuffixUnArchive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier197=null;
        Token KW_UNARCHIVE198=null;
        partitionSpec_return partitionSpec199 = null;


        CommonTree Identifier197_tree=null;
        CommonTree KW_UNARCHIVE198_tree=null;
        RewriteRuleTokenStream stream_KW_UNARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_UNARCHIVE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("unarchive statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:676:5: ( Identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:676:7: Identifier KW_UNARCHIVE ( partitionSpec )*
            {
            Identifier197=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixUnArchive3941); 
            stream_Identifier.add(Identifier197);

            KW_UNARCHIVE198=(Token)input.LT(1);
            match(input,KW_UNARCHIVE,FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive3943); 
            stream_KW_UNARCHIVE.add(KW_UNARCHIVE198);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:676:31: ( partitionSpec )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==KW_PARTITION) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:676:32: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive3946);
            	    partitionSpec199=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec199.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionSpec, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 677:5: -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:677:8: ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_UNARCHIVE, "TOK_ALTERTABLE_UNARCHIVE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:677:46: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixUnArchive

    public static class partitionLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partitionLocation
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:680:1: partitionLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) ;
    public final partitionLocation_return partitionLocation() throws RecognitionException {
        partitionLocation_return retval = new partitionLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION200=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION200_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         msgs.push("partition location"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:683:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:684:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION200=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_partitionLocation3998); 
            stream_KW_LOCATION.add(KW_LOCATION200);

            locn=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_partitionLocation4002); 
            stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 684:38: -> ^( TOK_PARTITIONLOCATION $locn)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:684:41: ^( TOK_PARTITIONLOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTITIONLOCATION, "TOK_PARTITIONLOCATION"), root_1);

                adaptor.addChild(root_1, stream_locn.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partitionLocation

    public static class alterStatementSuffixDropPartitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixDropPartitions
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:687:1: alterStatementSuffixDropPartitions : Identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? ) ;
    public final alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions() throws RecognitionException {
        alterStatementSuffixDropPartitions_return retval = new alterStatementSuffixDropPartitions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier201=null;
        Token KW_DROP202=null;
        Token COMMA205=null;
        ifExists_return ifExists203 = null;

        dropPartitionSpec_return dropPartitionSpec204 = null;

        dropPartitionSpec_return dropPartitionSpec206 = null;


        CommonTree Identifier201_tree=null;
        CommonTree KW_DROP202_tree=null;
        CommonTree COMMA205_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_dropPartitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionSpec");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop partition statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:690:5: ( Identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:690:7: Identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )*
            {
            Identifier201=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixDropPartitions4038); 
            stream_Identifier.add(Identifier201);

            KW_DROP202=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions4040); 
            stream_KW_DROP.add(KW_DROP202);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:690:26: ( ifExists )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==KW_IF) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:690:26: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_alterStatementSuffixDropPartitions4042);
                    ifExists203=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists203.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4045);
            dropPartitionSpec204=dropPartitionSpec();
            _fsp--;

            stream_dropPartitionSpec.add(dropPartitionSpec204.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:690:54: ( COMMA dropPartitionSpec )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==COMMA) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:690:55: COMMA dropPartitionSpec
            	    {
            	    COMMA205=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_alterStatementSuffixDropPartitions4048); 
            	    stream_COMMA.add(COMMA205);

            	    pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4050);
            	    dropPartitionSpec206=dropPartitionSpec();
            	    _fsp--;

            	    stream_dropPartitionSpec.add(dropPartitionSpec206.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            // AST REWRITE
            // elements: ifExists, Identifier, dropPartitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 691:5: -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:691:8: ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_DROPPARTS, "TOK_ALTERTABLE_DROPPARTS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                if ( !(stream_dropPartitionSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dropPartitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_dropPartitionSpec.next());

                }
                stream_dropPartitionSpec.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:691:65: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixDropPartitions

    public static class alterStatementSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixProperties
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:694:1: alterStatementSuffixProperties : name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) ;
    public final alterStatementSuffixProperties_return alterStatementSuffixProperties() throws RecognitionException {
        alterStatementSuffixProperties_return retval = new alterStatementSuffixProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_SET207=null;
        Token KW_TBLPROPERTIES208=null;
        tableProperties_return tableProperties209 = null;


        CommonTree name_tree=null;
        CommonTree KW_SET207_tree=null;
        CommonTree KW_TBLPROPERTIES208_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("alter properties statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:697:5: (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:697:7: name= Identifier KW_SET KW_TBLPROPERTIES tableProperties
            {
            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixProperties4099); 
            stream_Identifier.add(name);

            KW_SET207=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixProperties4101); 
            stream_KW_SET.add(KW_SET207);

            KW_TBLPROPERTIES208=(Token)input.LT(1);
            match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4103); 
            stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES208);

            pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties4105);
            tableProperties209=tableProperties();
            _fsp--;

            stream_tableProperties.add(tableProperties209.getTree());

            // AST REWRITE
            // elements: tableProperties, name
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 698:5: -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:698:8: ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_PROPERTIES, "TOK_ALTERTABLE_PROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                adaptor.addChild(root_1, stream_tableProperties.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixProperties

    public static class alterViewSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterViewSuffixProperties
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:701:1: alterViewSuffixProperties : name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) ;
    public final alterViewSuffixProperties_return alterViewSuffixProperties() throws RecognitionException {
        alterViewSuffixProperties_return retval = new alterViewSuffixProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_SET210=null;
        Token KW_TBLPROPERTIES211=null;
        tableProperties_return tableProperties212 = null;


        CommonTree name_tree=null;
        CommonTree KW_SET210_tree=null;
        CommonTree KW_TBLPROPERTIES211_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("alter view properties statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:704:5: (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:704:7: name= Identifier KW_SET KW_TBLPROPERTIES tableProperties
            {
            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterViewSuffixProperties4149); 
            stream_Identifier.add(name);

            KW_SET210=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterViewSuffixProperties4151); 
            stream_KW_SET.add(KW_SET210);

            KW_TBLPROPERTIES211=(Token)input.LT(1);
            match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4153); 
            stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES211);

            pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties4155);
            tableProperties212=tableProperties();
            _fsp--;

            stream_tableProperties.add(tableProperties212.getTree());

            // AST REWRITE
            // elements: name, tableProperties
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 705:5: -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:705:8: ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERVIEW_PROPERTIES, "TOK_ALTERVIEW_PROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                adaptor.addChild(root_1, stream_tableProperties.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterViewSuffixProperties

    public static class alterStatementSuffixSerdeProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixSerdeProperties
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:708:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );
    public final alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties() throws RecognitionException {
        alterStatementSuffixSerdeProperties_return retval = new alterStatementSuffixSerdeProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token serdeName=null;
        Token KW_SET213=null;
        Token KW_SERDE214=null;
        Token KW_WITH215=null;
        Token KW_SERDEPROPERTIES216=null;
        Token KW_SET218=null;
        Token KW_SERDEPROPERTIES219=null;
        tableProperties_return tableProperties217 = null;

        tableProperties_return tableProperties220 = null;


        CommonTree serdeName_tree=null;
        CommonTree KW_SET213_tree=null;
        CommonTree KW_SERDE214_tree=null;
        CommonTree KW_WITH215_tree=null;
        CommonTree KW_SERDEPROPERTIES216_tree=null;
        CommonTree KW_SET218_tree=null;
        CommonTree KW_SERDEPROPERTIES219_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("alter serdes statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:711:5: ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==KW_SET) ) {
                int LA64_1 = input.LA(2);

                if ( (LA64_1==KW_SERDEPROPERTIES) ) {
                    alt64=2;
                }
                else if ( (LA64_1==KW_SERDE) ) {
                    alt64=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("708:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );", 64, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("708:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:711:7: KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
                    {
                    KW_SET213=(Token)input.LT(1);
                    match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4197); 
                    stream_KW_SET.add(KW_SET213);

                    KW_SERDE214=(Token)input.LT(1);
                    match(input,KW_SERDE,FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties4199); 
                    stream_KW_SERDE.add(KW_SERDE214);

                    serdeName=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties4203); 
                    stream_StringLiteral.add(serdeName);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:711:47: ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==KW_WITH) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:711:48: KW_WITH KW_SERDEPROPERTIES tableProperties
                            {
                            KW_WITH215=(Token)input.LT(1);
                            match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties4206); 
                            stream_KW_WITH.add(KW_WITH215);

                            KW_SERDEPROPERTIES216=(Token)input.LT(1);
                            match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4208); 
                            stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES216);

                            pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4210);
                            tableProperties217=tableProperties();
                            _fsp--;

                            stream_tableProperties.add(tableProperties217.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tableProperties, serdeName
                    // token labels: serdeName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_serdeName=new RewriteRuleTokenStream(adaptor,"token serdeName",serdeName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 712:5: -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:712:8: ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_SERIALIZER, "TOK_ALTERTABLE_SERIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_serdeName.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:712:47: ( tableProperties )?
                        if ( stream_tableProperties.hasNext() ) {
                            adaptor.addChild(root_1, stream_tableProperties.next());

                        }
                        stream_tableProperties.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:713:7: KW_SET KW_SERDEPROPERTIES tableProperties
                    {
                    KW_SET218=(Token)input.LT(1);
                    match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4236); 
                    stream_KW_SET.add(KW_SET218);

                    KW_SERDEPROPERTIES219=(Token)input.LT(1);
                    match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4238); 
                    stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES219);

                    pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4240);
                    tableProperties220=tableProperties();
                    _fsp--;

                    stream_tableProperties.add(tableProperties220.getTree());

                    // AST REWRITE
                    // elements: tableProperties
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 714:5: -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:714:8: ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_SERDEPROPERTIES, "TOK_ALTERTABLE_SERDEPROPERTIES"), root_1);

                        adaptor.addChild(root_1, stream_tableProperties.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixSerdeProperties

    public static class tablePartitionPrefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tablePartitionPrefix
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:717:1: tablePartitionPrefix : name= Identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) ;
    public final tablePartitionPrefix_return tablePartitionPrefix() throws RecognitionException {
        tablePartitionPrefix_return retval = new tablePartitionPrefix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        partitionSpec_return partitionSpec221 = null;


        CommonTree name_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        msgs.push("table partition prefix");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:720:3: (name= Identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:720:4: name= Identifier ( partitionSpec )?
            {
            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tablePartitionPrefix4278); 
            stream_Identifier.add(name);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:720:20: ( partitionSpec )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==KW_PARTITION) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:720:20: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_tablePartitionPrefix4280);
                    partitionSpec221=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec221.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, name
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 721:3: -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:721:5: ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLE_PARTITION, "TOK_TABLE_PARTITION"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:721:33: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tablePartitionPrefix

    public static class alterTblPartitionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterTblPartitionStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:724:1: alterTblPartitionStatement : tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) ;
    public final alterTblPartitionStatement_return alterTblPartitionStatement() throws RecognitionException {
        alterTblPartitionStatement_return retval = new alterTblPartitionStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tablePartitionPrefix_return tablePartitionPrefix222 = null;

        alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix223 = null;


        RewriteRuleSubtreeStream stream_alterTblPartitionStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTblPartitionStatementSuffix");
        RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");
        msgs.push("alter table partition statement");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:727:3: ( tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:727:6: tablePartitionPrefix alterTblPartitionStatementSuffix
            {
            pushFollow(FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement4318);
            tablePartitionPrefix222=tablePartitionPrefix();
            _fsp--;

            stream_tablePartitionPrefix.add(tablePartitionPrefix222.getTree());
            pushFollow(FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement4320);
            alterTblPartitionStatementSuffix223=alterTblPartitionStatementSuffix();
            _fsp--;

            stream_alterTblPartitionStatementSuffix.add(alterTblPartitionStatementSuffix223.getTree());

            // AST REWRITE
            // elements: alterTblPartitionStatementSuffix, tablePartitionPrefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 728:3: -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:728:6: ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_PARTITION, "TOK_ALTERTABLE_PARTITION"), root_1);

                adaptor.addChild(root_1, stream_tablePartitionPrefix.next());
                adaptor.addChild(root_1, stream_alterTblPartitionStatementSuffix.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterTblPartitionStatement

    public static class alterTblPartitionStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterTblPartitionStatementSuffix
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:731:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart );
    public final alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix() throws RecognitionException {
        alterTblPartitionStatementSuffix_return retval = new alterTblPartitionStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat224 = null;

        alterStatementSuffixLocation_return alterStatementSuffixLocation225 = null;

        alterStatementSuffixProtectMode_return alterStatementSuffixProtectMode226 = null;

        alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles227 = null;

        alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties228 = null;

        alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart229 = null;



        msgs.push("alter table partition statement suffix");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:734:3: ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart )
            int alt66=6;
            switch ( input.LA(1) ) {
            case KW_SET:
                {
                switch ( input.LA(2) ) {
                case KW_SERDE:
                case KW_SERDEPROPERTIES:
                    {
                    alt66=5;
                    }
                    break;
                case KW_FILEFORMAT:
                    {
                    alt66=1;
                    }
                    break;
                case KW_LOCATION:
                    {
                    alt66=2;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("731:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart );", 66, 1, input);

                    throw nvae;
                }

                }
                break;
            case KW_ENABLE:
            case KW_DISABLE:
                {
                alt66=3;
                }
                break;
            case KW_CONCATENATE:
                {
                alt66=4;
                }
                break;
            case KW_RENAME:
                {
                alt66=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("731:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart );", 66, 0, input);

                throw nvae;
            }

            switch (alt66) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:734:5: alterStatementSuffixFileFormat
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4355);
                    alterStatementSuffixFileFormat224=alterStatementSuffixFileFormat();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixFileFormat224.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:735:5: alterStatementSuffixLocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4361);
                    alterStatementSuffixLocation225=alterStatementSuffixLocation();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixLocation225.getTree());

                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:736:5: alterStatementSuffixProtectMode
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix4367);
                    alterStatementSuffixProtectMode226=alterStatementSuffixProtectMode();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixProtectMode226.getTree());

                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:737:5: alterStatementSuffixMergeFiles
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4373);
                    alterStatementSuffixMergeFiles227=alterStatementSuffixMergeFiles();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixMergeFiles227.getTree());

                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:738:5: alterStatementSuffixSerdeProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4379);
                    alterStatementSuffixSerdeProperties228=alterStatementSuffixSerdeProperties();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixSerdeProperties228.getTree());

                    }
                    break;
                case 6 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:739:5: alterStatementSuffixRenamePart
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4385);
                    alterStatementSuffixRenamePart229=alterStatementSuffixRenamePart();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixRenamePart229.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterTblPartitionStatementSuffix

    public static class alterStatementSuffixFileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixFileFormat
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:742:1: alterStatementSuffixFileFormat : KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) ;
    public final alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat() throws RecognitionException {
        alterStatementSuffixFileFormat_return retval = new alterStatementSuffixFileFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SET230=null;
        Token KW_FILEFORMAT231=null;
        fileFormat_return fileFormat232 = null;


        CommonTree KW_SET230_tree=null;
        CommonTree KW_FILEFORMAT231_tree=null;
        RewriteRuleTokenStream stream_KW_FILEFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FILEFORMAT");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_fileFormat=new RewriteRuleSubtreeStream(adaptor,"rule fileFormat");
        msgs.push("alter fileformat statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:745:2: ( KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:745:4: KW_SET KW_FILEFORMAT fileFormat
            {
            KW_SET230=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixFileFormat4407); 
            stream_KW_SET.add(KW_SET230);

            KW_FILEFORMAT231=(Token)input.LT(1);
            match(input,KW_FILEFORMAT,FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat4409); 
            stream_KW_FILEFORMAT.add(KW_FILEFORMAT231);

            pushFollow(FOLLOW_fileFormat_in_alterStatementSuffixFileFormat4411);
            fileFormat232=fileFormat();
            _fsp--;

            stream_fileFormat.add(fileFormat232.getTree());

            // AST REWRITE
            // elements: fileFormat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 746:2: -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:746:5: ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_FILEFORMAT, "TOK_ALTERTABLE_FILEFORMAT"), root_1);

                adaptor.addChild(root_1, stream_fileFormat.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixFileFormat

    public static class alterStatementSuffixLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixLocation
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:749:1: alterStatementSuffixLocation : KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) ;
    public final alterStatementSuffixLocation_return alterStatementSuffixLocation() throws RecognitionException {
        alterStatementSuffixLocation_return retval = new alterStatementSuffixLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token newLoc=null;
        Token KW_SET233=null;
        Token KW_LOCATION234=null;

        CommonTree newLoc_tree=null;
        CommonTree KW_SET233_tree=null;
        CommonTree KW_LOCATION234_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

        msgs.push("alter location");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:752:3: ( KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:752:5: KW_SET KW_LOCATION newLoc= StringLiteral
            {
            KW_SET233=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixLocation4442); 
            stream_KW_SET.add(KW_SET233);

            KW_LOCATION234=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation4444); 
            stream_KW_LOCATION.add(KW_LOCATION234);

            newLoc=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixLocation4448); 
            stream_StringLiteral.add(newLoc);


            // AST REWRITE
            // elements: newLoc
            // token labels: newLoc
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newLoc=new RewriteRuleTokenStream(adaptor,"token newLoc",newLoc);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 753:3: -> ^( TOK_ALTERTABLE_LOCATION $newLoc)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:753:6: ^( TOK_ALTERTABLE_LOCATION $newLoc)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_LOCATION, "TOK_ALTERTABLE_LOCATION"), root_1);

                adaptor.addChild(root_1, stream_newLoc.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixLocation

    public static class alterStatementSuffixProtectMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixProtectMode
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:756:1: alterStatementSuffixProtectMode : alterProtectMode -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode ) ;
    public final alterStatementSuffixProtectMode_return alterStatementSuffixProtectMode() throws RecognitionException {
        alterStatementSuffixProtectMode_return retval = new alterStatementSuffixProtectMode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterProtectMode_return alterProtectMode235 = null;


        RewriteRuleSubtreeStream stream_alterProtectMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectMode");
         msgs.push("alter partition protect mode statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:759:5: ( alterProtectMode -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:759:7: alterProtectMode
            {
            pushFollow(FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode4484);
            alterProtectMode235=alterProtectMode();
            _fsp--;

            stream_alterProtectMode.add(alterProtectMode235.getTree());

            // AST REWRITE
            // elements: alterProtectMode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 760:5: -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:760:8: ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE, "TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE"), root_1);

                adaptor.addChild(root_1, stream_alterProtectMode.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixProtectMode

    public static class alterStatementSuffixRenamePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixRenamePart
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:763:1: alterStatementSuffixRenamePart : KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) ;
    public final alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart() throws RecognitionException {
        alterStatementSuffixRenamePart_return retval = new alterStatementSuffixRenamePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_RENAME236=null;
        Token KW_TO237=null;
        partitionSpec_return partitionSpec238 = null;


        CommonTree KW_RENAME236_tree=null;
        CommonTree KW_TO237_tree=null;
        RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("alter table rename partition statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:766:5: ( KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:766:7: KW_RENAME KW_TO partitionSpec
            {
            KW_RENAME236=(Token)input.LT(1);
            match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart4523); 
            stream_KW_RENAME.add(KW_RENAME236);

            KW_TO237=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRenamePart4525); 
            stream_KW_TO.add(KW_TO237);

            pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart4527);
            partitionSpec238=partitionSpec();
            _fsp--;

            stream_partitionSpec.add(partitionSpec238.getTree());

            // AST REWRITE
            // elements: partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 767:5: -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:767:7: ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_RENAMEPART, "TOK_ALTERTABLE_RENAMEPART"), root_1);

                adaptor.addChild(root_1, stream_partitionSpec.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixRenamePart

    public static class alterStatementSuffixMergeFiles_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixMergeFiles
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:770:1: alterStatementSuffixMergeFiles : KW_CONCATENATE -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES ) ;
    public final alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles() throws RecognitionException {
        alterStatementSuffixMergeFiles_return retval = new alterStatementSuffixMergeFiles_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CONCATENATE239=null;

        CommonTree KW_CONCATENATE239_tree=null;
        RewriteRuleTokenStream stream_KW_CONCATENATE=new RewriteRuleTokenStream(adaptor,"token KW_CONCATENATE");

         msgs.push(""); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:773:5: ( KW_CONCATENATE -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:773:7: KW_CONCATENATE
            {
            KW_CONCATENATE239=(Token)input.LT(1);
            match(input,KW_CONCATENATE,FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles4565); 
            stream_KW_CONCATENATE.add(KW_CONCATENATE239);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 774:5: -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:774:8: ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ALTERPARTS_MERGEFILES, "TOK_ALTERTABLE_ALTERPARTS_MERGEFILES"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixMergeFiles

    public static class alterProtectMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterProtectMode
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:777:1: alterProtectMode : ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) );
    public final alterProtectMode_return alterProtectMode() throws RecognitionException {
        alterProtectMode_return retval = new alterProtectMode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ENABLE240=null;
        Token KW_DISABLE242=null;
        alterProtectModeMode_return alterProtectModeMode241 = null;

        alterProtectModeMode_return alterProtectModeMode243 = null;


        CommonTree KW_ENABLE240_tree=null;
        CommonTree KW_DISABLE242_tree=null;
        RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
        RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");
        RewriteRuleSubtreeStream stream_alterProtectModeMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectModeMode");
         msgs.push("protect mode specification enable"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:780:5: ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==KW_ENABLE) ) {
                alt67=1;
            }
            else if ( (LA67_0==KW_DISABLE) ) {
                alt67=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("777:1: alterProtectMode : ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) );", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:780:7: KW_ENABLE alterProtectModeMode
                    {
                    KW_ENABLE240=(Token)input.LT(1);
                    match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_alterProtectMode4602); 
                    stream_KW_ENABLE.add(KW_ENABLE240);

                    pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode4604);
                    alterProtectModeMode241=alterProtectModeMode();
                    _fsp--;

                    stream_alterProtectModeMode.add(alterProtectModeMode241.getTree());

                    // AST REWRITE
                    // elements: alterProtectModeMode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 780:39: -> ^( TOK_ENABLE alterProtectModeMode )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:780:42: ^( TOK_ENABLE alterProtectModeMode )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ENABLE, "TOK_ENABLE"), root_1);

                        adaptor.addChild(root_1, stream_alterProtectModeMode.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:781:7: KW_DISABLE alterProtectModeMode
                    {
                    KW_DISABLE242=(Token)input.LT(1);
                    match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_alterProtectMode4621); 
                    stream_KW_DISABLE.add(KW_DISABLE242);

                    pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode4623);
                    alterProtectModeMode243=alterProtectModeMode();
                    _fsp--;

                    stream_alterProtectModeMode.add(alterProtectModeMode243.getTree());

                    // AST REWRITE
                    // elements: alterProtectModeMode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 781:40: -> ^( TOK_DISABLE alterProtectModeMode )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:781:43: ^( TOK_DISABLE alterProtectModeMode )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DISABLE, "TOK_DISABLE"), root_1);

                        adaptor.addChild(root_1, stream_alterProtectModeMode.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterProtectMode

    public static class alterProtectModeMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterProtectModeMode
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:784:1: alterProtectModeMode : ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) );
    public final alterProtectModeMode_return alterProtectModeMode() throws RecognitionException {
        alterProtectModeMode_return retval = new alterProtectModeMode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_OFFLINE244=null;
        Token KW_NO_DROP245=null;
        Token KW_CASCADE246=null;
        Token KW_READONLY247=null;

        CommonTree KW_OFFLINE244_tree=null;
        CommonTree KW_NO_DROP245_tree=null;
        CommonTree KW_CASCADE246_tree=null;
        CommonTree KW_READONLY247_tree=null;
        RewriteRuleTokenStream stream_KW_READONLY=new RewriteRuleTokenStream(adaptor,"token KW_READONLY");
        RewriteRuleTokenStream stream_KW_NO_DROP=new RewriteRuleTokenStream(adaptor,"token KW_NO_DROP");
        RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
        RewriteRuleTokenStream stream_KW_OFFLINE=new RewriteRuleTokenStream(adaptor,"token KW_OFFLINE");

         msgs.push("protect mode specification enable"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:787:5: ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) )
            int alt69=3;
            switch ( input.LA(1) ) {
            case KW_OFFLINE:
                {
                alt69=1;
                }
                break;
            case KW_NO_DROP:
                {
                alt69=2;
                }
                break;
            case KW_READONLY:
                {
                alt69=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("784:1: alterProtectModeMode : ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) );", 69, 0, input);

                throw nvae;
            }

            switch (alt69) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:787:7: KW_OFFLINE
                    {
                    KW_OFFLINE244=(Token)input.LT(1);
                    match(input,KW_OFFLINE,FOLLOW_KW_OFFLINE_in_alterProtectModeMode4659); 
                    stream_KW_OFFLINE.add(KW_OFFLINE244);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 787:19: -> ^( TOK_OFFLINE )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:787:22: ^( TOK_OFFLINE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_OFFLINE, "TOK_OFFLINE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:788:7: KW_NO_DROP ( KW_CASCADE )?
                    {
                    KW_NO_DROP245=(Token)input.LT(1);
                    match(input,KW_NO_DROP,FOLLOW_KW_NO_DROP_in_alterProtectModeMode4674); 
                    stream_KW_NO_DROP.add(KW_NO_DROP245);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:788:18: ( KW_CASCADE )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==KW_CASCADE) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:788:18: KW_CASCADE
                            {
                            KW_CASCADE246=(Token)input.LT(1);
                            match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_alterProtectModeMode4676); 
                            stream_KW_CASCADE.add(KW_CASCADE246);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: KW_CASCADE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 788:30: -> ^( TOK_NO_DROP ( KW_CASCADE )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:788:33: ^( TOK_NO_DROP ( KW_CASCADE )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_NO_DROP, "TOK_NO_DROP"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:788:47: ( KW_CASCADE )?
                        if ( stream_KW_CASCADE.hasNext() ) {
                            adaptor.addChild(root_1, stream_KW_CASCADE.next());

                        }
                        stream_KW_CASCADE.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:789:7: KW_READONLY
                    {
                    KW_READONLY247=(Token)input.LT(1);
                    match(input,KW_READONLY,FOLLOW_KW_READONLY_in_alterProtectModeMode4694); 
                    stream_KW_READONLY.add(KW_READONLY247);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 789:20: -> ^( TOK_READONLY )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:789:23: ^( TOK_READONLY )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_READONLY, "TOK_READONLY"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterProtectModeMode

    public static class alterStatementSuffixClusterbySortby_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixClusterbySortby
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:793:1: alterStatementSuffixClusterbySortby : (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) | name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) );
    public final alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby() throws RecognitionException {
        alterStatementSuffixClusterbySortby_return retval = new alterStatementSuffixClusterbySortby_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_NOT249=null;
        Token KW_CLUSTERED250=null;
        tableBuckets_return tableBuckets248 = null;


        CommonTree name_tree=null;
        CommonTree KW_NOT249_tree=null;
        CommonTree KW_CLUSTERED250_tree=null;
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
        msgs.push("alter cluster by sort by statement");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:796:2: (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) | name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==Identifier) ) {
                int LA70_1 = input.LA(2);

                if ( (LA70_1==KW_NOT) ) {
                    alt70=2;
                }
                else if ( (LA70_1==KW_CLUSTERED) ) {
                    alt70=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("793:1: alterStatementSuffixClusterbySortby : (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) | name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) );", 70, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("793:1: alterStatementSuffixClusterbySortby : (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) | name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) );", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:796:3: name= Identifier tableBuckets
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby4726); 
                    stream_Identifier.add(name);

                    pushFollow(FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby4728);
                    tableBuckets248=tableBuckets();
                    _fsp--;

                    stream_tableBuckets.add(tableBuckets248.getTree());

                    // AST REWRITE
                    // elements: tableBuckets, name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 797:2: -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:797:4: ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        adaptor.addChild(root_1, stream_tableBuckets.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:799:2: name= Identifier KW_NOT KW_CLUSTERED
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby4747); 
                    stream_Identifier.add(name);

                    KW_NOT249=(Token)input.LT(1);
                    match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby4749); 
                    stream_KW_NOT.add(KW_NOT249);

                    KW_CLUSTERED250=(Token)input.LT(1);
                    match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby4751); 
                    stream_KW_CLUSTERED.add(KW_CLUSTERED250);


                    // AST REWRITE
                    // elements: name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 800:2: -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name)
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:800:4: ^( TOK_ALTERTABLE_CLUSTER_SORT $name)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);

                        adaptor.addChild(root_1, stream_name.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixClusterbySortby

    public static class fileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fileFormat
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:803:1: fileFormat : ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
    public final fileFormat_return fileFormat() throws RecognitionException {
        fileFormat_return retval = new fileFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token inFmt=null;
        Token outFmt=null;
        Token inDriver=null;
        Token outDriver=null;
        Token genericSpec=null;
        Token KW_SEQUENCEFILE251=null;
        Token KW_TEXTFILE252=null;
        Token KW_RCFILE253=null;
        Token KW_INPUTFORMAT254=null;
        Token KW_OUTPUTFORMAT255=null;
        Token KW_INPUTDRIVER256=null;
        Token KW_OUTPUTDRIVER257=null;

        CommonTree inFmt_tree=null;
        CommonTree outFmt_tree=null;
        CommonTree inDriver_tree=null;
        CommonTree outDriver_tree=null;
        CommonTree genericSpec_tree=null;
        CommonTree KW_SEQUENCEFILE251_tree=null;
        CommonTree KW_TEXTFILE252_tree=null;
        CommonTree KW_RCFILE253_tree=null;
        CommonTree KW_INPUTFORMAT254_tree=null;
        CommonTree KW_OUTPUTFORMAT255_tree=null;
        CommonTree KW_INPUTDRIVER256_tree=null;
        CommonTree KW_OUTPUTDRIVER257_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
        RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
        RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
        RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");

         msgs.push("file format specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:806:5: ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
            int alt72=5;
            switch ( input.LA(1) ) {
            case KW_SEQUENCEFILE:
                {
                alt72=1;
                }
                break;
            case KW_TEXTFILE:
                {
                alt72=2;
                }
                break;
            case KW_RCFILE:
                {
                alt72=3;
                }
                break;
            case KW_INPUTFORMAT:
                {
                alt72=4;
                }
                break;
            case Identifier:
                {
                alt72=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("803:1: fileFormat : ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );", 72, 0, input);

                throw nvae;
            }

            switch (alt72) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:806:7: KW_SEQUENCEFILE
                    {
                    KW_SEQUENCEFILE251=(Token)input.LT(1);
                    match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_fileFormat4784); 
                    stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE251);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 806:24: -> ^( TOK_TBLSEQUENCEFILE )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:806:27: ^( TOK_TBLSEQUENCEFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:807:7: KW_TEXTFILE
                    {
                    KW_TEXTFILE252=(Token)input.LT(1);
                    match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_fileFormat4799); 
                    stream_KW_TEXTFILE.add(KW_TEXTFILE252);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 807:20: -> ^( TOK_TBLTEXTFILE )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:807:23: ^( TOK_TBLTEXTFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:808:7: KW_RCFILE
                    {
                    KW_RCFILE253=(Token)input.LT(1);
                    match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_fileFormat4814); 
                    stream_KW_RCFILE.add(KW_RCFILE253);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 808:18: -> ^( TOK_TBLRCFILE )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:808:21: ^( TOK_TBLRCFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:809:7: KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    {
                    KW_INPUTFORMAT254=(Token)input.LT(1);
                    match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_fileFormat4829); 
                    stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT254);

                    inFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat4833); 
                    stream_StringLiteral.add(inFmt);

                    KW_OUTPUTFORMAT255=(Token)input.LT(1);
                    match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_fileFormat4835); 
                    stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT255);

                    outFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat4839); 
                    stream_StringLiteral.add(outFmt);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:809:79: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==KW_INPUTDRIVER) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:809:80: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
                            {
                            KW_INPUTDRIVER256=(Token)input.LT(1);
                            match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_fileFormat4842); 
                            stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER256);

                            inDriver=(Token)input.LT(1);
                            match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat4846); 
                            stream_StringLiteral.add(inDriver);

                            KW_OUTPUTDRIVER257=(Token)input.LT(1);
                            match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_fileFormat4848); 
                            stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER257);

                            outDriver=(Token)input.LT(1);
                            match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat4852); 
                            stream_StringLiteral.add(outDriver);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: inFmt, outFmt, outDriver, inDriver
                    // token labels: outDriver, outFmt, inDriver, inFmt
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
                    RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
                    RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
                    RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 810:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:810:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);

                        adaptor.addChild(root_1, stream_inFmt.next());
                        adaptor.addChild(root_1, stream_outFmt.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:810:47: ( $inDriver)?
                        if ( stream_inDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_inDriver.next());

                        }
                        stream_inDriver.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:810:58: ( $outDriver)?
                        if ( stream_outDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_outDriver.next());

                        }
                        stream_outDriver.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:811:7: genericSpec= Identifier
                    {
                    genericSpec=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_fileFormat4890); 
                    stream_Identifier.add(genericSpec);


                    // AST REWRITE
                    // elements: genericSpec
                    // token labels: genericSpec
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_genericSpec=new RewriteRuleTokenStream(adaptor,"token genericSpec",genericSpec);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 811:30: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:811:33: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);

                        adaptor.addChild(root_1, stream_genericSpec.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fileFormat

    public static class tabTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tabTypeExpr
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:814:1: tabTypeExpr : Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* ;
    public final tabTypeExpr_return tabTypeExpr() throws RecognitionException {
        tabTypeExpr_return retval = new tabTypeExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier258=null;
        Token DOT259=null;
        Token set260=null;

        CommonTree Identifier258_tree=null;
        CommonTree DOT259_tree=null;
        CommonTree set260_tree=null;

         msgs.push("specifying table types"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:818:4: ( Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:818:6: Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier258=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tabTypeExpr4926); 
            Identifier258_tree = (CommonTree)adaptor.create(Identifier258);
            adaptor.addChild(root_0, Identifier258_tree);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:818:17: ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==DOT) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:818:18: DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE )
            	    {
            	    DOT259=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_tabTypeExpr4929); 
            	    DOT259_tree = (CommonTree)adaptor.create(DOT259);
            	    root_0 = (CommonTree)adaptor.becomeRoot(DOT259_tree, root_0);

            	    set260=(Token)input.LT(1);
            	    if ( input.LA(1)==Identifier||(input.LA(1)>=KW_ELEM_TYPE && input.LA(1)<=KW_VALUE_TYPE) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, adaptor.create(set260));
            	        errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_tabTypeExpr4932);    throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tabTypeExpr

    public static class partTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partTypeExpr
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:821:1: partTypeExpr : tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) ;
    public final partTypeExpr_return partTypeExpr() throws RecognitionException {
        partTypeExpr_return retval = new partTypeExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tabTypeExpr_return tabTypeExpr261 = null;

        partitionSpec_return partitionSpec262 = null;


        RewriteRuleSubtreeStream stream_tabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabTypeExpr");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("specifying table partitions"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:824:5: ( tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:824:8: tabTypeExpr ( partitionSpec )?
            {
            pushFollow(FOLLOW_tabTypeExpr_in_partTypeExpr4975);
            tabTypeExpr261=tabTypeExpr();
            _fsp--;

            stream_tabTypeExpr.add(tabTypeExpr261.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:824:20: ( partitionSpec )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==KW_PARTITION) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:824:20: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_partTypeExpr4977);
                    partitionSpec262=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec262.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, tabTypeExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 824:35: -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:824:38: ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);

                adaptor.addChild(root_1, stream_tabTypeExpr.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:824:64: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partTypeExpr

    public static class descStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start descStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:827:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) );
    public final descStatement_return descStatement() throws RecognitionException {
        descStatement_return retval = new descStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token descOptions=null;
        Token dbName=null;
        Token KW_DESCRIBE263=null;
        Token KW_DESC264=null;
        Token KW_DESCRIBE265=null;
        Token KW_DESC266=null;
        Token KW_FUNCTION267=null;
        Token KW_EXTENDED268=null;
        Token KW_DESCRIBE269=null;
        Token KW_DESC270=null;
        Token KW_DATABASE271=null;
        Token KW_EXTENDED272=null;
        partTypeExpr_return parttype = null;

        descFuncNames_return name = null;


        CommonTree descOptions_tree=null;
        CommonTree dbName_tree=null;
        CommonTree KW_DESCRIBE263_tree=null;
        CommonTree KW_DESC264_tree=null;
        CommonTree KW_DESCRIBE265_tree=null;
        CommonTree KW_DESC266_tree=null;
        CommonTree KW_FUNCTION267_tree=null;
        CommonTree KW_EXTENDED268_tree=null;
        CommonTree KW_DESCRIBE269_tree=null;
        CommonTree KW_DESC270_tree=null;
        CommonTree KW_DATABASE271_tree=null;
        CommonTree KW_EXTENDED272_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token KW_DESCRIBE");
        RewriteRuleSubtreeStream stream_descFuncNames=new RewriteRuleSubtreeStream(adaptor,"rule descFuncNames");
        RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
         msgs.push("describe statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:5: ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) )
            int alt81=3;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==KW_DESCRIBE) ) {
                switch ( input.LA(2) ) {
                case KW_EXTENDED:
                case KW_FORMATTED:
                case Identifier:
                    {
                    alt81=1;
                    }
                    break;
                case KW_DATABASE:
                    {
                    alt81=3;
                    }
                    break;
                case KW_FUNCTION:
                    {
                    alt81=2;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("827:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) );", 81, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA81_0==KW_DESC) ) {
                switch ( input.LA(2) ) {
                case KW_EXTENDED:
                case KW_FORMATTED:
                case Identifier:
                    {
                    alt81=1;
                    }
                    break;
                case KW_DATABASE:
                    {
                    alt81=3;
                    }
                    break;
                case KW_FUNCTION:
                    {
                    alt81=2;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("827:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) );", 81, 2, input);

                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("827:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) );", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:7: ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr )
                    {
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:7: ( KW_DESCRIBE | KW_DESC )
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==KW_DESCRIBE) ) {
                        alt75=1;
                    }
                    else if ( (LA75_0==KW_DESC) ) {
                        alt75=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("830:7: ( KW_DESCRIBE | KW_DESC )", 75, 0, input);

                        throw nvae;
                    }
                    switch (alt75) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:8: KW_DESCRIBE
                            {
                            KW_DESCRIBE263=(Token)input.LT(1);
                            match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5017); 
                            stream_KW_DESCRIBE.add(KW_DESCRIBE263);


                            }
                            break;
                        case 2 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:20: KW_DESC
                            {
                            KW_DESC264=(Token)input.LT(1);
                            match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5019); 
                            stream_KW_DESC.add(KW_DESC264);


                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:29: (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )?
                    int alt76=3;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==KW_FORMATTED) ) {
                        alt76=1;
                    }
                    else if ( (LA76_0==KW_EXTENDED) ) {
                        alt76=2;
                    }
                    switch (alt76) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:30: descOptions= KW_FORMATTED
                            {
                            descOptions=(Token)input.LT(1);
                            match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_descStatement5025); 
                            stream_KW_FORMATTED.add(descOptions);


                            }
                            break;
                        case 2 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:55: descOptions= KW_EXTENDED
                            {
                            descOptions=(Token)input.LT(1);
                            match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5029); 
                            stream_KW_EXTENDED.add(descOptions);


                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:81: (parttype= partTypeExpr )
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:82: parttype= partTypeExpr
                    {
                    pushFollow(FOLLOW_partTypeExpr_in_descStatement5036);
                    parttype=partTypeExpr();
                    _fsp--;

                    stream_partTypeExpr.add(parttype.getTree());

                    }


                    // AST REWRITE
                    // elements: descOptions, parttype
                    // token labels: descOptions
                    // rule labels: retval, parttype
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_descOptions=new RewriteRuleTokenStream(adaptor,"token descOptions",descOptions);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"token parttype",parttype!=null?parttype.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 830:105: -> ^( TOK_DESCTABLE $parttype ( $descOptions)? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:108: ^( TOK_DESCTABLE $parttype ( $descOptions)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE"), root_1);

                        adaptor.addChild(root_1, stream_parttype.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:830:134: ( $descOptions)?
                        if ( stream_descOptions.hasNext() ) {
                            adaptor.addChild(root_1, stream_descOptions.next());

                        }
                        stream_descOptions.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:831:7: ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames )
                    {
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:831:7: ( KW_DESCRIBE | KW_DESC )
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==KW_DESCRIBE) ) {
                        alt77=1;
                    }
                    else if ( (LA77_0==KW_DESC) ) {
                        alt77=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("831:7: ( KW_DESCRIBE | KW_DESC )", 77, 0, input);

                        throw nvae;
                    }
                    switch (alt77) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:831:8: KW_DESCRIBE
                            {
                            KW_DESCRIBE265=(Token)input.LT(1);
                            match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5059); 
                            stream_KW_DESCRIBE.add(KW_DESCRIBE265);


                            }
                            break;
                        case 2 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:831:20: KW_DESC
                            {
                            KW_DESC266=(Token)input.LT(1);
                            match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5061); 
                            stream_KW_DESC.add(KW_DESC266);


                            }
                            break;

                    }

                    KW_FUNCTION267=(Token)input.LT(1);
                    match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_descStatement5064); 
                    stream_KW_FUNCTION.add(KW_FUNCTION267);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:831:41: ( KW_EXTENDED )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==KW_EXTENDED) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:831:41: KW_EXTENDED
                            {
                            KW_EXTENDED268=(Token)input.LT(1);
                            match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5066); 
                            stream_KW_EXTENDED.add(KW_EXTENDED268);


                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:831:54: (name= descFuncNames )
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:831:55: name= descFuncNames
                    {
                    pushFollow(FOLLOW_descFuncNames_in_descStatement5072);
                    name=descFuncNames();
                    _fsp--;

                    stream_descFuncNames.add(name.getTree());

                    }


                    // AST REWRITE
                    // elements: KW_EXTENDED, name
                    // token labels: 
                    // rule labels: retval, name
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"token name",name!=null?name.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 831:75: -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:831:78: ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESCFUNCTION, "TOK_DESCFUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:831:103: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, stream_KW_EXTENDED.next());

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:832:7: ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier )
                    {
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:832:7: ( KW_DESCRIBE | KW_DESC )
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==KW_DESCRIBE) ) {
                        alt79=1;
                    }
                    else if ( (LA79_0==KW_DESC) ) {
                        alt79=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("832:7: ( KW_DESCRIBE | KW_DESC )", 79, 0, input);

                        throw nvae;
                    }
                    switch (alt79) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:832:8: KW_DESCRIBE
                            {
                            KW_DESCRIBE269=(Token)input.LT(1);
                            match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5094); 
                            stream_KW_DESCRIBE.add(KW_DESCRIBE269);


                            }
                            break;
                        case 2 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:832:20: KW_DESC
                            {
                            KW_DESC270=(Token)input.LT(1);
                            match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5096); 
                            stream_KW_DESC.add(KW_DESC270);


                            }
                            break;

                    }

                    KW_DATABASE271=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_descStatement5099); 
                    stream_KW_DATABASE.add(KW_DATABASE271);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:832:41: ( KW_EXTENDED )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==KW_EXTENDED) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:832:41: KW_EXTENDED
                            {
                            KW_EXTENDED272=(Token)input.LT(1);
                            match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5101); 
                            stream_KW_EXTENDED.add(KW_EXTENDED272);


                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:832:54: (dbName= Identifier )
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:832:55: dbName= Identifier
                    {
                    dbName=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_descStatement5107); 
                    stream_Identifier.add(dbName);


                    }


                    // AST REWRITE
                    // elements: KW_EXTENDED, dbName
                    // token labels: dbName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 832:74: -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:832:77: ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESCDATABASE, "TOK_DESCDATABASE"), root_1);

                        adaptor.addChild(root_1, stream_dbName.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:832:104: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, stream_KW_EXTENDED.next());

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end descStatement

    public static class analyzeStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start analyzeStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:835:1: analyzeStatement : KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS -> ^( TOK_ANALYZE $parttype) ;
    public final analyzeStatement_return analyzeStatement() throws RecognitionException {
        analyzeStatement_return retval = new analyzeStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ANALYZE273=null;
        Token KW_TABLE274=null;
        Token KW_COMPUTE275=null;
        Token KW_STATISTICS276=null;
        tableOrPartition_return parttype = null;


        CommonTree KW_ANALYZE273_tree=null;
        CommonTree KW_TABLE274_tree=null;
        CommonTree KW_COMPUTE275_tree=null;
        CommonTree KW_STATISTICS276_tree=null;
        RewriteRuleTokenStream stream_KW_ANALYZE=new RewriteRuleTokenStream(adaptor,"token KW_ANALYZE");
        RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_COMPUTE=new RewriteRuleTokenStream(adaptor,"token KW_COMPUTE");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         msgs.push("analyze statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:838:5: ( KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS -> ^( TOK_ANALYZE $parttype) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:838:7: KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS
            {
            KW_ANALYZE273=(Token)input.LT(1);
            match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_analyzeStatement5147); 
            stream_KW_ANALYZE.add(KW_ANALYZE273);

            KW_TABLE274=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_analyzeStatement5149); 
            stream_KW_TABLE.add(KW_TABLE274);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:838:27: (parttype= tableOrPartition )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:838:28: parttype= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_analyzeStatement5154);
            parttype=tableOrPartition();
            _fsp--;

            stream_tableOrPartition.add(parttype.getTree());

            }

            KW_COMPUTE275=(Token)input.LT(1);
            match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_analyzeStatement5157); 
            stream_KW_COMPUTE.add(KW_COMPUTE275);

            KW_STATISTICS276=(Token)input.LT(1);
            match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_analyzeStatement5159); 
            stream_KW_STATISTICS.add(KW_STATISTICS276);


            // AST REWRITE
            // elements: parttype
            // token labels: 
            // rule labels: retval, parttype
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"token parttype",parttype!=null?parttype.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 838:80: -> ^( TOK_ANALYZE $parttype)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:838:83: ^( TOK_ANALYZE $parttype)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ANALYZE, "TOK_ANALYZE"), root_1);

                adaptor.addChild(root_1, stream_parttype.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end analyzeStatement

    public static class showStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start showStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:841:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) );
    public final showStatement_return showStatement() throws RecognitionException {
        showStatement_return retval = new showStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token db_name=null;
        Token tblName=null;
        Token prptyName=null;
        Token isExtended=null;
        Token showOptions=null;
        Token KW_SHOW277=null;
        Token KW_DATABASES278=null;
        Token KW_SCHEMAS279=null;
        Token KW_LIKE280=null;
        Token KW_SHOW282=null;
        Token KW_TABLES283=null;
        Token KW_FROM284=null;
        Token KW_IN285=null;
        Token KW_LIKE286=null;
        Token KW_SHOW289=null;
        Token KW_FUNCTIONS290=null;
        Token KW_SHOW292=null;
        Token KW_PARTITIONS293=null;
        Token Identifier294=null;
        Token KW_SHOW296=null;
        Token KW_TABLE297=null;
        Token KW_EXTENDED298=null;
        Token KW_FROM299=null;
        Token KW_IN300=null;
        Token KW_LIKE301=null;
        Token KW_SHOW304=null;
        Token KW_TBLPROPERTIES305=null;
        Token LPAREN306=null;
        Token RPAREN307=null;
        Token KW_SHOW308=null;
        Token KW_LOCKS309=null;
        Token KW_SHOW310=null;
        Token KW_INDEX311=null;
        Token KW_INDEXES312=null;
        Token KW_ON313=null;
        Token KW_FROM315=null;
        Token KW_IN316=null;
        partTypeExpr_return parttype = null;

        showStmtIdentifier_return showStmtIdentifier281 = null;

        showStmtIdentifier_return showStmtIdentifier287 = null;

        showStmtIdentifier_return showStmtIdentifier288 = null;

        showStmtIdentifier_return showStmtIdentifier291 = null;

        partitionSpec_return partitionSpec295 = null;

        showStmtIdentifier_return showStmtIdentifier302 = null;

        partitionSpec_return partitionSpec303 = null;

        showStmtIdentifier_return showStmtIdentifier314 = null;


        CommonTree db_name_tree=null;
        CommonTree tblName_tree=null;
        CommonTree prptyName_tree=null;
        CommonTree isExtended_tree=null;
        CommonTree showOptions_tree=null;
        CommonTree KW_SHOW277_tree=null;
        CommonTree KW_DATABASES278_tree=null;
        CommonTree KW_SCHEMAS279_tree=null;
        CommonTree KW_LIKE280_tree=null;
        CommonTree KW_SHOW282_tree=null;
        CommonTree KW_TABLES283_tree=null;
        CommonTree KW_FROM284_tree=null;
        CommonTree KW_IN285_tree=null;
        CommonTree KW_LIKE286_tree=null;
        CommonTree KW_SHOW289_tree=null;
        CommonTree KW_FUNCTIONS290_tree=null;
        CommonTree KW_SHOW292_tree=null;
        CommonTree KW_PARTITIONS293_tree=null;
        CommonTree Identifier294_tree=null;
        CommonTree KW_SHOW296_tree=null;
        CommonTree KW_TABLE297_tree=null;
        CommonTree KW_EXTENDED298_tree=null;
        CommonTree KW_FROM299_tree=null;
        CommonTree KW_IN300_tree=null;
        CommonTree KW_LIKE301_tree=null;
        CommonTree KW_SHOW304_tree=null;
        CommonTree KW_TBLPROPERTIES305_tree=null;
        CommonTree LPAREN306_tree=null;
        CommonTree RPAREN307_tree=null;
        CommonTree KW_SHOW308_tree=null;
        CommonTree KW_LOCKS309_tree=null;
        CommonTree KW_SHOW310_tree=null;
        CommonTree KW_INDEX311_tree=null;
        CommonTree KW_INDEXES312_tree=null;
        CommonTree KW_ON313_tree=null;
        CommonTree KW_FROM315_tree=null;
        CommonTree KW_IN316_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_LOCKS=new RewriteRuleTokenStream(adaptor,"token KW_LOCKS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_INDEXES=new RewriteRuleTokenStream(adaptor,"token KW_INDEXES");
        RewriteRuleTokenStream stream_KW_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMAS");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_TABLES=new RewriteRuleTokenStream(adaptor,"token KW_TABLES");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_DATABASES=new RewriteRuleTokenStream(adaptor,"token KW_DATABASES");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
         msgs.push("show statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:844:5: ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) )
            int alt99=8;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==KW_SHOW) ) {
                switch ( input.LA(2) ) {
                case KW_LOCKS:
                    {
                    alt99=7;
                    }
                    break;
                case KW_FUNCTIONS:
                    {
                    alt99=3;
                    }
                    break;
                case KW_TBLPROPERTIES:
                    {
                    alt99=6;
                    }
                    break;
                case KW_TABLES:
                    {
                    alt99=2;
                    }
                    break;
                case KW_TABLE:
                    {
                    alt99=5;
                    }
                    break;
                case KW_PARTITIONS:
                    {
                    alt99=4;
                    }
                    break;
                case KW_FORMATTED:
                case KW_INDEX:
                case KW_INDEXES:
                    {
                    alt99=8;
                    }
                    break;
                case KW_DATABASES:
                case KW_SCHEMAS:
                    {
                    alt99=1;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("841:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) );", 99, 1, input);

                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("841:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) );", 99, 0, input);

                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:844:7: KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )?
                    {
                    KW_SHOW277=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5195); 
                    stream_KW_SHOW.add(KW_SHOW277);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:844:15: ( KW_DATABASES | KW_SCHEMAS )
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==KW_DATABASES) ) {
                        alt82=1;
                    }
                    else if ( (LA82_0==KW_SCHEMAS) ) {
                        alt82=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("844:15: ( KW_DATABASES | KW_SCHEMAS )", 82, 0, input);

                        throw nvae;
                    }
                    switch (alt82) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:844:16: KW_DATABASES
                            {
                            KW_DATABASES278=(Token)input.LT(1);
                            match(input,KW_DATABASES,FOLLOW_KW_DATABASES_in_showStatement5198); 
                            stream_KW_DATABASES.add(KW_DATABASES278);


                            }
                            break;
                        case 2 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:844:29: KW_SCHEMAS
                            {
                            KW_SCHEMAS279=(Token)input.LT(1);
                            match(input,KW_SCHEMAS,FOLLOW_KW_SCHEMAS_in_showStatement5200); 
                            stream_KW_SCHEMAS.add(KW_SCHEMAS279);


                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:844:41: ( KW_LIKE showStmtIdentifier )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==KW_LIKE) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:844:42: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE280=(Token)input.LT(1);
                            match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement5204); 
                            stream_KW_LIKE.add(KW_LIKE280);

                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5206);
                            showStmtIdentifier281=showStmtIdentifier();
                            _fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier281.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 844:71: -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:844:74: ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWDATABASES, "TOK_SHOWDATABASES"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:844:94: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.next());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:7: KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    {
                    KW_SHOW282=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5225); 
                    stream_KW_SHOW.add(KW_SHOW282);

                    KW_TABLES283=(Token)input.LT(1);
                    match(input,KW_TABLES,FOLLOW_KW_TABLES_in_showStatement5227); 
                    stream_KW_TABLES.add(KW_TABLES283);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:25: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==KW_FROM||LA85_0==KW_IN) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:26: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:26: ( KW_FROM | KW_IN )
                            int alt84=2;
                            int LA84_0 = input.LA(1);

                            if ( (LA84_0==KW_FROM) ) {
                                alt84=1;
                            }
                            else if ( (LA84_0==KW_IN) ) {
                                alt84=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("845:26: ( KW_FROM | KW_IN )", 84, 0, input);

                                throw nvae;
                            }
                            switch (alt84) {
                                case 1 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:27: KW_FROM
                                    {
                                    KW_FROM284=(Token)input.LT(1);
                                    match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement5231); 
                                    stream_KW_FROM.add(KW_FROM284);


                                    }
                                    break;
                                case 2 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:35: KW_IN
                                    {
                                    KW_IN285=(Token)input.LT(1);
                                    match(input,KW_IN,FOLLOW_KW_IN_in_showStatement5233); 
                                    stream_KW_IN.add(KW_IN285);


                                    }
                                    break;

                            }

                            db_name=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_showStatement5238); 
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:63: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    int alt86=3;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==KW_LIKE) ) {
                        alt86=1;
                    }
                    else if ( (LA86_0==StringLiteral||LA86_0==Identifier) ) {
                        alt86=2;
                    }
                    switch (alt86) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:64: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE286=(Token)input.LT(1);
                            match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement5243); 
                            stream_KW_LIKE.add(KW_LIKE286);

                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5245);
                            showStmtIdentifier287=showStmtIdentifier();
                            _fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier287.getTree());

                            }
                            break;
                        case 2 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:91: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5247);
                            showStmtIdentifier288=showStmtIdentifier();
                            _fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier288.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: db_name, showStmtIdentifier
                    // token labels: db_name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 845:113: -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:116: ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWTABLES, "TOK_SHOWTABLES"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:133: ( TOK_FROM $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, adaptor.create(TOK_FROM, "TOK_FROM"));
                            adaptor.addChild(root_1, stream_db_name.next());

                        }
                        stream_db_name.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:845:154: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.next());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:846:7: KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )?
                    {
                    KW_SHOW289=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5275); 
                    stream_KW_SHOW.add(KW_SHOW289);

                    KW_FUNCTIONS290=(Token)input.LT(1);
                    match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_showStatement5277); 
                    stream_KW_FUNCTIONS.add(KW_FUNCTIONS290);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:846:28: ( showStmtIdentifier )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==StringLiteral||LA87_0==Identifier) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:846:28: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5279);
                            showStmtIdentifier291=showStmtIdentifier();
                            _fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier291.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 846:49: -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:846:52: ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWFUNCTIONS, "TOK_SHOWFUNCTIONS"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:846:72: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.next());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:847:7: KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )?
                    {
                    KW_SHOW292=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5298); 
                    stream_KW_SHOW.add(KW_SHOW292);

                    KW_PARTITIONS293=(Token)input.LT(1);
                    match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_showStatement5300); 
                    stream_KW_PARTITIONS.add(KW_PARTITIONS293);

                    Identifier294=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_showStatement5302); 
                    stream_Identifier.add(Identifier294);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:847:40: ( partitionSpec )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==KW_PARTITION) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:847:40: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement5304);
                            partitionSpec295=partitionSpec();
                            _fsp--;

                            stream_partitionSpec.add(partitionSpec295.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: Identifier, partitionSpec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 847:55: -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:847:58: ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWPARTITIONS, "TOK_SHOWPARTITIONS"), root_1);

                        adaptor.addChild(root_1, stream_Identifier.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:847:90: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.next());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:848:7: KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )?
                    {
                    KW_SHOW296=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5324); 
                    stream_KW_SHOW.add(KW_SHOW296);

                    KW_TABLE297=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement5326); 
                    stream_KW_TABLE.add(KW_TABLE297);

                    KW_EXTENDED298=(Token)input.LT(1);
                    match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement5328); 
                    stream_KW_EXTENDED.add(KW_EXTENDED298);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:848:36: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==KW_FROM||LA90_0==KW_IN) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:848:37: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:848:37: ( KW_FROM | KW_IN )
                            int alt89=2;
                            int LA89_0 = input.LA(1);

                            if ( (LA89_0==KW_FROM) ) {
                                alt89=1;
                            }
                            else if ( (LA89_0==KW_IN) ) {
                                alt89=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("848:37: ( KW_FROM | KW_IN )", 89, 0, input);

                                throw nvae;
                            }
                            switch (alt89) {
                                case 1 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:848:38: KW_FROM
                                    {
                                    KW_FROM299=(Token)input.LT(1);
                                    match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement5332); 
                                    stream_KW_FROM.add(KW_FROM299);


                                    }
                                    break;
                                case 2 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:848:46: KW_IN
                                    {
                                    KW_IN300=(Token)input.LT(1);
                                    match(input,KW_IN,FOLLOW_KW_IN_in_showStatement5334); 
                                    stream_KW_IN.add(KW_IN300);


                                    }
                                    break;

                            }

                            db_name=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_showStatement5339); 
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }

                    KW_LIKE301=(Token)input.LT(1);
                    match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement5343); 
                    stream_KW_LIKE.add(KW_LIKE301);

                    pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5345);
                    showStmtIdentifier302=showStmtIdentifier();
                    _fsp--;

                    stream_showStmtIdentifier.add(showStmtIdentifier302.getTree());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:848:101: ( partitionSpec )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==KW_PARTITION) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:848:101: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement5347);
                            partitionSpec303=partitionSpec();
                            _fsp--;

                            stream_partitionSpec.add(partitionSpec303.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier, db_name, partitionSpec
                    // token labels: db_name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 849:5: -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:849:8: ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOW_TABLESTATUS, "TOK_SHOW_TABLESTATUS"), root_1);

                        adaptor.addChild(root_1, stream_showStmtIdentifier.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:849:50: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.next());

                        }
                        stream_db_name.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:849:60: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.next());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 6 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:850:7: KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )?
                    {
                    KW_SHOW304=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5375); 
                    stream_KW_SHOW.add(KW_SHOW304);

                    KW_TBLPROPERTIES305=(Token)input.LT(1);
                    match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_showStatement5377); 
                    stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES305);

                    tblName=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_showStatement5381); 
                    stream_Identifier.add(tblName);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:850:51: ( LPAREN prptyName= StringLiteral RPAREN )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==LPAREN) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:850:52: LPAREN prptyName= StringLiteral RPAREN
                            {
                            LPAREN306=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_showStatement5384); 
                            stream_LPAREN.add(LPAREN306);

                            prptyName=(Token)input.LT(1);
                            match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement5388); 
                            stream_StringLiteral.add(prptyName);

                            RPAREN307=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_showStatement5390); 
                            stream_RPAREN.add(RPAREN307);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: prptyName, tblName
                    // token labels: prptyName, tblName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_prptyName=new RewriteRuleTokenStream(adaptor,"token prptyName",prptyName);
                    RewriteRuleTokenStream stream_tblName=new RewriteRuleTokenStream(adaptor,"token tblName",tblName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 850:92: -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:850:95: ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOW_TBLPROPERTIES, "TOK_SHOW_TBLPROPERTIES"), root_1);

                        adaptor.addChild(root_1, stream_tblName.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:850:129: ( $prptyName)?
                        if ( stream_prptyName.hasNext() ) {
                            adaptor.addChild(root_1, stream_prptyName.next());

                        }
                        stream_prptyName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 7 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:851:7: KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )?
                    {
                    KW_SHOW308=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5413); 
                    stream_KW_SHOW.add(KW_SHOW308);

                    KW_LOCKS309=(Token)input.LT(1);
                    match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_showStatement5415); 
                    stream_KW_LOCKS.add(KW_LOCKS309);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:851:24: (parttype= partTypeExpr )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==Identifier) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:851:25: parttype= partTypeExpr
                            {
                            pushFollow(FOLLOW_partTypeExpr_in_showStatement5420);
                            parttype=partTypeExpr();
                            _fsp--;

                            stream_partTypeExpr.add(parttype.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:851:49: (isExtended= KW_EXTENDED )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==KW_EXTENDED) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:851:50: isExtended= KW_EXTENDED
                            {
                            isExtended=(Token)input.LT(1);
                            match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement5427); 
                            stream_KW_EXTENDED.add(isExtended);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: parttype, isExtended
                    // token labels: isExtended
                    // rule labels: retval, parttype
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"token parttype",parttype!=null?parttype.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 851:75: -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:851:78: ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWLOCKS, "TOK_SHOWLOCKS"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:851:94: ( $parttype)?
                        if ( stream_parttype.hasNext() ) {
                            adaptor.addChild(root_1, stream_parttype.next());

                        }
                        stream_parttype.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:851:105: ( $isExtended)?
                        if ( stream_isExtended.hasNext() ) {
                            adaptor.addChild(root_1, stream_isExtended.next());

                        }
                        stream_isExtended.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 8 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:852:7: KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    {
                    KW_SHOW310=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5451); 
                    stream_KW_SHOW.add(KW_SHOW310);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:852:15: (showOptions= KW_FORMATTED )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==KW_FORMATTED) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:852:16: showOptions= KW_FORMATTED
                            {
                            showOptions=(Token)input.LT(1);
                            match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_showStatement5456); 
                            stream_KW_FORMATTED.add(showOptions);


                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:852:43: ( KW_INDEX | KW_INDEXES )
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==KW_INDEX) ) {
                        alt96=1;
                    }
                    else if ( (LA96_0==KW_INDEXES) ) {
                        alt96=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("852:43: ( KW_INDEX | KW_INDEXES )", 96, 0, input);

                        throw nvae;
                    }
                    switch (alt96) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:852:44: KW_INDEX
                            {
                            KW_INDEX311=(Token)input.LT(1);
                            match(input,KW_INDEX,FOLLOW_KW_INDEX_in_showStatement5461); 
                            stream_KW_INDEX.add(KW_INDEX311);


                            }
                            break;
                        case 2 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:852:53: KW_INDEXES
                            {
                            KW_INDEXES312=(Token)input.LT(1);
                            match(input,KW_INDEXES,FOLLOW_KW_INDEXES_in_showStatement5463); 
                            stream_KW_INDEXES.add(KW_INDEXES312);


                            }
                            break;

                    }

                    KW_ON313=(Token)input.LT(1);
                    match(input,KW_ON,FOLLOW_KW_ON_in_showStatement5466); 
                    stream_KW_ON.add(KW_ON313);

                    pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5468);
                    showStmtIdentifier314=showStmtIdentifier();
                    _fsp--;

                    stream_showStmtIdentifier.add(showStmtIdentifier314.getTree());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:852:90: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==KW_FROM||LA98_0==KW_IN) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:852:91: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:852:91: ( KW_FROM | KW_IN )
                            int alt97=2;
                            int LA97_0 = input.LA(1);

                            if ( (LA97_0==KW_FROM) ) {
                                alt97=1;
                            }
                            else if ( (LA97_0==KW_IN) ) {
                                alt97=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("852:91: ( KW_FROM | KW_IN )", 97, 0, input);

                                throw nvae;
                            }
                            switch (alt97) {
                                case 1 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:852:92: KW_FROM
                                    {
                                    KW_FROM315=(Token)input.LT(1);
                                    match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement5472); 
                                    stream_KW_FROM.add(KW_FROM315);


                                    }
                                    break;
                                case 2 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:852:100: KW_IN
                                    {
                                    KW_IN316=(Token)input.LT(1);
                                    match(input,KW_IN,FOLLOW_KW_IN_in_showStatement5474); 
                                    stream_KW_IN.add(KW_IN316);


                                    }
                                    break;

                            }

                            db_name=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_showStatement5479); 
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showOptions, db_name, showStmtIdentifier
                    // token labels: showOptions, db_name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_showOptions=new RewriteRuleTokenStream(adaptor,"token showOptions",showOptions);
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 853:5: -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:853:8: ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWINDEXES, "TOK_SHOWINDEXES"), root_1);

                        adaptor.addChild(root_1, stream_showStmtIdentifier.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:853:45: ( $showOptions)?
                        if ( stream_showOptions.hasNext() ) {
                            adaptor.addChild(root_1, stream_showOptions.next());

                        }
                        stream_showOptions.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:853:59: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.next());

                        }
                        stream_db_name.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end showStatement

    public static class lockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start lockStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:856:1: lockStatement : KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) ;
    public final lockStatement_return lockStatement() throws RecognitionException {
        lockStatement_return retval = new lockStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_LOCK317=null;
        Token KW_TABLE318=null;
        tableName_return tableName319 = null;

        partitionSpec_return partitionSpec320 = null;

        lockMode_return lockMode321 = null;


        CommonTree KW_LOCK317_tree=null;
        CommonTree KW_TABLE318_tree=null;
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");
         msgs.push("lock statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:859:5: ( KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:859:7: KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode
            {
            KW_LOCK317=(Token)input.LT(1);
            match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockStatement5528); 
            stream_KW_LOCK.add(KW_LOCK317);

            KW_TABLE318=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_lockStatement5530); 
            stream_KW_TABLE.add(KW_TABLE318);

            pushFollow(FOLLOW_tableName_in_lockStatement5532);
            tableName319=tableName();
            _fsp--;

            stream_tableName.add(tableName319.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:859:34: ( partitionSpec )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==KW_PARTITION) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:859:34: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_lockStatement5534);
                    partitionSpec320=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec320.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_lockMode_in_lockStatement5537);
            lockMode321=lockMode();
            _fsp--;

            stream_lockMode.add(lockMode321.getTree());

            // AST REWRITE
            // elements: lockMode, tableName, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 859:58: -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:859:61: ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LOCKTABLE, "TOK_LOCKTABLE"), root_1);

                adaptor.addChild(root_1, stream_tableName.next());
                adaptor.addChild(root_1, stream_lockMode.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:859:96: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lockStatement

    public static class lockMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start lockMode
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:862:1: lockMode : ( KW_SHARED | KW_EXCLUSIVE );
    public final lockMode_return lockMode() throws RecognitionException {
        lockMode_return retval = new lockMode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set322=null;

        CommonTree set322_tree=null;

         msgs.push("lock mode"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:865:5: ( KW_SHARED | KW_EXCLUSIVE )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set322=(Token)input.LT(1);
            if ( (input.LA(1)>=KW_SHARED && input.LA(1)<=KW_EXCLUSIVE) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set322));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_lockMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lockMode

    public static class unlockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unlockStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:868:1: unlockStatement : KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) ;
    public final unlockStatement_return unlockStatement() throws RecognitionException {
        unlockStatement_return retval = new unlockStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_UNLOCK323=null;
        Token KW_TABLE324=null;
        tableName_return tableName325 = null;

        partitionSpec_return partitionSpec326 = null;


        CommonTree KW_UNLOCK323_tree=null;
        CommonTree KW_TABLE324_tree=null;
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("unlock statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:871:5: ( KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:871:7: KW_UNLOCK KW_TABLE tableName ( partitionSpec )?
            {
            KW_UNLOCK323=(Token)input.LT(1);
            match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockStatement5608); 
            stream_KW_UNLOCK.add(KW_UNLOCK323);

            KW_TABLE324=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_unlockStatement5610); 
            stream_KW_TABLE.add(KW_TABLE324);

            pushFollow(FOLLOW_tableName_in_unlockStatement5612);
            tableName325=tableName();
            _fsp--;

            stream_tableName.add(tableName325.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:871:36: ( partitionSpec )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==KW_PARTITION) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:871:36: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_unlockStatement5614);
                    partitionSpec326=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec326.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableName, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 871:52: -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:871:55: ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_UNLOCKTABLE, "TOK_UNLOCKTABLE"), root_1);

                adaptor.addChild(root_1, stream_tableName.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:871:83: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end unlockStatement

    public static class createRoleStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createRoleStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:874:1: createRoleStatement : KW_CREATE kwRole roleName= Identifier -> ^( TOK_CREATEROLE $roleName) ;
    public final createRoleStatement_return createRoleStatement() throws RecognitionException {
        createRoleStatement_return retval = new createRoleStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token roleName=null;
        Token KW_CREATE327=null;
        kwRole_return kwRole328 = null;


        CommonTree roleName_tree=null;
        CommonTree KW_CREATE327_tree=null;
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
         msgs.push("create role"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:877:5: ( KW_CREATE kwRole roleName= Identifier -> ^( TOK_CREATEROLE $roleName) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:877:7: KW_CREATE kwRole roleName= Identifier
            {
            KW_CREATE327=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createRoleStatement5654); 
            stream_KW_CREATE.add(KW_CREATE327);

            pushFollow(FOLLOW_kwRole_in_createRoleStatement5656);
            kwRole328=kwRole();
            _fsp--;

            stream_kwRole.add(kwRole328.getTree());
            roleName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createRoleStatement5660); 
            stream_Identifier.add(roleName);


            // AST REWRITE
            // elements: roleName
            // token labels: roleName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_roleName=new RewriteRuleTokenStream(adaptor,"token roleName",roleName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 878:5: -> ^( TOK_CREATEROLE $roleName)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:878:8: ^( TOK_CREATEROLE $roleName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEROLE, "TOK_CREATEROLE"), root_1);

                adaptor.addChild(root_1, stream_roleName.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createRoleStatement

    public static class dropRoleStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropRoleStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:881:1: dropRoleStatement : KW_DROP kwRole roleName= Identifier -> ^( TOK_DROPROLE $roleName) ;
    public final dropRoleStatement_return dropRoleStatement() throws RecognitionException {
        dropRoleStatement_return retval = new dropRoleStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token roleName=null;
        Token KW_DROP329=null;
        kwRole_return kwRole330 = null;


        CommonTree roleName_tree=null;
        CommonTree KW_DROP329_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        msgs.push("drop role");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:884:5: ( KW_DROP kwRole roleName= Identifier -> ^( TOK_DROPROLE $roleName) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:884:7: KW_DROP kwRole roleName= Identifier
            {
            KW_DROP329=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropRoleStatement5700); 
            stream_KW_DROP.add(KW_DROP329);

            pushFollow(FOLLOW_kwRole_in_dropRoleStatement5702);
            kwRole330=kwRole();
            _fsp--;

            stream_kwRole.add(kwRole330.getTree());
            roleName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropRoleStatement5706); 
            stream_Identifier.add(roleName);


            // AST REWRITE
            // elements: roleName
            // token labels: roleName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_roleName=new RewriteRuleTokenStream(adaptor,"token roleName",roleName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 885:5: -> ^( TOK_DROPROLE $roleName)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:885:8: ^( TOK_DROPROLE $roleName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPROLE, "TOK_DROPROLE"), root_1);

                adaptor.addChild(root_1, stream_roleName.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropRoleStatement

    public static class grantPrivileges_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start grantPrivileges
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:888:1: grantPrivileges : KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? ) ;
    public final grantPrivileges_return grantPrivileges() throws RecognitionException {
        grantPrivileges_return retval = new grantPrivileges_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_GRANT331=null;
        Token KW_TO333=null;
        Token KW_WITH335=null;
        privilegeList_return privList = null;

        privilegeObject_return privilegeObject332 = null;

        principalSpecification_return principalSpecification334 = null;

        withOption_return withOption336 = null;


        CommonTree KW_GRANT331_tree=null;
        CommonTree KW_TO333_tree=null;
        CommonTree KW_WITH335_tree=null;
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        RewriteRuleSubtreeStream stream_withOption=new RewriteRuleSubtreeStream(adaptor,"rule withOption");
        msgs.push("grant privileges");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:891:5: ( KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:891:7: KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )?
            {
            KW_GRANT331=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantPrivileges5746); 
            stream_KW_GRANT.add(KW_GRANT331);

            pushFollow(FOLLOW_privilegeList_in_grantPrivileges5750);
            privList=privilegeList();
            _fsp--;

            stream_privilegeList.add(privList.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:892:7: ( privilegeObject )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==KW_ON) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:892:7: privilegeObject
                    {
                    pushFollow(FOLLOW_privilegeObject_in_grantPrivileges5758);
                    privilegeObject332=privilegeObject();
                    _fsp--;

                    stream_privilegeObject.add(privilegeObject332.getTree());

                    }
                    break;

            }

            KW_TO333=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_grantPrivileges5767); 
            stream_KW_TO.add(KW_TO333);

            pushFollow(FOLLOW_principalSpecification_in_grantPrivileges5769);
            principalSpecification334=principalSpecification();
            _fsp--;

            stream_principalSpecification.add(principalSpecification334.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:894:7: ( KW_WITH withOption )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==KW_WITH) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:894:8: KW_WITH withOption
                    {
                    KW_WITH335=(Token)input.LT(1);
                    match(input,KW_WITH,FOLLOW_KW_WITH_in_grantPrivileges5778); 
                    stream_KW_WITH.add(KW_WITH335);

                    pushFollow(FOLLOW_withOption_in_grantPrivileges5780);
                    withOption336=withOption();
                    _fsp--;

                    stream_withOption.add(withOption336.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: principalSpecification, withOption, privList, privilegeObject
            // token labels: 
            // rule labels: retval, privList
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_privList=new RewriteRuleSubtreeStream(adaptor,"token privList",privList!=null?privList.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 895:5: -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:895:8: ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GRANT, "TOK_GRANT"), root_1);

                adaptor.addChild(root_1, stream_privList.next());
                adaptor.addChild(root_1, stream_principalSpecification.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:895:53: ( privilegeObject )?
                if ( stream_privilegeObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeObject.next());

                }
                stream_privilegeObject.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:895:70: ( withOption )?
                if ( stream_withOption.hasNext() ) {
                    adaptor.addChild(root_1, stream_withOption.next());

                }
                stream_withOption.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end grantPrivileges

    public static class revokePrivileges_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start revokePrivileges
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:898:1: revokePrivileges : KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ) ;
    public final revokePrivileges_return revokePrivileges() throws RecognitionException {
        revokePrivileges_return retval = new revokePrivileges_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_REVOKE337=null;
        Token KW_FROM340=null;
        privilegeList_return privilegeList338 = null;

        privilegeObject_return privilegeObject339 = null;

        principalSpecification_return principalSpecification341 = null;


        CommonTree KW_REVOKE337_tree=null;
        CommonTree KW_FROM340_tree=null;
        RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        msgs.push("revoke privileges");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:901:5: ( KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:901:7: KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification
            {
            KW_REVOKE337=(Token)input.LT(1);
            match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokePrivileges5830); 
            stream_KW_REVOKE.add(KW_REVOKE337);

            pushFollow(FOLLOW_privilegeList_in_revokePrivileges5832);
            privilegeList338=privilegeList();
            _fsp--;

            stream_privilegeList.add(privilegeList338.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:901:31: ( privilegeObject )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==KW_ON) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:901:31: privilegeObject
                    {
                    pushFollow(FOLLOW_privilegeObject_in_revokePrivileges5834);
                    privilegeObject339=privilegeObject();
                    _fsp--;

                    stream_privilegeObject.add(privilegeObject339.getTree());

                    }
                    break;

            }

            KW_FROM340=(Token)input.LT(1);
            match(input,KW_FROM,FOLLOW_KW_FROM_in_revokePrivileges5837); 
            stream_KW_FROM.add(KW_FROM340);

            pushFollow(FOLLOW_principalSpecification_in_revokePrivileges5839);
            principalSpecification341=principalSpecification();
            _fsp--;

            stream_principalSpecification.add(principalSpecification341.getTree());

            // AST REWRITE
            // elements: privilegeObject, principalSpecification, privilegeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 902:5: -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:902:8: ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_REVOKE, "TOK_REVOKE"), root_1);

                adaptor.addChild(root_1, stream_privilegeList.next());
                adaptor.addChild(root_1, stream_principalSpecification.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:902:58: ( privilegeObject )?
                if ( stream_privilegeObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeObject.next());

                }
                stream_privilegeObject.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end revokePrivileges

    public static class grantRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start grantRole
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:905:1: grantRole : KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ ) ;
    public final grantRole_return grantRole() throws RecognitionException {
        grantRole_return retval = new grantRole_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_GRANT342=null;
        Token Identifier344=null;
        Token COMMA345=null;
        Token Identifier346=null;
        Token KW_TO347=null;
        kwRole_return kwRole343 = null;

        principalSpecification_return principalSpecification348 = null;


        CommonTree KW_GRANT342_tree=null;
        CommonTree Identifier344_tree=null;
        CommonTree COMMA345_tree=null;
        CommonTree Identifier346_tree=null;
        CommonTree KW_TO347_tree=null;
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        msgs.push("grant role");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:908:5: ( KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:908:7: KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification
            {
            KW_GRANT342=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantRole5883); 
            stream_KW_GRANT.add(KW_GRANT342);

            pushFollow(FOLLOW_kwRole_in_grantRole5885);
            kwRole343=kwRole();
            _fsp--;

            stream_kwRole.add(kwRole343.getTree());
            Identifier344=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_grantRole5887); 
            stream_Identifier.add(Identifier344);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:908:34: ( COMMA Identifier )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:908:35: COMMA Identifier
            	    {
            	    COMMA345=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_grantRole5890); 
            	    stream_COMMA.add(COMMA345);

            	    Identifier346=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_grantRole5892); 
            	    stream_Identifier.add(Identifier346);


            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);

            KW_TO347=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_grantRole5896); 
            stream_KW_TO.add(KW_TO347);

            pushFollow(FOLLOW_principalSpecification_in_grantRole5898);
            principalSpecification348=principalSpecification();
            _fsp--;

            stream_principalSpecification.add(principalSpecification348.getTree());

            // AST REWRITE
            // elements: Identifier, principalSpecification
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 909:5: -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:909:8: ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GRANT_ROLE, "TOK_GRANT_ROLE"), root_1);

                adaptor.addChild(root_1, stream_principalSpecification.next());
                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end grantRole

    public static class revokeRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start revokeRole
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:912:1: revokeRole : KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ ) ;
    public final revokeRole_return revokeRole() throws RecognitionException {
        revokeRole_return retval = new revokeRole_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_REVOKE349=null;
        Token Identifier351=null;
        Token COMMA352=null;
        Token Identifier353=null;
        Token KW_FROM354=null;
        kwRole_return kwRole350 = null;

        principalSpecification_return principalSpecification355 = null;


        CommonTree KW_REVOKE349_tree=null;
        CommonTree Identifier351_tree=null;
        CommonTree COMMA352_tree=null;
        CommonTree Identifier353_tree=null;
        CommonTree KW_FROM354_tree=null;
        RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        msgs.push("revoke role");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:915:5: ( KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:915:7: KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification
            {
            KW_REVOKE349=(Token)input.LT(1);
            match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokeRole5940); 
            stream_KW_REVOKE.add(KW_REVOKE349);

            pushFollow(FOLLOW_kwRole_in_revokeRole5942);
            kwRole350=kwRole();
            _fsp--;

            stream_kwRole.add(kwRole350.getTree());
            Identifier351=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_revokeRole5944); 
            stream_Identifier.add(Identifier351);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:915:35: ( COMMA Identifier )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==COMMA) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:915:36: COMMA Identifier
            	    {
            	    COMMA352=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_revokeRole5947); 
            	    stream_COMMA.add(COMMA352);

            	    Identifier353=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_revokeRole5949); 
            	    stream_Identifier.add(Identifier353);


            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);

            KW_FROM354=(Token)input.LT(1);
            match(input,KW_FROM,FOLLOW_KW_FROM_in_revokeRole5953); 
            stream_KW_FROM.add(KW_FROM354);

            pushFollow(FOLLOW_principalSpecification_in_revokeRole5955);
            principalSpecification355=principalSpecification();
            _fsp--;

            stream_principalSpecification.add(principalSpecification355.getTree());

            // AST REWRITE
            // elements: Identifier, principalSpecification
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 916:5: -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:916:8: ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_REVOKE_ROLE, "TOK_REVOKE_ROLE"), root_1);

                adaptor.addChild(root_1, stream_principalSpecification.next());
                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end revokeRole

    public static class showRoleGrants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start showRoleGrants
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:919:1: showRoleGrants : KW_SHOW kwRole KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) ;
    public final showRoleGrants_return showRoleGrants() throws RecognitionException {
        showRoleGrants_return retval = new showRoleGrants_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SHOW356=null;
        Token KW_GRANT358=null;
        kwRole_return kwRole357 = null;

        principalName_return principalName359 = null;


        CommonTree KW_SHOW356_tree=null;
        CommonTree KW_GRANT358_tree=null;
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
        msgs.push("show role grants");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:922:5: ( KW_SHOW kwRole KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:922:7: KW_SHOW kwRole KW_GRANT principalName
            {
            KW_SHOW356=(Token)input.LT(1);
            match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoleGrants5997); 
            stream_KW_SHOW.add(KW_SHOW356);

            pushFollow(FOLLOW_kwRole_in_showRoleGrants5999);
            kwRole357=kwRole();
            _fsp--;

            stream_kwRole.add(kwRole357.getTree());
            KW_GRANT358=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showRoleGrants6001); 
            stream_KW_GRANT.add(KW_GRANT358);

            pushFollow(FOLLOW_principalName_in_showRoleGrants6003);
            principalName359=principalName();
            _fsp--;

            stream_principalName.add(principalName359.getTree());

            // AST REWRITE
            // elements: principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 923:5: -> ^( TOK_SHOW_ROLE_GRANT principalName )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:923:8: ^( TOK_SHOW_ROLE_GRANT principalName )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOW_ROLE_GRANT, "TOK_SHOW_ROLE_GRANT"), root_1);

                adaptor.addChild(root_1, stream_principalName.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end showRoleGrants

    public static class showGrants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start showGrants
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:926:1: showGrants : KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? ) ;
    public final showGrants_return showGrants() throws RecognitionException {
        showGrants_return retval = new showGrants_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SHOW360=null;
        Token KW_GRANT361=null;
        principalName_return principalName362 = null;

        privilegeIncludeColObject_return privilegeIncludeColObject363 = null;


        CommonTree KW_SHOW360_tree=null;
        CommonTree KW_GRANT361_tree=null;
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
        RewriteRuleSubtreeStream stream_privilegeIncludeColObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeIncludeColObject");
        msgs.push("show grants");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:929:5: ( KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:929:7: KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )?
            {
            KW_SHOW360=(Token)input.LT(1);
            match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showGrants6042); 
            stream_KW_SHOW.add(KW_SHOW360);

            KW_GRANT361=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showGrants6044); 
            stream_KW_GRANT.add(KW_GRANT361);

            pushFollow(FOLLOW_principalName_in_showGrants6046);
            principalName362=principalName();
            _fsp--;

            stream_principalName.add(principalName362.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:929:38: ( privilegeIncludeColObject )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==KW_ON) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:929:38: privilegeIncludeColObject
                    {
                    pushFollow(FOLLOW_privilegeIncludeColObject_in_showGrants6048);
                    privilegeIncludeColObject363=privilegeIncludeColObject();
                    _fsp--;

                    stream_privilegeIncludeColObject.add(privilegeIncludeColObject363.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: principalName, privilegeIncludeColObject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 930:5: -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:930:8: ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOW_GRANT, "TOK_SHOW_GRANT"), root_1);

                adaptor.addChild(root_1, stream_principalName.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:930:39: ( privilegeIncludeColObject )?
                if ( stream_privilegeIncludeColObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeIncludeColObject.next());

                }
                stream_privilegeIncludeColObject.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end showGrants

    public static class privilegeIncludeColObject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privilegeIncludeColObject
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:933:1: privilegeIncludeColObject : KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? ) ;
    public final privilegeIncludeColObject_return privilegeIncludeColObject() throws RecognitionException {
        privilegeIncludeColObject_return retval = new privilegeIncludeColObject_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token table=null;
        Token KW_ON364=null;
        Token KW_DATABASE365=null;
        Token Identifier366=null;
        Token LPAREN367=null;
        Token RPAREN368=null;
        columnNameList_return cols = null;

        partitionSpec_return partitionSpec369 = null;


        CommonTree table_tree=null;
        CommonTree KW_ON364_tree=null;
        CommonTree KW_DATABASE365_tree=null;
        CommonTree Identifier366_tree=null;
        CommonTree LPAREN367_tree=null;
        CommonTree RPAREN368_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        msgs.push("privilege object including columns");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:936:5: ( KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:936:7: KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )?
            {
            KW_ON364=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_privilegeIncludeColObject6091); 
            stream_KW_ON.add(KW_ON364);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:936:13: (table= KW_TABLE | KW_DATABASE )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==KW_TABLE) ) {
                alt108=1;
            }
            else if ( (LA108_0==KW_DATABASE) ) {
                alt108=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("936:13: (table= KW_TABLE | KW_DATABASE )", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:936:14: table= KW_TABLE
                    {
                    table=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privilegeIncludeColObject6096); 
                    stream_KW_TABLE.add(table);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:936:29: KW_DATABASE
                    {
                    KW_DATABASE365=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privilegeIncludeColObject6098); 
                    stream_KW_DATABASE.add(KW_DATABASE365);


                    }
                    break;

            }

            Identifier366=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_privilegeIncludeColObject6101); 
            stream_Identifier.add(Identifier366);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:936:53: ( LPAREN cols= columnNameList RPAREN )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==LPAREN) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:936:54: LPAREN cols= columnNameList RPAREN
                    {
                    LPAREN367=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_privilegeIncludeColObject6104); 
                    stream_LPAREN.add(LPAREN367);

                    pushFollow(FOLLOW_columnNameList_in_privilegeIncludeColObject6108);
                    cols=columnNameList();
                    _fsp--;

                    stream_columnNameList.add(cols.getTree());
                    RPAREN368=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_privilegeIncludeColObject6110); 
                    stream_RPAREN.add(RPAREN368);


                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:936:90: ( partitionSpec )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==KW_PARTITION) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:936:90: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_privilegeIncludeColObject6114);
                    partitionSpec369=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec369.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: table, partitionSpec, Identifier, cols
            // token labels: table
            // rule labels: retval, cols
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"token cols",cols!=null?cols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 937:5: -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:937:8: ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_OBJECT_COL, "TOK_PRIV_OBJECT_COL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:937:41: ( $table)?
                if ( stream_table.hasNext() ) {
                    adaptor.addChild(root_1, stream_table.next());

                }
                stream_table.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:937:49: ( $cols)?
                if ( stream_cols.hasNext() ) {
                    adaptor.addChild(root_1, stream_cols.next());

                }
                stream_cols.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:937:56: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privilegeIncludeColObject

    public static class privilegeObject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privilegeObject
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:940:1: privilegeObject : KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )? -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? ) ;
    public final privilegeObject_return privilegeObject() throws RecognitionException {
        privilegeObject_return retval = new privilegeObject_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token table=null;
        Token KW_ON370=null;
        Token KW_DATABASE371=null;
        Token Identifier372=null;
        partitionSpec_return partitionSpec373 = null;


        CommonTree table_tree=null;
        CommonTree KW_ON370_tree=null;
        CommonTree KW_DATABASE371_tree=null;
        CommonTree Identifier372_tree=null;
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        msgs.push("privilege subject");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:943:5: ( KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )? -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:943:7: KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )?
            {
            KW_ON370=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_privilegeObject6165); 
            stream_KW_ON.add(KW_ON370);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:943:13: (table= KW_TABLE | KW_DATABASE )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==KW_TABLE) ) {
                alt111=1;
            }
            else if ( (LA111_0==KW_DATABASE) ) {
                alt111=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("943:13: (table= KW_TABLE | KW_DATABASE )", 111, 0, input);

                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:943:14: table= KW_TABLE
                    {
                    table=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privilegeObject6170); 
                    stream_KW_TABLE.add(table);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:943:29: KW_DATABASE
                    {
                    KW_DATABASE371=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privilegeObject6172); 
                    stream_KW_DATABASE.add(KW_DATABASE371);


                    }
                    break;

            }

            Identifier372=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_privilegeObject6175); 
            stream_Identifier.add(Identifier372);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:943:53: ( partitionSpec )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==KW_PARTITION) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:943:53: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_privilegeObject6177);
                    partitionSpec373=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec373.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, Identifier, table
            // token labels: table
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 944:5: -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:944:8: ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_OBJECT, "TOK_PRIV_OBJECT"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:944:37: ( $table)?
                if ( stream_table.hasNext() ) {
                    adaptor.addChild(root_1, stream_table.next());

                }
                stream_table.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:944:45: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privilegeObject

    public static class privilegeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privilegeList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:947:1: privilegeList : privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) ;
    public final privilegeList_return privilegeList() throws RecognitionException {
        privilegeList_return retval = new privilegeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA375=null;
        privlegeDef_return privlegeDef374 = null;

        privlegeDef_return privlegeDef376 = null;


        CommonTree COMMA375_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_privlegeDef=new RewriteRuleSubtreeStream(adaptor,"rule privlegeDef");
        msgs.push("grant privilege list");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:950:5: ( privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:950:7: privlegeDef ( COMMA privlegeDef )*
            {
            pushFollow(FOLLOW_privlegeDef_in_privilegeList6224);
            privlegeDef374=privlegeDef();
            _fsp--;

            stream_privlegeDef.add(privlegeDef374.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:950:19: ( COMMA privlegeDef )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==COMMA) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:950:20: COMMA privlegeDef
            	    {
            	    COMMA375=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_privilegeList6227); 
            	    stream_COMMA.add(COMMA375);

            	    pushFollow(FOLLOW_privlegeDef_in_privilegeList6229);
            	    privlegeDef376=privlegeDef();
            	    _fsp--;

            	    stream_privlegeDef.add(privlegeDef376.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            // AST REWRITE
            // elements: privlegeDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 951:5: -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:951:8: ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIVILEGE_LIST, "TOK_PRIVILEGE_LIST"), root_1);

                if ( !(stream_privlegeDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_privlegeDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_privlegeDef.next());

                }
                stream_privlegeDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privilegeList

    public static class privlegeDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privlegeDef
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:954:1: privlegeDef : privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) ;
    public final privlegeDef_return privlegeDef() throws RecognitionException {
        privlegeDef_return retval = new privlegeDef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN378=null;
        Token RPAREN379=null;
        columnNameList_return cols = null;

        privilegeType_return privilegeType377 = null;


        CommonTree LPAREN378_tree=null;
        CommonTree RPAREN379_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_privilegeType=new RewriteRuleSubtreeStream(adaptor,"rule privilegeType");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        msgs.push("grant privilege");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:957:5: ( privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:957:7: privilegeType ( LPAREN cols= columnNameList RPAREN )?
            {
            pushFollow(FOLLOW_privilegeType_in_privlegeDef6271);
            privilegeType377=privilegeType();
            _fsp--;

            stream_privilegeType.add(privilegeType377.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:957:21: ( LPAREN cols= columnNameList RPAREN )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==LPAREN) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:957:22: LPAREN cols= columnNameList RPAREN
                    {
                    LPAREN378=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_privlegeDef6274); 
                    stream_LPAREN.add(LPAREN378);

                    pushFollow(FOLLOW_columnNameList_in_privlegeDef6278);
                    cols=columnNameList();
                    _fsp--;

                    stream_columnNameList.add(cols.getTree());
                    RPAREN379=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_privlegeDef6280); 
                    stream_RPAREN.add(RPAREN379);


                    }
                    break;

            }


            // AST REWRITE
            // elements: cols, privilegeType
            // token labels: 
            // rule labels: retval, cols
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"token cols",cols!=null?cols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 958:5: -> ^( TOK_PRIVILEGE privilegeType ( $cols)? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:958:8: ^( TOK_PRIVILEGE privilegeType ( $cols)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIVILEGE, "TOK_PRIVILEGE"), root_1);

                adaptor.addChild(root_1, stream_privilegeType.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:958:38: ( $cols)?
                if ( stream_cols.hasNext() ) {
                    adaptor.addChild(root_1, stream_cols.next());

                }
                stream_cols.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privlegeDef

    public static class privilegeType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privilegeType
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:961:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) );
    public final privilegeType_return privilegeType() throws RecognitionException {
        privilegeType_return retval = new privilegeType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ALL380=null;
        Token KW_ALTER381=null;
        Token KW_UPDATE382=null;
        Token KW_CREATE383=null;
        Token KW_DROP384=null;
        Token KW_INDEX385=null;
        Token KW_LOCK386=null;
        Token KW_SELECT387=null;
        Token KW_SHOW_DATABASE388=null;

        CommonTree KW_ALL380_tree=null;
        CommonTree KW_ALTER381_tree=null;
        CommonTree KW_UPDATE382_tree=null;
        CommonTree KW_CREATE383_tree=null;
        CommonTree KW_DROP384_tree=null;
        CommonTree KW_INDEX385_tree=null;
        CommonTree KW_LOCK386_tree=null;
        CommonTree KW_SELECT387_tree=null;
        CommonTree KW_SHOW_DATABASE388_tree=null;
        RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
        RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
        RewriteRuleTokenStream stream_KW_SHOW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_SHOW_DATABASE");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");

        msgs.push("privilege type");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:964:5: ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) )
            int alt115=9;
            switch ( input.LA(1) ) {
            case KW_ALL:
                {
                alt115=1;
                }
                break;
            case KW_ALTER:
                {
                alt115=2;
                }
                break;
            case KW_UPDATE:
                {
                alt115=3;
                }
                break;
            case KW_CREATE:
                {
                alt115=4;
                }
                break;
            case KW_DROP:
                {
                alt115=5;
                }
                break;
            case KW_INDEX:
                {
                alt115=6;
                }
                break;
            case KW_LOCK:
                {
                alt115=7;
                }
                break;
            case KW_SELECT:
                {
                alt115=8;
                }
                break;
            case KW_SHOW_DATABASE:
                {
                alt115=9;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("961:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) );", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:964:7: KW_ALL
                    {
                    KW_ALL380=(Token)input.LT(1);
                    match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeType6325); 
                    stream_KW_ALL.add(KW_ALL380);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 964:14: -> ^( TOK_PRIV_ALL )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:964:17: ^( TOK_PRIV_ALL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_ALL, "TOK_PRIV_ALL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:965:7: KW_ALTER
                    {
                    KW_ALTER381=(Token)input.LT(1);
                    match(input,KW_ALTER,FOLLOW_KW_ALTER_in_privilegeType6339); 
                    stream_KW_ALTER.add(KW_ALTER381);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 965:16: -> ^( TOK_PRIV_ALTER_METADATA )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:965:19: ^( TOK_PRIV_ALTER_METADATA )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_ALTER_METADATA, "TOK_PRIV_ALTER_METADATA"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:966:7: KW_UPDATE
                    {
                    KW_UPDATE382=(Token)input.LT(1);
                    match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_privilegeType6353); 
                    stream_KW_UPDATE.add(KW_UPDATE382);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 966:17: -> ^( TOK_PRIV_ALTER_DATA )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:966:20: ^( TOK_PRIV_ALTER_DATA )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_ALTER_DATA, "TOK_PRIV_ALTER_DATA"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:967:7: KW_CREATE
                    {
                    KW_CREATE383=(Token)input.LT(1);
                    match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType6367); 
                    stream_KW_CREATE.add(KW_CREATE383);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 967:17: -> ^( TOK_PRIV_CREATE )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:967:20: ^( TOK_PRIV_CREATE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_CREATE, "TOK_PRIV_CREATE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:968:7: KW_DROP
                    {
                    KW_DROP384=(Token)input.LT(1);
                    match(input,KW_DROP,FOLLOW_KW_DROP_in_privilegeType6381); 
                    stream_KW_DROP.add(KW_DROP384);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 968:15: -> ^( TOK_PRIV_DROP )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:968:18: ^( TOK_PRIV_DROP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_DROP, "TOK_PRIV_DROP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 6 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:969:7: KW_INDEX
                    {
                    KW_INDEX385=(Token)input.LT(1);
                    match(input,KW_INDEX,FOLLOW_KW_INDEX_in_privilegeType6395); 
                    stream_KW_INDEX.add(KW_INDEX385);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 969:16: -> ^( TOK_PRIV_INDEX )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:969:19: ^( TOK_PRIV_INDEX )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_INDEX, "TOK_PRIV_INDEX"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 7 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:970:7: KW_LOCK
                    {
                    KW_LOCK386=(Token)input.LT(1);
                    match(input,KW_LOCK,FOLLOW_KW_LOCK_in_privilegeType6409); 
                    stream_KW_LOCK.add(KW_LOCK386);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 970:15: -> ^( TOK_PRIV_LOCK )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:970:18: ^( TOK_PRIV_LOCK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_LOCK, "TOK_PRIV_LOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 8 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:971:7: KW_SELECT
                    {
                    KW_SELECT387=(Token)input.LT(1);
                    match(input,KW_SELECT,FOLLOW_KW_SELECT_in_privilegeType6423); 
                    stream_KW_SELECT.add(KW_SELECT387);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 971:17: -> ^( TOK_PRIV_SELECT )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:971:20: ^( TOK_PRIV_SELECT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_SELECT, "TOK_PRIV_SELECT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 9 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:972:7: KW_SHOW_DATABASE
                    {
                    KW_SHOW_DATABASE388=(Token)input.LT(1);
                    match(input,KW_SHOW_DATABASE,FOLLOW_KW_SHOW_DATABASE_in_privilegeType6437); 
                    stream_KW_SHOW_DATABASE.add(KW_SHOW_DATABASE388);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 972:24: -> ^( TOK_PRIV_SHOW_DATABASE )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:972:27: ^( TOK_PRIV_SHOW_DATABASE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_SHOW_DATABASE, "TOK_PRIV_SHOW_DATABASE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privilegeType

    public static class principalSpecification_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start principalSpecification
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:975:1: principalSpecification : principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) ;
    public final principalSpecification_return principalSpecification() throws RecognitionException {
        principalSpecification_return retval = new principalSpecification_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA390=null;
        principalName_return principalName389 = null;

        principalName_return principalName391 = null;


        CommonTree COMMA390_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
         msgs.push("user/group/role name list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:978:5: ( principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:978:7: principalName ( COMMA principalName )*
            {
            pushFollow(FOLLOW_principalName_in_principalSpecification6470);
            principalName389=principalName();
            _fsp--;

            stream_principalName.add(principalName389.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:978:21: ( COMMA principalName )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==COMMA) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:978:22: COMMA principalName
            	    {
            	    COMMA390=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_principalSpecification6473); 
            	    stream_COMMA.add(COMMA390);

            	    pushFollow(FOLLOW_principalName_in_principalSpecification6475);
            	    principalName391=principalName();
            	    _fsp--;

            	    stream_principalName.add(principalName391.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            // AST REWRITE
            // elements: principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 978:44: -> ^( TOK_PRINCIPAL_NAME ( principalName )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:978:47: ^( TOK_PRINCIPAL_NAME ( principalName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRINCIPAL_NAME, "TOK_PRINCIPAL_NAME"), root_1);

                if ( !(stream_principalName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_principalName.hasNext() ) {
                    adaptor.addChild(root_1, stream_principalName.next());

                }
                stream_principalName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end principalSpecification

    public static class principalName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start principalName
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:981:1: principalName : ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) );
    public final principalName_return principalName() throws RecognitionException {
        principalName_return retval = new principalName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier393=null;
        Token KW_GROUP394=null;
        Token Identifier395=null;
        Token Identifier397=null;
        kwUser_return kwUser392 = null;

        kwRole_return kwRole396 = null;


        CommonTree Identifier393_tree=null;
        CommonTree KW_GROUP394_tree=null;
        CommonTree Identifier395_tree=null;
        CommonTree Identifier397_tree=null;
        RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_kwUser=new RewriteRuleSubtreeStream(adaptor,"rule kwUser");
        msgs.push("user|group|role name");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:984:5: ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) )
            int alt117=3;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==Identifier) ) {
                int LA117_1 = input.LA(2);

                if ( (LA117_1==Identifier) ) {
                    int LA117_3 = input.LA(3);

                    if ( (input.LT(1).getText().equalsIgnoreCase("user")) ) {
                        alt117=1;
                    }
                    else if ( (input.LT(1).getText().equalsIgnoreCase("role")) ) {
                        alt117=3;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("981:1: principalName : ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) );", 117, 3, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("981:1: principalName : ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) );", 117, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA117_0==KW_GROUP) ) {
                alt117=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("981:1: principalName : ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) );", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:984:7: kwUser Identifier
                    {
                    pushFollow(FOLLOW_kwUser_in_principalName6513);
                    kwUser392=kwUser();
                    _fsp--;

                    stream_kwUser.add(kwUser392.getTree());
                    Identifier393=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_principalName6515); 
                    stream_Identifier.add(Identifier393);


                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 984:25: -> ^( TOK_USER Identifier )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:984:28: ^( TOK_USER Identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_USER, "TOK_USER"), root_1);

                        adaptor.addChild(root_1, stream_Identifier.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:985:7: KW_GROUP Identifier
                    {
                    KW_GROUP394=(Token)input.LT(1);
                    match(input,KW_GROUP,FOLLOW_KW_GROUP_in_principalName6531); 
                    stream_KW_GROUP.add(KW_GROUP394);

                    Identifier395=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_principalName6533); 
                    stream_Identifier.add(Identifier395);


                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 985:27: -> ^( TOK_GROUP Identifier )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:985:30: ^( TOK_GROUP Identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GROUP, "TOK_GROUP"), root_1);

                        adaptor.addChild(root_1, stream_Identifier.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:986:7: kwRole Identifier
                    {
                    pushFollow(FOLLOW_kwRole_in_principalName6549);
                    kwRole396=kwRole();
                    _fsp--;

                    stream_kwRole.add(kwRole396.getTree());
                    Identifier397=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_principalName6551); 
                    stream_Identifier.add(Identifier397);


                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 986:25: -> ^( TOK_ROLE Identifier )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:986:28: ^( TOK_ROLE Identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ROLE, "TOK_ROLE"), root_1);

                        adaptor.addChild(root_1, stream_Identifier.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end principalName

    public static class withOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start withOption
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:989:1: withOption : KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) ;
    public final withOption_return withOption() throws RecognitionException {
        withOption_return retval = new withOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_GRANT398=null;
        Token KW_OPTION399=null;

        CommonTree KW_GRANT398_tree=null;
        CommonTree KW_OPTION399_tree=null;
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");

        msgs.push("grant with option");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:992:5: ( KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:992:7: KW_GRANT KW_OPTION
            {
            KW_GRANT398=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_withOption6586); 
            stream_KW_GRANT.add(KW_GRANT398);

            KW_OPTION399=(Token)input.LT(1);
            match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withOption6588); 
            stream_KW_OPTION.add(KW_OPTION399);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 993:5: -> ^( TOK_GRANT_WITH_OPTION )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:993:8: ^( TOK_GRANT_WITH_OPTION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GRANT_WITH_OPTION, "TOK_GRANT_WITH_OPTION"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end withOption

    public static class metastoreCheck_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start metastoreCheck
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:996:1: metastoreCheck : KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) ;
    public final metastoreCheck_return metastoreCheck() throws RecognitionException {
        metastoreCheck_return retval = new metastoreCheck_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token repair=null;
        Token table=null;
        Token KW_MSCK400=null;
        Token KW_TABLE401=null;
        Token COMMA403=null;
        partitionSpec_return partitionSpec402 = null;

        partitionSpec_return partitionSpec404 = null;


        CommonTree repair_tree=null;
        CommonTree table_tree=null;
        CommonTree KW_MSCK400_tree=null;
        CommonTree KW_TABLE401_tree=null;
        CommonTree COMMA403_tree=null;
        RewriteRuleTokenStream stream_KW_MSCK=new RewriteRuleTokenStream(adaptor,"token KW_MSCK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_REPAIR=new RewriteRuleTokenStream(adaptor,"token KW_REPAIR");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("metastore check statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:999:5: ( KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:999:7: KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
            {
            KW_MSCK400=(Token)input.LT(1);
            match(input,KW_MSCK,FOLLOW_KW_MSCK_in_metastoreCheck6625); 
            stream_KW_MSCK.add(KW_MSCK400);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:999:15: (repair= KW_REPAIR )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==KW_REPAIR) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:999:16: repair= KW_REPAIR
                    {
                    repair=(Token)input.LT(1);
                    match(input,KW_REPAIR,FOLLOW_KW_REPAIR_in_metastoreCheck6630); 
                    stream_KW_REPAIR.add(repair);


                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:999:35: ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==KW_TABLE) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:999:36: KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )*
                    {
                    KW_TABLE401=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_metastoreCheck6635); 
                    stream_KW_TABLE.add(KW_TABLE401);

                    table=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_metastoreCheck6639); 
                    stream_Identifier.add(table);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:999:62: ( partitionSpec )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==KW_PARTITION) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:999:62: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_metastoreCheck6641);
                            partitionSpec402=partitionSpec();
                            _fsp--;

                            stream_partitionSpec.add(partitionSpec402.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:999:77: ( COMMA partitionSpec )*
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==COMMA) ) {
                            alt120=1;
                        }


                        switch (alt120) {
                    	case 1 :
                    	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:999:78: COMMA partitionSpec
                    	    {
                    	    COMMA403=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_metastoreCheck6645); 
                    	    stream_COMMA.add(COMMA403);

                    	    pushFollow(FOLLOW_partitionSpec_in_metastoreCheck6647);
                    	    partitionSpec404=partitionSpec();
                    	    _fsp--;

                    	    stream_partitionSpec.add(partitionSpec404.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);


                    }
                    break;

            }


            // AST REWRITE
            // elements: repair, table, partitionSpec
            // token labels: table, repair
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
            RewriteRuleTokenStream stream_repair=new RewriteRuleTokenStream(adaptor,"token repair",repair);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1000:5: -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1000:8: ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_MSCK, "TOK_MSCK"), root_1);

                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1000:19: ( $repair)?
                if ( stream_repair.hasNext() ) {
                    adaptor.addChild(root_1, stream_repair.next());

                }
                stream_repair.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1000:28: ( $table ( partitionSpec )* )?
                if ( stream_table.hasNext()||stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_table.next());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1000:36: ( partitionSpec )*
                    while ( stream_partitionSpec.hasNext() ) {
                        adaptor.addChild(root_1, stream_partitionSpec.next());

                    }
                    stream_partitionSpec.reset();

                }
                stream_table.reset();
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end metastoreCheck

    public static class createFunctionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createFunctionStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1003:1: createFunctionStatement : KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral -> ^( TOK_CREATEFUNCTION Identifier StringLiteral ) ;
    public final createFunctionStatement_return createFunctionStatement() throws RecognitionException {
        createFunctionStatement_return retval = new createFunctionStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CREATE405=null;
        Token KW_TEMPORARY406=null;
        Token KW_FUNCTION407=null;
        Token Identifier408=null;
        Token KW_AS409=null;
        Token StringLiteral410=null;

        CommonTree KW_CREATE405_tree=null;
        CommonTree KW_TEMPORARY406_tree=null;
        CommonTree KW_FUNCTION407_tree=null;
        CommonTree Identifier408_tree=null;
        CommonTree KW_AS409_tree=null;
        CommonTree StringLiteral410_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("create function statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1006:5: ( KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral -> ^( TOK_CREATEFUNCTION Identifier StringLiteral ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1006:7: KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral
            {
            KW_CREATE405=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createFunctionStatement6701); 
            stream_KW_CREATE.add(KW_CREATE405);

            KW_TEMPORARY406=(Token)input.LT(1);
            match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createFunctionStatement6703); 
            stream_KW_TEMPORARY.add(KW_TEMPORARY406);

            KW_FUNCTION407=(Token)input.LT(1);
            match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_createFunctionStatement6705); 
            stream_KW_FUNCTION.add(KW_FUNCTION407);

            Identifier408=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createFunctionStatement6707); 
            stream_Identifier.add(Identifier408);

            KW_AS409=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_createFunctionStatement6709); 
            stream_KW_AS.add(KW_AS409);

            StringLiteral410=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_createFunctionStatement6711); 
            stream_StringLiteral.add(StringLiteral410);


            // AST REWRITE
            // elements: StringLiteral, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1007:5: -> ^( TOK_CREATEFUNCTION Identifier StringLiteral )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1007:8: ^( TOK_CREATEFUNCTION Identifier StringLiteral )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_StringLiteral.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createFunctionStatement

    public static class dropFunctionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropFunctionStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1010:1: dropFunctionStatement : KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? ) ;
    public final dropFunctionStatement_return dropFunctionStatement() throws RecognitionException {
        dropFunctionStatement_return retval = new dropFunctionStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP411=null;
        Token KW_TEMPORARY412=null;
        Token KW_FUNCTION413=null;
        Token Identifier415=null;
        ifExists_return ifExists414 = null;


        CommonTree KW_DROP411_tree=null;
        CommonTree KW_TEMPORARY412_tree=null;
        CommonTree KW_FUNCTION413_tree=null;
        CommonTree Identifier415_tree=null;
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop temporary function statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1013:5: ( KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1013:7: KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier
            {
            KW_DROP411=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropFunctionStatement6752); 
            stream_KW_DROP.add(KW_DROP411);

            KW_TEMPORARY412=(Token)input.LT(1);
            match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropFunctionStatement6754); 
            stream_KW_TEMPORARY.add(KW_TEMPORARY412);

            KW_FUNCTION413=(Token)input.LT(1);
            match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_dropFunctionStatement6756); 
            stream_KW_FUNCTION.add(KW_FUNCTION413);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1013:40: ( ifExists )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==KW_IF) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1013:40: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropFunctionStatement6758);
                    ifExists414=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists414.getTree());

                    }
                    break;

            }

            Identifier415=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropFunctionStatement6761); 
            stream_Identifier.add(Identifier415);


            // AST REWRITE
            // elements: Identifier, ifExists
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1014:5: -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1014:8: ^( TOK_DROPFUNCTION Identifier ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1014:38: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropFunctionStatement

    public static class createViewStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createViewStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1017:1: createViewStatement : KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement ) ;
    public final createViewStatement_return createViewStatement() throws RecognitionException {
        createViewStatement_return retval = new createViewStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CREATE416=null;
        Token KW_VIEW418=null;
        Token LPAREN420=null;
        Token RPAREN422=null;
        Token KW_AS426=null;
        tableName_return name = null;

        orReplace_return orReplace417 = null;

        ifNotExists_return ifNotExists419 = null;

        columnNameCommentList_return columnNameCommentList421 = null;

        tableComment_return tableComment423 = null;

        viewPartition_return viewPartition424 = null;

        tablePropertiesPrefixed_return tablePropertiesPrefixed425 = null;

        selectStatement_return selectStatement427 = null;


        CommonTree KW_CREATE416_tree=null;
        CommonTree KW_VIEW418_tree=null;
        CommonTree LPAREN420_tree=null;
        CommonTree RPAREN422_tree=null;
        CommonTree KW_AS426_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        RewriteRuleSubtreeStream stream_columnNameCommentList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameCommentList");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_orReplace=new RewriteRuleSubtreeStream(adaptor,"rule orReplace");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        
            msgs.push("create view statement");

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1022:5: ( KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1022:7: KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement
            {
            KW_CREATE416=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createViewStatement6803); 
            stream_KW_CREATE.add(KW_CREATE416);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1022:17: ( orReplace )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==KW_OR) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1022:18: orReplace
                    {
                    pushFollow(FOLLOW_orReplace_in_createViewStatement6806);
                    orReplace417=orReplace();
                    _fsp--;

                    stream_orReplace.add(orReplace417.getTree());

                    }
                    break;

            }

            KW_VIEW418=(Token)input.LT(1);
            match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createViewStatement6810); 
            stream_KW_VIEW.add(KW_VIEW418);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1022:38: ( ifNotExists )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==KW_IF) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1022:39: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createViewStatement6813);
                    ifNotExists419=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists419.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_tableName_in_createViewStatement6819);
            name=tableName();
            _fsp--;

            stream_tableName.add(name.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1023:9: ( LPAREN columnNameCommentList RPAREN )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==LPAREN) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1023:10: LPAREN columnNameCommentList RPAREN
                    {
                    LPAREN420=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_createViewStatement6830); 
                    stream_LPAREN.add(LPAREN420);

                    pushFollow(FOLLOW_columnNameCommentList_in_createViewStatement6832);
                    columnNameCommentList421=columnNameCommentList();
                    _fsp--;

                    stream_columnNameCommentList.add(columnNameCommentList421.getTree());
                    RPAREN422=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_createViewStatement6834); 
                    stream_RPAREN.add(RPAREN422);


                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1023:48: ( tableComment )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==KW_COMMENT) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1023:48: tableComment
                    {
                    pushFollow(FOLLOW_tableComment_in_createViewStatement6838);
                    tableComment423=tableComment();
                    _fsp--;

                    stream_tableComment.add(tableComment423.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1023:62: ( viewPartition )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==KW_PARTITIONED) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1023:62: viewPartition
                    {
                    pushFollow(FOLLOW_viewPartition_in_createViewStatement6841);
                    viewPartition424=viewPartition();
                    _fsp--;

                    stream_viewPartition.add(viewPartition424.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1024:9: ( tablePropertiesPrefixed )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==KW_TBLPROPERTIES) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1024:9: tablePropertiesPrefixed
                    {
                    pushFollow(FOLLOW_tablePropertiesPrefixed_in_createViewStatement6852);
                    tablePropertiesPrefixed425=tablePropertiesPrefixed();
                    _fsp--;

                    stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed425.getTree());

                    }
                    break;

            }

            KW_AS426=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_createViewStatement6863); 
            stream_KW_AS.add(KW_AS426);

            pushFollow(FOLLOW_selectStatement_in_createViewStatement6873);
            selectStatement427=selectStatement();
            _fsp--;

            stream_selectStatement.add(selectStatement427.getTree());

            // AST REWRITE
            // elements: columnNameCommentList, selectStatement, tableComment, tablePropertiesPrefixed, name, ifNotExists, viewPartition, orReplace
            // token labels: 
            // rule labels: retval, name
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"token name",name!=null?name.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1027:5: -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1027:8: ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEVIEW, "TOK_CREATEVIEW"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1027:31: ( orReplace )?
                if ( stream_orReplace.hasNext() ) {
                    adaptor.addChild(root_1, stream_orReplace.next());

                }
                stream_orReplace.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1028:10: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1029:10: ( columnNameCommentList )?
                if ( stream_columnNameCommentList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameCommentList.next());

                }
                stream_columnNameCommentList.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1030:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.next());

                }
                stream_tableComment.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1031:10: ( viewPartition )?
                if ( stream_viewPartition.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewPartition.next());

                }
                stream_viewPartition.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1032:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.next());

                }
                stream_tablePropertiesPrefixed.reset();
                adaptor.addChild(root_1, stream_selectStatement.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createViewStatement

    public static class viewPartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start viewPartition
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1037:1: viewPartition : KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) ;
    public final viewPartition_return viewPartition() throws RecognitionException {
        viewPartition_return retval = new viewPartition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PARTITIONED428=null;
        Token KW_ON429=null;
        Token LPAREN430=null;
        Token RPAREN432=null;
        columnNameList_return columnNameList431 = null;


        CommonTree KW_PARTITIONED428_tree=null;
        CommonTree KW_ON429_tree=null;
        CommonTree LPAREN430_tree=null;
        CommonTree RPAREN432_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         msgs.push("view partition specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1040:5: ( KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1040:7: KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN
            {
            KW_PARTITIONED428=(Token)input.LT(1);
            match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_viewPartition6996); 
            stream_KW_PARTITIONED.add(KW_PARTITIONED428);

            KW_ON429=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_viewPartition6998); 
            stream_KW_ON.add(KW_ON429);

            LPAREN430=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_viewPartition7000); 
            stream_LPAREN.add(LPAREN430);

            pushFollow(FOLLOW_columnNameList_in_viewPartition7002);
            columnNameList431=columnNameList();
            _fsp--;

            stream_columnNameList.add(columnNameList431.getTree());
            RPAREN432=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_viewPartition7004); 
            stream_RPAREN.add(RPAREN432);


            // AST REWRITE
            // elements: columnNameList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1041:5: -> ^( TOK_VIEWPARTCOLS columnNameList )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1041:8: ^( TOK_VIEWPARTCOLS columnNameList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_VIEWPARTCOLS, "TOK_VIEWPARTCOLS"), root_1);

                adaptor.addChild(root_1, stream_columnNameList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end viewPartition

    public static class dropViewStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropViewStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1044:1: dropViewStatement : KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) ;
    public final dropViewStatement_return dropViewStatement() throws RecognitionException {
        dropViewStatement_return retval = new dropViewStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP433=null;
        Token KW_VIEW434=null;
        ifExists_return ifExists435 = null;

        viewName_return viewName436 = null;


        CommonTree KW_DROP433_tree=null;
        CommonTree KW_VIEW434_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop view statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1047:5: ( KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1047:7: KW_DROP KW_VIEW ( ifExists )? viewName
            {
            KW_DROP433=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropViewStatement7043); 
            stream_KW_DROP.add(KW_DROP433);

            KW_VIEW434=(Token)input.LT(1);
            match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropViewStatement7045); 
            stream_KW_VIEW.add(KW_VIEW434);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1047:23: ( ifExists )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==KW_IF) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1047:23: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropViewStatement7047);
                    ifExists435=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists435.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_viewName_in_dropViewStatement7050);
            viewName436=viewName();
            _fsp--;

            stream_viewName.add(viewName436.getTree());

            // AST REWRITE
            // elements: ifExists, viewName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1047:42: -> ^( TOK_DROPVIEW viewName ( ifExists )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1047:45: ^( TOK_DROPVIEW viewName ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPVIEW, "TOK_DROPVIEW"), root_1);

                adaptor.addChild(root_1, stream_viewName.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1047:69: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropViewStatement

    public static class showStmtIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start showStmtIdentifier
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1050:1: showStmtIdentifier : ( Identifier | StringLiteral );
    public final showStmtIdentifier_return showStmtIdentifier() throws RecognitionException {
        showStmtIdentifier_return retval = new showStmtIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set437=null;

        CommonTree set437_tree=null;

         msgs.push("Identifier for show statement"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1053:5: ( Identifier | StringLiteral )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set437=(Token)input.LT(1);
            if ( input.LA(1)==StringLiteral||input.LA(1)==Identifier ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set437));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_showStmtIdentifier0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end showStmtIdentifier

    public static class tableComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableComment
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1057:1: tableComment : KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) ;
    public final tableComment_return tableComment() throws RecognitionException {
        tableComment_return retval = new tableComment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT438=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT438_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         msgs.push("table's comment"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1060:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1061:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT438=(Token)input.LT(1);
            match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_tableComment7129); 
            stream_KW_COMMENT.add(KW_COMMENT438);

            comment=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableComment7133); 
            stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1061:41: -> ^( TOK_TABLECOMMENT $comment)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1061:44: ^( TOK_TABLECOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLECOMMENT, "TOK_TABLECOMMENT"), root_1);

                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableComment

    public static class tablePartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tablePartition
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1064:1: tablePartition : KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) ;
    public final tablePartition_return tablePartition() throws RecognitionException {
        tablePartition_return retval = new tablePartition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PARTITIONED439=null;
        Token KW_BY440=null;
        Token LPAREN441=null;
        Token RPAREN443=null;
        columnNameTypeList_return columnNameTypeList442 = null;


        CommonTree KW_PARTITIONED439_tree=null;
        CommonTree KW_BY440_tree=null;
        CommonTree LPAREN441_tree=null;
        CommonTree RPAREN443_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
         msgs.push("table partition specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1067:5: ( KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1067:7: KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN
            {
            KW_PARTITIONED439=(Token)input.LT(1);
            match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_tablePartition7170); 
            stream_KW_PARTITIONED.add(KW_PARTITIONED439);

            KW_BY440=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tablePartition7172); 
            stream_KW_BY.add(KW_BY440);

            LPAREN441=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tablePartition7174); 
            stream_LPAREN.add(LPAREN441);

            pushFollow(FOLLOW_columnNameTypeList_in_tablePartition7176);
            columnNameTypeList442=columnNameTypeList();
            _fsp--;

            stream_columnNameTypeList.add(columnNameTypeList442.getTree());
            RPAREN443=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tablePartition7178); 
            stream_RPAREN.add(RPAREN443);


            // AST REWRITE
            // elements: columnNameTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1068:5: -> ^( TOK_TABLEPARTCOLS columnNameTypeList )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1068:8: ^( TOK_TABLEPARTCOLS columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPARTCOLS, "TOK_TABLEPARTCOLS"), root_1);

                adaptor.addChild(root_1, stream_columnNameTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tablePartition

    public static class tableBuckets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableBuckets
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1071:1: tableBuckets : KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) ;
    public final tableBuckets_return tableBuckets() throws RecognitionException {
        tableBuckets_return retval = new tableBuckets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token num=null;
        Token KW_CLUSTERED444=null;
        Token KW_BY445=null;
        Token LPAREN446=null;
        Token RPAREN447=null;
        Token KW_SORTED448=null;
        Token KW_BY449=null;
        Token LPAREN450=null;
        Token RPAREN451=null;
        Token KW_INTO452=null;
        Token KW_BUCKETS453=null;
        columnNameList_return bucketCols = null;

        columnNameOrderList_return sortCols = null;


        CommonTree num_tree=null;
        CommonTree KW_CLUSTERED444_tree=null;
        CommonTree KW_BY445_tree=null;
        CommonTree LPAREN446_tree=null;
        CommonTree RPAREN447_tree=null;
        CommonTree KW_SORTED448_tree=null;
        CommonTree KW_BY449_tree=null;
        CommonTree LPAREN450_tree=null;
        CommonTree RPAREN451_tree=null;
        CommonTree KW_INTO452_tree=null;
        CommonTree KW_BUCKETS453_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_columnNameOrderList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrderList");
         msgs.push("table buckets specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1074:5: ( KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1075:7: KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS
            {
            KW_CLUSTERED444=(Token)input.LT(1);
            match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableBuckets7223); 
            stream_KW_CLUSTERED.add(KW_CLUSTERED444);

            KW_BY445=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets7225); 
            stream_KW_BY.add(KW_BY445);

            LPAREN446=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets7227); 
            stream_LPAREN.add(LPAREN446);

            pushFollow(FOLLOW_columnNameList_in_tableBuckets7231);
            bucketCols=columnNameList();
            _fsp--;

            stream_columnNameList.add(bucketCols.getTree());
            RPAREN447=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets7233); 
            stream_RPAREN.add(RPAREN447);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1075:66: ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==KW_SORTED) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1075:67: KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN
                    {
                    KW_SORTED448=(Token)input.LT(1);
                    match(input,KW_SORTED,FOLLOW_KW_SORTED_in_tableBuckets7236); 
                    stream_KW_SORTED.add(KW_SORTED448);

                    KW_BY449=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets7238); 
                    stream_KW_BY.add(KW_BY449);

                    LPAREN450=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets7240); 
                    stream_LPAREN.add(LPAREN450);

                    pushFollow(FOLLOW_columnNameOrderList_in_tableBuckets7244);
                    sortCols=columnNameOrderList();
                    _fsp--;

                    stream_columnNameOrderList.add(sortCols.getTree());
                    RPAREN451=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets7246); 
                    stream_RPAREN.add(RPAREN451);


                    }
                    break;

            }

            KW_INTO452=(Token)input.LT(1);
            match(input,KW_INTO,FOLLOW_KW_INTO_in_tableBuckets7250); 
            stream_KW_INTO.add(KW_INTO452);

            num=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_tableBuckets7254); 
            stream_Number.add(num);

            KW_BUCKETS453=(Token)input.LT(1);
            match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableBuckets7256); 
            stream_KW_BUCKETS.add(KW_BUCKETS453);


            // AST REWRITE
            // elements: bucketCols, num, sortCols
            // token labels: num
            // rule labels: sortCols, retval, bucketCols
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_sortCols=new RewriteRuleSubtreeStream(adaptor,"token sortCols",sortCols!=null?sortCols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bucketCols=new RewriteRuleSubtreeStream(adaptor,"token bucketCols",bucketCols!=null?bucketCols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1076:5: -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1076:8: ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEBUCKETS, "TOK_TABLEBUCKETS"), root_1);

                adaptor.addChild(root_1, stream_bucketCols.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1076:39: ( $sortCols)?
                if ( stream_sortCols.hasNext() ) {
                    adaptor.addChild(root_1, stream_sortCols.next());

                }
                stream_sortCols.reset();
                adaptor.addChild(root_1, stream_num.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableBuckets

    public static class rowFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rowFormat
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1079:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );
    public final rowFormat_return rowFormat() throws RecognitionException {
        rowFormat_return retval = new rowFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        rowFormatSerde_return rowFormatSerde454 = null;

        rowFormatDelimited_return rowFormatDelimited455 = null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         msgs.push("serde specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1082:5: ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) )
            int alt131=3;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==KW_ROW) ) {
                int LA131_1 = input.LA(2);

                if ( (LA131_1==KW_FORMAT) ) {
                    int LA131_21 = input.LA(3);

                    if ( (LA131_21==KW_SERDE) ) {
                        alt131=1;
                    }
                    else if ( (LA131_21==KW_DELIMITED) ) {
                        alt131=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1079:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );", 131, 21, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1079:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );", 131, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA131_0==EOF||LA131_0==KW_FROM||LA131_0==RPAREN||LA131_0==KW_SELECT||LA131_0==KW_GROUP||(LA131_0>=KW_RECORDREADER && LA131_0<=KW_RECORDWRITER)||LA131_0==KW_MAP||(LA131_0>=KW_UNION && LA131_0<=KW_INSERT)||LA131_0==KW_LIMIT||LA131_0==KW_USING||LA131_0==KW_REDUCE||(LA131_0>=KW_WHERE && LA131_0<=KW_SORT)) ) {
                alt131=3;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1079:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );", 131, 0, input);

                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1082:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_rowFormat7303);
                    rowFormatSerde454=rowFormatSerde();
                    _fsp--;

                    stream_rowFormatSerde.add(rowFormatSerde454.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1082:22: -> ^( TOK_SERDE rowFormatSerde )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1082:25: ^( TOK_SERDE rowFormatSerde )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1083:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_rowFormat7319);
                    rowFormatDelimited455=rowFormatDelimited();
                    _fsp--;

                    stream_rowFormatDelimited.add(rowFormatDelimited455.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1083:26: -> ^( TOK_SERDE rowFormatDelimited )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1083:29: ^( TOK_SERDE rowFormatDelimited )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1084:9: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1084:9: -> ^( TOK_SERDE )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1084:12: ^( TOK_SERDE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end rowFormat

    public static class recordReader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start recordReader
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1087:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );
    public final recordReader_return recordReader() throws RecognitionException {
        recordReader_return retval = new recordReader_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_RECORDREADER456=null;
        Token StringLiteral457=null;

        CommonTree KW_RECORDREADER456_tree=null;
        CommonTree StringLiteral457_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDREADER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDREADER");

         msgs.push("record reader specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1090:5: ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==KW_RECORDREADER) ) {
                alt132=1;
            }
            else if ( (LA132_0==EOF||LA132_0==KW_FROM||LA132_0==RPAREN||LA132_0==KW_SELECT||LA132_0==KW_GROUP||LA132_0==KW_MAP||(LA132_0>=KW_UNION && LA132_0<=KW_INSERT)||LA132_0==KW_LIMIT||LA132_0==KW_REDUCE||(LA132_0>=KW_WHERE && LA132_0<=KW_SORT)) ) {
                alt132=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1087:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );", 132, 0, input);

                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1090:7: KW_RECORDREADER StringLiteral
                    {
                    KW_RECORDREADER456=(Token)input.LT(1);
                    match(input,KW_RECORDREADER,FOLLOW_KW_RECORDREADER_in_recordReader7368); 
                    stream_KW_RECORDREADER.add(KW_RECORDREADER456);

                    StringLiteral457=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_recordReader7370); 
                    stream_StringLiteral.add(StringLiteral457);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1090:37: -> ^( TOK_RECORDREADER StringLiteral )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1090:40: ^( TOK_RECORDREADER StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1091:9: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1091:9: -> ^( TOK_RECORDREADER )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1091:12: ^( TOK_RECORDREADER )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end recordReader

    public static class recordWriter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start recordWriter
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1094:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );
    public final recordWriter_return recordWriter() throws RecognitionException {
        recordWriter_return retval = new recordWriter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_RECORDWRITER458=null;
        Token StringLiteral459=null;

        CommonTree KW_RECORDWRITER458_tree=null;
        CommonTree StringLiteral459_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDWRITER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDWRITER");

         msgs.push("record writer specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1097:5: ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==KW_RECORDWRITER) ) {
                alt133=1;
            }
            else if ( (LA133_0==KW_USING) ) {
                alt133=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1094:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );", 133, 0, input);

                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1097:7: KW_RECORDWRITER StringLiteral
                    {
                    KW_RECORDWRITER458=(Token)input.LT(1);
                    match(input,KW_RECORDWRITER,FOLLOW_KW_RECORDWRITER_in_recordWriter7419); 
                    stream_KW_RECORDWRITER.add(KW_RECORDWRITER458);

                    StringLiteral459=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_recordWriter7421); 
                    stream_StringLiteral.add(StringLiteral459);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1097:37: -> ^( TOK_RECORDWRITER StringLiteral )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1097:40: ^( TOK_RECORDWRITER StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1098:9: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1098:9: -> ^( TOK_RECORDWRITER )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1098:12: ^( TOK_RECORDWRITER )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end recordWriter

    public static class rowFormatSerde_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rowFormatSerde
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1101:1: rowFormatSerde : KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) ;
    public final rowFormatSerde_return rowFormatSerde() throws RecognitionException {
        rowFormatSerde_return retval = new rowFormatSerde_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_ROW460=null;
        Token KW_FORMAT461=null;
        Token KW_SERDE462=null;
        Token KW_WITH463=null;
        Token KW_SERDEPROPERTIES464=null;
        tableProperties_return serdeprops = null;


        CommonTree name_tree=null;
        CommonTree KW_ROW460_tree=null;
        CommonTree KW_FORMAT461_tree=null;
        CommonTree KW_SERDE462_tree=null;
        CommonTree KW_WITH463_tree=null;
        CommonTree KW_SERDEPROPERTIES464_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("serde format specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1104:5: ( KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1104:7: KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            {
            KW_ROW460=(Token)input.LT(1);
            match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatSerde7470); 
            stream_KW_ROW.add(KW_ROW460);

            KW_FORMAT461=(Token)input.LT(1);
            match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatSerde7472); 
            stream_KW_FORMAT.add(KW_FORMAT461);

            KW_SERDE462=(Token)input.LT(1);
            match(input,KW_SERDE,FOLLOW_KW_SERDE_in_rowFormatSerde7474); 
            stream_KW_SERDE.add(KW_SERDE462);

            name=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_rowFormatSerde7478); 
            stream_StringLiteral.add(name);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1104:52: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==KW_WITH) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1104:53: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                    {
                    KW_WITH463=(Token)input.LT(1);
                    match(input,KW_WITH,FOLLOW_KW_WITH_in_rowFormatSerde7481); 
                    stream_KW_WITH.add(KW_WITH463);

                    KW_SERDEPROPERTIES464=(Token)input.LT(1);
                    match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde7483); 
                    stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES464);

                    pushFollow(FOLLOW_tableProperties_in_rowFormatSerde7487);
                    serdeprops=tableProperties();
                    _fsp--;

                    stream_tableProperties.add(serdeprops.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: serdeprops, name
            // token labels: name
            // rule labels: serdeprops, retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"token serdeprops",serdeprops!=null?serdeprops.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1105:5: -> ^( TOK_SERDENAME $name ( $serdeprops)? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1105:8: ^( TOK_SERDENAME $name ( $serdeprops)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDENAME, "TOK_SERDENAME"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1105:30: ( $serdeprops)?
                if ( stream_serdeprops.hasNext() ) {
                    adaptor.addChild(root_1, stream_serdeprops.next());

                }
                stream_serdeprops.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end rowFormatSerde

    public static class rowFormatDelimited_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rowFormatDelimited
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1108:1: rowFormatDelimited : KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ) ;
    public final rowFormatDelimited_return rowFormatDelimited() throws RecognitionException {
        rowFormatDelimited_return retval = new rowFormatDelimited_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ROW465=null;
        Token KW_FORMAT466=null;
        Token KW_DELIMITED467=null;
        tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier468 = null;

        tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier469 = null;

        tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier470 = null;

        tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier471 = null;


        CommonTree KW_ROW465_tree=null;
        CommonTree KW_FORMAT466_tree=null;
        CommonTree KW_DELIMITED467_tree=null;
        RewriteRuleTokenStream stream_KW_DELIMITED=new RewriteRuleTokenStream(adaptor,"token KW_DELIMITED");
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleSubtreeStream stream_tableRowFormatMapKeysIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatMapKeysIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatFieldIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatFieldIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatCollItemsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatCollItemsIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatLinesIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatLinesIdentifier");
         msgs.push("serde properties specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1111:5: ( KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1112:7: KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )?
            {
            KW_ROW465=(Token)input.LT(1);
            match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatDelimited7539); 
            stream_KW_ROW.add(KW_ROW465);

            KW_FORMAT466=(Token)input.LT(1);
            match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatDelimited7541); 
            stream_KW_FORMAT.add(KW_FORMAT466);

            KW_DELIMITED467=(Token)input.LT(1);
            match(input,KW_DELIMITED,FOLLOW_KW_DELIMITED_in_rowFormatDelimited7543); 
            stream_KW_DELIMITED.add(KW_DELIMITED467);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1112:37: ( tableRowFormatFieldIdentifier )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==KW_FIELDS) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1112:37: tableRowFormatFieldIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited7545);
                    tableRowFormatFieldIdentifier468=tableRowFormatFieldIdentifier();
                    _fsp--;

                    stream_tableRowFormatFieldIdentifier.add(tableRowFormatFieldIdentifier468.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1112:68: ( tableRowFormatCollItemsIdentifier )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==KW_COLLECTION) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1112:68: tableRowFormatCollItemsIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited7548);
                    tableRowFormatCollItemsIdentifier469=tableRowFormatCollItemsIdentifier();
                    _fsp--;

                    stream_tableRowFormatCollItemsIdentifier.add(tableRowFormatCollItemsIdentifier469.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1112:103: ( tableRowFormatMapKeysIdentifier )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==KW_MAP) ) {
                int LA137_1 = input.LA(2);

                if ( (LA137_1==KW_KEYS) ) {
                    alt137=1;
                }
            }
            switch (alt137) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1112:103: tableRowFormatMapKeysIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited7551);
                    tableRowFormatMapKeysIdentifier470=tableRowFormatMapKeysIdentifier();
                    _fsp--;

                    stream_tableRowFormatMapKeysIdentifier.add(tableRowFormatMapKeysIdentifier470.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1112:136: ( tableRowFormatLinesIdentifier )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==KW_LINES) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1112:136: tableRowFormatLinesIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited7554);
                    tableRowFormatLinesIdentifier471=tableRowFormatLinesIdentifier();
                    _fsp--;

                    stream_tableRowFormatLinesIdentifier.add(tableRowFormatLinesIdentifier471.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableRowFormatFieldIdentifier, tableRowFormatCollItemsIdentifier, tableRowFormatLinesIdentifier, tableRowFormatMapKeysIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1113:5: -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1113:8: ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDEPROPS, "TOK_SERDEPROPS"), root_1);

                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1113:25: ( tableRowFormatFieldIdentifier )?
                if ( stream_tableRowFormatFieldIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatFieldIdentifier.next());

                }
                stream_tableRowFormatFieldIdentifier.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1113:56: ( tableRowFormatCollItemsIdentifier )?
                if ( stream_tableRowFormatCollItemsIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatCollItemsIdentifier.next());

                }
                stream_tableRowFormatCollItemsIdentifier.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1113:91: ( tableRowFormatMapKeysIdentifier )?
                if ( stream_tableRowFormatMapKeysIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatMapKeysIdentifier.next());

                }
                stream_tableRowFormatMapKeysIdentifier.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1113:124: ( tableRowFormatLinesIdentifier )?
                if ( stream_tableRowFormatLinesIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatLinesIdentifier.next());

                }
                stream_tableRowFormatLinesIdentifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end rowFormatDelimited

    public static class tableRowFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormat
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1116:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );
    public final tableRowFormat_return tableRowFormat() throws RecognitionException {
        tableRowFormat_return retval = new tableRowFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        rowFormatDelimited_return rowFormatDelimited472 = null;

        rowFormatSerde_return rowFormatSerde473 = null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         msgs.push("table row format specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1119:5: ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==KW_ROW) ) {
                int LA139_1 = input.LA(2);

                if ( (LA139_1==KW_FORMAT) ) {
                    int LA139_2 = input.LA(3);

                    if ( (LA139_2==KW_SERDE) ) {
                        alt139=2;
                    }
                    else if ( (LA139_2==KW_DELIMITED) ) {
                        alt139=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1116:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );", 139, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1116:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );", 139, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1116:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );", 139, 0, input);

                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1120:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_tableRowFormat7610);
                    rowFormatDelimited472=rowFormatDelimited();
                    _fsp--;

                    stream_rowFormatDelimited.add(rowFormatDelimited472.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1121:5: -> ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1121:8: ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMAT, "TOK_TABLEROWFORMAT"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1122:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_tableRowFormat7630);
                    rowFormatSerde473=rowFormatSerde();
                    _fsp--;

                    stream_rowFormatSerde.add(rowFormatSerde473.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1123:5: -> ^( TOK_TABLESERIALIZER rowFormatSerde )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1123:8: ^( TOK_TABLESERIALIZER rowFormatSerde )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLESERIALIZER, "TOK_TABLESERIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormat

    public static class tablePropertiesPrefixed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tablePropertiesPrefixed
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1126:1: tablePropertiesPrefixed : KW_TBLPROPERTIES tableProperties ;
    public final tablePropertiesPrefixed_return tablePropertiesPrefixed() throws RecognitionException {
        tablePropertiesPrefixed_return retval = new tablePropertiesPrefixed_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_TBLPROPERTIES474=null;
        tableProperties_return tableProperties475 = null;


        CommonTree KW_TBLPROPERTIES474_tree=null;

         msgs.push("table properties with prefix"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1129:5: ( KW_TBLPROPERTIES tableProperties )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1130:9: KW_TBLPROPERTIES tableProperties
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_TBLPROPERTIES474=(Token)input.LT(1);
            match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed7677); 
            pushFollow(FOLLOW_tableProperties_in_tablePropertiesPrefixed7680);
            tableProperties475=tableProperties();
            _fsp--;

            adaptor.addChild(root_0, tableProperties475.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tablePropertiesPrefixed

    public static class tableProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableProperties
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1133:1: tableProperties : LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) ;
    public final tableProperties_return tableProperties() throws RecognitionException {
        tableProperties_return retval = new tableProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN476=null;
        Token RPAREN478=null;
        tablePropertiesList_return tablePropertiesList477 = null;


        CommonTree LPAREN476_tree=null;
        CommonTree RPAREN478_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_tablePropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesList");
         msgs.push("table properties"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1136:5: ( LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1137:7: LPAREN tablePropertiesList RPAREN
            {
            LPAREN476=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tableProperties7713); 
            stream_LPAREN.add(LPAREN476);

            pushFollow(FOLLOW_tablePropertiesList_in_tableProperties7715);
            tablePropertiesList477=tablePropertiesList();
            _fsp--;

            stream_tablePropertiesList.add(tablePropertiesList477.getTree());
            RPAREN478=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tableProperties7717); 
            stream_RPAREN.add(RPAREN478);


            // AST REWRITE
            // elements: tablePropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1137:41: -> ^( TOK_TABLEPROPERTIES tablePropertiesList )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1137:44: ^( TOK_TABLEPROPERTIES tablePropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPROPERTIES, "TOK_TABLEPROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_tablePropertiesList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableProperties

    public static class tablePropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tablePropertiesList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1140:1: tablePropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) ;
    public final tablePropertiesList_return tablePropertiesList() throws RecognitionException {
        tablePropertiesList_return retval = new tablePropertiesList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA480=null;
        keyValueProperty_return keyValueProperty479 = null;

        keyValueProperty_return keyValueProperty481 = null;


        CommonTree COMMA480_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         msgs.push("table properties list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1143:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1144:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList7758);
            keyValueProperty479=keyValueProperty();
            _fsp--;

            stream_keyValueProperty.add(keyValueProperty479.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1144:24: ( COMMA keyValueProperty )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==COMMA) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1144:25: COMMA keyValueProperty
            	    {
            	    COMMA480=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList7761); 
            	    stream_COMMA.add(COMMA480);

            	    pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList7763);
            	    keyValueProperty481=keyValueProperty();
            	    _fsp--;

            	    stream_keyValueProperty.add(keyValueProperty481.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1144:50: -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1144:53: ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.next());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tablePropertiesList

    public static class keyValueProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start keyValueProperty
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1147:1: keyValueProperty : key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) ;
    public final keyValueProperty_return keyValueProperty() throws RecognitionException {
        keyValueProperty_return retval = new keyValueProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token key=null;
        Token value=null;
        Token EQUAL482=null;

        CommonTree key_tree=null;
        CommonTree value_tree=null;
        CommonTree EQUAL482_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

         msgs.push("specifying key/value property"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1150:5: (key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1151:7: key= StringLiteral EQUAL value= StringLiteral
            {
            key=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty7809); 
            stream_StringLiteral.add(key);

            EQUAL482=(Token)input.LT(1);
            match(input,EQUAL,FOLLOW_EQUAL_in_keyValueProperty7811); 
            stream_EQUAL.add(EQUAL482);

            value=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty7815); 
            stream_StringLiteral.add(value);


            // AST REWRITE
            // elements: key, value
            // token labels: value, key
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
            RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1151:51: -> ^( TOK_TABLEPROPERTY $key $value)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1151:54: ^( TOK_TABLEPROPERTY $key $value)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);

                adaptor.addChild(root_1, stream_key.next());
                adaptor.addChild(root_1, stream_value.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyValueProperty

    public static class tableRowFormatFieldIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatFieldIdentifier
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1154:1: tableRowFormatFieldIdentifier : KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) ;
    public final tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier() throws RecognitionException {
        tableRowFormatFieldIdentifier_return retval = new tableRowFormatFieldIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token fldIdnt=null;
        Token fldEscape=null;
        Token KW_FIELDS483=null;
        Token KW_TERMINATED484=null;
        Token KW_BY485=null;
        Token KW_ESCAPED486=null;
        Token KW_BY487=null;

        CommonTree fldIdnt_tree=null;
        CommonTree fldEscape_tree=null;
        CommonTree KW_FIELDS483_tree=null;
        CommonTree KW_TERMINATED484_tree=null;
        CommonTree KW_BY485_tree=null;
        CommonTree KW_ESCAPED486_tree=null;
        CommonTree KW_BY487_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ESCAPED=new RewriteRuleTokenStream(adaptor,"token KW_ESCAPED");
        RewriteRuleTokenStream stream_KW_FIELDS=new RewriteRuleTokenStream(adaptor,"token KW_FIELDS");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's field separator"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1157:5: ( KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1158:7: KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            {
            KW_FIELDS483=(Token)input.LT(1);
            match(input,KW_FIELDS,FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier7860); 
            stream_KW_FIELDS.add(KW_FIELDS483);

            KW_TERMINATED484=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier7862); 
            stream_KW_TERMINATED.add(KW_TERMINATED484);

            KW_BY485=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier7864); 
            stream_KW_BY.add(KW_BY485);

            fldIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier7868); 
            stream_StringLiteral.add(fldIdnt);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1158:59: ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==KW_ESCAPED) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1158:60: KW_ESCAPED KW_BY fldEscape= StringLiteral
                    {
                    KW_ESCAPED486=(Token)input.LT(1);
                    match(input,KW_ESCAPED,FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier7871); 
                    stream_KW_ESCAPED.add(KW_ESCAPED486);

                    KW_BY487=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier7873); 
                    stream_KW_BY.add(KW_BY487);

                    fldEscape=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier7877); 
                    stream_StringLiteral.add(fldEscape);


                    }
                    break;

            }


            // AST REWRITE
            // elements: fldIdnt, fldEscape
            // token labels: fldEscape, fldIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_fldEscape=new RewriteRuleTokenStream(adaptor,"token fldEscape",fldEscape);
            RewriteRuleTokenStream stream_fldIdnt=new RewriteRuleTokenStream(adaptor,"token fldIdnt",fldIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1159:5: -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1159:8: ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATFIELD, "TOK_TABLEROWFORMATFIELD"), root_1);

                adaptor.addChild(root_1, stream_fldIdnt.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1159:43: ( $fldEscape)?
                if ( stream_fldEscape.hasNext() ) {
                    adaptor.addChild(root_1, stream_fldEscape.next());

                }
                stream_fldEscape.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatFieldIdentifier

    public static class tableRowFormatCollItemsIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatCollItemsIdentifier
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1162:1: tableRowFormatCollItemsIdentifier : KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) ;
    public final tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier() throws RecognitionException {
        tableRowFormatCollItemsIdentifier_return retval = new tableRowFormatCollItemsIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token collIdnt=null;
        Token KW_COLLECTION488=null;
        Token KW_ITEMS489=null;
        Token KW_TERMINATED490=null;
        Token KW_BY491=null;

        CommonTree collIdnt_tree=null;
        CommonTree KW_COLLECTION488_tree=null;
        CommonTree KW_ITEMS489_tree=null;
        CommonTree KW_TERMINATED490_tree=null;
        CommonTree KW_BY491_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ITEMS=new RewriteRuleTokenStream(adaptor,"token KW_ITEMS");
        RewriteRuleTokenStream stream_KW_COLLECTION=new RewriteRuleTokenStream(adaptor,"token KW_COLLECTION");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's column separator"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1165:5: ( KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1166:7: KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral
            {
            KW_COLLECTION488=(Token)input.LT(1);
            match(input,KW_COLLECTION,FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier7929); 
            stream_KW_COLLECTION.add(KW_COLLECTION488);

            KW_ITEMS489=(Token)input.LT(1);
            match(input,KW_ITEMS,FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier7931); 
            stream_KW_ITEMS.add(KW_ITEMS489);

            KW_TERMINATED490=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier7933); 
            stream_KW_TERMINATED.add(KW_TERMINATED490);

            KW_BY491=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier7935); 
            stream_KW_BY.add(KW_BY491);

            collIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier7939); 
            stream_StringLiteral.add(collIdnt);


            // AST REWRITE
            // elements: collIdnt
            // token labels: collIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_collIdnt=new RewriteRuleTokenStream(adaptor,"token collIdnt",collIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1167:5: -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1167:8: ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATCOLLITEMS, "TOK_TABLEROWFORMATCOLLITEMS"), root_1);

                adaptor.addChild(root_1, stream_collIdnt.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatCollItemsIdentifier

    public static class tableRowFormatMapKeysIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatMapKeysIdentifier
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1170:1: tableRowFormatMapKeysIdentifier : KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) ;
    public final tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier() throws RecognitionException {
        tableRowFormatMapKeysIdentifier_return retval = new tableRowFormatMapKeysIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token mapKeysIdnt=null;
        Token KW_MAP492=null;
        Token KW_KEYS493=null;
        Token KW_TERMINATED494=null;
        Token KW_BY495=null;

        CommonTree mapKeysIdnt_tree=null;
        CommonTree KW_MAP492_tree=null;
        CommonTree KW_KEYS493_tree=null;
        CommonTree KW_TERMINATED494_tree=null;
        CommonTree KW_BY495_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_KEYS=new RewriteRuleTokenStream(adaptor,"token KW_KEYS");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's map key separator"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1173:5: ( KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1174:7: KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral
            {
            KW_MAP492=(Token)input.LT(1);
            match(input,KW_MAP,FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier7985); 
            stream_KW_MAP.add(KW_MAP492);

            KW_KEYS493=(Token)input.LT(1);
            match(input,KW_KEYS,FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier7987); 
            stream_KW_KEYS.add(KW_KEYS493);

            KW_TERMINATED494=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier7989); 
            stream_KW_TERMINATED.add(KW_TERMINATED494);

            KW_BY495=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier7991); 
            stream_KW_BY.add(KW_BY495);

            mapKeysIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier7995); 
            stream_StringLiteral.add(mapKeysIdnt);


            // AST REWRITE
            // elements: mapKeysIdnt
            // token labels: mapKeysIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_mapKeysIdnt=new RewriteRuleTokenStream(adaptor,"token mapKeysIdnt",mapKeysIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1175:5: -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1175:8: ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATMAPKEYS, "TOK_TABLEROWFORMATMAPKEYS"), root_1);

                adaptor.addChild(root_1, stream_mapKeysIdnt.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatMapKeysIdentifier

    public static class tableRowFormatLinesIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatLinesIdentifier
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1178:1: tableRowFormatLinesIdentifier : KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) ;
    public final tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier() throws RecognitionException {
        tableRowFormatLinesIdentifier_return retval = new tableRowFormatLinesIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token linesIdnt=null;
        Token KW_LINES496=null;
        Token KW_TERMINATED497=null;
        Token KW_BY498=null;

        CommonTree linesIdnt_tree=null;
        CommonTree KW_LINES496_tree=null;
        CommonTree KW_TERMINATED497_tree=null;
        CommonTree KW_BY498_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LINES=new RewriteRuleTokenStream(adaptor,"token KW_LINES");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's line separator"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1181:5: ( KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1182:7: KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral
            {
            KW_LINES496=(Token)input.LT(1);
            match(input,KW_LINES,FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier8041); 
            stream_KW_LINES.add(KW_LINES496);

            KW_TERMINATED497=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier8043); 
            stream_KW_TERMINATED.add(KW_TERMINATED497);

            KW_BY498=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier8045); 
            stream_KW_BY.add(KW_BY498);

            linesIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier8049); 
            stream_StringLiteral.add(linesIdnt);


            // AST REWRITE
            // elements: linesIdnt
            // token labels: linesIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_linesIdnt=new RewriteRuleTokenStream(adaptor,"token linesIdnt",linesIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1183:5: -> ^( TOK_TABLEROWFORMATLINES $linesIdnt)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1183:8: ^( TOK_TABLEROWFORMATLINES $linesIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATLINES, "TOK_TABLEROWFORMATLINES"), root_1);

                adaptor.addChild(root_1, stream_linesIdnt.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatLinesIdentifier

    public static class tableFileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableFileFormat
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1186:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
    public final tableFileFormat_return tableFileFormat() throws RecognitionException {
        tableFileFormat_return retval = new tableFileFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token inFmt=null;
        Token outFmt=null;
        Token inDriver=null;
        Token outDriver=null;
        Token storageHandler=null;
        Token genericSpec=null;
        Token KW_STORED499=null;
        Token KW_AS500=null;
        Token KW_SEQUENCEFILE501=null;
        Token KW_STORED502=null;
        Token KW_AS503=null;
        Token KW_TEXTFILE504=null;
        Token KW_STORED505=null;
        Token KW_AS506=null;
        Token KW_RCFILE507=null;
        Token KW_STORED508=null;
        Token KW_AS509=null;
        Token KW_INPUTFORMAT510=null;
        Token KW_OUTPUTFORMAT511=null;
        Token KW_INPUTDRIVER512=null;
        Token KW_OUTPUTDRIVER513=null;
        Token KW_STORED514=null;
        Token KW_BY515=null;
        Token KW_WITH516=null;
        Token KW_SERDEPROPERTIES517=null;
        Token KW_STORED518=null;
        Token KW_AS519=null;
        tableProperties_return serdeprops = null;


        CommonTree inFmt_tree=null;
        CommonTree outFmt_tree=null;
        CommonTree inDriver_tree=null;
        CommonTree outDriver_tree=null;
        CommonTree storageHandler_tree=null;
        CommonTree genericSpec_tree=null;
        CommonTree KW_STORED499_tree=null;
        CommonTree KW_AS500_tree=null;
        CommonTree KW_SEQUENCEFILE501_tree=null;
        CommonTree KW_STORED502_tree=null;
        CommonTree KW_AS503_tree=null;
        CommonTree KW_TEXTFILE504_tree=null;
        CommonTree KW_STORED505_tree=null;
        CommonTree KW_AS506_tree=null;
        CommonTree KW_RCFILE507_tree=null;
        CommonTree KW_STORED508_tree=null;
        CommonTree KW_AS509_tree=null;
        CommonTree KW_INPUTFORMAT510_tree=null;
        CommonTree KW_OUTPUTFORMAT511_tree=null;
        CommonTree KW_INPUTDRIVER512_tree=null;
        CommonTree KW_OUTPUTDRIVER513_tree=null;
        CommonTree KW_STORED514_tree=null;
        CommonTree KW_BY515_tree=null;
        CommonTree KW_WITH516_tree=null;
        CommonTree KW_SERDEPROPERTIES517_tree=null;
        CommonTree KW_STORED518_tree=null;
        CommonTree KW_AS519_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
        RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
        RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
        RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
        RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("table file format specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1189:5: ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
            int alt144=6;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==KW_STORED) ) {
                int LA144_1 = input.LA(2);

                if ( (LA144_1==KW_AS) ) {
                    switch ( input.LA(3) ) {
                    case KW_TEXTFILE:
                        {
                        alt144=2;
                        }
                        break;
                    case KW_RCFILE:
                        {
                        alt144=3;
                        }
                        break;
                    case KW_SEQUENCEFILE:
                        {
                        alt144=1;
                        }
                        break;
                    case KW_INPUTFORMAT:
                        {
                        alt144=4;
                        }
                        break;
                    case Identifier:
                        {
                        alt144=6;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1186:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );", 144, 2, input);

                        throw nvae;
                    }

                }
                else if ( (LA144_1==KW_BY) ) {
                    alt144=5;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1186:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );", 144, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1186:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1190:7: KW_STORED KW_AS KW_SEQUENCEFILE
                    {
                    KW_STORED499=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8095); 
                    stream_KW_STORED.add(KW_STORED499);

                    KW_AS500=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8097); 
                    stream_KW_AS.add(KW_AS500);

                    KW_SEQUENCEFILE501=(Token)input.LT(1);
                    match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat8099); 
                    stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE501);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1190:40: -> TOK_TBLSEQUENCEFILE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE"));

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1191:9: KW_STORED KW_AS KW_TEXTFILE
                    {
                    KW_STORED502=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8114); 
                    stream_KW_STORED.add(KW_STORED502);

                    KW_AS503=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8116); 
                    stream_KW_AS.add(KW_AS503);

                    KW_TEXTFILE504=(Token)input.LT(1);
                    match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_tableFileFormat8118); 
                    stream_KW_TEXTFILE.add(KW_TEXTFILE504);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1191:38: -> TOK_TBLTEXTFILE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE"));

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1192:9: KW_STORED KW_AS KW_RCFILE
                    {
                    KW_STORED505=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8133); 
                    stream_KW_STORED.add(KW_STORED505);

                    KW_AS506=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8135); 
                    stream_KW_AS.add(KW_AS506);

                    KW_RCFILE507=(Token)input.LT(1);
                    match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_tableFileFormat8137); 
                    stream_KW_RCFILE.add(KW_RCFILE507);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1192:36: -> TOK_TBLRCFILE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE"));

                    }



                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1193:9: KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    {
                    KW_STORED508=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8152); 
                    stream_KW_STORED.add(KW_STORED508);

                    KW_AS509=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8154); 
                    stream_KW_AS.add(KW_AS509);

                    KW_INPUTFORMAT510=(Token)input.LT(1);
                    match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_tableFileFormat8156); 
                    stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT510);

                    inFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8160); 
                    stream_StringLiteral.add(inFmt);

                    KW_OUTPUTFORMAT511=(Token)input.LT(1);
                    match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat8162); 
                    stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT511);

                    outFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8166); 
                    stream_StringLiteral.add(outFmt);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1193:97: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==KW_INPUTDRIVER) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1193:98: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
                            {
                            KW_INPUTDRIVER512=(Token)input.LT(1);
                            match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_tableFileFormat8169); 
                            stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER512);

                            inDriver=(Token)input.LT(1);
                            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8173); 
                            stream_StringLiteral.add(inDriver);

                            KW_OUTPUTDRIVER513=(Token)input.LT(1);
                            match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat8175); 
                            stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER513);

                            outDriver=(Token)input.LT(1);
                            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8179); 
                            stream_StringLiteral.add(outDriver);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: outFmt, inDriver, outDriver, inFmt
                    // token labels: outDriver, outFmt, inDriver, inFmt
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
                    RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
                    RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
                    RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1194:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1194:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);

                        adaptor.addChild(root_1, stream_inFmt.next());
                        adaptor.addChild(root_1, stream_outFmt.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1194:47: ( $inDriver)?
                        if ( stream_inDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_inDriver.next());

                        }
                        stream_inDriver.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1194:58: ( $outDriver)?
                        if ( stream_outDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_outDriver.next());

                        }
                        stream_outDriver.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1195:9: KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    {
                    KW_STORED514=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8217); 
                    stream_KW_STORED.add(KW_STORED514);

                    KW_BY515=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat8219); 
                    stream_KW_BY.add(KW_BY515);

                    storageHandler=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8223); 
                    stream_StringLiteral.add(storageHandler);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1196:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    int alt143=2;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==KW_WITH) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1196:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                            {
                            KW_WITH516=(Token)input.LT(1);
                            match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat8235); 
                            stream_KW_WITH.add(KW_WITH516);

                            KW_SERDEPROPERTIES517=(Token)input.LT(1);
                            match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat8237); 
                            stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES517);

                            pushFollow(FOLLOW_tableProperties_in_tableFileFormat8241);
                            serdeprops=tableProperties();
                            _fsp--;

                            stream_tableProperties.add(serdeprops.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: storageHandler, serdeprops
                    // token labels: storageHandler
                    // rule labels: serdeprops, retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_storageHandler=new RewriteRuleTokenStream(adaptor,"token storageHandler",storageHandler);
                    RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"token serdeprops",serdeprops!=null?serdeprops.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1197:7: -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1197:10: ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER"), root_1);

                        adaptor.addChild(root_1, stream_storageHandler.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1197:47: ( $serdeprops)?
                        if ( stream_serdeprops.hasNext() ) {
                            adaptor.addChild(root_1, stream_serdeprops.next());

                        }
                        stream_serdeprops.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 6 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1198:9: KW_STORED KW_AS genericSpec= Identifier
                    {
                    KW_STORED518=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8272); 
                    stream_KW_STORED.add(KW_STORED518);

                    KW_AS519=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8274); 
                    stream_KW_AS.add(KW_AS519);

                    genericSpec=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_tableFileFormat8278); 
                    stream_Identifier.add(genericSpec);


                    // AST REWRITE
                    // elements: genericSpec
                    // token labels: genericSpec
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_genericSpec=new RewriteRuleTokenStream(adaptor,"token genericSpec",genericSpec);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1199:7: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1199:10: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);

                        adaptor.addChild(root_1, stream_genericSpec.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableFileFormat

    public static class tableLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableLocation
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1202:1: tableLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) ;
    public final tableLocation_return tableLocation() throws RecognitionException {
        tableLocation_return retval = new tableLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION520=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION520_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         msgs.push("table location specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1205:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1206:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION520=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_tableLocation8326); 
            stream_KW_LOCATION.add(KW_LOCATION520);

            locn=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableLocation8330); 
            stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1206:38: -> ^( TOK_TABLELOCATION $locn)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1206:41: ^( TOK_TABLELOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLELOCATION, "TOK_TABLELOCATION"), root_1);

                adaptor.addChild(root_1, stream_locn.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableLocation

    public static class columnNameTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameTypeList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1209:1: columnNameTypeList : columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) ;
    public final columnNameTypeList_return columnNameTypeList() throws RecognitionException {
        columnNameTypeList_return retval = new columnNameTypeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA522=null;
        columnNameType_return columnNameType521 = null;

        columnNameType_return columnNameType523 = null;


        CommonTree COMMA522_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");
         msgs.push("column name type list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1212:5: ( columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1212:7: columnNameType ( COMMA columnNameType )*
            {
            pushFollow(FOLLOW_columnNameType_in_columnNameTypeList8366);
            columnNameType521=columnNameType();
            _fsp--;

            stream_columnNameType.add(columnNameType521.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1212:22: ( COMMA columnNameType )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==COMMA) ) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1212:23: COMMA columnNameType
            	    {
            	    COMMA522=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeList8369); 
            	    stream_COMMA.add(COMMA522);

            	    pushFollow(FOLLOW_columnNameType_in_columnNameTypeList8371);
            	    columnNameType523=columnNameType();
            	    _fsp--;

            	    stream_columnNameType.add(columnNameType523.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1212:46: -> ^( TOK_TABCOLLIST ( columnNameType )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1212:49: ^( TOK_TABCOLLIST ( columnNameType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);

                if ( !(stream_columnNameType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameType.next());

                }
                stream_columnNameType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameTypeList

    public static class columnNameColonTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameColonTypeList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1215:1: columnNameColonTypeList : columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) ;
    public final columnNameColonTypeList_return columnNameColonTypeList() throws RecognitionException {
        columnNameColonTypeList_return retval = new columnNameColonTypeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA525=null;
        columnNameColonType_return columnNameColonType524 = null;

        columnNameColonType_return columnNameColonType526 = null;


        CommonTree COMMA525_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameColonType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonType");
         msgs.push("column name type list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1218:5: ( columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1218:7: columnNameColonType ( COMMA columnNameColonType )*
            {
            pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList8409);
            columnNameColonType524=columnNameColonType();
            _fsp--;

            stream_columnNameColonType.add(columnNameColonType524.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1218:27: ( COMMA columnNameColonType )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==COMMA) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1218:28: COMMA columnNameColonType
            	    {
            	    COMMA525=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameColonTypeList8412); 
            	    stream_COMMA.add(COMMA525);

            	    pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList8414);
            	    columnNameColonType526=columnNameColonType();
            	    _fsp--;

            	    stream_columnNameColonType.add(columnNameColonType526.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameColonType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1218:56: -> ^( TOK_TABCOLLIST ( columnNameColonType )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1218:59: ^( TOK_TABCOLLIST ( columnNameColonType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);

                if ( !(stream_columnNameColonType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameColonType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameColonType.next());

                }
                stream_columnNameColonType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameColonTypeList

    public static class columnNameList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1221:1: columnNameList : columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) ;
    public final columnNameList_return columnNameList() throws RecognitionException {
        columnNameList_return retval = new columnNameList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA528=null;
        columnName_return columnName527 = null;

        columnName_return columnName529 = null;


        CommonTree COMMA528_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");
         msgs.push("column name list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1224:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1224:7: columnName ( COMMA columnName )*
            {
            pushFollow(FOLLOW_columnName_in_columnNameList8452);
            columnName527=columnName();
            _fsp--;

            stream_columnName.add(columnName527.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1224:18: ( COMMA columnName )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==COMMA) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1224:19: COMMA columnName
            	    {
            	    COMMA528=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameList8455); 
            	    stream_COMMA.add(COMMA528);

            	    pushFollow(FOLLOW_columnName_in_columnNameList8457);
            	    columnName529=columnName();
            	    _fsp--;

            	    stream_columnName.add(columnName529.getTree());

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            // AST REWRITE
            // elements: columnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1224:38: -> ^( TOK_TABCOLNAME ( columnName )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1224:41: ^( TOK_TABCOLNAME ( columnName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);

                if ( !(stream_columnName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnName.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnName.next());

                }
                stream_columnName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameList

    public static class columnName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnName
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1227:1: columnName : Identifier ;
    public final columnName_return columnName() throws RecognitionException {
        columnName_return retval = new columnName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier530=null;

        CommonTree Identifier530_tree=null;

         msgs.push("column name"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1230:5: ( Identifier )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1231:7: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier530=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnName8501); 
            Identifier530_tree = (CommonTree)adaptor.create(Identifier530);
            adaptor.addChild(root_0, Identifier530_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnName

    public static class columnNameOrderList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameOrderList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1234:1: columnNameOrderList : columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) ;
    public final columnNameOrderList_return columnNameOrderList() throws RecognitionException {
        columnNameOrderList_return retval = new columnNameOrderList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA532=null;
        columnNameOrder_return columnNameOrder531 = null;

        columnNameOrder_return columnNameOrder533 = null;


        CommonTree COMMA532_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrder");
         msgs.push("column name order list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1237:5: ( columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1237:7: columnNameOrder ( COMMA columnNameOrder )*
            {
            pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList8528);
            columnNameOrder531=columnNameOrder();
            _fsp--;

            stream_columnNameOrder.add(columnNameOrder531.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1237:23: ( COMMA columnNameOrder )*
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==COMMA) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1237:24: COMMA columnNameOrder
            	    {
            	    COMMA532=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameOrderList8531); 
            	    stream_COMMA.add(COMMA532);

            	    pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList8533);
            	    columnNameOrder533=columnNameOrder();
            	    _fsp--;

            	    stream_columnNameOrder.add(columnNameOrder533.getTree());

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameOrder
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1237:48: -> ^( TOK_TABCOLNAME ( columnNameOrder )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1237:51: ^( TOK_TABCOLNAME ( columnNameOrder )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);

                if ( !(stream_columnNameOrder.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameOrder.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameOrder.next());

                }
                stream_columnNameOrder.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameOrderList

    public static class columnNameOrder_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameOrder
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1240:1: columnNameOrder : Identifier (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier ) -> ^( TOK_TABSORTCOLNAMEDESC Identifier ) ;
    public final columnNameOrder_return columnNameOrder() throws RecognitionException {
        columnNameOrder_return retval = new columnNameOrder_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token asc=null;
        Token desc=null;
        Token Identifier534=null;

        CommonTree asc_tree=null;
        CommonTree desc_tree=null;
        CommonTree Identifier534_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");

         msgs.push("column name order"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1243:5: ( Identifier (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier ) -> ^( TOK_TABSORTCOLNAMEDESC Identifier ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1243:7: Identifier (asc= KW_ASC | desc= KW_DESC )?
            {
            Identifier534=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameOrder8571); 
            stream_Identifier.add(Identifier534);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1243:18: (asc= KW_ASC | desc= KW_DESC )?
            int alt149=3;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==KW_ASC) ) {
                alt149=1;
            }
            else if ( (LA149_0==KW_DESC) ) {
                alt149=2;
            }
            switch (alt149) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1243:19: asc= KW_ASC
                    {
                    asc=(Token)input.LT(1);
                    match(input,KW_ASC,FOLLOW_KW_ASC_in_columnNameOrder8576); 
                    stream_KW_ASC.add(asc);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1243:32: desc= KW_DESC
                    {
                    desc=(Token)input.LT(1);
                    match(input,KW_DESC,FOLLOW_KW_DESC_in_columnNameOrder8582); 
                    stream_KW_DESC.add(desc);


                    }
                    break;

            }


            // AST REWRITE
            // elements: Identifier, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1244:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier )
            if (desc == null) {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1244:25: ^( TOK_TABSORTCOLNAMEASC Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1245:5: -> ^( TOK_TABSORTCOLNAMEDESC Identifier )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1245:25: ^( TOK_TABSORTCOLNAMEDESC Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameOrder

    public static class columnNameCommentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameCommentList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1248:1: columnNameCommentList : columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) ;
    public final columnNameCommentList_return columnNameCommentList() throws RecognitionException {
        columnNameCommentList_return retval = new columnNameCommentList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA536=null;
        columnNameComment_return columnNameComment535 = null;

        columnNameComment_return columnNameComment537 = null;


        CommonTree COMMA536_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameComment=new RewriteRuleSubtreeStream(adaptor,"rule columnNameComment");
         msgs.push("column name comment list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1251:5: ( columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1251:7: columnNameComment ( COMMA columnNameComment )*
            {
            pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList8654);
            columnNameComment535=columnNameComment();
            _fsp--;

            stream_columnNameComment.add(columnNameComment535.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1251:25: ( COMMA columnNameComment )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==COMMA) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1251:26: COMMA columnNameComment
            	    {
            	    COMMA536=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameCommentList8657); 
            	    stream_COMMA.add(COMMA536);

            	    pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList8659);
            	    columnNameComment537=columnNameComment();
            	    _fsp--;

            	    stream_columnNameComment.add(columnNameComment537.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameComment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1251:52: -> ^( TOK_TABCOLNAME ( columnNameComment )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1251:55: ^( TOK_TABCOLNAME ( columnNameComment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);

                if ( !(stream_columnNameComment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameComment.next());

                }
                stream_columnNameComment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameCommentList

    public static class columnNameComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameComment
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1254:1: columnNameComment : colName= Identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) ;
    public final columnNameComment_return columnNameComment() throws RecognitionException {
        columnNameComment_return retval = new columnNameComment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token KW_COMMENT538=null;

        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree KW_COMMENT538_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("column name comment"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1257:5: (colName= Identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1257:7: colName= Identifier ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameComment8699); 
            stream_Identifier.add(colName);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1257:26: ( KW_COMMENT comment= StringLiteral )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==KW_COMMENT) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1257:27: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT538=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameComment8702); 
                    stream_KW_COMMENT.add(KW_COMMENT538);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameComment8706); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: comment, colName
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1258:5: -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1258:8: ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, adaptor.create(TOK_NULL, "TOK_NULL"));
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1258:39: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.next());

                }
                stream_comment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameComment

    public static class columnRefOrder_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnRefOrder
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1261:1: columnRefOrder : expression (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) ;
    public final columnRefOrder_return columnRefOrder() throws RecognitionException {
        columnRefOrder_return retval = new columnRefOrder_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token asc=null;
        Token desc=null;
        expression_return expression539 = null;


        CommonTree asc_tree=null;
        CommonTree desc_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("column order"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1264:5: ( expression (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1264:7: expression (asc= KW_ASC | desc= KW_DESC )?
            {
            pushFollow(FOLLOW_expression_in_columnRefOrder8754);
            expression539=expression();
            _fsp--;

            stream_expression.add(expression539.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1264:18: (asc= KW_ASC | desc= KW_DESC )?
            int alt152=3;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==KW_ASC) ) {
                alt152=1;
            }
            else if ( (LA152_0==KW_DESC) ) {
                alt152=2;
            }
            switch (alt152) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1264:19: asc= KW_ASC
                    {
                    asc=(Token)input.LT(1);
                    match(input,KW_ASC,FOLLOW_KW_ASC_in_columnRefOrder8759); 
                    stream_KW_ASC.add(asc);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1264:32: desc= KW_DESC
                    {
                    desc=(Token)input.LT(1);
                    match(input,KW_DESC,FOLLOW_KW_DESC_in_columnRefOrder8765); 
                    stream_KW_DESC.add(desc);


                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1265:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression )
            if (desc == null) {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1265:25: ^( TOK_TABSORTCOLNAMEASC expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);

                adaptor.addChild(root_1, stream_expression.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1266:5: -> ^( TOK_TABSORTCOLNAMEDESC expression )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1266:25: ^( TOK_TABSORTCOLNAMEDESC expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);

                adaptor.addChild(root_1, stream_expression.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnRefOrder

    public static class columnNameType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameType
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1269:1: columnNameType : colName= Identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final columnNameType_return columnNameType() throws RecognitionException {
        columnNameType_return retval = new columnNameType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token KW_COMMENT541=null;
        colType_return colType540 = null;


        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree KW_COMMENT541_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1272:5: (colName= Identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1272:7: colName= Identifier colType ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameType8839); 
            stream_Identifier.add(colName);

            pushFollow(FOLLOW_colType_in_columnNameType8841);
            colType540=colType();
            _fsp--;

            stream_colType.add(colType540.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1272:34: ( KW_COMMENT comment= StringLiteral )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==KW_COMMENT) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1272:35: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT541=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameType8844); 
                    stream_KW_COMMENT.add(KW_COMMENT541);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameType8848); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colName, colType, comment, colName, colType
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1273:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1273:28: ^( TOK_TABCOL $colName colType )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1274:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1274:28: ^( TOK_TABCOL $colName colType $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());
                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameType

    public static class columnNameColonType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameColonType
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1277:1: columnNameColonType : colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final columnNameColonType_return columnNameColonType() throws RecognitionException {
        columnNameColonType_return retval = new columnNameColonType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token COLON542=null;
        Token KW_COMMENT544=null;
        colType_return colType543 = null;


        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree COLON542_tree=null;
        CommonTree KW_COMMENT544_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1280:5: (colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1280:7: colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameColonType8934); 
            stream_Identifier.add(colName);

            COLON542=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_columnNameColonType8936); 
            stream_COLON.add(COLON542);

            pushFollow(FOLLOW_colType_in_columnNameColonType8938);
            colType543=colType();
            _fsp--;

            stream_colType.add(colType543.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1280:40: ( KW_COMMENT comment= StringLiteral )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==KW_COMMENT) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1280:41: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT544=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameColonType8941); 
                    stream_KW_COMMENT.add(KW_COMMENT544);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameColonType8945); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: comment, colType, colName, colType, colName
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1281:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1281:28: ^( TOK_TABCOL $colName colType )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1282:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1282:28: ^( TOK_TABCOL $colName colType $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());
                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameColonType

    public static class colType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start colType
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1285:1: colType : type ;
    public final colType_return colType() throws RecognitionException {
        colType_return retval = new colType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        type_return type545 = null;



         msgs.push("column type"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1288:5: ( type )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1288:7: type
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_colType9029);
            type545=type();
            _fsp--;

            adaptor.addChild(root_0, type545.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end colType

    public static class colTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start colTypeList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1291:1: colTypeList : colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) ;
    public final colTypeList_return colTypeList() throws RecognitionException {
        colTypeList_return retval = new colTypeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA547=null;
        colType_return colType546 = null;

        colType_return colType548 = null;


        CommonTree COMMA547_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column type list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1294:5: ( colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1294:7: colType ( COMMA colType )*
            {
            pushFollow(FOLLOW_colType_in_colTypeList9056);
            colType546=colType();
            _fsp--;

            stream_colType.add(colType546.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1294:15: ( COMMA colType )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==COMMA) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1294:16: COMMA colType
            	    {
            	    COMMA547=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_colTypeList9059); 
            	    stream_COMMA.add(COMMA547);

            	    pushFollow(FOLLOW_colType_in_colTypeList9061);
            	    colType548=colType();
            	    _fsp--;

            	    stream_colType.add(colType548.getTree());

            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);


            // AST REWRITE
            // elements: colType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1294:32: -> ^( TOK_COLTYPELIST ( colType )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1294:35: ^( TOK_COLTYPELIST ( colType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_COLTYPELIST, "TOK_COLTYPELIST"), root_1);

                if ( !(stream_colType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_colType.hasNext() ) {
                    adaptor.addChild(root_1, stream_colType.next());

                }
                stream_colType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end colTypeList

    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start type
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1297:1: type : ( primitiveType | listType | structType | mapType | unionType );
    public final type_return type() throws RecognitionException {
        type_return retval = new type_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        primitiveType_return primitiveType549 = null;

        listType_return listType550 = null;

        structType_return structType551 = null;

        mapType_return mapType552 = null;

        unionType_return unionType553 = null;



        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1298:5: ( primitiveType | listType | structType | mapType | unionType )
            int alt156=5;
            switch ( input.LA(1) ) {
            case KW_TINYINT:
            case KW_SMALLINT:
            case KW_INT:
            case KW_BIGINT:
            case KW_BOOLEAN:
            case KW_FLOAT:
            case KW_DOUBLE:
            case KW_DATE:
            case KW_DATETIME:
            case KW_TIMESTAMP:
            case KW_STRING:
            case KW_BINARY:
                {
                alt156=1;
                }
                break;
            case KW_ARRAY:
                {
                alt156=2;
                }
                break;
            case KW_STRUCT:
                {
                alt156=3;
                }
                break;
            case KW_MAP:
                {
                alt156=4;
                }
                break;
            case KW_UNIONTYPE:
                {
                alt156=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1297:1: type : ( primitiveType | listType | structType | mapType | unionType );", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1298:7: primitiveType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_type9089);
                    primitiveType549=primitiveType();
                    _fsp--;

                    adaptor.addChild(root_0, primitiveType549.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1299:7: listType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_listType_in_type9097);
                    listType550=listType();
                    _fsp--;

                    adaptor.addChild(root_0, listType550.getTree());

                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1300:7: structType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_structType_in_type9105);
                    structType551=structType();
                    _fsp--;

                    adaptor.addChild(root_0, structType551.getTree());

                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1301:7: mapType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_mapType_in_type9113);
                    mapType552=mapType();
                    _fsp--;

                    adaptor.addChild(root_0, mapType552.getTree());

                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1302:7: unionType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unionType_in_type9121);
                    unionType553=unionType();
                    _fsp--;

                    adaptor.addChild(root_0, unionType553.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end type

    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start primitiveType
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1304:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY );
    public final primitiveType_return primitiveType() throws RecognitionException {
        primitiveType_return retval = new primitiveType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_TINYINT554=null;
        Token KW_SMALLINT555=null;
        Token KW_INT556=null;
        Token KW_BIGINT557=null;
        Token KW_BOOLEAN558=null;
        Token KW_FLOAT559=null;
        Token KW_DOUBLE560=null;
        Token KW_DATE561=null;
        Token KW_DATETIME562=null;
        Token KW_TIMESTAMP563=null;
        Token KW_STRING564=null;
        Token KW_BINARY565=null;

        CommonTree KW_TINYINT554_tree=null;
        CommonTree KW_SMALLINT555_tree=null;
        CommonTree KW_INT556_tree=null;
        CommonTree KW_BIGINT557_tree=null;
        CommonTree KW_BOOLEAN558_tree=null;
        CommonTree KW_FLOAT559_tree=null;
        CommonTree KW_DOUBLE560_tree=null;
        CommonTree KW_DATE561_tree=null;
        CommonTree KW_DATETIME562_tree=null;
        CommonTree KW_TIMESTAMP563_tree=null;
        CommonTree KW_STRING564_tree=null;
        CommonTree KW_BINARY565_tree=null;
        RewriteRuleTokenStream stream_KW_DATETIME=new RewriteRuleTokenStream(adaptor,"token KW_DATETIME");
        RewriteRuleTokenStream stream_KW_STRING=new RewriteRuleTokenStream(adaptor,"token KW_STRING");
        RewriteRuleTokenStream stream_KW_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMP");
        RewriteRuleTokenStream stream_KW_DATE=new RewriteRuleTokenStream(adaptor,"token KW_DATE");
        RewriteRuleTokenStream stream_KW_FLOAT=new RewriteRuleTokenStream(adaptor,"token KW_FLOAT");
        RewriteRuleTokenStream stream_KW_BINARY=new RewriteRuleTokenStream(adaptor,"token KW_BINARY");
        RewriteRuleTokenStream stream_KW_INT=new RewriteRuleTokenStream(adaptor,"token KW_INT");
        RewriteRuleTokenStream stream_KW_SMALLINT=new RewriteRuleTokenStream(adaptor,"token KW_SMALLINT");
        RewriteRuleTokenStream stream_KW_DOUBLE=new RewriteRuleTokenStream(adaptor,"token KW_DOUBLE");
        RewriteRuleTokenStream stream_KW_BIGINT=new RewriteRuleTokenStream(adaptor,"token KW_BIGINT");
        RewriteRuleTokenStream stream_KW_TINYINT=new RewriteRuleTokenStream(adaptor,"token KW_TINYINT");
        RewriteRuleTokenStream stream_KW_BOOLEAN=new RewriteRuleTokenStream(adaptor,"token KW_BOOLEAN");

         msgs.push("primitive type specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1307:5: ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY )
            int alt157=12;
            switch ( input.LA(1) ) {
            case KW_TINYINT:
                {
                alt157=1;
                }
                break;
            case KW_SMALLINT:
                {
                alt157=2;
                }
                break;
            case KW_INT:
                {
                alt157=3;
                }
                break;
            case KW_BIGINT:
                {
                alt157=4;
                }
                break;
            case KW_BOOLEAN:
                {
                alt157=5;
                }
                break;
            case KW_FLOAT:
                {
                alt157=6;
                }
                break;
            case KW_DOUBLE:
                {
                alt157=7;
                }
                break;
            case KW_DATE:
                {
                alt157=8;
                }
                break;
            case KW_DATETIME:
                {
                alt157=9;
                }
                break;
            case KW_TIMESTAMP:
                {
                alt157=10;
                }
                break;
            case KW_STRING:
                {
                alt157=11;
                }
                break;
            case KW_BINARY:
                {
                alt157=12;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1304:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY );", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1307:7: KW_TINYINT
                    {
                    KW_TINYINT554=(Token)input.LT(1);
                    match(input,KW_TINYINT,FOLLOW_KW_TINYINT_in_primitiveType9143); 
                    stream_KW_TINYINT.add(KW_TINYINT554);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1307:24: -> TOK_TINYINT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TINYINT, "TOK_TINYINT"));

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1308:7: KW_SMALLINT
                    {
                    KW_SMALLINT555=(Token)input.LT(1);
                    match(input,KW_SMALLINT,FOLLOW_KW_SMALLINT_in_primitiveType9164); 
                    stream_KW_SMALLINT.add(KW_SMALLINT555);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1308:24: -> TOK_SMALLINT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_SMALLINT, "TOK_SMALLINT"));

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1309:7: KW_INT
                    {
                    KW_INT556=(Token)input.LT(1);
                    match(input,KW_INT,FOLLOW_KW_INT_in_primitiveType9184); 
                    stream_KW_INT.add(KW_INT556);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1309:24: -> TOK_INT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_INT, "TOK_INT"));

                    }



                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1310:7: KW_BIGINT
                    {
                    KW_BIGINT557=(Token)input.LT(1);
                    match(input,KW_BIGINT,FOLLOW_KW_BIGINT_in_primitiveType9209); 
                    stream_KW_BIGINT.add(KW_BIGINT557);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1310:24: -> TOK_BIGINT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_BIGINT, "TOK_BIGINT"));

                    }



                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1311:7: KW_BOOLEAN
                    {
                    KW_BOOLEAN558=(Token)input.LT(1);
                    match(input,KW_BOOLEAN,FOLLOW_KW_BOOLEAN_in_primitiveType9231); 
                    stream_KW_BOOLEAN.add(KW_BOOLEAN558);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1311:24: -> TOK_BOOLEAN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_BOOLEAN, "TOK_BOOLEAN"));

                    }



                    }
                    break;
                case 6 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1312:7: KW_FLOAT
                    {
                    KW_FLOAT559=(Token)input.LT(1);
                    match(input,KW_FLOAT,FOLLOW_KW_FLOAT_in_primitiveType9252); 
                    stream_KW_FLOAT.add(KW_FLOAT559);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1312:24: -> TOK_FLOAT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_FLOAT, "TOK_FLOAT"));

                    }



                    }
                    break;
                case 7 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1313:7: KW_DOUBLE
                    {
                    KW_DOUBLE560=(Token)input.LT(1);
                    match(input,KW_DOUBLE,FOLLOW_KW_DOUBLE_in_primitiveType9275); 
                    stream_KW_DOUBLE.add(KW_DOUBLE560);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1313:24: -> TOK_DOUBLE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_DOUBLE, "TOK_DOUBLE"));

                    }



                    }
                    break;
                case 8 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1314:7: KW_DATE
                    {
                    KW_DATE561=(Token)input.LT(1);
                    match(input,KW_DATE,FOLLOW_KW_DATE_in_primitiveType9297); 
                    stream_KW_DATE.add(KW_DATE561);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1314:24: -> TOK_DATE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_DATE, "TOK_DATE"));

                    }



                    }
                    break;
                case 9 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1315:7: KW_DATETIME
                    {
                    KW_DATETIME562=(Token)input.LT(1);
                    match(input,KW_DATETIME,FOLLOW_KW_DATETIME_in_primitiveType9321); 
                    stream_KW_DATETIME.add(KW_DATETIME562);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1315:24: -> TOK_DATETIME
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_DATETIME, "TOK_DATETIME"));

                    }



                    }
                    break;
                case 10 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1316:7: KW_TIMESTAMP
                    {
                    KW_TIMESTAMP563=(Token)input.LT(1);
                    match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType9341); 
                    stream_KW_TIMESTAMP.add(KW_TIMESTAMP563);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1316:24: -> TOK_TIMESTAMP
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TIMESTAMP, "TOK_TIMESTAMP"));

                    }



                    }
                    break;
                case 11 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1317:7: KW_STRING
                    {
                    KW_STRING564=(Token)input.LT(1);
                    match(input,KW_STRING,FOLLOW_KW_STRING_in_primitiveType9360); 
                    stream_KW_STRING.add(KW_STRING564);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1317:24: -> TOK_STRING
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_STRING, "TOK_STRING"));

                    }



                    }
                    break;
                case 12 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1318:7: KW_BINARY
                    {
                    KW_BINARY565=(Token)input.LT(1);
                    match(input,KW_BINARY,FOLLOW_KW_BINARY_in_primitiveType9382); 
                    stream_KW_BINARY.add(KW_BINARY565);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1318:24: -> TOK_BINARY
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_BINARY, "TOK_BINARY"));

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end primitiveType

    public static class listType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start listType
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1321:1: listType : KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) ;
    public final listType_return listType() throws RecognitionException {
        listType_return retval = new listType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ARRAY566=null;
        Token LESSTHAN567=null;
        Token GREATERTHAN569=null;
        type_return type568 = null;


        CommonTree KW_ARRAY566_tree=null;
        CommonTree LESSTHAN567_tree=null;
        CommonTree GREATERTHAN569_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_ARRAY=new RewriteRuleTokenStream(adaptor,"token KW_ARRAY");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
         msgs.push("list type"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1324:5: ( KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1324:7: KW_ARRAY LESSTHAN type GREATERTHAN
            {
            KW_ARRAY566=(Token)input.LT(1);
            match(input,KW_ARRAY,FOLLOW_KW_ARRAY_in_listType9423); 
            stream_KW_ARRAY.add(KW_ARRAY566);

            LESSTHAN567=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_listType9425); 
            stream_LESSTHAN.add(LESSTHAN567);

            pushFollow(FOLLOW_type_in_listType9427);
            type568=type();
            _fsp--;

            stream_type.add(type568.getTree());
            GREATERTHAN569=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_listType9429); 
            stream_GREATERTHAN.add(GREATERTHAN569);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1324:44: -> ^( TOK_LIST type )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1324:47: ^( TOK_LIST type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LIST, "TOK_LIST"), root_1);

                adaptor.addChild(root_1, stream_type.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end listType

    public static class structType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start structType
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1327:1: structType : KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) ;
    public final structType_return structType() throws RecognitionException {
        structType_return retval = new structType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_STRUCT570=null;
        Token LESSTHAN571=null;
        Token GREATERTHAN573=null;
        columnNameColonTypeList_return columnNameColonTypeList572 = null;


        CommonTree KW_STRUCT570_tree=null;
        CommonTree LESSTHAN571_tree=null;
        CommonTree GREATERTHAN573_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_STRUCT=new RewriteRuleTokenStream(adaptor,"token KW_STRUCT");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_columnNameColonTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonTypeList");
         msgs.push("struct type"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1330:5: ( KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1330:7: KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN
            {
            KW_STRUCT570=(Token)input.LT(1);
            match(input,KW_STRUCT,FOLLOW_KW_STRUCT_in_structType9466); 
            stream_KW_STRUCT.add(KW_STRUCT570);

            LESSTHAN571=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_structType9468); 
            stream_LESSTHAN.add(LESSTHAN571);

            pushFollow(FOLLOW_columnNameColonTypeList_in_structType9470);
            columnNameColonTypeList572=columnNameColonTypeList();
            _fsp--;

            stream_columnNameColonTypeList.add(columnNameColonTypeList572.getTree());
            GREATERTHAN573=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_structType9472); 
            stream_GREATERTHAN.add(GREATERTHAN573);


            // AST REWRITE
            // elements: columnNameColonTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1330:62: -> ^( TOK_STRUCT columnNameColonTypeList )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1330:65: ^( TOK_STRUCT columnNameColonTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_STRUCT, "TOK_STRUCT"), root_1);

                adaptor.addChild(root_1, stream_columnNameColonTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end structType

    public static class mapType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start mapType
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1333:1: mapType : KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) ;
    public final mapType_return mapType() throws RecognitionException {
        mapType_return retval = new mapType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_MAP574=null;
        Token LESSTHAN575=null;
        Token COMMA576=null;
        Token GREATERTHAN577=null;
        primitiveType_return left = null;

        type_return right = null;


        CommonTree KW_MAP574_tree=null;
        CommonTree LESSTHAN575_tree=null;
        CommonTree COMMA576_tree=null;
        CommonTree GREATERTHAN577_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
         msgs.push("map type"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1336:5: ( KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1336:7: KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN
            {
            KW_MAP574=(Token)input.LT(1);
            match(input,KW_MAP,FOLLOW_KW_MAP_in_mapType9507); 
            stream_KW_MAP.add(KW_MAP574);

            LESSTHAN575=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_mapType9509); 
            stream_LESSTHAN.add(LESSTHAN575);

            pushFollow(FOLLOW_primitiveType_in_mapType9513);
            left=primitiveType();
            _fsp--;

            stream_primitiveType.add(left.getTree());
            COMMA576=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_mapType9515); 
            stream_COMMA.add(COMMA576);

            pushFollow(FOLLOW_type_in_mapType9519);
            right=type();
            _fsp--;

            stream_type.add(right.getTree());
            GREATERTHAN577=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_mapType9521); 
            stream_GREATERTHAN.add(GREATERTHAN577);


            // AST REWRITE
            // elements: left, right
            // token labels: 
            // rule labels: retval, left, right
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"token left",left!=null?left.tree:null);
            RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"token right",right!=null?right.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1337:5: -> ^( TOK_MAP $left $right)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1337:8: ^( TOK_MAP $left $right)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_MAP, "TOK_MAP"), root_1);

                adaptor.addChild(root_1, stream_left.next());
                adaptor.addChild(root_1, stream_right.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end mapType

    public static class unionType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unionType
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1340:1: unionType : KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) ;
    public final unionType_return unionType() throws RecognitionException {
        unionType_return retval = new unionType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_UNIONTYPE578=null;
        Token LESSTHAN579=null;
        Token GREATERTHAN581=null;
        colTypeList_return colTypeList580 = null;


        CommonTree KW_UNIONTYPE578_tree=null;
        CommonTree LESSTHAN579_tree=null;
        CommonTree GREATERTHAN581_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_UNIONTYPE=new RewriteRuleTokenStream(adaptor,"token KW_UNIONTYPE");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_colTypeList=new RewriteRuleSubtreeStream(adaptor,"rule colTypeList");
         msgs.push("uniontype type"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1343:5: ( KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1343:7: KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN
            {
            KW_UNIONTYPE578=(Token)input.LT(1);
            match(input,KW_UNIONTYPE,FOLLOW_KW_UNIONTYPE_in_unionType9564); 
            stream_KW_UNIONTYPE.add(KW_UNIONTYPE578);

            LESSTHAN579=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_unionType9566); 
            stream_LESSTHAN.add(LESSTHAN579);

            pushFollow(FOLLOW_colTypeList_in_unionType9568);
            colTypeList580=colTypeList();
            _fsp--;

            stream_colTypeList.add(colTypeList580.getTree());
            GREATERTHAN581=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_unionType9570); 
            stream_GREATERTHAN.add(GREATERTHAN581);


            // AST REWRITE
            // elements: colTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1343:53: -> ^( TOK_UNIONTYPE colTypeList )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1343:56: ^( TOK_UNIONTYPE colTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_UNIONTYPE, "TOK_UNIONTYPE"), root_1);

                adaptor.addChild(root_1, stream_colTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end unionType

    public static class queryOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1346:1: queryOperator : KW_UNION KW_ALL -> ^( TOK_UNION ) ;
    public final queryOperator_return queryOperator() throws RecognitionException {
        queryOperator_return retval = new queryOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_UNION582=null;
        Token KW_ALL583=null;

        CommonTree KW_UNION582_tree=null;
        CommonTree KW_ALL583_tree=null;
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_UNION=new RewriteRuleTokenStream(adaptor,"token KW_UNION");

         msgs.push("query operator"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1349:5: ( KW_UNION KW_ALL -> ^( TOK_UNION ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1349:7: KW_UNION KW_ALL
            {
            KW_UNION582=(Token)input.LT(1);
            match(input,KW_UNION,FOLLOW_KW_UNION_in_queryOperator9605); 
            stream_KW_UNION.add(KW_UNION582);

            KW_ALL583=(Token)input.LT(1);
            match(input,KW_ALL,FOLLOW_KW_ALL_in_queryOperator9607); 
            stream_KW_ALL.add(KW_ALL583);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1349:23: -> ^( TOK_UNION )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1349:26: ^( TOK_UNION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_UNION, "TOK_UNION"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryOperator

    public static class queryStatementExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryStatementExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1353:1: queryStatementExpression : queryStatement ( queryOperator queryStatement )* ;
    public final queryStatementExpression_return queryStatementExpression() throws RecognitionException {
        queryStatementExpression_return retval = new queryStatementExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        queryStatement_return queryStatement584 = null;

        queryOperator_return queryOperator585 = null;

        queryStatement_return queryStatement586 = null;



        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1354:5: ( queryStatement ( queryOperator queryStatement )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1354:7: queryStatement ( queryOperator queryStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_queryStatement_in_queryStatementExpression9631);
            queryStatement584=queryStatement();
            _fsp--;

            adaptor.addChild(root_0, queryStatement584.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1354:22: ( queryOperator queryStatement )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==KW_UNION) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1354:23: queryOperator queryStatement
            	    {
            	    pushFollow(FOLLOW_queryOperator_in_queryStatementExpression9634);
            	    queryOperator585=queryOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(queryOperator585.getTree(), root_0);
            	    pushFollow(FOLLOW_queryStatement_in_queryStatementExpression9637);
            	    queryStatement586=queryStatement();
            	    _fsp--;

            	    adaptor.addChild(root_0, queryStatement586.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryStatementExpression

    public static class queryStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1357:1: queryStatement : ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body );
    public final queryStatement_return queryStatement() throws RecognitionException {
        queryStatement_return retval = new queryStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        List list_b=null;
        fromClause_return fromClause587 = null;

        regular_body_return regular_body588 = null;

        RuleReturnScope b = null;
        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1358:5: ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==KW_FROM) ) {
                alt160=1;
            }
            else if ( (LA160_0==KW_SELECT||LA160_0==KW_MAP||LA160_0==KW_INSERT||LA160_0==KW_REDUCE) ) {
                alt160=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1357:1: queryStatement : ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body );", 160, 0, input);

                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1359:5: fromClause (b+= body )+
                    {
                    pushFollow(FOLLOW_fromClause_in_queryStatement9660);
                    fromClause587=fromClause();
                    _fsp--;

                    stream_fromClause.add(fromClause587.getTree());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1360:5: (b+= body )+
                    int cnt159=0;
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==KW_SELECT||LA159_0==KW_MAP||LA159_0==KW_INSERT||LA159_0==KW_REDUCE) ) {
                            alt159=1;
                        }


                        switch (alt159) {
                    	case 1 :
                    	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1360:7: b+= body
                    	    {
                    	    pushFollow(FOLLOW_body_in_queryStatement9670);
                    	    b=body();
                    	    _fsp--;

                    	    stream_body.add(b.getTree());
                    	    if (list_b==null) list_b=new ArrayList();
                    	    list_b.add(b);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt159 >= 1 ) break loop159;
                                EarlyExitException eee =
                                    new EarlyExitException(159, input);
                                throw eee;
                        }
                        cnt159++;
                    } while (true);


                    // AST REWRITE
                    // elements: body, fromClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1360:18: -> ^( TOK_QUERY fromClause ( body )+ )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1360:21: ^( TOK_QUERY fromClause ( body )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);

                        adaptor.addChild(root_1, stream_fromClause.next());
                        if ( !(stream_body.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_body.hasNext() ) {
                            adaptor.addChild(root_1, stream_body.next());

                        }
                        stream_body.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1361:7: regular_body
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_regular_body_in_queryStatement9692);
                    regular_body588=regular_body();
                    _fsp--;

                    adaptor.addChild(root_0, regular_body588.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryStatement

    public static class regular_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start regular_body
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1364:1: regular_body : ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement );
    public final regular_body_return regular_body() throws RecognitionException {
        regular_body_return retval = new regular_body_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        insertClause_return insertClause589 = null;

        selectClause_return selectClause590 = null;

        fromClause_return fromClause591 = null;

        whereClause_return whereClause592 = null;

        groupByClause_return groupByClause593 = null;

        havingClause_return havingClause594 = null;

        orderByClause_return orderByClause595 = null;

        clusterByClause_return clusterByClause596 = null;

        distributeByClause_return distributeByClause597 = null;

        sortByClause_return sortByClause598 = null;

        limitClause_return limitClause599 = null;

        selectStatement_return selectStatement600 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1365:4: ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==KW_INSERT) ) {
                alt169=1;
            }
            else if ( (LA169_0==KW_SELECT||LA169_0==KW_MAP||LA169_0==KW_REDUCE) ) {
                alt169=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1364:1: regular_body : ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement );", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1366:4: insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_insertClause_in_regular_body9711);
                    insertClause589=insertClause();
                    _fsp--;

                    stream_insertClause.add(insertClause589.getTree());
                    pushFollow(FOLLOW_selectClause_in_regular_body9716);
                    selectClause590=selectClause();
                    _fsp--;

                    stream_selectClause.add(selectClause590.getTree());
                    pushFollow(FOLLOW_fromClause_in_regular_body9721);
                    fromClause591=fromClause();
                    _fsp--;

                    stream_fromClause.add(fromClause591.getTree());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1369:4: ( whereClause )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==KW_WHERE) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1369:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_regular_body9726);
                            whereClause592=whereClause();
                            _fsp--;

                            stream_whereClause.add(whereClause592.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1370:4: ( groupByClause )?
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==KW_GROUP) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1370:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_regular_body9732);
                            groupByClause593=groupByClause();
                            _fsp--;

                            stream_groupByClause.add(groupByClause593.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1371:4: ( havingClause )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==KW_HAVING) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1371:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_regular_body9738);
                            havingClause594=havingClause();
                            _fsp--;

                            stream_havingClause.add(havingClause594.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1372:4: ( orderByClause )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==KW_ORDER) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1372:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_regular_body9744);
                            orderByClause595=orderByClause();
                            _fsp--;

                            stream_orderByClause.add(orderByClause595.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1373:4: ( clusterByClause )?
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==KW_CLUSTER) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1373:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_regular_body9750);
                            clusterByClause596=clusterByClause();
                            _fsp--;

                            stream_clusterByClause.add(clusterByClause596.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1374:4: ( distributeByClause )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==KW_DISTRIBUTE) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1374:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_regular_body9756);
                            distributeByClause597=distributeByClause();
                            _fsp--;

                            stream_distributeByClause.add(distributeByClause597.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1375:4: ( sortByClause )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==KW_SORT) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1375:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_regular_body9762);
                            sortByClause598=sortByClause();
                            _fsp--;

                            stream_sortByClause.add(sortByClause598.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1376:4: ( limitClause )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==KW_LIMIT) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1376:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_regular_body9768);
                            limitClause599=limitClause();
                            _fsp--;

                            stream_limitClause.add(limitClause599.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: havingClause, fromClause, distributeByClause, limitClause, selectClause, whereClause, clusterByClause, groupByClause, sortByClause, orderByClause, insertClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1376:17: -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1376:20: ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);

                        adaptor.addChild(root_1, stream_fromClause.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1376:43: ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);

                        adaptor.addChild(root_2, stream_insertClause.next());
                        adaptor.addChild(root_2, stream_selectClause.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1377:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_whereClause.next());

                        }
                        stream_whereClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1377:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_groupByClause.next());

                        }
                        stream_groupByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1377:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_havingClause.next());

                        }
                        stream_havingClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1377:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_orderByClause.next());

                        }
                        stream_orderByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1377:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_clusterByClause.next());

                        }
                        stream_clusterByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1378:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_distributeByClause.next());

                        }
                        stream_distributeByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1378:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_sortByClause.next());

                        }
                        stream_sortByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1378:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_limitClause.next());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1380:4: selectStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectStatement_in_regular_body9861);
                    selectStatement600=selectStatement();
                    _fsp--;

                    adaptor.addChild(root_0, selectStatement600.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end regular_body

    public static class selectStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectStatement
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1383:1: selectStatement : selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) ;
    public final selectStatement_return selectStatement() throws RecognitionException {
        selectStatement_return retval = new selectStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        selectClause_return selectClause601 = null;

        fromClause_return fromClause602 = null;

        whereClause_return whereClause603 = null;

        groupByClause_return groupByClause604 = null;

        havingClause_return havingClause605 = null;

        orderByClause_return orderByClause606 = null;

        clusterByClause_return clusterByClause607 = null;

        distributeByClause_return distributeByClause608 = null;

        sortByClause_return sortByClause609 = null;

        limitClause_return limitClause610 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1384:4: ( selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1385:4: selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
            {
            pushFollow(FOLLOW_selectClause_in_selectStatement9879);
            selectClause601=selectClause();
            _fsp--;

            stream_selectClause.add(selectClause601.getTree());
            pushFollow(FOLLOW_fromClause_in_selectStatement9884);
            fromClause602=fromClause();
            _fsp--;

            stream_fromClause.add(fromClause602.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1387:4: ( whereClause )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==KW_WHERE) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1387:4: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_selectStatement9889);
                    whereClause603=whereClause();
                    _fsp--;

                    stream_whereClause.add(whereClause603.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1388:4: ( groupByClause )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==KW_GROUP) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1388:4: groupByClause
                    {
                    pushFollow(FOLLOW_groupByClause_in_selectStatement9895);
                    groupByClause604=groupByClause();
                    _fsp--;

                    stream_groupByClause.add(groupByClause604.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1389:4: ( havingClause )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==KW_HAVING) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1389:4: havingClause
                    {
                    pushFollow(FOLLOW_havingClause_in_selectStatement9901);
                    havingClause605=havingClause();
                    _fsp--;

                    stream_havingClause.add(havingClause605.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1390:4: ( orderByClause )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==KW_ORDER) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1390:4: orderByClause
                    {
                    pushFollow(FOLLOW_orderByClause_in_selectStatement9907);
                    orderByClause606=orderByClause();
                    _fsp--;

                    stream_orderByClause.add(orderByClause606.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1391:4: ( clusterByClause )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==KW_CLUSTER) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1391:4: clusterByClause
                    {
                    pushFollow(FOLLOW_clusterByClause_in_selectStatement9913);
                    clusterByClause607=clusterByClause();
                    _fsp--;

                    stream_clusterByClause.add(clusterByClause607.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1392:4: ( distributeByClause )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==KW_DISTRIBUTE) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1392:4: distributeByClause
                    {
                    pushFollow(FOLLOW_distributeByClause_in_selectStatement9919);
                    distributeByClause608=distributeByClause();
                    _fsp--;

                    stream_distributeByClause.add(distributeByClause608.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1393:4: ( sortByClause )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==KW_SORT) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1393:4: sortByClause
                    {
                    pushFollow(FOLLOW_sortByClause_in_selectStatement9925);
                    sortByClause609=sortByClause();
                    _fsp--;

                    stream_sortByClause.add(sortByClause609.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1394:4: ( limitClause )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==KW_LIMIT) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1394:4: limitClause
                    {
                    pushFollow(FOLLOW_limitClause_in_selectStatement9931);
                    limitClause610=limitClause();
                    _fsp--;

                    stream_limitClause.add(limitClause610.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: sortByClause, limitClause, clusterByClause, havingClause, whereClause, distributeByClause, orderByClause, fromClause, groupByClause, selectClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1394:17: -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1394:20: ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);

                adaptor.addChild(root_1, stream_fromClause.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1394:43: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);

                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1394:56: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);

                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1394:74: ^( TOK_DIR TOK_TMP_FILE )
                {
                CommonTree root_4 = (CommonTree)adaptor.nil();
                root_4 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DIR, "TOK_DIR"), root_4);

                adaptor.addChild(root_4, adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_2, stream_selectClause.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1395:35: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_whereClause.next());

                }
                stream_whereClause.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1395:48: ( groupByClause )?
                if ( stream_groupByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_groupByClause.next());

                }
                stream_groupByClause.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1395:63: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_havingClause.next());

                }
                stream_havingClause.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1395:77: ( orderByClause )?
                if ( stream_orderByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_orderByClause.next());

                }
                stream_orderByClause.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1395:92: ( clusterByClause )?
                if ( stream_clusterByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_clusterByClause.next());

                }
                stream_clusterByClause.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1396:22: ( distributeByClause )?
                if ( stream_distributeByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_distributeByClause.next());

                }
                stream_distributeByClause.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1396:42: ( sortByClause )?
                if ( stream_sortByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_sortByClause.next());

                }
                stream_sortByClause.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1396:56: ( limitClause )?
                if ( stream_limitClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_limitClause.next());

                }
                stream_limitClause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectStatement

    public static class body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start body
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1400:1: body : ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) );
    public final body_return body() throws RecognitionException {
        body_return retval = new body_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        insertClause_return insertClause611 = null;

        selectClause_return selectClause612 = null;

        whereClause_return whereClause613 = null;

        groupByClause_return groupByClause614 = null;

        havingClause_return havingClause615 = null;

        orderByClause_return orderByClause616 = null;

        clusterByClause_return clusterByClause617 = null;

        distributeByClause_return distributeByClause618 = null;

        sortByClause_return sortByClause619 = null;

        limitClause_return limitClause620 = null;

        selectClause_return selectClause621 = null;

        whereClause_return whereClause622 = null;

        groupByClause_return groupByClause623 = null;

        havingClause_return havingClause624 = null;

        orderByClause_return orderByClause625 = null;

        clusterByClause_return clusterByClause626 = null;

        distributeByClause_return distributeByClause627 = null;

        sortByClause_return sortByClause628 = null;

        limitClause_return limitClause629 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1401:4: ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==KW_INSERT) ) {
                alt194=1;
            }
            else if ( (LA194_0==KW_SELECT||LA194_0==KW_MAP||LA194_0==KW_REDUCE) ) {
                alt194=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1400:1: body : ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) );", 194, 0, input);

                throw nvae;
            }
            switch (alt194) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1402:4: insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_insertClause_in_body10041);
                    insertClause611=insertClause();
                    _fsp--;

                    stream_insertClause.add(insertClause611.getTree());
                    pushFollow(FOLLOW_selectClause_in_body10046);
                    selectClause612=selectClause();
                    _fsp--;

                    stream_selectClause.add(selectClause612.getTree());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1404:4: ( whereClause )?
                    int alt178=2;
                    int LA178_0 = input.LA(1);

                    if ( (LA178_0==KW_WHERE) ) {
                        alt178=1;
                    }
                    switch (alt178) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1404:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body10051);
                            whereClause613=whereClause();
                            _fsp--;

                            stream_whereClause.add(whereClause613.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1405:4: ( groupByClause )?
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==KW_GROUP) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1405:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body10057);
                            groupByClause614=groupByClause();
                            _fsp--;

                            stream_groupByClause.add(groupByClause614.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1406:4: ( havingClause )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==KW_HAVING) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1406:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body10063);
                            havingClause615=havingClause();
                            _fsp--;

                            stream_havingClause.add(havingClause615.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1407:4: ( orderByClause )?
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==KW_ORDER) ) {
                        alt181=1;
                    }
                    switch (alt181) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1407:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body10069);
                            orderByClause616=orderByClause();
                            _fsp--;

                            stream_orderByClause.add(orderByClause616.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1408:4: ( clusterByClause )?
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==KW_CLUSTER) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1408:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body10075);
                            clusterByClause617=clusterByClause();
                            _fsp--;

                            stream_clusterByClause.add(clusterByClause617.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1409:4: ( distributeByClause )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==KW_DISTRIBUTE) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1409:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body10081);
                            distributeByClause618=distributeByClause();
                            _fsp--;

                            stream_distributeByClause.add(distributeByClause618.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1410:4: ( sortByClause )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==KW_SORT) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1410:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body10087);
                            sortByClause619=sortByClause();
                            _fsp--;

                            stream_sortByClause.add(sortByClause619.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1411:4: ( limitClause )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==KW_LIMIT) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1411:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body10093);
                            limitClause620=limitClause();
                            _fsp--;

                            stream_limitClause.add(limitClause620.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: whereClause, distributeByClause, havingClause, sortByClause, orderByClause, clusterByClause, selectClause, limitClause, insertClause, groupByClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1411:17: -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1411:20: ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1411:33: ( insertClause )?
                        if ( stream_insertClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_insertClause.next());

                        }
                        stream_insertClause.reset();
                        adaptor.addChild(root_1, stream_selectClause.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1412:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.next());

                        }
                        stream_whereClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1412:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.next());

                        }
                        stream_groupByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1412:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.next());

                        }
                        stream_havingClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1412:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.next());

                        }
                        stream_orderByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1412:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.next());

                        }
                        stream_clusterByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1413:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.next());

                        }
                        stream_distributeByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1413:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.next());

                        }
                        stream_sortByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1413:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.next());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1415:4: selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_selectClause_in_body10181);
                    selectClause621=selectClause();
                    _fsp--;

                    stream_selectClause.add(selectClause621.getTree());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1416:4: ( whereClause )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==KW_WHERE) ) {
                        alt186=1;
                    }
                    switch (alt186) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1416:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body10186);
                            whereClause622=whereClause();
                            _fsp--;

                            stream_whereClause.add(whereClause622.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1417:4: ( groupByClause )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==KW_GROUP) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1417:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body10192);
                            groupByClause623=groupByClause();
                            _fsp--;

                            stream_groupByClause.add(groupByClause623.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1418:4: ( havingClause )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==KW_HAVING) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1418:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body10198);
                            havingClause624=havingClause();
                            _fsp--;

                            stream_havingClause.add(havingClause624.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1419:4: ( orderByClause )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==KW_ORDER) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1419:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body10204);
                            orderByClause625=orderByClause();
                            _fsp--;

                            stream_orderByClause.add(orderByClause625.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1420:4: ( clusterByClause )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==KW_CLUSTER) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1420:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body10210);
                            clusterByClause626=clusterByClause();
                            _fsp--;

                            stream_clusterByClause.add(clusterByClause626.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1421:4: ( distributeByClause )?
                    int alt191=2;
                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==KW_DISTRIBUTE) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1421:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body10216);
                            distributeByClause627=distributeByClause();
                            _fsp--;

                            stream_distributeByClause.add(distributeByClause627.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1422:4: ( sortByClause )?
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==KW_SORT) ) {
                        alt192=1;
                    }
                    switch (alt192) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1422:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body10222);
                            sortByClause628=sortByClause();
                            _fsp--;

                            stream_sortByClause.add(sortByClause628.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1423:4: ( limitClause )?
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==KW_LIMIT) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1423:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body10228);
                            limitClause629=limitClause();
                            _fsp--;

                            stream_limitClause.add(limitClause629.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: distributeByClause, orderByClause, clusterByClause, whereClause, limitClause, sortByClause, groupByClause, selectClause, havingClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1423:17: -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1423:20: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1423:33: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_2);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1423:51: ^( TOK_DIR TOK_TMP_FILE )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DIR, "TOK_DIR"), root_3);

                        adaptor.addChild(root_3, adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_selectClause.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1424:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.next());

                        }
                        stream_whereClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1424:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.next());

                        }
                        stream_groupByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1424:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.next());

                        }
                        stream_havingClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1424:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.next());

                        }
                        stream_orderByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1424:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.next());

                        }
                        stream_clusterByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1425:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.next());

                        }
                        stream_distributeByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1425:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.next());

                        }
                        stream_sortByClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1425:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.next());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end body

    public static class insertClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start insertClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1428:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO ^( tableOrPartition ) ) );
    public final insertClause_return insertClause() throws RecognitionException {
        insertClause_return retval = new insertClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_INSERT630=null;
        Token KW_OVERWRITE631=null;
        Token KW_INSERT634=null;
        Token KW_INTO635=null;
        Token KW_TABLE636=null;
        destination_return destination632 = null;

        ifNotExists_return ifNotExists633 = null;

        tableOrPartition_return tableOrPartition637 = null;


        CommonTree KW_INSERT630_tree=null;
        CommonTree KW_OVERWRITE631_tree=null;
        CommonTree KW_INSERT634_tree=null;
        CommonTree KW_INTO635_tree=null;
        CommonTree KW_TABLE636_tree=null;
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_destination=new RewriteRuleSubtreeStream(adaptor,"rule destination");
         msgs.push("insert clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1431:4: ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO ^( tableOrPartition ) ) )
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==KW_INSERT) ) {
                int LA196_1 = input.LA(2);

                if ( (LA196_1==KW_INTO) ) {
                    alt196=2;
                }
                else if ( (LA196_1==KW_OVERWRITE) ) {
                    alt196=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1428:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO ^( tableOrPartition ) ) );", 196, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1428:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO ^( tableOrPartition ) ) );", 196, 0, input);

                throw nvae;
            }
            switch (alt196) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1432:6: KW_INSERT KW_OVERWRITE destination ( ifNotExists )?
                    {
                    KW_INSERT630=(Token)input.LT(1);
                    match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause10343); 
                    stream_KW_INSERT.add(KW_INSERT630);

                    KW_OVERWRITE631=(Token)input.LT(1);
                    match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_insertClause10345); 
                    stream_KW_OVERWRITE.add(KW_OVERWRITE631);

                    pushFollow(FOLLOW_destination_in_insertClause10347);
                    destination632=destination();
                    _fsp--;

                    stream_destination.add(destination632.getTree());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1432:41: ( ifNotExists )?
                    int alt195=2;
                    int LA195_0 = input.LA(1);

                    if ( (LA195_0==KW_IF) ) {
                        alt195=1;
                    }
                    switch (alt195) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1432:41: ifNotExists
                            {
                            pushFollow(FOLLOW_ifNotExists_in_insertClause10349);
                            ifNotExists633=ifNotExists();
                            _fsp--;

                            stream_ifNotExists.add(ifNotExists633.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: destination, ifNotExists
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1432:54: -> ^( TOK_DESTINATION destination ( ifNotExists )? )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1432:57: ^( TOK_DESTINATION destination ( ifNotExists )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_1);

                        adaptor.addChild(root_1, stream_destination.next());
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1432:87: ( ifNotExists )?
                        if ( stream_ifNotExists.hasNext() ) {
                            adaptor.addChild(root_1, stream_ifNotExists.next());

                        }
                        stream_ifNotExists.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1433:6: KW_INSERT KW_INTO KW_TABLE tableOrPartition
                    {
                    KW_INSERT634=(Token)input.LT(1);
                    match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause10368); 
                    stream_KW_INSERT.add(KW_INSERT634);

                    KW_INTO635=(Token)input.LT(1);
                    match(input,KW_INTO,FOLLOW_KW_INTO_in_insertClause10370); 
                    stream_KW_INTO.add(KW_INTO635);

                    KW_TABLE636=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_insertClause10372); 
                    stream_KW_TABLE.add(KW_TABLE636);

                    pushFollow(FOLLOW_tableOrPartition_in_insertClause10374);
                    tableOrPartition637=tableOrPartition();
                    _fsp--;

                    stream_tableOrPartition.add(tableOrPartition637.getTree());

                    // AST REWRITE
                    // elements: tableOrPartition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1434:8: -> ^( TOK_INSERT_INTO ^( tableOrPartition ) )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1434:11: ^( TOK_INSERT_INTO ^( tableOrPartition ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT_INTO, "TOK_INSERT_INTO"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1434:29: ^( tableOrPartition )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_tableOrPartition.nextNode(), root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end insertClause

    public static class destination_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start destination
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1437:1: destination : ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> ^( tableOrPartition ) );
    public final destination_return destination() throws RecognitionException {
        destination_return retval = new destination_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_LOCAL638=null;
        Token KW_DIRECTORY639=null;
        Token StringLiteral640=null;
        Token KW_DIRECTORY641=null;
        Token StringLiteral642=null;
        Token KW_TABLE643=null;
        tableOrPartition_return tableOrPartition644 = null;


        CommonTree KW_LOCAL638_tree=null;
        CommonTree KW_DIRECTORY639_tree=null;
        CommonTree StringLiteral640_tree=null;
        CommonTree KW_DIRECTORY641_tree=null;
        CommonTree StringLiteral642_tree=null;
        CommonTree KW_TABLE643_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORY");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         msgs.push("destination specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1440:4: ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> ^( tableOrPartition ) )
            int alt197=3;
            switch ( input.LA(1) ) {
            case KW_LOCAL:
                {
                alt197=1;
                }
                break;
            case KW_DIRECTORY:
                {
                alt197=2;
                }
                break;
            case KW_TABLE:
                {
                alt197=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1437:1: destination : ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> ^( tableOrPartition ) );", 197, 0, input);

                throw nvae;
            }

            switch (alt197) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1441:6: KW_LOCAL KW_DIRECTORY StringLiteral
                    {
                    KW_LOCAL638=(Token)input.LT(1);
                    match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_destination10421); 
                    stream_KW_LOCAL.add(KW_LOCAL638);

                    KW_DIRECTORY639=(Token)input.LT(1);
                    match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination10423); 
                    stream_KW_DIRECTORY.add(KW_DIRECTORY639);

                    StringLiteral640=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_destination10425); 
                    stream_StringLiteral.add(StringLiteral640);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1441:42: -> ^( TOK_LOCAL_DIR StringLiteral )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1441:45: ^( TOK_LOCAL_DIR StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LOCAL_DIR, "TOK_LOCAL_DIR"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1442:6: KW_DIRECTORY StringLiteral
                    {
                    KW_DIRECTORY641=(Token)input.LT(1);
                    match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination10440); 
                    stream_KW_DIRECTORY.add(KW_DIRECTORY641);

                    StringLiteral642=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_destination10442); 
                    stream_StringLiteral.add(StringLiteral642);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1442:33: -> ^( TOK_DIR StringLiteral )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1442:36: ^( TOK_DIR StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DIR, "TOK_DIR"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1443:6: KW_TABLE tableOrPartition
                    {
                    KW_TABLE643=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_destination10457); 
                    stream_KW_TABLE.add(KW_TABLE643);

                    pushFollow(FOLLOW_tableOrPartition_in_destination10459);
                    tableOrPartition644=tableOrPartition();
                    _fsp--;

                    stream_tableOrPartition.add(tableOrPartition644.getTree());

                    // AST REWRITE
                    // elements: tableOrPartition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1443:32: -> ^( tableOrPartition )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1443:35: ^( tableOrPartition )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_tableOrPartition.nextNode(), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end destination

    public static class limitClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start limitClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1446:1: limitClause : KW_LIMIT num= Number -> ^( TOK_LIMIT $num) ;
    public final limitClause_return limitClause() throws RecognitionException {
        limitClause_return retval = new limitClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token num=null;
        Token KW_LIMIT645=null;

        CommonTree num_tree=null;
        CommonTree KW_LIMIT645_tree=null;
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");

         msgs.push("limit clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1449:4: ( KW_LIMIT num= Number -> ^( TOK_LIMIT $num) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1450:4: KW_LIMIT num= Number
            {
            KW_LIMIT645=(Token)input.LT(1);
            match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause10493); 
            stream_KW_LIMIT.add(KW_LIMIT645);

            num=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_limitClause10497); 
            stream_Number.add(num);


            // AST REWRITE
            // elements: num
            // token labels: num
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1450:24: -> ^( TOK_LIMIT $num)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1450:27: ^( TOK_LIMIT $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LIMIT, "TOK_LIMIT"), root_1);

                adaptor.addChild(root_1, stream_num.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end limitClause

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1455:1: selectClause : ( KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) );
    public final selectClause_return selectClause() throws RecognitionException {
        selectClause_return retval = new selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token dist=null;
        Token transform=null;
        Token KW_SELECT646=null;
        Token KW_ALL648=null;
        hintClause_return hintClause647 = null;

        selectList_return selectList649 = null;

        selectTrfmClause_return selectTrfmClause650 = null;

        trfmClause_return trfmClause651 = null;


        CommonTree dist_tree=null;
        CommonTree transform_tree=null;
        CommonTree KW_SELECT646_tree=null;
        CommonTree KW_ALL648_tree=null;
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
        RewriteRuleTokenStream stream_KW_TRANSFORM=new RewriteRuleTokenStream(adaptor,"token KW_TRANSFORM");
        RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
        RewriteRuleSubtreeStream stream_selectList=new RewriteRuleSubtreeStream(adaptor,"rule selectList");
        RewriteRuleSubtreeStream stream_hintClause=new RewriteRuleSubtreeStream(adaptor,"rule hintClause");
        RewriteRuleSubtreeStream stream_trfmClause=new RewriteRuleSubtreeStream(adaptor,"rule trfmClause");
        RewriteRuleSubtreeStream stream_selectTrfmClause=new RewriteRuleSubtreeStream(adaptor,"rule selectTrfmClause");
         msgs.push("select clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1458:5: ( KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) )
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==KW_SELECT) ) {
                alt201=1;
            }
            else if ( (LA201_0==KW_MAP||LA201_0==KW_REDUCE) ) {
                alt201=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1455:1: selectClause : ( KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) );", 201, 0, input);

                throw nvae;
            }
            switch (alt201) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1459:5: KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )
                    {
                    KW_SELECT646=(Token)input.LT(1);
                    match(input,KW_SELECT,FOLLOW_KW_SELECT_in_selectClause10538); 
                    stream_KW_SELECT.add(KW_SELECT646);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1459:15: ( hintClause )?
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==DIVIDE) ) {
                        alt198=1;
                    }
                    switch (alt198) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1459:15: hintClause
                            {
                            pushFollow(FOLLOW_hintClause_in_selectClause10540);
                            hintClause647=hintClause();
                            _fsp--;

                            stream_hintClause.add(hintClause647.getTree());

                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1459:27: ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )
                    int alt200=2;
                    int LA200_0 = input.LA(1);

                    if ( (LA200_0==StringLiteral||LA200_0==KW_IF||LA200_0==KW_NOT||LA200_0==Identifier||LA200_0==LPAREN||LA200_0==KW_ALL||LA200_0==Number||LA200_0==KW_MAP||LA200_0==KW_ARRAY||(LA200_0>=KW_STRUCT && LA200_0<=KW_UNIONTYPE)||LA200_0==KW_DISTINCT||(LA200_0>=STAR && LA200_0<=PLUS)||(LA200_0>=KW_CAST && LA200_0<=KW_CASE)||(LA200_0>=BigintLiteral && LA200_0<=CharSetName)||LA200_0==KW_NULL||(LA200_0>=MINUS && LA200_0<=TILDE)||(LA200_0>=KW_TRUE && LA200_0<=KW_FALSE)) ) {
                        alt200=1;
                    }
                    else if ( (LA200_0==KW_TRANSFORM) ) {
                        alt200=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1459:27: ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )", 200, 0, input);

                        throw nvae;
                    }
                    switch (alt200) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1459:28: ( ( KW_ALL | dist= KW_DISTINCT )? selectList )
                            {
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1459:28: ( ( KW_ALL | dist= KW_DISTINCT )? selectList )
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1459:29: ( KW_ALL | dist= KW_DISTINCT )? selectList
                            {
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1459:29: ( KW_ALL | dist= KW_DISTINCT )?
                            int alt199=3;
                            int LA199_0 = input.LA(1);

                            if ( (LA199_0==KW_ALL) ) {
                                alt199=1;
                            }
                            else if ( (LA199_0==KW_DISTINCT) ) {
                                alt199=2;
                            }
                            switch (alt199) {
                                case 1 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1459:30: KW_ALL
                                    {
                                    KW_ALL648=(Token)input.LT(1);
                                    match(input,KW_ALL,FOLLOW_KW_ALL_in_selectClause10546); 
                                    stream_KW_ALL.add(KW_ALL648);


                                    }
                                    break;
                                case 2 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1459:39: dist= KW_DISTINCT
                                    {
                                    dist=(Token)input.LT(1);
                                    match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_selectClause10552); 
                                    stream_KW_DISTINCT.add(dist);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_selectList_in_selectClause10556);
                            selectList649=selectList();
                            _fsp--;

                            stream_selectList.add(selectList649.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1460:29: (transform= KW_TRANSFORM selectTrfmClause )
                            {
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1460:29: (transform= KW_TRANSFORM selectTrfmClause )
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1460:30: transform= KW_TRANSFORM selectTrfmClause
                            {
                            transform=(Token)input.LT(1);
                            match(input,KW_TRANSFORM,FOLLOW_KW_TRANSFORM_in_selectClause10590); 
                            stream_KW_TRANSFORM.add(transform);

                            pushFollow(FOLLOW_selectTrfmClause_in_selectClause10592);
                            selectTrfmClause650=selectTrfmClause();
                            _fsp--;

                            stream_selectTrfmClause.add(selectTrfmClause650.getTree());

                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: hintClause, selectList, selectList, selectTrfmClause, hintClause, hintClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1461:6: -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList )
                    if (transform == null && dist == null) {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1461:48: ^( TOK_SELECT ( hintClause )? selectList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1461:61: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.next());

                        }
                        stream_hintClause.reset();
                        adaptor.addChild(root_1, stream_selectList.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1462:6: -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList )
                    if (transform == null && dist != null) {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1462:48: ^( TOK_SELECTDI ( hintClause )? selectList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECTDI, "TOK_SELECTDI"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1462:63: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.next());

                        }
                        stream_hintClause.reset();
                        adaptor.addChild(root_1, stream_selectList.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1463:6: -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1463:9: ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1463:22: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.next());

                        }
                        stream_hintClause.reset();
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1463:34: ^( TOK_SELEXPR selectTrfmClause )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_2);

                        adaptor.addChild(root_2, stream_selectTrfmClause.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1465:5: trfmClause
                    {
                    pushFollow(FOLLOW_trfmClause_in_selectClause10663);
                    trfmClause651=trfmClause();
                    _fsp--;

                    stream_trfmClause.add(trfmClause651.getTree());

                    // AST REWRITE
                    // elements: trfmClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1465:17: -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1465:19: ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);

                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1465:32: ^( TOK_SELEXPR trfmClause )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_2);

                        adaptor.addChild(root_2, stream_trfmClause.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectClause

    public static class selectList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1468:1: selectList : selectItem ( COMMA selectItem )* -> ( selectItem )+ ;
    public final selectList_return selectList() throws RecognitionException {
        selectList_return retval = new selectList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA653=null;
        selectItem_return selectItem652 = null;

        selectItem_return selectItem654 = null;


        CommonTree COMMA653_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_selectItem=new RewriteRuleSubtreeStream(adaptor,"rule selectItem");
         msgs.push("select list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1471:5: ( selectItem ( COMMA selectItem )* -> ( selectItem )+ )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1472:5: selectItem ( COMMA selectItem )*
            {
            pushFollow(FOLLOW_selectItem_in_selectList10706);
            selectItem652=selectItem();
            _fsp--;

            stream_selectItem.add(selectItem652.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1472:16: ( COMMA selectItem )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==COMMA) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1472:18: COMMA selectItem
            	    {
            	    COMMA653=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_selectList10710); 
            	    stream_COMMA.add(COMMA653);

            	    pushFollow(FOLLOW_selectItem_in_selectList10713);
            	    selectItem654=selectItem();
            	    _fsp--;

            	    stream_selectItem.add(selectItem654.getTree());

            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);


            // AST REWRITE
            // elements: selectItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1472:39: -> ( selectItem )+
            {
                if ( !(stream_selectItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_selectItem.hasNext() ) {
                    adaptor.addChild(root_0, stream_selectItem.next());

                }
                stream_selectItem.reset();

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectList

    public static class selectTrfmClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectTrfmClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1475:1: selectTrfmClause : LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) ;
    public final selectTrfmClause_return selectTrfmClause() throws RecognitionException {
        selectTrfmClause_return retval = new selectTrfmClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN655=null;
        Token RPAREN657=null;
        Token KW_USING658=null;
        Token StringLiteral659=null;
        Token KW_AS660=null;
        Token LPAREN661=null;
        Token RPAREN664=null;
        rowFormat_return inSerde = null;

        recordWriter_return inRec = null;

        rowFormat_return outSerde = null;

        recordReader_return outRec = null;

        selectExpressionList_return selectExpressionList656 = null;

        aliasList_return aliasList662 = null;

        columnNameTypeList_return columnNameTypeList663 = null;

        aliasList_return aliasList665 = null;

        columnNameTypeList_return columnNameTypeList666 = null;


        CommonTree LPAREN655_tree=null;
        CommonTree RPAREN657_tree=null;
        CommonTree KW_USING658_tree=null;
        CommonTree StringLiteral659_tree=null;
        CommonTree KW_AS660_tree=null;
        CommonTree LPAREN661_tree=null;
        CommonTree RPAREN664_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_rowFormat=new RewriteRuleSubtreeStream(adaptor,"rule rowFormat");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_recordReader=new RewriteRuleSubtreeStream(adaptor,"rule recordReader");
        RewriteRuleSubtreeStream stream_aliasList=new RewriteRuleSubtreeStream(adaptor,"rule aliasList");
        RewriteRuleSubtreeStream stream_selectExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule selectExpressionList");
        RewriteRuleSubtreeStream stream_recordWriter=new RewriteRuleSubtreeStream(adaptor,"rule recordWriter");
         msgs.push("transform clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1478:5: ( LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1479:5: LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader
            {
            LPAREN655=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_selectTrfmClause10752); 
            stream_LPAREN.add(LPAREN655);

            pushFollow(FOLLOW_selectExpressionList_in_selectTrfmClause10754);
            selectExpressionList656=selectExpressionList();
            _fsp--;

            stream_selectExpressionList.add(selectExpressionList656.getTree());
            RPAREN657=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_selectTrfmClause10756); 
            stream_RPAREN.add(RPAREN657);

            pushFollow(FOLLOW_rowFormat_in_selectTrfmClause10764);
            inSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(inSerde.getTree());
            pushFollow(FOLLOW_recordWriter_in_selectTrfmClause10768);
            inRec=recordWriter();
            _fsp--;

            stream_recordWriter.add(inRec.getTree());
            KW_USING658=(Token)input.LT(1);
            match(input,KW_USING,FOLLOW_KW_USING_in_selectTrfmClause10774); 
            stream_KW_USING.add(KW_USING658);

            StringLiteral659=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_selectTrfmClause10776); 
            stream_StringLiteral.add(StringLiteral659);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:5: ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==KW_AS) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:7: KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    {
                    KW_AS660=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_selectTrfmClause10784); 
                    stream_KW_AS.add(KW_AS660);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    int alt205=2;
                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==LPAREN) ) {
                        alt205=1;
                    }
                    else if ( (LA205_0==Identifier) ) {
                        alt205=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1482:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )", 205, 0, input);

                        throw nvae;
                    }
                    switch (alt205) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            {
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:15: LPAREN ( aliasList | columnNameTypeList ) RPAREN
                            {
                            LPAREN661=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_selectTrfmClause10788); 
                            stream_LPAREN.add(LPAREN661);

                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:22: ( aliasList | columnNameTypeList )
                            int alt203=2;
                            int LA203_0 = input.LA(1);

                            if ( (LA203_0==Identifier) ) {
                                int LA203_1 = input.LA(2);

                                if ( ((LA203_1>=RPAREN && LA203_1<=COMMA)) ) {
                                    alt203=1;
                                }
                                else if ( (LA203_1==KW_MAP||(LA203_1>=KW_TINYINT && LA203_1<=KW_ARRAY)||(LA203_1>=KW_STRUCT && LA203_1<=KW_UNIONTYPE)) ) {
                                    alt203=2;
                                }
                                else {
                                    NoViableAltException nvae =
                                        new NoViableAltException("1482:22: ( aliasList | columnNameTypeList )", 203, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1482:22: ( aliasList | columnNameTypeList )", 203, 0, input);

                                throw nvae;
                            }
                            switch (alt203) {
                                case 1 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:23: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_selectTrfmClause10791);
                                    aliasList662=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList662.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:35: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_selectTrfmClause10795);
                                    columnNameTypeList663=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList663.getTree());

                                    }
                                    break;

                            }

                            RPAREN664=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_selectTrfmClause10798); 
                            stream_RPAREN.add(RPAREN664);


                            }


                            }
                            break;
                        case 2 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:65: ( aliasList | columnNameTypeList )
                            {
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:65: ( aliasList | columnNameTypeList )
                            int alt204=2;
                            int LA204_0 = input.LA(1);

                            if ( (LA204_0==Identifier) ) {
                                switch ( input.LA(2) ) {
                                case KW_TINYINT:
                                case KW_SMALLINT:
                                case KW_INT:
                                case KW_BIGINT:
                                case KW_BOOLEAN:
                                case KW_FLOAT:
                                case KW_DOUBLE:
                                case KW_DATE:
                                case KW_DATETIME:
                                case KW_TIMESTAMP:
                                case KW_STRING:
                                case KW_BINARY:
                                case KW_ARRAY:
                                case KW_STRUCT:
                                case KW_UNIONTYPE:
                                    {
                                    alt204=2;
                                    }
                                    break;
                                case KW_MAP:
                                    {
                                    int LA204_16 = input.LA(3);

                                    if ( (LA204_16==LESSTHAN) ) {
                                        alt204=2;
                                    }
                                    else if ( (LA204_16==StringLiteral||LA204_16==KW_IF||LA204_16==KW_NOT||LA204_16==Identifier||LA204_16==LPAREN||LA204_16==Number||LA204_16==KW_MAP||LA204_16==KW_ARRAY||(LA204_16>=KW_STRUCT && LA204_16<=KW_UNIONTYPE)||(LA204_16>=STAR && LA204_16<=PLUS)||(LA204_16>=KW_CAST && LA204_16<=KW_CASE)||(LA204_16>=BigintLiteral && LA204_16<=CharSetName)||LA204_16==KW_NULL||(LA204_16>=MINUS && LA204_16<=TILDE)||(LA204_16>=KW_TRUE && LA204_16<=KW_FALSE)) ) {
                                        alt204=1;
                                    }
                                    else {
                                        NoViableAltException nvae =
                                            new NoViableAltException("1482:65: ( aliasList | columnNameTypeList )", 204, 16, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case EOF:
                                case KW_FROM:
                                case RPAREN:
                                case COMMA:
                                case KW_SELECT:
                                case KW_GROUP:
                                case KW_RECORDREADER:
                                case KW_ROW:
                                case KW_UNION:
                                case KW_INSERT:
                                case KW_LIMIT:
                                case KW_REDUCE:
                                case KW_WHERE:
                                case KW_HAVING:
                                case KW_ORDER:
                                case KW_CLUSTER:
                                case KW_DISTRIBUTE:
                                case KW_SORT:
                                    {
                                    alt204=1;
                                    }
                                    break;
                                default:
                                    NoViableAltException nvae =
                                        new NoViableAltException("1482:65: ( aliasList | columnNameTypeList )", 204, 1, input);

                                    throw nvae;
                                }

                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1482:65: ( aliasList | columnNameTypeList )", 204, 0, input);

                                throw nvae;
                            }
                            switch (alt204) {
                                case 1 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:66: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_selectTrfmClause10804);
                                    aliasList665=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList665.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1482:78: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_selectTrfmClause10808);
                                    columnNameTypeList666=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList666.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_rowFormat_in_selectTrfmClause10820);
            outSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(outSerde.getTree());
            pushFollow(FOLLOW_recordReader_in_selectTrfmClause10824);
            outRec=recordReader();
            _fsp--;

            stream_recordReader.add(outRec.getTree());

            // AST REWRITE
            // elements: selectExpressionList, outRec, StringLiteral, outSerde, inSerde, aliasList, inRec, columnNameTypeList
            // token labels: 
            // rule labels: retval, inRec, inSerde, outRec, outSerde
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_inRec=new RewriteRuleSubtreeStream(adaptor,"token inRec",inRec!=null?inRec.tree:null);
            RewriteRuleSubtreeStream stream_inSerde=new RewriteRuleSubtreeStream(adaptor,"token inSerde",inSerde!=null?inSerde.tree:null);
            RewriteRuleSubtreeStream stream_outRec=new RewriteRuleSubtreeStream(adaptor,"token outRec",outRec!=null?outRec.tree:null);
            RewriteRuleSubtreeStream stream_outSerde=new RewriteRuleSubtreeStream(adaptor,"token outSerde",outSerde!=null?outSerde.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1484:5: -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1484:8: ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TRANSFORM, "TOK_TRANSFORM"), root_1);

                adaptor.addChild(root_1, stream_selectExpressionList.next());
                adaptor.addChild(root_1, stream_inSerde.next());
                adaptor.addChild(root_1, stream_inRec.next());
                adaptor.addChild(root_1, stream_StringLiteral.next());
                adaptor.addChild(root_1, stream_outSerde.next());
                adaptor.addChild(root_1, stream_outRec.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1484:93: ( aliasList )?
                if ( stream_aliasList.hasNext() ) {
                    adaptor.addChild(root_1, stream_aliasList.next());

                }
                stream_aliasList.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1484:104: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.next());

                }
                stream_columnNameTypeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectTrfmClause

    public static class hintClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1487:1: hintClause : DIVIDE STAR PLUS hintList STAR DIVIDE -> ^( TOK_HINTLIST hintList ) ;
    public final hintClause_return hintClause() throws RecognitionException {
        hintClause_return retval = new hintClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DIVIDE667=null;
        Token STAR668=null;
        Token PLUS669=null;
        Token STAR671=null;
        Token DIVIDE672=null;
        hintList_return hintList670 = null;


        CommonTree DIVIDE667_tree=null;
        CommonTree STAR668_tree=null;
        CommonTree PLUS669_tree=null;
        CommonTree STAR671_tree=null;
        CommonTree DIVIDE672_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIVIDE=new RewriteRuleTokenStream(adaptor,"token DIVIDE");
        RewriteRuleSubtreeStream stream_hintList=new RewriteRuleSubtreeStream(adaptor,"rule hintList");
         msgs.push("hint clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1490:5: ( DIVIDE STAR PLUS hintList STAR DIVIDE -> ^( TOK_HINTLIST hintList ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1491:5: DIVIDE STAR PLUS hintList STAR DIVIDE
            {
            DIVIDE667=(Token)input.LT(1);
            match(input,DIVIDE,FOLLOW_DIVIDE_in_hintClause10887); 
            stream_DIVIDE.add(DIVIDE667);

            STAR668=(Token)input.LT(1);
            match(input,STAR,FOLLOW_STAR_in_hintClause10889); 
            stream_STAR.add(STAR668);

            PLUS669=(Token)input.LT(1);
            match(input,PLUS,FOLLOW_PLUS_in_hintClause10891); 
            stream_PLUS.add(PLUS669);

            pushFollow(FOLLOW_hintList_in_hintClause10893);
            hintList670=hintList();
            _fsp--;

            stream_hintList.add(hintList670.getTree());
            STAR671=(Token)input.LT(1);
            match(input,STAR,FOLLOW_STAR_in_hintClause10895); 
            stream_STAR.add(STAR671);

            DIVIDE672=(Token)input.LT(1);
            match(input,DIVIDE,FOLLOW_DIVIDE_in_hintClause10897); 
            stream_DIVIDE.add(DIVIDE672);


            // AST REWRITE
            // elements: hintList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1491:43: -> ^( TOK_HINTLIST hintList )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1491:46: ^( TOK_HINTLIST hintList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HINTLIST, "TOK_HINTLIST"), root_1);

                adaptor.addChild(root_1, stream_hintList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintClause

    public static class hintList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1494:1: hintList : hintItem ( COMMA hintItem )* -> ( hintItem )+ ;
    public final hintList_return hintList() throws RecognitionException {
        hintList_return retval = new hintList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA674=null;
        hintItem_return hintItem673 = null;

        hintItem_return hintItem675 = null;


        CommonTree COMMA674_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_hintItem=new RewriteRuleSubtreeStream(adaptor,"rule hintItem");
         msgs.push("hint list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1497:5: ( hintItem ( COMMA hintItem )* -> ( hintItem )+ )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1498:5: hintItem ( COMMA hintItem )*
            {
            pushFollow(FOLLOW_hintItem_in_hintList10936);
            hintItem673=hintItem();
            _fsp--;

            stream_hintItem.add(hintItem673.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1498:14: ( COMMA hintItem )*
            loop207:
            do {
                int alt207=2;
                int LA207_0 = input.LA(1);

                if ( (LA207_0==COMMA) ) {
                    alt207=1;
                }


                switch (alt207) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1498:15: COMMA hintItem
            	    {
            	    COMMA674=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_hintList10939); 
            	    stream_COMMA.add(COMMA674);

            	    pushFollow(FOLLOW_hintItem_in_hintList10941);
            	    hintItem675=hintItem();
            	    _fsp--;

            	    stream_hintItem.add(hintItem675.getTree());

            	    }
            	    break;

            	default :
            	    break loop207;
                }
            } while (true);


            // AST REWRITE
            // elements: hintItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1498:32: -> ( hintItem )+
            {
                if ( !(stream_hintItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_hintItem.hasNext() ) {
                    adaptor.addChild(root_0, stream_hintItem.next());

                }
                stream_hintItem.reset();

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintList

    public static class hintItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintItem
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1501:1: hintItem : hintName ( LPAREN hintArgs RPAREN )? -> ^( TOK_HINT hintName ( hintArgs )? ) ;
    public final hintItem_return hintItem() throws RecognitionException {
        hintItem_return retval = new hintItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN677=null;
        Token RPAREN679=null;
        hintName_return hintName676 = null;

        hintArgs_return hintArgs678 = null;


        CommonTree LPAREN677_tree=null;
        CommonTree RPAREN679_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_hintName=new RewriteRuleSubtreeStream(adaptor,"rule hintName");
        RewriteRuleSubtreeStream stream_hintArgs=new RewriteRuleSubtreeStream(adaptor,"rule hintArgs");
         msgs.push("hint item"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1504:5: ( hintName ( LPAREN hintArgs RPAREN )? -> ^( TOK_HINT hintName ( hintArgs )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1505:5: hintName ( LPAREN hintArgs RPAREN )?
            {
            pushFollow(FOLLOW_hintName_in_hintItem10979);
            hintName676=hintName();
            _fsp--;

            stream_hintName.add(hintName676.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1505:14: ( LPAREN hintArgs RPAREN )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==LPAREN) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1505:15: LPAREN hintArgs RPAREN
                    {
                    LPAREN677=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_hintItem10982); 
                    stream_LPAREN.add(LPAREN677);

                    pushFollow(FOLLOW_hintArgs_in_hintItem10984);
                    hintArgs678=hintArgs();
                    _fsp--;

                    stream_hintArgs.add(hintArgs678.getTree());
                    RPAREN679=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_hintItem10986); 
                    stream_RPAREN.add(RPAREN679);


                    }
                    break;

            }


            // AST REWRITE
            // elements: hintName, hintArgs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1505:40: -> ^( TOK_HINT hintName ( hintArgs )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1505:43: ^( TOK_HINT hintName ( hintArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HINT, "TOK_HINT"), root_1);

                adaptor.addChild(root_1, stream_hintName.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1505:63: ( hintArgs )?
                if ( stream_hintArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_hintArgs.next());

                }
                stream_hintArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintItem

    public static class hintName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintName
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1508:1: hintName : ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE | KW_HOLD_DDLTIME -> TOK_HOLD_DDLTIME );
    public final hintName_return hintName() throws RecognitionException {
        hintName_return retval = new hintName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_MAPJOIN680=null;
        Token KW_STREAMTABLE681=null;
        Token KW_HOLD_DDLTIME682=null;

        CommonTree KW_MAPJOIN680_tree=null;
        CommonTree KW_STREAMTABLE681_tree=null;
        CommonTree KW_HOLD_DDLTIME682_tree=null;
        RewriteRuleTokenStream stream_KW_HOLD_DDLTIME=new RewriteRuleTokenStream(adaptor,"token KW_HOLD_DDLTIME");
        RewriteRuleTokenStream stream_KW_MAPJOIN=new RewriteRuleTokenStream(adaptor,"token KW_MAPJOIN");
        RewriteRuleTokenStream stream_KW_STREAMTABLE=new RewriteRuleTokenStream(adaptor,"token KW_STREAMTABLE");

         msgs.push("hint name"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1511:5: ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE | KW_HOLD_DDLTIME -> TOK_HOLD_DDLTIME )
            int alt209=3;
            switch ( input.LA(1) ) {
            case KW_MAPJOIN:
                {
                alt209=1;
                }
                break;
            case KW_STREAMTABLE:
                {
                alt209=2;
                }
                break;
            case KW_HOLD_DDLTIME:
                {
                alt209=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1508:1: hintName : ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE | KW_HOLD_DDLTIME -> TOK_HOLD_DDLTIME );", 209, 0, input);

                throw nvae;
            }

            switch (alt209) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1512:5: KW_MAPJOIN
                    {
                    KW_MAPJOIN680=(Token)input.LT(1);
                    match(input,KW_MAPJOIN,FOLLOW_KW_MAPJOIN_in_hintName11030); 
                    stream_KW_MAPJOIN.add(KW_MAPJOIN680);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1512:16: -> TOK_MAPJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_MAPJOIN, "TOK_MAPJOIN"));

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1513:7: KW_STREAMTABLE
                    {
                    KW_STREAMTABLE681=(Token)input.LT(1);
                    match(input,KW_STREAMTABLE,FOLLOW_KW_STREAMTABLE_in_hintName11042); 
                    stream_KW_STREAMTABLE.add(KW_STREAMTABLE681);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1513:22: -> TOK_STREAMTABLE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_STREAMTABLE, "TOK_STREAMTABLE"));

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1514:7: KW_HOLD_DDLTIME
                    {
                    KW_HOLD_DDLTIME682=(Token)input.LT(1);
                    match(input,KW_HOLD_DDLTIME,FOLLOW_KW_HOLD_DDLTIME_in_hintName11054); 
                    stream_KW_HOLD_DDLTIME.add(KW_HOLD_DDLTIME682);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1514:23: -> TOK_HOLD_DDLTIME
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_HOLD_DDLTIME, "TOK_HOLD_DDLTIME"));

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintName

    public static class hintArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintArgs
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1517:1: hintArgs : hintArgName ( COMMA hintArgName )* -> ^( TOK_HINTARGLIST ( hintArgName )+ ) ;
    public final hintArgs_return hintArgs() throws RecognitionException {
        hintArgs_return retval = new hintArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA684=null;
        hintArgName_return hintArgName683 = null;

        hintArgName_return hintArgName685 = null;


        CommonTree COMMA684_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_hintArgName=new RewriteRuleSubtreeStream(adaptor,"rule hintArgName");
         msgs.push("hint arguments"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1520:5: ( hintArgName ( COMMA hintArgName )* -> ^( TOK_HINTARGLIST ( hintArgName )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1521:5: hintArgName ( COMMA hintArgName )*
            {
            pushFollow(FOLLOW_hintArgName_in_hintArgs11089);
            hintArgName683=hintArgName();
            _fsp--;

            stream_hintArgName.add(hintArgName683.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1521:17: ( COMMA hintArgName )*
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0==COMMA) ) {
                    alt210=1;
                }


                switch (alt210) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1521:18: COMMA hintArgName
            	    {
            	    COMMA684=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_hintArgs11092); 
            	    stream_COMMA.add(COMMA684);

            	    pushFollow(FOLLOW_hintArgName_in_hintArgs11094);
            	    hintArgName685=hintArgName();
            	    _fsp--;

            	    stream_hintArgName.add(hintArgName685.getTree());

            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);


            // AST REWRITE
            // elements: hintArgName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1521:38: -> ^( TOK_HINTARGLIST ( hintArgName )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1521:41: ^( TOK_HINTARGLIST ( hintArgName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HINTARGLIST, "TOK_HINTARGLIST"), root_1);

                if ( !(stream_hintArgName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_hintArgName.hasNext() ) {
                    adaptor.addChild(root_1, stream_hintArgName.next());

                }
                stream_hintArgName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintArgs

    public static class hintArgName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintArgName
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1524:1: hintArgName : Identifier ;
    public final hintArgName_return hintArgName() throws RecognitionException {
        hintArgName_return retval = new hintArgName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier686=null;

        CommonTree Identifier686_tree=null;

         msgs.push("hint argument name"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1527:5: ( Identifier )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1528:5: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier686=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_hintArgName11136); 
            Identifier686_tree = (CommonTree)adaptor.create(Identifier686);
            adaptor.addChild(root_0, Identifier686_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintArgName

    public static class selectItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectItem
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1531:1: selectItem : ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? ) -> ^( TOK_SELEXPR selectExpression ( Identifier )* ) ;
    public final selectItem_return selectItem() throws RecognitionException {
        selectItem_return retval = new selectItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_AS688=null;
        Token Identifier689=null;
        Token KW_AS690=null;
        Token LPAREN691=null;
        Token Identifier692=null;
        Token COMMA693=null;
        Token Identifier694=null;
        Token RPAREN695=null;
        selectExpression_return selectExpression687 = null;


        CommonTree KW_AS688_tree=null;
        CommonTree Identifier689_tree=null;
        CommonTree KW_AS690_tree=null;
        CommonTree LPAREN691_tree=null;
        CommonTree Identifier692_tree=null;
        CommonTree COMMA693_tree=null;
        CommonTree Identifier694_tree=null;
        CommonTree RPAREN695_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectExpression=new RewriteRuleSubtreeStream(adaptor,"rule selectExpression");
         msgs.push("selection target"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1534:5: ( ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? ) -> ^( TOK_SELEXPR selectExpression ( Identifier )* ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:5: ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? )
            {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:5: ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:7: selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )?
            {
            pushFollow(FOLLOW_selectExpression_in_selectItem11169);
            selectExpression687=selectExpression();
            _fsp--;

            stream_selectExpression.add(selectExpression687.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:25: ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )?
            int alt213=3;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==KW_AS) ) {
                int LA213_1 = input.LA(2);

                if ( (LA213_1==LPAREN) ) {
                    alt213=2;
                }
                else if ( (LA213_1==Identifier) ) {
                    alt213=1;
                }
            }
            else if ( (LA213_0==Identifier) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:26: ( ( KW_AS )? Identifier )
                    {
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:26: ( ( KW_AS )? Identifier )
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:27: ( KW_AS )? Identifier
                    {
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:27: ( KW_AS )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==KW_AS) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:27: KW_AS
                            {
                            KW_AS688=(Token)input.LT(1);
                            match(input,KW_AS,FOLLOW_KW_AS_in_selectItem11174); 
                            stream_KW_AS.add(KW_AS688);


                            }
                            break;

                    }

                    Identifier689=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_selectItem11177); 
                    stream_Identifier.add(Identifier689);


                    }


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:48: ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN )
                    {
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:48: ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN )
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:49: KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN
                    {
                    KW_AS690=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_selectItem11183); 
                    stream_KW_AS.add(KW_AS690);

                    LPAREN691=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_selectItem11185); 
                    stream_LPAREN.add(LPAREN691);

                    Identifier692=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_selectItem11187); 
                    stream_Identifier.add(Identifier692);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:73: ( COMMA Identifier )*
                    loop212:
                    do {
                        int alt212=2;
                        int LA212_0 = input.LA(1);

                        if ( (LA212_0==COMMA) ) {
                            alt212=1;
                        }


                        switch (alt212) {
                    	case 1 :
                    	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:74: COMMA Identifier
                    	    {
                    	    COMMA693=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_selectItem11190); 
                    	    stream_COMMA.add(COMMA693);

                    	    Identifier694=(Token)input.LT(1);
                    	    match(input,Identifier,FOLLOW_Identifier_in_selectItem11192); 
                    	    stream_Identifier.add(Identifier694);


                    	    }
                    	    break;

                    	default :
                    	    break loop212;
                        }
                    } while (true);

                    RPAREN695=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_selectItem11196); 
                    stream_RPAREN.add(RPAREN695);


                    }


                    }
                    break;

            }


            }


            // AST REWRITE
            // elements: selectExpression, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1535:104: -> ^( TOK_SELEXPR selectExpression ( Identifier )* )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:107: ^( TOK_SELEXPR selectExpression ( Identifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_1);

                adaptor.addChild(root_1, stream_selectExpression.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1535:138: ( Identifier )*
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectItem

    public static class trfmClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start trfmClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1538:1: trfmClause : ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) ;
    public final trfmClause_return trfmClause() throws RecognitionException {
        trfmClause_return retval = new trfmClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_MAP696=null;
        Token KW_REDUCE698=null;
        Token KW_USING700=null;
        Token StringLiteral701=null;
        Token KW_AS702=null;
        Token LPAREN703=null;
        Token RPAREN706=null;
        rowFormat_return inSerde = null;

        recordWriter_return inRec = null;

        rowFormat_return outSerde = null;

        recordReader_return outRec = null;

        selectExpressionList_return selectExpressionList697 = null;

        selectExpressionList_return selectExpressionList699 = null;

        aliasList_return aliasList704 = null;

        columnNameTypeList_return columnNameTypeList705 = null;

        aliasList_return aliasList707 = null;

        columnNameTypeList_return columnNameTypeList708 = null;


        CommonTree KW_MAP696_tree=null;
        CommonTree KW_REDUCE698_tree=null;
        CommonTree KW_USING700_tree=null;
        CommonTree StringLiteral701_tree=null;
        CommonTree KW_AS702_tree=null;
        CommonTree LPAREN703_tree=null;
        CommonTree RPAREN706_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_REDUCE=new RewriteRuleTokenStream(adaptor,"token KW_REDUCE");
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_rowFormat=new RewriteRuleSubtreeStream(adaptor,"rule rowFormat");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_recordReader=new RewriteRuleSubtreeStream(adaptor,"rule recordReader");
        RewriteRuleSubtreeStream stream_aliasList=new RewriteRuleSubtreeStream(adaptor,"rule aliasList");
        RewriteRuleSubtreeStream stream_selectExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule selectExpressionList");
        RewriteRuleSubtreeStream stream_recordWriter=new RewriteRuleSubtreeStream(adaptor,"rule recordWriter");
         msgs.push("transform clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1541:5: ( ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1542:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader
            {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1542:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList )
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==KW_MAP) ) {
                alt214=1;
            }
            else if ( (LA214_0==KW_REDUCE) ) {
                alt214=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1542:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList )", 214, 0, input);

                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1542:9: KW_MAP selectExpressionList
                    {
                    KW_MAP696=(Token)input.LT(1);
                    match(input,KW_MAP,FOLLOW_KW_MAP_in_trfmClause11246); 
                    stream_KW_MAP.add(KW_MAP696);

                    pushFollow(FOLLOW_selectExpressionList_in_trfmClause11251);
                    selectExpressionList697=selectExpressionList();
                    _fsp--;

                    stream_selectExpressionList.add(selectExpressionList697.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1543:9: KW_REDUCE selectExpressionList
                    {
                    KW_REDUCE698=(Token)input.LT(1);
                    match(input,KW_REDUCE,FOLLOW_KW_REDUCE_in_trfmClause11261); 
                    stream_KW_REDUCE.add(KW_REDUCE698);

                    pushFollow(FOLLOW_selectExpressionList_in_trfmClause11263);
                    selectExpressionList699=selectExpressionList();
                    _fsp--;

                    stream_selectExpressionList.add(selectExpressionList699.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rowFormat_in_trfmClause11273);
            inSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(inSerde.getTree());
            pushFollow(FOLLOW_recordWriter_in_trfmClause11277);
            inRec=recordWriter();
            _fsp--;

            stream_recordWriter.add(inRec.getTree());
            KW_USING700=(Token)input.LT(1);
            match(input,KW_USING,FOLLOW_KW_USING_in_trfmClause11283); 
            stream_KW_USING.add(KW_USING700);

            StringLiteral701=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_trfmClause11285); 
            stream_StringLiteral.add(StringLiteral701);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:5: ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )?
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==KW_AS) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:7: KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    {
                    KW_AS702=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_trfmClause11293); 
                    stream_KW_AS.add(KW_AS702);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==LPAREN) ) {
                        alt217=1;
                    }
                    else if ( (LA217_0==Identifier) ) {
                        alt217=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1546:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )", 217, 0, input);

                        throw nvae;
                    }
                    switch (alt217) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            {
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:15: LPAREN ( aliasList | columnNameTypeList ) RPAREN
                            {
                            LPAREN703=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_trfmClause11297); 
                            stream_LPAREN.add(LPAREN703);

                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:22: ( aliasList | columnNameTypeList )
                            int alt215=2;
                            int LA215_0 = input.LA(1);

                            if ( (LA215_0==Identifier) ) {
                                int LA215_1 = input.LA(2);

                                if ( ((LA215_1>=RPAREN && LA215_1<=COMMA)) ) {
                                    alt215=1;
                                }
                                else if ( (LA215_1==KW_MAP||(LA215_1>=KW_TINYINT && LA215_1<=KW_ARRAY)||(LA215_1>=KW_STRUCT && LA215_1<=KW_UNIONTYPE)) ) {
                                    alt215=2;
                                }
                                else {
                                    NoViableAltException nvae =
                                        new NoViableAltException("1546:22: ( aliasList | columnNameTypeList )", 215, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1546:22: ( aliasList | columnNameTypeList )", 215, 0, input);

                                throw nvae;
                            }
                            switch (alt215) {
                                case 1 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:23: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_trfmClause11300);
                                    aliasList704=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList704.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:35: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_trfmClause11304);
                                    columnNameTypeList705=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList705.getTree());

                                    }
                                    break;

                            }

                            RPAREN706=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_trfmClause11307); 
                            stream_RPAREN.add(RPAREN706);


                            }


                            }
                            break;
                        case 2 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:65: ( aliasList | columnNameTypeList )
                            {
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:65: ( aliasList | columnNameTypeList )
                            int alt216=2;
                            int LA216_0 = input.LA(1);

                            if ( (LA216_0==Identifier) ) {
                                switch ( input.LA(2) ) {
                                case KW_TINYINT:
                                case KW_SMALLINT:
                                case KW_INT:
                                case KW_BIGINT:
                                case KW_BOOLEAN:
                                case KW_FLOAT:
                                case KW_DOUBLE:
                                case KW_DATE:
                                case KW_DATETIME:
                                case KW_TIMESTAMP:
                                case KW_STRING:
                                case KW_BINARY:
                                case KW_ARRAY:
                                case KW_STRUCT:
                                case KW_UNIONTYPE:
                                    {
                                    alt216=2;
                                    }
                                    break;
                                case KW_MAP:
                                    {
                                    int LA216_16 = input.LA(3);

                                    if ( (LA216_16==LESSTHAN) ) {
                                        alt216=2;
                                    }
                                    else if ( (LA216_16==StringLiteral||LA216_16==KW_IF||LA216_16==KW_NOT||LA216_16==Identifier||LA216_16==LPAREN||LA216_16==Number||LA216_16==KW_MAP||LA216_16==KW_ARRAY||(LA216_16>=KW_STRUCT && LA216_16<=KW_UNIONTYPE)||(LA216_16>=STAR && LA216_16<=PLUS)||(LA216_16>=KW_CAST && LA216_16<=KW_CASE)||(LA216_16>=BigintLiteral && LA216_16<=CharSetName)||LA216_16==KW_NULL||(LA216_16>=MINUS && LA216_16<=TILDE)||(LA216_16>=KW_TRUE && LA216_16<=KW_FALSE)) ) {
                                        alt216=1;
                                    }
                                    else {
                                        NoViableAltException nvae =
                                            new NoViableAltException("1546:65: ( aliasList | columnNameTypeList )", 216, 16, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case EOF:
                                case KW_FROM:
                                case RPAREN:
                                case COMMA:
                                case KW_SELECT:
                                case KW_GROUP:
                                case KW_RECORDREADER:
                                case KW_ROW:
                                case KW_UNION:
                                case KW_INSERT:
                                case KW_LIMIT:
                                case KW_REDUCE:
                                case KW_WHERE:
                                case KW_HAVING:
                                case KW_ORDER:
                                case KW_CLUSTER:
                                case KW_DISTRIBUTE:
                                case KW_SORT:
                                    {
                                    alt216=1;
                                    }
                                    break;
                                default:
                                    NoViableAltException nvae =
                                        new NoViableAltException("1546:65: ( aliasList | columnNameTypeList )", 216, 1, input);

                                    throw nvae;
                                }

                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1546:65: ( aliasList | columnNameTypeList )", 216, 0, input);

                                throw nvae;
                            }
                            switch (alt216) {
                                case 1 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:66: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_trfmClause11313);
                                    aliasList707=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList707.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1546:78: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_trfmClause11317);
                                    columnNameTypeList708=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList708.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_rowFormat_in_trfmClause11329);
            outSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(outSerde.getTree());
            pushFollow(FOLLOW_recordReader_in_trfmClause11333);
            outRec=recordReader();
            _fsp--;

            stream_recordReader.add(outRec.getTree());

            // AST REWRITE
            // elements: StringLiteral, inSerde, columnNameTypeList, outRec, selectExpressionList, aliasList, inRec, outSerde
            // token labels: 
            // rule labels: retval, inRec, inSerde, outRec, outSerde
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_inRec=new RewriteRuleSubtreeStream(adaptor,"token inRec",inRec!=null?inRec.tree:null);
            RewriteRuleSubtreeStream stream_inSerde=new RewriteRuleSubtreeStream(adaptor,"token inSerde",inSerde!=null?inSerde.tree:null);
            RewriteRuleSubtreeStream stream_outRec=new RewriteRuleSubtreeStream(adaptor,"token outRec",outRec!=null?outRec.tree:null);
            RewriteRuleSubtreeStream stream_outSerde=new RewriteRuleSubtreeStream(adaptor,"token outSerde",outSerde!=null?outSerde.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1548:5: -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1548:8: ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TRANSFORM, "TOK_TRANSFORM"), root_1);

                adaptor.addChild(root_1, stream_selectExpressionList.next());
                adaptor.addChild(root_1, stream_inSerde.next());
                adaptor.addChild(root_1, stream_inRec.next());
                adaptor.addChild(root_1, stream_StringLiteral.next());
                adaptor.addChild(root_1, stream_outSerde.next());
                adaptor.addChild(root_1, stream_outRec.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1548:93: ( aliasList )?
                if ( stream_aliasList.hasNext() ) {
                    adaptor.addChild(root_1, stream_aliasList.next());

                }
                stream_aliasList.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1548:104: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.next());

                }
                stream_columnNameTypeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end trfmClause

    public static class selectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1551:1: selectExpression : ( expression | tableAllColumns );
    public final selectExpression_return selectExpression() throws RecognitionException {
        selectExpression_return retval = new selectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression709 = null;

        tableAllColumns_return tableAllColumns710 = null;



         msgs.push("select expression"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1554:5: ( expression | tableAllColumns )
            int alt219=2;
            switch ( input.LA(1) ) {
            case StringLiteral:
            case KW_IF:
            case KW_NOT:
            case LPAREN:
            case Number:
            case KW_MAP:
            case KW_ARRAY:
            case KW_STRUCT:
            case KW_UNIONTYPE:
            case PLUS:
            case KW_CAST:
            case KW_CASE:
            case BigintLiteral:
            case SmallintLiteral:
            case TinyintLiteral:
            case CharSetName:
            case KW_NULL:
            case MINUS:
            case TILDE:
            case KW_TRUE:
            case KW_FALSE:
                {
                alt219=1;
                }
                break;
            case Identifier:
                {
                int LA219_12 = input.LA(2);

                if ( (LA219_12==DOT) ) {
                    int LA219_18 = input.LA(3);

                    if ( (LA219_18==STAR) ) {
                        alt219=2;
                    }
                    else if ( (LA219_18==Identifier) ) {
                        alt219=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1551:1: selectExpression : ( expression | tableAllColumns );", 219, 18, input);

                        throw nvae;
                    }
                }
                else if ( (LA219_12==EOF||LA219_12==KW_FROM||(LA219_12>=KW_NOT && LA219_12<=KW_OR)||LA219_12==Identifier||(LA219_12>=LPAREN && LA219_12<=COMMA)||(LA219_12>=KW_LIKE && LA219_12<=KW_AS)||LA219_12==KW_IN||LA219_12==KW_SELECT||LA219_12==KW_GROUP||(LA219_12>=KW_RECORDWRITER && LA219_12<=KW_ROW)||LA219_12==EQUAL||LA219_12==KW_MAP||(LA219_12>=LESSTHAN && LA219_12<=GREATERTHAN)||(LA219_12>=KW_UNION && LA219_12<=KW_INSERT)||LA219_12==KW_LIMIT||(LA219_12>=KW_USING && LA219_12<=PLUS)||LA219_12==KW_REDUCE||(LA219_12>=KW_WHERE && LA219_12<=KW_SORT)||LA219_12==LSQUARE||LA219_12==MINUS||(LA219_12>=KW_IS && LA219_12<=KW_AND)) ) {
                    alt219=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1551:1: selectExpression : ( expression | tableAllColumns );", 219, 12, input);

                    throw nvae;
                }
                }
                break;
            case STAR:
                {
                alt219=2;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1551:1: selectExpression : ( expression | tableAllColumns );", 219, 0, input);

                throw nvae;
            }

            switch (alt219) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1555:5: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_selectExpression11396);
                    expression709=expression();
                    _fsp--;

                    adaptor.addChild(root_0, expression709.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1555:18: tableAllColumns
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_tableAllColumns_in_selectExpression11400);
                    tableAllColumns710=tableAllColumns();
                    _fsp--;

                    adaptor.addChild(root_0, tableAllColumns710.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectExpression

    public static class selectExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectExpressionList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1558:1: selectExpressionList : selectExpression ( COMMA selectExpression )* -> ^( TOK_EXPLIST ( selectExpression )+ ) ;
    public final selectExpressionList_return selectExpressionList() throws RecognitionException {
        selectExpressionList_return retval = new selectExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA712=null;
        selectExpression_return selectExpression711 = null;

        selectExpression_return selectExpression713 = null;


        CommonTree COMMA712_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_selectExpression=new RewriteRuleSubtreeStream(adaptor,"rule selectExpression");
         msgs.push("select expression list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1561:5: ( selectExpression ( COMMA selectExpression )* -> ^( TOK_EXPLIST ( selectExpression )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1562:5: selectExpression ( COMMA selectExpression )*
            {
            pushFollow(FOLLOW_selectExpression_in_selectExpressionList11431);
            selectExpression711=selectExpression();
            _fsp--;

            stream_selectExpression.add(selectExpression711.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1562:22: ( COMMA selectExpression )*
            loop220:
            do {
                int alt220=2;
                int LA220_0 = input.LA(1);

                if ( (LA220_0==COMMA) ) {
                    alt220=1;
                }


                switch (alt220) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1562:23: COMMA selectExpression
            	    {
            	    COMMA712=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_selectExpressionList11434); 
            	    stream_COMMA.add(COMMA712);

            	    pushFollow(FOLLOW_selectExpression_in_selectExpressionList11436);
            	    selectExpression713=selectExpression();
            	    _fsp--;

            	    stream_selectExpression.add(selectExpression713.getTree());

            	    }
            	    break;

            	default :
            	    break loop220;
                }
            } while (true);


            // AST REWRITE
            // elements: selectExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1562:48: -> ^( TOK_EXPLIST ( selectExpression )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1562:51: ^( TOK_EXPLIST ( selectExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);

                if ( !(stream_selectExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_selectExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_selectExpression.next());

                }
                stream_selectExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectExpressionList

    public static class tableAllColumns_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableAllColumns
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1568:1: tableAllColumns : ( STAR -> ^( TOK_ALLCOLREF ) | tableName DOT STAR -> ^( TOK_ALLCOLREF tableName ) );
    public final tableAllColumns_return tableAllColumns() throws RecognitionException {
        tableAllColumns_return retval = new tableAllColumns_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR714=null;
        Token DOT716=null;
        Token STAR717=null;
        tableName_return tableName715 = null;


        CommonTree STAR714_tree=null;
        CommonTree DOT716_tree=null;
        CommonTree STAR717_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1569:5: ( STAR -> ^( TOK_ALLCOLREF ) | tableName DOT STAR -> ^( TOK_ALLCOLREF tableName ) )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==STAR) ) {
                alt221=1;
            }
            else if ( (LA221_0==Identifier) ) {
                alt221=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1568:1: tableAllColumns : ( STAR -> ^( TOK_ALLCOLREF ) | tableName DOT STAR -> ^( TOK_ALLCOLREF tableName ) );", 221, 0, input);

                throw nvae;
            }
            switch (alt221) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1569:7: STAR
                    {
                    STAR714=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_tableAllColumns11467); 
                    stream_STAR.add(STAR714);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1570:9: -> ^( TOK_ALLCOLREF )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1570:12: ^( TOK_ALLCOLREF )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1571:7: tableName DOT STAR
                    {
                    pushFollow(FOLLOW_tableName_in_tableAllColumns11489);
                    tableName715=tableName();
                    _fsp--;

                    stream_tableName.add(tableName715.getTree());
                    DOT716=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_tableAllColumns11491); 
                    stream_DOT.add(DOT716);

                    STAR717=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_tableAllColumns11493); 
                    stream_STAR.add(STAR717);


                    // AST REWRITE
                    // elements: tableName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1572:9: -> ^( TOK_ALLCOLREF tableName )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1572:12: ^( TOK_ALLCOLREF tableName )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"), root_1);

                        adaptor.addChild(root_1, stream_tableName.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableAllColumns

    public static class tableOrColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableOrColumn
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1576:1: tableOrColumn : Identifier -> ^( TOK_TABLE_OR_COL Identifier ) ;
    public final tableOrColumn_return tableOrColumn() throws RecognitionException {
        tableOrColumn_return retval = new tableOrColumn_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier718=null;

        CommonTree Identifier718_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("table or column identifier"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1579:5: ( Identifier -> ^( TOK_TABLE_OR_COL Identifier ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1580:5: Identifier
            {
            Identifier718=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tableOrColumn11541); 
            stream_Identifier.add(Identifier718);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1580:16: -> ^( TOK_TABLE_OR_COL Identifier )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1580:19: ^( TOK_TABLE_OR_COL Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLE_OR_COL, "TOK_TABLE_OR_COL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableOrColumn

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expressionList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1583:1: expressionList : expression ( COMMA expression )* -> ^( TOK_EXPLIST ( expression )+ ) ;
    public final expressionList_return expressionList() throws RecognitionException {
        expressionList_return retval = new expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA720=null;
        expression_return expression719 = null;

        expression_return expression721 = null;


        CommonTree COMMA720_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("expression list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1586:5: ( expression ( COMMA expression )* -> ^( TOK_EXPLIST ( expression )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1587:5: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_expressionList11580);
            expression719=expression();
            _fsp--;

            stream_expression.add(expression719.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1587:16: ( COMMA expression )*
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);

                if ( (LA222_0==COMMA) ) {
                    alt222=1;
                }


                switch (alt222) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1587:17: COMMA expression
            	    {
            	    COMMA720=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_expressionList11583); 
            	    stream_COMMA.add(COMMA720);

            	    pushFollow(FOLLOW_expression_in_expressionList11585);
            	    expression721=expression();
            	    _fsp--;

            	    stream_expression.add(expression721.getTree());

            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1587:36: -> ^( TOK_EXPLIST ( expression )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1587:39: ^( TOK_EXPLIST ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expressionList

    public static class aliasList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start aliasList
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1590:1: aliasList : Identifier ( COMMA Identifier )* -> ^( TOK_ALIASLIST ( Identifier )+ ) ;
    public final aliasList_return aliasList() throws RecognitionException {
        aliasList_return retval = new aliasList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier722=null;
        Token COMMA723=null;
        Token Identifier724=null;

        CommonTree Identifier722_tree=null;
        CommonTree COMMA723_tree=null;
        CommonTree Identifier724_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("alias list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1593:5: ( Identifier ( COMMA Identifier )* -> ^( TOK_ALIASLIST ( Identifier )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1594:5: Identifier ( COMMA Identifier )*
            {
            Identifier722=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_aliasList11627); 
            stream_Identifier.add(Identifier722);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1594:16: ( COMMA Identifier )*
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);

                if ( (LA223_0==COMMA) ) {
                    alt223=1;
                }


                switch (alt223) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1594:17: COMMA Identifier
            	    {
            	    COMMA723=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_aliasList11630); 
            	    stream_COMMA.add(COMMA723);

            	    Identifier724=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_aliasList11632); 
            	    stream_Identifier.add(Identifier724);


            	    }
            	    break;

            	default :
            	    break loop223;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1594:36: -> ^( TOK_ALIASLIST ( Identifier )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1594:39: ^( TOK_ALIASLIST ( Identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALIASLIST, "TOK_ALIASLIST"), root_1);

                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end aliasList

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fromClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1599:1: fromClause : KW_FROM joinSource -> ^( TOK_FROM joinSource ) ;
    public final fromClause_return fromClause() throws RecognitionException {
        fromClause_return retval = new fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_FROM725=null;
        joinSource_return joinSource726 = null;


        CommonTree KW_FROM725_tree=null;
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_joinSource=new RewriteRuleSubtreeStream(adaptor,"rule joinSource");
         msgs.push("from clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1602:5: ( KW_FROM joinSource -> ^( TOK_FROM joinSource ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1603:5: KW_FROM joinSource
            {
            KW_FROM725=(Token)input.LT(1);
            match(input,KW_FROM,FOLLOW_KW_FROM_in_fromClause11676); 
            stream_KW_FROM.add(KW_FROM725);

            pushFollow(FOLLOW_joinSource_in_fromClause11678);
            joinSource726=joinSource();
            _fsp--;

            stream_joinSource.add(joinSource726.getTree());

            // AST REWRITE
            // elements: joinSource
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1603:24: -> ^( TOK_FROM joinSource )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1603:27: ^( TOK_FROM joinSource )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FROM, "TOK_FROM"), root_1);

                adaptor.addChild(root_1, stream_joinSource.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fromClause

    public static class joinSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start joinSource
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1606:1: joinSource : ( fromSource ( joinToken fromSource ( KW_ON expression )? )* | uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+ );
    public final joinSource_return joinSource() throws RecognitionException {
        joinSource_return retval = new joinSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ON730=null;
        Token COMMA734=null;
        fromSource_return fromSource727 = null;

        joinToken_return joinToken728 = null;

        fromSource_return fromSource729 = null;

        expression_return expression731 = null;

        uniqueJoinToken_return uniqueJoinToken732 = null;

        uniqueJoinSource_return uniqueJoinSource733 = null;

        uniqueJoinSource_return uniqueJoinSource735 = null;


        CommonTree KW_ON730_tree=null;
        CommonTree COMMA734_tree=null;

         msgs.push("join source"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1609:5: ( fromSource ( joinToken fromSource ( KW_ON expression )? )* | uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+ )
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==Identifier||LA227_0==LPAREN) ) {
                alt227=1;
            }
            else if ( (LA227_0==KW_UNIQUEJOIN) ) {
                alt227=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1606:1: joinSource : ( fromSource ( joinToken fromSource ( KW_ON expression )? )* | uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+ );", 227, 0, input);

                throw nvae;
            }
            switch (alt227) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1609:7: fromSource ( joinToken fromSource ( KW_ON expression )? )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_fromSource_in_joinSource11713);
                    fromSource727=fromSource();
                    _fsp--;

                    adaptor.addChild(root_0, fromSource727.getTree());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1609:18: ( joinToken fromSource ( KW_ON expression )? )*
                    loop225:
                    do {
                        int alt225=2;
                        int LA225_0 = input.LA(1);

                        if ( (LA225_0==Identifier||(LA225_0>=KW_JOIN && LA225_0<=KW_LEFT)||(LA225_0>=KW_RIGHT && LA225_0<=KW_FULL)) ) {
                            alt225=1;
                        }


                        switch (alt225) {
                    	case 1 :
                    	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1609:20: joinToken fromSource ( KW_ON expression )?
                    	    {
                    	    pushFollow(FOLLOW_joinToken_in_joinSource11717);
                    	    joinToken728=joinToken();
                    	    _fsp--;

                    	    root_0 = (CommonTree)adaptor.becomeRoot(joinToken728.getTree(), root_0);
                    	    pushFollow(FOLLOW_fromSource_in_joinSource11720);
                    	    fromSource729=fromSource();
                    	    _fsp--;

                    	    adaptor.addChild(root_0, fromSource729.getTree());
                    	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1609:42: ( KW_ON expression )?
                    	    int alt224=2;
                    	    int LA224_0 = input.LA(1);

                    	    if ( (LA224_0==KW_ON) ) {
                    	        alt224=1;
                    	    }
                    	    switch (alt224) {
                    	        case 1 :
                    	            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1609:43: KW_ON expression
                    	            {
                    	            KW_ON730=(Token)input.LT(1);
                    	            match(input,KW_ON,FOLLOW_KW_ON_in_joinSource11723); 
                    	            pushFollow(FOLLOW_expression_in_joinSource11726);
                    	            expression731=expression();
                    	            _fsp--;

                    	            adaptor.addChild(root_0, expression731.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop225;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1610:7: uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_uniqueJoinToken_in_joinSource11739);
                    uniqueJoinToken732=uniqueJoinToken();
                    _fsp--;

                    root_0 = (CommonTree)adaptor.becomeRoot(uniqueJoinToken732.getTree(), root_0);
                    pushFollow(FOLLOW_uniqueJoinSource_in_joinSource11742);
                    uniqueJoinSource733=uniqueJoinSource();
                    _fsp--;

                    adaptor.addChild(root_0, uniqueJoinSource733.getTree());
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1610:41: ( COMMA uniqueJoinSource )+
                    int cnt226=0;
                    loop226:
                    do {
                        int alt226=2;
                        int LA226_0 = input.LA(1);

                        if ( (LA226_0==COMMA) ) {
                            alt226=1;
                        }


                        switch (alt226) {
                    	case 1 :
                    	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1610:42: COMMA uniqueJoinSource
                    	    {
                    	    COMMA734=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_joinSource11745); 
                    	    pushFollow(FOLLOW_uniqueJoinSource_in_joinSource11748);
                    	    uniqueJoinSource735=uniqueJoinSource();
                    	    _fsp--;

                    	    adaptor.addChild(root_0, uniqueJoinSource735.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt226 >= 1 ) break loop226;
                                EarlyExitException eee =
                                    new EarlyExitException(226, input);
                                throw eee;
                        }
                        cnt226++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end joinSource

    public static class uniqueJoinSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uniqueJoinSource
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1613:1: uniqueJoinSource : ( KW_PRESERVE )? fromSource uniqueJoinExpr ;
    public final uniqueJoinSource_return uniqueJoinSource() throws RecognitionException {
        uniqueJoinSource_return retval = new uniqueJoinSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PRESERVE736=null;
        fromSource_return fromSource737 = null;

        uniqueJoinExpr_return uniqueJoinExpr738 = null;


        CommonTree KW_PRESERVE736_tree=null;

         msgs.push("join source"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1616:5: ( ( KW_PRESERVE )? fromSource uniqueJoinExpr )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1616:7: ( KW_PRESERVE )? fromSource uniqueJoinExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1616:7: ( KW_PRESERVE )?
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==KW_PRESERVE) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1616:7: KW_PRESERVE
                    {
                    KW_PRESERVE736=(Token)input.LT(1);
                    match(input,KW_PRESERVE,FOLLOW_KW_PRESERVE_in_uniqueJoinSource11777); 
                    KW_PRESERVE736_tree = (CommonTree)adaptor.create(KW_PRESERVE736);
                    adaptor.addChild(root_0, KW_PRESERVE736_tree);


                    }
                    break;

            }

            pushFollow(FOLLOW_fromSource_in_uniqueJoinSource11780);
            fromSource737=fromSource();
            _fsp--;

            adaptor.addChild(root_0, fromSource737.getTree());
            pushFollow(FOLLOW_uniqueJoinExpr_in_uniqueJoinSource11782);
            uniqueJoinExpr738=uniqueJoinExpr();
            _fsp--;

            adaptor.addChild(root_0, uniqueJoinExpr738.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end uniqueJoinSource

    public static class uniqueJoinExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uniqueJoinExpr
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1619:1: uniqueJoinExpr : LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN -> ^( TOK_EXPLIST ( $e1)* ) ;
    public final uniqueJoinExpr_return uniqueJoinExpr() throws RecognitionException {
        uniqueJoinExpr_return retval = new uniqueJoinExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN739=null;
        Token COMMA740=null;
        Token RPAREN741=null;
        List list_e1=null;
        RuleReturnScope e1 = null;
        CommonTree LPAREN739_tree=null;
        CommonTree COMMA740_tree=null;
        CommonTree RPAREN741_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("unique join expression list"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1622:5: ( LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN -> ^( TOK_EXPLIST ( $e1)* ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1622:7: LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN
            {
            LPAREN739=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_uniqueJoinExpr11809); 
            stream_LPAREN.add(LPAREN739);

            pushFollow(FOLLOW_expression_in_uniqueJoinExpr11813);
            e1=expression();
            _fsp--;

            stream_expression.add(e1.getTree());
            if (list_e1==null) list_e1=new ArrayList();
            list_e1.add(e1);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1622:29: ( COMMA e1+= expression )*
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);

                if ( (LA229_0==COMMA) ) {
                    alt229=1;
                }


                switch (alt229) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1622:30: COMMA e1+= expression
            	    {
            	    COMMA740=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_uniqueJoinExpr11816); 
            	    stream_COMMA.add(COMMA740);

            	    pushFollow(FOLLOW_expression_in_uniqueJoinExpr11820);
            	    e1=expression();
            	    _fsp--;

            	    stream_expression.add(e1.getTree());
            	    if (list_e1==null) list_e1=new ArrayList();
            	    list_e1.add(e1);


            	    }
            	    break;

            	default :
            	    break loop229;
                }
            } while (true);

            RPAREN741=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_uniqueJoinExpr11824); 
            stream_RPAREN.add(RPAREN741);


            // AST REWRITE
            // elements: e1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: e1
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"token e1",list_e1);
            root_0 = (CommonTree)adaptor.nil();
            // 1623:7: -> ^( TOK_EXPLIST ( $e1)* )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1623:10: ^( TOK_EXPLIST ( $e1)* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);

                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1623:24: ( $e1)*
                while ( stream_e1.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_e1.next()).getTree());

                }
                stream_e1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end uniqueJoinExpr

    public static class uniqueJoinToken_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uniqueJoinToken
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1626:1: uniqueJoinToken : KW_UNIQUEJOIN -> TOK_UNIQUEJOIN ;
    public final uniqueJoinToken_return uniqueJoinToken() throws RecognitionException {
        uniqueJoinToken_return retval = new uniqueJoinToken_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_UNIQUEJOIN742=null;

        CommonTree KW_UNIQUEJOIN742_tree=null;
        RewriteRuleTokenStream stream_KW_UNIQUEJOIN=new RewriteRuleTokenStream(adaptor,"token KW_UNIQUEJOIN");

         msgs.push("unique join"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1629:5: ( KW_UNIQUEJOIN -> TOK_UNIQUEJOIN )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1629:7: KW_UNIQUEJOIN
            {
            KW_UNIQUEJOIN742=(Token)input.LT(1);
            match(input,KW_UNIQUEJOIN,FOLLOW_KW_UNIQUEJOIN_in_uniqueJoinToken11867); 
            stream_KW_UNIQUEJOIN.add(KW_UNIQUEJOIN742);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1629:21: -> TOK_UNIQUEJOIN
            {
                adaptor.addChild(root_0, adaptor.create(TOK_UNIQUEJOIN, "TOK_UNIQUEJOIN"));

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end uniqueJoinToken

    public static class joinToken_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start joinToken
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1631:1: joinToken : ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN );
    public final joinToken_return joinToken() throws RecognitionException {
        joinToken_return retval = new joinToken_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_JOIN743=null;
        Token KW_JOIN745=null;
        Token KW_LEFT746=null;
        Token KW_OUTER747=null;
        Token KW_JOIN748=null;
        Token KW_RIGHT749=null;
        Token KW_OUTER750=null;
        Token KW_JOIN751=null;
        Token KW_FULL752=null;
        Token KW_OUTER753=null;
        Token KW_JOIN754=null;
        Token KW_LEFT755=null;
        Token KW_SEMI756=null;
        Token KW_JOIN757=null;
        kwInner_return kwInner744 = null;


        CommonTree KW_JOIN743_tree=null;
        CommonTree KW_JOIN745_tree=null;
        CommonTree KW_LEFT746_tree=null;
        CommonTree KW_OUTER747_tree=null;
        CommonTree KW_JOIN748_tree=null;
        CommonTree KW_RIGHT749_tree=null;
        CommonTree KW_OUTER750_tree=null;
        CommonTree KW_JOIN751_tree=null;
        CommonTree KW_FULL752_tree=null;
        CommonTree KW_OUTER753_tree=null;
        CommonTree KW_JOIN754_tree=null;
        CommonTree KW_LEFT755_tree=null;
        CommonTree KW_SEMI756_tree=null;
        CommonTree KW_JOIN757_tree=null;
        RewriteRuleTokenStream stream_KW_RIGHT=new RewriteRuleTokenStream(adaptor,"token KW_RIGHT");
        RewriteRuleTokenStream stream_KW_OUTER=new RewriteRuleTokenStream(adaptor,"token KW_OUTER");
        RewriteRuleTokenStream stream_KW_JOIN=new RewriteRuleTokenStream(adaptor,"token KW_JOIN");
        RewriteRuleTokenStream stream_KW_LEFT=new RewriteRuleTokenStream(adaptor,"token KW_LEFT");
        RewriteRuleTokenStream stream_KW_SEMI=new RewriteRuleTokenStream(adaptor,"token KW_SEMI");
        RewriteRuleTokenStream stream_KW_FULL=new RewriteRuleTokenStream(adaptor,"token KW_FULL");
        RewriteRuleSubtreeStream stream_kwInner=new RewriteRuleSubtreeStream(adaptor,"rule kwInner");
         msgs.push("join type specifier"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1634:5: ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN )
            int alt230=6;
            switch ( input.LA(1) ) {
            case KW_JOIN:
                {
                alt230=1;
                }
                break;
            case Identifier:
                {
                alt230=2;
                }
                break;
            case KW_LEFT:
                {
                int LA230_3 = input.LA(2);

                if ( (LA230_3==KW_SEMI) ) {
                    alt230=6;
                }
                else if ( (LA230_3==KW_OUTER) ) {
                    alt230=3;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1631:1: joinToken : ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN );", 230, 3, input);

                    throw nvae;
                }
                }
                break;
            case KW_RIGHT:
                {
                alt230=4;
                }
                break;
            case KW_FULL:
                {
                alt230=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1631:1: joinToken : ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN );", 230, 0, input);

                throw nvae;
            }

            switch (alt230) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1635:7: KW_JOIN
                    {
                    KW_JOIN743=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken11899); 
                    stream_KW_JOIN.add(KW_JOIN743);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1635:35: -> TOK_JOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_JOIN, "TOK_JOIN"));

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1636:7: kwInner KW_JOIN
                    {
                    pushFollow(FOLLOW_kwInner_in_joinToken11931);
                    kwInner744=kwInner();
                    _fsp--;

                    stream_kwInner.add(kwInner744.getTree());
                    KW_JOIN745=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken11934); 
                    stream_KW_JOIN.add(KW_JOIN745);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1636:35: -> TOK_JOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_JOIN, "TOK_JOIN"));

                    }



                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1637:7: KW_LEFT KW_OUTER KW_JOIN
                    {
                    KW_LEFT746=(Token)input.LT(1);
                    match(input,KW_LEFT,FOLLOW_KW_LEFT_in_joinToken11957); 
                    stream_KW_LEFT.add(KW_LEFT746);

                    KW_OUTER747=(Token)input.LT(1);
                    match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken11960); 
                    stream_KW_OUTER.add(KW_OUTER747);

                    KW_JOIN748=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken11962); 
                    stream_KW_JOIN.add(KW_JOIN748);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1637:35: -> TOK_LEFTOUTERJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_LEFTOUTERJOIN, "TOK_LEFTOUTERJOIN"));

                    }



                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1638:7: KW_RIGHT KW_OUTER KW_JOIN
                    {
                    KW_RIGHT749=(Token)input.LT(1);
                    match(input,KW_RIGHT,FOLLOW_KW_RIGHT_in_joinToken11976); 
                    stream_KW_RIGHT.add(KW_RIGHT749);

                    KW_OUTER750=(Token)input.LT(1);
                    match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken11978); 
                    stream_KW_OUTER.add(KW_OUTER750);

                    KW_JOIN751=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken11980); 
                    stream_KW_JOIN.add(KW_JOIN751);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1638:35: -> TOK_RIGHTOUTERJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_RIGHTOUTERJOIN, "TOK_RIGHTOUTERJOIN"));

                    }



                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1639:7: KW_FULL KW_OUTER KW_JOIN
                    {
                    KW_FULL752=(Token)input.LT(1);
                    match(input,KW_FULL,FOLLOW_KW_FULL_in_joinToken11994); 
                    stream_KW_FULL.add(KW_FULL752);

                    KW_OUTER753=(Token)input.LT(1);
                    match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken11997); 
                    stream_KW_OUTER.add(KW_OUTER753);

                    KW_JOIN754=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken11999); 
                    stream_KW_JOIN.add(KW_JOIN754);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1639:35: -> TOK_FULLOUTERJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_FULLOUTERJOIN, "TOK_FULLOUTERJOIN"));

                    }



                    }
                    break;
                case 6 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1640:7: KW_LEFT KW_SEMI KW_JOIN
                    {
                    KW_LEFT755=(Token)input.LT(1);
                    match(input,KW_LEFT,FOLLOW_KW_LEFT_in_joinToken12013); 
                    stream_KW_LEFT.add(KW_LEFT755);

                    KW_SEMI756=(Token)input.LT(1);
                    match(input,KW_SEMI,FOLLOW_KW_SEMI_in_joinToken12016); 
                    stream_KW_SEMI.add(KW_SEMI756);

                    KW_JOIN757=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken12019); 
                    stream_KW_JOIN.add(KW_JOIN757);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1640:35: -> TOK_LEFTSEMIJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_LEFTSEMIJOIN, "TOK_LEFTSEMIJOIN"));

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end joinToken

    public static class lateralView_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start lateralView
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1643:1: lateralView : KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )* -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) ) ;
    public final lateralView_return lateralView() throws RecognitionException {
        lateralView_return retval = new lateralView_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_LATERAL758=null;
        Token KW_VIEW759=null;
        Token KW_AS762=null;
        Token Identifier763=null;
        Token COMMA764=null;
        Token Identifier765=null;
        function_return function760 = null;

        tableAlias_return tableAlias761 = null;


        CommonTree KW_LATERAL758_tree=null;
        CommonTree KW_VIEW759_tree=null;
        CommonTree KW_AS762_tree=null;
        CommonTree Identifier763_tree=null;
        CommonTree COMMA764_tree=null;
        CommonTree Identifier765_tree=null;
        RewriteRuleTokenStream stream_KW_LATERAL=new RewriteRuleTokenStream(adaptor,"token KW_LATERAL");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_tableAlias=new RewriteRuleSubtreeStream(adaptor,"rule tableAlias");
        RewriteRuleSubtreeStream stream_function=new RewriteRuleSubtreeStream(adaptor,"rule function");
        msgs.push("lateral view"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1646:2: ( KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )* -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1647:2: KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )*
            {
            KW_LATERAL758=(Token)input.LT(1);
            match(input,KW_LATERAL,FOLLOW_KW_LATERAL_in_lateralView12050); 
            stream_KW_LATERAL.add(KW_LATERAL758);

            KW_VIEW759=(Token)input.LT(1);
            match(input,KW_VIEW,FOLLOW_KW_VIEW_in_lateralView12052); 
            stream_KW_VIEW.add(KW_VIEW759);

            pushFollow(FOLLOW_function_in_lateralView12054);
            function760=function();
            _fsp--;

            stream_function.add(function760.getTree());
            pushFollow(FOLLOW_tableAlias_in_lateralView12056);
            tableAlias761=tableAlias();
            _fsp--;

            stream_tableAlias.add(tableAlias761.getTree());
            KW_AS762=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_lateralView12058); 
            stream_KW_AS.add(KW_AS762);

            Identifier763=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_lateralView12060); 
            stream_Identifier.add(Identifier763);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1647:58: ( COMMA Identifier )*
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);

                if ( (LA231_0==COMMA) ) {
                    alt231=1;
                }


                switch (alt231) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1647:59: COMMA Identifier
            	    {
            	    COMMA764=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_lateralView12063); 
            	    stream_COMMA.add(COMMA764);

            	    Identifier765=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_lateralView12065); 
            	    stream_Identifier.add(Identifier765);


            	    }
            	    break;

            	default :
            	    break loop231;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier, tableAlias, function
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1647:78: -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1647:81: ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LATERAL_VIEW, "TOK_LATERAL_VIEW"), root_1);

                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1647:100: ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_2);

                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1647:113: ^( TOK_SELEXPR function ( Identifier )+ tableAlias )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_3);

                adaptor.addChild(root_3, stream_function.next());
                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_3, stream_Identifier.next());

                }
                stream_Identifier.reset();
                adaptor.addChild(root_3, stream_tableAlias.next());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lateralView

    public static class tableAlias_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableAlias
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1650:1: tableAlias : Identifier -> ^( TOK_TABALIAS Identifier ) ;
    public final tableAlias_return tableAlias() throws RecognitionException {
        tableAlias_return retval = new tableAlias_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier766=null;

        CommonTree Identifier766_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        msgs.push("table alias"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1653:5: ( Identifier -> ^( TOK_TABALIAS Identifier ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1654:5: Identifier
            {
            Identifier766=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tableAlias12116); 
            stream_Identifier.add(Identifier766);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1654:16: -> ^( TOK_TABALIAS Identifier )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1654:19: ^( TOK_TABALIAS Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABALIAS, "TOK_TABALIAS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableAlias

    public static class fromSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fromSource
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1657:1: fromSource : ( tableSource | subQuerySource ) ( lateralView )* ;
    public final fromSource_return fromSource() throws RecognitionException {
        fromSource_return retval = new fromSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tableSource_return tableSource767 = null;

        subQuerySource_return subQuerySource768 = null;

        lateralView_return lateralView769 = null;



         msgs.push("from source"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1660:5: ( ( tableSource | subQuerySource ) ( lateralView )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1661:5: ( tableSource | subQuerySource ) ( lateralView )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1661:5: ( tableSource | subQuerySource )
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==Identifier) ) {
                alt232=1;
            }
            else if ( (LA232_0==LPAREN) ) {
                alt232=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1661:5: ( tableSource | subQuerySource )", 232, 0, input);

                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1661:6: tableSource
                    {
                    pushFollow(FOLLOW_tableSource_in_fromSource12156);
                    tableSource767=tableSource();
                    _fsp--;

                    adaptor.addChild(root_0, tableSource767.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1661:20: subQuerySource
                    {
                    pushFollow(FOLLOW_subQuerySource_in_fromSource12160);
                    subQuerySource768=subQuerySource();
                    _fsp--;

                    adaptor.addChild(root_0, subQuerySource768.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1661:36: ( lateralView )*
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==KW_LATERAL) ) {
                    alt233=1;
                }


                switch (alt233) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1661:37: lateralView
            	    {
            	    pushFollow(FOLLOW_lateralView_in_fromSource12164);
            	    lateralView769=lateralView();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(lateralView769.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fromSource

    public static class tableBucketSample_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableBucketSample
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1664:1: tableBucketSample : KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* ) ;
    public final tableBucketSample_return tableBucketSample() throws RecognitionException {
        tableBucketSample_return retval = new tableBucketSample_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token numerator=null;
        Token denominator=null;
        Token KW_TABLESAMPLE770=null;
        Token LPAREN771=null;
        Token KW_BUCKET772=null;
        Token KW_OUT773=null;
        Token KW_OF774=null;
        Token KW_ON775=null;
        Token COMMA776=null;
        Token RPAREN777=null;
        List list_expr=null;
        RuleReturnScope expr = null;
        CommonTree numerator_tree=null;
        CommonTree denominator_tree=null;
        CommonTree KW_TABLESAMPLE770_tree=null;
        CommonTree LPAREN771_tree=null;
        CommonTree KW_BUCKET772_tree=null;
        CommonTree KW_OUT773_tree=null;
        CommonTree KW_OF774_tree=null;
        CommonTree KW_ON775_tree=null;
        CommonTree COMMA776_tree=null;
        CommonTree RPAREN777_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_OUT=new RewriteRuleTokenStream(adaptor,"token KW_OUT");
        RewriteRuleTokenStream stream_KW_OF=new RewriteRuleTokenStream(adaptor,"token KW_OF");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_BUCKET=new RewriteRuleTokenStream(adaptor,"token KW_BUCKET");
        RewriteRuleTokenStream stream_KW_TABLESAMPLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLESAMPLE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("table bucket sample specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1667:5: ( KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1668:5: KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN
            {
            KW_TABLESAMPLE770=(Token)input.LT(1);
            match(input,KW_TABLESAMPLE,FOLLOW_KW_TABLESAMPLE_in_tableBucketSample12198); 
            stream_KW_TABLESAMPLE.add(KW_TABLESAMPLE770);

            LPAREN771=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tableBucketSample12200); 
            stream_LPAREN.add(LPAREN771);

            KW_BUCKET772=(Token)input.LT(1);
            match(input,KW_BUCKET,FOLLOW_KW_BUCKET_in_tableBucketSample12202); 
            stream_KW_BUCKET.add(KW_BUCKET772);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1668:37: (numerator= Number )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1668:38: numerator= Number
            {
            numerator=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_tableBucketSample12207); 
            stream_Number.add(numerator);


            }

            KW_OUT773=(Token)input.LT(1);
            match(input,KW_OUT,FOLLOW_KW_OUT_in_tableBucketSample12210); 
            stream_KW_OUT.add(KW_OUT773);

            KW_OF774=(Token)input.LT(1);
            match(input,KW_OF,FOLLOW_KW_OF_in_tableBucketSample12212); 
            stream_KW_OF.add(KW_OF774);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1668:69: (denominator= Number )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1668:70: denominator= Number
            {
            denominator=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_tableBucketSample12217); 
            stream_Number.add(denominator);


            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1668:90: ( KW_ON expr+= expression ( COMMA expr+= expression )* )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==KW_ON) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1668:91: KW_ON expr+= expression ( COMMA expr+= expression )*
                    {
                    KW_ON775=(Token)input.LT(1);
                    match(input,KW_ON,FOLLOW_KW_ON_in_tableBucketSample12221); 
                    stream_KW_ON.add(KW_ON775);

                    pushFollow(FOLLOW_expression_in_tableBucketSample12225);
                    expr=expression();
                    _fsp--;

                    stream_expression.add(expr.getTree());
                    if (list_expr==null) list_expr=new ArrayList();
                    list_expr.add(expr);

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1668:114: ( COMMA expr+= expression )*
                    loop234:
                    do {
                        int alt234=2;
                        int LA234_0 = input.LA(1);

                        if ( (LA234_0==COMMA) ) {
                            alt234=1;
                        }


                        switch (alt234) {
                    	case 1 :
                    	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1668:115: COMMA expr+= expression
                    	    {
                    	    COMMA776=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_tableBucketSample12228); 
                    	    stream_COMMA.add(COMMA776);

                    	    pushFollow(FOLLOW_expression_in_tableBucketSample12232);
                    	    expr=expression();
                    	    _fsp--;

                    	    stream_expression.add(expr.getTree());
                    	    if (list_expr==null) list_expr=new ArrayList();
                    	    list_expr.add(expr);


                    	    }
                    	    break;

                    	default :
                    	    break loop234;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN777=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tableBucketSample12238); 
            stream_RPAREN.add(RPAREN777);


            // AST REWRITE
            // elements: expr, numerator, denominator
            // token labels: denominator, numerator
            // rule labels: retval
            // token list labels: 
            // rule list labels: expr
            retval.tree = root_0;
            RewriteRuleTokenStream stream_denominator=new RewriteRuleTokenStream(adaptor,"token denominator",denominator);
            RewriteRuleTokenStream stream_numerator=new RewriteRuleTokenStream(adaptor,"token numerator",numerator);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"token expr",list_expr);
            root_0 = (CommonTree)adaptor.nil();
            // 1668:149: -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1668:152: ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEBUCKETSAMPLE, "TOK_TABLEBUCKETSAMPLE"), root_1);

                adaptor.addChild(root_1, stream_numerator.next());
                adaptor.addChild(root_1, stream_denominator.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1668:200: ( $expr)*
                while ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_expr.next()).getTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableBucketSample

    public static class splitSample_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start splitSample
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1671:1: splitSample : KW_TABLESAMPLE LPAREN (numerator= Number ) KW_PERCENT RPAREN -> ^( TOK_TABLESPLITSAMPLE $numerator) ;
    public final splitSample_return splitSample() throws RecognitionException {
        splitSample_return retval = new splitSample_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token numerator=null;
        Token KW_TABLESAMPLE778=null;
        Token LPAREN779=null;
        Token KW_PERCENT780=null;
        Token RPAREN781=null;

        CommonTree numerator_tree=null;
        CommonTree KW_TABLESAMPLE778_tree=null;
        CommonTree LPAREN779_tree=null;
        CommonTree KW_PERCENT780_tree=null;
        CommonTree RPAREN781_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_TABLESAMPLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLESAMPLE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_PERCENT=new RewriteRuleTokenStream(adaptor,"token KW_PERCENT");

         msgs.push("table split sample specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1674:5: ( KW_TABLESAMPLE LPAREN (numerator= Number ) KW_PERCENT RPAREN -> ^( TOK_TABLESPLITSAMPLE $numerator) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1675:5: KW_TABLESAMPLE LPAREN (numerator= Number ) KW_PERCENT RPAREN
            {
            KW_TABLESAMPLE778=(Token)input.LT(1);
            match(input,KW_TABLESAMPLE,FOLLOW_KW_TABLESAMPLE_in_splitSample12285); 
            stream_KW_TABLESAMPLE.add(KW_TABLESAMPLE778);

            LPAREN779=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_splitSample12287); 
            stream_LPAREN.add(LPAREN779);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1675:28: (numerator= Number )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1675:29: numerator= Number
            {
            numerator=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_splitSample12293); 
            stream_Number.add(numerator);


            }

            KW_PERCENT780=(Token)input.LT(1);
            match(input,KW_PERCENT,FOLLOW_KW_PERCENT_in_splitSample12296); 
            stream_KW_PERCENT.add(KW_PERCENT780);

            RPAREN781=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_splitSample12298); 
            stream_RPAREN.add(RPAREN781);


            // AST REWRITE
            // elements: numerator
            // token labels: numerator
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_numerator=new RewriteRuleTokenStream(adaptor,"token numerator",numerator);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1675:65: -> ^( TOK_TABLESPLITSAMPLE $numerator)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1675:68: ^( TOK_TABLESPLITSAMPLE $numerator)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLESPLITSAMPLE, "TOK_TABLESPLITSAMPLE"), root_1);

                adaptor.addChild(root_1, stream_numerator.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end splitSample

    public static class tableSample_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableSample
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1678:1: tableSample : ( tableBucketSample | splitSample );
    public final tableSample_return tableSample() throws RecognitionException {
        tableSample_return retval = new tableSample_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tableBucketSample_return tableBucketSample782 = null;

        splitSample_return splitSample783 = null;



         msgs.push("table sample specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1681:5: ( tableBucketSample | splitSample )
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==KW_TABLESAMPLE) ) {
                int LA236_1 = input.LA(2);

                if ( (LA236_1==LPAREN) ) {
                    int LA236_2 = input.LA(3);

                    if ( (LA236_2==KW_BUCKET) ) {
                        alt236=1;
                    }
                    else if ( (LA236_2==Number) ) {
                        alt236=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1678:1: tableSample : ( tableBucketSample | splitSample );", 236, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1678:1: tableSample : ( tableBucketSample | splitSample );", 236, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1678:1: tableSample : ( tableBucketSample | splitSample );", 236, 0, input);

                throw nvae;
            }
            switch (alt236) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1682:5: tableBucketSample
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_tableBucketSample_in_tableSample12338);
                    tableBucketSample782=tableBucketSample();
                    _fsp--;

                    adaptor.addChild(root_0, tableBucketSample782.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1683:5: splitSample
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_splitSample_in_tableSample12346);
                    splitSample783=splitSample();
                    _fsp--;

                    adaptor.addChild(root_0, splitSample783.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableSample

    public static class tableSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableSource
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1686:1: tableSource : tabname= tableName (ts= tableSample )? (alias= Identifier )? -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? ) ;
    public final tableSource_return tableSource() throws RecognitionException {
        tableSource_return retval = new tableSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token alias=null;
        tableName_return tabname = null;

        tableSample_return ts = null;


        CommonTree alias_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_tableSample=new RewriteRuleSubtreeStream(adaptor,"rule tableSample");
         msgs.push("table source"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1689:5: (tabname= tableName (ts= tableSample )? (alias= Identifier )? -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1689:7: tabname= tableName (ts= tableSample )? (alias= Identifier )?
            {
            pushFollow(FOLLOW_tableName_in_tableSource12375);
            tabname=tableName();
            _fsp--;

            stream_tableName.add(tabname.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1689:25: (ts= tableSample )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==KW_TABLESAMPLE) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1689:26: ts= tableSample
                    {
                    pushFollow(FOLLOW_tableSample_in_tableSource12380);
                    ts=tableSample();
                    _fsp--;

                    stream_tableSample.add(ts.getTree());

                    }
                    break;

            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1689:43: (alias= Identifier )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==Identifier) ) {
                int LA238_1 = input.LA(2);

                if ( (LA238_1==KW_JOIN) ) {
                    int LA238_24 = input.LA(3);

                    if ( (!(input.LT(1).getText().equalsIgnoreCase("inner"))) ) {
                        alt238=1;
                    }
                }
                else if ( (LA238_1==EOF||LA238_1==Identifier||(LA238_1>=LPAREN && LA238_1<=RPAREN)||LA238_1==KW_ON||LA238_1==KW_SELECT||LA238_1==KW_GROUP||LA238_1==KW_MAP||(LA238_1>=KW_UNION && LA238_1<=KW_INSERT)||LA238_1==KW_LIMIT||LA238_1==KW_REDUCE||LA238_1==KW_LEFT||(LA238_1>=KW_RIGHT && LA238_1<=KW_FULL)||LA238_1==KW_LATERAL||(LA238_1>=KW_WHERE && LA238_1<=KW_SORT)) ) {
                    alt238=1;
                }
            }
            switch (alt238) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1689:44: alias= Identifier
                    {
                    alias=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_tableSource12387); 
                    stream_Identifier.add(alias);


                    }
                    break;

            }


            // AST REWRITE
            // elements: ts, alias, tabname
            // token labels: alias
            // rule labels: retval, ts, tabname
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_alias=new RewriteRuleTokenStream(adaptor,"token alias",alias);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ts=new RewriteRuleSubtreeStream(adaptor,"token ts",ts!=null?ts.tree:null);
            RewriteRuleSubtreeStream stream_tabname=new RewriteRuleSubtreeStream(adaptor,"token tabname",tabname!=null?tabname.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1690:5: -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1690:8: ^( TOK_TABREF $tabname ( $ts)? ( $alias)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABREF, "TOK_TABREF"), root_1);

                adaptor.addChild(root_1, stream_tabname.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1690:30: ( $ts)?
                if ( stream_ts.hasNext() ) {
                    adaptor.addChild(root_1, stream_ts.next());

                }
                stream_ts.reset();
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1690:35: ( $alias)?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.next());

                }
                stream_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableSource

    public static class tableName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableName
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1693:1: tableName : (db= Identifier DOT )? tab= Identifier -> ^( TOK_TABNAME ( $db)? $tab) ;
    public final tableName_return tableName() throws RecognitionException {
        tableName_return retval = new tableName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token db=null;
        Token tab=null;
        Token DOT784=null;

        CommonTree db_tree=null;
        CommonTree tab_tree=null;
        CommonTree DOT784_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("table name"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1696:5: ( (db= Identifier DOT )? tab= Identifier -> ^( TOK_TABNAME ( $db)? $tab) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1696:7: (db= Identifier DOT )? tab= Identifier
            {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1696:7: (db= Identifier DOT )?
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==Identifier) ) {
                int LA239_1 = input.LA(2);

                if ( (LA239_1==DOT) ) {
                    int LA239_2 = input.LA(3);

                    if ( (LA239_2==Identifier) ) {
                        alt239=1;
                    }
                }
            }
            switch (alt239) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1696:8: db= Identifier DOT
                    {
                    db=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_tableName12440); 
                    stream_Identifier.add(db);

                    DOT784=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_tableName12442); 
                    stream_DOT.add(DOT784);


                    }
                    break;

            }

            tab=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tableName12448); 
            stream_Identifier.add(tab);


            // AST REWRITE
            // elements: db, tab
            // token labels: db, tab
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_tab=new RewriteRuleTokenStream(adaptor,"token tab",tab);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1697:5: -> ^( TOK_TABNAME ( $db)? $tab)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1697:8: ^( TOK_TABNAME ( $db)? $tab)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABNAME, "TOK_TABNAME"), root_1);

                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1697:22: ( $db)?
                if ( stream_db.hasNext() ) {
                    adaptor.addChild(root_1, stream_db.next());

                }
                stream_db.reset();
                adaptor.addChild(root_1, stream_tab.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableName

    public static class viewName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start viewName
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1700:1: viewName : (db= Identifier DOT )? view= Identifier -> ^( TOK_TABNAME ( $db)? $view) ;
    public final viewName_return viewName() throws RecognitionException {
        viewName_return retval = new viewName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token db=null;
        Token view=null;
        Token DOT785=null;

        CommonTree db_tree=null;
        CommonTree view_tree=null;
        CommonTree DOT785_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("view name"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1703:5: ( (db= Identifier DOT )? view= Identifier -> ^( TOK_TABNAME ( $db)? $view) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1704:5: (db= Identifier DOT )? view= Identifier
            {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1704:5: (db= Identifier DOT )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==Identifier) ) {
                int LA240_1 = input.LA(2);

                if ( (LA240_1==DOT) ) {
                    alt240=1;
                }
            }
            switch (alt240) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1704:6: db= Identifier DOT
                    {
                    db=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_viewName12499); 
                    stream_Identifier.add(db);

                    DOT785=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_viewName12501); 
                    stream_DOT.add(DOT785);


                    }
                    break;

            }

            view=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_viewName12507); 
            stream_Identifier.add(view);


            // AST REWRITE
            // elements: db, view
            // token labels: db, view
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_view=new RewriteRuleTokenStream(adaptor,"token view",view);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1705:5: -> ^( TOK_TABNAME ( $db)? $view)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1705:8: ^( TOK_TABNAME ( $db)? $view)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABNAME, "TOK_TABNAME"), root_1);

                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1705:22: ( $db)?
                if ( stream_db.hasNext() ) {
                    adaptor.addChild(root_1, stream_db.next());

                }
                stream_db.reset();
                adaptor.addChild(root_1, stream_view.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end viewName

    public static class subQuerySource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start subQuerySource
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1708:1: subQuerySource : LPAREN queryStatementExpression RPAREN Identifier -> ^( TOK_SUBQUERY queryStatementExpression Identifier ) ;
    public final subQuerySource_return subQuerySource() throws RecognitionException {
        subQuerySource_return retval = new subQuerySource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN786=null;
        Token RPAREN788=null;
        Token Identifier789=null;
        queryStatementExpression_return queryStatementExpression787 = null;


        CommonTree LPAREN786_tree=null;
        CommonTree RPAREN788_tree=null;
        CommonTree Identifier789_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");
         msgs.push("subquery source"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1711:5: ( LPAREN queryStatementExpression RPAREN Identifier -> ^( TOK_SUBQUERY queryStatementExpression Identifier ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1712:5: LPAREN queryStatementExpression RPAREN Identifier
            {
            LPAREN786=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_subQuerySource12555); 
            stream_LPAREN.add(LPAREN786);

            pushFollow(FOLLOW_queryStatementExpression_in_subQuerySource12557);
            queryStatementExpression787=queryStatementExpression();
            _fsp--;

            stream_queryStatementExpression.add(queryStatementExpression787.getTree());
            RPAREN788=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_subQuerySource12559); 
            stream_RPAREN.add(RPAREN788);

            Identifier789=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_subQuerySource12561); 
            stream_Identifier.add(Identifier789);


            // AST REWRITE
            // elements: Identifier, queryStatementExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1712:55: -> ^( TOK_SUBQUERY queryStatementExpression Identifier )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1712:58: ^( TOK_SUBQUERY queryStatementExpression Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_1);

                adaptor.addChild(root_1, stream_queryStatementExpression.next());
                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end subQuerySource

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start whereClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1717:1: whereClause : KW_WHERE searchCondition -> ^( TOK_WHERE searchCondition ) ;
    public final whereClause_return whereClause() throws RecognitionException {
        whereClause_return retval = new whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_WHERE790=null;
        searchCondition_return searchCondition791 = null;


        CommonTree KW_WHERE790_tree=null;
        RewriteRuleTokenStream stream_KW_WHERE=new RewriteRuleTokenStream(adaptor,"token KW_WHERE");
        RewriteRuleSubtreeStream stream_searchCondition=new RewriteRuleSubtreeStream(adaptor,"rule searchCondition");
         msgs.push("where clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1720:5: ( KW_WHERE searchCondition -> ^( TOK_WHERE searchCondition ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1721:5: KW_WHERE searchCondition
            {
            KW_WHERE790=(Token)input.LT(1);
            match(input,KW_WHERE,FOLLOW_KW_WHERE_in_whereClause12604); 
            stream_KW_WHERE.add(KW_WHERE790);

            pushFollow(FOLLOW_searchCondition_in_whereClause12606);
            searchCondition791=searchCondition();
            _fsp--;

            stream_searchCondition.add(searchCondition791.getTree());

            // AST REWRITE
            // elements: searchCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1721:30: -> ^( TOK_WHERE searchCondition )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1721:33: ^( TOK_WHERE searchCondition )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_WHERE, "TOK_WHERE"), root_1);

                adaptor.addChild(root_1, stream_searchCondition.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end whereClause

    public static class searchCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start searchCondition
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1724:1: searchCondition : expression ;
    public final searchCondition_return searchCondition() throws RecognitionException {
        searchCondition_return retval = new searchCondition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression792 = null;



         msgs.push("search condition"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1727:5: ( expression )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1728:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_searchCondition12645);
            expression792=expression();
            _fsp--;

            adaptor.addChild(root_0, expression792.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end searchCondition

    public static class groupByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start groupByClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1734:1: groupByClause : KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* -> ^( TOK_GROUPBY ( groupByExpression )+ ) ;
    public final groupByClause_return groupByClause() throws RecognitionException {
        groupByClause_return retval = new groupByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_GROUP793=null;
        Token KW_BY794=null;
        Token COMMA796=null;
        groupByExpression_return groupByExpression795 = null;

        groupByExpression_return groupByExpression797 = null;


        CommonTree KW_GROUP793_tree=null;
        CommonTree KW_BY794_tree=null;
        CommonTree COMMA796_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_groupByExpression=new RewriteRuleSubtreeStream(adaptor,"rule groupByExpression");
         msgs.push("group by clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1737:5: ( KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* -> ^( TOK_GROUPBY ( groupByExpression )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1738:5: KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )*
            {
            KW_GROUP793=(Token)input.LT(1);
            match(input,KW_GROUP,FOLLOW_KW_GROUP_in_groupByClause12679); 
            stream_KW_GROUP.add(KW_GROUP793);

            KW_BY794=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_groupByClause12681); 
            stream_KW_BY.add(KW_BY794);

            pushFollow(FOLLOW_groupByExpression_in_groupByClause12687);
            groupByExpression795=groupByExpression();
            _fsp--;

            stream_groupByExpression.add(groupByExpression795.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1740:5: ( COMMA groupByExpression )*
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==COMMA) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1740:7: COMMA groupByExpression
            	    {
            	    COMMA796=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_groupByClause12695); 
            	    stream_COMMA.add(COMMA796);

            	    pushFollow(FOLLOW_groupByExpression_in_groupByClause12697);
            	    groupByExpression797=groupByExpression();
            	    _fsp--;

            	    stream_groupByExpression.add(groupByExpression797.getTree());

            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);


            // AST REWRITE
            // elements: groupByExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1741:5: -> ^( TOK_GROUPBY ( groupByExpression )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1741:8: ^( TOK_GROUPBY ( groupByExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GROUPBY, "TOK_GROUPBY"), root_1);

                if ( !(stream_groupByExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupByExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByExpression.next());

                }
                stream_groupByExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end groupByClause

    public static class groupByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start groupByExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1744:1: groupByExpression : expression ;
    public final groupByExpression_return groupByExpression() throws RecognitionException {
        groupByExpression_return retval = new groupByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression798 = null;



         msgs.push("group by expression"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1747:5: ( expression )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1748:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_groupByExpression12744);
            expression798=expression();
            _fsp--;

            adaptor.addChild(root_0, expression798.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end groupByExpression

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start havingClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1751:1: havingClause : KW_HAVING havingCondition -> ^( TOK_HAVING havingCondition ) ;
    public final havingClause_return havingClause() throws RecognitionException {
        havingClause_return retval = new havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_HAVING799=null;
        havingCondition_return havingCondition800 = null;


        CommonTree KW_HAVING799_tree=null;
        RewriteRuleTokenStream stream_KW_HAVING=new RewriteRuleTokenStream(adaptor,"token KW_HAVING");
        RewriteRuleSubtreeStream stream_havingCondition=new RewriteRuleSubtreeStream(adaptor,"rule havingCondition");
         msgs.push("having clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1754:5: ( KW_HAVING havingCondition -> ^( TOK_HAVING havingCondition ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1755:5: KW_HAVING havingCondition
            {
            KW_HAVING799=(Token)input.LT(1);
            match(input,KW_HAVING,FOLLOW_KW_HAVING_in_havingClause12775); 
            stream_KW_HAVING.add(KW_HAVING799);

            pushFollow(FOLLOW_havingCondition_in_havingClause12777);
            havingCondition800=havingCondition();
            _fsp--;

            stream_havingCondition.add(havingCondition800.getTree());

            // AST REWRITE
            // elements: havingCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1755:31: -> ^( TOK_HAVING havingCondition )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1755:34: ^( TOK_HAVING havingCondition )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HAVING, "TOK_HAVING"), root_1);

                adaptor.addChild(root_1, stream_havingCondition.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end havingClause

    public static class havingCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start havingCondition
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1758:1: havingCondition : expression ;
    public final havingCondition_return havingCondition() throws RecognitionException {
        havingCondition_return retval = new havingCondition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression801 = null;



         msgs.push("having condition"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1761:5: ( expression )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1762:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_havingCondition12816);
            expression801=expression();
            _fsp--;

            adaptor.addChild(root_0, expression801.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end havingCondition

    public static class orderByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderByClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1766:1: orderByClause : KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) ;
    public final orderByClause_return orderByClause() throws RecognitionException {
        orderByClause_return retval = new orderByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ORDER802=null;
        Token KW_BY803=null;
        Token COMMA805=null;
        columnRefOrder_return columnRefOrder804 = null;

        columnRefOrder_return columnRefOrder806 = null;


        CommonTree KW_ORDER802_tree=null;
        CommonTree KW_BY803_tree=null;
        CommonTree COMMA805_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_ORDER=new RewriteRuleTokenStream(adaptor,"token KW_ORDER");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnRefOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnRefOrder");
         msgs.push("order by clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1769:5: ( KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1770:5: KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )*
            {
            KW_ORDER802=(Token)input.LT(1);
            match(input,KW_ORDER,FOLLOW_KW_ORDER_in_orderByClause12848); 
            stream_KW_ORDER.add(KW_ORDER802);

            KW_BY803=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_orderByClause12850); 
            stream_KW_BY.add(KW_BY803);

            pushFollow(FOLLOW_columnRefOrder_in_orderByClause12856);
            columnRefOrder804=columnRefOrder();
            _fsp--;

            stream_columnRefOrder.add(columnRefOrder804.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1772:5: ( COMMA columnRefOrder )*
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( (LA242_0==COMMA) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1772:7: COMMA columnRefOrder
            	    {
            	    COMMA805=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_orderByClause12864); 
            	    stream_COMMA.add(COMMA805);

            	    pushFollow(FOLLOW_columnRefOrder_in_orderByClause12866);
            	    columnRefOrder806=columnRefOrder();
            	    _fsp--;

            	    stream_columnRefOrder.add(columnRefOrder806.getTree());

            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);


            // AST REWRITE
            // elements: columnRefOrder
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1772:30: -> ^( TOK_ORDERBY ( columnRefOrder )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1772:33: ^( TOK_ORDERBY ( columnRefOrder )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ORDERBY, "TOK_ORDERBY"), root_1);

                if ( !(stream_columnRefOrder.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnRefOrder.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnRefOrder.next());

                }
                stream_columnRefOrder.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderByClause

    public static class clusterByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start clusterByClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1775:1: clusterByClause : KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) ;
    public final clusterByClause_return clusterByClause() throws RecognitionException {
        clusterByClause_return retval = new clusterByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CLUSTER807=null;
        Token KW_BY808=null;
        Token COMMA810=null;
        expression_return expression809 = null;

        expression_return expression811 = null;


        CommonTree KW_CLUSTER807_tree=null;
        CommonTree KW_BY808_tree=null;
        CommonTree COMMA810_tree=null;
        RewriteRuleTokenStream stream_KW_CLUSTER=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTER");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("cluster by clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1778:5: ( KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1779:5: KW_CLUSTER KW_BY expression ( COMMA expression )*
            {
            KW_CLUSTER807=(Token)input.LT(1);
            match(input,KW_CLUSTER,FOLLOW_KW_CLUSTER_in_clusterByClause12908); 
            stream_KW_CLUSTER.add(KW_CLUSTER807);

            KW_BY808=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_clusterByClause12910); 
            stream_KW_BY.add(KW_BY808);

            pushFollow(FOLLOW_expression_in_clusterByClause12916);
            expression809=expression();
            _fsp--;

            stream_expression.add(expression809.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1781:5: ( COMMA expression )*
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( (LA243_0==COMMA) ) {
                    alt243=1;
                }


                switch (alt243) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1781:7: COMMA expression
            	    {
            	    COMMA810=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_clusterByClause12924); 
            	    stream_COMMA.add(COMMA810);

            	    pushFollow(FOLLOW_expression_in_clusterByClause12926);
            	    expression811=expression();
            	    _fsp--;

            	    stream_expression.add(expression811.getTree());

            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1781:27: -> ^( TOK_CLUSTERBY ( expression )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1781:30: ^( TOK_CLUSTERBY ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CLUSTERBY, "TOK_CLUSTERBY"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end clusterByClause

    public static class distributeByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start distributeByClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1784:1: distributeByClause : KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) ;
    public final distributeByClause_return distributeByClause() throws RecognitionException {
        distributeByClause_return retval = new distributeByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DISTRIBUTE812=null;
        Token KW_BY813=null;
        Token COMMA815=null;
        expression_return expression814 = null;

        expression_return expression816 = null;


        CommonTree KW_DISTRIBUTE812_tree=null;
        CommonTree KW_BY813_tree=null;
        CommonTree COMMA815_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_DISTRIBUTE=new RewriteRuleTokenStream(adaptor,"token KW_DISTRIBUTE");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("distribute by clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1787:5: ( KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1788:5: KW_DISTRIBUTE KW_BY expression ( COMMA expression )*
            {
            KW_DISTRIBUTE812=(Token)input.LT(1);
            match(input,KW_DISTRIBUTE,FOLLOW_KW_DISTRIBUTE_in_distributeByClause12969); 
            stream_KW_DISTRIBUTE.add(KW_DISTRIBUTE812);

            KW_BY813=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_distributeByClause12971); 
            stream_KW_BY.add(KW_BY813);

            pushFollow(FOLLOW_expression_in_distributeByClause12977);
            expression814=expression();
            _fsp--;

            stream_expression.add(expression814.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1789:16: ( COMMA expression )*
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==COMMA) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1789:17: COMMA expression
            	    {
            	    COMMA815=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_distributeByClause12980); 
            	    stream_COMMA.add(COMMA815);

            	    pushFollow(FOLLOW_expression_in_distributeByClause12982);
            	    expression816=expression();
            	    _fsp--;

            	    stream_expression.add(expression816.getTree());

            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1789:36: -> ^( TOK_DISTRIBUTEBY ( expression )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1789:39: ^( TOK_DISTRIBUTEBY ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DISTRIBUTEBY, "TOK_DISTRIBUTEBY"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end distributeByClause

    public static class sortByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sortByClause
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1792:1: sortByClause : KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) ;
    public final sortByClause_return sortByClause() throws RecognitionException {
        sortByClause_return retval = new sortByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SORT817=null;
        Token KW_BY818=null;
        Token COMMA820=null;
        columnRefOrder_return columnRefOrder819 = null;

        columnRefOrder_return columnRefOrder821 = null;


        CommonTree KW_SORT817_tree=null;
        CommonTree KW_BY818_tree=null;
        CommonTree COMMA820_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_SORT=new RewriteRuleTokenStream(adaptor,"token KW_SORT");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnRefOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnRefOrder");
         msgs.push("sort by clause"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1795:5: ( KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1796:5: KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )*
            {
            KW_SORT817=(Token)input.LT(1);
            match(input,KW_SORT,FOLLOW_KW_SORT_in_sortByClause13024); 
            stream_KW_SORT.add(KW_SORT817);

            KW_BY818=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_sortByClause13026); 
            stream_KW_BY.add(KW_BY818);

            pushFollow(FOLLOW_columnRefOrder_in_sortByClause13032);
            columnRefOrder819=columnRefOrder();
            _fsp--;

            stream_columnRefOrder.add(columnRefOrder819.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1798:5: ( COMMA columnRefOrder )*
            loop245:
            do {
                int alt245=2;
                int LA245_0 = input.LA(1);

                if ( (LA245_0==COMMA) ) {
                    alt245=1;
                }


                switch (alt245) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1798:7: COMMA columnRefOrder
            	    {
            	    COMMA820=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_sortByClause13040); 
            	    stream_COMMA.add(COMMA820);

            	    pushFollow(FOLLOW_columnRefOrder_in_sortByClause13042);
            	    columnRefOrder821=columnRefOrder();
            	    _fsp--;

            	    stream_columnRefOrder.add(columnRefOrder821.getTree());

            	    }
            	    break;

            	default :
            	    break loop245;
                }
            } while (true);


            // AST REWRITE
            // elements: columnRefOrder
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1798:30: -> ^( TOK_SORTBY ( columnRefOrder )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1798:33: ^( TOK_SORTBY ( columnRefOrder )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SORTBY, "TOK_SORTBY"), root_1);

                if ( !(stream_columnRefOrder.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnRefOrder.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnRefOrder.next());

                }
                stream_columnRefOrder.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sortByClause

    public static class function_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start function
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1802:1: function : functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName ) -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? ) -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? ) ;
    public final function_return function() throws RecognitionException {
        function_return retval = new function_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token star=null;
        Token dist=null;
        Token LPAREN823=null;
        Token COMMA825=null;
        Token RPAREN827=null;
        functionName_return functionName822 = null;

        expression_return expression824 = null;

        expression_return expression826 = null;


        CommonTree star_tree=null;
        CommonTree dist_tree=null;
        CommonTree LPAREN823_tree=null;
        CommonTree COMMA825_tree=null;
        CommonTree RPAREN827_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_functionName=new RewriteRuleSubtreeStream(adaptor,"rule functionName");
         msgs.push("function specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1805:5: ( functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName ) -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? ) -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1806:5: functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN
            {
            pushFollow(FOLLOW_functionName_in_function13085);
            functionName822=functionName();
            _fsp--;

            stream_functionName.add(functionName822.getTree());
            LPAREN823=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_function13091); 
            stream_LPAREN.add(LPAREN823);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1808:7: ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? )
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==STAR) ) {
                alt249=1;
            }
            else if ( (LA249_0==StringLiteral||LA249_0==KW_IF||LA249_0==KW_NOT||LA249_0==Identifier||(LA249_0>=LPAREN && LA249_0<=RPAREN)||LA249_0==Number||LA249_0==KW_MAP||LA249_0==KW_ARRAY||(LA249_0>=KW_STRUCT && LA249_0<=KW_UNIONTYPE)||LA249_0==KW_DISTINCT||LA249_0==PLUS||(LA249_0>=KW_CAST && LA249_0<=KW_CASE)||(LA249_0>=BigintLiteral && LA249_0<=CharSetName)||LA249_0==KW_NULL||(LA249_0>=MINUS && LA249_0<=TILDE)||(LA249_0>=KW_TRUE && LA249_0<=KW_FALSE)) ) {
                alt249=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1808:7: ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? )", 249, 0, input);

                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1809:9: (star= STAR )
                    {
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1809:9: (star= STAR )
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1809:10: star= STAR
                    {
                    star=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_function13112); 
                    stream_STAR.add(star);


                    }


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1810:11: (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )?
                    {
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1810:11: (dist= KW_DISTINCT )?
                    int alt246=2;
                    int LA246_0 = input.LA(1);

                    if ( (LA246_0==KW_DISTINCT) ) {
                        alt246=1;
                    }
                    switch (alt246) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1810:12: dist= KW_DISTINCT
                            {
                            dist=(Token)input.LT(1);
                            match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_function13128); 
                            stream_KW_DISTINCT.add(dist);


                            }
                            break;

                    }

                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1810:31: ( expression ( COMMA expression )* )?
                    int alt248=2;
                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==StringLiteral||LA248_0==KW_IF||LA248_0==KW_NOT||LA248_0==Identifier||LA248_0==LPAREN||LA248_0==Number||LA248_0==KW_MAP||LA248_0==KW_ARRAY||(LA248_0>=KW_STRUCT && LA248_0<=KW_UNIONTYPE)||LA248_0==PLUS||(LA248_0>=KW_CAST && LA248_0<=KW_CASE)||(LA248_0>=BigintLiteral && LA248_0<=CharSetName)||LA248_0==KW_NULL||(LA248_0>=MINUS && LA248_0<=TILDE)||(LA248_0>=KW_TRUE && LA248_0<=KW_FALSE)) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1810:32: expression ( COMMA expression )*
                            {
                            pushFollow(FOLLOW_expression_in_function13133);
                            expression824=expression();
                            _fsp--;

                            stream_expression.add(expression824.getTree());
                            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1810:43: ( COMMA expression )*
                            loop247:
                            do {
                                int alt247=2;
                                int LA247_0 = input.LA(1);

                                if ( (LA247_0==COMMA) ) {
                                    alt247=1;
                                }


                                switch (alt247) {
                            	case 1 :
                            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1810:44: COMMA expression
                            	    {
                            	    COMMA825=(Token)input.LT(1);
                            	    match(input,COMMA,FOLLOW_COMMA_in_function13136); 
                            	    stream_COMMA.add(COMMA825);

                            	    pushFollow(FOLLOW_expression_in_function13138);
                            	    expression826=expression();
                            	    _fsp--;

                            	    stream_expression.add(expression826.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop247;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN827=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_function13156); 
            stream_RPAREN.add(RPAREN827);


            // AST REWRITE
            // elements: functionName, expression, functionName, functionName, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1812:12: -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName )
            if (star != null) {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1812:32: ^( TOK_FUNCTIONSTAR functionName )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTIONSTAR, "TOK_FUNCTIONSTAR"), root_1);

                adaptor.addChild(root_1, stream_functionName.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1813:12: -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? )
            if (dist == null) {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1813:32: ^( TOK_FUNCTION functionName ( ( expression )+ )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_functionName.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1813:60: ( ( expression )+ )?
                if ( stream_expression.hasNext() ) {
                    if ( !(stream_expression.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_expression.hasNext() ) {
                        adaptor.addChild(root_1, stream_expression.next());

                    }
                    stream_expression.reset();

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1814:29: -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1814:32: ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTIONDI, "TOK_FUNCTIONDI"), root_1);

                adaptor.addChild(root_1, stream_functionName.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1814:62: ( ( expression )+ )?
                if ( stream_expression.hasNext() ) {
                    if ( !(stream_expression.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_expression.hasNext() ) {
                        adaptor.addChild(root_1, stream_expression.next());

                    }
                    stream_expression.reset();

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end function

    public static class functionName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start functionName
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1817:1: functionName : ( Identifier | KW_IF | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE );
    public final functionName_return functionName() throws RecognitionException {
        functionName_return retval = new functionName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set828=null;

        CommonTree set828_tree=null;

         msgs.push("function name"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1820:5: ( Identifier | KW_IF | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set828=(Token)input.LT(1);
            if ( input.LA(1)==KW_IF||input.LA(1)==Identifier||input.LA(1)==KW_MAP||input.LA(1)==KW_ARRAY||(input.LA(1)>=KW_STRUCT && input.LA(1)<=KW_UNIONTYPE) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set828));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_functionName0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end functionName

    public static class castExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1824:1: castExpression : KW_CAST LPAREN expression KW_AS primitiveType RPAREN -> ^( TOK_FUNCTION primitiveType expression ) ;
    public final castExpression_return castExpression() throws RecognitionException {
        castExpression_return retval = new castExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CAST829=null;
        Token LPAREN830=null;
        Token KW_AS832=null;
        Token RPAREN834=null;
        expression_return expression831 = null;

        primitiveType_return primitiveType833 = null;


        CommonTree KW_CAST829_tree=null;
        CommonTree LPAREN830_tree=null;
        CommonTree KW_AS832_tree=null;
        CommonTree RPAREN834_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_CAST=new RewriteRuleTokenStream(adaptor,"token KW_CAST");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
         msgs.push("cast expression"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1827:5: ( KW_CAST LPAREN expression KW_AS primitiveType RPAREN -> ^( TOK_FUNCTION primitiveType expression ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1828:5: KW_CAST LPAREN expression KW_AS primitiveType RPAREN
            {
            KW_CAST829=(Token)input.LT(1);
            match(input,KW_CAST,FOLLOW_KW_CAST_in_castExpression13318); 
            stream_KW_CAST.add(KW_CAST829);

            LPAREN830=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_castExpression13324); 
            stream_LPAREN.add(LPAREN830);

            pushFollow(FOLLOW_expression_in_castExpression13336);
            expression831=expression();
            _fsp--;

            stream_expression.add(expression831.getTree());
            KW_AS832=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_castExpression13348); 
            stream_KW_AS.add(KW_AS832);

            pushFollow(FOLLOW_primitiveType_in_castExpression13360);
            primitiveType833=primitiveType();
            _fsp--;

            stream_primitiveType.add(primitiveType833.getTree());
            RPAREN834=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_castExpression13366); 
            stream_RPAREN.add(RPAREN834);


            // AST REWRITE
            // elements: primitiveType, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1833:12: -> ^( TOK_FUNCTION primitiveType expression )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1833:15: ^( TOK_FUNCTION primitiveType expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_primitiveType.next());
                adaptor.addChild(root_1, stream_expression.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end castExpression

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start caseExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1836:1: caseExpression : KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_CASE ( expression )* ) ;
    public final caseExpression_return caseExpression() throws RecognitionException {
        caseExpression_return retval = new caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CASE835=null;
        Token KW_WHEN837=null;
        Token KW_THEN839=null;
        Token KW_ELSE841=null;
        Token KW_END843=null;
        expression_return expression836 = null;

        expression_return expression838 = null;

        expression_return expression840 = null;

        expression_return expression842 = null;


        CommonTree KW_CASE835_tree=null;
        CommonTree KW_WHEN837_tree=null;
        CommonTree KW_THEN839_tree=null;
        CommonTree KW_ELSE841_tree=null;
        CommonTree KW_END843_tree=null;
        RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
        RewriteRuleTokenStream stream_KW_CASE=new RewriteRuleTokenStream(adaptor,"token KW_CASE");
        RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
        RewriteRuleTokenStream stream_KW_END=new RewriteRuleTokenStream(adaptor,"token KW_END");
        RewriteRuleTokenStream stream_KW_ELSE=new RewriteRuleTokenStream(adaptor,"token KW_ELSE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("case expression"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1839:5: ( KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_CASE ( expression )* ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1840:5: KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END
            {
            KW_CASE835=(Token)input.LT(1);
            match(input,KW_CASE,FOLLOW_KW_CASE_in_caseExpression13407); 
            stream_KW_CASE.add(KW_CASE835);

            pushFollow(FOLLOW_expression_in_caseExpression13409);
            expression836=expression();
            _fsp--;

            stream_expression.add(expression836.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1841:5: ( KW_WHEN expression KW_THEN expression )+
            int cnt250=0;
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( (LA250_0==KW_WHEN) ) {
                    alt250=1;
                }


                switch (alt250) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1841:6: KW_WHEN expression KW_THEN expression
            	    {
            	    KW_WHEN837=(Token)input.LT(1);
            	    match(input,KW_WHEN,FOLLOW_KW_WHEN_in_caseExpression13416); 
            	    stream_KW_WHEN.add(KW_WHEN837);

            	    pushFollow(FOLLOW_expression_in_caseExpression13418);
            	    expression838=expression();
            	    _fsp--;

            	    stream_expression.add(expression838.getTree());
            	    KW_THEN839=(Token)input.LT(1);
            	    match(input,KW_THEN,FOLLOW_KW_THEN_in_caseExpression13420); 
            	    stream_KW_THEN.add(KW_THEN839);

            	    pushFollow(FOLLOW_expression_in_caseExpression13422);
            	    expression840=expression();
            	    _fsp--;

            	    stream_expression.add(expression840.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt250 >= 1 ) break loop250;
                        EarlyExitException eee =
                            new EarlyExitException(250, input);
                        throw eee;
                }
                cnt250++;
            } while (true);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1842:5: ( KW_ELSE expression )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==KW_ELSE) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1842:6: KW_ELSE expression
                    {
                    KW_ELSE841=(Token)input.LT(1);
                    match(input,KW_ELSE,FOLLOW_KW_ELSE_in_caseExpression13431); 
                    stream_KW_ELSE.add(KW_ELSE841);

                    pushFollow(FOLLOW_expression_in_caseExpression13433);
                    expression842=expression();
                    _fsp--;

                    stream_expression.add(expression842.getTree());

                    }
                    break;

            }

            KW_END843=(Token)input.LT(1);
            match(input,KW_END,FOLLOW_KW_END_in_caseExpression13441); 
            stream_KW_END.add(KW_END843);


            // AST REWRITE
            // elements: expression, KW_CASE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1843:12: -> ^( TOK_FUNCTION KW_CASE ( expression )* )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1843:15: ^( TOK_FUNCTION KW_CASE ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_KW_CASE.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1843:38: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end caseExpression

    public static class whenExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start whenExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1846:1: whenExpression : KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_WHEN ( expression )* ) ;
    public final whenExpression_return whenExpression() throws RecognitionException {
        whenExpression_return retval = new whenExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CASE844=null;
        Token KW_WHEN845=null;
        Token KW_THEN847=null;
        Token KW_ELSE849=null;
        Token KW_END851=null;
        expression_return expression846 = null;

        expression_return expression848 = null;

        expression_return expression850 = null;


        CommonTree KW_CASE844_tree=null;
        CommonTree KW_WHEN845_tree=null;
        CommonTree KW_THEN847_tree=null;
        CommonTree KW_ELSE849_tree=null;
        CommonTree KW_END851_tree=null;
        RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
        RewriteRuleTokenStream stream_KW_CASE=new RewriteRuleTokenStream(adaptor,"token KW_CASE");
        RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
        RewriteRuleTokenStream stream_KW_END=new RewriteRuleTokenStream(adaptor,"token KW_END");
        RewriteRuleTokenStream stream_KW_ELSE=new RewriteRuleTokenStream(adaptor,"token KW_ELSE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("case expression"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1849:5: ( KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_WHEN ( expression )* ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1850:5: KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END
            {
            KW_CASE844=(Token)input.LT(1);
            match(input,KW_CASE,FOLLOW_KW_CASE_in_whenExpression13483); 
            stream_KW_CASE.add(KW_CASE844);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1851:6: ( KW_WHEN expression KW_THEN expression )+
            int cnt252=0;
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);

                if ( (LA252_0==KW_WHEN) ) {
                    alt252=1;
                }


                switch (alt252) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1851:8: KW_WHEN expression KW_THEN expression
            	    {
            	    KW_WHEN845=(Token)input.LT(1);
            	    match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenExpression13492); 
            	    stream_KW_WHEN.add(KW_WHEN845);

            	    pushFollow(FOLLOW_expression_in_whenExpression13494);
            	    expression846=expression();
            	    _fsp--;

            	    stream_expression.add(expression846.getTree());
            	    KW_THEN847=(Token)input.LT(1);
            	    match(input,KW_THEN,FOLLOW_KW_THEN_in_whenExpression13496); 
            	    stream_KW_THEN.add(KW_THEN847);

            	    pushFollow(FOLLOW_expression_in_whenExpression13498);
            	    expression848=expression();
            	    _fsp--;

            	    stream_expression.add(expression848.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt252 >= 1 ) break loop252;
                        EarlyExitException eee =
                            new EarlyExitException(252, input);
                        throw eee;
                }
                cnt252++;
            } while (true);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1852:5: ( KW_ELSE expression )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==KW_ELSE) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1852:6: KW_ELSE expression
                    {
                    KW_ELSE849=(Token)input.LT(1);
                    match(input,KW_ELSE,FOLLOW_KW_ELSE_in_whenExpression13507); 
                    stream_KW_ELSE.add(KW_ELSE849);

                    pushFollow(FOLLOW_expression_in_whenExpression13509);
                    expression850=expression();
                    _fsp--;

                    stream_expression.add(expression850.getTree());

                    }
                    break;

            }

            KW_END851=(Token)input.LT(1);
            match(input,KW_END,FOLLOW_KW_END_in_whenExpression13517); 
            stream_KW_END.add(KW_END851);


            // AST REWRITE
            // elements: KW_WHEN, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1853:12: -> ^( TOK_FUNCTION KW_WHEN ( expression )* )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1853:15: ^( TOK_FUNCTION KW_WHEN ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_KW_WHEN.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1853:38: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end whenExpression

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constant
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1856:1: constant : ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue );
    public final constant_return constant() throws RecognitionException {
        constant_return retval = new constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Number852=null;
        Token StringLiteral853=null;
        Token BigintLiteral855=null;
        Token SmallintLiteral856=null;
        Token TinyintLiteral857=null;
        stringLiteralSequence_return stringLiteralSequence854 = null;

        charSetStringLiteral_return charSetStringLiteral858 = null;

        booleanValue_return booleanValue859 = null;


        CommonTree Number852_tree=null;
        CommonTree StringLiteral853_tree=null;
        CommonTree BigintLiteral855_tree=null;
        CommonTree SmallintLiteral856_tree=null;
        CommonTree TinyintLiteral857_tree=null;

         msgs.push("constant"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1859:5: ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue )
            int alt254=8;
            switch ( input.LA(1) ) {
            case Number:
                {
                alt254=1;
                }
                break;
            case StringLiteral:
                {
                int LA254_2 = input.LA(2);

                if ( (LA254_2==StringLiteral) ) {
                    alt254=3;
                }
                else if ( (LA254_2==EOF||LA254_2==KW_FROM||(LA254_2>=KW_NOT && LA254_2<=KW_OR)||LA254_2==Identifier||(LA254_2>=RPAREN && LA254_2<=COMMA)||(LA254_2>=KW_LIKE && LA254_2<=KW_AS)||LA254_2==KW_IN||LA254_2==DOT||LA254_2==KW_DESC||LA254_2==KW_SELECT||LA254_2==KW_GROUP||(LA254_2>=KW_RECORDWRITER && LA254_2<=KW_ROW)||LA254_2==EQUAL||LA254_2==KW_MAP||LA254_2==KW_ASC||(LA254_2>=LESSTHAN && LA254_2<=GREATERTHAN)||(LA254_2>=KW_UNION && LA254_2<=KW_INSERT)||LA254_2==KW_LIMIT||(LA254_2>=KW_USING && LA254_2<=PLUS)||LA254_2==KW_REDUCE||(LA254_2>=KW_JOIN && LA254_2<=KW_LEFT)||(LA254_2>=KW_RIGHT && LA254_2<=KW_FULL)||(LA254_2>=KW_WHERE && LA254_2<=KW_SORT)||(LA254_2>=KW_WHEN && LA254_2<=KW_END)||(LA254_2>=LSQUARE && LA254_2<=MINUS)||(LA254_2>=KW_IS && LA254_2<=KW_AND)) ) {
                    alt254=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1856:1: constant : ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue );", 254, 2, input);

                    throw nvae;
                }
                }
                break;
            case BigintLiteral:
                {
                alt254=4;
                }
                break;
            case SmallintLiteral:
                {
                alt254=5;
                }
                break;
            case TinyintLiteral:
                {
                alt254=6;
                }
                break;
            case CharSetName:
                {
                alt254=7;
                }
                break;
            case KW_TRUE:
            case KW_FALSE:
                {
                alt254=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1856:1: constant : ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue );", 254, 0, input);

                throw nvae;
            }

            switch (alt254) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1860:5: Number
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Number852=(Token)input.LT(1);
                    match(input,Number,FOLLOW_Number_in_constant13559); 
                    Number852_tree = (CommonTree)adaptor.create(Number852);
                    adaptor.addChild(root_0, Number852_tree);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1861:7: StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    StringLiteral853=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_constant13567); 
                    StringLiteral853_tree = (CommonTree)adaptor.create(StringLiteral853);
                    adaptor.addChild(root_0, StringLiteral853_tree);


                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1862:7: stringLiteralSequence
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringLiteralSequence_in_constant13575);
                    stringLiteralSequence854=stringLiteralSequence();
                    _fsp--;

                    adaptor.addChild(root_0, stringLiteralSequence854.getTree());

                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1863:7: BigintLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BigintLiteral855=(Token)input.LT(1);
                    match(input,BigintLiteral,FOLLOW_BigintLiteral_in_constant13583); 
                    BigintLiteral855_tree = (CommonTree)adaptor.create(BigintLiteral855);
                    adaptor.addChild(root_0, BigintLiteral855_tree);


                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1864:7: SmallintLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SmallintLiteral856=(Token)input.LT(1);
                    match(input,SmallintLiteral,FOLLOW_SmallintLiteral_in_constant13591); 
                    SmallintLiteral856_tree = (CommonTree)adaptor.create(SmallintLiteral856);
                    adaptor.addChild(root_0, SmallintLiteral856_tree);


                    }
                    break;
                case 6 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1865:7: TinyintLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TinyintLiteral857=(Token)input.LT(1);
                    match(input,TinyintLiteral,FOLLOW_TinyintLiteral_in_constant13599); 
                    TinyintLiteral857_tree = (CommonTree)adaptor.create(TinyintLiteral857);
                    adaptor.addChild(root_0, TinyintLiteral857_tree);


                    }
                    break;
                case 7 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1866:7: charSetStringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_charSetStringLiteral_in_constant13607);
                    charSetStringLiteral858=charSetStringLiteral();
                    _fsp--;

                    adaptor.addChild(root_0, charSetStringLiteral858.getTree());

                    }
                    break;
                case 8 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1867:7: booleanValue
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanValue_in_constant13615);
                    booleanValue859=booleanValue();
                    _fsp--;

                    adaptor.addChild(root_0, booleanValue859.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end constant

    public static class stringLiteralSequence_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start stringLiteralSequence
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1870:1: stringLiteralSequence : StringLiteral ( StringLiteral )+ -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ ) ;
    public final stringLiteralSequence_return stringLiteralSequence() throws RecognitionException {
        stringLiteralSequence_return retval = new stringLiteralSequence_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token StringLiteral860=null;
        Token StringLiteral861=null;

        CommonTree StringLiteral860_tree=null;
        CommonTree StringLiteral861_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1871:5: ( StringLiteral ( StringLiteral )+ -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1872:5: StringLiteral ( StringLiteral )+
            {
            StringLiteral860=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_stringLiteralSequence13636); 
            stream_StringLiteral.add(StringLiteral860);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1872:19: ( StringLiteral )+
            int cnt255=0;
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);

                if ( (LA255_0==StringLiteral) ) {
                    alt255=1;
                }


                switch (alt255) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1872:19: StringLiteral
            	    {
            	    StringLiteral861=(Token)input.LT(1);
            	    match(input,StringLiteral,FOLLOW_StringLiteral_in_stringLiteralSequence13638); 
            	    stream_StringLiteral.add(StringLiteral861);


            	    }
            	    break;

            	default :
            	    if ( cnt255 >= 1 ) break loop255;
                        EarlyExitException eee =
                            new EarlyExitException(255, input);
                        throw eee;
                }
                cnt255++;
            } while (true);


            // AST REWRITE
            // elements: StringLiteral, StringLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1872:34: -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1872:37: ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_STRINGLITERALSEQUENCE, "TOK_STRINGLITERALSEQUENCE"), root_1);

                adaptor.addChild(root_1, stream_StringLiteral.next());
                if ( !(stream_StringLiteral.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_StringLiteral.hasNext() ) {
                    adaptor.addChild(root_1, stream_StringLiteral.next());

                }
                stream_StringLiteral.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end stringLiteralSequence

    public static class charSetStringLiteral_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start charSetStringLiteral
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1875:1: charSetStringLiteral : csName= CharSetName csLiteral= CharSetLiteral -> ^( TOK_CHARSETLITERAL $csName $csLiteral) ;
    public final charSetStringLiteral_return charSetStringLiteral() throws RecognitionException {
        charSetStringLiteral_return retval = new charSetStringLiteral_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token csName=null;
        Token csLiteral=null;

        CommonTree csName_tree=null;
        CommonTree csLiteral_tree=null;
        RewriteRuleTokenStream stream_CharSetLiteral=new RewriteRuleTokenStream(adaptor,"token CharSetLiteral");
        RewriteRuleTokenStream stream_CharSetName=new RewriteRuleTokenStream(adaptor,"token CharSetName");

         msgs.push("character string literal"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1878:5: (csName= CharSetName csLiteral= CharSetLiteral -> ^( TOK_CHARSETLITERAL $csName $csLiteral) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1879:5: csName= CharSetName csLiteral= CharSetLiteral
            {
            csName=(Token)input.LT(1);
            match(input,CharSetName,FOLLOW_CharSetName_in_charSetStringLiteral13683); 
            stream_CharSetName.add(csName);

            csLiteral=(Token)input.LT(1);
            match(input,CharSetLiteral,FOLLOW_CharSetLiteral_in_charSetStringLiteral13687); 
            stream_CharSetLiteral.add(csLiteral);


            // AST REWRITE
            // elements: csLiteral, csName
            // token labels: csName, csLiteral
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_csName=new RewriteRuleTokenStream(adaptor,"token csName",csName);
            RewriteRuleTokenStream stream_csLiteral=new RewriteRuleTokenStream(adaptor,"token csLiteral",csLiteral);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1879:49: -> ^( TOK_CHARSETLITERAL $csName $csLiteral)
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1879:52: ^( TOK_CHARSETLITERAL $csName $csLiteral)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CHARSETLITERAL, "TOK_CHARSETLITERAL"), root_1);

                adaptor.addChild(root_1, stream_csName.next());
                adaptor.addChild(root_1, stream_csLiteral.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end charSetStringLiteral

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1882:1: expression : precedenceOrExpression ;
    public final expression_return expression() throws RecognitionException {
        expression_return retval = new expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceOrExpression_return precedenceOrExpression862 = null;



         msgs.push("expression specification"); 
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1885:5: ( precedenceOrExpression )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1886:5: precedenceOrExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceOrExpression_in_expression13730);
            precedenceOrExpression862=precedenceOrExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceOrExpression862.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expression

    public static class atomExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start atomExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1889:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );
    public final atomExpression_return atomExpression() throws RecognitionException {
        atomExpression_return retval = new atomExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_NULL863=null;
        Token LPAREN870=null;
        Token RPAREN872=null;
        constant_return constant864 = null;

        function_return function865 = null;

        castExpression_return castExpression866 = null;

        caseExpression_return caseExpression867 = null;

        whenExpression_return whenExpression868 = null;

        tableOrColumn_return tableOrColumn869 = null;

        expression_return expression871 = null;


        CommonTree KW_NULL863_tree=null;
        CommonTree LPAREN870_tree=null;
        CommonTree RPAREN872_tree=null;
        RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1890:5: ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN )
            int alt256=8;
            switch ( input.LA(1) ) {
            case KW_NULL:
                {
                alt256=1;
                }
                break;
            case StringLiteral:
            case Number:
            case BigintLiteral:
            case SmallintLiteral:
            case TinyintLiteral:
            case CharSetName:
            case KW_TRUE:
            case KW_FALSE:
                {
                alt256=2;
                }
                break;
            case Identifier:
                {
                int LA256_10 = input.LA(2);

                if ( (LA256_10==LPAREN) ) {
                    alt256=3;
                }
                else if ( (LA256_10==EOF||LA256_10==KW_FROM||(LA256_10>=KW_NOT && LA256_10<=KW_OR)||LA256_10==Identifier||(LA256_10>=RPAREN && LA256_10<=COMMA)||(LA256_10>=KW_LIKE && LA256_10<=KW_AS)||LA256_10==KW_IN||LA256_10==DOT||LA256_10==KW_DESC||LA256_10==KW_SELECT||LA256_10==KW_GROUP||(LA256_10>=KW_RECORDWRITER && LA256_10<=KW_ROW)||LA256_10==EQUAL||LA256_10==KW_MAP||LA256_10==KW_ASC||(LA256_10>=LESSTHAN && LA256_10<=GREATERTHAN)||(LA256_10>=KW_UNION && LA256_10<=KW_INSERT)||LA256_10==KW_LIMIT||(LA256_10>=KW_USING && LA256_10<=PLUS)||LA256_10==KW_REDUCE||(LA256_10>=KW_JOIN && LA256_10<=KW_LEFT)||(LA256_10>=KW_RIGHT && LA256_10<=KW_FULL)||(LA256_10>=KW_WHERE && LA256_10<=KW_SORT)||(LA256_10>=KW_WHEN && LA256_10<=KW_END)||(LA256_10>=LSQUARE && LA256_10<=MINUS)||(LA256_10>=KW_IS && LA256_10<=KW_AND)) ) {
                    alt256=7;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1889:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );", 256, 10, input);

                    throw nvae;
                }
                }
                break;
            case KW_CAST:
                {
                alt256=4;
                }
                break;
            case KW_CASE:
                {
                int LA256_12 = input.LA(2);

                if ( (LA256_12==StringLiteral||LA256_12==KW_IF||LA256_12==KW_NOT||LA256_12==Identifier||LA256_12==LPAREN||LA256_12==Number||LA256_12==KW_MAP||LA256_12==KW_ARRAY||(LA256_12>=KW_STRUCT && LA256_12<=KW_UNIONTYPE)||LA256_12==PLUS||(LA256_12>=KW_CAST && LA256_12<=KW_CASE)||(LA256_12>=BigintLiteral && LA256_12<=CharSetName)||LA256_12==KW_NULL||(LA256_12>=MINUS && LA256_12<=TILDE)||(LA256_12>=KW_TRUE && LA256_12<=KW_FALSE)) ) {
                    alt256=5;
                }
                else if ( (LA256_12==KW_WHEN) ) {
                    alt256=6;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1889:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );", 256, 12, input);

                    throw nvae;
                }
                }
                break;
            case KW_IF:
            case KW_MAP:
            case KW_ARRAY:
            case KW_STRUCT:
            case KW_UNIONTYPE:
                {
                alt256=3;
                }
                break;
            case LPAREN:
                {
                alt256=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1889:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );", 256, 0, input);

                throw nvae;
            }

            switch (alt256) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1891:5: KW_NULL
                    {
                    KW_NULL863=(Token)input.LT(1);
                    match(input,KW_NULL,FOLLOW_KW_NULL_in_atomExpression13751); 
                    stream_KW_NULL.add(KW_NULL863);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1891:13: -> TOK_NULL
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_NULL, "TOK_NULL"));

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1892:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_atomExpression13763);
                    constant864=constant();
                    _fsp--;

                    adaptor.addChild(root_0, constant864.getTree());

                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1893:7: function
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_function_in_atomExpression13771);
                    function865=function();
                    _fsp--;

                    adaptor.addChild(root_0, function865.getTree());

                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1894:7: castExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_atomExpression13779);
                    castExpression866=castExpression();
                    _fsp--;

                    adaptor.addChild(root_0, castExpression866.getTree());

                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1895:7: caseExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_caseExpression_in_atomExpression13787);
                    caseExpression867=caseExpression();
                    _fsp--;

                    adaptor.addChild(root_0, caseExpression867.getTree());

                    }
                    break;
                case 6 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1896:7: whenExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_whenExpression_in_atomExpression13795);
                    whenExpression868=whenExpression();
                    _fsp--;

                    adaptor.addChild(root_0, whenExpression868.getTree());

                    }
                    break;
                case 7 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1897:7: tableOrColumn
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_tableOrColumn_in_atomExpression13803);
                    tableOrColumn869=tableOrColumn();
                    _fsp--;

                    adaptor.addChild(root_0, tableOrColumn869.getTree());

                    }
                    break;
                case 8 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1898:7: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN870=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_atomExpression13811); 
                    pushFollow(FOLLOW_expression_in_atomExpression13814);
                    expression871=expression();
                    _fsp--;

                    adaptor.addChild(root_0, expression871.getTree());
                    RPAREN872=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_atomExpression13816); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end atomExpression

    public static class precedenceFieldExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceFieldExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1902:1: precedenceFieldExpression : atomExpression ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )* ;
    public final precedenceFieldExpression_return precedenceFieldExpression() throws RecognitionException {
        precedenceFieldExpression_return retval = new precedenceFieldExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSQUARE874=null;
        Token RSQUARE876=null;
        Token DOT877=null;
        Token Identifier878=null;
        atomExpression_return atomExpression873 = null;

        expression_return expression875 = null;


        CommonTree LSQUARE874_tree=null;
        CommonTree RSQUARE876_tree=null;
        CommonTree DOT877_tree=null;
        CommonTree Identifier878_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1903:5: ( atomExpression ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1904:5: atomExpression ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_atomExpression_in_precedenceFieldExpression13839);
            atomExpression873=atomExpression();
            _fsp--;

            adaptor.addChild(root_0, atomExpression873.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1904:20: ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )*
            loop257:
            do {
                int alt257=3;
                int LA257_0 = input.LA(1);

                if ( (LA257_0==LSQUARE) ) {
                    alt257=1;
                }
                else if ( (LA257_0==DOT) ) {
                    alt257=2;
                }


                switch (alt257) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1904:21: ( LSQUARE expression RSQUARE )
            	    {
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1904:21: ( LSQUARE expression RSQUARE )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1904:22: LSQUARE expression RSQUARE
            	    {
            	    LSQUARE874=(Token)input.LT(1);
            	    match(input,LSQUARE,FOLLOW_LSQUARE_in_precedenceFieldExpression13843); 
            	    LSQUARE874_tree = (CommonTree)adaptor.create(LSQUARE874);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LSQUARE874_tree, root_0);

            	    pushFollow(FOLLOW_expression_in_precedenceFieldExpression13846);
            	    expression875=expression();
            	    _fsp--;

            	    adaptor.addChild(root_0, expression875.getTree());
            	    RSQUARE876=(Token)input.LT(1);
            	    match(input,RSQUARE,FOLLOW_RSQUARE_in_precedenceFieldExpression13848); 

            	    }


            	    }
            	    break;
            	case 2 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1904:54: ( DOT Identifier )
            	    {
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1904:54: ( DOT Identifier )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1904:55: DOT Identifier
            	    {
            	    DOT877=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_precedenceFieldExpression13855); 
            	    DOT877_tree = (CommonTree)adaptor.create(DOT877);
            	    root_0 = (CommonTree)adaptor.becomeRoot(DOT877_tree, root_0);

            	    Identifier878=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_precedenceFieldExpression13858); 
            	    Identifier878_tree = (CommonTree)adaptor.create(Identifier878);
            	    adaptor.addChild(root_0, Identifier878_tree);


            	    }


            	    }
            	    break;

            	default :
            	    break loop257;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceFieldExpression

    public static class precedenceUnaryOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceUnaryOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1907:1: precedenceUnaryOperator : ( PLUS | MINUS | TILDE );
    public final precedenceUnaryOperator_return precedenceUnaryOperator() throws RecognitionException {
        precedenceUnaryOperator_return retval = new precedenceUnaryOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set879=null;

        CommonTree set879_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1908:5: ( PLUS | MINUS | TILDE )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set879=(Token)input.LT(1);
            if ( input.LA(1)==PLUS||(input.LA(1)>=MINUS && input.LA(1)<=TILDE) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set879));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedenceUnaryOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceUnaryOperator

    public static class nullCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nullCondition
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1912:1: nullCondition : ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) );
    public final nullCondition_return nullCondition() throws RecognitionException {
        nullCondition_return retval = new nullCondition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_NULL880=null;
        Token KW_NOT881=null;
        Token KW_NULL882=null;

        CommonTree KW_NULL880_tree=null;
        CommonTree KW_NOT881_tree=null;
        CommonTree KW_NULL882_tree=null;
        RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1913:5: ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) )
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==KW_NULL) ) {
                alt258=1;
            }
            else if ( (LA258_0==KW_NOT) ) {
                alt258=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1912:1: nullCondition : ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) );", 258, 0, input);

                throw nvae;
            }
            switch (alt258) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1914:5: KW_NULL
                    {
                    KW_NULL880=(Token)input.LT(1);
                    match(input,KW_NULL,FOLLOW_KW_NULL_in_nullCondition13911); 
                    stream_KW_NULL.add(KW_NULL880);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1914:13: -> ^( TOK_ISNULL )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1914:16: ^( TOK_ISNULL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ISNULL, "TOK_ISNULL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1915:7: KW_NOT KW_NULL
                    {
                    KW_NOT881=(Token)input.LT(1);
                    match(input,KW_NOT,FOLLOW_KW_NOT_in_nullCondition13925); 
                    stream_KW_NOT.add(KW_NOT881);

                    KW_NULL882=(Token)input.LT(1);
                    match(input,KW_NULL,FOLLOW_KW_NULL_in_nullCondition13927); 
                    stream_KW_NULL.add(KW_NULL882);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1915:22: -> ^( TOK_ISNOTNULL )
                    {
                        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1915:25: ^( TOK_ISNOTNULL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ISNOTNULL, "TOK_ISNOTNULL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end nullCondition

    public static class precedenceUnaryPrefixExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceUnaryPrefixExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1918:1: precedenceUnaryPrefixExpression : ( precedenceUnaryOperator )* precedenceFieldExpression ;
    public final precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression() throws RecognitionException {
        precedenceUnaryPrefixExpression_return retval = new precedenceUnaryPrefixExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceUnaryOperator_return precedenceUnaryOperator883 = null;

        precedenceFieldExpression_return precedenceFieldExpression884 = null;



        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1919:5: ( ( precedenceUnaryOperator )* precedenceFieldExpression )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1920:5: ( precedenceUnaryOperator )* precedenceFieldExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1920:5: ( precedenceUnaryOperator )*
            loop259:
            do {
                int alt259=2;
                int LA259_0 = input.LA(1);

                if ( (LA259_0==PLUS||(LA259_0>=MINUS && LA259_0<=TILDE)) ) {
                    alt259=1;
                }


                switch (alt259) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1920:6: precedenceUnaryOperator
            	    {
            	    pushFollow(FOLLOW_precedenceUnaryOperator_in_precedenceUnaryPrefixExpression13955);
            	    precedenceUnaryOperator883=precedenceUnaryOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceUnaryOperator883.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop259;
                }
            } while (true);

            pushFollow(FOLLOW_precedenceFieldExpression_in_precedenceUnaryPrefixExpression13960);
            precedenceFieldExpression884=precedenceFieldExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceFieldExpression884.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceUnaryPrefixExpression

    public static class precedenceUnarySuffixExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceUnarySuffixExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1923:1: precedenceUnarySuffixExpression : precedenceUnaryPrefixExpression (a= KW_IS nullCondition )? -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression ) -> precedenceUnaryPrefixExpression ;
    public final precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression() throws RecognitionException {
        precedenceUnarySuffixExpression_return retval = new precedenceUnarySuffixExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression885 = null;

        nullCondition_return nullCondition886 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_KW_IS=new RewriteRuleTokenStream(adaptor,"token KW_IS");
        RewriteRuleSubtreeStream stream_precedenceUnaryPrefixExpression=new RewriteRuleSubtreeStream(adaptor,"rule precedenceUnaryPrefixExpression");
        RewriteRuleSubtreeStream stream_nullCondition=new RewriteRuleSubtreeStream(adaptor,"rule nullCondition");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1924:5: ( precedenceUnaryPrefixExpression (a= KW_IS nullCondition )? -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression ) -> precedenceUnaryPrefixExpression )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1924:7: precedenceUnaryPrefixExpression (a= KW_IS nullCondition )?
            {
            pushFollow(FOLLOW_precedenceUnaryPrefixExpression_in_precedenceUnarySuffixExpression13977);
            precedenceUnaryPrefixExpression885=precedenceUnaryPrefixExpression();
            _fsp--;

            stream_precedenceUnaryPrefixExpression.add(precedenceUnaryPrefixExpression885.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1924:39: (a= KW_IS nullCondition )?
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==KW_IS) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1924:40: a= KW_IS nullCondition
                    {
                    a=(Token)input.LT(1);
                    match(input,KW_IS,FOLLOW_KW_IS_in_precedenceUnarySuffixExpression13982); 
                    stream_KW_IS.add(a);

                    pushFollow(FOLLOW_nullCondition_in_precedenceUnarySuffixExpression13984);
                    nullCondition886=nullCondition();
                    _fsp--;

                    stream_nullCondition.add(nullCondition886.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: precedenceUnaryPrefixExpression, precedenceUnaryPrefixExpression, nullCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1925:5: -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression )
            if (a != null) {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1925:22: ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_nullCondition.next());
                adaptor.addChild(root_1, stream_precedenceUnaryPrefixExpression.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1926:5: -> precedenceUnaryPrefixExpression
            {
                adaptor.addChild(root_0, stream_precedenceUnaryPrefixExpression.next());

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceUnarySuffixExpression

    public static class precedenceBitwiseXorOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseXorOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1930:1: precedenceBitwiseXorOperator : BITWISEXOR ;
    public final precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator() throws RecognitionException {
        precedenceBitwiseXorOperator_return retval = new precedenceBitwiseXorOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BITWISEXOR887=null;

        CommonTree BITWISEXOR887_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1931:5: ( BITWISEXOR )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1932:5: BITWISEXOR
            {
            root_0 = (CommonTree)adaptor.nil();

            BITWISEXOR887=(Token)input.LT(1);
            match(input,BITWISEXOR,FOLLOW_BITWISEXOR_in_precedenceBitwiseXorOperator14032); 
            BITWISEXOR887_tree = (CommonTree)adaptor.create(BITWISEXOR887);
            adaptor.addChild(root_0, BITWISEXOR887_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseXorOperator

    public static class precedenceBitwiseXorExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseXorExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1935:1: precedenceBitwiseXorExpression : precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )* ;
    public final precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression() throws RecognitionException {
        precedenceBitwiseXorExpression_return retval = new precedenceBitwiseXorExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression888 = null;

        precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator889 = null;

        precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression890 = null;



        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1936:5: ( precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1937:5: precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression14053);
            precedenceUnarySuffixExpression888=precedenceUnarySuffixExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceUnarySuffixExpression888.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1937:37: ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )*
            loop261:
            do {
                int alt261=2;
                int LA261_0 = input.LA(1);

                if ( (LA261_0==BITWISEXOR) ) {
                    alt261=1;
                }


                switch (alt261) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1937:38: precedenceBitwiseXorOperator precedenceUnarySuffixExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseXorOperator_in_precedenceBitwiseXorExpression14056);
            	    precedenceBitwiseXorOperator889=precedenceBitwiseXorOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceBitwiseXorOperator889.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression14059);
            	    precedenceUnarySuffixExpression890=precedenceUnarySuffixExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceUnarySuffixExpression890.getTree());

            	    }
            	    break;

            	default :
            	    break loop261;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseXorExpression

    public static class precedenceStarOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceStarOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1941:1: precedenceStarOperator : ( STAR | DIVIDE | MOD | DIV );
    public final precedenceStarOperator_return precedenceStarOperator() throws RecognitionException {
        precedenceStarOperator_return retval = new precedenceStarOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set891=null;

        CommonTree set891_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1942:5: ( STAR | DIVIDE | MOD | DIV )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set891=(Token)input.LT(1);
            if ( (input.LA(1)>=DIVIDE && input.LA(1)<=STAR)||(input.LA(1)>=MOD && input.LA(1)<=DIV) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set891));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedenceStarOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceStarOperator

    public static class precedenceStarExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceStarExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1946:1: precedenceStarExpression : precedenceBitwiseXorExpression ( precedenceStarOperator precedenceBitwiseXorExpression )* ;
    public final precedenceStarExpression_return precedenceStarExpression() throws RecognitionException {
        precedenceStarExpression_return retval = new precedenceStarExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression892 = null;

        precedenceStarOperator_return precedenceStarOperator893 = null;

        precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression894 = null;



        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1947:5: ( precedenceBitwiseXorExpression ( precedenceStarOperator precedenceBitwiseXorExpression )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1948:5: precedenceBitwiseXorExpression ( precedenceStarOperator precedenceBitwiseXorExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression14116);
            precedenceBitwiseXorExpression892=precedenceBitwiseXorExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceBitwiseXorExpression892.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1948:36: ( precedenceStarOperator precedenceBitwiseXorExpression )*
            loop262:
            do {
                int alt262=2;
                int LA262_0 = input.LA(1);

                if ( ((LA262_0>=DIVIDE && LA262_0<=STAR)||(LA262_0>=MOD && LA262_0<=DIV)) ) {
                    alt262=1;
                }


                switch (alt262) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1948:37: precedenceStarOperator precedenceBitwiseXorExpression
            	    {
            	    pushFollow(FOLLOW_precedenceStarOperator_in_precedenceStarExpression14119);
            	    precedenceStarOperator893=precedenceStarOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceStarOperator893.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression14122);
            	    precedenceBitwiseXorExpression894=precedenceBitwiseXorExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceBitwiseXorExpression894.getTree());

            	    }
            	    break;

            	default :
            	    break loop262;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceStarExpression

    public static class precedencePlusOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedencePlusOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1952:1: precedencePlusOperator : ( PLUS | MINUS );
    public final precedencePlusOperator_return precedencePlusOperator() throws RecognitionException {
        precedencePlusOperator_return retval = new precedencePlusOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set895=null;

        CommonTree set895_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1953:5: ( PLUS | MINUS )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set895=(Token)input.LT(1);
            if ( input.LA(1)==PLUS||input.LA(1)==MINUS ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set895));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedencePlusOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedencePlusOperator

    public static class precedencePlusExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedencePlusExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1957:1: precedencePlusExpression : precedenceStarExpression ( precedencePlusOperator precedenceStarExpression )* ;
    public final precedencePlusExpression_return precedencePlusExpression() throws RecognitionException {
        precedencePlusExpression_return retval = new precedencePlusExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceStarExpression_return precedenceStarExpression896 = null;

        precedencePlusOperator_return precedencePlusOperator897 = null;

        precedenceStarExpression_return precedenceStarExpression898 = null;



        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1958:5: ( precedenceStarExpression ( precedencePlusOperator precedenceStarExpression )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1959:5: precedenceStarExpression ( precedencePlusOperator precedenceStarExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceStarExpression_in_precedencePlusExpression14171);
            precedenceStarExpression896=precedenceStarExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceStarExpression896.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1959:30: ( precedencePlusOperator precedenceStarExpression )*
            loop263:
            do {
                int alt263=2;
                int LA263_0 = input.LA(1);

                if ( (LA263_0==PLUS||LA263_0==MINUS) ) {
                    alt263=1;
                }


                switch (alt263) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1959:31: precedencePlusOperator precedenceStarExpression
            	    {
            	    pushFollow(FOLLOW_precedencePlusOperator_in_precedencePlusExpression14174);
            	    precedencePlusOperator897=precedencePlusOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedencePlusOperator897.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceStarExpression_in_precedencePlusExpression14177);
            	    precedenceStarExpression898=precedenceStarExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceStarExpression898.getTree());

            	    }
            	    break;

            	default :
            	    break loop263;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedencePlusExpression

    public static class precedenceAmpersandOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAmpersandOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1963:1: precedenceAmpersandOperator : AMPERSAND ;
    public final precedenceAmpersandOperator_return precedenceAmpersandOperator() throws RecognitionException {
        precedenceAmpersandOperator_return retval = new precedenceAmpersandOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AMPERSAND899=null;

        CommonTree AMPERSAND899_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1964:5: ( AMPERSAND )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1965:5: AMPERSAND
            {
            root_0 = (CommonTree)adaptor.nil();

            AMPERSAND899=(Token)input.LT(1);
            match(input,AMPERSAND,FOLLOW_AMPERSAND_in_precedenceAmpersandOperator14201); 
            AMPERSAND899_tree = (CommonTree)adaptor.create(AMPERSAND899);
            adaptor.addChild(root_0, AMPERSAND899_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAmpersandOperator

    public static class precedenceAmpersandExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAmpersandExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1968:1: precedenceAmpersandExpression : precedencePlusExpression ( precedenceAmpersandOperator precedencePlusExpression )* ;
    public final precedenceAmpersandExpression_return precedenceAmpersandExpression() throws RecognitionException {
        precedenceAmpersandExpression_return retval = new precedenceAmpersandExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedencePlusExpression_return precedencePlusExpression900 = null;

        precedenceAmpersandOperator_return precedenceAmpersandOperator901 = null;

        precedencePlusExpression_return precedencePlusExpression902 = null;



        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1969:5: ( precedencePlusExpression ( precedenceAmpersandOperator precedencePlusExpression )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1970:5: precedencePlusExpression ( precedenceAmpersandOperator precedencePlusExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression14222);
            precedencePlusExpression900=precedencePlusExpression();
            _fsp--;

            adaptor.addChild(root_0, precedencePlusExpression900.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1970:30: ( precedenceAmpersandOperator precedencePlusExpression )*
            loop264:
            do {
                int alt264=2;
                int LA264_0 = input.LA(1);

                if ( (LA264_0==AMPERSAND) ) {
                    alt264=1;
                }


                switch (alt264) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1970:31: precedenceAmpersandOperator precedencePlusExpression
            	    {
            	    pushFollow(FOLLOW_precedenceAmpersandOperator_in_precedenceAmpersandExpression14225);
            	    precedenceAmpersandOperator901=precedenceAmpersandOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceAmpersandOperator901.getTree(), root_0);
            	    pushFollow(FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression14228);
            	    precedencePlusExpression902=precedencePlusExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedencePlusExpression902.getTree());

            	    }
            	    break;

            	default :
            	    break loop264;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAmpersandExpression

    public static class precedenceBitwiseOrOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseOrOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1974:1: precedenceBitwiseOrOperator : BITWISEOR ;
    public final precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator() throws RecognitionException {
        precedenceBitwiseOrOperator_return retval = new precedenceBitwiseOrOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BITWISEOR903=null;

        CommonTree BITWISEOR903_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1975:5: ( BITWISEOR )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1976:5: BITWISEOR
            {
            root_0 = (CommonTree)adaptor.nil();

            BITWISEOR903=(Token)input.LT(1);
            match(input,BITWISEOR,FOLLOW_BITWISEOR_in_precedenceBitwiseOrOperator14252); 
            BITWISEOR903_tree = (CommonTree)adaptor.create(BITWISEOR903);
            adaptor.addChild(root_0, BITWISEOR903_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseOrOperator

    public static class precedenceBitwiseOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseOrExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1979:1: precedenceBitwiseOrExpression : precedenceAmpersandExpression ( precedenceBitwiseOrOperator precedenceAmpersandExpression )* ;
    public final precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression() throws RecognitionException {
        precedenceBitwiseOrExpression_return retval = new precedenceBitwiseOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceAmpersandExpression_return precedenceAmpersandExpression904 = null;

        precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator905 = null;

        precedenceAmpersandExpression_return precedenceAmpersandExpression906 = null;



        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1980:5: ( precedenceAmpersandExpression ( precedenceBitwiseOrOperator precedenceAmpersandExpression )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1981:5: precedenceAmpersandExpression ( precedenceBitwiseOrOperator precedenceAmpersandExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression14273);
            precedenceAmpersandExpression904=precedenceAmpersandExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceAmpersandExpression904.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1981:35: ( precedenceBitwiseOrOperator precedenceAmpersandExpression )*
            loop265:
            do {
                int alt265=2;
                int LA265_0 = input.LA(1);

                if ( (LA265_0==BITWISEOR) ) {
                    alt265=1;
                }


                switch (alt265) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1981:36: precedenceBitwiseOrOperator precedenceAmpersandExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrOperator_in_precedenceBitwiseOrExpression14276);
            	    precedenceBitwiseOrOperator905=precedenceBitwiseOrOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceBitwiseOrOperator905.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression14279);
            	    precedenceAmpersandExpression906=precedenceAmpersandExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceAmpersandExpression906.getTree());

            	    }
            	    break;

            	default :
            	    break loop265;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseOrExpression

    public static class precedenceEqualNegatableOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceEqualNegatableOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1986:1: precedenceEqualNegatableOperator : ( KW_LIKE | KW_RLIKE | KW_REGEXP );
    public final precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator() throws RecognitionException {
        precedenceEqualNegatableOperator_return retval = new precedenceEqualNegatableOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set907=null;

        CommonTree set907_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1987:5: ( KW_LIKE | KW_RLIKE | KW_REGEXP )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set907=(Token)input.LT(1);
            if ( input.LA(1)==KW_LIKE||(input.LA(1)>=KW_RLIKE && input.LA(1)<=KW_REGEXP) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set907));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedenceEqualNegatableOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceEqualNegatableOperator

    public static class precedenceEqualOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceEqualOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1991:1: precedenceEqualOperator : ( precedenceEqualNegatableOperator | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN );
    public final precedenceEqualOperator_return precedenceEqualOperator() throws RecognitionException {
        precedenceEqualOperator_return retval = new precedenceEqualOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUAL909=null;
        Token EQUAL_NS910=null;
        Token NOTEQUAL911=null;
        Token LESSTHANOREQUALTO912=null;
        Token LESSTHAN913=null;
        Token GREATERTHANOREQUALTO914=null;
        Token GREATERTHAN915=null;
        precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator908 = null;


        CommonTree EQUAL909_tree=null;
        CommonTree EQUAL_NS910_tree=null;
        CommonTree NOTEQUAL911_tree=null;
        CommonTree LESSTHANOREQUALTO912_tree=null;
        CommonTree LESSTHAN913_tree=null;
        CommonTree GREATERTHANOREQUALTO914_tree=null;
        CommonTree GREATERTHAN915_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1992:5: ( precedenceEqualNegatableOperator | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN )
            int alt266=8;
            switch ( input.LA(1) ) {
            case KW_LIKE:
            case KW_RLIKE:
            case KW_REGEXP:
                {
                alt266=1;
                }
                break;
            case EQUAL:
                {
                alt266=2;
                }
                break;
            case EQUAL_NS:
                {
                alt266=3;
                }
                break;
            case NOTEQUAL:
                {
                alt266=4;
                }
                break;
            case LESSTHANOREQUALTO:
                {
                alt266=5;
                }
                break;
            case LESSTHAN:
                {
                alt266=6;
                }
                break;
            case GREATERTHANOREQUALTO:
                {
                alt266=7;
                }
                break;
            case GREATERTHAN:
                {
                alt266=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1991:1: precedenceEqualOperator : ( precedenceEqualNegatableOperator | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN );", 266, 0, input);

                throw nvae;
            }

            switch (alt266) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1993:5: precedenceEqualNegatableOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualOperator14333);
                    precedenceEqualNegatableOperator908=precedenceEqualNegatableOperator();
                    _fsp--;

                    adaptor.addChild(root_0, precedenceEqualNegatableOperator908.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1993:40: EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EQUAL909=(Token)input.LT(1);
                    match(input,EQUAL,FOLLOW_EQUAL_in_precedenceEqualOperator14337); 
                    EQUAL909_tree = (CommonTree)adaptor.create(EQUAL909);
                    adaptor.addChild(root_0, EQUAL909_tree);


                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1993:48: EQUAL_NS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EQUAL_NS910=(Token)input.LT(1);
                    match(input,EQUAL_NS,FOLLOW_EQUAL_NS_in_precedenceEqualOperator14341); 
                    EQUAL_NS910_tree = (CommonTree)adaptor.create(EQUAL_NS910);
                    adaptor.addChild(root_0, EQUAL_NS910_tree);


                    }
                    break;
                case 4 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1993:59: NOTEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOTEQUAL911=(Token)input.LT(1);
                    match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_precedenceEqualOperator14345); 
                    NOTEQUAL911_tree = (CommonTree)adaptor.create(NOTEQUAL911);
                    adaptor.addChild(root_0, NOTEQUAL911_tree);


                    }
                    break;
                case 5 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1993:70: LESSTHANOREQUALTO
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESSTHANOREQUALTO912=(Token)input.LT(1);
                    match(input,LESSTHANOREQUALTO,FOLLOW_LESSTHANOREQUALTO_in_precedenceEqualOperator14349); 
                    LESSTHANOREQUALTO912_tree = (CommonTree)adaptor.create(LESSTHANOREQUALTO912);
                    adaptor.addChild(root_0, LESSTHANOREQUALTO912_tree);


                    }
                    break;
                case 6 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1993:90: LESSTHAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESSTHAN913=(Token)input.LT(1);
                    match(input,LESSTHAN,FOLLOW_LESSTHAN_in_precedenceEqualOperator14353); 
                    LESSTHAN913_tree = (CommonTree)adaptor.create(LESSTHAN913);
                    adaptor.addChild(root_0, LESSTHAN913_tree);


                    }
                    break;
                case 7 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1993:101: GREATERTHANOREQUALTO
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATERTHANOREQUALTO914=(Token)input.LT(1);
                    match(input,GREATERTHANOREQUALTO,FOLLOW_GREATERTHANOREQUALTO_in_precedenceEqualOperator14357); 
                    GREATERTHANOREQUALTO914_tree = (CommonTree)adaptor.create(GREATERTHANOREQUALTO914);
                    adaptor.addChild(root_0, GREATERTHANOREQUALTO914_tree);


                    }
                    break;
                case 8 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1993:124: GREATERTHAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATERTHAN915=(Token)input.LT(1);
                    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_precedenceEqualOperator14361); 
                    GREATERTHAN915_tree = (CommonTree)adaptor.create(GREATERTHAN915);
                    adaptor.addChild(root_0, GREATERTHAN915_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceEqualOperator

    public static class precedenceEqualExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceEqualExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1996:1: precedenceEqualExpression : (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )* ;
    public final precedenceEqualExpression_return precedenceEqualExpression() throws RecognitionException {
        precedenceEqualExpression_return retval = new precedenceEqualExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_NOT916=null;
        Token KW_NOT919=null;
        Token KW_IN920=null;
        Token KW_IN922=null;
        Token KW_NOT924=null;
        Token KW_BETWEEN925=null;
        Token KW_AND926=null;
        Token KW_BETWEEN927=null;
        Token KW_AND928=null;
        precedenceBitwiseOrExpression_return left = null;

        precedenceBitwiseOrExpression_return notExpr = null;

        precedenceBitwiseOrExpression_return equalExpr = null;

        precedenceBitwiseOrExpression_return min = null;

        precedenceBitwiseOrExpression_return max = null;

        precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator917 = null;

        precedenceEqualOperator_return precedenceEqualOperator918 = null;

        expressions_return expressions921 = null;

        expressions_return expressions923 = null;


        CommonTree KW_NOT916_tree=null;
        CommonTree KW_NOT919_tree=null;
        CommonTree KW_IN920_tree=null;
        CommonTree KW_IN922_tree=null;
        CommonTree KW_NOT924_tree=null;
        CommonTree KW_BETWEEN925_tree=null;
        CommonTree KW_AND926_tree=null;
        CommonTree KW_BETWEEN927_tree=null;
        CommonTree KW_AND928_tree=null;
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_BETWEEN=new RewriteRuleTokenStream(adaptor,"token KW_BETWEEN");
        RewriteRuleTokenStream stream_KW_AND=new RewriteRuleTokenStream(adaptor,"token KW_AND");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleSubtreeStream stream_precedenceEqualNegatableOperator=new RewriteRuleSubtreeStream(adaptor,"rule precedenceEqualNegatableOperator");
        RewriteRuleSubtreeStream stream_precedenceEqualOperator=new RewriteRuleSubtreeStream(adaptor,"rule precedenceEqualOperator");
        RewriteRuleSubtreeStream stream_precedenceBitwiseOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule precedenceBitwiseOrExpression");
        RewriteRuleSubtreeStream stream_expressions=new RewriteRuleSubtreeStream(adaptor,"rule expressions");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1997:5: ( (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1998:5: (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )*
            {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1998:5: (left= precedenceBitwiseOrExpression -> $left)
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1998:6: left= precedenceBitwiseOrExpression
            {
            pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14385);
            left=precedenceBitwiseOrExpression();
            _fsp--;

            stream_precedenceBitwiseOrExpression.add(left.getTree());

            // AST REWRITE
            // elements: left
            // token labels: 
            // rule labels: retval, left
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"token left",left!=null?left.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1998:41: -> $left
            {
                adaptor.addChild(root_0, stream_left.next());

            }



            }

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:1999:5: ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )*
            loop267:
            do {
                int alt267=7;
                switch ( input.LA(1) ) {
                case KW_NOT:
                    {
                    switch ( input.LA(2) ) {
                    case KW_BETWEEN:
                        {
                        alt267=5;
                        }
                        break;
                    case KW_IN:
                        {
                        alt267=3;
                        }
                        break;
                    case KW_LIKE:
                    case KW_RLIKE:
                    case KW_REGEXP:
                        {
                        alt267=1;
                        }
                        break;

                    }

                    }
                    break;
                case KW_LIKE:
                case EQUAL:
                case LESSTHAN:
                case GREATERTHAN:
                case KW_RLIKE:
                case KW_REGEXP:
                case EQUAL_NS:
                case NOTEQUAL:
                case LESSTHANOREQUALTO:
                case GREATERTHANOREQUALTO:
                    {
                    alt267=2;
                    }
                    break;
                case KW_IN:
                    {
                    alt267=4;
                    }
                    break;
                case KW_BETWEEN:
                    {
                    alt267=6;
                    }
                    break;

                }

                switch (alt267) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2000:8: ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression )
            	    {
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2000:8: ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2000:9: KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression
            	    {
            	    KW_NOT916=(Token)input.LT(1);
            	    match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceEqualExpression14407); 
            	    stream_KW_NOT.add(KW_NOT916);

            	    pushFollow(FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualExpression14409);
            	    precedenceEqualNegatableOperator917=precedenceEqualNegatableOperator();
            	    _fsp--;

            	    stream_precedenceEqualNegatableOperator.add(precedenceEqualNegatableOperator917.getTree());
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14413);
            	    notExpr=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(notExpr.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: notExpr, KW_NOT, precedenceEqualExpression, precedenceEqualNegatableOperator
            	    // token labels: 
            	    // rule labels: retval, notExpr
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_notExpr=new RewriteRuleSubtreeStream(adaptor,"token notExpr",notExpr!=null?notExpr.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2001:8: -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) )
            	    {
            	        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2001:11: ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_KW_NOT.next(), root_1);

            	        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2001:20: ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr)
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot(stream_precedenceEqualNegatableOperator.nextNode(), root_2);

            	        adaptor.addChild(root_2, stream_retval.next());
            	        adaptor.addChild(root_2, stream_notExpr.next());

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;
            	case 2 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2002:7: ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression )
            	    {
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2002:7: ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2002:8: precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceEqualOperator_in_precedenceEqualExpression14446);
            	    precedenceEqualOperator918=precedenceEqualOperator();
            	    _fsp--;

            	    stream_precedenceEqualOperator.add(precedenceEqualOperator918.getTree());
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14450);
            	    equalExpr=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(equalExpr.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: precedenceEqualOperator, equalExpr, precedenceEqualExpression
            	    // token labels: 
            	    // rule labels: equalExpr, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_equalExpr=new RewriteRuleSubtreeStream(adaptor,"token equalExpr",equalExpr!=null?equalExpr.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2003:8: -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr)
            	    {
            	        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2003:11: ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_precedenceEqualOperator.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.next());
            	        adaptor.addChild(root_1, stream_equalExpr.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;
            	case 3 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2004:7: ( KW_NOT KW_IN expressions )
            	    {
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2004:7: ( KW_NOT KW_IN expressions )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2004:8: KW_NOT KW_IN expressions
            	    {
            	    KW_NOT919=(Token)input.LT(1);
            	    match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceEqualExpression14479); 
            	    stream_KW_NOT.add(KW_NOT919);

            	    KW_IN920=(Token)input.LT(1);
            	    match(input,KW_IN,FOLLOW_KW_IN_in_precedenceEqualExpression14481); 
            	    stream_KW_IN.add(KW_IN920);

            	    pushFollow(FOLLOW_expressions_in_precedenceEqualExpression14483);
            	    expressions921=expressions();
            	    _fsp--;

            	    stream_expressions.add(expressions921.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: KW_NOT, precedenceEqualExpression, expressions, KW_IN
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2005:8: -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )
            	    {
            	        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2005:11: ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_KW_NOT.next(), root_1);

            	        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2005:20: ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_2);

            	        adaptor.addChild(root_2, stream_KW_IN.next());
            	        adaptor.addChild(root_2, stream_retval.next());
            	        adaptor.addChild(root_2, stream_expressions.next());

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;
            	case 4 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2006:7: ( KW_IN expressions )
            	    {
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2006:7: ( KW_IN expressions )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2006:8: KW_IN expressions
            	    {
            	    KW_IN922=(Token)input.LT(1);
            	    match(input,KW_IN,FOLLOW_KW_IN_in_precedenceEqualExpression14517); 
            	    stream_KW_IN.add(KW_IN922);

            	    pushFollow(FOLLOW_expressions_in_precedenceEqualExpression14519);
            	    expressions923=expressions();
            	    _fsp--;

            	    stream_expressions.add(expressions923.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: KW_IN, precedenceEqualExpression, expressions
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2007:8: -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
            	    {
            	        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2007:11: ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

            	        adaptor.addChild(root_1, stream_KW_IN.next());
            	        adaptor.addChild(root_1, stream_retval.next());
            	        adaptor.addChild(root_1, stream_expressions.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;
            	case 5 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2008:7: ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    {
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2008:7: ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2008:9: KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression )
            	    {
            	    KW_NOT924=(Token)input.LT(1);
            	    match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceEqualExpression14550); 
            	    stream_KW_NOT.add(KW_NOT924);

            	    KW_BETWEEN925=(Token)input.LT(1);
            	    match(input,KW_BETWEEN,FOLLOW_KW_BETWEEN_in_precedenceEqualExpression14552); 
            	    stream_KW_BETWEEN.add(KW_BETWEEN925);

            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2008:27: (min= precedenceBitwiseOrExpression )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2008:28: min= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14557);
            	    min=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(min.getTree());

            	    }

            	    KW_AND926=(Token)input.LT(1);
            	    match(input,KW_AND,FOLLOW_KW_AND_in_precedenceEqualExpression14560); 
            	    stream_KW_AND.add(KW_AND926);

            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2008:70: (max= precedenceBitwiseOrExpression )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2008:71: max= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14565);
            	    max=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(max.getTree());

            	    }


            	    }


            	    // AST REWRITE
            	    // elements: max, min, left
            	    // token labels: 
            	    // rule labels: min, retval, max, left
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_min=new RewriteRuleSubtreeStream(adaptor,"token min",min!=null?min.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_max=new RewriteRuleSubtreeStream(adaptor,"token max",max!=null?max.tree:null);
            	    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"token left",left!=null?left.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2009:8: -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max)
            	    {
            	        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2009:11: ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

            	        adaptor.addChild(root_1, adaptor.create(Identifier, "between"));
            	        adaptor.addChild(root_1, adaptor.create(KW_TRUE, "KW_TRUE"));
            	        adaptor.addChild(root_1, stream_left.next());
            	        adaptor.addChild(root_1, stream_min.next());
            	        adaptor.addChild(root_1, stream_max.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;
            	case 6 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2010:7: ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    {
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2010:7: ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2010:9: KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression )
            	    {
            	    KW_BETWEEN927=(Token)input.LT(1);
            	    match(input,KW_BETWEEN,FOLLOW_KW_BETWEEN_in_precedenceEqualExpression14605); 
            	    stream_KW_BETWEEN.add(KW_BETWEEN927);

            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2010:20: (min= precedenceBitwiseOrExpression )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2010:21: min= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14610);
            	    min=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(min.getTree());

            	    }

            	    KW_AND928=(Token)input.LT(1);
            	    match(input,KW_AND,FOLLOW_KW_AND_in_precedenceEqualExpression14613); 
            	    stream_KW_AND.add(KW_AND928);

            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2010:63: (max= precedenceBitwiseOrExpression )
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2010:64: max= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14618);
            	    max=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(max.getTree());

            	    }


            	    }


            	    // AST REWRITE
            	    // elements: left, min, max
            	    // token labels: 
            	    // rule labels: min, retval, max, left
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_min=new RewriteRuleSubtreeStream(adaptor,"token min",min!=null?min.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_max=new RewriteRuleSubtreeStream(adaptor,"token max",max!=null?max.tree:null);
            	    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"token left",left!=null?left.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2011:8: -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max)
            	    {
            	        // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2011:11: ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

            	        adaptor.addChild(root_1, adaptor.create(Identifier, "between"));
            	        adaptor.addChild(root_1, adaptor.create(KW_FALSE, "KW_FALSE"));
            	        adaptor.addChild(root_1, stream_left.next());
            	        adaptor.addChild(root_1, stream_min.next());
            	        adaptor.addChild(root_1, stream_max.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;

            	default :
            	    break loop267;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceEqualExpression

    public static class expressions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expressions
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2015:1: expressions : LPAREN expression ( COMMA expression )* RPAREN -> ( expression )* ;
    public final expressions_return expressions() throws RecognitionException {
        expressions_return retval = new expressions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN929=null;
        Token COMMA931=null;
        Token RPAREN933=null;
        expression_return expression930 = null;

        expression_return expression932 = null;


        CommonTree LPAREN929_tree=null;
        CommonTree COMMA931_tree=null;
        CommonTree RPAREN933_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2016:5: ( LPAREN expression ( COMMA expression )* RPAREN -> ( expression )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2017:5: LPAREN expression ( COMMA expression )* RPAREN
            {
            LPAREN929=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_expressions14676); 
            stream_LPAREN.add(LPAREN929);

            pushFollow(FOLLOW_expression_in_expressions14678);
            expression930=expression();
            _fsp--;

            stream_expression.add(expression930.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2017:23: ( COMMA expression )*
            loop268:
            do {
                int alt268=2;
                int LA268_0 = input.LA(1);

                if ( (LA268_0==COMMA) ) {
                    alt268=1;
                }


                switch (alt268) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2017:24: COMMA expression
            	    {
            	    COMMA931=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_expressions14681); 
            	    stream_COMMA.add(COMMA931);

            	    pushFollow(FOLLOW_expression_in_expressions14683);
            	    expression932=expression();
            	    _fsp--;

            	    stream_expression.add(expression932.getTree());

            	    }
            	    break;

            	default :
            	    break loop268;
                }
            } while (true);

            RPAREN933=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_expressions14687); 
            stream_RPAREN.add(RPAREN933);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2017:50: -> ( expression )*
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2017:53: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_0, stream_expression.next());

                }
                stream_expression.reset();

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expressions

    public static class precedenceNotOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceNotOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2020:1: precedenceNotOperator : KW_NOT ;
    public final precedenceNotOperator_return precedenceNotOperator() throws RecognitionException {
        precedenceNotOperator_return retval = new precedenceNotOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_NOT934=null;

        CommonTree KW_NOT934_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2021:5: ( KW_NOT )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2022:5: KW_NOT
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_NOT934=(Token)input.LT(1);
            match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceNotOperator14713); 
            KW_NOT934_tree = (CommonTree)adaptor.create(KW_NOT934);
            adaptor.addChild(root_0, KW_NOT934_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceNotOperator

    public static class precedenceNotExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceNotExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2025:1: precedenceNotExpression : ( precedenceNotOperator )* precedenceEqualExpression ;
    public final precedenceNotExpression_return precedenceNotExpression() throws RecognitionException {
        precedenceNotExpression_return retval = new precedenceNotExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceNotOperator_return precedenceNotOperator935 = null;

        precedenceEqualExpression_return precedenceEqualExpression936 = null;



        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2026:5: ( ( precedenceNotOperator )* precedenceEqualExpression )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2027:5: ( precedenceNotOperator )* precedenceEqualExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2027:5: ( precedenceNotOperator )*
            loop269:
            do {
                int alt269=2;
                int LA269_0 = input.LA(1);

                if ( (LA269_0==KW_NOT) ) {
                    alt269=1;
                }


                switch (alt269) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2027:6: precedenceNotOperator
            	    {
            	    pushFollow(FOLLOW_precedenceNotOperator_in_precedenceNotExpression14735);
            	    precedenceNotOperator935=precedenceNotOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceNotOperator935.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop269;
                }
            } while (true);

            pushFollow(FOLLOW_precedenceEqualExpression_in_precedenceNotExpression14740);
            precedenceEqualExpression936=precedenceEqualExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceEqualExpression936.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceNotExpression

    public static class precedenceAndOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAndOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2031:1: precedenceAndOperator : KW_AND ;
    public final precedenceAndOperator_return precedenceAndOperator() throws RecognitionException {
        precedenceAndOperator_return retval = new precedenceAndOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_AND937=null;

        CommonTree KW_AND937_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2032:5: ( KW_AND )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2033:5: KW_AND
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_AND937=(Token)input.LT(1);
            match(input,KW_AND,FOLLOW_KW_AND_in_precedenceAndOperator14762); 
            KW_AND937_tree = (CommonTree)adaptor.create(KW_AND937);
            adaptor.addChild(root_0, KW_AND937_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAndOperator

    public static class precedenceAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAndExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2036:1: precedenceAndExpression : precedenceNotExpression ( precedenceAndOperator precedenceNotExpression )* ;
    public final precedenceAndExpression_return precedenceAndExpression() throws RecognitionException {
        precedenceAndExpression_return retval = new precedenceAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceNotExpression_return precedenceNotExpression938 = null;

        precedenceAndOperator_return precedenceAndOperator939 = null;

        precedenceNotExpression_return precedenceNotExpression940 = null;



        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2037:5: ( precedenceNotExpression ( precedenceAndOperator precedenceNotExpression )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2038:5: precedenceNotExpression ( precedenceAndOperator precedenceNotExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceNotExpression_in_precedenceAndExpression14783);
            precedenceNotExpression938=precedenceNotExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceNotExpression938.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2038:29: ( precedenceAndOperator precedenceNotExpression )*
            loop270:
            do {
                int alt270=2;
                int LA270_0 = input.LA(1);

                if ( (LA270_0==KW_AND) ) {
                    alt270=1;
                }


                switch (alt270) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2038:30: precedenceAndOperator precedenceNotExpression
            	    {
            	    pushFollow(FOLLOW_precedenceAndOperator_in_precedenceAndExpression14786);
            	    precedenceAndOperator939=precedenceAndOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceAndOperator939.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceNotExpression_in_precedenceAndExpression14789);
            	    precedenceNotExpression940=precedenceNotExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceNotExpression940.getTree());

            	    }
            	    break;

            	default :
            	    break loop270;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAndExpression

    public static class precedenceOrOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceOrOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2042:1: precedenceOrOperator : KW_OR ;
    public final precedenceOrOperator_return precedenceOrOperator() throws RecognitionException {
        precedenceOrOperator_return retval = new precedenceOrOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_OR941=null;

        CommonTree KW_OR941_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2043:5: ( KW_OR )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2044:5: KW_OR
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_OR941=(Token)input.LT(1);
            match(input,KW_OR,FOLLOW_KW_OR_in_precedenceOrOperator14813); 
            KW_OR941_tree = (CommonTree)adaptor.create(KW_OR941);
            adaptor.addChild(root_0, KW_OR941_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceOrOperator

    public static class precedenceOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceOrExpression
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2047:1: precedenceOrExpression : precedenceAndExpression ( precedenceOrOperator precedenceAndExpression )* ;
    public final precedenceOrExpression_return precedenceOrExpression() throws RecognitionException {
        precedenceOrExpression_return retval = new precedenceOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceAndExpression_return precedenceAndExpression942 = null;

        precedenceOrOperator_return precedenceOrOperator943 = null;

        precedenceAndExpression_return precedenceAndExpression944 = null;



        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2048:5: ( precedenceAndExpression ( precedenceOrOperator precedenceAndExpression )* )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2049:5: precedenceAndExpression ( precedenceOrOperator precedenceAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceAndExpression_in_precedenceOrExpression14834);
            precedenceAndExpression942=precedenceAndExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceAndExpression942.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2049:29: ( precedenceOrOperator precedenceAndExpression )*
            loop271:
            do {
                int alt271=2;
                int LA271_0 = input.LA(1);

                if ( (LA271_0==KW_OR) ) {
                    alt271=1;
                }


                switch (alt271) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2049:30: precedenceOrOperator precedenceAndExpression
            	    {
            	    pushFollow(FOLLOW_precedenceOrOperator_in_precedenceOrExpression14837);
            	    precedenceOrOperator943=precedenceOrOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceOrOperator943.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceAndExpression_in_precedenceOrExpression14840);
            	    precedenceAndExpression944=precedenceAndExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceAndExpression944.getTree());

            	    }
            	    break;

            	default :
            	    break loop271;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceOrExpression

    public static class booleanValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start booleanValue
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2053:1: booleanValue : ( KW_TRUE | KW_FALSE );
    public final booleanValue_return booleanValue() throws RecognitionException {
        booleanValue_return retval = new booleanValue_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_TRUE945=null;
        Token KW_FALSE946=null;

        CommonTree KW_TRUE945_tree=null;
        CommonTree KW_FALSE946_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2054:5: ( KW_TRUE | KW_FALSE )
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==KW_TRUE) ) {
                alt272=1;
            }
            else if ( (LA272_0==KW_FALSE) ) {
                alt272=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("2053:1: booleanValue : ( KW_TRUE | KW_FALSE );", 272, 0, input);

                throw nvae;
            }
            switch (alt272) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2055:5: KW_TRUE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    KW_TRUE945=(Token)input.LT(1);
                    match(input,KW_TRUE,FOLLOW_KW_TRUE_in_booleanValue14864); 
                    KW_TRUE945_tree = (CommonTree)adaptor.create(KW_TRUE945);
                    root_0 = (CommonTree)adaptor.becomeRoot(KW_TRUE945_tree, root_0);


                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2055:16: KW_FALSE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    KW_FALSE946=(Token)input.LT(1);
                    match(input,KW_FALSE,FOLLOW_KW_FALSE_in_booleanValue14869); 
                    KW_FALSE946_tree = (CommonTree)adaptor.create(KW_FALSE946);
                    root_0 = (CommonTree)adaptor.becomeRoot(KW_FALSE946_tree, root_0);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end booleanValue

    public static class tableOrPartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableOrPartition
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2058:1: tableOrPartition : tableName ( partitionSpec )? -> ^( TOK_TAB tableName ( partitionSpec )? ) ;
    public final tableOrPartition_return tableOrPartition() throws RecognitionException {
        tableOrPartition_return retval = new tableOrPartition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tableName_return tableName947 = null;

        partitionSpec_return partitionSpec948 = null;


        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2059:4: ( tableName ( partitionSpec )? -> ^( TOK_TAB tableName ( partitionSpec )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2060:4: tableName ( partitionSpec )?
            {
            pushFollow(FOLLOW_tableName_in_tableOrPartition14889);
            tableName947=tableName();
            _fsp--;

            stream_tableName.add(tableName947.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2060:14: ( partitionSpec )?
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==KW_PARTITION) ) {
                alt273=1;
            }
            switch (alt273) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2060:14: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_tableOrPartition14891);
                    partitionSpec948=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec948.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableName, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2060:29: -> ^( TOK_TAB tableName ( partitionSpec )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2060:32: ^( TOK_TAB tableName ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TAB, "TOK_TAB"), root_1);

                adaptor.addChild(root_1, stream_tableName.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2060:52: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableOrPartition

    public static class partitionSpec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partitionSpec
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2063:1: partitionSpec : KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN -> ^( TOK_PARTSPEC ( partitionVal )+ ) ;
    public final partitionSpec_return partitionSpec() throws RecognitionException {
        partitionSpec_return retval = new partitionSpec_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PARTITION949=null;
        Token LPAREN950=null;
        Token COMMA952=null;
        Token RPAREN954=null;
        partitionVal_return partitionVal951 = null;

        partitionVal_return partitionVal953 = null;


        CommonTree KW_PARTITION949_tree=null;
        CommonTree LPAREN950_tree=null;
        CommonTree COMMA952_tree=null;
        CommonTree RPAREN954_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_partitionVal=new RewriteRuleSubtreeStream(adaptor,"rule partitionVal");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2064:5: ( KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN -> ^( TOK_PARTSPEC ( partitionVal )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2065:5: KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN
            {
            KW_PARTITION949=(Token)input.LT(1);
            match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_partitionSpec14923); 
            stream_KW_PARTITION.add(KW_PARTITION949);

            LPAREN950=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_partitionSpec14930); 
            stream_LPAREN.add(LPAREN950);

            pushFollow(FOLLOW_partitionVal_in_partitionSpec14932);
            partitionVal951=partitionVal();
            _fsp--;

            stream_partitionVal.add(partitionVal951.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2066:26: ( COMMA partitionVal )*
            loop274:
            do {
                int alt274=2;
                int LA274_0 = input.LA(1);

                if ( (LA274_0==COMMA) ) {
                    alt274=1;
                }


                switch (alt274) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2066:27: COMMA partitionVal
            	    {
            	    COMMA952=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_partitionSpec14935); 
            	    stream_COMMA.add(COMMA952);

            	    pushFollow(FOLLOW_partitionVal_in_partitionSpec14938);
            	    partitionVal953=partitionVal();
            	    _fsp--;

            	    stream_partitionVal.add(partitionVal953.getTree());

            	    }
            	    break;

            	default :
            	    break loop274;
                }
            } while (true);

            RPAREN954=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_partitionSpec14943); 
            stream_RPAREN.add(RPAREN954);


            // AST REWRITE
            // elements: partitionVal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2066:57: -> ^( TOK_PARTSPEC ( partitionVal )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2066:60: ^( TOK_PARTSPEC ( partitionVal )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTSPEC, "TOK_PARTSPEC"), root_1);

                if ( !(stream_partitionVal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_partitionVal.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionVal.next());

                }
                stream_partitionVal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partitionSpec

    public static class partitionVal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partitionVal
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2069:1: partitionVal : Identifier ( EQUAL constant )? -> ^( TOK_PARTVAL Identifier ( constant )? ) ;
    public final partitionVal_return partitionVal() throws RecognitionException {
        partitionVal_return retval = new partitionVal_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier955=null;
        Token EQUAL956=null;
        constant_return constant957 = null;


        CommonTree Identifier955_tree=null;
        CommonTree EQUAL956_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2070:5: ( Identifier ( EQUAL constant )? -> ^( TOK_PARTVAL Identifier ( constant )? ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2071:5: Identifier ( EQUAL constant )?
            {
            Identifier955=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_partitionVal14974); 
            stream_Identifier.add(Identifier955);

            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2071:16: ( EQUAL constant )?
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==EQUAL) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2071:17: EQUAL constant
                    {
                    EQUAL956=(Token)input.LT(1);
                    match(input,EQUAL,FOLLOW_EQUAL_in_partitionVal14977); 
                    stream_EQUAL.add(EQUAL956);

                    pushFollow(FOLLOW_constant_in_partitionVal14979);
                    constant957=constant();
                    _fsp--;

                    stream_constant.add(constant957.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: constant, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2071:34: -> ^( TOK_PARTVAL Identifier ( constant )? )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2071:37: ^( TOK_PARTVAL Identifier ( constant )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTVAL, "TOK_PARTVAL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2071:62: ( constant )?
                if ( stream_constant.hasNext() ) {
                    adaptor.addChild(root_1, stream_constant.next());

                }
                stream_constant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partitionVal

    public static class dropPartitionSpec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropPartitionSpec
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2074:1: dropPartitionSpec : KW_PARTITION LPAREN dropPartitionVal ( COMMA dropPartitionVal )* RPAREN -> ^( TOK_PARTSPEC ( dropPartitionVal )+ ) ;
    public final dropPartitionSpec_return dropPartitionSpec() throws RecognitionException {
        dropPartitionSpec_return retval = new dropPartitionSpec_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PARTITION958=null;
        Token LPAREN959=null;
        Token COMMA961=null;
        Token RPAREN963=null;
        dropPartitionVal_return dropPartitionVal960 = null;

        dropPartitionVal_return dropPartitionVal962 = null;


        CommonTree KW_PARTITION958_tree=null;
        CommonTree LPAREN959_tree=null;
        CommonTree COMMA961_tree=null;
        CommonTree RPAREN963_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_dropPartitionVal=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionVal");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2075:5: ( KW_PARTITION LPAREN dropPartitionVal ( COMMA dropPartitionVal )* RPAREN -> ^( TOK_PARTSPEC ( dropPartitionVal )+ ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2076:5: KW_PARTITION LPAREN dropPartitionVal ( COMMA dropPartitionVal )* RPAREN
            {
            KW_PARTITION958=(Token)input.LT(1);
            match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_dropPartitionSpec15013); 
            stream_KW_PARTITION.add(KW_PARTITION958);

            LPAREN959=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_dropPartitionSpec15020); 
            stream_LPAREN.add(LPAREN959);

            pushFollow(FOLLOW_dropPartitionVal_in_dropPartitionSpec15022);
            dropPartitionVal960=dropPartitionVal();
            _fsp--;

            stream_dropPartitionVal.add(dropPartitionVal960.getTree());
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2077:30: ( COMMA dropPartitionVal )*
            loop276:
            do {
                int alt276=2;
                int LA276_0 = input.LA(1);

                if ( (LA276_0==COMMA) ) {
                    alt276=1;
                }


                switch (alt276) {
            	case 1 :
            	    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2077:31: COMMA dropPartitionVal
            	    {
            	    COMMA961=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_dropPartitionSpec15025); 
            	    stream_COMMA.add(COMMA961);

            	    pushFollow(FOLLOW_dropPartitionVal_in_dropPartitionSpec15028);
            	    dropPartitionVal962=dropPartitionVal();
            	    _fsp--;

            	    stream_dropPartitionVal.add(dropPartitionVal962.getTree());

            	    }
            	    break;

            	default :
            	    break loop276;
                }
            } while (true);

            RPAREN963=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_dropPartitionSpec15033); 
            stream_RPAREN.add(RPAREN963);


            // AST REWRITE
            // elements: dropPartitionVal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2077:65: -> ^( TOK_PARTSPEC ( dropPartitionVal )+ )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2077:68: ^( TOK_PARTSPEC ( dropPartitionVal )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTSPEC, "TOK_PARTSPEC"), root_1);

                if ( !(stream_dropPartitionVal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dropPartitionVal.hasNext() ) {
                    adaptor.addChild(root_1, stream_dropPartitionVal.next());

                }
                stream_dropPartitionVal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropPartitionSpec

    public static class dropPartitionVal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropPartitionVal
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2080:1: dropPartitionVal : Identifier dropPartitionOperator constant -> ^( TOK_PARTVAL Identifier dropPartitionOperator constant ) ;
    public final dropPartitionVal_return dropPartitionVal() throws RecognitionException {
        dropPartitionVal_return retval = new dropPartitionVal_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier964=null;
        dropPartitionOperator_return dropPartitionOperator965 = null;

        constant_return constant966 = null;


        CommonTree Identifier964_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_dropPartitionOperator=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionOperator");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2081:5: ( Identifier dropPartitionOperator constant -> ^( TOK_PARTVAL Identifier dropPartitionOperator constant ) )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2082:5: Identifier dropPartitionOperator constant
            {
            Identifier964=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropPartitionVal15064); 
            stream_Identifier.add(Identifier964);

            pushFollow(FOLLOW_dropPartitionOperator_in_dropPartitionVal15066);
            dropPartitionOperator965=dropPartitionOperator();
            _fsp--;

            stream_dropPartitionOperator.add(dropPartitionOperator965.getTree());
            pushFollow(FOLLOW_constant_in_dropPartitionVal15068);
            constant966=constant();
            _fsp--;

            stream_constant.add(constant966.getTree());

            // AST REWRITE
            // elements: dropPartitionOperator, constant, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2082:47: -> ^( TOK_PARTVAL Identifier dropPartitionOperator constant )
            {
                // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2082:50: ^( TOK_PARTVAL Identifier dropPartitionOperator constant )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTVAL, "TOK_PARTVAL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_dropPartitionOperator.next());
                adaptor.addChild(root_1, stream_constant.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropPartitionVal

    public static class dropPartitionOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropPartitionOperator
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2085:1: dropPartitionOperator : ( EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN );
    public final dropPartitionOperator_return dropPartitionOperator() throws RecognitionException {
        dropPartitionOperator_return retval = new dropPartitionOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set967=null;

        CommonTree set967_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2086:5: ( EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set967=(Token)input.LT(1);
            if ( input.LA(1)==EQUAL||(input.LA(1)>=LESSTHAN && input.LA(1)<=GREATERTHAN)||(input.LA(1)>=NOTEQUAL && input.LA(1)<=GREATERTHANOREQUALTO) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set967));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_dropPartitionOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropPartitionOperator

    public static class sysFuncNames_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sysFuncNames
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2090:1: sysFuncNames : ( KW_AND | KW_OR | KW_NOT | KW_LIKE | KW_IF | KW_CASE | KW_WHEN | KW_TINYINT | KW_SMALLINT | KW_INT | KW_BIGINT | KW_FLOAT | KW_DOUBLE | KW_BOOLEAN | KW_STRING | KW_BINARY | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | DIVIDE | PLUS | MINUS | STAR | MOD | DIV | AMPERSAND | TILDE | BITWISEOR | BITWISEXOR | KW_RLIKE | KW_REGEXP | KW_IN | KW_BETWEEN );
    public final sysFuncNames_return sysFuncNames() throws RecognitionException {
        sysFuncNames_return retval = new sysFuncNames_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set968=null;

        CommonTree set968_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2091:5: ( KW_AND | KW_OR | KW_NOT | KW_LIKE | KW_IF | KW_CASE | KW_WHEN | KW_TINYINT | KW_SMALLINT | KW_INT | KW_BIGINT | KW_FLOAT | KW_DOUBLE | KW_BOOLEAN | KW_STRING | KW_BINARY | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | DIVIDE | PLUS | MINUS | STAR | MOD | DIV | AMPERSAND | TILDE | BITWISEOR | BITWISEXOR | KW_RLIKE | KW_REGEXP | KW_IN | KW_BETWEEN )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set968=(Token)input.LT(1);
            if ( input.LA(1)==KW_IF||(input.LA(1)>=KW_NOT && input.LA(1)<=KW_OR)||input.LA(1)==KW_LIKE||input.LA(1)==KW_IN||input.LA(1)==EQUAL||input.LA(1)==KW_MAP||(input.LA(1)>=KW_TINYINT && input.LA(1)<=KW_DOUBLE)||(input.LA(1)>=KW_STRING && input.LA(1)<=KW_UNIONTYPE)||(input.LA(1)>=DIVIDE && input.LA(1)<=PLUS)||(input.LA(1)>=KW_CASE && input.LA(1)<=KW_WHEN)||(input.LA(1)>=MINUS && input.LA(1)<=TILDE)||(input.LA(1)>=BITWISEXOR && input.LA(1)<=KW_AND) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set968));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_sysFuncNames0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sysFuncNames

    public static class descFuncNames_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start descFuncNames
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2135:1: descFuncNames : ( sysFuncNames | StringLiteral | Identifier );
    public final descFuncNames_return descFuncNames() throws RecognitionException {
        descFuncNames_return retval = new descFuncNames_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token StringLiteral970=null;
        Token Identifier971=null;
        sysFuncNames_return sysFuncNames969 = null;


        CommonTree StringLiteral970_tree=null;
        CommonTree Identifier971_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2136:5: ( sysFuncNames | StringLiteral | Identifier )
            int alt277=3;
            switch ( input.LA(1) ) {
            case KW_IF:
            case KW_NOT:
            case KW_OR:
            case KW_LIKE:
            case KW_IN:
            case EQUAL:
            case KW_MAP:
            case KW_TINYINT:
            case KW_SMALLINT:
            case KW_INT:
            case KW_BIGINT:
            case KW_BOOLEAN:
            case KW_FLOAT:
            case KW_DOUBLE:
            case KW_STRING:
            case KW_BINARY:
            case KW_ARRAY:
            case LESSTHAN:
            case GREATERTHAN:
            case KW_STRUCT:
            case KW_UNIONTYPE:
            case DIVIDE:
            case STAR:
            case PLUS:
            case KW_CASE:
            case KW_WHEN:
            case MINUS:
            case TILDE:
            case BITWISEXOR:
            case MOD:
            case DIV:
            case AMPERSAND:
            case BITWISEOR:
            case KW_RLIKE:
            case KW_REGEXP:
            case EQUAL_NS:
            case NOTEQUAL:
            case LESSTHANOREQUALTO:
            case GREATERTHANOREQUALTO:
            case KW_BETWEEN:
            case KW_AND:
                {
                alt277=1;
                }
                break;
            case StringLiteral:
                {
                alt277=2;
                }
                break;
            case Identifier:
                {
                alt277=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("2135:1: descFuncNames : ( sysFuncNames | StringLiteral | Identifier );", 277, 0, input);

                throw nvae;
            }

            switch (alt277) {
                case 1 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2137:7: sysFuncNames
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sysFuncNames_in_descFuncNames15491);
                    sysFuncNames969=sysFuncNames();
                    _fsp--;

                    adaptor.addChild(root_0, sysFuncNames969.getTree());

                    }
                    break;
                case 2 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2138:7: StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    StringLiteral970=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_descFuncNames15499); 
                    StringLiteral970_tree = (CommonTree)adaptor.create(StringLiteral970);
                    adaptor.addChild(root_0, StringLiteral970_tree);


                    }
                    break;
                case 3 :
                    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2139:7: Identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Identifier971=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_descFuncNames15507); 
                    Identifier971_tree = (CommonTree)adaptor.create(Identifier971);
                    adaptor.addChild(root_0, Identifier971_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end descFuncNames

    public static class kwUser_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kwUser
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2144:1: kwUser : {...}? Identifier ;
    public final kwUser_return kwUser() throws RecognitionException {
        kwUser_return retval = new kwUser_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier972=null;

        CommonTree Identifier972_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2145:1: ({...}? Identifier )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2146:1: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(input.LT(1).getText().equalsIgnoreCase("user")) ) {
                throw new FailedPredicateException(input, "kwUser", "input.LT(1).getText().equalsIgnoreCase(\"user\")");
            }
            Identifier972=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_kwUser15524); 
            Identifier972_tree = (CommonTree)adaptor.create(Identifier972);
            adaptor.addChild(root_0, Identifier972_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end kwUser

    public static class kwRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kwRole
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2148:1: kwRole : {...}? Identifier ;
    public final kwRole_return kwRole() throws RecognitionException {
        kwRole_return retval = new kwRole_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier973=null;

        CommonTree Identifier973_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2149:1: ({...}? Identifier )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2150:1: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(input.LT(1).getText().equalsIgnoreCase("role")) ) {
                throw new FailedPredicateException(input, "kwRole", "input.LT(1).getText().equalsIgnoreCase(\"role\")");
            }
            Identifier973=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_kwRole15534); 
            Identifier973_tree = (CommonTree)adaptor.create(Identifier973);
            adaptor.addChild(root_0, Identifier973_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end kwRole

    public static class kwInner_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kwInner
    // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2152:1: kwInner : {...}? Identifier ;
    public final kwInner_return kwInner() throws RecognitionException {
        kwInner_return retval = new kwInner_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier974=null;

        CommonTree Identifier974_tree=null;

        try {
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2153:1: ({...}? Identifier )
            // /work/workspace/taobao/tb-hiveparser/src/main/java/com/taobao/dw/parser/analyze/ast/Hive.g:2154:1: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(input.LT(1).getText().equalsIgnoreCase("inner")) ) {
                throw new FailedPredicateException(input, "kwInner", "input.LT(1).getText().equalsIgnoreCase(\"inner\")");
            }
            Identifier974=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_kwInner15544); 
            Identifier974_tree = (CommonTree)adaptor.create(Identifier974);
            adaptor.addChild(root_0, Identifier974_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        
        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end kwInner


 

    public static final BitSet FOLLOW_explainStatement_in_statement769 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execStatement_in_statement776 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPLAIN_in_explainStatement799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0A80E00000000000L,0x5800000001006008L,0x0000010000227202L,0x0000000000001001L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_explainStatement804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0A80800000000000L,0x5800000001006008L,0x0000010000227202L,0x0000000000001001L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_explainStatement808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0A80800000000000L,0x5800000001006008L,0x0000010000227202L,0x0000000000001001L});
    public static final BitSet FOLLOW_execStatement_in_explainStatement812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_queryStatementExpression_in_execStatement854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loadStatement_in_execStatement862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exportStatement_in_execStatement870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importStatement_in_execStatement878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ddlStatement_in_execStatement886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOAD_in_loadStatement913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_DATA_in_loadStatement915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006000000000000L});
    public static final BitSet FOLLOW_KW_LOCAL_in_loadStatement920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_INPATH_in_loadStatement924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_loadStatement929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_loadStatement935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_INTO_in_loadStatement939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_loadStatement941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableOrPartition_in_loadStatement946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPORT_in_exportStatement998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_exportStatement1000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableOrPartition_in_exportStatement1005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_TO_in_exportStatement1008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_exportStatement1013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IMPORT_in_importStatement1054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C40000000000000L});
    public static final BitSet FOLLOW_KW_EXTERNAL_in_importStatement1060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_importStatement1064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableOrPartition_in_importStatement1069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_importStatement1074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_importStatement1079 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_tableLocation_in_importStatement1082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createDatabaseStatement_in_ddlStatement1134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchDatabaseStatement_in_ddlStatement1142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropDatabaseStatement_in_ddlStatement1150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createTableStatement_in_ddlStatement1158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropTableStatement_in_ddlStatement1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatement_in_ddlStatement1174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_descStatement_in_ddlStatement1182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStatement_in_ddlStatement1190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metastoreCheck_in_ddlStatement1198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createViewStatement_in_ddlStatement1206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropViewStatement_in_ddlStatement1214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createFunctionStatement_in_ddlStatement1222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexStatement_in_ddlStatement1230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropIndexStatement_in_ddlStatement1238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropFunctionStatement_in_ddlStatement1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_analyzeStatement_in_ddlStatement1254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lockStatement_in_ddlStatement1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unlockStatement_in_ddlStatement1270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createRoleStatement_in_ddlStatement1278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropRoleStatement_in_ddlStatement1286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantPrivileges_in_ddlStatement1294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokePrivileges_in_ddlStatement1302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showGrants_in_ddlStatement1310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showRoleGrants_in_ddlStatement1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantRole_in_ddlStatement1326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokeRole_in_ddlStatement1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifExists1361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifExists1363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RESTRICT_in_restrictOrCascade1400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASCADE_in_restrictOrCascade1418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifNotExists1455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_NOT_in_ifNotExists1457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifNotExists1459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_OR_in_orReplace1496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_REPLACE_in_orReplace1498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement1536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement1539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement1541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement1552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_createDatabaseStatement1565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008280L});
    public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement1575 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_dbLocation_in_createDatabaseStatement1586 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_WITH_in_createDatabaseStatement1598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement1600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_dbProperties_in_createDatabaseStatement1604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_dbLocation1665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_dbLocation1669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_dbProperties1711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_dbPropertiesList_in_dbProperties1713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_dbProperties1715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList1756 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_dbPropertiesList1759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList1761 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_USE_in_switchDatabaseStatement1800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_switchDatabaseStatement1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropDatabaseStatement1841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_KW_DATABASE_in_dropDatabaseStatement1844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_dropDatabaseStatement1846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_ifExists_in_dropDatabaseStatement1849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_dropDatabaseStatement1852 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_restrictOrCascade_in_dropDatabaseStatement1854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_databaseComment1900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_databaseComment1904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createTableStatement1944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0440000000000000L});
    public static final BitSet FOLLOW_KW_EXTERNAL_in_createTableStatement1949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_createTableStatement1953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_ifNotExists_in_createTableStatement1955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableName_in_createTableStatement1960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000802000038600L,0x0000080081000000L});
    public static final BitSet FOLLOW_KW_LIKE_in_createTableStatement1973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableName_in_createTableStatement1977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_tableLocation_in_createTableStatement1988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createTableStatement2001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameTypeList_in_createTableStatement2003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_createTableStatement2005 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000802000028200L,0x0000080081000000L});
    public static final BitSet FOLLOW_tableComment_in_createTableStatement2018 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000802000020200L,0x0000080081000000L});
    public static final BitSet FOLLOW_tablePartition_in_createTableStatement2030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000802000020200L,0x0000080080000000L});
    public static final BitSet FOLLOW_tableBuckets_in_createTableStatement2042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000020200L,0x0000080080000000L});
    public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement2054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000020200L,0x0000080000000000L});
    public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement2066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000020200L});
    public static final BitSet FOLLOW_tableLocation_in_createTableStatement2078 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000020000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement2090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_AS_in_createTableStatement2103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000020000L,0x0000000000001000L});
    public static final BitSet FOLLOW_selectStatement_in_createTableStatement2105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createIndexStatement2296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_INDEX_in_createIndexStatement2298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_createIndexStatement2302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_ON_in_createIndexStatement2310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_createIndexStatement2312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableName_in_createIndexStatement2316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexStatement2318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameList_in_createIndexStatement2322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexStatement2324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_AS_in_createIndexStatement2332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_createIndexStatement2336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000C08280L,0x0000080080000000L});
    public static final BitSet FOLLOW_autoRebuild_in_createIndexStatement2344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000C08200L,0x0000080080000000L});
    public static final BitSet FOLLOW_indexPropertiesPrefixed_in_createIndexStatement2353 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000408200L,0x0000080080000000L});
    public static final BitSet FOLLOW_indexTblName_in_createIndexStatement2362 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000008200L,0x0000080080000000L});
    public static final BitSet FOLLOW_tableRowFormat_in_createIndexStatement2371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000008200L,0x0000080000000000L});
    public static final BitSet FOLLOW_tableFileFormat_in_createIndexStatement2380 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000008200L});
    public static final BitSet FOLLOW_tableLocation_in_createIndexStatement2389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000008000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createIndexStatement2398 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_indexComment_in_createIndexStatement2407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_indexComment2564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_indexComment2568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WITH_in_autoRebuild2609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_DEFERRED_in_autoRebuild2611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_REBUILD_in_autoRebuild2613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IN_in_indexTblName2649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_indexTblName2651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableName_in_indexTblName2655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed2702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_indexProperties_in_indexPropertiesPrefixed2705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_indexProperties2738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_indexPropertiesList_in_indexProperties2740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_indexProperties2742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList2783 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_indexPropertiesList2786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList2788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_DROP_in_dropIndexStatement2826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_INDEX_in_dropIndexStatement2828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_ifExists_in_dropIndexStatement2830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_dropIndexStatement2835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_ON_in_dropIndexStatement2837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableName_in_dropIndexStatement2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropTableStatement2886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_dropTableStatement2888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_ifExists_in_dropTableStatement2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableName_in_dropTableStatement2893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_alterStatement2931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000002040010L});
    public static final BitSet FOLLOW_KW_TABLE_in_alterStatement2956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_alterTableStatementSuffix_in_alterStatement2959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_VIEW_in_alterStatement2983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_alterViewStatementSuffix_in_alterStatement2986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INDEX_in_alterStatement3010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_alterIndexStatementSuffix_in_alterStatement3013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATABASE_in_alterStatement3037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix3085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix3093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix3149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixClusterbySortby_in_alterTableStatementSuffix3157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix3184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix3192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix3216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix3240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterIndexStatementSuffix3285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_ON_in_alterIndexStatementSuffix3294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_alterIndexStatementSuffix3298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_alterIndexStatementSuffix3307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004200000L});
    public static final BitSet FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix3322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterIndexStatementSuffix3356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix3358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_indexProperties_in_alterIndexStatementSuffix3366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix3418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterDatabaseSuffixProperties3447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixProperties3449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties3451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_dbProperties_in_alterDatabaseSuffixProperties3453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRename3497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRename3499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRename3501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRename3505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixAddCol3548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000004L});
    public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddCol3553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol3559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol3562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_alterStatementSuffixAddCol3564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol3566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_alterStatementSuffixAddCol3568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol3643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000040L});
    public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol3645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x67FFC10000000000L});
    public static final BitSet FOLLOW_colType_in_alterStatementSuffixRenameCol3656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000300008000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol3659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol3663 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol3667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FIRST_in_alterStatementChangeColPosition3713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AFTER_in_alterStatementChangeColPosition3715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementChangeColPosition3719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixAddPartitions3771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions3773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions3775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3778 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3786 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixTouch3839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch3841 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixTouch3844 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixArchive3890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive3892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixArchive3895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixUnArchive3941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive3943 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive3946 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_partitionLocation3998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_partitionLocation4002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixDropPartitions4038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions4040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixDropPartitions4042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4045 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_alterStatementSuffixDropPartitions4048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4050 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixProperties4099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixProperties4101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties4105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterViewSuffixProperties4149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterViewSuffixProperties4151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties4155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties4199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties4203 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties4206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tablePartitionPrefix4278 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_tablePartitionPrefix4280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement4318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000E000C000000L});
    public static final BitSet FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement4320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix4367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixFileFormat4407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat4409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000F000000000040L});
    public static final BitSet FOLLOW_fileFormat_in_alterStatementSuffixFileFormat4411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixLocation4442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation4444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixLocation4448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode4484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart4523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRenamePart4525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart4527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles4565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ENABLE_in_alterProtectMode4602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000700000000000L});
    public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode4604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DISABLE_in_alterProtectMode4621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000700000000000L});
    public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode4623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_OFFLINE_in_alterProtectModeMode4659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NO_DROP_in_alterProtectModeMode4674 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_CASCADE_in_alterProtectModeMode4676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_READONLY_in_alterProtectModeMode4694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby4726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby4728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby4747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby4749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby4751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_fileFormat4784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TEXTFILE_in_fileFormat4799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RCFILE_in_fileFormat4814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_fileFormat4829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat4833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_fileFormat4835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat4839 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_INPUTDRIVER_in_fileFormat4842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat4846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_fileFormat4848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat4852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_fileFormat4890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tabTypeExpr4926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_DOT_in_tabTypeExpr4929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0700000000000040L});
    public static final BitSet FOLLOW_set_in_tabTypeExpr4932 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_tabTypeExpr_in_partTypeExpr4975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_partTypeExpr4977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement5019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_descStatement5025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_partTypeExpr_in_descStatement5036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement5061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_descStatement5064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008200000000000L,0x0000000000410043L,0x7F1FC10400000000L,0x7FFD800C000001C0L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000410043L,0x7F1FC10400000000L,0x7FFD800C000001C0L});
    public static final BitSet FOLLOW_descFuncNames_in_descStatement5072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement5096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_DATABASE_in_descStatement5099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_descStatement5107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ANALYZE_in_analyzeStatement5147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_analyzeStatement5149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableOrPartition_in_analyzeStatement5154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_COMPUTE_in_analyzeStatement5157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_STATISTICS_in_analyzeStatement5159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_KW_DATABASES_in_showStatement5198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_SCHEMAS_in_showStatement5200 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement5204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TABLES_in_showStatement5227 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0808000000000000L,0x0000000000410040L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement5231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement5233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_showStatement5238 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000010040L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement5243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_FUNCTIONS_in_showStatement5277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_PARTITIONS_in_showStatement5300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_showStatement5302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement5304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_showStatement5326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement5328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000410000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement5332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement5334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_showStatement5339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement5343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5345 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement5347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_showStatement5377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_showStatement5381 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_showStatement5384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_showStatement5388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_showStatement5390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_LOCKS_in_showStatement5415 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_partTypeExpr_in_showStatement5420 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement5427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000040000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_showStatement5456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_INDEX_in_showStatement5461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_INDEXES_in_showStatement5463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_ON_in_showStatement5466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement5472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement5474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_showStatement5479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_lockStatement5528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_lockStatement5530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableName_in_lockStatement5532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_lockStatement5534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_lockMode_in_lockStatement5537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_lockMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNLOCK_in_unlockStatement5608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_unlockStatement5610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableName_in_unlockStatement5612 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_unlockStatement5614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createRoleStatement5654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_kwRole_in_createRoleStatement5656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_createRoleStatement5660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropRoleStatement5700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_kwRole_in_dropRoleStatement5702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_dropRoleStatement5706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantPrivileges5746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001044008L,0x0000000000078200L});
    public static final BitSet FOLLOW_privilegeList_in_grantPrivileges5750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_privilegeObject_in_grantPrivileges5758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_TO_in_grantPrivileges5767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000080000L});
    public static final BitSet FOLLOW_principalSpecification_in_grantPrivileges5769 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_WITH_in_grantPrivileges5778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_withOption_in_grantPrivileges5780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REVOKE_in_revokePrivileges5830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001044008L,0x0000000000078200L});
    public static final BitSet FOLLOW_privilegeList_in_revokePrivileges5832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_privilegeObject_in_revokePrivileges5834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_revokePrivileges5837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000080000L});
    public static final BitSet FOLLOW_principalSpecification_in_revokePrivileges5839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantRole5883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_kwRole_in_grantRole5885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_grantRole5887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_grantRole5890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_grantRole5892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_TO_in_grantRole5896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000080000L});
    public static final BitSet FOLLOW_principalSpecification_in_grantRole5898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REVOKE_in_revokeRole5940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_kwRole_in_revokeRole5942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_revokeRole5944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_revokeRole5947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_revokeRole5949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_FROM_in_revokeRole5953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000080000L});
    public static final BitSet FOLLOW_principalSpecification_in_revokeRole5955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showRoleGrants5997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_kwRole_in_showRoleGrants5999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_KW_GRANT_in_showRoleGrants6001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000080000L});
    public static final BitSet FOLLOW_principalName_in_showRoleGrants6003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showGrants6042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_KW_GRANT_in_showGrants6044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000080000L});
    public static final BitSet FOLLOW_principalName_in_showGrants6046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_privilegeIncludeColObject_in_showGrants6048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ON_in_privilegeIncludeColObject6091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TABLE_in_privilegeIncludeColObject6096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_DATABASE_in_privilegeIncludeColObject6098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_privilegeIncludeColObject6101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_privilegeIncludeColObject6104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameList_in_privilegeIncludeColObject6108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_privilegeIncludeColObject6110 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_privilegeIncludeColObject6114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ON_in_privilegeObject6165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TABLE_in_privilegeObject6170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_DATABASE_in_privilegeObject6172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_privilegeObject6175 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_privilegeObject6177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_privlegeDef_in_privilegeList6224 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_privilegeList6227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001044008L,0x0000000000078200L});
    public static final BitSet FOLLOW_privlegeDef_in_privilegeList6229 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_privilegeType_in_privlegeDef6271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_privlegeDef6274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameList_in_privlegeDef6278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_privlegeDef6280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALL_in_privilegeType6325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_privilegeType6339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UPDATE_in_privilegeType6353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_privilegeType6367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_privilegeType6381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INDEX_in_privilegeType6395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_privilegeType6409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SELECT_in_privilegeType6423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_DATABASE_in_privilegeType6437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_principalName_in_principalSpecification6470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_principalSpecification6473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000080000L});
    public static final BitSet FOLLOW_principalName_in_principalSpecification6475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_kwUser_in_principalName6513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_principalName6515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GROUP_in_principalName6531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_principalName6533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kwRole_in_principalName6549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_principalName6551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_withOption6586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_OPTION_in_withOption6588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MSCK_in_metastoreCheck6625 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_REPAIR_in_metastoreCheck6630 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_metastoreCheck6635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_metastoreCheck6639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck6641 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_metastoreCheck6645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck6647 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_CREATE_in_createFunctionStatement6701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_createFunctionStatement6703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_createFunctionStatement6705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_createFunctionStatement6707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_AS_in_createFunctionStatement6709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_createFunctionStatement6711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropFunctionStatement6752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_dropFunctionStatement6754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_dropFunctionStatement6756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_ifExists_in_dropFunctionStatement6758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_dropFunctionStatement6761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createViewStatement6803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_orReplace_in_createViewStatement6806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_createViewStatement6810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_ifNotExists_in_createViewStatement6813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableName_in_createViewStatement6819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000028400L,0x0000000001000000L});
    public static final BitSet FOLLOW_LPAREN_in_createViewStatement6830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameCommentList_in_createViewStatement6832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_createViewStatement6834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000028000L,0x0000000001000000L});
    public static final BitSet FOLLOW_tableComment_in_createViewStatement6838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000020000L,0x0000000001000000L});
    public static final BitSet FOLLOW_viewPartition_in_createViewStatement6841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000020000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createViewStatement6852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_AS_in_createViewStatement6863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000020000L,0x0000000000001000L});
    public static final BitSet FOLLOW_selectStatement_in_createViewStatement6873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_viewPartition6996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_ON_in_viewPartition6998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_viewPartition7000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameList_in_viewPartition7002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_viewPartition7004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropViewStatement7043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_dropViewStatement7045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_ifExists_in_dropViewStatement7047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_viewName_in_dropViewStatement7050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_showStmtIdentifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_tableComment7129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableComment7133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_tablePartition7170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_tablePartition7172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_tablePartition7174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameTypeList_in_tablePartition7176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_tablePartition7178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_tableBuckets7223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets7225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets7227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameList_in_tableBuckets7231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets7233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_SORTED_in_tableBuckets7236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets7238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets7240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameOrderList_in_tableBuckets7244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets7246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_INTO_in_tableBuckets7250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Number_in_tableBuckets7254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_BUCKETS_in_tableBuckets7256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_rowFormat7303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_rowFormat7319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDREADER_in_recordReader7368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_recordReader7370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDWRITER_in_recordWriter7419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_recordWriter7421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatSerde7470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatSerde7472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_SERDE_in_rowFormatSerde7474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_rowFormatSerde7478 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_WITH_in_rowFormatSerde7481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde7483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableProperties_in_rowFormatSerde7487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatDelimited7539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatDelimited7541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_DELIMITED_in_rowFormatDelimited7543 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000054800000000L});
    public static final BitSet FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited7545 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000054000000000L});
    public static final BitSet FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited7548 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited7551 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited7554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_tableRowFormat7610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_tableRowFormat7630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed7677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableProperties_in_tablePropertiesPrefixed7680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_tableProperties7713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_tablePropertiesList_in_tableProperties7715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_tableProperties7717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList7758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_tablePropertiesList7761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList7763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty7809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_EQUAL_in_keyValueProperty7811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty7815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier7860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier7862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier7864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier7868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier7871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier7873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier7877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier7929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier7931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier7933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier7935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier7939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier7985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier7987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier7989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier7991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier7995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier8041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier8043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier8045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier8049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat8099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_TEXTFILE_in_tableFileFormat8118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_RCFILE_in_tableFileFormat8137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_tableFileFormat8156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat8162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8166 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_INPUTDRIVER_in_tableFileFormat8169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat8175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableFileFormat8219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat8235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat8237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableProperties_in_tableFileFormat8241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_tableFileFormat8278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_tableLocation8326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableLocation8330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList8366 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameTypeList8369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList8371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList8409 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameColonTypeList8412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList8414 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnName_in_columnNameList8452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameList8455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnName_in_columnNameList8457 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_columnName8501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList8528 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameOrderList8531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList8533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_columnNameOrder8571 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_ASC_in_columnNameOrder8576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESC_in_columnNameOrder8582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList8654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameCommentList8657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList8659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_columnNameComment8699 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameComment8702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameComment8706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_columnRefOrder8754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_ASC_in_columnRefOrder8759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESC_in_columnRefOrder8765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_columnNameType8839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x67FFC10000000000L});
    public static final BitSet FOLLOW_colType_in_columnNameType8841 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameType8844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameType8848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_columnNameColonType8934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_columnNameColonType8936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x67FFC10000000000L});
    public static final BitSet FOLLOW_colType_in_columnNameColonType8938 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameColonType8941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameColonType8945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_colType9029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colType_in_colTypeList9056 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_colTypeList9059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x67FFC10000000000L});
    public static final BitSet FOLLOW_colType_in_colTypeList9061 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_primitiveType_in_type9089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listType_in_type9097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_structType_in_type9105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mapType_in_type9113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_type9121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TINYINT_in_primitiveType9143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SMALLINT_in_primitiveType9164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INT_in_primitiveType9184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BIGINT_in_primitiveType9209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BOOLEAN_in_primitiveType9231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FLOAT_in_primitiveType9252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DOUBLE_in_primitiveType9275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATE_in_primitiveType9297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATETIME_in_primitiveType9321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType9341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRING_in_primitiveType9360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BINARY_in_primitiveType9382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ARRAY_in_listType9423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_listType9425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x67FFC10000000000L});
    public static final BitSet FOLLOW_type_in_listType9427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_listType9429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRUCT_in_structType9466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_structType9468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnNameColonTypeList_in_structType9470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_structType9472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_mapType9507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_mapType9509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x03FFC00000000000L});
    public static final BitSet FOLLOW_primitiveType_in_mapType9513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_mapType9515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x67FFC10000000000L});
    public static final BitSet FOLLOW_type_in_mapType9519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_mapType9521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNIONTYPE_in_unionType9564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_unionType9566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x67FFC10000000000L});
    public static final BitSet FOLLOW_colTypeList_in_unionType9568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_unionType9570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNION_in_queryOperator9605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_ALL_in_queryOperator9607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_queryStatement_in_queryStatementExpression9631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_queryOperator_in_queryStatementExpression9634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000010000020000L,0x0000000000001001L});
    public static final BitSet FOLLOW_queryStatement_in_queryStatementExpression9637 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fromClause_in_queryStatement9660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000020000L,0x0000000000001001L});
    public static final BitSet FOLLOW_body_in_queryStatement9670 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000020000L,0x0000000000001001L});
    public static final BitSet FOLLOW_regular_body_in_queryStatement9692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertClause_in_regular_body9711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000020000L,0x0000000000001000L});
    public static final BitSet FOLLOW_selectClause_in_regular_body9716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_fromClause_in_regular_body9721 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x00000001F8000004L});
    public static final BitSet FOLLOW_whereClause_in_regular_body9726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x00000001F0000004L});
    public static final BitSet FOLLOW_groupByClause_in_regular_body9732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001F0000004L});
    public static final BitSet FOLLOW_havingClause_in_regular_body9738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001E0000004L});
    public static final BitSet FOLLOW_orderByClause_in_regular_body9744 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001C0000004L});
    public static final BitSet FOLLOW_clusterByClause_in_regular_body9750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000180000004L});
    public static final BitSet FOLLOW_distributeByClause_in_regular_body9756 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L});
    public static final BitSet FOLLOW_sortByClause_in_regular_body9762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_limitClause_in_regular_body9768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectStatement_in_regular_body9861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_selectStatement9879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_fromClause_in_selectStatement9884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x00000001F8000004L});
    public static final BitSet FOLLOW_whereClause_in_selectStatement9889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x00000001F0000004L});
    public static final BitSet FOLLOW_groupByClause_in_selectStatement9895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001F0000004L});
    public static final BitSet FOLLOW_havingClause_in_selectStatement9901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001E0000004L});
    public static final BitSet FOLLOW_orderByClause_in_selectStatement9907 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001C0000004L});
    public static final BitSet FOLLOW_clusterByClause_in_selectStatement9913 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000180000004L});
    public static final BitSet FOLLOW_distributeByClause_in_selectStatement9919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L});
    public static final BitSet FOLLOW_sortByClause_in_selectStatement9925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_limitClause_in_selectStatement9931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertClause_in_body10041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000020000L,0x0000000000001000L});
    public static final BitSet FOLLOW_selectClause_in_body10046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x00000001F8000004L});
    public static final BitSet FOLLOW_whereClause_in_body10051 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x00000001F0000004L});
    public static final BitSet FOLLOW_groupByClause_in_body10057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001F0000004L});
    public static final BitSet FOLLOW_havingClause_in_body10063 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001E0000004L});
    public static final BitSet FOLLOW_orderByClause_in_body10069 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001C0000004L});
    public static final BitSet FOLLOW_clusterByClause_in_body10075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000180000004L});
    public static final BitSet FOLLOW_distributeByClause_in_body10081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L});
    public static final BitSet FOLLOW_sortByClause_in_body10087 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_limitClause_in_body10093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_body10181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x00000001F8000004L});
    public static final BitSet FOLLOW_whereClause_in_body10186 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x00000001F0000004L});
    public static final BitSet FOLLOW_groupByClause_in_body10192 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001F0000004L});
    public static final BitSet FOLLOW_havingClause_in_body10198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001E0000004L});
    public static final BitSet FOLLOW_orderByClause_in_body10204 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001C0000004L});
    public static final BitSet FOLLOW_clusterByClause_in_body10210 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000180000004L});
    public static final BitSet FOLLOW_distributeByClause_in_body10216 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L});
    public static final BitSet FOLLOW_sortByClause_in_body10222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_limitClause_in_body10228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_insertClause10343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_insertClause10345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0042000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_destination_in_insertClause10347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_insertClause10349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_insertClause10368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_INTO_in_insertClause10370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_insertClause10372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableOrPartition_in_insertClause10374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCAL_in_destination10421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DIRECTORY_in_destination10423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_destination10425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DIRECTORY_in_destination10440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_destination10442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLE_in_destination10457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableOrPartition_in_destination10459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LIMIT_in_limitClause10493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Number_in_limitClause10497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SELECT_in_selectClause10538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008008000L,0x80019786000001D8L,0x0000000000000001L});
    public static final BitSet FOLLOW_hintClause_in_selectClause10540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008008000L,0x8001978600000198L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_ALL_in_selectClause10546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000180L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_selectClause10552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000180L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectList_in_selectClause10556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TRANSFORM_in_selectClause10590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_selectTrfmClause_in_selectClause10592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trfmClause_in_selectClause10663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectItem_in_selectList10706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_selectList10710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000180L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectItem_in_selectList10713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_selectTrfmClause10752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000180L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectExpressionList_in_selectTrfmClause10754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_selectTrfmClause10756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_rowFormat_in_selectTrfmClause10764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_recordWriter_in_selectTrfmClause10768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_USING_in_selectTrfmClause10774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_selectTrfmClause10776 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_KW_AS_in_selectTrfmClause10784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000440L});
    public static final BitSet FOLLOW_LPAREN_in_selectTrfmClause10788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_aliasList_in_selectTrfmClause10791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_columnNameTypeList_in_selectTrfmClause10795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_selectTrfmClause10798 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_aliasList_in_selectTrfmClause10804 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_selectTrfmClause10808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_rowFormat_in_selectTrfmClause10820 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_recordReader_in_selectTrfmClause10824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVIDE_in_hintClause10887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_STAR_in_hintClause10889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_PLUS_in_hintClause10891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000E00L});
    public static final BitSet FOLLOW_hintList_in_hintClause10893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_STAR_in_hintClause10895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DIVIDE_in_hintClause10897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hintItem_in_hintList10936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_hintList10939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000E00L});
    public static final BitSet FOLLOW_hintItem_in_hintList10941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_hintName_in_hintItem10979 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_hintItem10982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_hintArgs_in_hintItem10984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_hintItem10986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAPJOIN_in_hintName11030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STREAMTABLE_in_hintName11042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_HOLD_DDLTIME_in_hintName11054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hintArgName_in_hintArgs11089 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_hintArgs11092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_hintArgName_in_hintArgs11094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_hintArgName11136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpression_in_selectItem11169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020040L});
    public static final BitSet FOLLOW_KW_AS_in_selectItem11174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_selectItem11177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AS_in_selectItem11183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_selectItem11185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_selectItem11187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_COMMA_in_selectItem11190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_selectItem11192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_RPAREN_in_selectItem11196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_trfmClause11246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000180L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectExpressionList_in_trfmClause11251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_REDUCE_in_trfmClause11261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000180L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectExpressionList_in_trfmClause11263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_rowFormat_in_trfmClause11273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_recordWriter_in_trfmClause11277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_USING_in_trfmClause11283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_trfmClause11285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_KW_AS_in_trfmClause11293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000440L});
    public static final BitSet FOLLOW_LPAREN_in_trfmClause11297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_aliasList_in_trfmClause11300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_columnNameTypeList_in_trfmClause11304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_trfmClause11307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_aliasList_in_trfmClause11313 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_trfmClause11317 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_rowFormat_in_trfmClause11329 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_recordReader_in_trfmClause11333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectExpression11396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableAllColumns_in_selectExpression11400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpression_in_selectExpressionList11431 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_selectExpressionList11434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000180L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectExpression_in_selectExpressionList11436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_STAR_in_tableAllColumns11467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_tableAllColumns11489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_DOT_in_tableAllColumns11491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_STAR_in_tableAllColumns11493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tableOrColumn11541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList11580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList11583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_expressionList11585 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_aliasList11627 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_aliasList11630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_aliasList11632 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_FROM_in_fromClause11676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000440L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_joinSource_in_fromClause11678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fromSource_in_joinSource11713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x00000000000D8000L});
    public static final BitSet FOLLOW_joinToken_in_joinSource11717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000440L});
    public static final BitSet FOLLOW_fromSource_in_joinSource11720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080040L,0x0000000000000000L,0x00000000000D8000L});
    public static final BitSet FOLLOW_KW_ON_in_joinSource11723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_joinSource11726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x00000000000D8000L});
    public static final BitSet FOLLOW_uniqueJoinToken_in_joinSource11739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000440L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_uniqueJoinSource_in_joinSource11742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_joinSource11745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000440L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_uniqueJoinSource_in_joinSource11748 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_PRESERVE_in_uniqueJoinSource11777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000440L});
    public static final BitSet FOLLOW_fromSource_in_uniqueJoinSource11780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_uniqueJoinExpr_in_uniqueJoinSource11782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_uniqueJoinExpr11809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_uniqueJoinExpr11813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_COMMA_in_uniqueJoinExpr11816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_uniqueJoinExpr11820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_RPAREN_in_uniqueJoinExpr11824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNIQUEJOIN_in_uniqueJoinToken11867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken11899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kwInner_in_joinToken11931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken11934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LEFT_in_joinToken11957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken11960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken11962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RIGHT_in_joinToken11976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken11978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken11980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FULL_in_joinToken11994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken11997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken11999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LEFT_in_joinToken12013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_SEMI_in_joinToken12016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken12019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LATERAL_in_lateralView12050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_lateralView12052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000040L,0x6400010000000000L});
    public static final BitSet FOLLOW_function_in_lateralView12054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableAlias_in_lateralView12056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_AS_in_lateralView12058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_lateralView12060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_lateralView12063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_lateralView12065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_tableAlias12116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableSource_in_fromSource12156 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_subQuerySource_in_fromSource12160 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_lateralView_in_fromSource12164 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_TABLESAMPLE_in_tableBucketSample12198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_tableBucketSample12200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_BUCKET_in_tableBucketSample12202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Number_in_tableBucketSample12207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_OUT_in_tableBucketSample12210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_OF_in_tableBucketSample12212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Number_in_tableBucketSample12217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080800L});
    public static final BitSet FOLLOW_KW_ON_in_tableBucketSample12221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_tableBucketSample12225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_COMMA_in_tableBucketSample12228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_tableBucketSample12232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_RPAREN_in_tableBucketSample12238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLESAMPLE_in_splitSample12285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_splitSample12287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Number_in_splitSample12293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_PERCENT_in_splitSample12296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_splitSample12298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableBucketSample_in_tableSample12338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_splitSample_in_tableSample12346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_tableSource12375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_tableSample_in_tableSource12380 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_tableSource12387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tableName12440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_DOT_in_tableName12442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_tableName12448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_viewName12499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_DOT_in_viewName12501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_viewName12507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQuerySource12555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000010000020000L,0x0000000000001001L});
    public static final BitSet FOLLOW_queryStatementExpression_in_subQuerySource12557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_subQuerySource12559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_subQuerySource12561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WHERE_in_whereClause12604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_searchCondition_in_whereClause12606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_searchCondition12645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GROUP_in_groupByClause12679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_groupByClause12681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_groupByExpression_in_groupByClause12687 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_groupByClause12695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_groupByExpression_in_groupByClause12697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_expression_in_groupByExpression12744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_HAVING_in_havingClause12775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_havingCondition_in_havingClause12777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_havingCondition12816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ORDER_in_orderByClause12848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_orderByClause12850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause12856 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_orderByClause12864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause12866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_CLUSTER_in_clusterByClause12908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_clusterByClause12910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_clusterByClause12916 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_clusterByClause12924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_clusterByClause12926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_DISTRIBUTE_in_distributeByClause12969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_distributeByClause12971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_distributeByClause12977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_distributeByClause12980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_distributeByClause12982 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_SORT_in_sortByClause13024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_BY_in_sortByClause13026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause13032 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_sortByClause13040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause13042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_functionName_in_function13085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_function13091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000C41L,0x6400010008000000L,0x8001978600000188L,0x0000000000000001L});
    public static final BitSet FOLLOW_STAR_in_function13112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_function13128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000C41L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_function13133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_COMMA_in_function13136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_function13138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_RPAREN_in_function13156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_functionName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CAST_in_castExpression13318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_castExpression13324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_castExpression13336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_AS_in_castExpression13348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x03FFC00000000000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression13360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_castExpression13366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASE_in_caseExpression13407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_caseExpression13409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_WHEN_in_caseExpression13416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_caseExpression13418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_THEN_in_caseExpression13420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_caseExpression13422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006800000000L});
    public static final BitSet FOLLOW_KW_ELSE_in_caseExpression13431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_caseExpression13433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_END_in_caseExpression13441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASE_in_whenExpression13483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_WHEN_in_whenExpression13492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_whenExpression13494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_THEN_in_whenExpression13496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_whenExpression13498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006800000000L});
    public static final BitSet FOLLOW_KW_ELSE_in_whenExpression13507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_whenExpression13509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_END_in_whenExpression13517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Number_in_constant13559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_constant13567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteralSequence_in_constant13575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BigintLiteral_in_constant13583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SmallintLiteral_in_constant13591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TinyintLiteral_in_constant13599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_charSetStringLiteral_in_constant13607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanValue_in_constant13615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_stringLiteralSequence13636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_stringLiteralSequence13638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_CharSetName_in_charSetStringLiteral13683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_CharSetLiteral_in_charSetStringLiteral13687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceOrExpression_in_expression13730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NULL_in_atomExpression13751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_atomExpression13763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_atomExpression13771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_atomExpression13779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_atomExpression13787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whenExpression_in_atomExpression13795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableOrColumn_in_atomExpression13803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_atomExpression13811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_atomExpression13814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_atomExpression13816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomExpression_in_precedenceFieldExpression13839 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_precedenceFieldExpression13843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_precedenceFieldExpression13846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_precedenceFieldExpression13848 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOT_in_precedenceFieldExpression13855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_precedenceFieldExpression13858 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_set_in_precedenceUnaryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NULL_in_nullCondition13911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_nullCondition13925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_NULL_in_nullCondition13927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnaryOperator_in_precedenceUnaryPrefixExpression13955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceFieldExpression_in_precedenceUnaryPrefixExpression13960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnaryPrefixExpression_in_precedenceUnarySuffixExpression13977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_IS_in_precedenceUnarySuffixExpression13982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_nullCondition_in_precedenceUnarySuffixExpression13984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEXOR_in_precedenceBitwiseXorOperator14032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression14053 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_precedenceBitwiseXorOperator_in_precedenceBitwiseXorExpression14056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression14059 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_set_in_precedenceStarOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression14116 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00180000000000C0L});
    public static final BitSet FOLLOW_precedenceStarOperator_in_precedenceStarExpression14119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression14122 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00180000000000C0L});
    public static final BitSet FOLLOW_set_in_precedencePlusOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceStarExpression_in_precedencePlusExpression14171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000100L});
    public static final BitSet FOLLOW_precedencePlusOperator_in_precedencePlusExpression14174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceStarExpression_in_precedencePlusExpression14177 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000100L});
    public static final BitSet FOLLOW_AMPERSAND_in_precedenceAmpersandOperator14201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression14222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_precedenceAmpersandOperator_in_precedenceAmpersandExpression14225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression14228 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_BITWISEOR_in_precedenceBitwiseOrOperator14252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression14273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_precedenceBitwiseOrOperator_in_precedenceBitwiseOrExpression14276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression14279 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_set_in_precedenceEqualNegatableOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualOperator14333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_in_precedenceEqualOperator14337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_NS_in_precedenceEqualOperator14341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTEQUAL_in_precedenceEqualOperator14345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSTHANOREQUALTO_in_precedenceEqualOperator14349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSTHAN_in_precedenceEqualOperator14353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHANOREQUALTO_in_precedenceEqualOperator14357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHAN_in_precedenceEqualOperator14361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14385 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000410001L,0x1800000400000000L,0x3F80000000000000L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceEqualExpression14407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0180000000000000L});
    public static final BitSet FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualExpression14409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000410001L,0x1800000400000000L,0x3F80000000000000L});
    public static final BitSet FOLLOW_precedenceEqualOperator_in_precedenceEqualExpression14446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14450 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000410001L,0x1800000400000000L,0x3F80000000000000L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceEqualExpression14479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_IN_in_precedenceEqualExpression14481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressions_in_precedenceEqualExpression14483 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000410001L,0x1800000400000000L,0x3F80000000000000L});
    public static final BitSet FOLLOW_KW_IN_in_precedenceEqualExpression14517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressions_in_precedenceEqualExpression14519 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000410001L,0x1800000400000000L,0x3F80000000000000L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceEqualExpression14550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_BETWEEN_in_precedenceEqualExpression14552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_AND_in_precedenceEqualExpression14560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000410001L,0x1800000400000000L,0x3F80000000000000L});
    public static final BitSet FOLLOW_KW_BETWEEN_in_precedenceEqualExpression14605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_AND_in_precedenceEqualExpression14613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000440L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14618 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000410001L,0x1800000400000000L,0x3F80000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressions14676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_expressions14678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_COMMA_in_expressions14681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_expressions14683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_RPAREN_in_expressions14687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceNotOperator14713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceNotOperator_in_precedenceNotExpression14735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceEqualExpression_in_precedenceNotExpression14740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AND_in_precedenceAndOperator14762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceNotExpression_in_precedenceAndExpression14783 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_precedenceAndOperator_in_precedenceAndExpression14786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceNotExpression_in_precedenceAndExpression14789 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_OR_in_precedenceOrOperator14813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceAndExpression_in_precedenceOrExpression14834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceOrOperator_in_precedenceOrExpression14837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1008000000000000L,0x0000000000000441L,0x6400010008000000L,0x8001978600000100L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceAndExpression_in_precedenceOrExpression14840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TRUE_in_booleanValue14864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FALSE_in_booleanValue14869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_tableOrPartition14889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_tableOrPartition14891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITION_in_partitionSpec14923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_partitionSpec14930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_partitionVal_in_partitionSpec14932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_COMMA_in_partitionSpec14935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_partitionVal_in_partitionSpec14938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_RPAREN_in_partitionSpec14943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_partitionVal14974 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_EQUAL_in_partitionVal14977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000008000000L,0x8000078000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_constant_in_partitionVal14979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITION_in_dropPartitionSpec15013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_dropPartitionSpec15020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_dropPartitionVal_in_dropPartitionSpec15022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_COMMA_in_dropPartitionSpec15025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_dropPartitionVal_in_dropPartitionSpec15028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_RPAREN_in_dropPartitionSpec15033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_dropPartitionVal15064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000400000000L,0x1C00000000000000L});
    public static final BitSet FOLLOW_dropPartitionOperator_in_dropPartitionVal15066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000008000000L,0x8000078000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_constant_in_dropPartitionVal15068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_dropPartitionOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sysFuncNames0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sysFuncNames_in_descFuncNames15491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_descFuncNames15499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_descFuncNames15507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwUser15524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwRole15534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwInner15544 = new BitSet(new long[]{0x0000000000000002L});

}