/*
 * ============================================================
 * [ SYSTEM ]		: Web::Java ?? ( HOBOKEN )
 * [ PROJECT ]		: HOBOKEN Project
 * 
 * $Id: POITool.java 1097 2009-07-29 10:08:30Z mezawa_takuji $
 * ============================================================
 */

package prj.hoboken.patrasche.util.velocity;

import org.apache.poi.hssf.util.HSSFColor;

import prj.hoboken.patrasche.service.poi.SpreadUtil;

/**
 * POI?????????????????????????????????Web?????????????????????
 * 
 * ????????????????????
 * <pre>
 * &lt;tool&gt;
 *     &lt;key&gt;poi&lt;/key&gt;
 *     &lt;scope&gt;request&lt;/scope&gt;
 *     &lt;class&gt;prj.hoboken.patrasche.util.velocity.POITool&lt;/class&gt;
 * &lt;/tool&&gt;
 * 
 * String $poi.getBorder(short[], HSSFColor[])
 * String $poi.getBorderTop(short[], HSSFColor[])
 * String $poi.getBorderBottom(short[], HSSFColor[])
 * String $poi.getBorderLeft(short[], HSSFColor[])
 * String $poi.getBorderRight(short[], HSSFColor[])
 * </pre>
 * 
 * NOTE:<br>
 * <blockquote>
 * ???POI?SpreadUtil ?????????
 * </blockquote>
 * 
 * <p>$Revision: 1097 $<br>$Date: 2009-07-29 19:08:30 +0900 (?, 29 7 2009) $</p>
 *
 * @since  J2SDK 1.4 : Servlet2.3/JSP1.2 : Apache Struts 1.2 : SpringFramework 1.2
 * @since  Apache POI 3.0.1  (final 20070705)
 * @since  Patrasche 3.0
 * 
 * @author
 *     Mezawa Takuji  ( HOBOKEN Project )<br>
 *     <!-- *???*  ( CompanyName )<br> -->
 */
public class POITool {
    
    /**
     * ??????? SpreadCell ?????????????????????????Web????????????????????????
     * ???????????????????
     * 
     * @param border ?????
     * @param color ????
     * @return Web?????????????
     */
    public String getBorder(short[] border, HSSFColor[] color) {
        StringBuffer result = new StringBuffer("");
        
        buildBorderStyleString(result, border[0], color[0], WebBorder.top());        // ???
        buildBorderStyleString(result, border[1], color[1], WebBorder.bottom());        // ???
        buildBorderStyleString(result, border[2], color[2], WebBorder.right());        // ???
        buildBorderStyleString(result, border[3], color[3], WebBorder.left());        // ???
        
        return result.toString();
    }
    
    /**
     * ????????????????Web?????????????????
     * 
     * @param border ????????????????
     * @param color ??????????????????
     * @return Web????????????????????????????????
     */
    public String getBorderTop(short[] border, HSSFColor[] color) {
        return buildBorderStyleString(border[0], color[0]);
    }
    
    /**
     * ????????????????Web?????????????????
     * 
     * @param border ????????????????
     * @param color ??????????????????
     * @return Web????????????????????????????????
     */
    public String getBorderBottom(short border[], HSSFColor[] color) {
        return buildBorderStyleString(border[1], color[1]);
    }
        
    /**
     * ????????????????Web?????????????????
     * 
     * @param border ????????????????
     * @param color ??????????????????
     * @return Web????????????????????????????????
     */
    public String getBorderRight(short border[], HSSFColor[] color) {
        return buildBorderStyleString(border[2], color[2]);
    }
    
    /**
     * ????????????????Web?????????????????
     * 
     * @param border ????????????????
     * @param color ??????????????????
     * @return Web????????????????????????????????
     */
    public String getBorderLeft(short border[], HSSFColor[] color) {
        return buildBorderStyleString(border[3], color[3]);
    }
    
    // ------------------------------------------------------------ [ Private method ]

    /*
     * Web??????????????????????????????????????
     * EXCEL??????? ???????Web????????????????????????????
     * ???????????
     */
    private void buildBorderStyleString(StringBuffer build, short borderStyle, HSSFColor color, String styleString) {
        // ???????????????
        if (borderStyle > (short)0) {
            build.append(styleString).append(WebBorder.style(borderStyle));
        } else {
            build.append(styleString).append(WebBorder.none());
        }
        
        // ?????????????
        if (color != null) {
            build.append(WebBorder.blankSharp()).append(SpreadUtil.getRGBColor(color)).append(WebBorder.delimiter());
        } else {
            build.append(WebBorder.delimiter());
        }
    }
    
    /*
     * Web???????????????????????????????
     * EXCEL??????? ???????Web????????????????????????????
     * ???????????
     */
    private String buildBorderStyleString(short border, HSSFColor color) {
        StringBuffer borderString = new StringBuffer("");
        
        // ???????????
        if (border > (short)0) {
            borderString.append(WebBorder.style(border));
        } else {
            borderString.append(WebBorder.none());
        }
        
        // ?????????????
        if (color != null) {
            borderString.append(SpreadUtil.getRGBColor(color));
        }
        
        return borderString.toString();
    }
    
    // ------------------------------------------------------------ [ ????? ]

    /*
     * Web??????????????????????????????????
     */
    static class WebBorder {
        private WebBorder() {}
        public static String style(short borderStyle) {
            switch (borderStyle) {
                case 1:         // HSSFCellStyle.BORDER_THIN = 1
                case 7:         // HSSFCellStyle.BORDER_DOTTED = 7
                    return "solid 1px";
                case 2:         // HSSFCellStyle.BORDER_MEDIUM = 2
                    return "solid 2px";
                case 3:         // HSSFCellStyle.BORDER_DASHED = 3
                case 9:         // HSSFCellStyle.BORDER_DASH_DOT = 9
                case 11:        // HSSFCellStyle.BORDER_DASH_DOT_DOT = 11
                case 13:        // HSSFCellStyle.BORDER_SLANTED_DASH_DOT = 13
                    return "dashed 1px";
                case 4:         // HSSFCellStyle.BORDER_HAIR = 4
                    return "dotted 1px";
                case 5:         // HSSFCellStyle.BORDER_THICK = 5
                    return "solid 3px";
                case 6:         // HSSFCellStyle.BORDER_DOUBLE = 6
                    return "double 3px";
                case 8:         // HSSFCellStyle.BORDER_MEDIUM_DASHED = 8
                case 10:        // HSSFCellStyle.BORDER_MEDIUM_DASH_DOT = 10
                case 12:        // HSSFCellStyle.BORDER_MEDIUM_DASH_DOT_DOT = 12
                    return "dashed 2px";
                default:        // HSSFCellStyle.BORDER_NONE = 0
                    return "none";
            }
        }
        public static String none() { return "none"; }
        public static String top() { return "border-top:"; }
        public static String bottom() { return "border-bottom:"; }
        public static String left() { return "border-left:"; }
        public static String right() { return "border-right:"; }
        public static String delimiter() { return ";"; }
        public static String blankSharp() { return " #"; }
    }
}


/* Copyright (C) 2005, HOBOKEN Project, All Rights Reserved. */