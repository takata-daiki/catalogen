/*
 * ============================================================
 * [ SYSTEM ]		: Web::Java ?? ( HOBOKEN )
 * [ PROJECT ]		: HOBOKEN Project
 * 
 * $Id: SpreadCell.java 1098 2009-07-29 10:15:28Z mezawa_takuji $
 * ============================================================
 */

package prj.hoboken.patrasche.service.poi;

import java.io.Serializable;

import org.apache.commons.lang.ArrayUtils;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.util.HSSFColor;

import prj.hoboken.patrasche.util.SvoUtil;

/**
 * ??????????????????????????????
 * ?????POI?????????????????????????????????????
 * <p>
 * ???????????????????????????????????????????????
 * ?????????????????????
 * <pre class="code">
 * SpreadCell() : (1)
 * SpreadCell(int, Object) : (2)
 * </pre>
 * 
 * (1)?????????????????????????????????? {@link #setAttribute(int, Object)} ?
 * ?????????????NullPointerException????????????
 * <p>
 * (2)??????????????????????????????????????????????????????
 * 
 * NOTE:<br>
 * <blockquote>Apache POI ?????????</blockquote>
 * 
 * <p>$Revision: 1098 $<br/>$Date: 2009-07-29 19:15:28 +0900 (?, 29 7 2009) $</p>
 *
 * @since  J2SDK 1.4 : Servlet2.3/JSP1.2 : Apache Struts 1.2 : SpringFramework 1.2
 * @since  POI 3.0 (final 20070503)
 * @since  Patrasche 3.0
 * 
 * @author
 *     Mezawa Takuji  ( HOBOKEN Project )<br/>
 *     <!-- *???*  ( CompanyName )<br/> -->
 */
//public class SpreadCell implements Serializable {
public final class SpreadCell {
    
    /* ????????????????????UID */
    private static final long serialVersionUID = 3039047585618301032L;
    
    /* ???? */
    private CellAttribute property = new CellAttribute();
    
    private boolean celllock;
    /* ? ( 0=????1=??? ) */
    private HSSFColor[] color;
    /*  */
    private HSSFFont font;
    /* ???? ( 0=??1=??2=??3=? ) */
    private short[] border;
    /* ???? */
    private HSSFColor[] borderColor;
    
    
    /*
     * TODO: ??????????????????????????
     */
    
    /**
     * ??? <code>SpreadCell</code> ??????????????
     * ????????? {@link #setAttribute(int, Object)} ????{@link #setDecoration(HSSFColor[], HSSFFont, Object[], HSSFColor[])} ???????????????????
     */
    public SpreadCell() {
        this(-1, new Object());
        this.property.setStyle((short)-1);
        
        this.color = new HSSFColor[2];
        this.font = null;
        this.border = new short[4];
        this.borderColor = new HSSFColor[4];
    }
    
    /**
     * ??? <code>SpreadCell</code> ????????????????????
     * 
     * @param type ?????
     * @param value ???
     */
    public SpreadCell(int type, Object value) {
        this.property.setType(type);
        this.property.setStyle((short)-1);
        this.property.setObject(value);
        
        this.color = new HSSFColor[2];
        this.font = null;
        this.border = new short[4];
        this.borderColor = new HSSFColor[4];
    }
    
// ------------------------------------------------------------ [ setter ]

    /**
     * ????????????????
     * 
     * @param type ?????
     * @param value ???
     */
    public void setAttribute(int type, Object value) {
        this.property.setType(type);
        this.property.setObject(value);
        if (type == 2) {
            this.property.setFormula(value.toString());
        }
    }
    
    /**
     * ???????????????????????
     * 
     * @param type ?????
     * @param style ??????
     * @param value ???
     */
    public void setAttribute(int type, short style, Object value) {
        this.property.setType(type);
        this.property.setStyle(style);
        this.property.setObject(value);
        if (type == 2) {
            this.property.setFormula(value.toString());
        }
    }
    
    /**
     * ??????????????
     * 
     * @param color ?
     * @param font ????
     * @param border ??
     * @param borderColor ???? 
     */
    public void setDecoration(HSSFColor[] color, HSSFFont font, short[] border, HSSFColor[] borderColor) {
        this.color = (HSSFColor[])color.clone();
        this.font = font;
        this.border = ArrayUtils.clone(border);
        this.borderColor = (HSSFColor[])borderColor.clone();
    }
    
    /**
     * ?????????????
     * 
     * @param formula ??????
     */
    public void setFormula(String formula) {
        this.property.setFormula(formula);
    }

    // ------------------------------------------------------------ [ ????????? ]

    /**
     * ??????????
     * 
     * @param width ????????????
     */
    public void setCellWidth(int width) {
        this.property.setWidth(SpreadUtil.calcPixelToSize(width));
    }
    
    /**
     * ??????????
     * 
     * @param height ????????????
     */
    public void setCellHeight(int height) {
        this.property.setHeight(SpreadUtil.calcPointToSize(height));
    }
    
    /**
     * ??????????????
     * 
     * @param width ????????????
     * @param height ????????????
     */
    public void setCellWidthHeight(int width, int height) {
        this.property.setWidth(SpreadUtil.calcPixelToSize(width));
        this.property.setHeight(SpreadUtil.calcPointToSize(height));
    }
    
    /**
     * ??????????????????
     * ??????????????????????
     * <pre>
     *   ????
     *   ????
     *   ?????
     * </pre>
     * ?????????{@link HSSFCellStyle} ???????<p>
     * 
     * ????????????????????????????????????4???????????
     * ?????????????????????????????????????
     * 
     * @see org.apache.poi.hssf.usermodel.HSSFCellStyle
     * 
     * @param horizontial ???????????
     * @param vertical ???????????
     * @param isWraped ????????????????????
     * <ul type="circle">
     * <li>true     : ????????
     * <li>false    : ?????????
     * </ul>
     * @param isLocked ?????????????????
     * <ul type="circle">
     * <li>true     : ?????????
     * <li>false    : ???????????????????
     * </ul>
     */
    public void setAlignment(int horizontial, int vertical, boolean isWraped, boolean isLocked) {
        this.property.setHorizontial(Short.parseShort(String.valueOf(horizontial)));
        this.property.setVertical(Short.parseShort(String.valueOf(vertical)));
        this.property.setWrapedText(isWraped);
        this.celllock = isLocked;
    }
    
    // ------------------------------------------------------------ [ ?????? ]

    /**
     * ?????????????
     * ?????????HSSFColor??????????
     * 
     * @see org.apache.poi.hssf.util.HSSFColor
     * @see prj.hoboken.patrasche.service.poi.config.ColorContents
     * 
     * @param color ??????
     */
    public void setForegroundColor(HSSFColor color) {
        this.color[0] = color;
    }
    
    /**
     * ?????????????
     * ?????????HSSFColor??????????
     * 
     * @see org.apache.poi.hssf.util.HSSFColor
     * @see prj.hoboken.patrasche.service.poi.config.ColorContents
     * 
     * @param color ??????
     */
    public void setBackgroundColor(HSSFColor color) {
        this.color[1] = color;
    }
    
    /**
     * ???????????????
     * ?????????????????????????????????????????????
     * ???? setForegroundColor()?setBackgroundColor() ?????????
     * 
     * @see #setForegroundColor(HSSFColor)
     * @see #setBackgroundColor(HSSFColor)
     * 
     * @param foreground ??????????
     * @param background ??????????
     */
    public void setColor(HSSFColor foreground, HSSFColor background) {
        this.color[0] = foreground;
        this.color[1] = background;
    }
    
    // ------------------------------------------------------------ [ ????????? ]

    /**
     * ??????????????
     * ????????????HSSFFont??????????<p>
     * 
     * ??????????????????????
     * <pre>
     * ??
     * HSSFCellStyle style = hssfcell.getCellStyle();
     * HSSFFont font = this.book.getFontAt(style.getFontIndex());
     * </pre>
     * 
     * @param font ??????
     */
    public void setFont(HSSFFont font) {
        this.font = font;
    }
    
    /**
     * ?????????????????????????????????
     * ????????????EXCEL??????????????????????????????????????
     * ???????????????????????????????????????????
     * 
     * @param fontName ?????
     */
    public void setFontName(String fontName) {
        this.property.setFontName(fontName);
    }
    
    /**
     * ??????????????
     * ??????????????????????????????
     * <pre>
     *   ??? = 20 * ???
     * </pre>
     * 
     * @param size ???????
     */
    public void setFontSize(int size) {
        this.property.setFontSize(SpreadUtil.calcPointToSize(size));
    }
    
    /**
     * ?????????????????
     * ????????????????????
     * <pre>
     *   ??????????????
     *   ??????????????
     *   ????
     *   ???
     * </pre>
     * ?????????????????????????????????
     * 
     * @see #setBold()
     * @see #setItalic()
     * @see #setStrikeout()
     * @see #setUnderline()
     * 
     * @param bold ?????????????????
     * @param isItalic ?????????????????????????
     * <ul type="circle">
     * <li>true     : ??????
     * <li>false    : ???????
     * </ul>
     * @param isStrike ?????????????????
     * <ul type="circle">
     * <li>true     : ?????????
     * <li>false    : ??????????
     * </ul> 
     * @param underline ????????
     */
    public void setFontStyle(int bold, boolean isItalic, boolean isStrike, int underline) {
        this.property.setBold(Short.parseShort(String.valueOf(bold)));
        this.property.setItalic(isItalic);
        this.property.setStrikeout(isStrike);
        this.property.setUnderline(Byte.parseByte(String.valueOf(underline)));
    }
    
    // ------------------------------------------------------------ [ ????? ]

    /**
     * ?????????????????
     * ????????????????
     * <ul type="square">
     * <li>??       : Object????
     * <li>???? : HSSFColor????
     * </ul>
     * 
     * ??????????????????????
     * <pre>
     * short[] border = new short[4];
     * border[0] = style.getBorderTop();
     * border[1] = style.getBorderBottom();
     * border[2] = style.getBorderRight();
     * border[3] = style.getBorderLeft();
     * 
     * HSSFColor[] borderColor = new HSSFColor[4];
     * borderColor[0] = SpreadUtil.getPOIColor(style.getTopBorderColor());
     * borderColor[1] = SpreadUtil.getPOIColor(style.getBottomBorderColor());
     * borderColor[2] = SpreadUtil.getPOIColor(style.getRightBorderColor());
     * borderColor[3] = SpreadUtil.getPOIColor(style.getLeftBorderColor());
     * SpreadCell cell = new SpreadCell();
     * ??
     * cell.setBorder(border, borderColor);
     * </pre>
     * 
     * @param border ?????
     * @param borderColor ??????
     */
    public void setBorder(short[] border, HSSFColor[] borderColor) {
        this.border = ArrayUtils.clone(border);
        this.borderColor = (HSSFColor[])borderColor.clone();
    }
    
// ------------------------------------------------------------ [ getter ]

    /**
     * ????????????
     * 
     * @return ?????
     */
    public int getType() {
        return this.property.getType();
    }
    
    /**
     * ?????????????
     * 
     * @return ??????
     */
    public short getStyle() {
        return this.property.getStyle();
    }
    
    /**
     * ????Object????????
     * 
     * @return Object?????
     */
    public Object getObject() {
        return this.property.getObject();
    }
    
    /**
     * ???? String ????????
     * 
     * @return String ?????
     */
    public String getValue() {
        return this.property.getValue();
    }
    
    /**
     * ????????????????
     * 
     * @return ????????
     */
    public String getFormula() {
        return this.property.getFormula();
    }
    
    // ------------------------------------------------------------ [ ????????? ]

    /**
     * ??????????
     * 
     * @return ?????
     */
    public short getCellWidth() {
        return this.property.getWidth();
    }
    
    /**
     * ??????????
     * 
     * @return ?????
     */
    public short getCellHeight() {
        return this.property.getHeight();
    }
    
    /**
     * ?????????????? short ?????????????
     * ??????????????
     * <pre>
     *   ????? 0 = ????????
     *   ????? 1 = ?????????
     * </pre>
     * 
     * @return ????????????? short ??
     */
    public short[] getWidthHeight() {
        return this.property.getWidthHeight();
    }
    
    /**
     * ?????????????????
     * 
     * @return ??????????
     */
    public short getHorizontialAlignment() {
        return this.property.getHorizontial();
    }
    
    /**
     * ?????????????????
     * 
     * @return ??????????
     */
    public short getVerticalAlignment() {
        return this.property.getVertical();
    }
    
    /**
     * ??????????????????????
     * 
     * @return ???????????????
     */
    public boolean isWrapedText() {
        return this.property.isWrapedText();
    }
    
    /**
     * ????????????????????
     * 
     * @return ?????????????
     */
    public boolean isLocked() {
        return this.celllock;
    }
    
    // ------------------------------------------------------------ [ ?????? ]

    /**
     * ??????? 16 ??????????
     * ????? 16 ????????RGB ?????????
     * 
     * @return ??????
     */
    public Object getForeColor() {
        return SpreadUtil.getRGBColor(this.color[0]);
    }
    
    /**
     * POI????????????????????????
     * ???????????????
     * 
     * @return POI?????????????????
     */
    public short getForeColorIndex() {
        return this.color[0].getIndex();
    }
    
    /**
     * ??????? 16 ??????????
     * ????? 16 ????????RGB ?????????
     * 
     * @return ??????
     */
    public Object getBackColor() {
        return SpreadUtil.getRGBColor(this.color[1]);
    }
    
    /**
     * POI????????????????????????
     * ???????????????
     * 
     * @return POI?????????????????
     */
    public short getBackColorIndex() {
        return this.color[1].getIndex();
    }
    
    // ------------------------------------------------------------ [ ????????? ]

    /**
     * ???????????????
     * ????????????Web?????????????????????????????
     * ???EXCEL???????????????????????????????<p>
     * 
     * HSSFFont ??????????????????????????????????????????
     * 
     * @return ????????
     */
    public String getFontName() {
        if (SvoUtil.isUseObject(this.font)) {
            return this.font.getFontName();
        } else {
            return this.property.getFontName();
        }
    }
    
    /**
     * ??????????????????
     * ???????????????????????
     * <pre>
     *   ???????? / 20????????
     * </pre>
     * 
     * @return ???????????
     */
    public short getFontSize() {
        if (SvoUtil.isUseObject(this.font)) {
            return Short.parseShort(String.valueOf(this.font.getFontHeight() / 20));
        } else {
            return this.property.getFontSize();
        }
    }
        
    /**
     * ?????????????????????
     * 
     * @return ??????????????<br>
     * <ul type="circle">
     * <li>700 = ???????
     * <li>400 = ?????
     * </ul>
     */
    public short getFontWeight() {
        /*
         * HSSFFont.BOLDWEIGHT_BOLD = 0x2bc = 700
         * HSSFFont.BOLDWEIGHT_NORMAL = 0x190 = 400
         */
        if (SvoUtil.isUseObject(this.font)) {
            return this.font.getBoldweight();
        } else {
            return this.property.getBold();
        }
    }
    
    /**
     * ????????????????????????????????
     * 
     * @return ??????????????????
     * <ul type="circle">
     * <li>true     : ???????
     * <li>false    : ???????
     * </ul>
     */
    public boolean isBoldFont() {
        return (getFontWeight() == HSSFFont.BOLDWEIGHT_BOLD) ? true : false;
    }
    
    /**
     * ????????????????????????
     * 
     * @return ???????????????????<br>
     * <ul type="circle">
     * <li>true     : ????????
     * <li>false    : ?????
     * </ul>
     */
    public boolean isItalicFont() {
        if (SvoUtil.isUseObject(this.font)) {
            return this.font.getItalic();
        } else {
            return this.property.isItalic();
        }
    }
    
    /**
     * ????????????????????????????????
     * 
     * @return ??????????????????????<br>
     * <ul type="circle">
     * <li>true     : ?????????
     * <li>false    : ?????????
     * </ul>
     */
    public boolean isStrikeoutFont() {
        if (SvoUtil.isUseObject(this.font)) {
            return this.font.getStrikeout();
        } else {
            return this.property.isStrikeout();
        }
    }
    
    /**
     * ????????????????????????????????????
     * 
     * @return ???????????????????<br>
     * <ul type="circle">
     * <li>0     : ????
     * <li>1     : ?????
     * <li>2     : ??????
     * <li>33   : ?????????
     * <li>34   : ??????????
     * </ul>
     */
    public byte getUnderline() {
        /*
         * ??????????????
         * HSSFFont.U_NONE = 0
         * HSSFFont.U_SINGLE = 1
         * HSSFFont.U_DOUBLE = 2
         * HSSFFont.U_SINGLE_ACCOUNTING = 0x21 ( = 33 )
         * HSSFFont.U_DOUBLE_ACCOUNTING = 0x22 ( = 34 )
         */
        if (SvoUtil.isUseObject(this.font)) {
            return this.font.getUnderline();
        } else {
            return this.property.getUnderline();
        }
    }
    
    // ------------------------------------------------------------ [ ??????? ]

    /**
     * ?????????????????? short ????????????
     * ?????????????
     * <pre>
     *   ????? 0 = ???
     *   ????? 1 = ???
     *   ????? 2 = ???
     *   ????? 3 = ???
     * </pre>
     * 
     * ??????????????????????????????????????
     * 
     * @see #getBorderTop()
     * @see #getBorderBottom()
     * @see #getBorderRight()
     * @see #getBorderLeft()
     * 
     * @return ????
     */
    public short[] getBorderStyle() {
        return ArrayUtils.clone(this.border);
    }
    
    /**
     * ???????????????????
     * 
     * @return ?????
     */
    public short getBorderTop() {
        return this.border[0];
    }
    
    /**
     * ???????????????????
     * 
     * @return ????? 
     */
    public short getBorderBottom() {
        return this.border[1];
    }
    
    /**
     * ???????????????????
     * 
     * @return ?????
     */
    public short getBorderRight() {
        return this.border[2];
    }
    
    /**
     * ???????????????????
     * 
     * @return ?????
     */
    public short getBorderLeft() {
        return this.border[3];
    }
    
    /**
     * ?????????????? HSSFColor ????????????
     * ?????????????
     * <pre>
     *   ????? 0 = ???
     *   ????? 1 = ???
     *   ????? 2 = ???
     *   ????? 3 = ???
     * </pre>
     * 
     * ??????????????????????????????????????
     * 
     * @see #getTopBorderColor()
     * @see #getBottomBorderColor()
     * @see #getRightBorderColor()
     * @see #getLeftBorderColor()
     * 
     * @return ??????
     */
    public HSSFColor[] getBorderColor() {
        return (HSSFColor[])this.borderColor.clone();
    }
    
    /**
     * ?????????????????????
     * 
     * @return ???????
     */
    public HSSFColor getTopBorderColor() {
        return this.borderColor[0];
    }
    
    /**
     * ?????????????????????
     * 
     * @return ???????
     */
    public HSSFColor getBottomBorderColor() {
        return this.borderColor[1];
    }
    
    /**
     * ?????????????????????
     * 
     * @return ???????
     */
    public HSSFColor getRightBorderColor() {
        return this.borderColor[2];
    }
    
    /**
     * ?????????????????????
     * 
     * @return ???????
     */
    public HSSFColor getLeftBorderColor() {
        return this.borderColor[3];
    }
    
// ------------------------------------------------------------ [ ????? ]

    /*
     * ?????????????????????????????????
     * 
     * @since  POI 3.0.1  (final 20070705)
     * 
     * @author
     *     Mezawa Takuji  ( HOBOKEN Project )<br>
     */
    private static class CellAttribute implements Serializable {
        /* ????????????????????UID */
        private static final long serialVersionUID = -1225597232126296281L;
        private Object value = null;
        private String formula;
        private int type;
        private short style;
        private short width = 2341;
        private short height = 300;
        private String fontName = "";
        private short fontSize = 180;
        private short bold = HSSFFont.BOLDWEIGHT_NORMAL;
        private boolean isItalic = false;
        private boolean isStrike = false;
        private byte underline = HSSFFont.U_NONE;
        private short horizontial = HSSFCellStyle.ALIGN_GENERAL;
        private short vertical = HSSFCellStyle.VERTICAL_CENTER;
        private boolean isWraped = false;
        
        /**
         * ??? <code>CellAttribute</code> ??????????????
         */
        CellAttribute() {
            super();
        }
        
        /* (non-Javadoc)
         * @see java.lang.Object#toString()
         */
        public String toString() {
            StringBuffer s = new StringBuffer();
            
            s.append("\n").append("==================================================");
            s.append("\tVALUE=").append(this.value);
            s.append("\tFORMULA=(").append(this.formula).append(")");
            s.append("\tTYPE=").append(this.value);
            s.append("\tSTYLE=").append(this.value);
            s.append("\tW/H=").append(this.width).append("/").append(this.height);
            s.append("\tFONT NAME (size)=").append(this.fontName).append("(").append(this.fontSize).append(")");
            s.append("\tVBOLD(700=yes/400=no)=").append(this.bold);
            s.append("\tITALIC=").append(this.isItalic);
            s.append("\tSTRIKEOUT=").append(this.isStrike);
            s.append("\tUNDERLINE(0=none,1=single,2=double,33=single account,34=double account)=").append(this.underline);
            s.append("\tHORIZON-ALIGN(0=general,1=left,2=center,3=right,4=fill,5=justify,6=center-selection)=").append(this.horizontial);
            s.append("\tVERTICAL-ALIGN(0=top,1=center,2=bottom,3=justify)=").append(this.vertical);
            s.append("\tWRAPED-TEXT=").append(this.isWraped);
            s.append("\n").append("==================================================");
            
            return s.toString();
        }

        // ------------------------------------------------------------ [ setter ]

        /* ?????????????? */
        void setObject(Object value) { this.value = value; }
        /* ??????????? */
        void setValue(String value) { this.value = value; }
        /* ??????????? */
        void setFormula(String formula) { this.formula = formula; }
        /* ???????? */ 
        void setType(int type) { this.type = type; }
        /* ?????????? */
        void setStyle(short style) { this.style = style; }
        /* ?????? */
        void setWidth(short width) { this.width = width; }
        /* ???????? */
        void setHeight(short height) { this.height = height; }
        /* ??????????? */
        void setFontName(String name) { this.fontName = name; }
        /* ????????????? */
        void setFontSize(short size) { this.fontSize = size; }
        /* ?????????? */
        void setBold(short bold) { this.bold = bold; }
        /* ??????????? */
        void setItalic(boolean isItalic) { this.isItalic = isItalic; }
        /* ?????????? */
        void setStrikeout(boolean isStrike) { this.isStrike = isStrike; }
        /* ????????? */
        void setUnderline(byte underline) { this.underline = underline; }
        /* ?????????? */
        void setHorizontial(short horizontial) { this.horizontial = horizontial; }
        /* ?????????? */
        void setVertical(short vertical) { this.vertical = vertical; }
        /* ?????????????????????????? */
        void setWrapedText(boolean isWraped) { this.isWraped = isWraped; }
        
        // ------------------------------------------------------------ [ getter ]

        /* ?????????????? */
        Object getObject() { return this.value; }
        /* ??????????? */
        String getValue() { return this.value.toString(); }
        /* ??????????? */
        String getFormula() { return this.formula; }
        /* ???????? */
        int getType() { return this.type; }
        /* ?????????? */
        short getStyle() { return this.style; }
        /* ?????? */
        short getWidth() { return this.width; }
        /* ???????? */
        short getHeight() { return this.height; }
        /* ?????????? */
        short[] getWidthHeight() {
            short[] wh = new short[2];
            wh[0] = this.width;
            wh[1] = this.height;
            return wh;
        }
        /* ???????? */
        String getFontName() { return this.fontName; }
        /* ?????????? */
        short getFontSize() { return this.fontSize; }
        /* ?????????????????? */
        short getBold() { return this.bold; }
        /* ????????????????????????? */
        boolean isItalic() { return this.isItalic; }
        /* ??????????????? */
        boolean isStrikeout() { return this.isStrike; }
        /* ?????? */
        byte getUnderline() { return this.underline; }
        /* ?????????? */
        short getHorizontial() { return this.horizontial; }
        /* ?????????? */
        short getVertical() { return this.vertical; }
        /* ??????????????????? */
        boolean isWrapedText() { return this.isWraped; }
    };
}


/* Copyright (C) 2005, HOBOKEN Project, All Rights Reserved. */