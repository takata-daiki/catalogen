/*
 * University of Illinois/NCSA
 * Open Source License
 *
 * Copyright (c) 2012 University of Illinois at Urbana-Champaign.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal with the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimers.
 *
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimers in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     * Neither the names of the CoMoTo Project team, the University of
 *       Illinois at Urbana-Champaign, nor the names of its contributors
 *       may be used to endorse or promote products derived from this
 *       Software without specific prior written permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package edu.illinois.cs.comoto.jplag.wsdl;

import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.StreamingSenderState;
import com.sun.xml.rpc.client.StubPropertyConstants;
import com.sun.xml.rpc.client.http.HttpClientTransport;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.soap.message.InternalSOAPMessage;
import com.sun.xml.rpc.soap.message.SOAPBlockInfo;
import com.sun.xml.rpc.soap.message.SOAPHeaderBlockInfo;
import com.sun.xml.rpc.soap.streaming.SOAPNamespaceConstants;
import com.sun.xml.rpc.streaming.XMLReader;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;

import javax.xml.namespace.QName;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.handler.HandlerChain;
import java.rmi.RemoteException;

public class JPlagTyp_Stub
        extends com.sun.xml.rpc.client.StubBase
        implements edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp {


    /*
    *  public constructor
    */
    public JPlagTyp_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "https://www.ipd.uni-karlsruhe.de/jplag/JPlagService/service");
    }


    /*
    *  implementation of cancelSubmission
    */
    public int cancelSubmission(java.lang.String submissionID)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(cancelSubmission_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_cancelSubmission_cancelSubmissionRequestString_QNAME);
            _bodyBlock.setValue(submissionID);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/cancelSubmission");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer) ((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer) _responseObj).intValue();
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of setMailTemplate
    */
    public int setMailTemplate(edu.illinois.cs.comoto.jplag.wsdl.SetMailTemplateParams params)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(setMailTemplate_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_setMailTemplate_setMailTemplateParams_QNAME);
            _bodyBlock.setValue(params);
            _bodyBlock.setSerializer(ns1_mySetMailTemplateParams_LiteralSerializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/setMailTemplate");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer) ((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer) _responseObj).intValue();
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of requestAccount
    */
    public boolean requestAccount(edu.illinois.cs.comoto.jplag.wsdl.RequestData params)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(requestAccount_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_requestAccount_eRequestData_QNAME);
            _bodyBlock.setValue(params);
            _bodyBlock.setSerializer(ns1_myRequestData_LiteralSerializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/requestAccount");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            boolean _result = false;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((Boolean) ((SOAPDeserializationState) _responseObj).getInstance()).booleanValue();
            } else {
                _result = ((Boolean) _responseObj).booleanValue();
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of extendAccount
    */
    public int extendAccount(java.lang.String extendCode)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(extendAccount_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_extendAccount_extendAccountString_QNAME);
            _bodyBlock.setValue(extendCode);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/extendAccount");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer) ((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer) _responseObj).intValue();
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of finishAccountRequest
    */
    public int finishAccountRequest(edu.illinois.cs.comoto.jplag.wsdl.FinishRequestData finishData)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(finishAccountRequest_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_finishAccountRequest_FinishRequestData_QNAME);
            _bodyBlock.setValue(finishData);
            _bodyBlock.setSerializer(ns1_myFinishRequestData_LiteralSerializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/finishAccountRequest");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer) ((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer) _responseObj).intValue();
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of startSubmissionUpload
    */
    public java.lang.String startSubmissionUpload(edu.illinois.cs.comoto.jplag.wsdl.StartSubmissionUploadParams params)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(startSubmissionUpload_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_startSubmissionUpload_startSubmissionUploadParams_QNAME);
            _bodyBlock.setValue(params);
            _bodyBlock.setSerializer(ns1_myStartSubmissionUploadParams_LiteralSerializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/startSubmissionUpload");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            java.lang.String _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (java.lang.String) ((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (java.lang.String) _responseObj;
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of updateUserInfo
    */
    public int updateUserInfo(edu.illinois.cs.comoto.jplag.wsdl.UpdateUserInfoParams params)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(updateUserInfo_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_updateUserInfo_updateUserInfoParams_QNAME);
            _bodyBlock.setValue(params);
            _bodyBlock.setSerializer(ns1_myUpdateUserInfoParams_LiteralSerializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/updateUserInfo");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer) ((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer) _responseObj).intValue();
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of continueResultDownload
    */
    public byte[] continueResultDownload(int dummy)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(continueResultDownload_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_continueResultDownload_continueResultDownloadDummyInt_QNAME);
            _bodyBlock.setValue(new java.lang.Integer(dummy));
            _bodyBlock.setSerializer(ns2_myns2__int__int_Int_Serializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/continueResultDownload");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            byte[] _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (byte[]) ((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (byte[]) _responseObj;
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of setUserData
    */
    public int setUserData(edu.illinois.cs.comoto.jplag.wsdl.SetUserDataParams params)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(setUserData_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_setUserData_setUserDataParams_QNAME);
            _bodyBlock.setValue(params);
            _bodyBlock.setSerializer(ns1_mySetUserDataParams_LiteralSerializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/setUserData");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer) ((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer) _responseObj).intValue();
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of continueSubmissionUpload
    */
    public int continueSubmissionUpload(byte[] data)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(continueSubmissionUpload_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_continueSubmissionUpload_continueSubmissionUploadData_QNAME);
            _bodyBlock.setValue(data);
            _bodyBlock.setSerializer(ns2_myns2_base64Binary__byte_Base64Binary_Serializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/continueSubmissionUpload");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer) ((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer) _responseObj).intValue();
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of getMailTemplates
    */
    public edu.illinois.cs.comoto.jplag.wsdl.MailTemplateArray getMailTemplates(int type)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getMailTemplates_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getMailTemplates_getMailTemplatesInt_QNAME);
            _bodyBlock.setValue(new java.lang.Integer(type));
            _bodyBlock.setSerializer(ns2_myns2__int__int_Int_Serializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/getMailTemplates");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            edu.illinois.cs.comoto.jplag.wsdl.MailTemplateArray _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.MailTemplateArray) ((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.MailTemplateArray) _responseObj;
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of startResultDownload
    */
    public edu.illinois.cs.comoto.jplag.wsdl.StartResultDownloadData startResultDownload(java.lang.String submissionID)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(startResultDownload_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_startResultDownload_startResultDownloadRequestString_QNAME);
            _bodyBlock.setValue(submissionID);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/startResultDownload");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            edu.illinois.cs.comoto.jplag.wsdl.StartResultDownloadData _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.StartResultDownloadData) ((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.StartResultDownloadData) _responseObj;
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of setDeveloperState
    */
    public int setDeveloperState(edu.illinois.cs.comoto.jplag.wsdl.SetDeveloperStateParams params)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(setDeveloperState_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_setDeveloperState_setDeveloperStateParams_QNAME);
            _bodyBlock.setValue(params);
            _bodyBlock.setSerializer(ns1_mySetDeveloperStateParams_LiteralSerializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/setDeveloperState");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer) ((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer) _responseObj).intValue();
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of getStatus
    */
    public edu.illinois.cs.comoto.jplag.wsdl.Status getStatus(java.lang.String submissionID)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getStatus_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getStatus_getStatusRequestString_QNAME);
            _bodyBlock.setValue(submissionID);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/getStatus");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            edu.illinois.cs.comoto.jplag.wsdl.Status _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.Status) ((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.Status) _responseObj;
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of getServerInfo
    */
    public edu.illinois.cs.comoto.jplag.wsdl.ServerInfo getServerInfo()
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getServerInfo_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(null);
            _bodyBlock.setSerializer(DummySerializer.getInstance());
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/getServerInfo");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            edu.illinois.cs.comoto.jplag.wsdl.ServerInfo _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.ServerInfo) ((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.ServerInfo) _responseObj;
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of getResult
    */
    public javax.mail.internet.MimeMultipart getResult(java.lang.String submissionID)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getResult_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getResult_getResultRequestString_QNAME);
            _bodyBlock.setValue(submissionID);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/getResult");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            java.lang.String[] mimeTypes = null;
            mimeTypes = new java.lang.String[1];
            mimeTypes[0] = new java.lang.String("multipart/zip");
            javax.mail.internet.MimeMultipart zippedResult = (javax.mail.internet.MimeMultipart) getAttachment(_state.getResponse().getMessage(), mimeTypes, "zippedResult", false);
            return zippedResult;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of getUserDataArray
    */
    public edu.illinois.cs.comoto.jplag.wsdl.UserDataArray getUserDataArray(int dummy)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getUserDataArray_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getUserDataArray_getUserDataArrayDummyInt_QNAME);
            _bodyBlock.setValue(new java.lang.Integer(dummy));
            _bodyBlock.setSerializer(ns2_myns2__int__int_Int_Serializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/getUserDataArray");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            edu.illinois.cs.comoto.jplag.wsdl.UserDataArray _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.UserDataArray) ((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.UserDataArray) _responseObj;
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of getAccountRequests
    */
    public edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray getAccountRequests(boolean lengthOnly)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getAccountRequests_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getAccountRequests_getAccountRequestsLenOnlyBoolean_QNAME);
            _bodyBlock.setValue(new Boolean(lengthOnly));
            _bodyBlock.setSerializer(ns2_myns2__boolean__boolean_Boolean_Serializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/getAccountRequests");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray) ((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray) _responseObj;
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of notifyDevelopers
    */
    public int notifyDevelopers(edu.illinois.cs.comoto.jplag.wsdl.NotifyDevelopersParams params)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(notifyDevelopers_OPCODE);


            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_notifyDevelopers_notifyDevelopersParams_QNAME);
            _bodyBlock.setValue(params);
            _bodyBlock.setSerializer(ns1_myNotifyDevelopersParams_LiteralSerializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/notifyDevelopers");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer) ((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer) _responseObj).intValue();
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }

    /*
    *  implementation of compareSource
    */
    public java.lang.String compareSource(edu.illinois.cs.comoto.jplag.wsdl.Option arguments, javax.mail.internet.MimeMultipart inputZipFile)
            throws edu.illinois.cs.comoto.jplag.wsdl.JPlagException, java.rmi.RemoteException {

        try {

            StreamingSenderState _state = _start(_handlerChain);

            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(compareSource_OPCODE);

            addAttachment(_state.getRequest().getMessage(), (Object) inputZipFile, "multipart/zip", "inputZipFile");

            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_compareSource_eOption_QNAME);
            _bodyBlock.setValue(arguments);
            _bodyBlock.setSerializer(ns1_myOption_LiteralSerializer);
            _request.setBody(_bodyBlock);

            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.ipd.uni-karlsruhe.de/jplag/compareSource");

            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

            java.lang.String _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (java.lang.String) ((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (java.lang.String) _responseObj;
            }

            return _result;

        } catch (edu.illinois.cs.comoto.jplag.wsdl.JPlagException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                java.lang.Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }


    /*
    *  this method deserializes the request/response structure in the body
    */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case cancelSubmission_OPCODE:
                _deserialize_cancelSubmission(bodyReader, deserializationContext, state);
                break;
            case setMailTemplate_OPCODE:
                _deserialize_setMailTemplate(bodyReader, deserializationContext, state);
                break;
            case requestAccount_OPCODE:
                _deserialize_requestAccount(bodyReader, deserializationContext, state);
                break;
            case extendAccount_OPCODE:
                _deserialize_extendAccount(bodyReader, deserializationContext, state);
                break;
            case finishAccountRequest_OPCODE:
                _deserialize_finishAccountRequest(bodyReader, deserializationContext, state);
                break;
            case startSubmissionUpload_OPCODE:
                _deserialize_startSubmissionUpload(bodyReader, deserializationContext, state);
                break;
            case updateUserInfo_OPCODE:
                _deserialize_updateUserInfo(bodyReader, deserializationContext, state);
                break;
            case continueResultDownload_OPCODE:
                _deserialize_continueResultDownload(bodyReader, deserializationContext, state);
                break;
            case setUserData_OPCODE:
                _deserialize_setUserData(bodyReader, deserializationContext, state);
                break;
            case continueSubmissionUpload_OPCODE:
                _deserialize_continueSubmissionUpload(bodyReader, deserializationContext, state);
                break;
            case getMailTemplates_OPCODE:
                _deserialize_getMailTemplates(bodyReader, deserializationContext, state);
                break;
            case startResultDownload_OPCODE:
                _deserialize_startResultDownload(bodyReader, deserializationContext, state);
                break;
            case setDeveloperState_OPCODE:
                _deserialize_setDeveloperState(bodyReader, deserializationContext, state);
                break;
            case getStatus_OPCODE:
                _deserialize_getStatus(bodyReader, deserializationContext, state);
                break;
            case getServerInfo_OPCODE:
                _deserialize_getServerInfo(bodyReader, deserializationContext, state);
                break;
            case getResult_OPCODE:
                _deserialize_getResult(bodyReader, deserializationContext, state);
                break;
            case getUserDataArray_OPCODE:
                _deserialize_getUserDataArray(bodyReader, deserializationContext, state);
                break;
            case getAccountRequests_OPCODE:
                _deserialize_getAccountRequests(bodyReader, deserializationContext, state);
                break;
            case notifyDevelopers_OPCODE:
                _deserialize_notifyDevelopers(bodyReader, deserializationContext, state);
                break;
            case compareSource_OPCODE:
                _deserialize_compareSource(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", java.lang.Integer.toString(opcode));
        }
    }

    /*
    * This method handles the case of an empty SOAP body.
    */
    protected void _handleEmptyBody(XMLReader reader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
    }


    /*
    * This method deserializes the body of the cancelSubmission operation.
    */
    private void _deserialize_cancelSubmission(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
                ns2_myns2__int__int_Int_Serializer.deserialize(ns1_cancelSubmission_cancelSubmissionDummyInt_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_cancelSubmission_cancelSubmissionDummyInt_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the setMailTemplate operation.
    */
    private void _deserialize_setMailTemplate(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
                ns2_myns2__int__int_Int_Serializer.deserialize(ns1_setMailTemplate_setMailTemplateDummyInt_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_setMailTemplate_setMailTemplateDummyInt_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the requestAccount operation.
    */
    private void _deserialize_requestAccount(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object mybooleanObj =
                ns2_myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_requestAccount_requestAccountBoolean_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_requestAccount_requestAccountBoolean_QNAME);
        bodyBlock.setValue(mybooleanObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the extendAccount operation.
    */
    private void _deserialize_extendAccount(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
                ns2_myns2__int__int_Int_Serializer.deserialize(ns1_extendAccount_extendAccountDummyInt_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_extendAccount_extendAccountDummyInt_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the finishAccountRequest operation.
    */
    private void _deserialize_finishAccountRequest(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
                ns2_myns2__int__int_Int_Serializer.deserialize(ns1_finishAccountRequest_finishAccountRequestDummyInt_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_finishAccountRequest_finishAccountRequestDummyInt_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the startSubmissionUpload operation.
    */
    private void _deserialize_startSubmissionUpload(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myStringObj =
                ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_startSubmissionUpload_startSubmissionUploadResponseString_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_startSubmissionUpload_startSubmissionUploadResponseString_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the updateUserInfo operation.
    */
    private void _deserialize_updateUserInfo(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
                ns2_myns2__int__int_Int_Serializer.deserialize(ns1_updateUserInfo_updateUserInfoDummyInt_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_updateUserInfo_updateUserInfoDummyInt_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the continueResultDownload operation.
    */
    private void _deserialize_continueResultDownload(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object mybyteObj =
                ns2_myns2_base64Binary__byte_Base64Binary_Serializer.deserialize(ns1_continueResultDownload_continueResultDownloadData_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_continueResultDownload_continueResultDownloadData_QNAME);
        bodyBlock.setValue(mybyteObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the setUserData operation.
    */
    private void _deserialize_setUserData(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
                ns2_myns2__int__int_Int_Serializer.deserialize(ns1_setUserData_setUserDataDummyInt_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_setUserData_setUserDataDummyInt_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the continueSubmissionUpload operation.
    */
    private void _deserialize_continueSubmissionUpload(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
                ns2_myns2__int__int_Int_Serializer.deserialize(ns1_continueSubmissionUpload_continueSubmissionUploadDummyInt_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_continueSubmissionUpload_continueSubmissionUploadDummyInt_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the getMailTemplates operation.
    */
    private void _deserialize_getMailTemplates(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myMailTemplateArrayObj =
                ns1_myMailTemplateArray_LiteralSerializer.deserialize(ns1_getMailTemplates_MailTemplateArray_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getMailTemplates_MailTemplateArray_QNAME);
        bodyBlock.setValue(myMailTemplateArrayObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the startResultDownload operation.
    */
    private void _deserialize_startResultDownload(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myStartResultDownloadDataObj =
                ns1_myStartResultDownloadData_LiteralSerializer.deserialize(ns1_startResultDownload_startResultDownloadData_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_startResultDownload_startResultDownloadData_QNAME);
        bodyBlock.setValue(myStartResultDownloadDataObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the setDeveloperState operation.
    */
    private void _deserialize_setDeveloperState(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
                ns2_myns2__int__int_Int_Serializer.deserialize(ns1_setDeveloperState_setDeveloperStateDummyInt_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_setDeveloperState_setDeveloperStateDummyInt_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the getStatus operation.
    */
    private void _deserialize_getStatus(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myStatusObj =
                ns1_myStatus_LiteralSerializer.deserialize(ns1_getStatus_Status_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getStatus_Status_QNAME);
        bodyBlock.setValue(myStatusObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the getServerInfo operation.
    */
    private void _deserialize_getServerInfo(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myServerInfoObj =
                ns1_myServerInfo_LiteralSerializer.deserialize(ns1_getServerInfo_ServerInfo_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getServerInfo_ServerInfo_QNAME);
        bodyBlock.setValue(myServerInfoObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the getResult operation.
    */
    private void _deserialize_getResult(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the getUserDataArray operation.
    */
    private void _deserialize_getUserDataArray(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myUserDataArrayObj =
                ns1_myUserDataArray_LiteralSerializer.deserialize(ns1_getUserDataArray_UserDataArray_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUserDataArray_UserDataArray_QNAME);
        bodyBlock.setValue(myUserDataArrayObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the getAccountRequests operation.
    */
    private void _deserialize_getAccountRequests(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myRequestDataArrayObj =
                ns1_myRequestDataArray_LiteralSerializer.deserialize(ns1_getAccountRequests_RequestDataArray_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getAccountRequests_RequestDataArray_QNAME);
        bodyBlock.setValue(myRequestDataArrayObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the notifyDevelopers operation.
    */
    private void _deserialize_notifyDevelopers(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
                ns2_myns2__int__int_Int_Serializer.deserialize(ns1_notifyDevelopers_notifyDevelopersDummyInt_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_notifyDevelopers_notifyDevelopersDummyInt_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    * This method deserializes the body of the compareSource operation.
    */
    private void _deserialize_compareSource(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myStringObj =
                ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_compareSource_compareSourceResponseString_QNAME,
                        bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_compareSource_compareSourceResponseString_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getResponse().setBody(bodyBlock);
    }

    /*
    *  this method deserializes fault responses
    */
    protected Object _readBodyFaultElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object faultInfo = null;
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case cancelSubmission_OPCODE:
                faultInfo = myJPlagTyp_cancelSubmission_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case setMailTemplate_OPCODE:
                faultInfo = myJPlagTyp_setMailTemplate_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case requestAccount_OPCODE:
                faultInfo = myJPlagTyp_requestAccount_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case extendAccount_OPCODE:
                faultInfo = myJPlagTyp_extendAccount_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case finishAccountRequest_OPCODE:
                faultInfo = myJPlagTyp_finishAccountRequest_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case startSubmissionUpload_OPCODE:
                faultInfo = myJPlagTyp_startSubmissionUpload_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case updateUserInfo_OPCODE:
                faultInfo = myJPlagTyp_updateUserInfo_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case continueResultDownload_OPCODE:
                faultInfo = myJPlagTyp_continueResultDownload_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case setUserData_OPCODE:
                faultInfo = myJPlagTyp_setUserData_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case continueSubmissionUpload_OPCODE:
                faultInfo = myJPlagTyp_continueSubmissionUpload_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case getMailTemplates_OPCODE:
                faultInfo = myJPlagTyp_getMailTemplates_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case startResultDownload_OPCODE:
                faultInfo = myJPlagTyp_startResultDownload_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case setDeveloperState_OPCODE:
                faultInfo = myJPlagTyp_setDeveloperState_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case getStatus_OPCODE:
                faultInfo = myJPlagTyp_getStatus_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case getServerInfo_OPCODE:
                faultInfo = myJPlagTyp_getServerInfo_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case getResult_OPCODE:
                faultInfo = myJPlagTyp_getResult_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case getUserDataArray_OPCODE:
                faultInfo = myJPlagTyp_getUserDataArray_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case getAccountRequests_OPCODE:
                faultInfo = myJPlagTyp_getAccountRequests_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case notifyDevelopers_OPCODE:
                faultInfo = myJPlagTyp_notifyDevelopers_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case compareSource_OPCODE:
                faultInfo = myJPlagTyp_compareSource_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            default:
                return super._readBodyFaultElement(bodyReader, deserializationContext, state);
        }
        return faultInfo;
    }


    protected java.lang.String _getDefaultEnvelopeEncodingStyle() {
        return null;
    }

    public java.lang.String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }

    public java.lang.String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }

    public void _setEncodingStyle(java.lang.String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }


    /*
    * This method returns an array containing (prefix, nsURI) pairs.
    */
    protected java.lang.String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }

    /*
    * This method returns an array containing the names of the headers we understand.
    */
    public javax.xml.namespace.QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }

    private void addAttachment(javax.xml.soap.SOAPMessage message, Object value, java.lang.String mimeType, java.lang.String part) throws Exception {
        java.lang.String contentId = java.net.URLEncoder.encode(part, "UTF-8") + "=" + com.sun.xml.rpc.util.JAXRPCUtils.getUUID() + "@jaxrpc.sun.com";
        javax.xml.soap.AttachmentPart _attPart = null;
        if (value == null || mimeType == null) {
            return;
        }
        if (value instanceof javax.activation.DataHandler) {
            _attPart = message.createAttachmentPart((javax.activation.DataHandler) value);
        } else if (value instanceof javax.mail.internet.MimeMultipart) {
            java.lang.String contentType = ((javax.mail.internet.MimeMultipart) value).getContentType();
            javax.activation.DataHandler dataHandler = new javax.activation.DataHandler(value, contentType);
            _attPart = message.createAttachmentPart(dataHandler);
        } else {
            _attPart = message.createAttachmentPart(value, mimeType);
        }
        _attPart.setContentId("<" + contentId + ">");
        message.addAttachmentPart(_attPart);
    }

    private Object getAttachment(javax.xml.soap.SOAPMessage message, java.lang.String[] mimeTypes, java.lang.String partName, boolean isDataHandler) throws Exception {
        javax.xml.soap.AttachmentPart _attPart = null;
        for (int i = 0; i < mimeTypes.length; i++) {
            java.lang.String mimeType = mimeTypes[i];
            javax.xml.soap.MimeHeaders mimeHeaders = new javax.xml.soap.MimeHeaders();
            mimeHeaders.addHeader("Content-Type", mimeType);
            java.util.Iterator attachments = null;
            if (mimeType.endsWith("/*") || mimeType.startsWith("multipart/")) {
                attachments = message.getAttachments();
            } else {
                attachments = message.getAttachments(mimeHeaders);
            }
            if (attachments == null) {
                continue;
            }
            while (attachments.hasNext()) {
                _attPart = (javax.xml.soap.AttachmentPart) attachments.next();
                java.lang.String cId = _attPart.getContentId();
                int index = cId.lastIndexOf('@', cId.length());
                if (index == -1) {
                    continue;
                }
                java.lang.String localPart = cId.substring(0, index);
                index = localPart.lastIndexOf('=', localPart.length());
                if (index == -1) {
                    continue;
                }
                java.lang.String part = java.net.URLDecoder.decode(localPart.substring(0, index), "UTF-8");
                if (part.equals(partName) || part.equals("<" + partName)) {
                    if (isDataHandler) {
                        return _attPart.getDataHandler();
                    } else {
                        return _attPart.getContent();
                    }
                }
            }
        }
        throw new DeserializationException("soap.missing.attachment.for.id", partName);
    }

    protected void _preSendingHook(StreamingSenderState state) throws Exception {
        super._preSendingHook(state);
        switch (state.getRequest().getOperationCode()) {
            case compareSource_OPCODE:
                addNonExplicitAttachment(state);
                break;
        }
    }


    private void addNonExplicitAttachment(StreamingSenderState state) throws Exception {
        javax.xml.rpc.handler.soap.SOAPMessageContext smc = state.getMessageContext();
        javax.xml.soap.SOAPMessage message = state.getRequest().getMessage();
        Object c = _getProperty(StubPropertyConstants.SET_ATTACHMENT_PROPERTY);
        _setProperty(StubPropertyConstants.SET_ATTACHMENT_PROPERTY, null);
        if (c != null && c instanceof java.util.Collection) {
            for (java.util.Iterator iter = ((java.util.Collection) c).iterator(); iter.hasNext(); ) {
                Object attachment = iter.next();
                if (attachment instanceof javax.xml.soap.AttachmentPart) {
                    message.addAttachmentPart((javax.xml.soap.AttachmentPart) attachment);
                }
            }
        }
    }


    protected void _postSendingHook(StreamingSenderState state) throws Exception {
        super._postSendingHook(state);
        switch (state.getRequest().getOperationCode()) {
            case getResult_OPCODE:
                getNonExplicitAttachment(state);
                break;
        }
    }


    private void getNonExplicitAttachment(StreamingSenderState state) throws Exception {
        javax.xml.rpc.handler.soap.SOAPMessageContext smc = state.getMessageContext();
        javax.xml.soap.SOAPMessage message = state.getResponse().getMessage();
        java.util.ArrayList attachments = null;
        java.util.Iterator iter = message.getAttachments();
        while (iter.hasNext()) {
            if (attachments == null) {
                attachments = new java.util.ArrayList();
            }
            attachments.add(iter.next());
        }
        _setProperty(StubPropertyConstants.GET_ATTACHMENT_PROPERTY, attachments);
    }

    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_myRequestData_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.RequestData.class, ns1_RequestData_TYPE_QNAME);
        ns1_myMailTemplateArray_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.MailTemplateArray.class, ns1_MailTemplateArray_TYPE_QNAME);
        ns1_myStatus_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.Status.class, ns1_Status_TYPE_QNAME);
        ns2_myns2__int__int_Int_Serializer = (CombinedSerializer) registry.getSerializer("", int.class, ns2_int_TYPE_QNAME);
        ns1_myRequestDataArray_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray.class, ns1_RequestDataArray_TYPE_QNAME);
        ns1_myUpdateUserInfoParams_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.UpdateUserInfoParams.class, ns1_updateUserInfoParams_TYPE_QNAME);
        ns1_myUserDataArray_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.UserDataArray.class, ns1_UserDataArray_TYPE_QNAME);
        ns1_mySetUserDataParams_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.SetUserDataParams.class, ns1_setUserDataParams_TYPE_QNAME);
        ns1_myStartSubmissionUploadParams_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.StartSubmissionUploadParams.class, ns1_startSubmissionUploadParams_TYPE_QNAME);
        ns1_myNotifyDevelopersParams_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.NotifyDevelopersParams.class, ns1_notifyDevelopersParams_TYPE_QNAME);
        ns1_myFinishRequestData_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.FinishRequestData.class, ns1_FinishRequestData_TYPE_QNAME);
        ns2_myns2_base64Binary__byte_Base64Binary_Serializer = (CombinedSerializer) registry.getSerializer("", byte[].class, ns2_base64Binary_TYPE_QNAME);
        ns1_myServerInfo_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.ServerInfo.class, ns1_ServerInfo_TYPE_QNAME);
        ns2_myns2__boolean__boolean_Boolean_Serializer = (CombinedSerializer) registry.getSerializer("", boolean.class, ns2_boolean_TYPE_QNAME);
        ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer) registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        ns1_myStartResultDownloadData_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.StartResultDownloadData.class, ns1_startResultDownloadData_TYPE_QNAME);
        ns1_mySetMailTemplateParams_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.SetMailTemplateParams.class, ns1_setMailTemplateParams_TYPE_QNAME);
        ns1_myOption_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.Option.class, ns1_Option_TYPE_QNAME);
        ns1_mySetDeveloperStateParams_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.SetDeveloperStateParams.class, ns1_setDeveloperStateParams_TYPE_QNAME);
        ((Initializable) myJPlagTyp_cancelSubmission_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_setMailTemplate_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_requestAccount_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_extendAccount_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_finishAccountRequest_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_startSubmissionUpload_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_updateUserInfo_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_continueResultDownload_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_setUserData_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_continueSubmissionUpload_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_getMailTemplates_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_startResultDownload_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_setDeveloperState_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_getStatus_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_getServerInfo_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_getResult_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_getUserDataArray_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_getAccountRequests_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_notifyDevelopers_Fault_SOAPSerializer).initialize(registry);
        ((Initializable) myJPlagTyp_compareSource_Fault_SOAPSerializer).initialize(registry);
    }

    private static final javax.xml.namespace.QName _portName = new QName("http://www.ipd.uni-karlsruhe.de/jplag", "JPlagServicePort");
    private static final int cancelSubmission_OPCODE = 0;
    private static final int setMailTemplate_OPCODE = 1;
    private static final int requestAccount_OPCODE = 2;
    private static final int extendAccount_OPCODE = 3;
    private static final int finishAccountRequest_OPCODE = 4;
    private static final int startSubmissionUpload_OPCODE = 5;
    private static final int updateUserInfo_OPCODE = 6;
    private static final int continueResultDownload_OPCODE = 7;
    private static final int setUserData_OPCODE = 8;
    private static final int continueSubmissionUpload_OPCODE = 9;
    private static final int getMailTemplates_OPCODE = 10;
    private static final int startResultDownload_OPCODE = 11;
    private static final int setDeveloperState_OPCODE = 12;
    private static final int getStatus_OPCODE = 13;
    private static final int getServerInfo_OPCODE = 14;
    private static final int getResult_OPCODE = 15;
    private static final int getUserDataArray_OPCODE = 16;
    private static final int getAccountRequests_OPCODE = 17;
    private static final int notifyDevelopers_OPCODE = 18;
    private static final int compareSource_OPCODE = 19;
    private final CombinedSerializer myJPlagTyp_cancelSubmission_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_cancelSubmission_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_setMailTemplate_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_setMailTemplate_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_requestAccount_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_requestAccount_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_extendAccount_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_extendAccount_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_finishAccountRequest_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_finishAccountRequest_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_startSubmissionUpload_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_startSubmissionUpload_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_updateUserInfo_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_updateUserInfo_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_continueResultDownload_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_continueResultDownload_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_setUserData_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_setUserData_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_continueSubmissionUpload_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_continueSubmissionUpload_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_getMailTemplates_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_getMailTemplates_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_startResultDownload_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_startResultDownload_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_setDeveloperState_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_setDeveloperState_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_getStatus_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_getStatus_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_getServerInfo_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_getServerInfo_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_getResult_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_getResult_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_getUserDataArray_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_getUserDataArray_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_getAccountRequests_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_getAccountRequests_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_notifyDevelopers_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_notifyDevelopers_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myJPlagTyp_compareSource_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
            new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_compareSource_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private static final javax.xml.namespace.QName ns1_cancelSubmission_cancelSubmissionRequestString_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "cancelSubmissionRequestString");
    private static final javax.xml.namespace.QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
    private static final javax.xml.namespace.QName ns1_cancelSubmission_cancelSubmissionDummyInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "cancelSubmissionDummyInt");
    private static final javax.xml.namespace.QName ns2_int_TYPE_QNAME = SchemaConstants.QNAME_TYPE_INT;
    private CombinedSerializer ns2_myns2__int__int_Int_Serializer;
    private static final javax.xml.namespace.QName ns1_setMailTemplate_setMailTemplateParams_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "setMailTemplateParams");
    private static final javax.xml.namespace.QName ns1_setMailTemplateParams_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "setMailTemplateParams");
    private CombinedSerializer ns1_mySetMailTemplateParams_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_setMailTemplate_setMailTemplateDummyInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "setMailTemplateDummyInt");
    private static final javax.xml.namespace.QName ns1_requestAccount_eRequestData_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "eRequestData");
    private static final javax.xml.namespace.QName ns1_RequestData_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "RequestData");
    private CombinedSerializer ns1_myRequestData_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_requestAccount_requestAccountBoolean_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "requestAccountBoolean");
    private static final javax.xml.namespace.QName ns2_boolean_TYPE_QNAME = SchemaConstants.QNAME_TYPE_BOOLEAN;
    private CombinedSerializer ns2_myns2__boolean__boolean_Boolean_Serializer;
    private static final javax.xml.namespace.QName ns1_extendAccount_extendAccountString_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "extendAccountString");
    private static final javax.xml.namespace.QName ns1_extendAccount_extendAccountDummyInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "extendAccountDummyInt");
    private static final javax.xml.namespace.QName ns1_finishAccountRequest_FinishRequestData_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "FinishRequestData");
    private static final javax.xml.namespace.QName ns1_FinishRequestData_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "FinishRequestData");
    private CombinedSerializer ns1_myFinishRequestData_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_finishAccountRequest_finishAccountRequestDummyInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "finishAccountRequestDummyInt");
    private static final javax.xml.namespace.QName ns1_startSubmissionUpload_startSubmissionUploadParams_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "startSubmissionUploadParams");
    private static final javax.xml.namespace.QName ns1_startSubmissionUploadParams_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "startSubmissionUploadParams");
    private CombinedSerializer ns1_myStartSubmissionUploadParams_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_startSubmissionUpload_startSubmissionUploadResponseString_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "startSubmissionUploadResponseString");
    private static final javax.xml.namespace.QName ns1_updateUserInfo_updateUserInfoParams_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "updateUserInfoParams");
    private static final javax.xml.namespace.QName ns1_updateUserInfoParams_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "updateUserInfoParams");
    private CombinedSerializer ns1_myUpdateUserInfoParams_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_updateUserInfo_updateUserInfoDummyInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "updateUserInfoDummyInt");
    private static final javax.xml.namespace.QName ns1_continueResultDownload_continueResultDownloadDummyInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "continueResultDownloadDummyInt");
    private static final javax.xml.namespace.QName ns1_continueResultDownload_continueResultDownloadData_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "continueResultDownloadData");
    private static final javax.xml.namespace.QName ns2_base64Binary_TYPE_QNAME = SchemaConstants.QNAME_TYPE_BASE64_BINARY;
    private CombinedSerializer ns2_myns2_base64Binary__byte_Base64Binary_Serializer;
    private static final javax.xml.namespace.QName ns1_setUserData_setUserDataParams_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "setUserDataParams");
    private static final javax.xml.namespace.QName ns1_setUserDataParams_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "setUserDataParams");
    private CombinedSerializer ns1_mySetUserDataParams_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_setUserData_setUserDataDummyInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "setUserDataDummyInt");
    private static final javax.xml.namespace.QName ns1_continueSubmissionUpload_continueSubmissionUploadData_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "continueSubmissionUploadData");
    private static final javax.xml.namespace.QName ns1_continueSubmissionUpload_continueSubmissionUploadDummyInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "continueSubmissionUploadDummyInt");
    private static final javax.xml.namespace.QName ns1_getMailTemplates_getMailTemplatesInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "getMailTemplatesInt");
    private static final javax.xml.namespace.QName ns1_getMailTemplates_MailTemplateArray_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "MailTemplateArray");
    private static final javax.xml.namespace.QName ns1_MailTemplateArray_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "MailTemplateArray");
    private CombinedSerializer ns1_myMailTemplateArray_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_startResultDownload_startResultDownloadRequestString_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "startResultDownloadRequestString");
    private static final javax.xml.namespace.QName ns1_startResultDownload_startResultDownloadData_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "startResultDownloadData");
    private static final javax.xml.namespace.QName ns1_startResultDownloadData_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "startResultDownloadData");
    private CombinedSerializer ns1_myStartResultDownloadData_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_setDeveloperState_setDeveloperStateParams_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "setDeveloperStateParams");
    private static final javax.xml.namespace.QName ns1_setDeveloperStateParams_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "setDeveloperStateParams");
    private CombinedSerializer ns1_mySetDeveloperStateParams_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_setDeveloperState_setDeveloperStateDummyInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "setDeveloperStateDummyInt");
    private static final javax.xml.namespace.QName ns1_getStatus_getStatusRequestString_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "getStatusRequestString");
    private static final javax.xml.namespace.QName ns1_getStatus_Status_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "Status");
    private static final javax.xml.namespace.QName ns1_Status_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "Status");
    private CombinedSerializer ns1_myStatus_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_getServerInfo_ServerInfo_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "ServerInfo");
    private static final javax.xml.namespace.QName ns1_ServerInfo_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "ServerInfo");
    private CombinedSerializer ns1_myServerInfo_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_getResult_getResultRequestString_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "getResultRequestString");
    private static final javax.xml.namespace.QName ns1_getUserDataArray_getUserDataArrayDummyInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "getUserDataArrayDummyInt");
    private static final javax.xml.namespace.QName ns1_getUserDataArray_UserDataArray_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "UserDataArray");
    private static final javax.xml.namespace.QName ns1_UserDataArray_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "UserDataArray");
    private CombinedSerializer ns1_myUserDataArray_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_getAccountRequests_getAccountRequestsLenOnlyBoolean_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "getAccountRequestsLenOnlyBoolean");
    private static final javax.xml.namespace.QName ns1_getAccountRequests_RequestDataArray_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "RequestDataArray");
    private static final javax.xml.namespace.QName ns1_RequestDataArray_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "RequestDataArray");
    private CombinedSerializer ns1_myRequestDataArray_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_notifyDevelopers_notifyDevelopersParams_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "notifyDevelopersParams");
    private static final javax.xml.namespace.QName ns1_notifyDevelopersParams_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "notifyDevelopersParams");
    private CombinedSerializer ns1_myNotifyDevelopersParams_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_notifyDevelopers_notifyDevelopersDummyInt_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "notifyDevelopersDummyInt");
    private static final javax.xml.namespace.QName ns1_compareSource_eOption_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "eOption");
    private static final javax.xml.namespace.QName ns1_Option_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "Option");
    private CombinedSerializer ns1_myOption_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_compareSource_compareSourceResponseString_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "compareSourceResponseString");
    private static final java.lang.String[] myNamespace_declarations =
            new java.lang.String[]{
                    "ns0", "http://www.ipd.uni-karlsruhe.de/jplag/types"
            };

    private static final QName[] understoodHeaderNames = new QName[]{};
}
