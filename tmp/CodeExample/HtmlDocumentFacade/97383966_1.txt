public void wrapperMethod() {
    private final HtmlDocumentFacade htmlDocumentFacade;
{
        if ( notes != null )
            htmlDocumentFacade.getBody().appendChild( notes );
        htmlDocumentFacade.updateStylesheet();
}{
        return htmlDocumentFacade.getDocument();
}{
        Element span = htmlDocumentFacade.document.createElement( "span" );

        if ( style.length() != 0 )
            htmlDocumentFacade.addStyleClass( span, "s", style.toString() );
        Text textNode = htmlDocumentFacade.createText( text );
}{{
            Element bookmarkElement = htmlDocumentFacade
                    .createBookmark( bookmark.getName() );
}}{
        if ( WordToHtmlUtils.isNotEmpty( summaryInformation.getTitle() ) )
            htmlDocumentFacade.setTitle( summaryInformation.getTitle() );
        if ( WordToHtmlUtils.isNotEmpty( summaryInformation.getAuthor() ) )
            htmlDocumentFacade.addAuthor( summaryInformation.getAuthor() );
        if ( WordToHtmlUtils.isNotEmpty( summaryInformation.getKeywords() ) )
            htmlDocumentFacade.addKeywords( summaryInformation.getKeywords() );
        if ( WordToHtmlUtils.isNotEmpty( summaryInformation.getComments() ) )
            htmlDocumentFacade
                    .addDescription( summaryInformation.getComments() );
}{
        Element select = htmlDocumentFacade.createSelect();
{
            select.appendChild( htmlDocumentFacade.createOption( values[i],
                    defaultIndex == i ) );
}}{
        Element img = htmlDocumentFacade.createImage( path );
}{
        Element basicLink = htmlDocumentFacade.createHyperlink( hyperlink );
}{{
            root = htmlDocumentFacade.createBlock();
            htmlDocumentFacade.addStyleClass( root, "d",
                    "vertical-align:text-bottom;width:" + visibleWidth
                            + "in;height:" + visibleHeight + "in;" );
            Element inner = htmlDocumentFacade.createBlock();
            htmlDocumentFacade.addStyleClass( inner, "d",
                    "position:relative;width:" + visibleWidth + "in;height:"
                            + visibleHeight + "in;overflow:hidden;" );
            Element image = htmlDocumentFacade.createImage( imageSourcePath );
            htmlDocumentFacade.addStyleClass( image, "i",
                    "position:absolute;left:-" + cropLeft + ";top:-" + cropTop
                            + ";width:" + imageWidth + "in;height:"
                            + imageHeight + "in;" );
}{
            root = htmlDocumentFacade.createImage( imageSourcePath );
}}{
        currentBlock.appendChild( htmlDocumentFacade.document
                .createComment( "Image link to '"
                        + picture.suggestFullFileName() + "' can be here" ) );
}{
        block.appendChild( htmlDocumentFacade.createLineBreak() );
}{
        final String textIndexClass = htmlDocumentFacade.getOrCreateCssClass(
                "a", "vertical-align:super;font-size:smaller;" );
        Element anchor = htmlDocumentFacade.createHyperlink( "#"
                + forwardNoteLink );
{
            notes = htmlDocumentFacade.createBlock();
}
        Element note = htmlDocumentFacade.createBlock();
        Element bookmark = htmlDocumentFacade.createBookmark( forwardNoteLink );
        note.appendChild( htmlDocumentFacade.createText( " " ) );
        Element span = htmlDocumentFacade.getDocument().createElement( "span" );
}{
        flow.appendChild( htmlDocumentFacade.createLineBreak() );
}{
        Element basicLink = htmlDocumentFacade.createHyperlink( "#" + pageref );
}{
        final Element pElement = htmlDocumentFacade.createParagraph();
{{{
                    Element span = htmlDocumentFacade.getDocument()
                            .createElement( "span" );
                    htmlDocumentFacade
                            .addStyleClass( span, "s",
                                    "display: inline-block; text-indent: 0; min-width: "
                                            + ( spanMinWidth / TWIPS_PER_INCH )
                                            + "in;" );
                    Text textNode = htmlDocumentFacade.createText( bulletText
                            .substring( 0, bulletText.length() - 1 )
                            + UNICODECHAR_ZERO_WIDTH_SPACE
                            + UNICODECHAR_NO_BREAK_SPACE );
}{
                            .substring( 0, bulletText.length() - 1 ) );
}}}
        if ( style.length() > 0 )
            htmlDocumentFacade.addStyleClass( pElement, "p", style.toString() );
}{
        Element div = htmlDocumentFacade.createBlock();
        htmlDocumentFacade.addStyleClass( div, "d", getSectionStyle( section ) );
        htmlDocumentFacade.body.appendChild( div );
}{
        htmlDocumentFacade.addStyleClass( htmlDocumentFacade.body, "b",
                getSectionStyle( section ) );
        processParagraphes( wordDocument, htmlDocumentFacade.body, section,
                Integer.MIN_VALUE );
}{
        Element tableHeader = htmlDocumentFacade.createTableHeader();
        Element tableBody = htmlDocumentFacade.createTableBody();
{
            Element tableRowElement = htmlDocumentFacade.createTableRow();
{{
                    tableCellElement = htmlDocumentFacade
                            .createTableHeaderCell();
}{
                    tableCellElement = htmlDocumentFacade.createTableCell();
}{
                    tableCellElement.appendChild( htmlDocumentFacade
                            .createParagraph() );
}
                if ( tableCellStyle.length() > 0 )
                    htmlDocumentFacade.addStyleClass( tableCellElement,
                            tableCellElement.getTagName(),
                            tableCellStyle.toString() );
}
            if ( tableRowStyle.length() > 0 )
                tableRowElement.setAttribute( "class", htmlDocumentFacade
                        .getOrCreateCssClass( "r", tableRowStyle.toString() ) );
}
        final Element tableElement = htmlDocumentFacade.createTable();
        tableElement
                .setAttribute(
                        "class",
                        htmlDocumentFacade
                                .getOrCreateCssClass( "t",
                                        "table-layout:fixed;border-collapse:collapse;border-spacing:0;" ) );
}}