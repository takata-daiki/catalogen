public void wrapperMethod() {
    protected RowRecordsAggregate        rows              =     null;
{{{
                retval.rows.insertRow(row);
}}}{{{
                records.size(), cells.getPhysicalNumberOfCells(),
                rows.getPhysicalNumberOfRows(),
                records.size() + cells.getPhysicalNumberOfCells()
                + rows.getPhysicalNumberOfRows() - 2
            });
}
        return records.size() + cells.getPhysicalNumberOfCells()
               + rows.getPhysicalNumberOfRows() - 2;
}{
      index.setFirstRow(rows.getFirstRowNum());
      index.setLastRowAdd1(rows.getLastRowNum()+1);

      int blockCount = rows.getRowBlockCount();
{
        rowBlockOffset += rows.getRowBlockSize(block);
        cellBlockOffset += null == cells ? 0 : cells.getRowCellBlockSize(rows.getStartRowNumberForBlock(block),
                                                     rows.getEndRowNumberForBlock(block));
        dbCellOffset += (8 + (rows.getRowCountForBlock(block) * 2));
}}{
         RowRecord existingRow = rows.getRow(row.getRowNumber());
         if (existingRow != null)
           rows.removeRow(existingRow);
        rows.insertRow(row);
}{
        rows.removeRow(row);
}{{
            rowRecIterator = rows.getIterator();
}}{
        return rows.getRow(rownum);
}{{
            final int blocks = rows.getRowBlockCount();
            for (Iterator itr = rows.getIterator(); itr.hasNext();) {
}}}{
        Iterator iterator = rows.getIterator();
}{{
            rows.collapseRow( row );
}{
            rows.expandRow( row );
}}}